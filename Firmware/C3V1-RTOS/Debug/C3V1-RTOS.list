
C3V1-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ed34  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005b20  0801eef8  0801eef8  0002eef8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024a18  08024a18  00040278  2**0
                  CONTENTS
  4 .ARM          00000008  08024a18  08024a18  00034a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08024a20  08024a20  00040278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08024a20  08024a20  00034a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08024a24  08024a24  00034a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20000000  08024a28  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00037030  20000278  08024ca0  00040278  2**2
                  ALLOC
 10 ._user_heap_stack 00001800  200372a8  08024ca0  000472a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040278  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032f68  00000000  00000000  000402a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000070b0  00000000  00000000  00073210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002520  00000000  00000000  0007a2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00035f4f  00000000  00000000  0007c7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00032a10  00000000  00000000  000b272f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0012d4ea  00000000  00000000  000e513f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00212629  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000021d0  00000000  00000000  00212680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000af64  00000000  00000000  00214850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000278 	.word	0x20000278
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0801eedc 	.word	0x0801eedc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000027c 	.word	0x2000027c
 80001fc:	0801eedc 	.word	0x0801eedc

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd6:	f000 b9f5 	b.w	80010c4 <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f883 	bl	8000df4 <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f876 	bl	8000df4 <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f865 	bl	8000df4 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f857 	bl	8000df4 <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_uldivmod>:
 8000d58:	b953      	cbnz	r3, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5a:	b94a      	cbnz	r2, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	bf08      	it	eq
 8000d60:	2800      	cmpeq	r0, #0
 8000d62:	bf1c      	itt	ne
 8000d64:	f04f 31ff 	movne.w	r1, #4294967295
 8000d68:	f04f 30ff 	movne.w	r0, #4294967295
 8000d6c:	f000 b9aa 	b.w	80010c4 <__aeabi_idiv0>
 8000d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d78:	f000 f83c 	bl	8000df4 <__udivmoddi4>
 8000d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d84:	b004      	add	sp, #16
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_d2lz>:
 8000d88:	b538      	push	{r3, r4, r5, lr}
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4604      	mov	r4, r0
 8000d90:	460d      	mov	r5, r1
 8000d92:	f7ff febb 	bl	8000b0c <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x1c>
 8000d98:	4620      	mov	r0, r4
 8000d9a:	4629      	mov	r1, r5
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4620      	mov	r0, r4
 8000da6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <__aeabi_d2ulz+0x34>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fc31 	bl	8000628 <__aeabi_dmul>
 8000dc6:	f7ff ff07 	bl	8000bd8 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fbb2 	bl	8000534 <__aeabi_ui2d>
 8000dd0:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f7ff fc28 	bl	8000628 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff fa6a 	bl	80002b8 <__aeabi_dsub>
 8000de4:	f7ff fef8 	bl	8000bd8 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <__udivmoddi4>:
 8000df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df8:	9d08      	ldr	r5, [sp, #32]
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	468e      	mov	lr, r1
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d14d      	bne.n	8000e9e <__udivmoddi4+0xaa>
 8000e02:	428a      	cmp	r2, r1
 8000e04:	4694      	mov	ip, r2
 8000e06:	d969      	bls.n	8000edc <__udivmoddi4+0xe8>
 8000e08:	fab2 f282 	clz	r2, r2
 8000e0c:	b152      	cbz	r2, 8000e24 <__udivmoddi4+0x30>
 8000e0e:	fa01 f302 	lsl.w	r3, r1, r2
 8000e12:	f1c2 0120 	rsb	r1, r2, #32
 8000e16:	fa20 f101 	lsr.w	r1, r0, r1
 8000e1a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1e:	ea41 0e03 	orr.w	lr, r1, r3
 8000e22:	4094      	lsls	r4, r2
 8000e24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e28:	0c21      	lsrs	r1, r4, #16
 8000e2a:	fbbe f6f8 	udiv	r6, lr, r8
 8000e2e:	fa1f f78c 	uxth.w	r7, ip
 8000e32:	fb08 e316 	mls	r3, r8, r6, lr
 8000e36:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e3a:	fb06 f107 	mul.w	r1, r6, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d90a      	bls.n	8000e58 <__udivmoddi4+0x64>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e4a:	f080 811f 	bcs.w	800108c <__udivmoddi4+0x298>
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	f240 811c 	bls.w	800108c <__udivmoddi4+0x298>
 8000e54:	3e02      	subs	r6, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1a5b      	subs	r3, r3, r1
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3310 	mls	r3, r8, r0, r3
 8000e64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e68:	fb00 f707 	mul.w	r7, r0, r7
 8000e6c:	42a7      	cmp	r7, r4
 8000e6e:	d90a      	bls.n	8000e86 <__udivmoddi4+0x92>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e78:	f080 810a 	bcs.w	8001090 <__udivmoddi4+0x29c>
 8000e7c:	42a7      	cmp	r7, r4
 8000e7e:	f240 8107 	bls.w	8001090 <__udivmoddi4+0x29c>
 8000e82:	4464      	add	r4, ip
 8000e84:	3802      	subs	r0, #2
 8000e86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e8a:	1be4      	subs	r4, r4, r7
 8000e8c:	2600      	movs	r6, #0
 8000e8e:	b11d      	cbz	r5, 8000e98 <__udivmoddi4+0xa4>
 8000e90:	40d4      	lsrs	r4, r2
 8000e92:	2300      	movs	r3, #0
 8000e94:	e9c5 4300 	strd	r4, r3, [r5]
 8000e98:	4631      	mov	r1, r6
 8000e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d909      	bls.n	8000eb6 <__udivmoddi4+0xc2>
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	f000 80ef 	beq.w	8001086 <__udivmoddi4+0x292>
 8000ea8:	2600      	movs	r6, #0
 8000eaa:	e9c5 0100 	strd	r0, r1, [r5]
 8000eae:	4630      	mov	r0, r6
 8000eb0:	4631      	mov	r1, r6
 8000eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb6:	fab3 f683 	clz	r6, r3
 8000eba:	2e00      	cmp	r6, #0
 8000ebc:	d14a      	bne.n	8000f54 <__udivmoddi4+0x160>
 8000ebe:	428b      	cmp	r3, r1
 8000ec0:	d302      	bcc.n	8000ec8 <__udivmoddi4+0xd4>
 8000ec2:	4282      	cmp	r2, r0
 8000ec4:	f200 80f9 	bhi.w	80010ba <__udivmoddi4+0x2c6>
 8000ec8:	1a84      	subs	r4, r0, r2
 8000eca:	eb61 0303 	sbc.w	r3, r1, r3
 8000ece:	2001      	movs	r0, #1
 8000ed0:	469e      	mov	lr, r3
 8000ed2:	2d00      	cmp	r5, #0
 8000ed4:	d0e0      	beq.n	8000e98 <__udivmoddi4+0xa4>
 8000ed6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eda:	e7dd      	b.n	8000e98 <__udivmoddi4+0xa4>
 8000edc:	b902      	cbnz	r2, 8000ee0 <__udivmoddi4+0xec>
 8000ede:	deff      	udf	#255	; 0xff
 8000ee0:	fab2 f282 	clz	r2, r2
 8000ee4:	2a00      	cmp	r2, #0
 8000ee6:	f040 8092 	bne.w	800100e <__udivmoddi4+0x21a>
 8000eea:	eba1 010c 	sub.w	r1, r1, ip
 8000eee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef2:	fa1f fe8c 	uxth.w	lr, ip
 8000ef6:	2601      	movs	r6, #1
 8000ef8:	0c20      	lsrs	r0, r4, #16
 8000efa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000efe:	fb07 1113 	mls	r1, r7, r3, r1
 8000f02:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f06:	fb0e f003 	mul.w	r0, lr, r3
 8000f0a:	4288      	cmp	r0, r1
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x12c>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f16:	d202      	bcs.n	8000f1e <__udivmoddi4+0x12a>
 8000f18:	4288      	cmp	r0, r1
 8000f1a:	f200 80cb 	bhi.w	80010b4 <__udivmoddi4+0x2c0>
 8000f1e:	4643      	mov	r3, r8
 8000f20:	1a09      	subs	r1, r1, r0
 8000f22:	b2a4      	uxth	r4, r4
 8000f24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f28:	fb07 1110 	mls	r1, r7, r0, r1
 8000f2c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f30:	fb0e fe00 	mul.w	lr, lr, r0
 8000f34:	45a6      	cmp	lr, r4
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x156>
 8000f38:	eb1c 0404 	adds.w	r4, ip, r4
 8000f3c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f40:	d202      	bcs.n	8000f48 <__udivmoddi4+0x154>
 8000f42:	45a6      	cmp	lr, r4
 8000f44:	f200 80bb 	bhi.w	80010be <__udivmoddi4+0x2ca>
 8000f48:	4608      	mov	r0, r1
 8000f4a:	eba4 040e 	sub.w	r4, r4, lr
 8000f4e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f52:	e79c      	b.n	8000e8e <__udivmoddi4+0x9a>
 8000f54:	f1c6 0720 	rsb	r7, r6, #32
 8000f58:	40b3      	lsls	r3, r6
 8000f5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f62:	fa20 f407 	lsr.w	r4, r0, r7
 8000f66:	fa01 f306 	lsl.w	r3, r1, r6
 8000f6a:	431c      	orrs	r4, r3
 8000f6c:	40f9      	lsrs	r1, r7
 8000f6e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f72:	fa00 f306 	lsl.w	r3, r0, r6
 8000f76:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f7a:	0c20      	lsrs	r0, r4, #16
 8000f7c:	fa1f fe8c 	uxth.w	lr, ip
 8000f80:	fb09 1118 	mls	r1, r9, r8, r1
 8000f84:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f88:	fb08 f00e 	mul.w	r0, r8, lr
 8000f8c:	4288      	cmp	r0, r1
 8000f8e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f92:	d90b      	bls.n	8000fac <__udivmoddi4+0x1b8>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f9c:	f080 8088 	bcs.w	80010b0 <__udivmoddi4+0x2bc>
 8000fa0:	4288      	cmp	r0, r1
 8000fa2:	f240 8085 	bls.w	80010b0 <__udivmoddi4+0x2bc>
 8000fa6:	f1a8 0802 	sub.w	r8, r8, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	1a09      	subs	r1, r1, r0
 8000fae:	b2a4      	uxth	r4, r4
 8000fb0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000fb4:	fb09 1110 	mls	r1, r9, r0, r1
 8000fb8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fc0:	458e      	cmp	lr, r1
 8000fc2:	d908      	bls.n	8000fd6 <__udivmoddi4+0x1e2>
 8000fc4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fcc:	d26c      	bcs.n	80010a8 <__udivmoddi4+0x2b4>
 8000fce:	458e      	cmp	lr, r1
 8000fd0:	d96a      	bls.n	80010a8 <__udivmoddi4+0x2b4>
 8000fd2:	3802      	subs	r0, #2
 8000fd4:	4461      	add	r1, ip
 8000fd6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fda:	fba0 9402 	umull	r9, r4, r0, r2
 8000fde:	eba1 010e 	sub.w	r1, r1, lr
 8000fe2:	42a1      	cmp	r1, r4
 8000fe4:	46c8      	mov	r8, r9
 8000fe6:	46a6      	mov	lr, r4
 8000fe8:	d356      	bcc.n	8001098 <__udivmoddi4+0x2a4>
 8000fea:	d053      	beq.n	8001094 <__udivmoddi4+0x2a0>
 8000fec:	b15d      	cbz	r5, 8001006 <__udivmoddi4+0x212>
 8000fee:	ebb3 0208 	subs.w	r2, r3, r8
 8000ff2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ff6:	fa01 f707 	lsl.w	r7, r1, r7
 8000ffa:	fa22 f306 	lsr.w	r3, r2, r6
 8000ffe:	40f1      	lsrs	r1, r6
 8001000:	431f      	orrs	r7, r3
 8001002:	e9c5 7100 	strd	r7, r1, [r5]
 8001006:	2600      	movs	r6, #0
 8001008:	4631      	mov	r1, r6
 800100a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800100e:	f1c2 0320 	rsb	r3, r2, #32
 8001012:	40d8      	lsrs	r0, r3
 8001014:	fa0c fc02 	lsl.w	ip, ip, r2
 8001018:	fa21 f303 	lsr.w	r3, r1, r3
 800101c:	4091      	lsls	r1, r2
 800101e:	4301      	orrs	r1, r0
 8001020:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001024:	fa1f fe8c 	uxth.w	lr, ip
 8001028:	fbb3 f0f7 	udiv	r0, r3, r7
 800102c:	fb07 3610 	mls	r6, r7, r0, r3
 8001030:	0c0b      	lsrs	r3, r1, #16
 8001032:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001036:	fb00 f60e 	mul.w	r6, r0, lr
 800103a:	429e      	cmp	r6, r3
 800103c:	fa04 f402 	lsl.w	r4, r4, r2
 8001040:	d908      	bls.n	8001054 <__udivmoddi4+0x260>
 8001042:	eb1c 0303 	adds.w	r3, ip, r3
 8001046:	f100 38ff 	add.w	r8, r0, #4294967295
 800104a:	d22f      	bcs.n	80010ac <__udivmoddi4+0x2b8>
 800104c:	429e      	cmp	r6, r3
 800104e:	d92d      	bls.n	80010ac <__udivmoddi4+0x2b8>
 8001050:	3802      	subs	r0, #2
 8001052:	4463      	add	r3, ip
 8001054:	1b9b      	subs	r3, r3, r6
 8001056:	b289      	uxth	r1, r1
 8001058:	fbb3 f6f7 	udiv	r6, r3, r7
 800105c:	fb07 3316 	mls	r3, r7, r6, r3
 8001060:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001064:	fb06 f30e 	mul.w	r3, r6, lr
 8001068:	428b      	cmp	r3, r1
 800106a:	d908      	bls.n	800107e <__udivmoddi4+0x28a>
 800106c:	eb1c 0101 	adds.w	r1, ip, r1
 8001070:	f106 38ff 	add.w	r8, r6, #4294967295
 8001074:	d216      	bcs.n	80010a4 <__udivmoddi4+0x2b0>
 8001076:	428b      	cmp	r3, r1
 8001078:	d914      	bls.n	80010a4 <__udivmoddi4+0x2b0>
 800107a:	3e02      	subs	r6, #2
 800107c:	4461      	add	r1, ip
 800107e:	1ac9      	subs	r1, r1, r3
 8001080:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001084:	e738      	b.n	8000ef8 <__udivmoddi4+0x104>
 8001086:	462e      	mov	r6, r5
 8001088:	4628      	mov	r0, r5
 800108a:	e705      	b.n	8000e98 <__udivmoddi4+0xa4>
 800108c:	4606      	mov	r6, r0
 800108e:	e6e3      	b.n	8000e58 <__udivmoddi4+0x64>
 8001090:	4618      	mov	r0, r3
 8001092:	e6f8      	b.n	8000e86 <__udivmoddi4+0x92>
 8001094:	454b      	cmp	r3, r9
 8001096:	d2a9      	bcs.n	8000fec <__udivmoddi4+0x1f8>
 8001098:	ebb9 0802 	subs.w	r8, r9, r2
 800109c:	eb64 0e0c 	sbc.w	lr, r4, ip
 80010a0:	3801      	subs	r0, #1
 80010a2:	e7a3      	b.n	8000fec <__udivmoddi4+0x1f8>
 80010a4:	4646      	mov	r6, r8
 80010a6:	e7ea      	b.n	800107e <__udivmoddi4+0x28a>
 80010a8:	4620      	mov	r0, r4
 80010aa:	e794      	b.n	8000fd6 <__udivmoddi4+0x1e2>
 80010ac:	4640      	mov	r0, r8
 80010ae:	e7d1      	b.n	8001054 <__udivmoddi4+0x260>
 80010b0:	46d0      	mov	r8, sl
 80010b2:	e77b      	b.n	8000fac <__udivmoddi4+0x1b8>
 80010b4:	3b02      	subs	r3, #2
 80010b6:	4461      	add	r1, ip
 80010b8:	e732      	b.n	8000f20 <__udivmoddi4+0x12c>
 80010ba:	4630      	mov	r0, r6
 80010bc:	e709      	b.n	8000ed2 <__udivmoddi4+0xde>
 80010be:	4464      	add	r4, ip
 80010c0:	3802      	subs	r0, #2
 80010c2:	e742      	b.n	8000f4a <__udivmoddi4+0x156>

080010c4 <__aeabi_idiv0>:
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop

080010c8 <GFX_DrawPixelScreen>:

#if USING_STRINGS == 1
const uint8_t *font;
uint8_t size = 1;
void GFX_DrawPixelScreen(uint16_t x, uint16_t y, uint8_t color, Screen_TypeDef Screen)
{
 80010c8:	b590      	push	{r4, r7, lr}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4604      	mov	r4, r0
 80010d0:	4608      	mov	r0, r1
 80010d2:	4611      	mov	r1, r2
 80010d4:	461a      	mov	r2, r3
 80010d6:	4623      	mov	r3, r4
 80010d8:	80fb      	strh	r3, [r7, #6]
 80010da:	4603      	mov	r3, r0
 80010dc:	80bb      	strh	r3, [r7, #4]
 80010de:	460b      	mov	r3, r1
 80010e0:	70fb      	strb	r3, [r7, #3]
 80010e2:	4613      	mov	r3, r2
 80010e4:	70bb      	strb	r3, [r7, #2]
   if(Screen == OLED)
 80010e6:	78bb      	ldrb	r3, [r7, #2]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d108      	bne.n	80010fe <GFX_DrawPixelScreen+0x36>
   {
      GFX_DrawPixelOled(x, y, color);
 80010ec:	88fb      	ldrh	r3, [r7, #6]
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	88ba      	ldrh	r2, [r7, #4]
 80010f2:	b2d1      	uxtb	r1, r2
 80010f4:	78fa      	ldrb	r2, [r7, #3]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f00b fada 	bl	800c6b0 <ssd1306_set_pixel>
   }
   else if(Screen == E_PAPIER)
   {
      GFX_DrawPixelEpapier(x, y, color);
   }
}
 80010fc:	e008      	b.n	8001110 <GFX_DrawPixelScreen+0x48>
   else if(Screen == E_PAPIER)
 80010fe:	78bb      	ldrb	r3, [r7, #2]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d105      	bne.n	8001110 <GFX_DrawPixelScreen+0x48>
      GFX_DrawPixelEpapier(x, y, color);
 8001104:	78fa      	ldrb	r2, [r7, #3]
 8001106:	88b9      	ldrh	r1, [r7, #4]
 8001108:	88fb      	ldrh	r3, [r7, #6]
 800110a:	4618      	mov	r0, r3
 800110c:	f003 fb28 	bl	8004760 <e_papier_set_pixel>
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	bd90      	pop	{r4, r7, pc}

08001118 <GFX_SetFont>:
void GFX_SetFont(const uint8_t *font_t)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
   font = font_t;
 8001120:	4a04      	ldr	r2, [pc, #16]	; (8001134 <GFX_SetFont+0x1c>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6013      	str	r3, [r2, #0]
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	20000294 	.word	0x20000294

08001138 <GFX_DrawChar>:
{
   return size;
}

void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background, Screen_TypeDef Screen)
{
 8001138:	b590      	push	{r4, r7, lr}
 800113a:	b089      	sub	sp, #36	; 0x24
 800113c:	af02      	add	r7, sp, #8
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	4611      	mov	r1, r2
 8001144:	461a      	mov	r2, r3
 8001146:	460b      	mov	r3, r1
 8001148:	71fb      	strb	r3, [r7, #7]
 800114a:	4613      	mov	r3, r2
 800114c:	71bb      	strb	r3, [r7, #6]
   if(chr > 0x7E)
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	2b7e      	cmp	r3, #126	; 0x7e
 8001152:	f200 80a7 	bhi.w	80012a4 <GFX_DrawChar+0x16c>
      return; // chr > '~'

   for(uint8_t i = 0; i < font[1]; i++) // Each column (Width)
 8001156:	2300      	movs	r3, #0
 8001158:	75fb      	strb	r3, [r7, #23]
 800115a:	e09a      	b.n	8001292 <GFX_DrawChar+0x15a>
   {
      uint8_t line = (uint8_t)font[(chr - 0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 800115c:	4b53      	ldr	r3, [pc, #332]	; (80012ac <GFX_DrawChar+0x174>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	3b20      	subs	r3, #32
 8001164:	4951      	ldr	r1, [pc, #324]	; (80012ac <GFX_DrawChar+0x174>)
 8001166:	6809      	ldr	r1, [r1, #0]
 8001168:	3101      	adds	r1, #1
 800116a:	7809      	ldrb	r1, [r1, #0]
 800116c:	fb03 f101 	mul.w	r1, r3, r1
 8001170:	7dfb      	ldrb	r3, [r7, #23]
 8001172:	440b      	add	r3, r1
 8001174:	3302      	adds	r3, #2
 8001176:	4413      	add	r3, r2
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	75bb      	strb	r3, [r7, #22]

      for(int8_t j = 0; j < font[0]; j++, line >>= 1) // For each pixel in column
 800117c:	2300      	movs	r3, #0
 800117e:	757b      	strb	r3, [r7, #21]
 8001180:	e07c      	b.n	800127c <GFX_DrawChar+0x144>
      {
         if(line & 1) // Check last pixel in line
 8001182:	7dbb      	ldrb	r3, [r7, #22]
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	2b00      	cmp	r3, #0
 800118a:	d034      	beq.n	80011f6 <GFX_DrawChar+0xbe>
         {
            if(size == 1)
 800118c:	4b48      	ldr	r3, [pc, #288]	; (80012b0 <GFX_DrawChar+0x178>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d112      	bne.n	80011ba <GFX_DrawChar+0x82>
               GFX_DrawPixelScreen(x + i, y + j, color, Screen); // Draw this pixel
 8001194:	7dfb      	ldrb	r3, [r7, #23]
 8001196:	b29a      	uxth	r2, r3
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	b29b      	uxth	r3, r3
 800119c:	4413      	add	r3, r2
 800119e:	b298      	uxth	r0, r3
 80011a0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	4413      	add	r3, r2
 80011ac:	b299      	uxth	r1, r3
 80011ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011b2:	79ba      	ldrb	r2, [r7, #6]
 80011b4:	f7ff ff88 	bl	80010c8 <GFX_DrawPixelScreen>
 80011b8:	e057      	b.n	800126a <GFX_DrawChar+0x132>
            else
               GFX_DrawFillRectangle(x + i * size, y + j * size, size, size, color, Screen); // Or bigger pixel
 80011ba:	7dfb      	ldrb	r3, [r7, #23]
 80011bc:	4a3c      	ldr	r2, [pc, #240]	; (80012b0 <GFX_DrawChar+0x178>)
 80011be:	7812      	ldrb	r2, [r2, #0]
 80011c0:	fb03 f202 	mul.w	r2, r3, r2
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	18d0      	adds	r0, r2, r3
 80011c8:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80011cc:	4a38      	ldr	r2, [pc, #224]	; (80012b0 <GFX_DrawChar+0x178>)
 80011ce:	7812      	ldrb	r2, [r2, #0]
 80011d0:	fb03 f202 	mul.w	r2, r3, r2
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	18d1      	adds	r1, r2, r3
 80011d8:	4b35      	ldr	r3, [pc, #212]	; (80012b0 <GFX_DrawChar+0x178>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	b29a      	uxth	r2, r3
 80011de:	4b34      	ldr	r3, [pc, #208]	; (80012b0 <GFX_DrawChar+0x178>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	b29c      	uxth	r4, r3
 80011e4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011e8:	9301      	str	r3, [sp, #4]
 80011ea:	79bb      	ldrb	r3, [r7, #6]
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	4623      	mov	r3, r4
 80011f0:	f000 f9d1 	bl	8001596 <GFX_DrawFillRectangle>
 80011f4:	e039      	b.n	800126a <GFX_DrawChar+0x132>
         }
         else if(background == 0)
 80011f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d135      	bne.n	800126a <GFX_DrawChar+0x132>
         {
            if(size == 1)
 80011fe:	4b2c      	ldr	r3, [pc, #176]	; (80012b0 <GFX_DrawChar+0x178>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d113      	bne.n	800122e <GFX_DrawChar+0xf6>
               GFX_DrawPixelScreen(x + i, y + j, background, Screen); // Draw black BG
 8001206:	7dfb      	ldrb	r3, [r7, #23]
 8001208:	b29a      	uxth	r2, r3
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	b29b      	uxth	r3, r3
 800120e:	4413      	add	r3, r2
 8001210:	b298      	uxth	r0, r3
 8001212:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001216:	b29a      	uxth	r2, r3
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	b29b      	uxth	r3, r3
 800121c:	4413      	add	r3, r2
 800121e:	b299      	uxth	r1, r3
 8001220:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001224:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001228:	f7ff ff4e 	bl	80010c8 <GFX_DrawPixelScreen>
 800122c:	e01d      	b.n	800126a <GFX_DrawChar+0x132>
            else
               GFX_DrawFillRectangle(x + i * size, y + j * size, size, size, background, Screen); // Or bigger
 800122e:	7dfb      	ldrb	r3, [r7, #23]
 8001230:	4a1f      	ldr	r2, [pc, #124]	; (80012b0 <GFX_DrawChar+0x178>)
 8001232:	7812      	ldrb	r2, [r2, #0]
 8001234:	fb03 f202 	mul.w	r2, r3, r2
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	18d0      	adds	r0, r2, r3
 800123c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001240:	4a1b      	ldr	r2, [pc, #108]	; (80012b0 <GFX_DrawChar+0x178>)
 8001242:	7812      	ldrb	r2, [r2, #0]
 8001244:	fb03 f202 	mul.w	r2, r3, r2
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	18d1      	adds	r1, r2, r3
 800124c:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <GFX_DrawChar+0x178>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	b29a      	uxth	r2, r3
 8001252:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <GFX_DrawChar+0x178>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	b29c      	uxth	r4, r3
 8001258:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800125c:	9301      	str	r3, [sp, #4]
 800125e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	4623      	mov	r3, r4
 8001266:	f000 f996 	bl	8001596 <GFX_DrawFillRectangle>
      for(int8_t j = 0; j < font[0]; j++, line >>= 1) // For each pixel in column
 800126a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800126e:	b2db      	uxtb	r3, r3
 8001270:	3301      	adds	r3, #1
 8001272:	b2db      	uxtb	r3, r3
 8001274:	757b      	strb	r3, [r7, #21]
 8001276:	7dbb      	ldrb	r3, [r7, #22]
 8001278:	085b      	lsrs	r3, r3, #1
 800127a:	75bb      	strb	r3, [r7, #22]
 800127c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001280:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <GFX_DrawChar+0x174>)
 8001282:	6812      	ldr	r2, [r2, #0]
 8001284:	7812      	ldrb	r2, [r2, #0]
 8001286:	4293      	cmp	r3, r2
 8001288:	f6ff af7b 	blt.w	8001182 <GFX_DrawChar+0x4a>
   for(uint8_t i = 0; i < font[1]; i++) // Each column (Width)
 800128c:	7dfb      	ldrb	r3, [r7, #23]
 800128e:	3301      	adds	r3, #1
 8001290:	75fb      	strb	r3, [r7, #23]
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <GFX_DrawChar+0x174>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	3301      	adds	r3, #1
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	7dfa      	ldrb	r2, [r7, #23]
 800129c:	429a      	cmp	r2, r3
 800129e:	f4ff af5d 	bcc.w	800115c <GFX_DrawChar+0x24>
 80012a2:	e000      	b.n	80012a6 <GFX_DrawChar+0x16e>
      return; // chr > '~'
 80012a4:	bf00      	nop
         }
      }
   }
}
 80012a6:	371c      	adds	r7, #28
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd90      	pop	{r4, r7, pc}
 80012ac:	20000294 	.word	0x20000294
 80012b0:	20000000 	.word	0x20000000

080012b4 <GFX_DrawString>:

void GFX_DrawString(int x, int y, char *str, uint8_t color, uint8_t background, Screen_TypeDef Screen)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b088      	sub	sp, #32
 80012b8:	af02      	add	r7, sp, #8
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
 80012c0:	70fb      	strb	r3, [r7, #3]
   int x_tmp = x;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	617b      	str	r3, [r7, #20]

   char znak;
   znak = *str;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	74fb      	strb	r3, [r7, #19]

   while(*str++)
 80012cc:	e040      	b.n	8001350 <GFX_DrawString+0x9c>
   {
      GFX_DrawChar(x_tmp, y, znak, color, background, Screen); // Draw current char
 80012ce:	78f9      	ldrb	r1, [r7, #3]
 80012d0:	7cfa      	ldrb	r2, [r7, #19]
 80012d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80012d6:	9301      	str	r3, [sp, #4]
 80012d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012dc:	9300      	str	r3, [sp, #0]
 80012de:	460b      	mov	r3, r1
 80012e0:	68b9      	ldr	r1, [r7, #8]
 80012e2:	6978      	ldr	r0, [r7, #20]
 80012e4:	f7ff ff28 	bl	8001138 <GFX_DrawChar>

      x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 80012e8:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <GFX_DrawString+0xb4>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	3301      	adds	r3, #1
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	461a      	mov	r2, r3
 80012f2:	4b1e      	ldr	r3, [pc, #120]	; (800136c <GFX_DrawString+0xb8>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	fb02 f303 	mul.w	r3, r2, r3
 80012fa:	3301      	adds	r3, #1
 80012fc:	697a      	ldr	r2, [r7, #20]
 80012fe:	4413      	add	r3, r2
 8001300:	617b      	str	r3, [r7, #20]

      if(background == 0) // Draw black space if needed
 8001302:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d11f      	bne.n	800134a <GFX_DrawString+0x96>
      {
         for(uint8_t i = 0; i < (font[0] * size); i++)
 800130a:	2300      	movs	r3, #0
 800130c:	74bb      	strb	r3, [r7, #18]
 800130e:	e011      	b.n	8001334 <GFX_DrawString+0x80>
         {
            GFX_DrawPixelScreen(x_tmp - 1, y + i, PIXEL_BLACK, Screen);
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	b29b      	uxth	r3, r3
 8001314:	3b01      	subs	r3, #1
 8001316:	b298      	uxth	r0, r3
 8001318:	7cbb      	ldrb	r3, [r7, #18]
 800131a:	b29a      	uxth	r2, r3
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	b29b      	uxth	r3, r3
 8001320:	4413      	add	r3, r2
 8001322:	b299      	uxth	r1, r3
 8001324:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001328:	2200      	movs	r2, #0
 800132a:	f7ff fecd 	bl	80010c8 <GFX_DrawPixelScreen>
         for(uint8_t i = 0; i < (font[0] * size); i++)
 800132e:	7cbb      	ldrb	r3, [r7, #18]
 8001330:	3301      	adds	r3, #1
 8001332:	74bb      	strb	r3, [r7, #18]
 8001334:	7cba      	ldrb	r2, [r7, #18]
 8001336:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <GFX_DrawString+0xb4>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	4619      	mov	r1, r3
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <GFX_DrawString+0xb8>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	fb01 f303 	mul.w	r3, r1, r3
 8001346:	429a      	cmp	r2, r3
 8001348:	dbe2      	blt.n	8001310 <GFX_DrawString+0x5c>
         }
      }

      znak = *str; // Next char
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	74fb      	strb	r3, [r7, #19]
   while(*str++)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	1c5a      	adds	r2, r3, #1
 8001354:	607a      	str	r2, [r7, #4]
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1b8      	bne.n	80012ce <GFX_DrawString+0x1a>
   }
}
 800135c:	bf00      	nop
 800135e:	bf00      	nop
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000294 	.word	0x20000294
 800136c:	20000000 	.word	0x20000000

08001370 <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint8_t color, Screen_TypeDef Screen)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08c      	sub	sp, #48	; 0x30
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
 800137c:	603b      	str	r3, [r7, #0]
   int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 800137e:	683a      	ldr	r2, [r7, #0]
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001388:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800138c:	6879      	ldr	r1, [r7, #4]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	1acb      	subs	r3, r1, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	bfb8      	it	lt
 8001396:	425b      	neglt	r3, r3
 8001398:	429a      	cmp	r2, r3
 800139a:	bfcc      	ite	gt
 800139c:	2301      	movgt	r3, #1
 800139e:	2300      	movle	r3, #0
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	857b      	strh	r3, [r7, #42]	; 0x2a

   if(steep)
 80013a4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d00b      	beq.n	80013c4 <GFX_WriteLine+0x54>
   {
      _swap_int(x_start, y_start);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b6:	60bb      	str	r3, [r7, #8]
      _swap_int(x_end, y_end);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	623b      	str	r3, [r7, #32]
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	6a3b      	ldr	r3, [r7, #32]
 80013c2:	603b      	str	r3, [r7, #0]
   }

   if(x_start > x_end)
 80013c4:	68fa      	ldr	r2, [r7, #12]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	dd0b      	ble.n	80013e4 <GFX_WriteLine+0x74>
   {
      _swap_int(x_start, x_end);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	61fb      	str	r3, [r7, #28]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	607b      	str	r3, [r7, #4]
      _swap_int(y_start, y_end);
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	61bb      	str	r3, [r7, #24]
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	603b      	str	r3, [r7, #0]
   }

   int16_t dx, dy;
   dx = x_end - x_start;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	82fb      	strh	r3, [r7, #22]
   dy = abs(y_end - y_start);
 80013f2:	683a      	ldr	r2, [r7, #0]
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	bfb8      	it	lt
 80013fc:	425b      	neglt	r3, r3
 80013fe:	82bb      	strh	r3, [r7, #20]

   int16_t err = dx / 2;
 8001400:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001404:	0fda      	lsrs	r2, r3, #31
 8001406:	4413      	add	r3, r2
 8001408:	105b      	asrs	r3, r3, #1
 800140a:	85fb      	strh	r3, [r7, #46]	; 0x2e
   int16_t ystep;

   if(y_start < y_end)
 800140c:	68ba      	ldr	r2, [r7, #8]
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	429a      	cmp	r2, r3
 8001412:	da02      	bge.n	800141a <GFX_WriteLine+0xaa>
   {
      ystep = 1;
 8001414:	2301      	movs	r3, #1
 8001416:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001418:	e032      	b.n	8001480 <GFX_WriteLine+0x110>
   }
   else
   {
      ystep = -1;
 800141a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800141e:	85bb      	strh	r3, [r7, #44]	; 0x2c
   }

   for(; x_start <= x_end; x_start++)
 8001420:	e02e      	b.n	8001480 <GFX_WriteLine+0x110>
   {
      if(steep)
 8001422:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001426:	2b00      	cmp	r3, #0
 8001428:	d00a      	beq.n	8001440 <GFX_WriteLine+0xd0>
      {
         GFX_DrawPixelScreen(y_start, x_start, color, Screen);
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	b298      	uxth	r0, r3
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	b299      	uxth	r1, r3
 8001432:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001436:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800143a:	f7ff fe45 	bl	80010c8 <GFX_DrawPixelScreen>
 800143e:	e009      	b.n	8001454 <GFX_WriteLine+0xe4>
      }
      else
      {
         GFX_DrawPixelScreen(x_start, y_start, color, Screen);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	b298      	uxth	r0, r3
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	b299      	uxth	r1, r3
 8001448:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800144c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001450:	f7ff fe3a 	bl	80010c8 <GFX_DrawPixelScreen>
      }
      err -= dy;
 8001454:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001456:	8abb      	ldrh	r3, [r7, #20]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	b29b      	uxth	r3, r3
 800145c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      if(err < 0)
 800145e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001462:	2b00      	cmp	r3, #0
 8001464:	da09      	bge.n	800147a <GFX_WriteLine+0x10a>
      {
         y_start += ystep;
 8001466:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800146a:	68ba      	ldr	r2, [r7, #8]
 800146c:	4413      	add	r3, r2
 800146e:	60bb      	str	r3, [r7, #8]
         err += dx;
 8001470:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001472:	8afb      	ldrh	r3, [r7, #22]
 8001474:	4413      	add	r3, r2
 8001476:	b29b      	uxth	r3, r3
 8001478:	85fb      	strh	r3, [r7, #46]	; 0x2e
   for(; x_start <= x_end; x_start++)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	3301      	adds	r3, #1
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	429a      	cmp	r2, r3
 8001486:	ddcc      	ble.n	8001422 <GFX_WriteLine+0xb2>
      }
   }
}
 8001488:	bf00      	nop
 800148a:	bf00      	nop
 800148c:	3730      	adds	r7, #48	; 0x30
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint8_t color, Screen_TypeDef Screen)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b086      	sub	sp, #24
 8001496:	af02      	add	r7, sp, #8
 8001498:	60f8      	str	r0, [r7, #12]
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	607a      	str	r2, [r7, #4]
 800149e:	70fb      	strb	r3, [r7, #3]
   GFX_WriteLine(x_start, y_start, x_start, y_start + h - 1, color, Screen);
 80014a0:	68ba      	ldr	r2, [r7, #8]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	1e5a      	subs	r2, r3, #1
 80014a8:	7e3b      	ldrb	r3, [r7, #24]
 80014aa:	9301      	str	r3, [sp, #4]
 80014ac:	78fb      	ldrb	r3, [r7, #3]
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	4613      	mov	r3, r2
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	68b9      	ldr	r1, [r7, #8]
 80014b6:	68f8      	ldr	r0, [r7, #12]
 80014b8:	f7ff ff5a 	bl	8001370 <GFX_WriteLine>
}
 80014bc:	bf00      	nop
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, uint8_t color, Screen_TypeDef Screen)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af02      	add	r7, sp, #8
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
 80014d0:	70fb      	strb	r3, [r7, #3]
   GFX_WriteLine(x_start, y_start, x_start + w - 1, y_start, color, Screen);
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4413      	add	r3, r2
 80014d8:	1e5a      	subs	r2, r3, #1
 80014da:	7e3b      	ldrb	r3, [r7, #24]
 80014dc:	9301      	str	r3, [sp, #4]
 80014de:	78fb      	ldrb	r3, [r7, #3]
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	68b9      	ldr	r1, [r7, #8]
 80014e6:	68f8      	ldr	r0, [r7, #12]
 80014e8:	f7ff ff42 	bl	8001370 <GFX_WriteLine>
}
 80014ec:	bf00      	nop
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <GFX_DrawLine>:

void GFX_DrawLine(int x_start, int y_start, int x_end, int y_end, uint8_t color, Screen_TypeDef Screen)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b088      	sub	sp, #32
 80014f8:	af02      	add	r7, sp, #8
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
 8001500:	603b      	str	r3, [r7, #0]
   if(x_start == x_end)
 8001502:	68fa      	ldr	r2, [r7, #12]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	429a      	cmp	r2, r3
 8001508:	d118      	bne.n	800153c <GFX_DrawLine+0x48>
   {
      if(y_start > y_end)
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	429a      	cmp	r2, r3
 8001510:	dd05      	ble.n	800151e <GFX_DrawLine+0x2a>
         _swap_int(y_start, y_end);
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	613b      	str	r3, [r7, #16]
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	603b      	str	r3, [r7, #0]
      GFX_DrawFastVLine(x_start, y_start, y_end - y_start + 1, color, Screen);
 800151e:	683a      	ldr	r2, [r7, #0]
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	1c5a      	adds	r2, r3, #1
 8001526:	f897 1020 	ldrb.w	r1, [r7, #32]
 800152a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	460b      	mov	r3, r1
 8001532:	68b9      	ldr	r1, [r7, #8]
 8001534:	68f8      	ldr	r0, [r7, #12]
 8001536:	f7ff ffac 	bl	8001492 <GFX_DrawFastVLine>
   else
   {

      GFX_WriteLine(x_start, y_start, x_end, y_end, color, Screen);
   }
}
 800153a:	e028      	b.n	800158e <GFX_DrawLine+0x9a>
   else if(y_start == y_end)
 800153c:	68ba      	ldr	r2, [r7, #8]
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	429a      	cmp	r2, r3
 8001542:	d118      	bne.n	8001576 <GFX_DrawLine+0x82>
      if(x_start > x_end)
 8001544:	68fa      	ldr	r2, [r7, #12]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	429a      	cmp	r2, r3
 800154a:	dd05      	ble.n	8001558 <GFX_DrawLine+0x64>
         _swap_int(x_start, x_end);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	617b      	str	r3, [r7, #20]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	607b      	str	r3, [r7, #4]
      GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color, Screen);
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	1c5a      	adds	r2, r3, #1
 8001560:	f897 1020 	ldrb.w	r1, [r7, #32]
 8001564:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001568:	9300      	str	r3, [sp, #0]
 800156a:	460b      	mov	r3, r1
 800156c:	68b9      	ldr	r1, [r7, #8]
 800156e:	68f8      	ldr	r0, [r7, #12]
 8001570:	f7ff ffa8 	bl	80014c4 <GFX_DrawFastHLine>
}
 8001574:	e00b      	b.n	800158e <GFX_DrawLine+0x9a>
      GFX_WriteLine(x_start, y_start, x_end, y_end, color, Screen);
 8001576:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800157a:	9301      	str	r3, [sp, #4]
 800157c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001580:	9300      	str	r3, [sp, #0]
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	68b9      	ldr	r1, [r7, #8]
 8001588:	68f8      	ldr	r0, [r7, #12]
 800158a:	f7ff fef1 	bl	8001370 <GFX_WriteLine>
}
 800158e:	bf00      	nop
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <GFX_DrawFillRectangle>:
   GFX_DrawFastVLine(x + w - 1, y, h, color, Screen);
}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color, Screen_TypeDef Screen)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b088      	sub	sp, #32
 800159a:	af02      	add	r7, sp, #8
 800159c:	60f8      	str	r0, [r7, #12]
 800159e:	60b9      	str	r1, [r7, #8]
 80015a0:	4611      	mov	r1, r2
 80015a2:	461a      	mov	r2, r3
 80015a4:	460b      	mov	r3, r1
 80015a6:	80fb      	strh	r3, [r7, #6]
 80015a8:	4613      	mov	r3, r2
 80015aa:	80bb      	strh	r3, [r7, #4]
   for(int i = x; i < x + w; i++)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	e00d      	b.n	80015ce <GFX_DrawFillRectangle+0x38>
   {
      GFX_DrawFastVLine(i, y, h, color, Screen);
 80015b2:	88ba      	ldrh	r2, [r7, #4]
 80015b4:	f897 1020 	ldrb.w	r1, [r7, #32]
 80015b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	460b      	mov	r3, r1
 80015c0:	68b9      	ldr	r1, [r7, #8]
 80015c2:	6978      	ldr	r0, [r7, #20]
 80015c4:	f7ff ff65 	bl	8001492 <GFX_DrawFastVLine>
   for(int i = x; i < x + w; i++)
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	3301      	adds	r3, #1
 80015cc:	617b      	str	r3, [r7, #20]
 80015ce:	88fa      	ldrh	r2, [r7, #6]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4413      	add	r3, r2
 80015d4:	697a      	ldr	r2, [r7, #20]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	dbeb      	blt.n	80015b2 <GFX_DrawFillRectangle+0x1c>
   }
}
 80015da:	bf00      	nop
 80015dc:	bf00      	nop
 80015de:	3718      	adds	r7, #24
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <EF_SetFont>:
#include "string.h"

const FONT_INFO *CurrentFont;

void EF_SetFont(const FONT_INFO *Font)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
   CurrentFont = Font;
 80015ec:	4a04      	ldr	r2, [pc, #16]	; (8001600 <EF_SetFont+0x1c>)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6013      	str	r3, [r2, #0]
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	20000298 	.word	0x20000298

08001604 <EF_GetFontHeight>:

uint8_t EF_GetFontHeight(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
   return CurrentFont->CharHeight;
 8001608:	4b03      	ldr	r3, [pc, #12]	; (8001618 <EF_GetFontHeight+0x14>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	781b      	ldrb	r3, [r3, #0]
}
 800160e:	4618      	mov	r0, r3
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	20000298 	.word	0x20000298

0800161c <EF_GetFontStartChar>:

uint8_t EF_GetFontStartChar(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
   return CurrentFont->StartChar;
 8001620:	4b03      	ldr	r3, [pc, #12]	; (8001630 <EF_GetFontStartChar+0x14>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	785b      	ldrb	r3, [r3, #1]
}
 8001626:	4618      	mov	r0, r3
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	20000298 	.word	0x20000298

08001634 <EF_GetFontEndChar>:

uint8_t EF_GetFontEndChar(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
   return CurrentFont->EndChar;
 8001638:	4b03      	ldr	r3, [pc, #12]	; (8001648 <EF_GetFontEndChar+0x14>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	789b      	ldrb	r3, [r3, #2]
}
 800163e:	4618      	mov	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	20000298 	.word	0x20000298

0800164c <EF_GetFontSpaceWidth>:

uint8_t EF_GetFontSpaceWidth(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
   return CurrentFont->SpaceWidth;
 8001650:	4b03      	ldr	r3, [pc, #12]	; (8001660 <EF_GetFontSpaceWidth+0x14>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	78db      	ldrb	r3, [r3, #3]
}
 8001656:	4618      	mov	r0, r3
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	20000298 	.word	0x20000298

08001664 <EF_DecodePolish>:

char EF_DecodePolish(uint8_t chMsb, uint8_t chLsb)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	460a      	mov	r2, r1
 800166e:	71fb      	strb	r3, [r7, #7]
 8001670:	4613      	mov	r3, r2
 8001672:	71bb      	strb	r3, [r7, #6]
   switch(chMsb) // Check first byte
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	2bc5      	cmp	r3, #197	; 0xc5
 8001678:	d052      	beq.n	8001720 <EF_DecodePolish+0xbc>
 800167a:	2bc5      	cmp	r3, #197	; 0xc5
 800167c:	f300 80e7 	bgt.w	800184e <EF_DecodePolish+0x1ea>
 8001680:	2bc3      	cmp	r3, #195	; 0xc3
 8001682:	d002      	beq.n	800168a <EF_DecodePolish+0x26>
 8001684:	2bc4      	cmp	r3, #196	; 0xc4
 8001686:	d00a      	beq.n	800169e <EF_DecodePolish+0x3a>
 8001688:	e0e1      	b.n	800184e <EF_DecodePolish+0x1ea>
   {
      case 0xC3:       // Ó, ó
         switch(chLsb) // Check second byte
 800168a:	79bb      	ldrb	r3, [r7, #6]
 800168c:	2b93      	cmp	r3, #147	; 0x93
 800168e:	d002      	beq.n	8001696 <EF_DecodePolish+0x32>
 8001690:	2bb3      	cmp	r3, #179	; 0xb3
 8001692:	d002      	beq.n	800169a <EF_DecodePolish+0x36>
               break;
            case 0xB3: // ó
               return 0x8D;
               break;
         }
         break;
 8001694:	e0db      	b.n	800184e <EF_DecodePolish+0x1ea>
               return 0x84;
 8001696:	2384      	movs	r3, #132	; 0x84
 8001698:	e0da      	b.n	8001850 <EF_DecodePolish+0x1ec>
               return 0x8D;
 800169a:	238d      	movs	r3, #141	; 0x8d
 800169c:	e0d8      	b.n	8001850 <EF_DecodePolish+0x1ec>
      case 0xC4:       // Ą, Ę, Ć, ą, ę, ć
         switch(chLsb) // Check second byte
 800169e:	79bb      	ldrb	r3, [r7, #6]
 80016a0:	3b84      	subs	r3, #132	; 0x84
 80016a2:	2b15      	cmp	r3, #21
 80016a4:	f200 80d0 	bhi.w	8001848 <EF_DecodePolish+0x1e4>
 80016a8:	a201      	add	r2, pc, #4	; (adr r2, 80016b0 <EF_DecodePolish+0x4c>)
 80016aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ae:	bf00      	nop
 80016b0:	08001709 	.word	0x08001709
 80016b4:	08001715 	.word	0x08001715
 80016b8:	08001711 	.word	0x08001711
 80016bc:	0800171d 	.word	0x0800171d
 80016c0:	08001849 	.word	0x08001849
 80016c4:	08001849 	.word	0x08001849
 80016c8:	08001849 	.word	0x08001849
 80016cc:	08001849 	.word	0x08001849
 80016d0:	08001849 	.word	0x08001849
 80016d4:	08001849 	.word	0x08001849
 80016d8:	08001849 	.word	0x08001849
 80016dc:	08001849 	.word	0x08001849
 80016e0:	08001849 	.word	0x08001849
 80016e4:	08001849 	.word	0x08001849
 80016e8:	08001849 	.word	0x08001849
 80016ec:	08001849 	.word	0x08001849
 80016f0:	08001849 	.word	0x08001849
 80016f4:	08001849 	.word	0x08001849
 80016f8:	08001849 	.word	0x08001849
 80016fc:	08001849 	.word	0x08001849
 8001700:	0800170d 	.word	0x0800170d
 8001704:	08001719 	.word	0x08001719
         {
            case 0x84: // Ą
               return 0x7F;
 8001708:	237f      	movs	r3, #127	; 0x7f
 800170a:	e0a1      	b.n	8001850 <EF_DecodePolish+0x1ec>
               break;
            case 0x98: // Ę
               return 0x81;
 800170c:	2381      	movs	r3, #129	; 0x81
 800170e:	e09f      	b.n	8001850 <EF_DecodePolish+0x1ec>
               break;
            case 0x86: // Ć
               return 0x80;
 8001710:	2380      	movs	r3, #128	; 0x80
 8001712:	e09d      	b.n	8001850 <EF_DecodePolish+0x1ec>
               break;
            case 0x85: // ą
               return 0x88;
 8001714:	2388      	movs	r3, #136	; 0x88
 8001716:	e09b      	b.n	8001850 <EF_DecodePolish+0x1ec>
               break;
            case 0x99: // ę
               return 0x8A;
 8001718:	238a      	movs	r3, #138	; 0x8a
 800171a:	e099      	b.n	8001850 <EF_DecodePolish+0x1ec>
               break;
            case 0x87: // ć
               return 0x89;
 800171c:	2389      	movs	r3, #137	; 0x89
 800171e:	e097      	b.n	8001850 <EF_DecodePolish+0x1ec>
               break;
         }
         break;
      case 0xC5:       // Ł, Ń, Ś, Ź, Ż, ł, ń, ś, ź, ż
         switch(chLsb) // Check second byte
 8001720:	79bb      	ldrb	r3, [r7, #6]
 8001722:	3b81      	subs	r3, #129	; 0x81
 8001724:	2b3b      	cmp	r3, #59	; 0x3b
 8001726:	f200 8091 	bhi.w	800184c <EF_DecodePolish+0x1e8>
 800172a:	a201      	add	r2, pc, #4	; (adr r2, 8001730 <EF_DecodePolish+0xcc>)
 800172c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001730:	08001821 	.word	0x08001821
 8001734:	08001835 	.word	0x08001835
 8001738:	08001825 	.word	0x08001825
 800173c:	08001839 	.word	0x08001839
 8001740:	0800184d 	.word	0x0800184d
 8001744:	0800184d 	.word	0x0800184d
 8001748:	0800184d 	.word	0x0800184d
 800174c:	0800184d 	.word	0x0800184d
 8001750:	0800184d 	.word	0x0800184d
 8001754:	0800184d 	.word	0x0800184d
 8001758:	0800184d 	.word	0x0800184d
 800175c:	0800184d 	.word	0x0800184d
 8001760:	0800184d 	.word	0x0800184d
 8001764:	0800184d 	.word	0x0800184d
 8001768:	0800184d 	.word	0x0800184d
 800176c:	0800184d 	.word	0x0800184d
 8001770:	0800184d 	.word	0x0800184d
 8001774:	0800184d 	.word	0x0800184d
 8001778:	0800184d 	.word	0x0800184d
 800177c:	0800184d 	.word	0x0800184d
 8001780:	0800184d 	.word	0x0800184d
 8001784:	0800184d 	.word	0x0800184d
 8001788:	0800184d 	.word	0x0800184d
 800178c:	0800184d 	.word	0x0800184d
 8001790:	0800184d 	.word	0x0800184d
 8001794:	08001829 	.word	0x08001829
 8001798:	0800183d 	.word	0x0800183d
 800179c:	0800184d 	.word	0x0800184d
 80017a0:	0800184d 	.word	0x0800184d
 80017a4:	0800184d 	.word	0x0800184d
 80017a8:	0800184d 	.word	0x0800184d
 80017ac:	0800184d 	.word	0x0800184d
 80017b0:	0800184d 	.word	0x0800184d
 80017b4:	0800184d 	.word	0x0800184d
 80017b8:	0800184d 	.word	0x0800184d
 80017bc:	0800184d 	.word	0x0800184d
 80017c0:	0800184d 	.word	0x0800184d
 80017c4:	0800184d 	.word	0x0800184d
 80017c8:	0800184d 	.word	0x0800184d
 80017cc:	0800184d 	.word	0x0800184d
 80017d0:	0800184d 	.word	0x0800184d
 80017d4:	0800184d 	.word	0x0800184d
 80017d8:	0800184d 	.word	0x0800184d
 80017dc:	0800184d 	.word	0x0800184d
 80017e0:	0800184d 	.word	0x0800184d
 80017e4:	0800184d 	.word	0x0800184d
 80017e8:	0800184d 	.word	0x0800184d
 80017ec:	0800184d 	.word	0x0800184d
 80017f0:	0800184d 	.word	0x0800184d
 80017f4:	0800184d 	.word	0x0800184d
 80017f8:	0800184d 	.word	0x0800184d
 80017fc:	0800184d 	.word	0x0800184d
 8001800:	0800184d 	.word	0x0800184d
 8001804:	0800184d 	.word	0x0800184d
 8001808:	0800184d 	.word	0x0800184d
 800180c:	0800184d 	.word	0x0800184d
 8001810:	0800182d 	.word	0x0800182d
 8001814:	08001841 	.word	0x08001841
 8001818:	08001831 	.word	0x08001831
 800181c:	08001845 	.word	0x08001845
         {
            case 0x81: // Ł
               return 0x82;
 8001820:	2382      	movs	r3, #130	; 0x82
 8001822:	e015      	b.n	8001850 <EF_DecodePolish+0x1ec>
               break;
            case 0x83: // Ń
               return 0x83;
 8001824:	2383      	movs	r3, #131	; 0x83
 8001826:	e013      	b.n	8001850 <EF_DecodePolish+0x1ec>
               break;
            case 0x9A: // Ś
               return 0x85;
 8001828:	2385      	movs	r3, #133	; 0x85
 800182a:	e011      	b.n	8001850 <EF_DecodePolish+0x1ec>
               break;
            case 0xB9: // Ź
               return 0x86;
 800182c:	2386      	movs	r3, #134	; 0x86
 800182e:	e00f      	b.n	8001850 <EF_DecodePolish+0x1ec>
               break;
            case 0xBB: // Ż
               return 0x87;
 8001830:	2387      	movs	r3, #135	; 0x87
 8001832:	e00d      	b.n	8001850 <EF_DecodePolish+0x1ec>
               break;
            case 0x82: // ł
               return 0x8B;
 8001834:	238b      	movs	r3, #139	; 0x8b
 8001836:	e00b      	b.n	8001850 <EF_DecodePolish+0x1ec>
               break;
            case 0x84: // ń
               return 0x8C;
 8001838:	238c      	movs	r3, #140	; 0x8c
 800183a:	e009      	b.n	8001850 <EF_DecodePolish+0x1ec>
               break;
            case 0x9B: // ś
               return 0x8E;
 800183c:	238e      	movs	r3, #142	; 0x8e
 800183e:	e007      	b.n	8001850 <EF_DecodePolish+0x1ec>
               break;
            case 0xBA: // ź
               return 0x8F;
 8001840:	238f      	movs	r3, #143	; 0x8f
 8001842:	e005      	b.n	8001850 <EF_DecodePolish+0x1ec>
               break;
            case 0xBC: // ż
               return 0x90;
 8001844:	2390      	movs	r3, #144	; 0x90
 8001846:	e003      	b.n	8001850 <EF_DecodePolish+0x1ec>
         break;
 8001848:	bf00      	nop
 800184a:	e000      	b.n	800184e <EF_DecodePolish+0x1ea>
               break;
         }
         break;
 800184c:	bf00      	nop
   }

   return 0;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <EF_PutChar>:

uint8_t EF_PutChar(char ch, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor, Screen_TypeDef Screen)
{
 800185c:	b5b0      	push	{r4, r5, r7, lr}
 800185e:	b08a      	sub	sp, #40	; 0x28
 8001860:	af02      	add	r7, sp, #8
 8001862:	4604      	mov	r4, r0
 8001864:	4608      	mov	r0, r1
 8001866:	4611      	mov	r1, r2
 8001868:	461a      	mov	r2, r3
 800186a:	4623      	mov	r3, r4
 800186c:	71fb      	strb	r3, [r7, #7]
 800186e:	4603      	mov	r3, r0
 8001870:	80bb      	strh	r3, [r7, #4]
 8001872:	460b      	mov	r3, r1
 8001874:	807b      	strh	r3, [r7, #2]
 8001876:	4613      	mov	r3, r2
 8001878:	803b      	strh	r3, [r7, #0]
   uint16_t PixelHeight;
   uint8_t WidthLoops, CharBits, CharBitsLeft;
   uint8_t CharNumber = ch - EF_GetFontStartChar();
 800187a:	f7ff fecf 	bl	800161c <EF_GetFontStartChar>
 800187e:	4603      	mov	r3, r0
 8001880:	461a      	mov	r2, r3
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	1a9b      	subs	r3, r3, r2
 8001886:	747b      	strb	r3, [r7, #17]

   if(ch == ' ') // Check if we have a Space char
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	2b20      	cmp	r3, #32
 800188c:	d121      	bne.n	80018d2 <EF_PutChar+0x76>
   {
      if(Btransparent == BG_COLOR) // If draw BG by color...
 800188e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001892:	2b01      	cmp	r3, #1
 8001894:	d117      	bne.n	80018c6 <EF_PutChar+0x6a>
      {
         // Draw filled rectangle on Space char
         GFX_DrawFillRectangle(PosX, PosY, SPACE_WIDHT * EF_GetFontSpaceWidth(), CurrentFont->CharHeight, Bcolor, Screen);
 8001896:	88bc      	ldrh	r4, [r7, #4]
 8001898:	887d      	ldrh	r5, [r7, #2]
 800189a:	f7ff fed7 	bl	800164c <EF_GetFontSpaceWidth>
 800189e:	4603      	mov	r3, r0
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	b299      	uxth	r1, r3
 80018a6:	4b5b      	ldr	r3, [pc, #364]	; (8001a14 <EF_PutChar+0x1b8>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	b298      	uxth	r0, r3
 80018ae:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80018b6:	9201      	str	r2, [sp, #4]
 80018b8:	9300      	str	r3, [sp, #0]
 80018ba:	4603      	mov	r3, r0
 80018bc:	460a      	mov	r2, r1
 80018be:	4629      	mov	r1, r5
 80018c0:	4620      	mov	r0, r4
 80018c2:	f7ff fe68 	bl	8001596 <GFX_DrawFillRectangle>
      }
      // Return width for String function
      return SPACE_WIDHT * EF_GetFontSpaceWidth();
 80018c6:	f7ff fec1 	bl	800164c <EF_GetFontSpaceWidth>
 80018ca:	4603      	mov	r3, r0
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	e09c      	b.n	8001a0c <EF_PutChar+0x1b0>
   }

   // Return if char is not in our font  (smaller than the first)
   if(ch < EF_GetFontStartChar())
 80018d2:	f7ff fea3 	bl	800161c <EF_GetFontStartChar>
 80018d6:	4603      	mov	r3, r0
 80018d8:	461a      	mov	r2, r3
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	4293      	cmp	r3, r2
 80018de:	d201      	bcs.n	80018e4 <EF_PutChar+0x88>
   {
      return 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	e093      	b.n	8001a0c <EF_PutChar+0x1b0>
   }

   // Return if char is not in our font (bigger than the lastlast)
   if(CharNumber > EF_GetFontEndChar())
 80018e4:	f7ff fea6 	bl	8001634 <EF_GetFontEndChar>
 80018e8:	4603      	mov	r3, r0
 80018ea:	461a      	mov	r2, r3
 80018ec:	7c7b      	ldrb	r3, [r7, #17]
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d901      	bls.n	80018f6 <EF_PutChar+0x9a>
   {
      return 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	e08a      	b.n	8001a0c <EF_PutChar+0x1b0>
   }

   // Get Current char info descriptor - {width, bitmap start byte}
   const FONT_CHAR_INFO *CurrentChar = &CurrentFont->CharDescription[CharNumber];
 80018f6:	4b47      	ldr	r3, [pc, #284]	; (8001a14 <EF_PutChar+0x1b8>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	7c7b      	ldrb	r3, [r7, #17]
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4413      	add	r3, r2
 8001902:	60fb      	str	r3, [r7, #12]
   // Get bitmap pointer for our char
   uint8_t *CharPointer = (uint8_t *)&CurrentFont->CharBitmaps[CurrentFont->CharDescription[CharNumber].CharOffset];
 8001904:	4b43      	ldr	r3, [pc, #268]	; (8001a14 <EF_PutChar+0x1b8>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	4a42      	ldr	r2, [pc, #264]	; (8001a14 <EF_PutChar+0x1b8>)
 800190c:	6812      	ldr	r2, [r2, #0]
 800190e:	6851      	ldr	r1, [r2, #4]
 8001910:	7c7a      	ldrb	r2, [r7, #17]
 8001912:	0092      	lsls	r2, r2, #2
 8001914:	440a      	add	r2, r1
 8001916:	8852      	ldrh	r2, [r2, #2]
 8001918:	4413      	add	r3, r2
 800191a:	617b      	str	r3, [r7, #20]

   // 1st iteration - for each Row by Height
   for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 800191c:	2300      	movs	r3, #0
 800191e:	83fb      	strh	r3, [r7, #30]
 8001920:	e066      	b.n	80019f0 <EF_PutChar+0x194>
   {
      // Check how many bits left to draw in current Row
      CharBitsLeft = CurrentChar->CharWidth;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	76fb      	strb	r3, [r7, #27]

      // 2nd Iterator - For each byte in that Row
      for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth - 1) / 8; WidthLoops++)
 8001928:	2300      	movs	r3, #0
 800192a:	777b      	strb	r3, [r7, #29]
 800192c:	e053      	b.n	80019d6 <EF_PutChar+0x17a>
      {
         // Take one line
         uint8_t line = (uint8_t)*CharPointer;
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	74fb      	strb	r3, [r7, #19]
         // Define how many bit to draw - full byte or less
         if(CharBitsLeft >= 8)
 8001934:	7efb      	ldrb	r3, [r7, #27]
 8001936:	2b07      	cmp	r3, #7
 8001938:	d905      	bls.n	8001946 <EF_PutChar+0xea>
         {
            CharBits = 8;      // Full byte
 800193a:	2308      	movs	r3, #8
 800193c:	773b      	strb	r3, [r7, #28]
            CharBitsLeft -= 8; // Decrease bits left counter
 800193e:	7efb      	ldrb	r3, [r7, #27]
 8001940:	3b08      	subs	r3, #8
 8001942:	76fb      	strb	r3, [r7, #27]
 8001944:	e001      	b.n	800194a <EF_PutChar+0xee>
         }
         else
         {
            // If less than byte - only few bits
            CharBits = CharBitsLeft;
 8001946:	7efb      	ldrb	r3, [r7, #27]
 8001948:	773b      	strb	r3, [r7, #28]
         }

         // 3rd Iterator - for each bit in current byte in current row ;)
         for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 800194a:	2300      	movs	r3, #0
 800194c:	74bb      	strb	r3, [r7, #18]
 800194e:	e038      	b.n	80019c2 <EF_PutChar+0x166>
         {
            // Check bit first from left
            if(line & 0x80)
 8001950:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001954:	2b00      	cmp	r3, #0
 8001956:	da15      	bge.n	8001984 <EF_PutChar+0x128>
            {
               // If pixel exists - draw it
               GFX_DrawPixelScreen(PosX + (WidthLoops * 8) + i, PosY + PixelHeight, Fcolor, Screen);
 8001958:	7f7b      	ldrb	r3, [r7, #29]
 800195a:	b29b      	uxth	r3, r3
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	b29a      	uxth	r2, r3
 8001960:	88bb      	ldrh	r3, [r7, #4]
 8001962:	4413      	add	r3, r2
 8001964:	b29a      	uxth	r2, r3
 8001966:	7cbb      	ldrb	r3, [r7, #18]
 8001968:	b29b      	uxth	r3, r3
 800196a:	4413      	add	r3, r2
 800196c:	b298      	uxth	r0, r3
 800196e:	887a      	ldrh	r2, [r7, #2]
 8001970:	8bfb      	ldrh	r3, [r7, #30]
 8001972:	4413      	add	r3, r2
 8001974:	b299      	uxth	r1, r3
 8001976:	883b      	ldrh	r3, [r7, #0]
 8001978:	b2da      	uxtb	r2, r3
 800197a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800197e:	f7ff fba3 	bl	80010c8 <GFX_DrawPixelScreen>
 8001982:	e018      	b.n	80019b6 <EF_PutChar+0x15a>
            }
            else if(Btransparent == BG_COLOR) // Check if we want to draw background
 8001984:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001988:	2b01      	cmp	r3, #1
 800198a:	d114      	bne.n	80019b6 <EF_PutChar+0x15a>
            {
               // If no character pixel, then BG pixel
               GFX_DrawPixelScreen(PosX + (WidthLoops * 8) + i, PosY + PixelHeight, Bcolor, Screen);
 800198c:	7f7b      	ldrb	r3, [r7, #29]
 800198e:	b29b      	uxth	r3, r3
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	b29a      	uxth	r2, r3
 8001994:	88bb      	ldrh	r3, [r7, #4]
 8001996:	4413      	add	r3, r2
 8001998:	b29a      	uxth	r2, r3
 800199a:	7cbb      	ldrb	r3, [r7, #18]
 800199c:	b29b      	uxth	r3, r3
 800199e:	4413      	add	r3, r2
 80019a0:	b298      	uxth	r0, r3
 80019a2:	887a      	ldrh	r2, [r7, #2]
 80019a4:	8bfb      	ldrh	r3, [r7, #30]
 80019a6:	4413      	add	r3, r2
 80019a8:	b299      	uxth	r1, r3
 80019aa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80019b2:	f7ff fb89 	bl	80010c8 <GFX_DrawPixelScreen>
         for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 80019b6:	7cbb      	ldrb	r3, [r7, #18]
 80019b8:	3301      	adds	r3, #1
 80019ba:	74bb      	strb	r3, [r7, #18]
 80019bc:	7cfb      	ldrb	r3, [r7, #19]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	74fb      	strb	r3, [r7, #19]
 80019c2:	7cba      	ldrb	r2, [r7, #18]
 80019c4:	7f3b      	ldrb	r3, [r7, #28]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d3c2      	bcc.n	8001950 <EF_PutChar+0xf4>
            }
         }

         // Take next byte in current char bitmap
         CharPointer++;
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	3301      	adds	r3, #1
 80019ce:	617b      	str	r3, [r7, #20]
      for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth - 1) / 8; WidthLoops++)
 80019d0:	7f7b      	ldrb	r3, [r7, #29]
 80019d2:	3301      	adds	r3, #1
 80019d4:	777b      	strb	r3, [r7, #29]
 80019d6:	7f7a      	ldrb	r2, [r7, #29]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	3b01      	subs	r3, #1
 80019de:	2b00      	cmp	r3, #0
 80019e0:	da00      	bge.n	80019e4 <EF_PutChar+0x188>
 80019e2:	3307      	adds	r3, #7
 80019e4:	10db      	asrs	r3, r3, #3
 80019e6:	429a      	cmp	r2, r3
 80019e8:	dda1      	ble.n	800192e <EF_PutChar+0xd2>
   for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 80019ea:	8bfb      	ldrh	r3, [r7, #30]
 80019ec:	3301      	adds	r3, #1
 80019ee:	83fb      	strh	r3, [r7, #30]
 80019f0:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <EF_PutChar+0x1b8>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	8bfa      	ldrh	r2, [r7, #30]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d391      	bcc.n	8001922 <EF_PutChar+0xc6>
      }
   }
   // Return char width for String function
   return CurrentFont->CharDescription[CharNumber].CharWidth;
 80019fe:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <EF_PutChar+0x1b8>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	685a      	ldr	r2, [r3, #4]
 8001a04:	7c7b      	ldrb	r3, [r7, #17]
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4413      	add	r3, r2
 8001a0a:	781b      	ldrb	r3, [r3, #0]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3720      	adds	r7, #32
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bdb0      	pop	{r4, r5, r7, pc}
 8001a14:	20000298 	.word	0x20000298

08001a18 <EF_PutString>:

uint8_t EF_PutString(const uint8_t *pStr, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor, Screen_TypeDef Screen)
{
 8001a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a1a:	b08b      	sub	sp, #44	; 0x2c
 8001a1c:	af04      	add	r7, sp, #16
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	4608      	mov	r0, r1
 8001a22:	4611      	mov	r1, r2
 8001a24:	461a      	mov	r2, r3
 8001a26:	4603      	mov	r3, r0
 8001a28:	817b      	strh	r3, [r7, #10]
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	813b      	strh	r3, [r7, #8]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	80fb      	strh	r3, [r7, #6]
   uint8_t Lenght = strlen((char *)pStr); // Take a string length in bytes
 8001a32:	68f8      	ldr	r0, [r7, #12]
 8001a34:	f7fe fbe4 	bl	8000200 <strlen>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	74bb      	strb	r3, [r7, #18]

   uint8_t Loop;        // Loop Iterator for current char
   uint16_t Shift = 0;  // Shift in X-axis for each char drawing
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	82bb      	strh	r3, [r7, #20]
   uint8_t CharWidth;   // Current char width
   uint8_t CharToPrint; // Current char to print

   for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001a40:	2300      	movs	r3, #0
 8001a42:	75fb      	strb	r3, [r7, #23]
 8001a44:	e06a      	b.n	8001b1c <EF_PutString+0x104>
   {

      if((pStr[Loop] <= 0xC5) && (pStr[Loop] >= 0xC3)) // check if current char is a Polish sign
 8001a46:	7dfb      	ldrb	r3, [r7, #23]
 8001a48:	68fa      	ldr	r2, [r7, #12]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2bc5      	cmp	r3, #197	; 0xc5
 8001a50:	d817      	bhi.n	8001a82 <EF_PutString+0x6a>
 8001a52:	7dfb      	ldrb	r3, [r7, #23]
 8001a54:	68fa      	ldr	r2, [r7, #12]
 8001a56:	4413      	add	r3, r2
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	2bc2      	cmp	r3, #194	; 0xc2
 8001a5c:	d911      	bls.n	8001a82 <EF_PutString+0x6a>
      {
         // If yes - decode that char
         CharToPrint = EF_DecodePolish(pStr[Loop], pStr[Loop + 1]);
 8001a5e:	7dfb      	ldrb	r3, [r7, #23]
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	4413      	add	r3, r2
 8001a64:	7818      	ldrb	r0, [r3, #0]
 8001a66:	7dfb      	ldrb	r3, [r7, #23]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	68fa      	ldr	r2, [r7, #12]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	4619      	mov	r1, r3
 8001a72:	f7ff fdf7 	bl	8001664 <EF_DecodePolish>
 8001a76:	4603      	mov	r3, r0
 8001a78:	74fb      	strb	r3, [r7, #19]
         // Skip one byte - Polish chars are 2-bytes
         Loop++;
 8001a7a:	7dfb      	ldrb	r3, [r7, #23]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	75fb      	strb	r3, [r7, #23]
 8001a80:	e00d      	b.n	8001a9e <EF_PutString+0x86>
      }
      else if(pStr[Loop] == 0)
 8001a82:	7dfb      	ldrb	r3, [r7, #23]
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	4413      	add	r3, r2
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d102      	bne.n	8001a94 <EF_PutString+0x7c>
      {
         CharToPrint = ' ';
 8001a8e:	2320      	movs	r3, #32
 8001a90:	74fb      	strb	r3, [r7, #19]
 8001a92:	e004      	b.n	8001a9e <EF_PutString+0x86>
      }
      else
      {
         // If not polish - just take that char
         CharToPrint = pStr[Loop];
 8001a94:	7dfb      	ldrb	r3, [r7, #23]
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	4413      	add	r3, r2
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	74fb      	strb	r3, [r7, #19]
      }

      // Draw char and take its width
      CharWidth = EF_PutChar(CharToPrint, PosX + Shift, PosY, Fcolor, Btransparent, Bcolor, Screen);
 8001a9e:	897a      	ldrh	r2, [r7, #10]
 8001aa0:	8abb      	ldrh	r3, [r7, #20]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	b299      	uxth	r1, r3
 8001aa6:	88fc      	ldrh	r4, [r7, #6]
 8001aa8:	893a      	ldrh	r2, [r7, #8]
 8001aaa:	7cf8      	ldrb	r0, [r7, #19]
 8001aac:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001ab0:	9302      	str	r3, [sp, #8]
 8001ab2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001ab4:	9301      	str	r3, [sp, #4]
 8001ab6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	4623      	mov	r3, r4
 8001abe:	f7ff fecd 	bl	800185c <EF_PutChar>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	747b      	strb	r3, [r7, #17]

      // Add last char width to drawing Shift
      Shift = Shift + CharWidth;
 8001ac6:	7c7b      	ldrb	r3, [r7, #17]
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	8abb      	ldrh	r3, [r7, #20]
 8001acc:	4413      	add	r3, r2
 8001ace:	82bb      	strh	r3, [r7, #20]

      if(Btransparent == BG_COLOR)
 8001ad0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d117      	bne.n	8001b08 <EF_PutString+0xf0>
      {
         // If draw background - draw the BG color between chars
         GFX_DrawFillRectangle(PosX + Shift, PosY, EF_GetFontSpaceWidth(), EF_GetFontHeight(), Bcolor, Screen);
 8001ad8:	897a      	ldrh	r2, [r7, #10]
 8001ada:	8abb      	ldrh	r3, [r7, #20]
 8001adc:	18d4      	adds	r4, r2, r3
 8001ade:	893d      	ldrh	r5, [r7, #8]
 8001ae0:	f7ff fdb4 	bl	800164c <EF_GetFontSpaceWidth>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	b29e      	uxth	r6, r3
 8001ae8:	f7ff fd8c 	bl	8001604 <EF_GetFontHeight>
 8001aec:	4603      	mov	r3, r0
 8001aee:	b299      	uxth	r1, r3
 8001af0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001af8:	9201      	str	r2, [sp, #4]
 8001afa:	9300      	str	r3, [sp, #0]
 8001afc:	460b      	mov	r3, r1
 8001afe:	4632      	mov	r2, r6
 8001b00:	4629      	mov	r1, r5
 8001b02:	4620      	mov	r0, r4
 8001b04:	f7ff fd47 	bl	8001596 <GFX_DrawFillRectangle>
      }

      // Add between-char distance to Shift
      Shift = Shift + EF_GetFontSpaceWidth();
 8001b08:	f7ff fda0 	bl	800164c <EF_GetFontSpaceWidth>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	8abb      	ldrh	r3, [r7, #20]
 8001b12:	4413      	add	r3, r2
 8001b14:	82bb      	strh	r3, [r7, #20]
   for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001b16:	7dfb      	ldrb	r3, [r7, #23]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	75fb      	strb	r3, [r7, #23]
 8001b1c:	7dfa      	ldrb	r2, [r7, #23]
 8001b1e:	7cbb      	ldrb	r3, [r7, #18]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d390      	bcc.n	8001a46 <EF_PutString+0x2e>
   }
   // Return whole String shift - if you want to use it higher in app.
   return Shift - EF_GetFontSpaceWidth();
 8001b24:	8abb      	ldrh	r3, [r7, #20]
 8001b26:	b2dc      	uxtb	r4, r3
 8001b28:	f7ff fd90 	bl	800164c <EF_GetFontSpaceWidth>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	1ae3      	subs	r3, r4, r3
 8001b30:	b2db      	uxtb	r3, r3
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	371c      	adds	r7, #28
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b3a <HC12_ExitCommandMode>:
void HC12_EnterCommandMode(void)
{
   HAL_GPIO_WritePin(HC12_SET_GPIO_Port, HC12_SET_Pin, 0);
}
void HC12_ExitCommandMode(void)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(HC12_SET_GPIO_Port, HC12_SET_Pin, 1);
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b48:	f00c f9c0 	bl	800decc <HAL_GPIO_WritePin>
}
 8001b4c:	bf00      	nop
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <HC12_TransmitData>:
void HC12_TransmitData(uint8_t *Data, uint32_t Length)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
   taskENTER_CRITICAL();
 8001b5a:	f016 fbe3 	bl	8018324 <vPortEnterCritical>
   HAL_UART_Transmit(&huart1, Data, Length, 1000);
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	4804      	ldr	r0, [pc, #16]	; (8001b7c <HC12_TransmitData+0x2c>)
 8001b6a:	f011 f945 	bl	8012df8 <HAL_UART_Transmit>
   taskEXIT_CRITICAL();
 8001b6e:	f016 fc09 	bl	8018384 <vPortExitCritical>
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20004794 	.word	0x20004794

08001b80 <HC12_ReciveToIdleDMA>:
void HC12_ReciveToIdleDMA(uint8_t *Data, uint32_t Length)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
   HAL_UARTEx_ReceiveToIdle_DMA(&huart1, Data, Length);
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	461a      	mov	r2, r3
 8001b90:	6879      	ldr	r1, [r7, #4]
 8001b92:	4803      	ldr	r0, [pc, #12]	; (8001ba0 <HC12_ReciveToIdleDMA+0x20>)
 8001b94:	f012 fd0a 	bl	80145ac <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8001b98:	bf00      	nop
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	20004794 	.word	0x20004794

08001ba4 <HC12_Init>:
void HC12_Init(RFP_TypeDef *TempRfp, uint8_t *Buffer)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
   rfp      = TempRfp;
 8001bae:	4a06      	ldr	r2, [pc, #24]	; (8001bc8 <HC12_Init+0x24>)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6013      	str	r3, [r2, #0]
   HC12Data = Buffer;
 8001bb4:	4a05      	ldr	r2, [pc, #20]	; (8001bcc <HC12_Init+0x28>)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	6013      	str	r3, [r2, #0]
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	2000029c 	.word	0x2000029c
 8001bcc:	200002a0 	.word	0x200002a0

08001bd0 <MENU_ChangeState>:
                                                  { MENU_STATE_RUNNING, MENU_STATE_END, MENU_EVENT_END },
                                                  { MENU_EVENT_END, MENU_STATE_IDLE, MENU_EVENT_NOTHING } };
MenuFunctions_TypeDef StateFunction[]         = { { MENU_IdleFunction }, { MENU_ChoiseFunction }, { MENU_RunningFunction }, { MENU_EndFunction } };
Menu_TypeDef Menu                             = { 0 };
static void MENU_ChangeState(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
   for(int i = 0; i < TRANSITION_TABLE_SIZE; i++)
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	607b      	str	r3, [r7, #4]
 8001bda:	e027      	b.n	8001c2c <MENU_ChangeState+0x5c>
   {
      if(Menu.State == TransitionTable[i].Source && Menu.NewEvent == TransitionTable[i].Event)
 8001bdc:	4b19      	ldr	r3, [pc, #100]	; (8001c44 <MENU_ChangeState+0x74>)
 8001bde:	7a19      	ldrb	r1, [r3, #8]
 8001be0:	4819      	ldr	r0, [pc, #100]	; (8001c48 <MENU_ChangeState+0x78>)
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	4613      	mov	r3, r2
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	4413      	add	r3, r2
 8001bea:	4403      	add	r3, r0
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	4299      	cmp	r1, r3
 8001bf0:	d119      	bne.n	8001c26 <MENU_ChangeState+0x56>
 8001bf2:	4b14      	ldr	r3, [pc, #80]	; (8001c44 <MENU_ChangeState+0x74>)
 8001bf4:	7a59      	ldrb	r1, [r3, #9]
 8001bf6:	4814      	ldr	r0, [pc, #80]	; (8001c48 <MENU_ChangeState+0x78>)
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	4413      	add	r3, r2
 8001c00:	4403      	add	r3, r0
 8001c02:	3302      	adds	r3, #2
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	4299      	cmp	r1, r3
 8001c08:	d10d      	bne.n	8001c26 <MENU_ChangeState+0x56>
      {
         Menu.State    = TransitionTable[i].Destination;
 8001c0a:	490f      	ldr	r1, [pc, #60]	; (8001c48 <MENU_ChangeState+0x78>)
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	4413      	add	r3, r2
 8001c14:	440b      	add	r3, r1
 8001c16:	3301      	adds	r3, #1
 8001c18:	781a      	ldrb	r2, [r3, #0]
 8001c1a:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <MENU_ChangeState+0x74>)
 8001c1c:	721a      	strb	r2, [r3, #8]
         Menu.NewEvent = MENU_EVENT_NOTHING;
 8001c1e:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <MENU_ChangeState+0x74>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	725a      	strb	r2, [r3, #9]
         return;
 8001c24:	e008      	b.n	8001c38 <MENU_ChangeState+0x68>
   for(int i = 0; i < TRANSITION_TABLE_SIZE; i++)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	607b      	str	r3, [r7, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	d9d4      	bls.n	8001bdc <MENU_ChangeState+0xc>
      }
   }
   Menu.NewEvent = MENU_EVENT_NOTHING;
 8001c32:	4b04      	ldr	r3, [pc, #16]	; (8001c44 <MENU_ChangeState+0x74>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	725a      	strb	r2, [r3, #9]
}
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	200002a4 	.word	0x200002a4
 8001c48:	20000004 	.word	0x20000004

08001c4c <MENU_Init>:
void MENU_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
   HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8001c50:	213c      	movs	r1, #60	; 0x3c
 8001c52:	4802      	ldr	r0, [pc, #8]	; (8001c5c <MENU_Init+0x10>)
 8001c54:	f00f fe94 	bl	8011980 <HAL_TIM_Encoder_Start>
}
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	2000469c 	.word	0x2000469c

08001c60 <MENU_Handler>:
void MENU_Handler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
   MENU_ChangeState();
 8001c64:	f7ff ffb4 	bl	8001bd0 <MENU_ChangeState>
   if(StateFunction[Menu.State].MenuFunction != NULL)
 8001c68:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <MENU_Handler+0x2c>)
 8001c6a:	7a1b      	ldrb	r3, [r3, #8]
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <MENU_Handler+0x30>)
 8001c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d006      	beq.n	8001c86 <MENU_Handler+0x26>
   {
      StateFunction[Menu.State].MenuFunction();
 8001c78:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <MENU_Handler+0x2c>)
 8001c7a:	7a1b      	ldrb	r3, [r3, #8]
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <MENU_Handler+0x30>)
 8001c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c84:	4798      	blx	r3
   }
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	200002a4 	.word	0x200002a4
 8001c90:	20000014 	.word	0x20000014

08001c94 <MENU_IdleFunction>:
static void MENU_IdleFunction(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
   if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8001c98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c9c:	480e      	ldr	r0, [pc, #56]	; (8001cd8 <MENU_IdleFunction+0x44>)
 8001c9e:	f00c f8fd 	bl	800de9c <HAL_GPIO_ReadPin>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d115      	bne.n	8001cd4 <MENU_IdleFunction+0x40>
   {
      osMutexAcquire(MenuMutexHandle, osWaitForever);
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <MENU_IdleFunction+0x48>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f013 f893 	bl	8014ddc <osMutexAcquire>
      Menu.NewEvent = MENU_EVENT_NEW;
 8001cb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ce0 <MENU_IdleFunction+0x4c>)
 8001cb8:	2201      	movs	r2, #1
 8001cba:	725a      	strb	r2, [r3, #9]
      while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8001cbc:	e002      	b.n	8001cc4 <MENU_IdleFunction+0x30>
      {
         osDelay(100);
 8001cbe:	2064      	movs	r0, #100	; 0x64
 8001cc0:	f012 fe3e 	bl	8014940 <osDelay>
      while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8001cc4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cc8:	4803      	ldr	r0, [pc, #12]	; (8001cd8 <MENU_IdleFunction+0x44>)
 8001cca:	f00c f8e7 	bl	800de9c <HAL_GPIO_ReadPin>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0f4      	beq.n	8001cbe <MENU_IdleFunction+0x2a>
      }
   }
}
 8001cd4:	bf00      	nop
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	48000400 	.word	0x48000400
 8001cdc:	20004048 	.word	0x20004048
 8001ce0:	200002a4 	.word	0x200002a4

08001ce4 <MENU_ChoiseFunction>:
static void MENU_ChoiseFunction(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b09c      	sub	sp, #112	; 0x70
 8001ce8:	af02      	add	r7, sp, #8
   char Temp[100];
   switch((TIM5->CNT / 4) % MENU_CHOISE_CNT)
 8001cea:	4bb8      	ldr	r3, [pc, #736]	; (8001fcc <MENU_ChoiseFunction+0x2e8>)
 8001cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cee:	0899      	lsrs	r1, r3, #2
 8001cf0:	4bb7      	ldr	r3, [pc, #732]	; (8001fd0 <MENU_ChoiseFunction+0x2ec>)
 8001cf2:	fba3 2301 	umull	r2, r3, r3, r1
 8001cf6:	089a      	lsrs	r2, r3, #2
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	4413      	add	r3, r2
 8001cfe:	1aca      	subs	r2, r1, r3
 8001d00:	2a04      	cmp	r2, #4
 8001d02:	f200 8133 	bhi.w	8001f6c <MENU_ChoiseFunction+0x288>
 8001d06:	a301      	add	r3, pc, #4	; (adr r3, 8001d0c <MENU_ChoiseFunction+0x28>)
 8001d08:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8001d0c:	08001d21 	.word	0x08001d21
 8001d10:	08001d91 	.word	0x08001d91
 8001d14:	08001e01 	.word	0x08001e01
 8001d18:	08001e71 	.word	0x08001e71
 8001d1c:	08001eff 	.word	0x08001eff
   {
      case MENU_CHOISE_TIME:
      {
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8001d20:	4bac      	ldr	r3, [pc, #688]	; (8001fd4 <MENU_ChoiseFunction+0x2f0>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f04f 31ff 	mov.w	r1, #4294967295
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f013 f857 	bl	8014ddc <osMutexAcquire>
         osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8001d2e:	4baa      	ldr	r3, [pc, #680]	; (8001fd8 <MENU_ChoiseFunction+0x2f4>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f04f 31ff 	mov.w	r1, #4294967295
 8001d36:	4618      	mov	r0, r3
 8001d38:	f013 f850 	bl	8014ddc <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8001d3c:	4ba7      	ldr	r3, [pc, #668]	; (8001fdc <MENU_ChoiseFunction+0x2f8>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f04f 31ff 	mov.w	r1, #4294967295
 8001d44:	4618      	mov	r0, r3
 8001d46:	f013 f849 	bl	8014ddc <osMutexAcquire>
         ssd1306_clear();
 8001d4a:	f00a fd39 	bl	800c7c0 <ssd1306_clear>
         sprintf(Temp, "Ustaw godzine");
 8001d4e:	1d3b      	adds	r3, r7, #4
 8001d50:	49a3      	ldr	r1, [pc, #652]	; (8001fe0 <MENU_ChoiseFunction+0x2fc>)
 8001d52:	4618      	mov	r0, r3
 8001d54:	f00a f804 	bl	800bd60 <sprintf_>
         GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8001d58:	1d3a      	adds	r2, r7, #4
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	9301      	str	r3, [sp, #4]
 8001d5e:	2300      	movs	r3, #0
 8001d60:	9300      	str	r3, [sp, #0]
 8001d62:	2301      	movs	r3, #1
 8001d64:	2100      	movs	r1, #0
 8001d66:	2000      	movs	r0, #0
 8001d68:	f7ff faa4 	bl	80012b4 <GFX_DrawString>
         ssd1306_display();
 8001d6c:	f00a fcfc 	bl	800c768 <ssd1306_display>
         osMutexRelease(SPI1MutexHandle);
 8001d70:	4b9a      	ldr	r3, [pc, #616]	; (8001fdc <MENU_ChoiseFunction+0x2f8>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f013 f87c 	bl	8014e72 <osMutexRelease>
         osMutexRelease(SSD1306MutexHandle);
 8001d7a:	4b97      	ldr	r3, [pc, #604]	; (8001fd8 <MENU_ChoiseFunction+0x2f4>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f013 f877 	bl	8014e72 <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 8001d84:	4b93      	ldr	r3, [pc, #588]	; (8001fd4 <MENU_ChoiseFunction+0x2f0>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f013 f872 	bl	8014e72 <osMutexRelease>
         break;
 8001d8e:	e0ee      	b.n	8001f6e <MENU_ChoiseFunction+0x28a>
      }
      case MENU_CHOISE_DATE:
      {
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8001d90:	4b90      	ldr	r3, [pc, #576]	; (8001fd4 <MENU_ChoiseFunction+0x2f0>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f04f 31ff 	mov.w	r1, #4294967295
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f013 f81f 	bl	8014ddc <osMutexAcquire>
         osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8001d9e:	4b8e      	ldr	r3, [pc, #568]	; (8001fd8 <MENU_ChoiseFunction+0x2f4>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f04f 31ff 	mov.w	r1, #4294967295
 8001da6:	4618      	mov	r0, r3
 8001da8:	f013 f818 	bl	8014ddc <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8001dac:	4b8b      	ldr	r3, [pc, #556]	; (8001fdc <MENU_ChoiseFunction+0x2f8>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f04f 31ff 	mov.w	r1, #4294967295
 8001db4:	4618      	mov	r0, r3
 8001db6:	f013 f811 	bl	8014ddc <osMutexAcquire>
         ssd1306_clear();
 8001dba:	f00a fd01 	bl	800c7c0 <ssd1306_clear>
         sprintf(Temp, "Ustaw date");
 8001dbe:	1d3b      	adds	r3, r7, #4
 8001dc0:	4988      	ldr	r1, [pc, #544]	; (8001fe4 <MENU_ChoiseFunction+0x300>)
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f009 ffcc 	bl	800bd60 <sprintf_>
         GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8001dc8:	1d3a      	adds	r2, r7, #4
 8001dca:	2300      	movs	r3, #0
 8001dcc:	9301      	str	r3, [sp, #4]
 8001dce:	2300      	movs	r3, #0
 8001dd0:	9300      	str	r3, [sp, #0]
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	2000      	movs	r0, #0
 8001dd8:	f7ff fa6c 	bl	80012b4 <GFX_DrawString>
         ssd1306_display();
 8001ddc:	f00a fcc4 	bl	800c768 <ssd1306_display>
         osMutexRelease(SPI1MutexHandle);
 8001de0:	4b7e      	ldr	r3, [pc, #504]	; (8001fdc <MENU_ChoiseFunction+0x2f8>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f013 f844 	bl	8014e72 <osMutexRelease>
         osMutexRelease(SSD1306MutexHandle);
 8001dea:	4b7b      	ldr	r3, [pc, #492]	; (8001fd8 <MENU_ChoiseFunction+0x2f4>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f013 f83f 	bl	8014e72 <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 8001df4:	4b77      	ldr	r3, [pc, #476]	; (8001fd4 <MENU_ChoiseFunction+0x2f0>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f013 f83a 	bl	8014e72 <osMutexRelease>
         break;
 8001dfe:	e0b6      	b.n	8001f6e <MENU_ChoiseFunction+0x28a>
      }
      case MENU_CHOISE_CHART:
      {
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8001e00:	4b74      	ldr	r3, [pc, #464]	; (8001fd4 <MENU_ChoiseFunction+0x2f0>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f04f 31ff 	mov.w	r1, #4294967295
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f012 ffe7 	bl	8014ddc <osMutexAcquire>
         osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8001e0e:	4b72      	ldr	r3, [pc, #456]	; (8001fd8 <MENU_ChoiseFunction+0x2f4>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f04f 31ff 	mov.w	r1, #4294967295
 8001e16:	4618      	mov	r0, r3
 8001e18:	f012 ffe0 	bl	8014ddc <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8001e1c:	4b6f      	ldr	r3, [pc, #444]	; (8001fdc <MENU_ChoiseFunction+0x2f8>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f04f 31ff 	mov.w	r1, #4294967295
 8001e24:	4618      	mov	r0, r3
 8001e26:	f012 ffd9 	bl	8014ddc <osMutexAcquire>
         ssd1306_clear();
 8001e2a:	f00a fcc9 	bl	800c7c0 <ssd1306_clear>
         sprintf(Temp, "Wykresy");
 8001e2e:	1d3b      	adds	r3, r7, #4
 8001e30:	496d      	ldr	r1, [pc, #436]	; (8001fe8 <MENU_ChoiseFunction+0x304>)
 8001e32:	4618      	mov	r0, r3
 8001e34:	f009 ff94 	bl	800bd60 <sprintf_>
         GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8001e38:	1d3a      	adds	r2, r7, #4
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	9301      	str	r3, [sp, #4]
 8001e3e:	2300      	movs	r3, #0
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	2301      	movs	r3, #1
 8001e44:	2100      	movs	r1, #0
 8001e46:	2000      	movs	r0, #0
 8001e48:	f7ff fa34 	bl	80012b4 <GFX_DrawString>
         ssd1306_display();
 8001e4c:	f00a fc8c 	bl	800c768 <ssd1306_display>
         osMutexRelease(SPI1MutexHandle);
 8001e50:	4b62      	ldr	r3, [pc, #392]	; (8001fdc <MENU_ChoiseFunction+0x2f8>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f013 f80c 	bl	8014e72 <osMutexRelease>
         osMutexRelease(SSD1306MutexHandle);
 8001e5a:	4b5f      	ldr	r3, [pc, #380]	; (8001fd8 <MENU_ChoiseFunction+0x2f4>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f013 f807 	bl	8014e72 <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 8001e64:	4b5b      	ldr	r3, [pc, #364]	; (8001fd4 <MENU_ChoiseFunction+0x2f0>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f013 f802 	bl	8014e72 <osMutexRelease>
         break;
 8001e6e:	e07e      	b.n	8001f6e <MENU_ChoiseFunction+0x28a>
      }
      case MENU_CHOISE_CLEAR_EXTERNAL_MEMORY:
      {
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8001e70:	4b58      	ldr	r3, [pc, #352]	; (8001fd4 <MENU_ChoiseFunction+0x2f0>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f04f 31ff 	mov.w	r1, #4294967295
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f012 ffaf 	bl	8014ddc <osMutexAcquire>
         osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8001e7e:	4b56      	ldr	r3, [pc, #344]	; (8001fd8 <MENU_ChoiseFunction+0x2f4>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f04f 31ff 	mov.w	r1, #4294967295
 8001e86:	4618      	mov	r0, r3
 8001e88:	f012 ffa8 	bl	8014ddc <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8001e8c:	4b53      	ldr	r3, [pc, #332]	; (8001fdc <MENU_ChoiseFunction+0x2f8>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f04f 31ff 	mov.w	r1, #4294967295
 8001e94:	4618      	mov	r0, r3
 8001e96:	f012 ffa1 	bl	8014ddc <osMutexAcquire>
         ssd1306_clear();
 8001e9a:	f00a fc91 	bl	800c7c0 <ssd1306_clear>
         sprintf(Temp, "Czyszczenie Pamieci");
 8001e9e:	1d3b      	adds	r3, r7, #4
 8001ea0:	4952      	ldr	r1, [pc, #328]	; (8001fec <MENU_ChoiseFunction+0x308>)
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f009 ff5c 	bl	800bd60 <sprintf_>
         GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8001ea8:	1d3a      	adds	r2, r7, #4
 8001eaa:	2300      	movs	r3, #0
 8001eac:	9301      	str	r3, [sp, #4]
 8001eae:	2300      	movs	r3, #0
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	f7ff f9fc 	bl	80012b4 <GFX_DrawString>
         sprintf(Temp, "WYMAGA POTWIERDZENIA");
 8001ebc:	1d3b      	adds	r3, r7, #4
 8001ebe:	494c      	ldr	r1, [pc, #304]	; (8001ff0 <MENU_ChoiseFunction+0x30c>)
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f009 ff4d 	bl	800bd60 <sprintf_>
         GFX_DrawString(0, 10, Temp, WHITE, 0, OLED);
 8001ec6:	1d3a      	adds	r2, r7, #4
 8001ec8:	2300      	movs	r3, #0
 8001eca:	9301      	str	r3, [sp, #4]
 8001ecc:	2300      	movs	r3, #0
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	210a      	movs	r1, #10
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	f7ff f9ed 	bl	80012b4 <GFX_DrawString>
         ssd1306_display();
 8001eda:	f00a fc45 	bl	800c768 <ssd1306_display>
         osMutexRelease(SPI1MutexHandle);
 8001ede:	4b3f      	ldr	r3, [pc, #252]	; (8001fdc <MENU_ChoiseFunction+0x2f8>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f012 ffc5 	bl	8014e72 <osMutexRelease>
         osMutexRelease(SSD1306MutexHandle);
 8001ee8:	4b3b      	ldr	r3, [pc, #236]	; (8001fd8 <MENU_ChoiseFunction+0x2f4>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f012 ffc0 	bl	8014e72 <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 8001ef2:	4b38      	ldr	r3, [pc, #224]	; (8001fd4 <MENU_ChoiseFunction+0x2f0>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f012 ffbb 	bl	8014e72 <osMutexRelease>
         break;
 8001efc:	e037      	b.n	8001f6e <MENU_ChoiseFunction+0x28a>
      }
      case MENU_CHOISE_DARK_MODE:
      {
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8001efe:	4b35      	ldr	r3, [pc, #212]	; (8001fd4 <MENU_ChoiseFunction+0x2f0>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f04f 31ff 	mov.w	r1, #4294967295
 8001f06:	4618      	mov	r0, r3
 8001f08:	f012 ff68 	bl	8014ddc <osMutexAcquire>
         osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8001f0c:	4b32      	ldr	r3, [pc, #200]	; (8001fd8 <MENU_ChoiseFunction+0x2f4>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f04f 31ff 	mov.w	r1, #4294967295
 8001f14:	4618      	mov	r0, r3
 8001f16:	f012 ff61 	bl	8014ddc <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8001f1a:	4b30      	ldr	r3, [pc, #192]	; (8001fdc <MENU_ChoiseFunction+0x2f8>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f04f 31ff 	mov.w	r1, #4294967295
 8001f22:	4618      	mov	r0, r3
 8001f24:	f012 ff5a 	bl	8014ddc <osMutexAcquire>
         ssd1306_clear();
 8001f28:	f00a fc4a 	bl	800c7c0 <ssd1306_clear>
         sprintf(Temp, "ON/OFF Tryb ciemny");
 8001f2c:	1d3b      	adds	r3, r7, #4
 8001f2e:	4931      	ldr	r1, [pc, #196]	; (8001ff4 <MENU_ChoiseFunction+0x310>)
 8001f30:	4618      	mov	r0, r3
 8001f32:	f009 ff15 	bl	800bd60 <sprintf_>
         GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8001f36:	1d3a      	adds	r2, r7, #4
 8001f38:	2300      	movs	r3, #0
 8001f3a:	9301      	str	r3, [sp, #4]
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	2301      	movs	r3, #1
 8001f42:	2100      	movs	r1, #0
 8001f44:	2000      	movs	r0, #0
 8001f46:	f7ff f9b5 	bl	80012b4 <GFX_DrawString>
         ssd1306_display();
 8001f4a:	f00a fc0d 	bl	800c768 <ssd1306_display>
         osMutexRelease(SPI1MutexHandle);
 8001f4e:	4b23      	ldr	r3, [pc, #140]	; (8001fdc <MENU_ChoiseFunction+0x2f8>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f012 ff8d 	bl	8014e72 <osMutexRelease>
         osMutexRelease(SSD1306MutexHandle);
 8001f58:	4b1f      	ldr	r3, [pc, #124]	; (8001fd8 <MENU_ChoiseFunction+0x2f4>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f012 ff88 	bl	8014e72 <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 8001f62:	4b1c      	ldr	r3, [pc, #112]	; (8001fd4 <MENU_ChoiseFunction+0x2f0>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f012 ff83 	bl	8014e72 <osMutexRelease>
      }
      default:
      {
         break;
 8001f6c:	bf00      	nop
      }
   }
   if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8001f6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f72:	4821      	ldr	r0, [pc, #132]	; (8001ff8 <MENU_ChoiseFunction+0x314>)
 8001f74:	f00b ff92 	bl	800de9c <HAL_GPIO_ReadPin>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d121      	bne.n	8001fc2 <MENU_ChoiseFunction+0x2de>
   {
      Menu.NewEvent  = MENU_EVENT_CHOISE;
 8001f7e:	4b1f      	ldr	r3, [pc, #124]	; (8001ffc <MENU_ChoiseFunction+0x318>)
 8001f80:	2202      	movs	r2, #2
 8001f82:	725a      	strb	r2, [r3, #9]
      Menu.ChoiseCnt = (TIM5->CNT / 4) % MENU_CHOISE_CNT;
 8001f84:	4b11      	ldr	r3, [pc, #68]	; (8001fcc <MENU_ChoiseFunction+0x2e8>)
 8001f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f88:	0899      	lsrs	r1, r3, #2
 8001f8a:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <MENU_ChoiseFunction+0x2ec>)
 8001f8c:	fba3 2301 	umull	r2, r3, r3, r1
 8001f90:	089a      	lsrs	r2, r3, #2
 8001f92:	4613      	mov	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4413      	add	r3, r2
 8001f98:	1aca      	subs	r2, r1, r3
 8001f9a:	4b18      	ldr	r3, [pc, #96]	; (8001ffc <MENU_ChoiseFunction+0x318>)
 8001f9c:	601a      	str	r2, [r3, #0]
      TIM5->CNT      = 0;
 8001f9e:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <MENU_ChoiseFunction+0x2e8>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	625a      	str	r2, [r3, #36]	; 0x24
      Menu.f         = 0;
 8001fa4:	4b15      	ldr	r3, [pc, #84]	; (8001ffc <MENU_ChoiseFunction+0x318>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	729a      	strb	r2, [r3, #10]
      while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8001faa:	e002      	b.n	8001fb2 <MENU_ChoiseFunction+0x2ce>
      {
         osDelay(100);
 8001fac:	2064      	movs	r0, #100	; 0x64
 8001fae:	f012 fcc7 	bl	8014940 <osDelay>
      while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8001fb2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fb6:	4810      	ldr	r0, [pc, #64]	; (8001ff8 <MENU_ChoiseFunction+0x314>)
 8001fb8:	f00b ff70 	bl	800de9c <HAL_GPIO_ReadPin>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d0f4      	beq.n	8001fac <MENU_ChoiseFunction+0x2c8>
      }
   }
}
 8001fc2:	bf00      	nop
 8001fc4:	3768      	adds	r7, #104	; 0x68
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40000c00 	.word	0x40000c00
 8001fd0:	cccccccd 	.word	0xcccccccd
 8001fd4:	20004034 	.word	0x20004034
 8001fd8:	20004038 	.word	0x20004038
 8001fdc:	2000403c 	.word	0x2000403c
 8001fe0:	0801eef8 	.word	0x0801eef8
 8001fe4:	0801ef08 	.word	0x0801ef08
 8001fe8:	0801ef14 	.word	0x0801ef14
 8001fec:	0801ef1c 	.word	0x0801ef1c
 8001ff0:	0801ef30 	.word	0x0801ef30
 8001ff4:	0801ef48 	.word	0x0801ef48
 8001ff8:	48000400 	.word	0x48000400
 8001ffc:	200002a4 	.word	0x200002a4

08002000 <MENU_RunningFunction>:
static void MENU_RunningFunction(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b0b0      	sub	sp, #192	; 0xc0
 8002004:	af02      	add	r7, sp, #8
   char Temp[100];
   ChartDateAndType_TypeDef QueueChartData = { 0 };
 8002006:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	809a      	strh	r2, [r3, #4]
   switch(Menu.ChoiseCnt)
 8002010:	4baa      	ldr	r3, [pc, #680]	; (80022bc <MENU_RunningFunction+0x2bc>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2b04      	cmp	r3, #4
 8002016:	f201 83f7 	bhi.w	8003808 <MENU_RunningFunction+0x1808>
 800201a:	a201      	add	r2, pc, #4	; (adr r2, 8002020 <MENU_RunningFunction+0x20>)
 800201c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002020:	08002035 	.word	0x08002035
 8002024:	08002417 	.word	0x08002417
 8002028:	080027ef 	.word	0x080027ef
 800202c:	0800338d 	.word	0x0800338d
 8002030:	0800361b 	.word	0x0800361b
   {
      case MENU_CHOISE_TIME:
      {
         RTC_TimeTypeDef RtcTime;
         RTC_DateTypeDef RtcDate;
         osMutexAcquire(RTCMutexHandle, osWaitForever);
 8002034:	4ba2      	ldr	r3, [pc, #648]	; (80022c0 <MENU_RunningFunction+0x2c0>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f04f 31ff 	mov.w	r1, #4294967295
 800203c:	4618      	mov	r0, r3
 800203e:	f012 fecd 	bl	8014ddc <osMutexAcquire>
         HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 8002042:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002046:	2200      	movs	r2, #0
 8002048:	4619      	mov	r1, r3
 800204a:	489e      	ldr	r0, [pc, #632]	; (80022c4 <MENU_RunningFunction+0x2c4>)
 800204c:	f00d fe94 	bl	800fd78 <HAL_RTC_GetTime>
         HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 8002050:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002054:	2200      	movs	r2, #0
 8002056:	4619      	mov	r1, r3
 8002058:	489a      	ldr	r0, [pc, #616]	; (80022c4 <MENU_RunningFunction+0x2c4>)
 800205a:	f00d ff77 	bl	800ff4c <HAL_RTC_GetDate>
         osMutexRelease(RTCMutexHandle);
 800205e:	4b98      	ldr	r3, [pc, #608]	; (80022c0 <MENU_RunningFunction+0x2c0>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f012 ff05 	bl	8014e72 <osMutexRelease>
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8002068:	4b97      	ldr	r3, [pc, #604]	; (80022c8 <MENU_RunningFunction+0x2c8>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f04f 31ff 	mov.w	r1, #4294967295
 8002070:	4618      	mov	r0, r3
 8002072:	f012 feb3 	bl	8014ddc <osMutexAcquire>
         osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8002076:	4b95      	ldr	r3, [pc, #596]	; (80022cc <MENU_RunningFunction+0x2cc>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f04f 31ff 	mov.w	r1, #4294967295
 800207e:	4618      	mov	r0, r3
 8002080:	f012 feac 	bl	8014ddc <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002084:	4b92      	ldr	r3, [pc, #584]	; (80022d0 <MENU_RunningFunction+0x2d0>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f04f 31ff 	mov.w	r1, #4294967295
 800208c:	4618      	mov	r0, r3
 800208e:	f012 fea5 	bl	8014ddc <osMutexAcquire>
         ssd1306_clear();
 8002092:	f00a fb95 	bl	800c7c0 <ssd1306_clear>
         sprintf(Temp, "%d h %d m %d s", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 8002096:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800209a:	461a      	mov	r2, r3
 800209c:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80020a0:	4619      	mov	r1, r3
 80020a2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80020a6:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	460b      	mov	r3, r1
 80020ae:	4989      	ldr	r1, [pc, #548]	; (80022d4 <MENU_RunningFunction+0x2d4>)
 80020b0:	f009 fe56 	bl	800bd60 <sprintf_>
         GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 80020b4:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80020b8:	2300      	movs	r3, #0
 80020ba:	9301      	str	r3, [sp, #4]
 80020bc:	2300      	movs	r3, #0
 80020be:	9300      	str	r3, [sp, #0]
 80020c0:	2301      	movs	r3, #1
 80020c2:	2100      	movs	r1, #0
 80020c4:	2000      	movs	r0, #0
 80020c6:	f7ff f8f5 	bl	80012b4 <GFX_DrawString>
         ssd1306_display();
 80020ca:	f00a fb4d 	bl	800c768 <ssd1306_display>
         osMutexRelease(SPI1MutexHandle);
 80020ce:	4b80      	ldr	r3, [pc, #512]	; (80022d0 <MENU_RunningFunction+0x2d0>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f012 fecd 	bl	8014e72 <osMutexRelease>
         osMutexRelease(SSD1306MutexHandle);
 80020d8:	4b7c      	ldr	r3, [pc, #496]	; (80022cc <MENU_RunningFunction+0x2cc>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	f012 fec8 	bl	8014e72 <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 80020e2:	4b79      	ldr	r3, [pc, #484]	; (80022c8 <MENU_RunningFunction+0x2c8>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f012 fec3 	bl	8014e72 <osMutexRelease>
         while(Menu.f == 0)
 80020ec:	e18c      	b.n	8002408 <MENU_RunningFunction+0x408>
         {
            if(Menu.ButtonCnt == 0)
 80020ee:	4b73      	ldr	r3, [pc, #460]	; (80022bc <MENU_RunningFunction+0x2bc>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d16e      	bne.n	80021d4 <MENU_RunningFunction+0x1d4>
            {
               RtcTime.Hours = (TIM5->CNT / 4) % 24;
 80020f6:	4b78      	ldr	r3, [pc, #480]	; (80022d8 <MENU_RunningFunction+0x2d8>)
 80020f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fa:	0899      	lsrs	r1, r3, #2
 80020fc:	4b77      	ldr	r3, [pc, #476]	; (80022dc <MENU_RunningFunction+0x2dc>)
 80020fe:	fba3 2301 	umull	r2, r3, r3, r1
 8002102:	091a      	lsrs	r2, r3, #4
 8002104:	4613      	mov	r3, r2
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	4413      	add	r3, r2
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	1aca      	subs	r2, r1, r3
 800210e:	b2d3      	uxtb	r3, r2
 8002110:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8002114:	4b6c      	ldr	r3, [pc, #432]	; (80022c8 <MENU_RunningFunction+0x2c8>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f04f 31ff 	mov.w	r1, #4294967295
 800211c:	4618      	mov	r0, r3
 800211e:	f012 fe5d 	bl	8014ddc <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8002122:	4b6a      	ldr	r3, [pc, #424]	; (80022cc <MENU_RunningFunction+0x2cc>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f04f 31ff 	mov.w	r1, #4294967295
 800212a:	4618      	mov	r0, r3
 800212c:	f012 fe56 	bl	8014ddc <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002130:	4b67      	ldr	r3, [pc, #412]	; (80022d0 <MENU_RunningFunction+0x2d0>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f04f 31ff 	mov.w	r1, #4294967295
 8002138:	4618      	mov	r0, r3
 800213a:	f012 fe4f 	bl	8014ddc <osMutexAcquire>
               ssd1306_clear();
 800213e:	f00a fb3f 	bl	800c7c0 <ssd1306_clear>
               sprintf(Temp, "%d h %d m %d s", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 8002142:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002146:	461a      	mov	r2, r3
 8002148:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800214c:	4619      	mov	r1, r3
 800214e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002152:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8002156:	9300      	str	r3, [sp, #0]
 8002158:	460b      	mov	r3, r1
 800215a:	495e      	ldr	r1, [pc, #376]	; (80022d4 <MENU_RunningFunction+0x2d4>)
 800215c:	f009 fe00 	bl	800bd60 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002160:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002164:	2300      	movs	r3, #0
 8002166:	9301      	str	r3, [sp, #4]
 8002168:	2300      	movs	r3, #0
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	2301      	movs	r3, #1
 800216e:	2100      	movs	r1, #0
 8002170:	2000      	movs	r0, #0
 8002172:	f7ff f89f 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 8002176:	f00a faf7 	bl	800c768 <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 800217a:	4b55      	ldr	r3, [pc, #340]	; (80022d0 <MENU_RunningFunction+0x2d0>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f012 fe77 	bl	8014e72 <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 8002184:	4b51      	ldr	r3, [pc, #324]	; (80022cc <MENU_RunningFunction+0x2cc>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f012 fe72 	bl	8014e72 <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 800218e:	4b4e      	ldr	r3, [pc, #312]	; (80022c8 <MENU_RunningFunction+0x2c8>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f012 fe6d 	bl	8014e72 <osMutexRelease>
               if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002198:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800219c:	4850      	ldr	r0, [pc, #320]	; (80022e0 <MENU_RunningFunction+0x2e0>)
 800219e:	f00b fe7d 	bl	800de9c <HAL_GPIO_ReadPin>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f040 812c 	bne.w	8002402 <MENU_RunningFunction+0x402>
               {
                  Menu.ButtonCnt++;
 80021aa:	4b44      	ldr	r3, [pc, #272]	; (80022bc <MENU_RunningFunction+0x2bc>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	3301      	adds	r3, #1
 80021b0:	4a42      	ldr	r2, [pc, #264]	; (80022bc <MENU_RunningFunction+0x2bc>)
 80021b2:	6053      	str	r3, [r2, #4]
                  TIM5->CNT = 0;
 80021b4:	4b48      	ldr	r3, [pc, #288]	; (80022d8 <MENU_RunningFunction+0x2d8>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	625a      	str	r2, [r3, #36]	; 0x24
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 80021ba:	e002      	b.n	80021c2 <MENU_RunningFunction+0x1c2>
                  {
                     osDelay(100);
 80021bc:	2064      	movs	r0, #100	; 0x64
 80021be:	f012 fbbf 	bl	8014940 <osDelay>
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 80021c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021c6:	4846      	ldr	r0, [pc, #280]	; (80022e0 <MENU_RunningFunction+0x2e0>)
 80021c8:	f00b fe68 	bl	800de9c <HAL_GPIO_ReadPin>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0f4      	beq.n	80021bc <MENU_RunningFunction+0x1bc>
 80021d2:	e116      	b.n	8002402 <MENU_RunningFunction+0x402>
                  }
               }
            }
            else if(Menu.ButtonCnt == 1)
 80021d4:	4b39      	ldr	r3, [pc, #228]	; (80022bc <MENU_RunningFunction+0x2bc>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	f040 8085 	bne.w	80022e8 <MENU_RunningFunction+0x2e8>
            {
               RtcTime.Minutes = (TIM5->CNT / 4) % 60;
 80021de:	4b3e      	ldr	r3, [pc, #248]	; (80022d8 <MENU_RunningFunction+0x2d8>)
 80021e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e2:	0899      	lsrs	r1, r3, #2
 80021e4:	4b3f      	ldr	r3, [pc, #252]	; (80022e4 <MENU_RunningFunction+0x2e4>)
 80021e6:	fba3 2301 	umull	r2, r3, r3, r1
 80021ea:	095a      	lsrs	r2, r3, #5
 80021ec:	4613      	mov	r3, r2
 80021ee:	011b      	lsls	r3, r3, #4
 80021f0:	1a9b      	subs	r3, r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	1aca      	subs	r2, r1, r3
 80021f6:	b2d3      	uxtb	r3, r2
 80021f8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 80021fc:	4b32      	ldr	r3, [pc, #200]	; (80022c8 <MENU_RunningFunction+0x2c8>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f04f 31ff 	mov.w	r1, #4294967295
 8002204:	4618      	mov	r0, r3
 8002206:	f012 fde9 	bl	8014ddc <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 800220a:	4b30      	ldr	r3, [pc, #192]	; (80022cc <MENU_RunningFunction+0x2cc>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f04f 31ff 	mov.w	r1, #4294967295
 8002212:	4618      	mov	r0, r3
 8002214:	f012 fde2 	bl	8014ddc <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002218:	4b2d      	ldr	r3, [pc, #180]	; (80022d0 <MENU_RunningFunction+0x2d0>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f04f 31ff 	mov.w	r1, #4294967295
 8002220:	4618      	mov	r0, r3
 8002222:	f012 fddb 	bl	8014ddc <osMutexAcquire>
               ssd1306_clear();
 8002226:	f00a facb 	bl	800c7c0 <ssd1306_clear>
               sprintf(Temp, "%d h %d m %d s", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 800222a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800222e:	461a      	mov	r2, r3
 8002230:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8002234:	4619      	mov	r1, r3
 8002236:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800223a:	f107 0054 	add.w	r0, r7, #84	; 0x54
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	460b      	mov	r3, r1
 8002242:	4924      	ldr	r1, [pc, #144]	; (80022d4 <MENU_RunningFunction+0x2d4>)
 8002244:	f009 fd8c 	bl	800bd60 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002248:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800224c:	2300      	movs	r3, #0
 800224e:	9301      	str	r3, [sp, #4]
 8002250:	2300      	movs	r3, #0
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	2301      	movs	r3, #1
 8002256:	2100      	movs	r1, #0
 8002258:	2000      	movs	r0, #0
 800225a:	f7ff f82b 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 800225e:	f00a fa83 	bl	800c768 <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 8002262:	4b1b      	ldr	r3, [pc, #108]	; (80022d0 <MENU_RunningFunction+0x2d0>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f012 fe03 	bl	8014e72 <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 800226c:	4b17      	ldr	r3, [pc, #92]	; (80022cc <MENU_RunningFunction+0x2cc>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f012 fdfe 	bl	8014e72 <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 8002276:	4b14      	ldr	r3, [pc, #80]	; (80022c8 <MENU_RunningFunction+0x2c8>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f012 fdf9 	bl	8014e72 <osMutexRelease>
               if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002280:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002284:	4816      	ldr	r0, [pc, #88]	; (80022e0 <MENU_RunningFunction+0x2e0>)
 8002286:	f00b fe09 	bl	800de9c <HAL_GPIO_ReadPin>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	f040 80b8 	bne.w	8002402 <MENU_RunningFunction+0x402>
               {
                  Menu.ButtonCnt++;
 8002292:	4b0a      	ldr	r3, [pc, #40]	; (80022bc <MENU_RunningFunction+0x2bc>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	3301      	adds	r3, #1
 8002298:	4a08      	ldr	r2, [pc, #32]	; (80022bc <MENU_RunningFunction+0x2bc>)
 800229a:	6053      	str	r3, [r2, #4]
                  TIM5->CNT = 0;
 800229c:	4b0e      	ldr	r3, [pc, #56]	; (80022d8 <MENU_RunningFunction+0x2d8>)
 800229e:	2200      	movs	r2, #0
 80022a0:	625a      	str	r2, [r3, #36]	; 0x24
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 80022a2:	e002      	b.n	80022aa <MENU_RunningFunction+0x2aa>
                  {
                     osDelay(100);
 80022a4:	2064      	movs	r0, #100	; 0x64
 80022a6:	f012 fb4b 	bl	8014940 <osDelay>
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 80022aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022ae:	480c      	ldr	r0, [pc, #48]	; (80022e0 <MENU_RunningFunction+0x2e0>)
 80022b0:	f00b fdf4 	bl	800de9c <HAL_GPIO_ReadPin>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0f4      	beq.n	80022a4 <MENU_RunningFunction+0x2a4>
 80022ba:	e0a2      	b.n	8002402 <MENU_RunningFunction+0x402>
 80022bc:	200002a4 	.word	0x200002a4
 80022c0:	2000404c 	.word	0x2000404c
 80022c4:	20004164 	.word	0x20004164
 80022c8:	20004034 	.word	0x20004034
 80022cc:	20004038 	.word	0x20004038
 80022d0:	2000403c 	.word	0x2000403c
 80022d4:	0801ef5c 	.word	0x0801ef5c
 80022d8:	40000c00 	.word	0x40000c00
 80022dc:	aaaaaaab 	.word	0xaaaaaaab
 80022e0:	48000400 	.word	0x48000400
 80022e4:	88888889 	.word	0x88888889
                  }
               }
            }
            else
            {
               RtcTime.Seconds = (TIM5->CNT / 4) % 60;
 80022e8:	4bb2      	ldr	r3, [pc, #712]	; (80025b4 <MENU_RunningFunction+0x5b4>)
 80022ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ec:	0899      	lsrs	r1, r3, #2
 80022ee:	4bb2      	ldr	r3, [pc, #712]	; (80025b8 <MENU_RunningFunction+0x5b8>)
 80022f0:	fba3 2301 	umull	r2, r3, r3, r1
 80022f4:	095a      	lsrs	r2, r3, #5
 80022f6:	4613      	mov	r3, r2
 80022f8:	011b      	lsls	r3, r3, #4
 80022fa:	1a9b      	subs	r3, r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	1aca      	subs	r2, r1, r3
 8002300:	b2d3      	uxtb	r3, r2
 8002302:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8002306:	4bad      	ldr	r3, [pc, #692]	; (80025bc <MENU_RunningFunction+0x5bc>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f04f 31ff 	mov.w	r1, #4294967295
 800230e:	4618      	mov	r0, r3
 8002310:	f012 fd64 	bl	8014ddc <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8002314:	4baa      	ldr	r3, [pc, #680]	; (80025c0 <MENU_RunningFunction+0x5c0>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f04f 31ff 	mov.w	r1, #4294967295
 800231c:	4618      	mov	r0, r3
 800231e:	f012 fd5d 	bl	8014ddc <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002322:	4ba8      	ldr	r3, [pc, #672]	; (80025c4 <MENU_RunningFunction+0x5c4>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f04f 31ff 	mov.w	r1, #4294967295
 800232a:	4618      	mov	r0, r3
 800232c:	f012 fd56 	bl	8014ddc <osMutexAcquire>
               ssd1306_clear();
 8002330:	f00a fa46 	bl	800c7c0 <ssd1306_clear>
               sprintf(Temp, "%d h %d m %d s", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 8002334:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002338:	461a      	mov	r2, r3
 800233a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800233e:	4619      	mov	r1, r3
 8002340:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002344:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	460b      	mov	r3, r1
 800234c:	499e      	ldr	r1, [pc, #632]	; (80025c8 <MENU_RunningFunction+0x5c8>)
 800234e:	f009 fd07 	bl	800bd60 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002352:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002356:	2300      	movs	r3, #0
 8002358:	9301      	str	r3, [sp, #4]
 800235a:	2300      	movs	r3, #0
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	2301      	movs	r3, #1
 8002360:	2100      	movs	r1, #0
 8002362:	2000      	movs	r0, #0
 8002364:	f7fe ffa6 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 8002368:	f00a f9fe 	bl	800c768 <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 800236c:	4b95      	ldr	r3, [pc, #596]	; (80025c4 <MENU_RunningFunction+0x5c4>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f012 fd7e 	bl	8014e72 <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 8002376:	4b92      	ldr	r3, [pc, #584]	; (80025c0 <MENU_RunningFunction+0x5c0>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f012 fd79 	bl	8014e72 <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 8002380:	4b8e      	ldr	r3, [pc, #568]	; (80025bc <MENU_RunningFunction+0x5bc>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f012 fd74 	bl	8014e72 <osMutexRelease>
               if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 800238a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800238e:	488f      	ldr	r0, [pc, #572]	; (80025cc <MENU_RunningFunction+0x5cc>)
 8002390:	f00b fd84 	bl	800de9c <HAL_GPIO_ReadPin>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d133      	bne.n	8002402 <MENU_RunningFunction+0x402>
               {
                  Menu.ButtonCnt++;
 800239a:	4b8d      	ldr	r3, [pc, #564]	; (80025d0 <MENU_RunningFunction+0x5d0>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	3301      	adds	r3, #1
 80023a0:	4a8b      	ldr	r2, [pc, #556]	; (80025d0 <MENU_RunningFunction+0x5d0>)
 80023a2:	6053      	str	r3, [r2, #4]
                  TIM5->CNT = 0;
 80023a4:	4b83      	ldr	r3, [pc, #524]	; (80025b4 <MENU_RunningFunction+0x5b4>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	625a      	str	r2, [r3, #36]	; 0x24
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 80023aa:	e002      	b.n	80023b2 <MENU_RunningFunction+0x3b2>
                  {
                     osDelay(100);
 80023ac:	2064      	movs	r0, #100	; 0x64
 80023ae:	f012 fac7 	bl	8014940 <osDelay>
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 80023b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023b6:	4885      	ldr	r0, [pc, #532]	; (80025cc <MENU_RunningFunction+0x5cc>)
 80023b8:	f00b fd70 	bl	800de9c <HAL_GPIO_ReadPin>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d0f4      	beq.n	80023ac <MENU_RunningFunction+0x3ac>
                  }
                  Menu.ButtonCnt = 0;
 80023c2:	4b83      	ldr	r3, [pc, #524]	; (80025d0 <MENU_RunningFunction+0x5d0>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	605a      	str	r2, [r3, #4]
                  Menu.f         = 1;
 80023c8:	4b81      	ldr	r3, [pc, #516]	; (80025d0 <MENU_RunningFunction+0x5d0>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	729a      	strb	r2, [r3, #10]
                  osMutexAcquire(RTCMutexHandle, osWaitForever);
 80023ce:	4b81      	ldr	r3, [pc, #516]	; (80025d4 <MENU_RunningFunction+0x5d4>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f04f 31ff 	mov.w	r1, #4294967295
 80023d6:	4618      	mov	r0, r3
 80023d8:	f012 fd00 	bl	8014ddc <osMutexAcquire>
                  while(HAL_RTC_SetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN) != HAL_OK)
 80023dc:	e002      	b.n	80023e4 <MENU_RunningFunction+0x3e4>
                  {
                     osDelay(100);
 80023de:	2064      	movs	r0, #100	; 0x64
 80023e0:	f012 faae 	bl	8014940 <osDelay>
                  while(HAL_RTC_SetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN) != HAL_OK)
 80023e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80023e8:	2200      	movs	r2, #0
 80023ea:	4619      	mov	r1, r3
 80023ec:	487a      	ldr	r0, [pc, #488]	; (80025d8 <MENU_RunningFunction+0x5d8>)
 80023ee:	f00d fc23 	bl	800fc38 <HAL_RTC_SetTime>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1f2      	bne.n	80023de <MENU_RunningFunction+0x3de>
                  }
                  osMutexRelease(RTCMutexHandle);
 80023f8:	4b76      	ldr	r3, [pc, #472]	; (80025d4 <MENU_RunningFunction+0x5d4>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f012 fd38 	bl	8014e72 <osMutexRelease>
               }
            }
            osDelay(50);
 8002402:	2032      	movs	r0, #50	; 0x32
 8002404:	f012 fa9c 	bl	8014940 <osDelay>
         while(Menu.f == 0)
 8002408:	4b71      	ldr	r3, [pc, #452]	; (80025d0 <MENU_RunningFunction+0x5d0>)
 800240a:	7a9b      	ldrb	r3, [r3, #10]
 800240c:	2b00      	cmp	r3, #0
 800240e:	f43f ae6e 	beq.w	80020ee <MENU_RunningFunction+0xee>
         }
         break;
 8002412:	f001 b9fe 	b.w	8003812 <MENU_RunningFunction+0x1812>
      }
      case MENU_CHOISE_DATE:
      {
         RTC_TimeTypeDef RtcTime;
         RTC_DateTypeDef RtcDate;
         osMutexAcquire(RTCMutexHandle, osWaitForever);
 8002416:	4b6f      	ldr	r3, [pc, #444]	; (80025d4 <MENU_RunningFunction+0x5d4>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f04f 31ff 	mov.w	r1, #4294967295
 800241e:	4618      	mov	r0, r3
 8002420:	f012 fcdc 	bl	8014ddc <osMutexAcquire>
         HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 8002424:	f107 0320 	add.w	r3, r7, #32
 8002428:	2200      	movs	r2, #0
 800242a:	4619      	mov	r1, r3
 800242c:	486a      	ldr	r0, [pc, #424]	; (80025d8 <MENU_RunningFunction+0x5d8>)
 800242e:	f00d fca3 	bl	800fd78 <HAL_RTC_GetTime>
         HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 8002432:	f107 031c 	add.w	r3, r7, #28
 8002436:	2200      	movs	r2, #0
 8002438:	4619      	mov	r1, r3
 800243a:	4867      	ldr	r0, [pc, #412]	; (80025d8 <MENU_RunningFunction+0x5d8>)
 800243c:	f00d fd86 	bl	800ff4c <HAL_RTC_GetDate>
         osMutexRelease(RTCMutexHandle);
 8002440:	4b64      	ldr	r3, [pc, #400]	; (80025d4 <MENU_RunningFunction+0x5d4>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4618      	mov	r0, r3
 8002446:	f012 fd14 	bl	8014e72 <osMutexRelease>
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 800244a:	4b5c      	ldr	r3, [pc, #368]	; (80025bc <MENU_RunningFunction+0x5bc>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f04f 31ff 	mov.w	r1, #4294967295
 8002452:	4618      	mov	r0, r3
 8002454:	f012 fcc2 	bl	8014ddc <osMutexAcquire>
         osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8002458:	4b59      	ldr	r3, [pc, #356]	; (80025c0 <MENU_RunningFunction+0x5c0>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f04f 31ff 	mov.w	r1, #4294967295
 8002460:	4618      	mov	r0, r3
 8002462:	f012 fcbb 	bl	8014ddc <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002466:	4b57      	ldr	r3, [pc, #348]	; (80025c4 <MENU_RunningFunction+0x5c4>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f04f 31ff 	mov.w	r1, #4294967295
 800246e:	4618      	mov	r0, r3
 8002470:	f012 fcb4 	bl	8014ddc <osMutexAcquire>
         ssd1306_clear();
 8002474:	f00a f9a4 	bl	800c7c0 <ssd1306_clear>
         sprintf(Temp, "%d : %d : 20%d :", RtcDate.Date, RtcDate.Month, RtcDate.Year);
 8002478:	7fbb      	ldrb	r3, [r7, #30]
 800247a:	461a      	mov	r2, r3
 800247c:	7f7b      	ldrb	r3, [r7, #29]
 800247e:	4619      	mov	r1, r3
 8002480:	7ffb      	ldrb	r3, [r7, #31]
 8002482:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	460b      	mov	r3, r1
 800248a:	4954      	ldr	r1, [pc, #336]	; (80025dc <MENU_RunningFunction+0x5dc>)
 800248c:	f009 fc68 	bl	800bd60 <sprintf_>
         GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002490:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002494:	2300      	movs	r3, #0
 8002496:	9301      	str	r3, [sp, #4]
 8002498:	2300      	movs	r3, #0
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	2301      	movs	r3, #1
 800249e:	2100      	movs	r1, #0
 80024a0:	2000      	movs	r0, #0
 80024a2:	f7fe ff07 	bl	80012b4 <GFX_DrawString>
         ssd1306_display();
 80024a6:	f00a f95f 	bl	800c768 <ssd1306_display>
         osMutexRelease(SPI1MutexHandle);
 80024aa:	4b46      	ldr	r3, [pc, #280]	; (80025c4 <MENU_RunningFunction+0x5c4>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f012 fcdf 	bl	8014e72 <osMutexRelease>
         osMutexRelease(SSD1306MutexHandle);
 80024b4:	4b42      	ldr	r3, [pc, #264]	; (80025c0 <MENU_RunningFunction+0x5c0>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f012 fcda 	bl	8014e72 <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 80024be:	4b3f      	ldr	r3, [pc, #252]	; (80025bc <MENU_RunningFunction+0x5bc>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f012 fcd5 	bl	8014e72 <osMutexRelease>
         while(Menu.f == 0)
 80024c8:	e18a      	b.n	80027e0 <MENU_RunningFunction+0x7e0>
         {
            if(Menu.ButtonCnt == 0)
 80024ca:	4b41      	ldr	r3, [pc, #260]	; (80025d0 <MENU_RunningFunction+0x5d0>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f040 8088 	bne.w	80025e4 <MENU_RunningFunction+0x5e4>
            {
               RtcDate.Date = (TIM5->CNT / 4) % 31 + 1;
 80024d4:	4b37      	ldr	r3, [pc, #220]	; (80025b4 <MENU_RunningFunction+0x5b4>)
 80024d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d8:	089a      	lsrs	r2, r3, #2
 80024da:	4b41      	ldr	r3, [pc, #260]	; (80025e0 <MENU_RunningFunction+0x5e0>)
 80024dc:	fba3 1302 	umull	r1, r3, r3, r2
 80024e0:	1ad1      	subs	r1, r2, r3
 80024e2:	0849      	lsrs	r1, r1, #1
 80024e4:	440b      	add	r3, r1
 80024e6:	0919      	lsrs	r1, r3, #4
 80024e8:	460b      	mov	r3, r1
 80024ea:	015b      	lsls	r3, r3, #5
 80024ec:	1a5b      	subs	r3, r3, r1
 80024ee:	1ad1      	subs	r1, r2, r3
 80024f0:	b2cb      	uxtb	r3, r1
 80024f2:	3301      	adds	r3, #1
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	77bb      	strb	r3, [r7, #30]
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 80024f8:	4b30      	ldr	r3, [pc, #192]	; (80025bc <MENU_RunningFunction+0x5bc>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002500:	4618      	mov	r0, r3
 8002502:	f012 fc6b 	bl	8014ddc <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8002506:	4b2e      	ldr	r3, [pc, #184]	; (80025c0 <MENU_RunningFunction+0x5c0>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f04f 31ff 	mov.w	r1, #4294967295
 800250e:	4618      	mov	r0, r3
 8002510:	f012 fc64 	bl	8014ddc <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002514:	4b2b      	ldr	r3, [pc, #172]	; (80025c4 <MENU_RunningFunction+0x5c4>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f04f 31ff 	mov.w	r1, #4294967295
 800251c:	4618      	mov	r0, r3
 800251e:	f012 fc5d 	bl	8014ddc <osMutexAcquire>
               ssd1306_clear();
 8002522:	f00a f94d 	bl	800c7c0 <ssd1306_clear>
               sprintf(Temp, "%d : %d : 20%d :", RtcDate.Date, RtcDate.Month, RtcDate.Year);
 8002526:	7fbb      	ldrb	r3, [r7, #30]
 8002528:	461a      	mov	r2, r3
 800252a:	7f7b      	ldrb	r3, [r7, #29]
 800252c:	4619      	mov	r1, r3
 800252e:	7ffb      	ldrb	r3, [r7, #31]
 8002530:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8002534:	9300      	str	r3, [sp, #0]
 8002536:	460b      	mov	r3, r1
 8002538:	4928      	ldr	r1, [pc, #160]	; (80025dc <MENU_RunningFunction+0x5dc>)
 800253a:	f009 fc11 	bl	800bd60 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 800253e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002542:	2300      	movs	r3, #0
 8002544:	9301      	str	r3, [sp, #4]
 8002546:	2300      	movs	r3, #0
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	2301      	movs	r3, #1
 800254c:	2100      	movs	r1, #0
 800254e:	2000      	movs	r0, #0
 8002550:	f7fe feb0 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 8002554:	f00a f908 	bl	800c768 <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 8002558:	4b1a      	ldr	r3, [pc, #104]	; (80025c4 <MENU_RunningFunction+0x5c4>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4618      	mov	r0, r3
 800255e:	f012 fc88 	bl	8014e72 <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 8002562:	4b17      	ldr	r3, [pc, #92]	; (80025c0 <MENU_RunningFunction+0x5c0>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f012 fc83 	bl	8014e72 <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 800256c:	4b13      	ldr	r3, [pc, #76]	; (80025bc <MENU_RunningFunction+0x5bc>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f012 fc7e 	bl	8014e72 <osMutexRelease>
               if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002576:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800257a:	4814      	ldr	r0, [pc, #80]	; (80025cc <MENU_RunningFunction+0x5cc>)
 800257c:	f00b fc8e 	bl	800de9c <HAL_GPIO_ReadPin>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	f040 8129 	bne.w	80027da <MENU_RunningFunction+0x7da>
               {
                  Menu.ButtonCnt++;
 8002588:	4b11      	ldr	r3, [pc, #68]	; (80025d0 <MENU_RunningFunction+0x5d0>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	3301      	adds	r3, #1
 800258e:	4a10      	ldr	r2, [pc, #64]	; (80025d0 <MENU_RunningFunction+0x5d0>)
 8002590:	6053      	str	r3, [r2, #4]
                  TIM5->CNT = 0;
 8002592:	4b08      	ldr	r3, [pc, #32]	; (80025b4 <MENU_RunningFunction+0x5b4>)
 8002594:	2200      	movs	r2, #0
 8002596:	625a      	str	r2, [r3, #36]	; 0x24
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002598:	e002      	b.n	80025a0 <MENU_RunningFunction+0x5a0>
                  {
                     osDelay(100);
 800259a:	2064      	movs	r0, #100	; 0x64
 800259c:	f012 f9d0 	bl	8014940 <osDelay>
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 80025a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025a4:	4809      	ldr	r0, [pc, #36]	; (80025cc <MENU_RunningFunction+0x5cc>)
 80025a6:	f00b fc79 	bl	800de9c <HAL_GPIO_ReadPin>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0f4      	beq.n	800259a <MENU_RunningFunction+0x59a>
 80025b0:	e113      	b.n	80027da <MENU_RunningFunction+0x7da>
 80025b2:	bf00      	nop
 80025b4:	40000c00 	.word	0x40000c00
 80025b8:	88888889 	.word	0x88888889
 80025bc:	20004034 	.word	0x20004034
 80025c0:	20004038 	.word	0x20004038
 80025c4:	2000403c 	.word	0x2000403c
 80025c8:	0801ef5c 	.word	0x0801ef5c
 80025cc:	48000400 	.word	0x48000400
 80025d0:	200002a4 	.word	0x200002a4
 80025d4:	2000404c 	.word	0x2000404c
 80025d8:	20004164 	.word	0x20004164
 80025dc:	0801ef6c 	.word	0x0801ef6c
 80025e0:	08421085 	.word	0x08421085
                  }
               }
            }
            else if(Menu.ButtonCnt == 1)
 80025e4:	4bb0      	ldr	r3, [pc, #704]	; (80028a8 <MENU_RunningFunction+0x8a8>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d16c      	bne.n	80026c6 <MENU_RunningFunction+0x6c6>
            {
               RtcDate.Month = (TIM5->CNT / 4) % 12 + 1;
 80025ec:	4baf      	ldr	r3, [pc, #700]	; (80028ac <MENU_RunningFunction+0x8ac>)
 80025ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f0:	0899      	lsrs	r1, r3, #2
 80025f2:	4baf      	ldr	r3, [pc, #700]	; (80028b0 <MENU_RunningFunction+0x8b0>)
 80025f4:	fba3 2301 	umull	r2, r3, r3, r1
 80025f8:	08da      	lsrs	r2, r3, #3
 80025fa:	4613      	mov	r3, r2
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	4413      	add	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	1aca      	subs	r2, r1, r3
 8002604:	b2d3      	uxtb	r3, r2
 8002606:	3301      	adds	r3, #1
 8002608:	b2db      	uxtb	r3, r3
 800260a:	777b      	strb	r3, [r7, #29]
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 800260c:	4ba9      	ldr	r3, [pc, #676]	; (80028b4 <MENU_RunningFunction+0x8b4>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f04f 31ff 	mov.w	r1, #4294967295
 8002614:	4618      	mov	r0, r3
 8002616:	f012 fbe1 	bl	8014ddc <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 800261a:	4ba7      	ldr	r3, [pc, #668]	; (80028b8 <MENU_RunningFunction+0x8b8>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f04f 31ff 	mov.w	r1, #4294967295
 8002622:	4618      	mov	r0, r3
 8002624:	f012 fbda 	bl	8014ddc <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002628:	4ba4      	ldr	r3, [pc, #656]	; (80028bc <MENU_RunningFunction+0x8bc>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f04f 31ff 	mov.w	r1, #4294967295
 8002630:	4618      	mov	r0, r3
 8002632:	f012 fbd3 	bl	8014ddc <osMutexAcquire>
               ssd1306_clear();
 8002636:	f00a f8c3 	bl	800c7c0 <ssd1306_clear>
               sprintf(Temp, "%d : %d : 20%d :", RtcDate.Date, RtcDate.Month, RtcDate.Year);
 800263a:	7fbb      	ldrb	r3, [r7, #30]
 800263c:	461a      	mov	r2, r3
 800263e:	7f7b      	ldrb	r3, [r7, #29]
 8002640:	4619      	mov	r1, r3
 8002642:	7ffb      	ldrb	r3, [r7, #31]
 8002644:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	460b      	mov	r3, r1
 800264c:	499c      	ldr	r1, [pc, #624]	; (80028c0 <MENU_RunningFunction+0x8c0>)
 800264e:	f009 fb87 	bl	800bd60 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002652:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002656:	2300      	movs	r3, #0
 8002658:	9301      	str	r3, [sp, #4]
 800265a:	2300      	movs	r3, #0
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	2301      	movs	r3, #1
 8002660:	2100      	movs	r1, #0
 8002662:	2000      	movs	r0, #0
 8002664:	f7fe fe26 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 8002668:	f00a f87e 	bl	800c768 <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 800266c:	4b93      	ldr	r3, [pc, #588]	; (80028bc <MENU_RunningFunction+0x8bc>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4618      	mov	r0, r3
 8002672:	f012 fbfe 	bl	8014e72 <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 8002676:	4b90      	ldr	r3, [pc, #576]	; (80028b8 <MENU_RunningFunction+0x8b8>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f012 fbf9 	bl	8014e72 <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 8002680:	4b8c      	ldr	r3, [pc, #560]	; (80028b4 <MENU_RunningFunction+0x8b4>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f012 fbf4 	bl	8014e72 <osMutexRelease>
               if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 800268a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800268e:	488d      	ldr	r0, [pc, #564]	; (80028c4 <MENU_RunningFunction+0x8c4>)
 8002690:	f00b fc04 	bl	800de9c <HAL_GPIO_ReadPin>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	f040 809f 	bne.w	80027da <MENU_RunningFunction+0x7da>
               {
                  Menu.ButtonCnt++;
 800269c:	4b82      	ldr	r3, [pc, #520]	; (80028a8 <MENU_RunningFunction+0x8a8>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	3301      	adds	r3, #1
 80026a2:	4a81      	ldr	r2, [pc, #516]	; (80028a8 <MENU_RunningFunction+0x8a8>)
 80026a4:	6053      	str	r3, [r2, #4]
                  TIM5->CNT = 0;
 80026a6:	4b81      	ldr	r3, [pc, #516]	; (80028ac <MENU_RunningFunction+0x8ac>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	625a      	str	r2, [r3, #36]	; 0x24
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 80026ac:	e002      	b.n	80026b4 <MENU_RunningFunction+0x6b4>
                  {
                     osDelay(100);
 80026ae:	2064      	movs	r0, #100	; 0x64
 80026b0:	f012 f946 	bl	8014940 <osDelay>
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 80026b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80026b8:	4882      	ldr	r0, [pc, #520]	; (80028c4 <MENU_RunningFunction+0x8c4>)
 80026ba:	f00b fbef 	bl	800de9c <HAL_GPIO_ReadPin>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0f4      	beq.n	80026ae <MENU_RunningFunction+0x6ae>
 80026c4:	e089      	b.n	80027da <MENU_RunningFunction+0x7da>
                  }
               }
            }
            else
            {
               RtcDate.Year = (TIM5->CNT / 4) % 99;
 80026c6:	4b79      	ldr	r3, [pc, #484]	; (80028ac <MENU_RunningFunction+0x8ac>)
 80026c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ca:	0899      	lsrs	r1, r3, #2
 80026cc:	4b7e      	ldr	r3, [pc, #504]	; (80028c8 <MENU_RunningFunction+0x8c8>)
 80026ce:	fba3 2301 	umull	r2, r3, r3, r1
 80026d2:	099a      	lsrs	r2, r3, #6
 80026d4:	4613      	mov	r3, r2
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	4413      	add	r3, r2
 80026da:	015a      	lsls	r2, r3, #5
 80026dc:	4413      	add	r3, r2
 80026de:	1aca      	subs	r2, r1, r3
 80026e0:	b2d3      	uxtb	r3, r2
 80026e2:	77fb      	strb	r3, [r7, #31]
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 80026e4:	4b73      	ldr	r3, [pc, #460]	; (80028b4 <MENU_RunningFunction+0x8b4>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f04f 31ff 	mov.w	r1, #4294967295
 80026ec:	4618      	mov	r0, r3
 80026ee:	f012 fb75 	bl	8014ddc <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 80026f2:	4b71      	ldr	r3, [pc, #452]	; (80028b8 <MENU_RunningFunction+0x8b8>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f04f 31ff 	mov.w	r1, #4294967295
 80026fa:	4618      	mov	r0, r3
 80026fc:	f012 fb6e 	bl	8014ddc <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002700:	4b6e      	ldr	r3, [pc, #440]	; (80028bc <MENU_RunningFunction+0x8bc>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f04f 31ff 	mov.w	r1, #4294967295
 8002708:	4618      	mov	r0, r3
 800270a:	f012 fb67 	bl	8014ddc <osMutexAcquire>
               ssd1306_clear();
 800270e:	f00a f857 	bl	800c7c0 <ssd1306_clear>
               sprintf(Temp, "%d : %d : 20%d :", RtcDate.Date, RtcDate.Month, RtcDate.Year);
 8002712:	7fbb      	ldrb	r3, [r7, #30]
 8002714:	461a      	mov	r2, r3
 8002716:	7f7b      	ldrb	r3, [r7, #29]
 8002718:	4619      	mov	r1, r3
 800271a:	7ffb      	ldrb	r3, [r7, #31]
 800271c:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	460b      	mov	r3, r1
 8002724:	4966      	ldr	r1, [pc, #408]	; (80028c0 <MENU_RunningFunction+0x8c0>)
 8002726:	f009 fb1b 	bl	800bd60 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 800272a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800272e:	2300      	movs	r3, #0
 8002730:	9301      	str	r3, [sp, #4]
 8002732:	2300      	movs	r3, #0
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	2301      	movs	r3, #1
 8002738:	2100      	movs	r1, #0
 800273a:	2000      	movs	r0, #0
 800273c:	f7fe fdba 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 8002740:	f00a f812 	bl	800c768 <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 8002744:	4b5d      	ldr	r3, [pc, #372]	; (80028bc <MENU_RunningFunction+0x8bc>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f012 fb92 	bl	8014e72 <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 800274e:	4b5a      	ldr	r3, [pc, #360]	; (80028b8 <MENU_RunningFunction+0x8b8>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f012 fb8d 	bl	8014e72 <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 8002758:	4b56      	ldr	r3, [pc, #344]	; (80028b4 <MENU_RunningFunction+0x8b4>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4618      	mov	r0, r3
 800275e:	f012 fb88 	bl	8014e72 <osMutexRelease>
               if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002762:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002766:	4857      	ldr	r0, [pc, #348]	; (80028c4 <MENU_RunningFunction+0x8c4>)
 8002768:	f00b fb98 	bl	800de9c <HAL_GPIO_ReadPin>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d133      	bne.n	80027da <MENU_RunningFunction+0x7da>
               {
                  Menu.ButtonCnt++;
 8002772:	4b4d      	ldr	r3, [pc, #308]	; (80028a8 <MENU_RunningFunction+0x8a8>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	3301      	adds	r3, #1
 8002778:	4a4b      	ldr	r2, [pc, #300]	; (80028a8 <MENU_RunningFunction+0x8a8>)
 800277a:	6053      	str	r3, [r2, #4]
                  TIM5->CNT = 0;
 800277c:	4b4b      	ldr	r3, [pc, #300]	; (80028ac <MENU_RunningFunction+0x8ac>)
 800277e:	2200      	movs	r2, #0
 8002780:	625a      	str	r2, [r3, #36]	; 0x24
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002782:	e002      	b.n	800278a <MENU_RunningFunction+0x78a>
                  {
                     osDelay(100);
 8002784:	2064      	movs	r0, #100	; 0x64
 8002786:	f012 f8db 	bl	8014940 <osDelay>
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 800278a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800278e:	484d      	ldr	r0, [pc, #308]	; (80028c4 <MENU_RunningFunction+0x8c4>)
 8002790:	f00b fb84 	bl	800de9c <HAL_GPIO_ReadPin>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d0f4      	beq.n	8002784 <MENU_RunningFunction+0x784>
                  }
                  Menu.ButtonCnt = 0;
 800279a:	4b43      	ldr	r3, [pc, #268]	; (80028a8 <MENU_RunningFunction+0x8a8>)
 800279c:	2200      	movs	r2, #0
 800279e:	605a      	str	r2, [r3, #4]
                  Menu.f         = 1;
 80027a0:	4b41      	ldr	r3, [pc, #260]	; (80028a8 <MENU_RunningFunction+0x8a8>)
 80027a2:	2201      	movs	r2, #1
 80027a4:	729a      	strb	r2, [r3, #10]
                  osMutexAcquire(RTCMutexHandle, osWaitForever);
 80027a6:	4b49      	ldr	r3, [pc, #292]	; (80028cc <MENU_RunningFunction+0x8cc>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f04f 31ff 	mov.w	r1, #4294967295
 80027ae:	4618      	mov	r0, r3
 80027b0:	f012 fb14 	bl	8014ddc <osMutexAcquire>
                  while(HAL_RTC_SetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN) != HAL_OK)
 80027b4:	e002      	b.n	80027bc <MENU_RunningFunction+0x7bc>
                  {
                     osDelay(100);
 80027b6:	2064      	movs	r0, #100	; 0x64
 80027b8:	f012 f8c2 	bl	8014940 <osDelay>
                  while(HAL_RTC_SetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN) != HAL_OK)
 80027bc:	f107 031c 	add.w	r3, r7, #28
 80027c0:	2200      	movs	r2, #0
 80027c2:	4619      	mov	r1, r3
 80027c4:	4842      	ldr	r0, [pc, #264]	; (80028d0 <MENU_RunningFunction+0x8d0>)
 80027c6:	f00d fb39 	bl	800fe3c <HAL_RTC_SetDate>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1f2      	bne.n	80027b6 <MENU_RunningFunction+0x7b6>
                  }
                  osMutexRelease(RTCMutexHandle);
 80027d0:	4b3e      	ldr	r3, [pc, #248]	; (80028cc <MENU_RunningFunction+0x8cc>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f012 fb4c 	bl	8014e72 <osMutexRelease>
               }
            }
            osDelay(50);
 80027da:	2032      	movs	r0, #50	; 0x32
 80027dc:	f012 f8b0 	bl	8014940 <osDelay>
         while(Menu.f == 0)
 80027e0:	4b31      	ldr	r3, [pc, #196]	; (80028a8 <MENU_RunningFunction+0x8a8>)
 80027e2:	7a9b      	ldrb	r3, [r3, #10]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f43f ae70 	beq.w	80024ca <MENU_RunningFunction+0x4ca>
         }
         break;
 80027ea:	f001 b812 	b.w	8003812 <MENU_RunningFunction+0x1812>
      }
      case MENU_CHOISE_CHART:
      {
         RTC_TimeTypeDef RtcTime;
         RTC_DateTypeDef RtcDate;
         osMutexAcquire(RTCMutexHandle, osWaitForever);
 80027ee:	4b37      	ldr	r3, [pc, #220]	; (80028cc <MENU_RunningFunction+0x8cc>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f04f 31ff 	mov.w	r1, #4294967295
 80027f6:	4618      	mov	r0, r3
 80027f8:	f012 faf0 	bl	8014ddc <osMutexAcquire>
         HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 80027fc:	f107 0308 	add.w	r3, r7, #8
 8002800:	2200      	movs	r2, #0
 8002802:	4619      	mov	r1, r3
 8002804:	4832      	ldr	r0, [pc, #200]	; (80028d0 <MENU_RunningFunction+0x8d0>)
 8002806:	f00d fab7 	bl	800fd78 <HAL_RTC_GetTime>
         HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 800280a:	1d3b      	adds	r3, r7, #4
 800280c:	2200      	movs	r2, #0
 800280e:	4619      	mov	r1, r3
 8002810:	482f      	ldr	r0, [pc, #188]	; (80028d0 <MENU_RunningFunction+0x8d0>)
 8002812:	f00d fb9b 	bl	800ff4c <HAL_RTC_GetDate>
         osMutexRelease(RTCMutexHandle);
 8002816:	4b2d      	ldr	r3, [pc, #180]	; (80028cc <MENU_RunningFunction+0x8cc>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f012 fb29 	bl	8014e72 <osMutexRelease>
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8002820:	4b24      	ldr	r3, [pc, #144]	; (80028b4 <MENU_RunningFunction+0x8b4>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f04f 31ff 	mov.w	r1, #4294967295
 8002828:	4618      	mov	r0, r3
 800282a:	f012 fad7 	bl	8014ddc <osMutexAcquire>
         osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 800282e:	4b22      	ldr	r3, [pc, #136]	; (80028b8 <MENU_RunningFunction+0x8b8>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f04f 31ff 	mov.w	r1, #4294967295
 8002836:	4618      	mov	r0, r3
 8002838:	f012 fad0 	bl	8014ddc <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 800283c:	4b1f      	ldr	r3, [pc, #124]	; (80028bc <MENU_RunningFunction+0x8bc>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f04f 31ff 	mov.w	r1, #4294967295
 8002844:	4618      	mov	r0, r3
 8002846:	f012 fac9 	bl	8014ddc <osMutexAcquire>
         ssd1306_clear();
 800284a:	f009 ffb9 	bl	800c7c0 <ssd1306_clear>
         sprintf(Temp, "%d : %d : 20%d :", RtcDate.Date, RtcDate.Month, RtcDate.Year);
 800284e:	79bb      	ldrb	r3, [r7, #6]
 8002850:	461a      	mov	r2, r3
 8002852:	797b      	ldrb	r3, [r7, #5]
 8002854:	4619      	mov	r1, r3
 8002856:	79fb      	ldrb	r3, [r7, #7]
 8002858:	f107 0054 	add.w	r0, r7, #84	; 0x54
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	460b      	mov	r3, r1
 8002860:	4917      	ldr	r1, [pc, #92]	; (80028c0 <MENU_RunningFunction+0x8c0>)
 8002862:	f009 fa7d 	bl	800bd60 <sprintf_>
         GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002866:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800286a:	2300      	movs	r3, #0
 800286c:	9301      	str	r3, [sp, #4]
 800286e:	2300      	movs	r3, #0
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	2301      	movs	r3, #1
 8002874:	2100      	movs	r1, #0
 8002876:	2000      	movs	r0, #0
 8002878:	f7fe fd1c 	bl	80012b4 <GFX_DrawString>
         ssd1306_display();
 800287c:	f009 ff74 	bl	800c768 <ssd1306_display>
         osMutexRelease(SPI1MutexHandle);
 8002880:	4b0e      	ldr	r3, [pc, #56]	; (80028bc <MENU_RunningFunction+0x8bc>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4618      	mov	r0, r3
 8002886:	f012 faf4 	bl	8014e72 <osMutexRelease>
         osMutexRelease(SSD1306MutexHandle);
 800288a:	4b0b      	ldr	r3, [pc, #44]	; (80028b8 <MENU_RunningFunction+0x8b8>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f012 faef 	bl	8014e72 <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 8002894:	4b07      	ldr	r3, [pc, #28]	; (80028b4 <MENU_RunningFunction+0x8b4>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4618      	mov	r0, r3
 800289a:	f012 faea 	bl	8014e72 <osMutexRelease>
         Menu.f = 0;
 800289e:	4b02      	ldr	r3, [pc, #8]	; (80028a8 <MENU_RunningFunction+0x8a8>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	729a      	strb	r2, [r3, #10]
         while(Menu.f == 0)
 80028a4:	e18c      	b.n	8002bc0 <MENU_RunningFunction+0xbc0>
 80028a6:	bf00      	nop
 80028a8:	200002a4 	.word	0x200002a4
 80028ac:	40000c00 	.word	0x40000c00
 80028b0:	aaaaaaab 	.word	0xaaaaaaab
 80028b4:	20004034 	.word	0x20004034
 80028b8:	20004038 	.word	0x20004038
 80028bc:	2000403c 	.word	0x2000403c
 80028c0:	0801ef6c 	.word	0x0801ef6c
 80028c4:	48000400 	.word	0x48000400
 80028c8:	a57eb503 	.word	0xa57eb503
 80028cc:	2000404c 	.word	0x2000404c
 80028d0:	20004164 	.word	0x20004164
         {
            if(Menu.ButtonCnt == 0)
 80028d4:	4ba1      	ldr	r3, [pc, #644]	; (8002b5c <MENU_RunningFunction+0xb5c>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d16e      	bne.n	80029ba <MENU_RunningFunction+0x9ba>
            {
               RtcDate.Date = (TIM5->CNT / 4) % 31 + 1;
 80028dc:	4ba0      	ldr	r3, [pc, #640]	; (8002b60 <MENU_RunningFunction+0xb60>)
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	089a      	lsrs	r2, r3, #2
 80028e2:	4ba0      	ldr	r3, [pc, #640]	; (8002b64 <MENU_RunningFunction+0xb64>)
 80028e4:	fba3 1302 	umull	r1, r3, r3, r2
 80028e8:	1ad1      	subs	r1, r2, r3
 80028ea:	0849      	lsrs	r1, r1, #1
 80028ec:	440b      	add	r3, r1
 80028ee:	0919      	lsrs	r1, r3, #4
 80028f0:	460b      	mov	r3, r1
 80028f2:	015b      	lsls	r3, r3, #5
 80028f4:	1a5b      	subs	r3, r3, r1
 80028f6:	1ad1      	subs	r1, r2, r3
 80028f8:	b2cb      	uxtb	r3, r1
 80028fa:	3301      	adds	r3, #1
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	71bb      	strb	r3, [r7, #6]
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8002900:	4b99      	ldr	r3, [pc, #612]	; (8002b68 <MENU_RunningFunction+0xb68>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f04f 31ff 	mov.w	r1, #4294967295
 8002908:	4618      	mov	r0, r3
 800290a:	f012 fa67 	bl	8014ddc <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 800290e:	4b97      	ldr	r3, [pc, #604]	; (8002b6c <MENU_RunningFunction+0xb6c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f04f 31ff 	mov.w	r1, #4294967295
 8002916:	4618      	mov	r0, r3
 8002918:	f012 fa60 	bl	8014ddc <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 800291c:	4b94      	ldr	r3, [pc, #592]	; (8002b70 <MENU_RunningFunction+0xb70>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f04f 31ff 	mov.w	r1, #4294967295
 8002924:	4618      	mov	r0, r3
 8002926:	f012 fa59 	bl	8014ddc <osMutexAcquire>
               ssd1306_clear();
 800292a:	f009 ff49 	bl	800c7c0 <ssd1306_clear>
               sprintf(Temp, "%d : %d : 20%d :", RtcDate.Date, RtcDate.Month, RtcDate.Year);
 800292e:	79bb      	ldrb	r3, [r7, #6]
 8002930:	461a      	mov	r2, r3
 8002932:	797b      	ldrb	r3, [r7, #5]
 8002934:	4619      	mov	r1, r3
 8002936:	79fb      	ldrb	r3, [r7, #7]
 8002938:	f107 0054 	add.w	r0, r7, #84	; 0x54
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	460b      	mov	r3, r1
 8002940:	498c      	ldr	r1, [pc, #560]	; (8002b74 <MENU_RunningFunction+0xb74>)
 8002942:	f009 fa0d 	bl	800bd60 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002946:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800294a:	2300      	movs	r3, #0
 800294c:	9301      	str	r3, [sp, #4]
 800294e:	2300      	movs	r3, #0
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	2301      	movs	r3, #1
 8002954:	2100      	movs	r1, #0
 8002956:	2000      	movs	r0, #0
 8002958:	f7fe fcac 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 800295c:	f009 ff04 	bl	800c768 <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 8002960:	4b83      	ldr	r3, [pc, #524]	; (8002b70 <MENU_RunningFunction+0xb70>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4618      	mov	r0, r3
 8002966:	f012 fa84 	bl	8014e72 <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 800296a:	4b80      	ldr	r3, [pc, #512]	; (8002b6c <MENU_RunningFunction+0xb6c>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f012 fa7f 	bl	8014e72 <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 8002974:	4b7c      	ldr	r3, [pc, #496]	; (8002b68 <MENU_RunningFunction+0xb68>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f012 fa7a 	bl	8014e72 <osMutexRelease>
               if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 800297e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002982:	487d      	ldr	r0, [pc, #500]	; (8002b78 <MENU_RunningFunction+0xb78>)
 8002984:	f00b fa8a 	bl	800de9c <HAL_GPIO_ReadPin>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	f040 8115 	bne.w	8002bba <MENU_RunningFunction+0xbba>
               {
                  Menu.ButtonCnt++;
 8002990:	4b72      	ldr	r3, [pc, #456]	; (8002b5c <MENU_RunningFunction+0xb5c>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	3301      	adds	r3, #1
 8002996:	4a71      	ldr	r2, [pc, #452]	; (8002b5c <MENU_RunningFunction+0xb5c>)
 8002998:	6053      	str	r3, [r2, #4]
                  TIM5->CNT = 0;
 800299a:	4b71      	ldr	r3, [pc, #452]	; (8002b60 <MENU_RunningFunction+0xb60>)
 800299c:	2200      	movs	r2, #0
 800299e:	625a      	str	r2, [r3, #36]	; 0x24
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 80029a0:	e002      	b.n	80029a8 <MENU_RunningFunction+0x9a8>
                  {
                     osDelay(100);
 80029a2:	2064      	movs	r0, #100	; 0x64
 80029a4:	f011 ffcc 	bl	8014940 <osDelay>
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 80029a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80029ac:	4872      	ldr	r0, [pc, #456]	; (8002b78 <MENU_RunningFunction+0xb78>)
 80029ae:	f00b fa75 	bl	800de9c <HAL_GPIO_ReadPin>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d0f4      	beq.n	80029a2 <MENU_RunningFunction+0x9a2>
 80029b8:	e0ff      	b.n	8002bba <MENU_RunningFunction+0xbba>
                  }
               }
            }
            else if(Menu.ButtonCnt == 1)
 80029ba:	4b68      	ldr	r3, [pc, #416]	; (8002b5c <MENU_RunningFunction+0xb5c>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d16c      	bne.n	8002a9c <MENU_RunningFunction+0xa9c>
            {
               RtcDate.Month = (TIM5->CNT / 4) % 12 + 1;
 80029c2:	4b67      	ldr	r3, [pc, #412]	; (8002b60 <MENU_RunningFunction+0xb60>)
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c6:	0899      	lsrs	r1, r3, #2
 80029c8:	4b6c      	ldr	r3, [pc, #432]	; (8002b7c <MENU_RunningFunction+0xb7c>)
 80029ca:	fba3 2301 	umull	r2, r3, r3, r1
 80029ce:	08da      	lsrs	r2, r3, #3
 80029d0:	4613      	mov	r3, r2
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	4413      	add	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	1aca      	subs	r2, r1, r3
 80029da:	b2d3      	uxtb	r3, r2
 80029dc:	3301      	adds	r3, #1
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	717b      	strb	r3, [r7, #5]
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 80029e2:	4b61      	ldr	r3, [pc, #388]	; (8002b68 <MENU_RunningFunction+0xb68>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f04f 31ff 	mov.w	r1, #4294967295
 80029ea:	4618      	mov	r0, r3
 80029ec:	f012 f9f6 	bl	8014ddc <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 80029f0:	4b5e      	ldr	r3, [pc, #376]	; (8002b6c <MENU_RunningFunction+0xb6c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f04f 31ff 	mov.w	r1, #4294967295
 80029f8:	4618      	mov	r0, r3
 80029fa:	f012 f9ef 	bl	8014ddc <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80029fe:	4b5c      	ldr	r3, [pc, #368]	; (8002b70 <MENU_RunningFunction+0xb70>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f04f 31ff 	mov.w	r1, #4294967295
 8002a06:	4618      	mov	r0, r3
 8002a08:	f012 f9e8 	bl	8014ddc <osMutexAcquire>
               ssd1306_clear();
 8002a0c:	f009 fed8 	bl	800c7c0 <ssd1306_clear>
               sprintf(Temp, "%d : %d : 20%d :", RtcDate.Date, RtcDate.Month, RtcDate.Year);
 8002a10:	79bb      	ldrb	r3, [r7, #6]
 8002a12:	461a      	mov	r2, r3
 8002a14:	797b      	ldrb	r3, [r7, #5]
 8002a16:	4619      	mov	r1, r3
 8002a18:	79fb      	ldrb	r3, [r7, #7]
 8002a1a:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	460b      	mov	r3, r1
 8002a22:	4954      	ldr	r1, [pc, #336]	; (8002b74 <MENU_RunningFunction+0xb74>)
 8002a24:	f009 f99c 	bl	800bd60 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002a28:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	9301      	str	r3, [sp, #4]
 8002a30:	2300      	movs	r3, #0
 8002a32:	9300      	str	r3, [sp, #0]
 8002a34:	2301      	movs	r3, #1
 8002a36:	2100      	movs	r1, #0
 8002a38:	2000      	movs	r0, #0
 8002a3a:	f7fe fc3b 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 8002a3e:	f009 fe93 	bl	800c768 <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 8002a42:	4b4b      	ldr	r3, [pc, #300]	; (8002b70 <MENU_RunningFunction+0xb70>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f012 fa13 	bl	8014e72 <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 8002a4c:	4b47      	ldr	r3, [pc, #284]	; (8002b6c <MENU_RunningFunction+0xb6c>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f012 fa0e 	bl	8014e72 <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 8002a56:	4b44      	ldr	r3, [pc, #272]	; (8002b68 <MENU_RunningFunction+0xb68>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f012 fa09 	bl	8014e72 <osMutexRelease>
               if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002a60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a64:	4844      	ldr	r0, [pc, #272]	; (8002b78 <MENU_RunningFunction+0xb78>)
 8002a66:	f00b fa19 	bl	800de9c <HAL_GPIO_ReadPin>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f040 80a4 	bne.w	8002bba <MENU_RunningFunction+0xbba>
               {
                  Menu.ButtonCnt++;
 8002a72:	4b3a      	ldr	r3, [pc, #232]	; (8002b5c <MENU_RunningFunction+0xb5c>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	3301      	adds	r3, #1
 8002a78:	4a38      	ldr	r2, [pc, #224]	; (8002b5c <MENU_RunningFunction+0xb5c>)
 8002a7a:	6053      	str	r3, [r2, #4]
                  TIM5->CNT = 0;
 8002a7c:	4b38      	ldr	r3, [pc, #224]	; (8002b60 <MENU_RunningFunction+0xb60>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	625a      	str	r2, [r3, #36]	; 0x24
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002a82:	e002      	b.n	8002a8a <MENU_RunningFunction+0xa8a>
                  {
                     osDelay(100);
 8002a84:	2064      	movs	r0, #100	; 0x64
 8002a86:	f011 ff5b 	bl	8014940 <osDelay>
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002a8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a8e:	483a      	ldr	r0, [pc, #232]	; (8002b78 <MENU_RunningFunction+0xb78>)
 8002a90:	f00b fa04 	bl	800de9c <HAL_GPIO_ReadPin>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0f4      	beq.n	8002a84 <MENU_RunningFunction+0xa84>
 8002a9a:	e08e      	b.n	8002bba <MENU_RunningFunction+0xbba>
                  }
               }
            }
            else
            {
               RtcDate.Year = (TIM5->CNT / 4) % 99;
 8002a9c:	4b30      	ldr	r3, [pc, #192]	; (8002b60 <MENU_RunningFunction+0xb60>)
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa0:	0899      	lsrs	r1, r3, #2
 8002aa2:	4b37      	ldr	r3, [pc, #220]	; (8002b80 <MENU_RunningFunction+0xb80>)
 8002aa4:	fba3 2301 	umull	r2, r3, r3, r1
 8002aa8:	099a      	lsrs	r2, r3, #6
 8002aaa:	4613      	mov	r3, r2
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	4413      	add	r3, r2
 8002ab0:	015a      	lsls	r2, r3, #5
 8002ab2:	4413      	add	r3, r2
 8002ab4:	1aca      	subs	r2, r1, r3
 8002ab6:	b2d3      	uxtb	r3, r2
 8002ab8:	71fb      	strb	r3, [r7, #7]
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8002aba:	4b2b      	ldr	r3, [pc, #172]	; (8002b68 <MENU_RunningFunction+0xb68>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f04f 31ff 	mov.w	r1, #4294967295
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f012 f98a 	bl	8014ddc <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8002ac8:	4b28      	ldr	r3, [pc, #160]	; (8002b6c <MENU_RunningFunction+0xb6c>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f012 f983 	bl	8014ddc <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002ad6:	4b26      	ldr	r3, [pc, #152]	; (8002b70 <MENU_RunningFunction+0xb70>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f04f 31ff 	mov.w	r1, #4294967295
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f012 f97c 	bl	8014ddc <osMutexAcquire>
               ssd1306_clear();
 8002ae4:	f009 fe6c 	bl	800c7c0 <ssd1306_clear>
               sprintf(Temp, "%d : %d : 20%d :", RtcDate.Date, RtcDate.Month, RtcDate.Year);
 8002ae8:	79bb      	ldrb	r3, [r7, #6]
 8002aea:	461a      	mov	r2, r3
 8002aec:	797b      	ldrb	r3, [r7, #5]
 8002aee:	4619      	mov	r1, r3
 8002af0:	79fb      	ldrb	r3, [r7, #7]
 8002af2:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	460b      	mov	r3, r1
 8002afa:	491e      	ldr	r1, [pc, #120]	; (8002b74 <MENU_RunningFunction+0xb74>)
 8002afc:	f009 f930 	bl	800bd60 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002b00:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002b04:	2300      	movs	r3, #0
 8002b06:	9301      	str	r3, [sp, #4]
 8002b08:	2300      	movs	r3, #0
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	2100      	movs	r1, #0
 8002b10:	2000      	movs	r0, #0
 8002b12:	f7fe fbcf 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 8002b16:	f009 fe27 	bl	800c768 <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 8002b1a:	4b15      	ldr	r3, [pc, #84]	; (8002b70 <MENU_RunningFunction+0xb70>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f012 f9a7 	bl	8014e72 <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 8002b24:	4b11      	ldr	r3, [pc, #68]	; (8002b6c <MENU_RunningFunction+0xb6c>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f012 f9a2 	bl	8014e72 <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 8002b2e:	4b0e      	ldr	r3, [pc, #56]	; (8002b68 <MENU_RunningFunction+0xb68>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f012 f99d 	bl	8014e72 <osMutexRelease>
               if(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002b38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b3c:	480e      	ldr	r0, [pc, #56]	; (8002b78 <MENU_RunningFunction+0xb78>)
 8002b3e:	f00b f9ad 	bl	800de9c <HAL_GPIO_ReadPin>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d138      	bne.n	8002bba <MENU_RunningFunction+0xbba>
               {
                  Menu.ButtonCnt++;
 8002b48:	4b04      	ldr	r3, [pc, #16]	; (8002b5c <MENU_RunningFunction+0xb5c>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	4a03      	ldr	r2, [pc, #12]	; (8002b5c <MENU_RunningFunction+0xb5c>)
 8002b50:	6053      	str	r3, [r2, #4]
                  TIM5->CNT = 0;
 8002b52:	4b03      	ldr	r3, [pc, #12]	; (8002b60 <MENU_RunningFunction+0xb60>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	625a      	str	r2, [r3, #36]	; 0x24
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002b58:	e017      	b.n	8002b8a <MENU_RunningFunction+0xb8a>
 8002b5a:	bf00      	nop
 8002b5c:	200002a4 	.word	0x200002a4
 8002b60:	40000c00 	.word	0x40000c00
 8002b64:	08421085 	.word	0x08421085
 8002b68:	20004034 	.word	0x20004034
 8002b6c:	20004038 	.word	0x20004038
 8002b70:	2000403c 	.word	0x2000403c
 8002b74:	0801ef6c 	.word	0x0801ef6c
 8002b78:	48000400 	.word	0x48000400
 8002b7c:	aaaaaaab 	.word	0xaaaaaaab
 8002b80:	a57eb503 	.word	0xa57eb503
                  {
                     osDelay(100);
 8002b84:	2064      	movs	r0, #100	; 0x64
 8002b86:	f011 fedb 	bl	8014940 <osDelay>
                  while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002b8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b8e:	48c5      	ldr	r0, [pc, #788]	; (8002ea4 <MENU_RunningFunction+0xea4>)
 8002b90:	f00b f984 	bl	800de9c <HAL_GPIO_ReadPin>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d0f4      	beq.n	8002b84 <MENU_RunningFunction+0xb84>
                  }
                  Menu.ButtonCnt       = 0;
 8002b9a:	4bc3      	ldr	r3, [pc, #780]	; (8002ea8 <MENU_RunningFunction+0xea8>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	605a      	str	r2, [r3, #4]
                  Menu.f               = 1;
 8002ba0:	4bc1      	ldr	r3, [pc, #772]	; (8002ea8 <MENU_RunningFunction+0xea8>)
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	729a      	strb	r2, [r3, #10]
                  QueueChartData.Date  = RtcDate.Date;
 8002ba6:	79bb      	ldrb	r3, [r7, #6]
 8002ba8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                  QueueChartData.Month = RtcDate.Month;
 8002bac:	797b      	ldrb	r3, [r7, #5]
 8002bae:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
                  QueueChartData.Year  = RtcDate.Year;
 8002bb2:	79fb      	ldrb	r3, [r7, #7]
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
               }
            }
            osDelay(50);
 8002bba:	2032      	movs	r0, #50	; 0x32
 8002bbc:	f011 fec0 	bl	8014940 <osDelay>
         while(Menu.f == 0)
 8002bc0:	4bb9      	ldr	r3, [pc, #740]	; (8002ea8 <MENU_RunningFunction+0xea8>)
 8002bc2:	7a9b      	ldrb	r3, [r3, #10]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f43f ae85 	beq.w	80028d4 <MENU_RunningFunction+0x8d4>
         }

         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8002bca:	4bb8      	ldr	r3, [pc, #736]	; (8002eac <MENU_RunningFunction+0xeac>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f04f 31ff 	mov.w	r1, #4294967295
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f012 f902 	bl	8014ddc <osMutexAcquire>
         osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8002bd8:	4bb5      	ldr	r3, [pc, #724]	; (8002eb0 <MENU_RunningFunction+0xeb0>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8002be0:	4618      	mov	r0, r3
 8002be2:	f012 f8fb 	bl	8014ddc <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002be6:	4bb3      	ldr	r3, [pc, #716]	; (8002eb4 <MENU_RunningFunction+0xeb4>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f04f 31ff 	mov.w	r1, #4294967295
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f012 f8f4 	bl	8014ddc <osMutexAcquire>
         ssd1306_clear();
 8002bf4:	f009 fde4 	bl	800c7c0 <ssd1306_clear>
         sprintf(Temp, "Dokonaj Wyboru");
 8002bf8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002bfc:	49ae      	ldr	r1, [pc, #696]	; (8002eb8 <MENU_RunningFunction+0xeb8>)
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f009 f8ae 	bl	800bd60 <sprintf_>
         GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002c04:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002c08:	2300      	movs	r3, #0
 8002c0a:	9301      	str	r3, [sp, #4]
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	2301      	movs	r3, #1
 8002c12:	2100      	movs	r1, #0
 8002c14:	2000      	movs	r0, #0
 8002c16:	f7fe fb4d 	bl	80012b4 <GFX_DrawString>
         ssd1306_display();
 8002c1a:	f009 fda5 	bl	800c768 <ssd1306_display>
         osMutexRelease(SPI1MutexHandle);
 8002c1e:	4ba5      	ldr	r3, [pc, #660]	; (8002eb4 <MENU_RunningFunction+0xeb4>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f012 f925 	bl	8014e72 <osMutexRelease>
         osMutexRelease(SSD1306MutexHandle);
 8002c28:	4ba1      	ldr	r3, [pc, #644]	; (8002eb0 <MENU_RunningFunction+0xeb0>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f012 f920 	bl	8014e72 <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 8002c32:	4b9e      	ldr	r3, [pc, #632]	; (8002eac <MENU_RunningFunction+0xeac>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f012 f91b 	bl	8014e72 <osMutexRelease>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 8002c3c:	e002      	b.n	8002c44 <MENU_RunningFunction+0xc44>
         {
            osDelay(100);
 8002c3e:	2064      	movs	r0, #100	; 0x64
 8002c40:	f011 fe7e 	bl	8014940 <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 8002c44:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c48:	4896      	ldr	r0, [pc, #600]	; (8002ea4 <MENU_RunningFunction+0xea4>)
 8002c4a:	f00b f927 	bl	800de9c <HAL_GPIO_ReadPin>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d0f4      	beq.n	8002c3e <MENU_RunningFunction+0xc3e>
         }
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002c54:	e002      	b.n	8002c5c <MENU_RunningFunction+0xc5c>
         {
            osDelay(100);
 8002c56:	2064      	movs	r0, #100	; 0x64
 8002c58:	f011 fe72 	bl	8014940 <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8002c5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c60:	4890      	ldr	r0, [pc, #576]	; (8002ea4 <MENU_RunningFunction+0xea4>)
 8002c62:	f00b f91b 	bl	800de9c <HAL_GPIO_ReadPin>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d0f4      	beq.n	8002c56 <MENU_RunningFunction+0xc56>
         }
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 8002c6c:	e262      	b.n	8003134 <MENU_RunningFunction+0x1134>
         {
            osDelay(100);
 8002c6e:	2064      	movs	r0, #100	; 0x64
 8002c70:	f011 fe66 	bl	8014940 <osDelay>
            switch((TIM5->CNT / 4) % 9)
 8002c74:	4b91      	ldr	r3, [pc, #580]	; (8002ebc <MENU_RunningFunction+0xebc>)
 8002c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c78:	0899      	lsrs	r1, r3, #2
 8002c7a:	4b91      	ldr	r3, [pc, #580]	; (8002ec0 <MENU_RunningFunction+0xec0>)
 8002c7c:	fba3 2301 	umull	r2, r3, r3, r1
 8002c80:	085a      	lsrs	r2, r3, #1
 8002c82:	4613      	mov	r3, r2
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	4413      	add	r3, r2
 8002c88:	1aca      	subs	r2, r1, r3
 8002c8a:	2a08      	cmp	r2, #8
 8002c8c:	f200 8252 	bhi.w	8003134 <MENU_RunningFunction+0x1134>
 8002c90:	a301      	add	r3, pc, #4	; (adr r3, 8002c98 <MENU_RunningFunction+0xc98>)
 8002c92:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8002c96:	bf00      	nop
 8002c98:	08002cbd 	.word	0x08002cbd
 8002c9c:	08002d37 	.word	0x08002d37
 8002ca0:	08002db1 	.word	0x08002db1
 8002ca4:	08002e2b 	.word	0x08002e2b
 8002ca8:	08002ed5 	.word	0x08002ed5
 8002cac:	08002f4f 	.word	0x08002f4f
 8002cb0:	08002fc9 	.word	0x08002fc9
 8002cb4:	08003043 	.word	0x08003043
 8002cb8:	080030bd 	.word	0x080030bd
            {
               case INTERNAL_PM1:
               {
                  osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8002cbc:	4b7b      	ldr	r3, [pc, #492]	; (8002eac <MENU_RunningFunction+0xeac>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f012 f889 	bl	8014ddc <osMutexAcquire>
                  osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8002cca:	4b79      	ldr	r3, [pc, #484]	; (8002eb0 <MENU_RunningFunction+0xeb0>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f04f 31ff 	mov.w	r1, #4294967295
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f012 f882 	bl	8014ddc <osMutexAcquire>
                  osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002cd8:	4b76      	ldr	r3, [pc, #472]	; (8002eb4 <MENU_RunningFunction+0xeb4>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f012 f87b 	bl	8014ddc <osMutexAcquire>
                  ssd1306_clear();
 8002ce6:	f009 fd6b 	bl	800c7c0 <ssd1306_clear>
                  sprintf(Temp, "INTERNAL_PM1");
 8002cea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002cee:	4975      	ldr	r1, [pc, #468]	; (8002ec4 <MENU_RunningFunction+0xec4>)
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f009 f835 	bl	800bd60 <sprintf_>
                  GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002cf6:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	9301      	str	r3, [sp, #4]
 8002cfe:	2300      	movs	r3, #0
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	2301      	movs	r3, #1
 8002d04:	2100      	movs	r1, #0
 8002d06:	2000      	movs	r0, #0
 8002d08:	f7fe fad4 	bl	80012b4 <GFX_DrawString>
                  ssd1306_display();
 8002d0c:	f009 fd2c 	bl	800c768 <ssd1306_display>
                  osMutexRelease(SPI1MutexHandle);
 8002d10:	4b68      	ldr	r3, [pc, #416]	; (8002eb4 <MENU_RunningFunction+0xeb4>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f012 f8ac 	bl	8014e72 <osMutexRelease>
                  osMutexRelease(SSD1306MutexHandle);
 8002d1a:	4b65      	ldr	r3, [pc, #404]	; (8002eb0 <MENU_RunningFunction+0xeb0>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f012 f8a7 	bl	8014e72 <osMutexRelease>
                  osMutexRelease(ScreensDcMutexHandle);
 8002d24:	4b61      	ldr	r3, [pc, #388]	; (8002eac <MENU_RunningFunction+0xeac>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f012 f8a2 	bl	8014e72 <osMutexRelease>
                  QueueChartData.ChartType = INTERNAL_PM1;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
                  break;
 8002d34:	e1fe      	b.n	8003134 <MENU_RunningFunction+0x1134>
               }
               case INTERNAL_PM25:
               {
                  osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8002d36:	4b5d      	ldr	r3, [pc, #372]	; (8002eac <MENU_RunningFunction+0xeac>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f04f 31ff 	mov.w	r1, #4294967295
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f012 f84c 	bl	8014ddc <osMutexAcquire>
                  osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8002d44:	4b5a      	ldr	r3, [pc, #360]	; (8002eb0 <MENU_RunningFunction+0xeb0>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f04f 31ff 	mov.w	r1, #4294967295
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f012 f845 	bl	8014ddc <osMutexAcquire>
                  osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002d52:	4b58      	ldr	r3, [pc, #352]	; (8002eb4 <MENU_RunningFunction+0xeb4>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f04f 31ff 	mov.w	r1, #4294967295
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f012 f83e 	bl	8014ddc <osMutexAcquire>
                  ssd1306_clear();
 8002d60:	f009 fd2e 	bl	800c7c0 <ssd1306_clear>
                  sprintf(Temp, "INTERNAL_PM25");
 8002d64:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002d68:	4957      	ldr	r1, [pc, #348]	; (8002ec8 <MENU_RunningFunction+0xec8>)
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f008 fff8 	bl	800bd60 <sprintf_>
                  GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002d70:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002d74:	2300      	movs	r3, #0
 8002d76:	9301      	str	r3, [sp, #4]
 8002d78:	2300      	movs	r3, #0
 8002d7a:	9300      	str	r3, [sp, #0]
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	2100      	movs	r1, #0
 8002d80:	2000      	movs	r0, #0
 8002d82:	f7fe fa97 	bl	80012b4 <GFX_DrawString>
                  ssd1306_display();
 8002d86:	f009 fcef 	bl	800c768 <ssd1306_display>
                  osMutexRelease(SPI1MutexHandle);
 8002d8a:	4b4a      	ldr	r3, [pc, #296]	; (8002eb4 <MENU_RunningFunction+0xeb4>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f012 f86f 	bl	8014e72 <osMutexRelease>
                  osMutexRelease(SSD1306MutexHandle);
 8002d94:	4b46      	ldr	r3, [pc, #280]	; (8002eb0 <MENU_RunningFunction+0xeb0>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f012 f86a 	bl	8014e72 <osMutexRelease>
                  osMutexRelease(ScreensDcMutexHandle);
 8002d9e:	4b43      	ldr	r3, [pc, #268]	; (8002eac <MENU_RunningFunction+0xeac>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f012 f865 	bl	8014e72 <osMutexRelease>
                  QueueChartData.ChartType = INTERNAL_PM25;
 8002da8:	2301      	movs	r3, #1
 8002daa:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
                  break;
 8002dae:	e1c1      	b.n	8003134 <MENU_RunningFunction+0x1134>
               }
               case INTERNAL_PM10:
               {
                  osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8002db0:	4b3e      	ldr	r3, [pc, #248]	; (8002eac <MENU_RunningFunction+0xeac>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f04f 31ff 	mov.w	r1, #4294967295
 8002db8:	4618      	mov	r0, r3
 8002dba:	f012 f80f 	bl	8014ddc <osMutexAcquire>
                  osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8002dbe:	4b3c      	ldr	r3, [pc, #240]	; (8002eb0 <MENU_RunningFunction+0xeb0>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f04f 31ff 	mov.w	r1, #4294967295
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f012 f808 	bl	8014ddc <osMutexAcquire>
                  osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002dcc:	4b39      	ldr	r3, [pc, #228]	; (8002eb4 <MENU_RunningFunction+0xeb4>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f012 f801 	bl	8014ddc <osMutexAcquire>
                  ssd1306_clear();
 8002dda:	f009 fcf1 	bl	800c7c0 <ssd1306_clear>
                  sprintf(Temp, "INTERNAL_PM10");
 8002dde:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002de2:	493a      	ldr	r1, [pc, #232]	; (8002ecc <MENU_RunningFunction+0xecc>)
 8002de4:	4618      	mov	r0, r3
 8002de6:	f008 ffbb 	bl	800bd60 <sprintf_>
                  GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002dea:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002dee:	2300      	movs	r3, #0
 8002df0:	9301      	str	r3, [sp, #4]
 8002df2:	2300      	movs	r3, #0
 8002df4:	9300      	str	r3, [sp, #0]
 8002df6:	2301      	movs	r3, #1
 8002df8:	2100      	movs	r1, #0
 8002dfa:	2000      	movs	r0, #0
 8002dfc:	f7fe fa5a 	bl	80012b4 <GFX_DrawString>
                  ssd1306_display();
 8002e00:	f009 fcb2 	bl	800c768 <ssd1306_display>
                  osMutexRelease(SPI1MutexHandle);
 8002e04:	4b2b      	ldr	r3, [pc, #172]	; (8002eb4 <MENU_RunningFunction+0xeb4>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f012 f832 	bl	8014e72 <osMutexRelease>
                  osMutexRelease(SSD1306MutexHandle);
 8002e0e:	4b28      	ldr	r3, [pc, #160]	; (8002eb0 <MENU_RunningFunction+0xeb0>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f012 f82d 	bl	8014e72 <osMutexRelease>
                  osMutexRelease(ScreensDcMutexHandle);
 8002e18:	4b24      	ldr	r3, [pc, #144]	; (8002eac <MENU_RunningFunction+0xeac>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f012 f828 	bl	8014e72 <osMutexRelease>
                  QueueChartData.ChartType = INTERNAL_PM10;
 8002e22:	2302      	movs	r3, #2
 8002e24:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
                  break;
 8002e28:	e184      	b.n	8003134 <MENU_RunningFunction+0x1134>
               }
               case EXTERNAL_PM1:
               {
                  osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8002e2a:	4b20      	ldr	r3, [pc, #128]	; (8002eac <MENU_RunningFunction+0xeac>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f04f 31ff 	mov.w	r1, #4294967295
 8002e32:	4618      	mov	r0, r3
 8002e34:	f011 ffd2 	bl	8014ddc <osMutexAcquire>
                  osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8002e38:	4b1d      	ldr	r3, [pc, #116]	; (8002eb0 <MENU_RunningFunction+0xeb0>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e40:	4618      	mov	r0, r3
 8002e42:	f011 ffcb 	bl	8014ddc <osMutexAcquire>
                  osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002e46:	4b1b      	ldr	r3, [pc, #108]	; (8002eb4 <MENU_RunningFunction+0xeb4>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f04f 31ff 	mov.w	r1, #4294967295
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f011 ffc4 	bl	8014ddc <osMutexAcquire>
                  ssd1306_clear();
 8002e54:	f009 fcb4 	bl	800c7c0 <ssd1306_clear>
                  sprintf(Temp, "EXTERNAL_PM1");
 8002e58:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e5c:	491c      	ldr	r1, [pc, #112]	; (8002ed0 <MENU_RunningFunction+0xed0>)
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f008 ff7e 	bl	800bd60 <sprintf_>
                  GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002e64:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002e68:	2300      	movs	r3, #0
 8002e6a:	9301      	str	r3, [sp, #4]
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	9300      	str	r3, [sp, #0]
 8002e70:	2301      	movs	r3, #1
 8002e72:	2100      	movs	r1, #0
 8002e74:	2000      	movs	r0, #0
 8002e76:	f7fe fa1d 	bl	80012b4 <GFX_DrawString>
                  ssd1306_display();
 8002e7a:	f009 fc75 	bl	800c768 <ssd1306_display>
                  osMutexRelease(SPI1MutexHandle);
 8002e7e:	4b0d      	ldr	r3, [pc, #52]	; (8002eb4 <MENU_RunningFunction+0xeb4>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f011 fff5 	bl	8014e72 <osMutexRelease>
                  osMutexRelease(SSD1306MutexHandle);
 8002e88:	4b09      	ldr	r3, [pc, #36]	; (8002eb0 <MENU_RunningFunction+0xeb0>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f011 fff0 	bl	8014e72 <osMutexRelease>
                  osMutexRelease(ScreensDcMutexHandle);
 8002e92:	4b06      	ldr	r3, [pc, #24]	; (8002eac <MENU_RunningFunction+0xeac>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f011 ffeb 	bl	8014e72 <osMutexRelease>
                  QueueChartData.ChartType = EXTERNAL_PM1;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
                  break;
 8002ea2:	e147      	b.n	8003134 <MENU_RunningFunction+0x1134>
 8002ea4:	48000400 	.word	0x48000400
 8002ea8:	200002a4 	.word	0x200002a4
 8002eac:	20004034 	.word	0x20004034
 8002eb0:	20004038 	.word	0x20004038
 8002eb4:	2000403c 	.word	0x2000403c
 8002eb8:	0801ef80 	.word	0x0801ef80
 8002ebc:	40000c00 	.word	0x40000c00
 8002ec0:	38e38e39 	.word	0x38e38e39
 8002ec4:	0801ef90 	.word	0x0801ef90
 8002ec8:	0801efa0 	.word	0x0801efa0
 8002ecc:	0801efb0 	.word	0x0801efb0
 8002ed0:	0801efc0 	.word	0x0801efc0
               }
               case EXTERNAL_PM25:
               {
                  osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8002ed4:	4ba5      	ldr	r3, [pc, #660]	; (800316c <MENU_RunningFunction+0x116c>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8002edc:	4618      	mov	r0, r3
 8002ede:	f011 ff7d 	bl	8014ddc <osMutexAcquire>
                  osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8002ee2:	4ba3      	ldr	r3, [pc, #652]	; (8003170 <MENU_RunningFunction+0x1170>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f04f 31ff 	mov.w	r1, #4294967295
 8002eea:	4618      	mov	r0, r3
 8002eec:	f011 ff76 	bl	8014ddc <osMutexAcquire>
                  osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002ef0:	4ba0      	ldr	r3, [pc, #640]	; (8003174 <MENU_RunningFunction+0x1174>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f011 ff6f 	bl	8014ddc <osMutexAcquire>
                  ssd1306_clear();
 8002efe:	f009 fc5f 	bl	800c7c0 <ssd1306_clear>
                  sprintf(Temp, "EXTERNAL_PM25");
 8002f02:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002f06:	499c      	ldr	r1, [pc, #624]	; (8003178 <MENU_RunningFunction+0x1178>)
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f008 ff29 	bl	800bd60 <sprintf_>
                  GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002f0e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002f12:	2300      	movs	r3, #0
 8002f14:	9301      	str	r3, [sp, #4]
 8002f16:	2300      	movs	r3, #0
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	2000      	movs	r0, #0
 8002f20:	f7fe f9c8 	bl	80012b4 <GFX_DrawString>
                  ssd1306_display();
 8002f24:	f009 fc20 	bl	800c768 <ssd1306_display>
                  osMutexRelease(SPI1MutexHandle);
 8002f28:	4b92      	ldr	r3, [pc, #584]	; (8003174 <MENU_RunningFunction+0x1174>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f011 ffa0 	bl	8014e72 <osMutexRelease>
                  osMutexRelease(SSD1306MutexHandle);
 8002f32:	4b8f      	ldr	r3, [pc, #572]	; (8003170 <MENU_RunningFunction+0x1170>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f011 ff9b 	bl	8014e72 <osMutexRelease>
                  osMutexRelease(ScreensDcMutexHandle);
 8002f3c:	4b8b      	ldr	r3, [pc, #556]	; (800316c <MENU_RunningFunction+0x116c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f011 ff96 	bl	8014e72 <osMutexRelease>
                  QueueChartData.ChartType = EXTERNAL_PM25;
 8002f46:	2304      	movs	r3, #4
 8002f48:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
                  break;
 8002f4c:	e0f2      	b.n	8003134 <MENU_RunningFunction+0x1134>
               }
               case EXTERNAL_PM10:
               {
                  osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8002f4e:	4b87      	ldr	r3, [pc, #540]	; (800316c <MENU_RunningFunction+0x116c>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f04f 31ff 	mov.w	r1, #4294967295
 8002f56:	4618      	mov	r0, r3
 8002f58:	f011 ff40 	bl	8014ddc <osMutexAcquire>
                  osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8002f5c:	4b84      	ldr	r3, [pc, #528]	; (8003170 <MENU_RunningFunction+0x1170>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f04f 31ff 	mov.w	r1, #4294967295
 8002f64:	4618      	mov	r0, r3
 8002f66:	f011 ff39 	bl	8014ddc <osMutexAcquire>
                  osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002f6a:	4b82      	ldr	r3, [pc, #520]	; (8003174 <MENU_RunningFunction+0x1174>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f04f 31ff 	mov.w	r1, #4294967295
 8002f72:	4618      	mov	r0, r3
 8002f74:	f011 ff32 	bl	8014ddc <osMutexAcquire>
                  ssd1306_clear();
 8002f78:	f009 fc22 	bl	800c7c0 <ssd1306_clear>
                  sprintf(Temp, "EXTERNAL_PM10");
 8002f7c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002f80:	497e      	ldr	r1, [pc, #504]	; (800317c <MENU_RunningFunction+0x117c>)
 8002f82:	4618      	mov	r0, r3
 8002f84:	f008 feec 	bl	800bd60 <sprintf_>
                  GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8002f88:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	9301      	str	r3, [sp, #4]
 8002f90:	2300      	movs	r3, #0
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	2301      	movs	r3, #1
 8002f96:	2100      	movs	r1, #0
 8002f98:	2000      	movs	r0, #0
 8002f9a:	f7fe f98b 	bl	80012b4 <GFX_DrawString>
                  ssd1306_display();
 8002f9e:	f009 fbe3 	bl	800c768 <ssd1306_display>
                  osMutexRelease(SPI1MutexHandle);
 8002fa2:	4b74      	ldr	r3, [pc, #464]	; (8003174 <MENU_RunningFunction+0x1174>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f011 ff63 	bl	8014e72 <osMutexRelease>
                  osMutexRelease(SSD1306MutexHandle);
 8002fac:	4b70      	ldr	r3, [pc, #448]	; (8003170 <MENU_RunningFunction+0x1170>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f011 ff5e 	bl	8014e72 <osMutexRelease>
                  osMutexRelease(ScreensDcMutexHandle);
 8002fb6:	4b6d      	ldr	r3, [pc, #436]	; (800316c <MENU_RunningFunction+0x116c>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f011 ff59 	bl	8014e72 <osMutexRelease>
                  QueueChartData.ChartType = EXTERNAL_PM10;
 8002fc0:	2305      	movs	r3, #5
 8002fc2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
                  break;
 8002fc6:	e0b5      	b.n	8003134 <MENU_RunningFunction+0x1134>
               }
               case PRESSURE:
               {
                  osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8002fc8:	4b68      	ldr	r3, [pc, #416]	; (800316c <MENU_RunningFunction+0x116c>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f011 ff03 	bl	8014ddc <osMutexAcquire>
                  osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8002fd6:	4b66      	ldr	r3, [pc, #408]	; (8003170 <MENU_RunningFunction+0x1170>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f04f 31ff 	mov.w	r1, #4294967295
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f011 fefc 	bl	8014ddc <osMutexAcquire>
                  osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8002fe4:	4b63      	ldr	r3, [pc, #396]	; (8003174 <MENU_RunningFunction+0x1174>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8002fec:	4618      	mov	r0, r3
 8002fee:	f011 fef5 	bl	8014ddc <osMutexAcquire>
                  ssd1306_clear();
 8002ff2:	f009 fbe5 	bl	800c7c0 <ssd1306_clear>
                  sprintf(Temp, "PRESSURE");
 8002ff6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002ffa:	4961      	ldr	r1, [pc, #388]	; (8003180 <MENU_RunningFunction+0x1180>)
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f008 feaf 	bl	800bd60 <sprintf_>
                  GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 8003002:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003006:	2300      	movs	r3, #0
 8003008:	9301      	str	r3, [sp, #4]
 800300a:	2300      	movs	r3, #0
 800300c:	9300      	str	r3, [sp, #0]
 800300e:	2301      	movs	r3, #1
 8003010:	2100      	movs	r1, #0
 8003012:	2000      	movs	r0, #0
 8003014:	f7fe f94e 	bl	80012b4 <GFX_DrawString>
                  ssd1306_display();
 8003018:	f009 fba6 	bl	800c768 <ssd1306_display>
                  osMutexRelease(SPI1MutexHandle);
 800301c:	4b55      	ldr	r3, [pc, #340]	; (8003174 <MENU_RunningFunction+0x1174>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4618      	mov	r0, r3
 8003022:	f011 ff26 	bl	8014e72 <osMutexRelease>
                  osMutexRelease(SSD1306MutexHandle);
 8003026:	4b52      	ldr	r3, [pc, #328]	; (8003170 <MENU_RunningFunction+0x1170>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f011 ff21 	bl	8014e72 <osMutexRelease>
                  osMutexRelease(ScreensDcMutexHandle);
 8003030:	4b4e      	ldr	r3, [pc, #312]	; (800316c <MENU_RunningFunction+0x116c>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4618      	mov	r0, r3
 8003036:	f011 ff1c 	bl	8014e72 <osMutexRelease>
                  QueueChartData.ChartType = PRESSURE;
 800303a:	2306      	movs	r3, #6
 800303c:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
                  break;
 8003040:	e078      	b.n	8003134 <MENU_RunningFunction+0x1134>
               }
               case EXTERNAL_TEMPERATURE:
               {
                  osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8003042:	4b4a      	ldr	r3, [pc, #296]	; (800316c <MENU_RunningFunction+0x116c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f04f 31ff 	mov.w	r1, #4294967295
 800304a:	4618      	mov	r0, r3
 800304c:	f011 fec6 	bl	8014ddc <osMutexAcquire>
                  osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8003050:	4b47      	ldr	r3, [pc, #284]	; (8003170 <MENU_RunningFunction+0x1170>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f04f 31ff 	mov.w	r1, #4294967295
 8003058:	4618      	mov	r0, r3
 800305a:	f011 febf 	bl	8014ddc <osMutexAcquire>
                  osMutexAcquire(SPI1MutexHandle, osWaitForever);
 800305e:	4b45      	ldr	r3, [pc, #276]	; (8003174 <MENU_RunningFunction+0x1174>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f04f 31ff 	mov.w	r1, #4294967295
 8003066:	4618      	mov	r0, r3
 8003068:	f011 feb8 	bl	8014ddc <osMutexAcquire>
                  ssd1306_clear();
 800306c:	f009 fba8 	bl	800c7c0 <ssd1306_clear>
                  sprintf(Temp, "EXTERNAL_TEMPERATURE");
 8003070:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003074:	4943      	ldr	r1, [pc, #268]	; (8003184 <MENU_RunningFunction+0x1184>)
 8003076:	4618      	mov	r0, r3
 8003078:	f008 fe72 	bl	800bd60 <sprintf_>
                  GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 800307c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003080:	2300      	movs	r3, #0
 8003082:	9301      	str	r3, [sp, #4]
 8003084:	2300      	movs	r3, #0
 8003086:	9300      	str	r3, [sp, #0]
 8003088:	2301      	movs	r3, #1
 800308a:	2100      	movs	r1, #0
 800308c:	2000      	movs	r0, #0
 800308e:	f7fe f911 	bl	80012b4 <GFX_DrawString>
                  ssd1306_display();
 8003092:	f009 fb69 	bl	800c768 <ssd1306_display>
                  osMutexRelease(SPI1MutexHandle);
 8003096:	4b37      	ldr	r3, [pc, #220]	; (8003174 <MENU_RunningFunction+0x1174>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4618      	mov	r0, r3
 800309c:	f011 fee9 	bl	8014e72 <osMutexRelease>
                  osMutexRelease(SSD1306MutexHandle);
 80030a0:	4b33      	ldr	r3, [pc, #204]	; (8003170 <MENU_RunningFunction+0x1170>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f011 fee4 	bl	8014e72 <osMutexRelease>
                  osMutexRelease(ScreensDcMutexHandle);
 80030aa:	4b30      	ldr	r3, [pc, #192]	; (800316c <MENU_RunningFunction+0x116c>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f011 fedf 	bl	8014e72 <osMutexRelease>
                  QueueChartData.ChartType = EXTERNAL_TEMPERATURE;
 80030b4:	2307      	movs	r3, #7
 80030b6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
                  break;
 80030ba:	e03b      	b.n	8003134 <MENU_RunningFunction+0x1134>
               }
               case EXTERNAL_HUMIDITY:
               {
                  osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 80030bc:	4b2b      	ldr	r3, [pc, #172]	; (800316c <MENU_RunningFunction+0x116c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f04f 31ff 	mov.w	r1, #4294967295
 80030c4:	4618      	mov	r0, r3
 80030c6:	f011 fe89 	bl	8014ddc <osMutexAcquire>
                  osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 80030ca:	4b29      	ldr	r3, [pc, #164]	; (8003170 <MENU_RunningFunction+0x1170>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f04f 31ff 	mov.w	r1, #4294967295
 80030d2:	4618      	mov	r0, r3
 80030d4:	f011 fe82 	bl	8014ddc <osMutexAcquire>
                  osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80030d8:	4b26      	ldr	r3, [pc, #152]	; (8003174 <MENU_RunningFunction+0x1174>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f04f 31ff 	mov.w	r1, #4294967295
 80030e0:	4618      	mov	r0, r3
 80030e2:	f011 fe7b 	bl	8014ddc <osMutexAcquire>
                  ssd1306_clear();
 80030e6:	f009 fb6b 	bl	800c7c0 <ssd1306_clear>
                  sprintf(Temp, "EXTERNAL_HUMIDITY");
 80030ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80030ee:	4926      	ldr	r1, [pc, #152]	; (8003188 <MENU_RunningFunction+0x1188>)
 80030f0:	4618      	mov	r0, r3
 80030f2:	f008 fe35 	bl	800bd60 <sprintf_>
                  GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 80030f6:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80030fa:	2300      	movs	r3, #0
 80030fc:	9301      	str	r3, [sp, #4]
 80030fe:	2300      	movs	r3, #0
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	2301      	movs	r3, #1
 8003104:	2100      	movs	r1, #0
 8003106:	2000      	movs	r0, #0
 8003108:	f7fe f8d4 	bl	80012b4 <GFX_DrawString>
                  ssd1306_display();
 800310c:	f009 fb2c 	bl	800c768 <ssd1306_display>
                  osMutexRelease(SPI1MutexHandle);
 8003110:	4b18      	ldr	r3, [pc, #96]	; (8003174 <MENU_RunningFunction+0x1174>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4618      	mov	r0, r3
 8003116:	f011 feac 	bl	8014e72 <osMutexRelease>
                  osMutexRelease(SSD1306MutexHandle);
 800311a:	4b15      	ldr	r3, [pc, #84]	; (8003170 <MENU_RunningFunction+0x1170>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f011 fea7 	bl	8014e72 <osMutexRelease>
                  osMutexRelease(ScreensDcMutexHandle);
 8003124:	4b11      	ldr	r3, [pc, #68]	; (800316c <MENU_RunningFunction+0x116c>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f011 fea2 	bl	8014e72 <osMutexRelease>
                  QueueChartData.ChartType = EXTERNAL_HUMIDITY;
 800312e:	2308      	movs	r3, #8
 8003130:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 8003134:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003138:	4814      	ldr	r0, [pc, #80]	; (800318c <MENU_RunningFunction+0x118c>)
 800313a:	f00a feaf 	bl	800de9c <HAL_GPIO_ReadPin>
 800313e:	4603      	mov	r3, r0
 8003140:	2b01      	cmp	r3, #1
 8003142:	f43f ad94 	beq.w	8002c6e <MENU_RunningFunction+0xc6e>
               }
            }
         }
         osDelay(50);
 8003146:	2032      	movs	r0, #50	; 0x32
 8003148:	f011 fbfa 	bl	8014940 <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 800314c:	e002      	b.n	8003154 <MENU_RunningFunction+0x1154>
         {
            osDelay(100);
 800314e:	2064      	movs	r0, #100	; 0x64
 8003150:	f011 fbf6 	bl	8014940 <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8003154:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003158:	480c      	ldr	r0, [pc, #48]	; (800318c <MENU_RunningFunction+0x118c>)
 800315a:	f00a fe9f 	bl	800de9c <HAL_GPIO_ReadPin>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0f4      	beq.n	800314e <MENU_RunningFunction+0x114e>
         }
         TIM5->CNT = 0;
 8003164:	4b0a      	ldr	r3, [pc, #40]	; (8003190 <MENU_RunningFunction+0x1190>)
 8003166:	2200      	movs	r2, #0
 8003168:	625a      	str	r2, [r3, #36]	; 0x24
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 800316a:	e0e8      	b.n	800333e <MENU_RunningFunction+0x133e>
 800316c:	20004034 	.word	0x20004034
 8003170:	20004038 	.word	0x20004038
 8003174:	2000403c 	.word	0x2000403c
 8003178:	0801efd0 	.word	0x0801efd0
 800317c:	0801efe0 	.word	0x0801efe0
 8003180:	0801eff0 	.word	0x0801eff0
 8003184:	0801effc 	.word	0x0801effc
 8003188:	0801f014 	.word	0x0801f014
 800318c:	48000400 	.word	0x48000400
 8003190:	40000c00 	.word	0x40000c00
         {
            if((TIM5->CNT / 4) % 2 == 0)
 8003194:	4bb6      	ldr	r3, [pc, #728]	; (8003470 <MENU_RunningFunction+0x1470>)
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	089b      	lsrs	r3, r3, #2
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d165      	bne.n	800326e <MENU_RunningFunction+0x126e>
            {
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 80031a2:	4bb4      	ldr	r3, [pc, #720]	; (8003474 <MENU_RunningFunction+0x1474>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f04f 31ff 	mov.w	r1, #4294967295
 80031aa:	4618      	mov	r0, r3
 80031ac:	f011 fe16 	bl	8014ddc <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 80031b0:	4bb1      	ldr	r3, [pc, #708]	; (8003478 <MENU_RunningFunction+0x1478>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f04f 31ff 	mov.w	r1, #4294967295
 80031b8:	4618      	mov	r0, r3
 80031ba:	f011 fe0f 	bl	8014ddc <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80031be:	4baf      	ldr	r3, [pc, #700]	; (800347c <MENU_RunningFunction+0x147c>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f04f 31ff 	mov.w	r1, #4294967295
 80031c6:	4618      	mov	r0, r3
 80031c8:	f011 fe08 	bl	8014ddc <osMutexAcquire>
               ssd1306_clear();
 80031cc:	f009 faf8 	bl	800c7c0 <ssd1306_clear>
               sprintf(Temp, "WYMAGA POTWIERDZENIA");
 80031d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80031d4:	49aa      	ldr	r1, [pc, #680]	; (8003480 <MENU_RunningFunction+0x1480>)
 80031d6:	4618      	mov	r0, r3
 80031d8:	f008 fdc2 	bl	800bd60 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 80031dc:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80031e0:	2300      	movs	r3, #0
 80031e2:	9301      	str	r3, [sp, #4]
 80031e4:	2300      	movs	r3, #0
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	2301      	movs	r3, #1
 80031ea:	2100      	movs	r1, #0
 80031ec:	2000      	movs	r0, #0
 80031ee:	f7fe f861 	bl	80012b4 <GFX_DrawString>
               sprintf(Temp, "NIE");
 80031f2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80031f6:	49a3      	ldr	r1, [pc, #652]	; (8003484 <MENU_RunningFunction+0x1484>)
 80031f8:	4618      	mov	r0, r3
 80031fa:	f008 fdb1 	bl	800bd60 <sprintf_>
               GFX_DrawFillRectangle(5, 25, 25, 18, WHITE, OLED);
 80031fe:	2300      	movs	r3, #0
 8003200:	9301      	str	r3, [sp, #4]
 8003202:	2301      	movs	r3, #1
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	2312      	movs	r3, #18
 8003208:	2219      	movs	r2, #25
 800320a:	2119      	movs	r1, #25
 800320c:	2005      	movs	r0, #5
 800320e:	f7fe f9c2 	bl	8001596 <GFX_DrawFillRectangle>
               GFX_DrawString(10, 30, Temp, BLACK, 1, OLED);
 8003212:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003216:	2300      	movs	r3, #0
 8003218:	9301      	str	r3, [sp, #4]
 800321a:	2301      	movs	r3, #1
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	2300      	movs	r3, #0
 8003220:	211e      	movs	r1, #30
 8003222:	200a      	movs	r0, #10
 8003224:	f7fe f846 	bl	80012b4 <GFX_DrawString>
               sprintf(Temp, "TAK");
 8003228:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800322c:	4996      	ldr	r1, [pc, #600]	; (8003488 <MENU_RunningFunction+0x1488>)
 800322e:	4618      	mov	r0, r3
 8003230:	f008 fd96 	bl	800bd60 <sprintf_>
               GFX_DrawString(100, 30, Temp, WHITE, 0, OLED);
 8003234:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003238:	2300      	movs	r3, #0
 800323a:	9301      	str	r3, [sp, #4]
 800323c:	2300      	movs	r3, #0
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	2301      	movs	r3, #1
 8003242:	211e      	movs	r1, #30
 8003244:	2064      	movs	r0, #100	; 0x64
 8003246:	f7fe f835 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 800324a:	f009 fa8d 	bl	800c768 <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 800324e:	4b8b      	ldr	r3, [pc, #556]	; (800347c <MENU_RunningFunction+0x147c>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4618      	mov	r0, r3
 8003254:	f011 fe0d 	bl	8014e72 <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 8003258:	4b87      	ldr	r3, [pc, #540]	; (8003478 <MENU_RunningFunction+0x1478>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4618      	mov	r0, r3
 800325e:	f011 fe08 	bl	8014e72 <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 8003262:	4b84      	ldr	r3, [pc, #528]	; (8003474 <MENU_RunningFunction+0x1474>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f011 fe03 	bl	8014e72 <osMutexRelease>
 800326c:	e064      	b.n	8003338 <MENU_RunningFunction+0x1338>
            }
            else
            {
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 800326e:	4b81      	ldr	r3, [pc, #516]	; (8003474 <MENU_RunningFunction+0x1474>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f04f 31ff 	mov.w	r1, #4294967295
 8003276:	4618      	mov	r0, r3
 8003278:	f011 fdb0 	bl	8014ddc <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 800327c:	4b7e      	ldr	r3, [pc, #504]	; (8003478 <MENU_RunningFunction+0x1478>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f04f 31ff 	mov.w	r1, #4294967295
 8003284:	4618      	mov	r0, r3
 8003286:	f011 fda9 	bl	8014ddc <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 800328a:	4b7c      	ldr	r3, [pc, #496]	; (800347c <MENU_RunningFunction+0x147c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f04f 31ff 	mov.w	r1, #4294967295
 8003292:	4618      	mov	r0, r3
 8003294:	f011 fda2 	bl	8014ddc <osMutexAcquire>
               ssd1306_clear();
 8003298:	f009 fa92 	bl	800c7c0 <ssd1306_clear>
               sprintf(Temp, "WYMAGA POTWIERDZENIA");
 800329c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80032a0:	4977      	ldr	r1, [pc, #476]	; (8003480 <MENU_RunningFunction+0x1480>)
 80032a2:	4618      	mov	r0, r3
 80032a4:	f008 fd5c 	bl	800bd60 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 80032a8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80032ac:	2300      	movs	r3, #0
 80032ae:	9301      	str	r3, [sp, #4]
 80032b0:	2300      	movs	r3, #0
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	2301      	movs	r3, #1
 80032b6:	2100      	movs	r1, #0
 80032b8:	2000      	movs	r0, #0
 80032ba:	f7fd fffb 	bl	80012b4 <GFX_DrawString>
               sprintf(Temp, "NIE");
 80032be:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80032c2:	4970      	ldr	r1, [pc, #448]	; (8003484 <MENU_RunningFunction+0x1484>)
 80032c4:	4618      	mov	r0, r3
 80032c6:	f008 fd4b 	bl	800bd60 <sprintf_>
               GFX_DrawString(10, 30, Temp, WHITE, 0, OLED);
 80032ca:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80032ce:	2300      	movs	r3, #0
 80032d0:	9301      	str	r3, [sp, #4]
 80032d2:	2300      	movs	r3, #0
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	2301      	movs	r3, #1
 80032d8:	211e      	movs	r1, #30
 80032da:	200a      	movs	r0, #10
 80032dc:	f7fd ffea 	bl	80012b4 <GFX_DrawString>
               sprintf(Temp, "TAK");
 80032e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80032e4:	4968      	ldr	r1, [pc, #416]	; (8003488 <MENU_RunningFunction+0x1488>)
 80032e6:	4618      	mov	r0, r3
 80032e8:	f008 fd3a 	bl	800bd60 <sprintf_>
               GFX_DrawFillRectangle(95, 25, 25, 18, WHITE, OLED);
 80032ec:	2300      	movs	r3, #0
 80032ee:	9301      	str	r3, [sp, #4]
 80032f0:	2301      	movs	r3, #1
 80032f2:	9300      	str	r3, [sp, #0]
 80032f4:	2312      	movs	r3, #18
 80032f6:	2219      	movs	r2, #25
 80032f8:	2119      	movs	r1, #25
 80032fa:	205f      	movs	r0, #95	; 0x5f
 80032fc:	f7fe f94b 	bl	8001596 <GFX_DrawFillRectangle>
               GFX_DrawString(100, 30, Temp, BLACK, 1, OLED);
 8003300:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003304:	2300      	movs	r3, #0
 8003306:	9301      	str	r3, [sp, #4]
 8003308:	2301      	movs	r3, #1
 800330a:	9300      	str	r3, [sp, #0]
 800330c:	2300      	movs	r3, #0
 800330e:	211e      	movs	r1, #30
 8003310:	2064      	movs	r0, #100	; 0x64
 8003312:	f7fd ffcf 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 8003316:	f009 fa27 	bl	800c768 <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 800331a:	4b58      	ldr	r3, [pc, #352]	; (800347c <MENU_RunningFunction+0x147c>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4618      	mov	r0, r3
 8003320:	f011 fda7 	bl	8014e72 <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 8003324:	4b54      	ldr	r3, [pc, #336]	; (8003478 <MENU_RunningFunction+0x1478>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4618      	mov	r0, r3
 800332a:	f011 fda2 	bl	8014e72 <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 800332e:	4b51      	ldr	r3, [pc, #324]	; (8003474 <MENU_RunningFunction+0x1474>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f011 fd9d 	bl	8014e72 <osMutexRelease>
            }
            osDelay(100);
 8003338:	2064      	movs	r0, #100	; 0x64
 800333a:	f011 fb01 	bl	8014940 <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 800333e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003342:	4852      	ldr	r0, [pc, #328]	; (800348c <MENU_RunningFunction+0x148c>)
 8003344:	f00a fdaa 	bl	800de9c <HAL_GPIO_ReadPin>
 8003348:	4603      	mov	r3, r0
 800334a:	2b01      	cmp	r3, #1
 800334c:	f43f af22 	beq.w	8003194 <MENU_RunningFunction+0x1194>
         }

         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8003350:	e002      	b.n	8003358 <MENU_RunningFunction+0x1358>
         {
            osDelay(100);
 8003352:	2064      	movs	r0, #100	; 0x64
 8003354:	f011 faf4 	bl	8014940 <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8003358:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800335c:	484b      	ldr	r0, [pc, #300]	; (800348c <MENU_RunningFunction+0x148c>)
 800335e:	f00a fd9d 	bl	800de9c <HAL_GPIO_ReadPin>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d0f4      	beq.n	8003352 <MENU_RunningFunction+0x1352>
         }
         if((TIM5->CNT / 4) % 2 == 1)
 8003368:	4b41      	ldr	r3, [pc, #260]	; (8003470 <MENU_RunningFunction+0x1470>)
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	089b      	lsrs	r3, r3, #2
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b01      	cmp	r3, #1
 8003374:	f040 824a 	bne.w	800380c <MENU_RunningFunction+0x180c>
         {
            osMessageQueuePut(ChartQueueHandle, &QueueChartData, 0, osWaitForever);
 8003378:	4b45      	ldr	r3, [pc, #276]	; (8003490 <MENU_RunningFunction+0x1490>)
 800337a:	6818      	ldr	r0, [r3, #0]
 800337c:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8003380:	f04f 33ff 	mov.w	r3, #4294967295
 8003384:	2200      	movs	r2, #0
 8003386:	f011 fe25 	bl	8014fd4 <osMessageQueuePut>
         }
         break;
 800338a:	e23f      	b.n	800380c <MENU_RunningFunction+0x180c>
      }

      case MENU_CHOISE_CLEAR_EXTERNAL_MEMORY:
      {
         TIM5->CNT = 0;
 800338c:	4b38      	ldr	r3, [pc, #224]	; (8003470 <MENU_RunningFunction+0x1470>)
 800338e:	2200      	movs	r2, #0
 8003390:	625a      	str	r2, [r3, #36]	; 0x24
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 8003392:	e0e7      	b.n	8003564 <MENU_RunningFunction+0x1564>
         {
            if((TIM5->CNT / 4) % 2 == 0)
 8003394:	4b36      	ldr	r3, [pc, #216]	; (8003470 <MENU_RunningFunction+0x1470>)
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	089b      	lsrs	r3, r3, #2
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d178      	bne.n	8003494 <MENU_RunningFunction+0x1494>
            {
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 80033a2:	4b34      	ldr	r3, [pc, #208]	; (8003474 <MENU_RunningFunction+0x1474>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f04f 31ff 	mov.w	r1, #4294967295
 80033aa:	4618      	mov	r0, r3
 80033ac:	f011 fd16 	bl	8014ddc <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 80033b0:	4b31      	ldr	r3, [pc, #196]	; (8003478 <MENU_RunningFunction+0x1478>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f04f 31ff 	mov.w	r1, #4294967295
 80033b8:	4618      	mov	r0, r3
 80033ba:	f011 fd0f 	bl	8014ddc <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80033be:	4b2f      	ldr	r3, [pc, #188]	; (800347c <MENU_RunningFunction+0x147c>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f04f 31ff 	mov.w	r1, #4294967295
 80033c6:	4618      	mov	r0, r3
 80033c8:	f011 fd08 	bl	8014ddc <osMutexAcquire>
               ssd1306_clear();
 80033cc:	f009 f9f8 	bl	800c7c0 <ssd1306_clear>
               sprintf(Temp, "WYMAGA POTWIERDZENIA");
 80033d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80033d4:	492a      	ldr	r1, [pc, #168]	; (8003480 <MENU_RunningFunction+0x1480>)
 80033d6:	4618      	mov	r0, r3
 80033d8:	f008 fcc2 	bl	800bd60 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 80033dc:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80033e0:	2300      	movs	r3, #0
 80033e2:	9301      	str	r3, [sp, #4]
 80033e4:	2300      	movs	r3, #0
 80033e6:	9300      	str	r3, [sp, #0]
 80033e8:	2301      	movs	r3, #1
 80033ea:	2100      	movs	r1, #0
 80033ec:	2000      	movs	r0, #0
 80033ee:	f7fd ff61 	bl	80012b4 <GFX_DrawString>
               sprintf(Temp, "NIE");
 80033f2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80033f6:	4923      	ldr	r1, [pc, #140]	; (8003484 <MENU_RunningFunction+0x1484>)
 80033f8:	4618      	mov	r0, r3
 80033fa:	f008 fcb1 	bl	800bd60 <sprintf_>
               GFX_DrawFillRectangle(5, 25, 25, 18, WHITE, OLED);
 80033fe:	2300      	movs	r3, #0
 8003400:	9301      	str	r3, [sp, #4]
 8003402:	2301      	movs	r3, #1
 8003404:	9300      	str	r3, [sp, #0]
 8003406:	2312      	movs	r3, #18
 8003408:	2219      	movs	r2, #25
 800340a:	2119      	movs	r1, #25
 800340c:	2005      	movs	r0, #5
 800340e:	f7fe f8c2 	bl	8001596 <GFX_DrawFillRectangle>
               GFX_DrawString(10, 30, Temp, BLACK, 1, OLED);
 8003412:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003416:	2300      	movs	r3, #0
 8003418:	9301      	str	r3, [sp, #4]
 800341a:	2301      	movs	r3, #1
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	2300      	movs	r3, #0
 8003420:	211e      	movs	r1, #30
 8003422:	200a      	movs	r0, #10
 8003424:	f7fd ff46 	bl	80012b4 <GFX_DrawString>
               sprintf(Temp, "TAK");
 8003428:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800342c:	4916      	ldr	r1, [pc, #88]	; (8003488 <MENU_RunningFunction+0x1488>)
 800342e:	4618      	mov	r0, r3
 8003430:	f008 fc96 	bl	800bd60 <sprintf_>
               GFX_DrawString(100, 30, Temp, WHITE, 0, OLED);
 8003434:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003438:	2300      	movs	r3, #0
 800343a:	9301      	str	r3, [sp, #4]
 800343c:	2300      	movs	r3, #0
 800343e:	9300      	str	r3, [sp, #0]
 8003440:	2301      	movs	r3, #1
 8003442:	211e      	movs	r1, #30
 8003444:	2064      	movs	r0, #100	; 0x64
 8003446:	f7fd ff35 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 800344a:	f009 f98d 	bl	800c768 <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 800344e:	4b0b      	ldr	r3, [pc, #44]	; (800347c <MENU_RunningFunction+0x147c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4618      	mov	r0, r3
 8003454:	f011 fd0d 	bl	8014e72 <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 8003458:	4b07      	ldr	r3, [pc, #28]	; (8003478 <MENU_RunningFunction+0x1478>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4618      	mov	r0, r3
 800345e:	f011 fd08 	bl	8014e72 <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 8003462:	4b04      	ldr	r3, [pc, #16]	; (8003474 <MENU_RunningFunction+0x1474>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4618      	mov	r0, r3
 8003468:	f011 fd03 	bl	8014e72 <osMutexRelease>
 800346c:	e077      	b.n	800355e <MENU_RunningFunction+0x155e>
 800346e:	bf00      	nop
 8003470:	40000c00 	.word	0x40000c00
 8003474:	20004034 	.word	0x20004034
 8003478:	20004038 	.word	0x20004038
 800347c:	2000403c 	.word	0x2000403c
 8003480:	0801ef30 	.word	0x0801ef30
 8003484:	0801f028 	.word	0x0801f028
 8003488:	0801f02c 	.word	0x0801f02c
 800348c:	48000400 	.word	0x48000400
 8003490:	20004018 	.word	0x20004018
            }
            else
            {
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8003494:	4bc1      	ldr	r3, [pc, #772]	; (800379c <MENU_RunningFunction+0x179c>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f04f 31ff 	mov.w	r1, #4294967295
 800349c:	4618      	mov	r0, r3
 800349e:	f011 fc9d 	bl	8014ddc <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 80034a2:	4bbf      	ldr	r3, [pc, #764]	; (80037a0 <MENU_RunningFunction+0x17a0>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f04f 31ff 	mov.w	r1, #4294967295
 80034aa:	4618      	mov	r0, r3
 80034ac:	f011 fc96 	bl	8014ddc <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80034b0:	4bbc      	ldr	r3, [pc, #752]	; (80037a4 <MENU_RunningFunction+0x17a4>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f04f 31ff 	mov.w	r1, #4294967295
 80034b8:	4618      	mov	r0, r3
 80034ba:	f011 fc8f 	bl	8014ddc <osMutexAcquire>
               ssd1306_clear();
 80034be:	f009 f97f 	bl	800c7c0 <ssd1306_clear>
               sprintf(Temp, "WYMAGA POTWIERDZENIA");
 80034c2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80034c6:	49b8      	ldr	r1, [pc, #736]	; (80037a8 <MENU_RunningFunction+0x17a8>)
 80034c8:	4618      	mov	r0, r3
 80034ca:	f008 fc49 	bl	800bd60 <sprintf_>
               GFX_DrawString(0, 0, Temp, WHITE, 0, OLED);
 80034ce:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80034d2:	2300      	movs	r3, #0
 80034d4:	9301      	str	r3, [sp, #4]
 80034d6:	2300      	movs	r3, #0
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	2301      	movs	r3, #1
 80034dc:	2100      	movs	r1, #0
 80034de:	2000      	movs	r0, #0
 80034e0:	f7fd fee8 	bl	80012b4 <GFX_DrawString>
               sprintf(Temp, "NIE");
 80034e4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80034e8:	49b0      	ldr	r1, [pc, #704]	; (80037ac <MENU_RunningFunction+0x17ac>)
 80034ea:	4618      	mov	r0, r3
 80034ec:	f008 fc38 	bl	800bd60 <sprintf_>
               GFX_DrawString(10, 30, Temp, WHITE, 0, OLED);
 80034f0:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80034f4:	2300      	movs	r3, #0
 80034f6:	9301      	str	r3, [sp, #4]
 80034f8:	2300      	movs	r3, #0
 80034fa:	9300      	str	r3, [sp, #0]
 80034fc:	2301      	movs	r3, #1
 80034fe:	211e      	movs	r1, #30
 8003500:	200a      	movs	r0, #10
 8003502:	f7fd fed7 	bl	80012b4 <GFX_DrawString>
               sprintf(Temp, "TAK");
 8003506:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800350a:	49a9      	ldr	r1, [pc, #676]	; (80037b0 <MENU_RunningFunction+0x17b0>)
 800350c:	4618      	mov	r0, r3
 800350e:	f008 fc27 	bl	800bd60 <sprintf_>
               GFX_DrawFillRectangle(95, 25, 25, 18, WHITE, OLED);
 8003512:	2300      	movs	r3, #0
 8003514:	9301      	str	r3, [sp, #4]
 8003516:	2301      	movs	r3, #1
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	2312      	movs	r3, #18
 800351c:	2219      	movs	r2, #25
 800351e:	2119      	movs	r1, #25
 8003520:	205f      	movs	r0, #95	; 0x5f
 8003522:	f7fe f838 	bl	8001596 <GFX_DrawFillRectangle>
               GFX_DrawString(100, 30, Temp, BLACK, 1, OLED);
 8003526:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800352a:	2300      	movs	r3, #0
 800352c:	9301      	str	r3, [sp, #4]
 800352e:	2301      	movs	r3, #1
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	2300      	movs	r3, #0
 8003534:	211e      	movs	r1, #30
 8003536:	2064      	movs	r0, #100	; 0x64
 8003538:	f7fd febc 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 800353c:	f009 f914 	bl	800c768 <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 8003540:	4b98      	ldr	r3, [pc, #608]	; (80037a4 <MENU_RunningFunction+0x17a4>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4618      	mov	r0, r3
 8003546:	f011 fc94 	bl	8014e72 <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 800354a:	4b95      	ldr	r3, [pc, #596]	; (80037a0 <MENU_RunningFunction+0x17a0>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4618      	mov	r0, r3
 8003550:	f011 fc8f 	bl	8014e72 <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 8003554:	4b91      	ldr	r3, [pc, #580]	; (800379c <MENU_RunningFunction+0x179c>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4618      	mov	r0, r3
 800355a:	f011 fc8a 	bl	8014e72 <osMutexRelease>
            }
            osDelay(100);
 800355e:	2064      	movs	r0, #100	; 0x64
 8003560:	f011 f9ee 	bl	8014940 <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 8003564:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003568:	4892      	ldr	r0, [pc, #584]	; (80037b4 <MENU_RunningFunction+0x17b4>)
 800356a:	f00a fc97 	bl	800de9c <HAL_GPIO_ReadPin>
 800356e:	4603      	mov	r3, r0
 8003570:	2b01      	cmp	r3, #1
 8003572:	f43f af0f 	beq.w	8003394 <MENU_RunningFunction+0x1394>
         }

         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8003576:	e002      	b.n	800357e <MENU_RunningFunction+0x157e>
         {
            osDelay(100);
 8003578:	2064      	movs	r0, #100	; 0x64
 800357a:	f011 f9e1 	bl	8014940 <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 800357e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003582:	488c      	ldr	r0, [pc, #560]	; (80037b4 <MENU_RunningFunction+0x17b4>)
 8003584:	f00a fc8a 	bl	800de9c <HAL_GPIO_ReadPin>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d0f4      	beq.n	8003578 <MENU_RunningFunction+0x1578>
         }
         if((TIM5->CNT / 4) % 2 == 1)
 800358e:	4b8a      	ldr	r3, [pc, #552]	; (80037b8 <MENU_RunningFunction+0x17b8>)
 8003590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003592:	089b      	lsrs	r3, r3, #2
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b01      	cmp	r3, #1
 800359a:	f040 8139 	bne.w	8003810 <MENU_RunningFunction+0x1810>
         {
            osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 800359e:	4b7f      	ldr	r3, [pc, #508]	; (800379c <MENU_RunningFunction+0x179c>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f04f 31ff 	mov.w	r1, #4294967295
 80035a6:	4618      	mov	r0, r3
 80035a8:	f011 fc18 	bl	8014ddc <osMutexAcquire>
            osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 80035ac:	4b7c      	ldr	r3, [pc, #496]	; (80037a0 <MENU_RunningFunction+0x17a0>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f04f 31ff 	mov.w	r1, #4294967295
 80035b4:	4618      	mov	r0, r3
 80035b6:	f011 fc11 	bl	8014ddc <osMutexAcquire>
            osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80035ba:	4b7a      	ldr	r3, [pc, #488]	; (80037a4 <MENU_RunningFunction+0x17a4>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f04f 31ff 	mov.w	r1, #4294967295
 80035c2:	4618      	mov	r0, r3
 80035c4:	f011 fc0a 	bl	8014ddc <osMutexAcquire>
            ssd1306_clear();
 80035c8:	f009 f8fa 	bl	800c7c0 <ssd1306_clear>
            sprintf(Temp, "CZYSZCZENIE!!!");
 80035cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80035d0:	497a      	ldr	r1, [pc, #488]	; (80037bc <MENU_RunningFunction+0x17bc>)
 80035d2:	4618      	mov	r0, r3
 80035d4:	f008 fbc4 	bl	800bd60 <sprintf_>
            GFX_DrawString(0, 0, Temp, BLACK, 1, OLED);
 80035d8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80035dc:	2300      	movs	r3, #0
 80035de:	9301      	str	r3, [sp, #4]
 80035e0:	2301      	movs	r3, #1
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	2300      	movs	r3, #0
 80035e6:	2100      	movs	r1, #0
 80035e8:	2000      	movs	r0, #0
 80035ea:	f7fd fe63 	bl	80012b4 <GFX_DrawString>
            ssd1306_display();
 80035ee:	f009 f8bb 	bl	800c768 <ssd1306_display>
            osDelay(10000);
 80035f2:	f242 7010 	movw	r0, #10000	; 0x2710
 80035f6:	f011 f9a3 	bl	8014940 <osDelay>
            osMutexRelease(SPI1MutexHandle);
 80035fa:	4b6a      	ldr	r3, [pc, #424]	; (80037a4 <MENU_RunningFunction+0x17a4>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4618      	mov	r0, r3
 8003600:	f011 fc37 	bl	8014e72 <osMutexRelease>
            osMutexRelease(SSD1306MutexHandle);
 8003604:	4b66      	ldr	r3, [pc, #408]	; (80037a0 <MENU_RunningFunction+0x17a0>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4618      	mov	r0, r3
 800360a:	f011 fc32 	bl	8014e72 <osMutexRelease>
            osMutexRelease(ScreensDcMutexHandle);
 800360e:	4b63      	ldr	r3, [pc, #396]	; (800379c <MENU_RunningFunction+0x179c>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f011 fc2d 	bl	8014e72 <osMutexRelease>
         }
         break;
 8003618:	e0fa      	b.n	8003810 <MENU_RunningFunction+0x1810>
      }
      case MENU_CHOISE_DARK_MODE:
      {
         TIM5->CNT = 0;
 800361a:	4b67      	ldr	r3, [pc, #412]	; (80037b8 <MENU_RunningFunction+0x17b8>)
 800361c:	2200      	movs	r2, #0
 800361e:	625a      	str	r2, [r3, #36]	; 0x24
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 8003620:	e0b2      	b.n	8003788 <MENU_RunningFunction+0x1788>
         {
            if((TIM5->CNT / 4) % 2 == 0)
 8003622:	4b65      	ldr	r3, [pc, #404]	; (80037b8 <MENU_RunningFunction+0x17b8>)
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003626:	089b      	lsrs	r3, r3, #2
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	2b00      	cmp	r3, #0
 800362e:	d154      	bne.n	80036da <MENU_RunningFunction+0x16da>
            {
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8003630:	4b5a      	ldr	r3, [pc, #360]	; (800379c <MENU_RunningFunction+0x179c>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f04f 31ff 	mov.w	r1, #4294967295
 8003638:	4618      	mov	r0, r3
 800363a:	f011 fbcf 	bl	8014ddc <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 800363e:	4b58      	ldr	r3, [pc, #352]	; (80037a0 <MENU_RunningFunction+0x17a0>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f04f 31ff 	mov.w	r1, #4294967295
 8003646:	4618      	mov	r0, r3
 8003648:	f011 fbc8 	bl	8014ddc <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 800364c:	4b55      	ldr	r3, [pc, #340]	; (80037a4 <MENU_RunningFunction+0x17a4>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f04f 31ff 	mov.w	r1, #4294967295
 8003654:	4618      	mov	r0, r3
 8003656:	f011 fbc1 	bl	8014ddc <osMutexAcquire>
               ssd1306_clear();
 800365a:	f009 f8b1 	bl	800c7c0 <ssd1306_clear>
               sprintf(Temp, "OFF");
 800365e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003662:	4957      	ldr	r1, [pc, #348]	; (80037c0 <MENU_RunningFunction+0x17c0>)
 8003664:	4618      	mov	r0, r3
 8003666:	f008 fb7b 	bl	800bd60 <sprintf_>
               GFX_DrawFillRectangle(5, 25, 25, 18, WHITE, OLED);
 800366a:	2300      	movs	r3, #0
 800366c:	9301      	str	r3, [sp, #4]
 800366e:	2301      	movs	r3, #1
 8003670:	9300      	str	r3, [sp, #0]
 8003672:	2312      	movs	r3, #18
 8003674:	2219      	movs	r2, #25
 8003676:	2119      	movs	r1, #25
 8003678:	2005      	movs	r0, #5
 800367a:	f7fd ff8c 	bl	8001596 <GFX_DrawFillRectangle>
               GFX_DrawString(10, 30, Temp, BLACK, 1, OLED);
 800367e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003682:	2300      	movs	r3, #0
 8003684:	9301      	str	r3, [sp, #4]
 8003686:	2301      	movs	r3, #1
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	2300      	movs	r3, #0
 800368c:	211e      	movs	r1, #30
 800368e:	200a      	movs	r0, #10
 8003690:	f7fd fe10 	bl	80012b4 <GFX_DrawString>
               sprintf(Temp, "ON");
 8003694:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003698:	494a      	ldr	r1, [pc, #296]	; (80037c4 <MENU_RunningFunction+0x17c4>)
 800369a:	4618      	mov	r0, r3
 800369c:	f008 fb60 	bl	800bd60 <sprintf_>
               GFX_DrawString(100, 30, Temp, WHITE, 0, OLED);
 80036a0:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80036a4:	2300      	movs	r3, #0
 80036a6:	9301      	str	r3, [sp, #4]
 80036a8:	2300      	movs	r3, #0
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	2301      	movs	r3, #1
 80036ae:	211e      	movs	r1, #30
 80036b0:	2064      	movs	r0, #100	; 0x64
 80036b2:	f7fd fdff 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 80036b6:	f009 f857 	bl	800c768 <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 80036ba:	4b3a      	ldr	r3, [pc, #232]	; (80037a4 <MENU_RunningFunction+0x17a4>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4618      	mov	r0, r3
 80036c0:	f011 fbd7 	bl	8014e72 <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 80036c4:	4b36      	ldr	r3, [pc, #216]	; (80037a0 <MENU_RunningFunction+0x17a0>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f011 fbd2 	bl	8014e72 <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 80036ce:	4b33      	ldr	r3, [pc, #204]	; (800379c <MENU_RunningFunction+0x179c>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f011 fbcd 	bl	8014e72 <osMutexRelease>
 80036d8:	e053      	b.n	8003782 <MENU_RunningFunction+0x1782>
            }
            else
            {
               osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 80036da:	4b30      	ldr	r3, [pc, #192]	; (800379c <MENU_RunningFunction+0x179c>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f04f 31ff 	mov.w	r1, #4294967295
 80036e2:	4618      	mov	r0, r3
 80036e4:	f011 fb7a 	bl	8014ddc <osMutexAcquire>
               osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 80036e8:	4b2d      	ldr	r3, [pc, #180]	; (80037a0 <MENU_RunningFunction+0x17a0>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f04f 31ff 	mov.w	r1, #4294967295
 80036f0:	4618      	mov	r0, r3
 80036f2:	f011 fb73 	bl	8014ddc <osMutexAcquire>
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80036f6:	4b2b      	ldr	r3, [pc, #172]	; (80037a4 <MENU_RunningFunction+0x17a4>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f04f 31ff 	mov.w	r1, #4294967295
 80036fe:	4618      	mov	r0, r3
 8003700:	f011 fb6c 	bl	8014ddc <osMutexAcquire>
               ssd1306_clear();
 8003704:	f009 f85c 	bl	800c7c0 <ssd1306_clear>
               sprintf(Temp, "OFF");
 8003708:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800370c:	492c      	ldr	r1, [pc, #176]	; (80037c0 <MENU_RunningFunction+0x17c0>)
 800370e:	4618      	mov	r0, r3
 8003710:	f008 fb26 	bl	800bd60 <sprintf_>
               GFX_DrawString(10, 30, Temp, WHITE, 0, OLED);
 8003714:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003718:	2300      	movs	r3, #0
 800371a:	9301      	str	r3, [sp, #4]
 800371c:	2300      	movs	r3, #0
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	2301      	movs	r3, #1
 8003722:	211e      	movs	r1, #30
 8003724:	200a      	movs	r0, #10
 8003726:	f7fd fdc5 	bl	80012b4 <GFX_DrawString>
               sprintf(Temp, "ON");
 800372a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800372e:	4925      	ldr	r1, [pc, #148]	; (80037c4 <MENU_RunningFunction+0x17c4>)
 8003730:	4618      	mov	r0, r3
 8003732:	f008 fb15 	bl	800bd60 <sprintf_>
               GFX_DrawFillRectangle(95, 25, 25, 18, WHITE, OLED);
 8003736:	2300      	movs	r3, #0
 8003738:	9301      	str	r3, [sp, #4]
 800373a:	2301      	movs	r3, #1
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	2312      	movs	r3, #18
 8003740:	2219      	movs	r2, #25
 8003742:	2119      	movs	r1, #25
 8003744:	205f      	movs	r0, #95	; 0x5f
 8003746:	f7fd ff26 	bl	8001596 <GFX_DrawFillRectangle>
               GFX_DrawString(100, 30, Temp, BLACK, 1, OLED);
 800374a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800374e:	2300      	movs	r3, #0
 8003750:	9301      	str	r3, [sp, #4]
 8003752:	2301      	movs	r3, #1
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	2300      	movs	r3, #0
 8003758:	211e      	movs	r1, #30
 800375a:	2064      	movs	r0, #100	; 0x64
 800375c:	f7fd fdaa 	bl	80012b4 <GFX_DrawString>
               ssd1306_display();
 8003760:	f009 f802 	bl	800c768 <ssd1306_display>
               osMutexRelease(SPI1MutexHandle);
 8003764:	4b0f      	ldr	r3, [pc, #60]	; (80037a4 <MENU_RunningFunction+0x17a4>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4618      	mov	r0, r3
 800376a:	f011 fb82 	bl	8014e72 <osMutexRelease>
               osMutexRelease(SSD1306MutexHandle);
 800376e:	4b0c      	ldr	r3, [pc, #48]	; (80037a0 <MENU_RunningFunction+0x17a0>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4618      	mov	r0, r3
 8003774:	f011 fb7d 	bl	8014e72 <osMutexRelease>
               osMutexRelease(ScreensDcMutexHandle);
 8003778:	4b08      	ldr	r3, [pc, #32]	; (800379c <MENU_RunningFunction+0x179c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4618      	mov	r0, r3
 800377e:	f011 fb78 	bl	8014e72 <osMutexRelease>
            }
            osDelay(100);
 8003782:	2064      	movs	r0, #100	; 0x64
 8003784:	f011 f8dc 	bl	8014940 <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 8003788:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800378c:	4809      	ldr	r0, [pc, #36]	; (80037b4 <MENU_RunningFunction+0x17b4>)
 800378e:	f00a fb85 	bl	800de9c <HAL_GPIO_ReadPin>
 8003792:	4603      	mov	r3, r0
 8003794:	2b01      	cmp	r3, #1
 8003796:	f43f af44 	beq.w	8003622 <MENU_RunningFunction+0x1622>
         }

         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 800379a:	e018      	b.n	80037ce <MENU_RunningFunction+0x17ce>
 800379c:	20004034 	.word	0x20004034
 80037a0:	20004038 	.word	0x20004038
 80037a4:	2000403c 	.word	0x2000403c
 80037a8:	0801ef30 	.word	0x0801ef30
 80037ac:	0801f028 	.word	0x0801f028
 80037b0:	0801f02c 	.word	0x0801f02c
 80037b4:	48000400 	.word	0x48000400
 80037b8:	40000c00 	.word	0x40000c00
 80037bc:	0801f030 	.word	0x0801f030
 80037c0:	0801f040 	.word	0x0801f040
 80037c4:	0801f044 	.word	0x0801f044
         {
            osDelay(100);
 80037c8:	2064      	movs	r0, #100	; 0x64
 80037ca:	f011 f8b9 	bl	8014940 <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 80037ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80037d2:	4813      	ldr	r0, [pc, #76]	; (8003820 <MENU_RunningFunction+0x1820>)
 80037d4:	f00a fb62 	bl	800de9c <HAL_GPIO_ReadPin>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d0f4      	beq.n	80037c8 <MENU_RunningFunction+0x17c8>
         }
         if((TIM5->CNT / 4) % 2 == 1)
 80037de:	4b11      	ldr	r3, [pc, #68]	; (8003824 <MENU_RunningFunction+0x1824>)
 80037e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e2:	089b      	lsrs	r3, r3, #2
 80037e4:	f003 0301 	and.w	r3, r3, #1
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d106      	bne.n	80037fa <MENU_RunningFunction+0x17fa>
         {
            osEventFlagsSet(C3V1FlagsHandle, E_PAPIER_DARK_MODE);
 80037ec:	4b0e      	ldr	r3, [pc, #56]	; (8003828 <MENU_RunningFunction+0x1828>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2140      	movs	r1, #64	; 0x40
 80037f2:	4618      	mov	r0, r3
 80037f4:	f011 f990 	bl	8014b18 <osEventFlagsSet>
         }
         else
         {
            osEventFlagsClear(C3V1FlagsHandle, E_PAPIER_DARK_MODE);
         }
         break;
 80037f8:	e00b      	b.n	8003812 <MENU_RunningFunction+0x1812>
            osEventFlagsClear(C3V1FlagsHandle, E_PAPIER_DARK_MODE);
 80037fa:	4b0b      	ldr	r3, [pc, #44]	; (8003828 <MENU_RunningFunction+0x1828>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2140      	movs	r1, #64	; 0x40
 8003800:	4618      	mov	r0, r3
 8003802:	f011 f9cd 	bl	8014ba0 <osEventFlagsClear>
         break;
 8003806:	e004      	b.n	8003812 <MENU_RunningFunction+0x1812>
      }
      default:
      {
         break;
 8003808:	bf00      	nop
 800380a:	e002      	b.n	8003812 <MENU_RunningFunction+0x1812>
         break;
 800380c:	bf00      	nop
 800380e:	e000      	b.n	8003812 <MENU_RunningFunction+0x1812>
         break;
 8003810:	bf00      	nop
      }
   }

   Menu.NewEvent = MENU_EVENT_END;
 8003812:	4b06      	ldr	r3, [pc, #24]	; (800382c <MENU_RunningFunction+0x182c>)
 8003814:	2203      	movs	r2, #3
 8003816:	725a      	strb	r2, [r3, #9]
}
 8003818:	bf00      	nop
 800381a:	37b8      	adds	r7, #184	; 0xb8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	48000400 	.word	0x48000400
 8003824:	40000c00 	.word	0x40000c00
 8003828:	20004054 	.word	0x20004054
 800382c:	200002a4 	.word	0x200002a4

08003830 <MENU_EndFunction>:

static void MENU_EndFunction(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
   Menu.ButtonCnt = 0;
 8003834:	4b0a      	ldr	r3, [pc, #40]	; (8003860 <MENU_EndFunction+0x30>)
 8003836:	2200      	movs	r2, #0
 8003838:	605a      	str	r2, [r3, #4]
   Menu.ChoiseCnt = 0;
 800383a:	4b09      	ldr	r3, [pc, #36]	; (8003860 <MENU_EndFunction+0x30>)
 800383c:	2200      	movs	r2, #0
 800383e:	601a      	str	r2, [r3, #0]
   Menu.NewEvent  = MENU_EVENT_NOTHING;
 8003840:	4b07      	ldr	r3, [pc, #28]	; (8003860 <MENU_EndFunction+0x30>)
 8003842:	2200      	movs	r2, #0
 8003844:	725a      	strb	r2, [r3, #9]
   Menu.f         = 0;
 8003846:	4b06      	ldr	r3, [pc, #24]	; (8003860 <MENU_EndFunction+0x30>)
 8003848:	2200      	movs	r2, #0
 800384a:	729a      	strb	r2, [r3, #10]
   TIM5->CNT      = 0;
 800384c:	4b05      	ldr	r3, [pc, #20]	; (8003864 <MENU_EndFunction+0x34>)
 800384e:	2200      	movs	r2, #0
 8003850:	625a      	str	r2, [r3, #36]	; 0x24
   osMutexRelease(MenuMutexHandle);
 8003852:	4b05      	ldr	r3, [pc, #20]	; (8003868 <MENU_EndFunction+0x38>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4618      	mov	r0, r3
 8003858:	f011 fb0b 	bl	8014e72 <osMutexRelease>
}
 800385c:	bf00      	nop
 800385e:	bd80      	pop	{r7, pc}
 8003860:	200002a4 	.word	0x200002a4
 8003864:	40000c00 	.word	0x40000c00
 8003868:	20004048 	.word	0x20004048

0800386c <WS2812_SetPixel>:

#include "WS2812b.h"
#include "tim.h"
uint16_t WsBuffer[11 * 24] = { 0 };
void WS2812_SetPixel(uint8_t r, uint8_t g, uint8_t b)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af00      	add	r7, sp, #0
 8003872:	4603      	mov	r3, r0
 8003874:	71fb      	strb	r3, [r7, #7]
 8003876:	460b      	mov	r3, r1
 8003878:	71bb      	strb	r3, [r7, #6]
 800387a:	4613      	mov	r3, r2
 800387c:	717b      	strb	r3, [r7, #5]

   for(int8_t k = 7, i = 0; k >= 0; k--, i++)
 800387e:	2307      	movs	r3, #7
 8003880:	75fb      	strb	r3, [r7, #23]
 8003882:	2300      	movs	r3, #0
 8003884:	75bb      	strb	r3, [r7, #22]
 8003886:	e023      	b.n	80038d0 <WS2812_SetPixel+0x64>
   {

      if((r & (1 << k)) == 0)
 8003888:	79fa      	ldrb	r2, [r7, #7]
 800388a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800388e:	fa42 f303 	asr.w	r3, r2, r3
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b00      	cmp	r3, #0
 8003898:	d107      	bne.n	80038aa <WS2812_SetPixel+0x3e>
         WsBuffer[10 * 24 + i] = zero;
 800389a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800389e:	33f0      	adds	r3, #240	; 0xf0
 80038a0:	4a4e      	ldr	r2, [pc, #312]	; (80039dc <WS2812_SetPixel+0x170>)
 80038a2:	2135      	movs	r1, #53	; 0x35
 80038a4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80038a8:	e006      	b.n	80038b8 <WS2812_SetPixel+0x4c>
      else
         WsBuffer[10 * 24 + i] = one;
 80038aa:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80038ae:	33f0      	adds	r3, #240	; 0xf0
 80038b0:	4a4a      	ldr	r2, [pc, #296]	; (80039dc <WS2812_SetPixel+0x170>)
 80038b2:	2160      	movs	r1, #96	; 0x60
 80038b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(int8_t k = 7, i = 0; k >= 0; k--, i++)
 80038b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	3b01      	subs	r3, #1
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	75fb      	strb	r3, [r7, #23]
 80038c4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	3301      	adds	r3, #1
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	75bb      	strb	r3, [r7, #22]
 80038d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	dad7      	bge.n	8003888 <WS2812_SetPixel+0x1c>
   }
   for(int8_t k = 7, i = 0; k >= 0; k--, i++)
 80038d8:	2307      	movs	r3, #7
 80038da:	757b      	strb	r3, [r7, #21]
 80038dc:	2300      	movs	r3, #0
 80038de:	753b      	strb	r3, [r7, #20]
 80038e0:	e023      	b.n	800392a <WS2812_SetPixel+0xbe>
   {

      if((g & (1 << k)) == 0)
 80038e2:	79ba      	ldrb	r2, [r7, #6]
 80038e4:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80038e8:	fa42 f303 	asr.w	r3, r2, r3
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d107      	bne.n	8003904 <WS2812_SetPixel+0x98>
         WsBuffer[10 * 24 + i + 8] = zero;
 80038f4:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80038f8:	33f8      	adds	r3, #248	; 0xf8
 80038fa:	4a38      	ldr	r2, [pc, #224]	; (80039dc <WS2812_SetPixel+0x170>)
 80038fc:	2135      	movs	r1, #53	; 0x35
 80038fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003902:	e006      	b.n	8003912 <WS2812_SetPixel+0xa6>
      else
         WsBuffer[10 * 24 + i + 8] = one;
 8003904:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003908:	33f8      	adds	r3, #248	; 0xf8
 800390a:	4a34      	ldr	r2, [pc, #208]	; (80039dc <WS2812_SetPixel+0x170>)
 800390c:	2160      	movs	r1, #96	; 0x60
 800390e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(int8_t k = 7, i = 0; k >= 0; k--, i++)
 8003912:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8003916:	b2db      	uxtb	r3, r3
 8003918:	3b01      	subs	r3, #1
 800391a:	b2db      	uxtb	r3, r3
 800391c:	757b      	strb	r3, [r7, #21]
 800391e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003922:	b2db      	uxtb	r3, r3
 8003924:	3301      	adds	r3, #1
 8003926:	b2db      	uxtb	r3, r3
 8003928:	753b      	strb	r3, [r7, #20]
 800392a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800392e:	2b00      	cmp	r3, #0
 8003930:	dad7      	bge.n	80038e2 <WS2812_SetPixel+0x76>
   }
   for(int8_t k = 7, i = 0; k >= 0; k--, i++)
 8003932:	2307      	movs	r3, #7
 8003934:	74fb      	strb	r3, [r7, #19]
 8003936:	2300      	movs	r3, #0
 8003938:	74bb      	strb	r3, [r7, #18]
 800393a:	e025      	b.n	8003988 <WS2812_SetPixel+0x11c>
   {

      if((b & (1 << k)) == 0)
 800393c:	797a      	ldrb	r2, [r7, #5]
 800393e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003942:	fa42 f303 	asr.w	r3, r2, r3
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	d108      	bne.n	8003960 <WS2812_SetPixel+0xf4>
         WsBuffer[10 * 24 + i + 16] = zero;
 800394e:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8003952:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003956:	4a21      	ldr	r2, [pc, #132]	; (80039dc <WS2812_SetPixel+0x170>)
 8003958:	2135      	movs	r1, #53	; 0x35
 800395a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800395e:	e007      	b.n	8003970 <WS2812_SetPixel+0x104>
      else
         WsBuffer[10 * 24 + i + 16] = one;
 8003960:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8003964:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003968:	4a1c      	ldr	r2, [pc, #112]	; (80039dc <WS2812_SetPixel+0x170>)
 800396a:	2160      	movs	r1, #96	; 0x60
 800396c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(int8_t k = 7, i = 0; k >= 0; k--, i++)
 8003970:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003974:	b2db      	uxtb	r3, r3
 8003976:	3b01      	subs	r3, #1
 8003978:	b2db      	uxtb	r3, r3
 800397a:	74fb      	strb	r3, [r7, #19]
 800397c:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8003980:	b2db      	uxtb	r3, r3
 8003982:	3301      	adds	r3, #1
 8003984:	b2db      	uxtb	r3, r3
 8003986:	74bb      	strb	r3, [r7, #18]
 8003988:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800398c:	2b00      	cmp	r3, #0
 800398e:	dad5      	bge.n	800393c <WS2812_SetPixel+0xd0>
   }
   for(int i = 0; i < 240; i++)
 8003990:	2300      	movs	r3, #0
 8003992:	60fb      	str	r3, [r7, #12]
 8003994:	e007      	b.n	80039a6 <WS2812_SetPixel+0x13a>
   {
      WsBuffer[i] = 0;
 8003996:	4a11      	ldr	r2, [pc, #68]	; (80039dc <WS2812_SetPixel+0x170>)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2100      	movs	r1, #0
 800399c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(int i = 0; i < 240; i++)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	3301      	adds	r3, #1
 80039a4:	60fb      	str	r3, [r7, #12]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2bef      	cmp	r3, #239	; 0xef
 80039aa:	ddf4      	ble.n	8003996 <WS2812_SetPixel+0x12a>
   }
   HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, WsBuffer, 11 * 24);
 80039ac:	f44f 7384 	mov.w	r3, #264	; 0x108
 80039b0:	4a0a      	ldr	r2, [pc, #40]	; (80039dc <WS2812_SetPixel+0x170>)
 80039b2:	2100      	movs	r1, #0
 80039b4:	480a      	ldr	r0, [pc, #40]	; (80039e0 <WS2812_SetPixel+0x174>)
 80039b6:	f00d fc25 	bl	8011204 <HAL_TIM_PWM_Start_DMA>
   while(HAL_DMA_STATE_READY != HAL_DMA_GetState(htim1.hdma[1]))
 80039ba:	bf00      	nop
 80039bc:	4b08      	ldr	r3, [pc, #32]	; (80039e0 <WS2812_SetPixel+0x174>)
 80039be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c0:	4618      	mov	r0, r3
 80039c2:	f00a f82a 	bl	800da1a <HAL_DMA_GetState>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d1f7      	bne.n	80039bc <WS2812_SetPixel+0x150>
   {
   }
   HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 80039cc:	2100      	movs	r1, #0
 80039ce:	4804      	ldr	r0, [pc, #16]	; (80039e0 <WS2812_SetPixel+0x174>)
 80039d0:	f00d fe38 	bl	8011644 <HAL_TIM_PWM_Stop_DMA>
}
 80039d4:	bf00      	nop
 80039d6:	3718      	adds	r7, #24
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	200002b0 	.word	0x200002b0
 80039e0:	20004650 	.word	0x20004650

080039e4 <BME280_CsLow>:
#include "main.h"

#include "bme280_spi.h"

void BME280_CsLow(BME280_t *bme)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(bme->bme280_CsPort, bme->bme280_CsPin, 0);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6858      	ldr	r0, [r3, #4]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f4:	2200      	movs	r2, #0
 80039f6:	4619      	mov	r1, r3
 80039f8:	f00a fa68 	bl	800decc <HAL_GPIO_WritePin>
}
 80039fc:	bf00      	nop
 80039fe:	3708      	adds	r7, #8
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <BME280_CsHigh>:
void BME280_CsHigh(BME280_t *bme)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(bme->bme280_CsPort, bme->bme280_CsPin, 1);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6858      	ldr	r0, [r3, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a14:	2201      	movs	r2, #1
 8003a16:	4619      	mov	r1, r3
 8003a18:	f00a fa58 	bl	800decc <HAL_GPIO_WritePin>
}
 8003a1c:	bf00      	nop
 8003a1e:	3708      	adds	r7, #8
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <BME280_Read8>:
uint8_t BME280_Read8(BME280_t *bme, uint8_t addr)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	70fb      	strb	r3, [r7, #3]
   addr |= 128;
 8003a30:	78fb      	ldrb	r3, [r7, #3]
 8003a32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	70fb      	strb	r3, [r7, #3]
   uint8_t data;
   BME280_CsLow(bme);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f7ff ffd2 	bl	80039e4 <BME280_CsLow>
   HAL_SPI_Transmit(bme->bme_spi, &addr, 1, BME_MAX_TIMEOUT);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6818      	ldr	r0, [r3, #0]
 8003a44:	1cf9      	adds	r1, r7, #3
 8003a46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f00c fc43 	bl	80102d6 <HAL_SPI_Transmit>
   HAL_SPI_Receive(bme->bme_spi, &data, 1, BME_MAX_TIMEOUT);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6818      	ldr	r0, [r3, #0]
 8003a54:	f107 010f 	add.w	r1, r7, #15
 8003a58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f00c fda8 	bl	80105b2 <HAL_SPI_Receive>
   BME280_CsHigh(bme);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f7ff ffce 	bl	8003a04 <BME280_CsHigh>
   return data;
 8003a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <BME280_Write8>:
void BME280_Write8(BME280_t *bme, uint8_t addr, uint8_t data)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b084      	sub	sp, #16
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	70fb      	strb	r3, [r7, #3]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	70bb      	strb	r3, [r7, #2]
   BME280_CsLow(bme);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7ff ffae 	bl	80039e4 <BME280_CsLow>
   addr &= 127;
 8003a88:	78fb      	ldrb	r3, [r7, #3]
 8003a8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a8e:	70fb      	strb	r3, [r7, #3]
   uint8_t Data_ToSend[2];
   Data_ToSend[0] = addr;
 8003a90:	78fb      	ldrb	r3, [r7, #3]
 8003a92:	733b      	strb	r3, [r7, #12]
   Data_ToSend[1] = data;
 8003a94:	78bb      	ldrb	r3, [r7, #2]
 8003a96:	737b      	strb	r3, [r7, #13]
   HAL_SPI_Transmit(bme->bme_spi, Data_ToSend, 2, BME_MAX_TIMEOUT);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6818      	ldr	r0, [r3, #0]
 8003a9c:	f107 010c 	add.w	r1, r7, #12
 8003aa0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003aa4:	2202      	movs	r2, #2
 8003aa6:	f00c fc16 	bl	80102d6 <HAL_SPI_Transmit>
   BME280_CsHigh(bme);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7ff ffaa 	bl	8003a04 <BME280_CsHigh>
}
 8003ab0:	bf00      	nop
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <BME280_Read16LE>:
static uint16_t BME280_Read16LE(BME280_t *bme, uint8_t address)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	70fb      	strb	r3, [r7, #3]
   uint8_t data[2];
   data[0] = BME280_Read8(bme, address);
 8003ac4:	78fb      	ldrb	r3, [r7, #3]
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f7ff ffab 	bl	8003a24 <BME280_Read8>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	733b      	strb	r3, [r7, #12]
   data[1] = BME280_Read8(bme, address + 1);
 8003ad2:	78fb      	ldrb	r3, [r7, #3]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	4619      	mov	r1, r3
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7ff ffa2 	bl	8003a24 <BME280_Read8>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	737b      	strb	r3, [r7, #13]
   return ((data[1] << 8) | data[0]);
 8003ae4:	7b7b      	ldrb	r3, [r7, #13]
 8003ae6:	021b      	lsls	r3, r3, #8
 8003ae8:	b21a      	sxth	r2, r3
 8003aea:	7b3b      	ldrb	r3, [r7, #12]
 8003aec:	b21b      	sxth	r3, r3
 8003aee:	4313      	orrs	r3, r2
 8003af0:	b21b      	sxth	r3, r3
 8003af2:	b29b      	uxth	r3, r3
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <BME280_Read16>:
static uint16_t BME280_Read16(BME280_t *bme, uint8_t address)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	460b      	mov	r3, r1
 8003b06:	70fb      	strb	r3, [r7, #3]
   uint8_t data[2];
   data[0] = BME280_Read8(bme, address);
 8003b08:	78fb      	ldrb	r3, [r7, #3]
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f7ff ff89 	bl	8003a24 <BME280_Read8>
 8003b12:	4603      	mov	r3, r0
 8003b14:	733b      	strb	r3, [r7, #12]
   data[1] = BME280_Read8(bme, address + 1);
 8003b16:	78fb      	ldrb	r3, [r7, #3]
 8003b18:	3301      	adds	r3, #1
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7ff ff80 	bl	8003a24 <BME280_Read8>
 8003b24:	4603      	mov	r3, r0
 8003b26:	737b      	strb	r3, [r7, #13]
   return ((data[0] << 8) | data[1]);
 8003b28:	7b3b      	ldrb	r3, [r7, #12]
 8003b2a:	021b      	lsls	r3, r3, #8
 8003b2c:	b21a      	sxth	r2, r3
 8003b2e:	7b7b      	ldrb	r3, [r7, #13]
 8003b30:	b21b      	sxth	r3, r3
 8003b32:	4313      	orrs	r3, r2
 8003b34:	b21b      	sxth	r3, r3
 8003b36:	b29b      	uxth	r3, r3
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <BME280_Read24>:
uint32_t BME280_Read24(BME280_t *bme, uint8_t addr)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	460b      	mov	r3, r1
 8003b4a:	70fb      	strb	r3, [r7, #3]
   addr |= 128;
 8003b4c:	78fb      	ldrb	r3, [r7, #3]
 8003b4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	70fb      	strb	r3, [r7, #3]
   uint8_t data[3];
   BME280_CsLow(bme);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f7ff ff44 	bl	80039e4 <BME280_CsLow>
   HAL_SPI_Transmit(bme->bme_spi, &addr, 1, BME_MAX_TIMEOUT);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6818      	ldr	r0, [r3, #0]
 8003b60:	1cf9      	adds	r1, r7, #3
 8003b62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b66:	2201      	movs	r2, #1
 8003b68:	f00c fbb5 	bl	80102d6 <HAL_SPI_Transmit>
   HAL_SPI_Receive(bme->bme_spi, data, 3, BME_MAX_TIMEOUT);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6818      	ldr	r0, [r3, #0]
 8003b70:	f107 010c 	add.w	r1, r7, #12
 8003b74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b78:	2203      	movs	r2, #3
 8003b7a:	f00c fd1a 	bl	80105b2 <HAL_SPI_Receive>
   BME280_CsHigh(bme);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7ff ff40 	bl	8003a04 <BME280_CsHigh>
   return ((data[0] << 16) | (data[1] << 8) | data[2]);
 8003b84:	7b3b      	ldrb	r3, [r7, #12]
 8003b86:	041a      	lsls	r2, r3, #16
 8003b88:	7b7b      	ldrb	r3, [r7, #13]
 8003b8a:	021b      	lsls	r3, r3, #8
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	7bba      	ldrb	r2, [r7, #14]
 8003b90:	4313      	orrs	r3, r2
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3710      	adds	r7, #16
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
	...

08003b9c <BME280_Read_temp>:
static float BME280_Read_temp(BME280_t *bme)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
   int32_t var1, var2;
   int32_t adc_T = BME280_Read24(bme, BME280_TEMPDATA);
 8003ba4:	21fa      	movs	r1, #250	; 0xfa
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f7ff ffca 	bl	8003b40 <BME280_Read24>
 8003bac:	4603      	mov	r3, r0
 8003bae:	617b      	str	r3, [r7, #20]
   if(adc_T == 0x800000)
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bb6:	d102      	bne.n	8003bbe <BME280_Read_temp+0x22>
      return -99;
 8003bb8:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003c44 <BME280_Read_temp+0xa8>
 8003bbc:	e03b      	b.n	8003c36 <BME280_Read_temp+0x9a>

   adc_T >>= 4;
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	111b      	asrs	r3, r3, #4
 8003bc2:	617b      	str	r3, [r7, #20]

   var1 = ((((adc_T >> 3) - ((int32_t)bme->t1 << 1))) * ((int32_t)bme->t2)) >> 11;
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	10da      	asrs	r2, r3, #3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8003bd6:	fb02 f303 	mul.w	r3, r2, r3
 8003bda:	12db      	asrs	r3, r3, #11
 8003bdc:	613b      	str	r3, [r7, #16]

   var2 = (((((adc_T >> 4) - ((int32_t)bme->t1)) * ((adc_T >> 4) - ((int32_t)bme->t1))) >> 12) * ((int32_t)bme->t3)) >> 14;
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	111b      	asrs	r3, r3, #4
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8003be6:	1a9b      	subs	r3, r3, r2
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	1112      	asrs	r2, r2, #4
 8003bec:	6879      	ldr	r1, [r7, #4]
 8003bee:	8cc9      	ldrh	r1, [r1, #38]	; 0x26
 8003bf0:	1a52      	subs	r2, r2, r1
 8003bf2:	fb02 f303 	mul.w	r3, r2, r3
 8003bf6:	131b      	asrs	r3, r3, #12
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8003bfe:	fb02 f303 	mul.w	r3, r2, r3
 8003c02:	139b      	asrs	r3, r3, #14
 8003c04:	60fb      	str	r3, [r7, #12]

   bme->t_fine = var1 + var2;
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	441a      	add	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	62da      	str	r2, [r3, #44]	; 0x2c

   float T = (bme->t_fine * 5 + 128) >> 8;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c14:	4613      	mov	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	4413      	add	r3, r2
 8003c1a:	3380      	adds	r3, #128	; 0x80
 8003c1c:	121b      	asrs	r3, r3, #8
 8003c1e:	ee07 3a90 	vmov	s15, r3
 8003c22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c26:	edc7 7a02 	vstr	s15, [r7, #8]
   return T / 100;
 8003c2a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c2e:	eddf 6a06 	vldr	s13, [pc, #24]	; 8003c48 <BME280_Read_temp+0xac>
 8003c32:	ee87 7aa6 	vdiv.f32	s14, s15, s13

   return -99;
}
 8003c36:	eef0 7a47 	vmov.f32	s15, s14
 8003c3a:	eeb0 0a67 	vmov.f32	s0, s15
 8003c3e:	3718      	adds	r7, #24
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	c2c60000 	.word	0xc2c60000
 8003c48:	42c80000 	.word	0x42c80000

08003c4c <BME280_Read_hum>:
static float BME280_Read_hum(BME280_t *bme)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]

   int32_t adc_H = BME280_Read16(bme, BME280_HUMIDDATA);
 8003c54:	21fd      	movs	r1, #253	; 0xfd
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f7ff ff50 	bl	8003afc <BME280_Read16>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	617b      	str	r3, [r7, #20]
   if(adc_H == 0x8000) // value in case humidity measurement was disabled
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c66:	d102      	bne.n	8003c6e <BME280_Read_hum+0x22>
      return -99;      // error
 8003c68:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8003d3c <BME280_Read_hum+0xf0>
 8003c6c:	e05f      	b.n	8003d2e <BME280_Read_hum+0xe2>
   int32_t v_x1_u32r;

   v_x1_u32r = (bme->t_fine - ((int32_t)76800));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c72:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8003c76:	613b      	str	r3, [r7, #16]

   v_x1_u32r = (((((adc_H << 14) - (((int32_t)bme->h4) << 20) - (((int32_t)bme->h5) * v_x1_u32r)) + ((int32_t)16384)) >> 15)
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	039a      	lsls	r2, r3, #14
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8003c82:	051b      	lsls	r3, r3, #20
 8003c84:	1ad2      	subs	r2, r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	fb01 f303 	mul.w	r3, r1, r3
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003c9a:	13db      	asrs	r3, r3, #15
                * (((((((v_x1_u32r * ((int32_t)bme->h6)) >> 10) * (((v_x1_u32r * ((int32_t)bme->h3)) >> 11) + ((int32_t)32768))) >> 10)
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	f992 200a 	ldrsb.w	r2, [r2, #10]
 8003ca2:	4611      	mov	r1, r2
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	fb01 f202 	mul.w	r2, r1, r2
 8003caa:	1292      	asrs	r2, r2, #10
 8003cac:	6879      	ldr	r1, [r7, #4]
 8003cae:	7a49      	ldrb	r1, [r1, #9]
 8003cb0:	4608      	mov	r0, r1
 8003cb2:	6939      	ldr	r1, [r7, #16]
 8003cb4:	fb00 f101 	mul.w	r1, r0, r1
 8003cb8:	12c9      	asrs	r1, r1, #11
 8003cba:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8003cbe:	fb01 f202 	mul.w	r2, r1, r2
 8003cc2:	1292      	asrs	r2, r2, #10
                     + ((int32_t)2097152))
 8003cc4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
                        * ((int32_t)bme->h2)
 8003cc8:	6879      	ldr	r1, [r7, #4]
 8003cca:	f9b1 1020 	ldrsh.w	r1, [r1, #32]
 8003cce:	fb01 f202 	mul.w	r2, r1, r2
                    + 8192)
 8003cd2:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
                   >> 14));
 8003cd6:	1392      	asrs	r2, r2, #14
   v_x1_u32r = (((((adc_H << 14) - (((int32_t)bme->h4) << 20) - (((int32_t)bme->h5) * v_x1_u32r)) + ((int32_t)16384)) >> 15)
 8003cd8:	fb02 f303 	mul.w	r3, r2, r3
 8003cdc:	613b      	str	r3, [r7, #16]

   v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) * ((int32_t)bme->h1)) >> 4));
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	13db      	asrs	r3, r3, #15
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	13d2      	asrs	r2, r2, #15
 8003ce6:	fb02 f303 	mul.w	r3, r2, r3
 8003cea:	11db      	asrs	r3, r3, #7
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	7a12      	ldrb	r2, [r2, #8]
 8003cf0:	fb02 f303 	mul.w	r3, r2, r3
 8003cf4:	111b      	asrs	r3, r3, #4
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	613b      	str	r3, [r7, #16]

   v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003d02:	613b      	str	r3, [r7, #16]
   v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8003d0a:	bfa8      	it	ge
 8003d0c:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8003d10:	613b      	str	r3, [r7, #16]
   float h   = (v_x1_u32r >> 12);
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	131b      	asrs	r3, r3, #12
 8003d16:	ee07 3a90 	vmov	s15, r3
 8003d1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d1e:	edc7 7a03 	vstr	s15, [r7, #12]
   return h / 1024.0;
 8003d22:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d26:	eddf 6a06 	vldr	s13, [pc, #24]	; 8003d40 <BME280_Read_hum+0xf4>
 8003d2a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
}
 8003d2e:	eef0 7a47 	vmov.f32	s15, s14
 8003d32:	eeb0 0a67 	vmov.f32	s0, s15
 8003d36:	3718      	adds	r7, #24
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	c2c60000 	.word	0xc2c60000
 8003d40:	44800000 	.word	0x44800000

08003d44 <BME280_Read_press>:
static float BME280_Read_press(BME280_t *bme)
{
 8003d44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d48:	b0cc      	sub	sp, #304	; 0x130
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
   int64_t var1, var2, p;

   // Must be done first to get the t_fine variable set up

   int32_t adc_P = BME280_Read24(bme, BME280_PRESSUREDATA);
 8003d50:	21f7      	movs	r1, #247	; 0xf7
 8003d52:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8003d56:	f7ff fef3 	bl	8003b40 <BME280_Read24>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   adc_P >>= 4;
 8003d60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003d64:	111b      	asrs	r3, r3, #4
 8003d66:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

   var1 = ((int64_t)bme->t_fine) - 128000;
 8003d6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d70:	17da      	asrs	r2, r3, #31
 8003d72:	4698      	mov	r8, r3
 8003d74:	4691      	mov	r9, r2
 8003d76:	f5b8 33fa 	subs.w	r3, r8, #128000	; 0x1f400
 8003d7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d7c:	f149 33ff 	adc.w	r3, r9, #4294967295
 8003d80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d82:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d86:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
   var2 = var1 * var1 * (int64_t)bme->p6;
 8003d8a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8003d8e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003d92:	fb03 f102 	mul.w	r1, r3, r2
 8003d96:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8003d9a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003d9e:	fb02 f303 	mul.w	r3, r2, r3
 8003da2:	18ca      	adds	r2, r1, r3
 8003da4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003da8:	fba3 4503 	umull	r4, r5, r3, r3
 8003dac:	1953      	adds	r3, r2, r5
 8003dae:	461d      	mov	r5, r3
 8003db0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003db4:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8003db8:	b21b      	sxth	r3, r3
 8003dba:	17da      	asrs	r2, r3, #31
 8003dbc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003dc0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003dc4:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8003dc8:	4603      	mov	r3, r0
 8003dca:	fb03 f205 	mul.w	r2, r3, r5
 8003dce:	460b      	mov	r3, r1
 8003dd0:	fb04 f303 	mul.w	r3, r4, r3
 8003dd4:	4413      	add	r3, r2
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	fba4 ab02 	umull	sl, fp, r4, r2
 8003ddc:	445b      	add	r3, fp
 8003dde:	469b      	mov	fp, r3
 8003de0:	e9c7 ab46 	strd	sl, fp, [r7, #280]	; 0x118
 8003de4:	e9c7 ab46 	strd	sl, fp, [r7, #280]	; 0x118
   var2 = var2 + ((var1 * (int64_t)bme->p5) << 17);
 8003de8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dec:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003df0:	b21b      	sxth	r3, r3
 8003df2:	17da      	asrs	r2, r3, #31
 8003df4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003df8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003dfc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003e00:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8003e04:	462a      	mov	r2, r5
 8003e06:	fb02 f203 	mul.w	r2, r2, r3
 8003e0a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003e0e:	4621      	mov	r1, r4
 8003e10:	fb01 f303 	mul.w	r3, r1, r3
 8003e14:	441a      	add	r2, r3
 8003e16:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003e1a:	4621      	mov	r1, r4
 8003e1c:	fba3 1301 	umull	r1, r3, r3, r1
 8003e20:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003e24:	460b      	mov	r3, r1
 8003e26:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e2e:	18d3      	adds	r3, r2, r3
 8003e30:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003e34:	f04f 0000 	mov.w	r0, #0
 8003e38:	f04f 0100 	mov.w	r1, #0
 8003e3c:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8003e40:	462b      	mov	r3, r5
 8003e42:	0459      	lsls	r1, r3, #17
 8003e44:	4623      	mov	r3, r4
 8003e46:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8003e4a:	4623      	mov	r3, r4
 8003e4c:	0458      	lsls	r0, r3, #17
 8003e4e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8003e52:	1814      	adds	r4, r2, r0
 8003e54:	643c      	str	r4, [r7, #64]	; 0x40
 8003e56:	414b      	adcs	r3, r1
 8003e58:	647b      	str	r3, [r7, #68]	; 0x44
 8003e5a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003e5e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
   var2 = var2 + (((int64_t)bme->p4) << 35);
 8003e62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e66:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003e6a:	b21b      	sxth	r3, r3
 8003e6c:	17da      	asrs	r2, r3, #31
 8003e6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e72:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8003e76:	f04f 0000 	mov.w	r0, #0
 8003e7a:	f04f 0100 	mov.w	r1, #0
 8003e7e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003e82:	00d9      	lsls	r1, r3, #3
 8003e84:	2000      	movs	r0, #0
 8003e86:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8003e8a:	1814      	adds	r4, r2, r0
 8003e8c:	63bc      	str	r4, [r7, #56]	; 0x38
 8003e8e:	414b      	adcs	r3, r1
 8003e90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e92:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8003e96:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
   var1 = ((var1 * var1 * (int64_t)bme->p3) >> 8) + ((var1 * (int64_t)bme->p2) << 12);
 8003e9a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8003e9e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003ea2:	fb03 f102 	mul.w	r1, r3, r2
 8003ea6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8003eaa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003eae:	fb02 f303 	mul.w	r3, r2, r3
 8003eb2:	18ca      	adds	r2, r1, r3
 8003eb4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003eb8:	fba3 1303 	umull	r1, r3, r3, r3
 8003ebc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003ec6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003eca:	18d3      	adds	r3, r2, r3
 8003ecc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003ed0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ed4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003ed8:	b21b      	sxth	r3, r3
 8003eda:	17da      	asrs	r2, r3, #31
 8003edc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003ee0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003ee4:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8003ee8:	462b      	mov	r3, r5
 8003eea:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8003eee:	4642      	mov	r2, r8
 8003ef0:	fb02 f203 	mul.w	r2, r2, r3
 8003ef4:	464b      	mov	r3, r9
 8003ef6:	4621      	mov	r1, r4
 8003ef8:	fb01 f303 	mul.w	r3, r1, r3
 8003efc:	4413      	add	r3, r2
 8003efe:	4622      	mov	r2, r4
 8003f00:	4641      	mov	r1, r8
 8003f02:	fba2 1201 	umull	r1, r2, r2, r1
 8003f06:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8003f0a:	460a      	mov	r2, r1
 8003f0c:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8003f10:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8003f14:	4413      	add	r3, r2
 8003f16:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003f1a:	f04f 0000 	mov.w	r0, #0
 8003f1e:	f04f 0100 	mov.w	r1, #0
 8003f22:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8003f26:	4623      	mov	r3, r4
 8003f28:	0a18      	lsrs	r0, r3, #8
 8003f2a:	462b      	mov	r3, r5
 8003f2c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8003f30:	462b      	mov	r3, r5
 8003f32:	1219      	asrs	r1, r3, #8
 8003f34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f38:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003f3c:	b21b      	sxth	r3, r3
 8003f3e:	17da      	asrs	r2, r3, #31
 8003f40:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003f44:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003f48:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003f4c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003f50:	464a      	mov	r2, r9
 8003f52:	fb02 f203 	mul.w	r2, r2, r3
 8003f56:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003f5a:	4644      	mov	r4, r8
 8003f5c:	fb04 f303 	mul.w	r3, r4, r3
 8003f60:	441a      	add	r2, r3
 8003f62:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003f66:	4644      	mov	r4, r8
 8003f68:	fba3 4304 	umull	r4, r3, r3, r4
 8003f6c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003f70:	4623      	mov	r3, r4
 8003f72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f76:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003f7a:	18d3      	adds	r3, r2, r3
 8003f7c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003f80:	f04f 0200 	mov.w	r2, #0
 8003f84:	f04f 0300 	mov.w	r3, #0
 8003f88:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8003f8c:	464c      	mov	r4, r9
 8003f8e:	0323      	lsls	r3, r4, #12
 8003f90:	4644      	mov	r4, r8
 8003f92:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8003f96:	4644      	mov	r4, r8
 8003f98:	0322      	lsls	r2, r4, #12
 8003f9a:	1884      	adds	r4, r0, r2
 8003f9c:	633c      	str	r4, [r7, #48]	; 0x30
 8003f9e:	eb41 0303 	adc.w	r3, r1, r3
 8003fa2:	637b      	str	r3, [r7, #52]	; 0x34
 8003fa4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003fa8:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
   var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)bme->p1) >> 33;
 8003fac:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8003fb0:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8003fb4:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 8003fb8:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8003fbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003fca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003fce:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8003fd2:	462b      	mov	r3, r5
 8003fd4:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8003fd8:	4642      	mov	r2, r8
 8003fda:	fb02 f203 	mul.w	r2, r2, r3
 8003fde:	464b      	mov	r3, r9
 8003fe0:	4621      	mov	r1, r4
 8003fe2:	fb01 f303 	mul.w	r3, r1, r3
 8003fe6:	4413      	add	r3, r2
 8003fe8:	4622      	mov	r2, r4
 8003fea:	4641      	mov	r1, r8
 8003fec:	fba2 1201 	umull	r1, r2, r2, r1
 8003ff0:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8003ff4:	460a      	mov	r2, r1
 8003ff6:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8003ffa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003ffe:	4413      	add	r3, r2
 8004000:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004004:	f04f 0200 	mov.w	r2, #0
 8004008:	f04f 0300 	mov.w	r3, #0
 800400c:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8004010:	4629      	mov	r1, r5
 8004012:	104a      	asrs	r2, r1, #1
 8004014:	4629      	mov	r1, r5
 8004016:	17cb      	asrs	r3, r1, #31
 8004018:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

   if(var1 == 0)
 800401c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8004020:	4313      	orrs	r3, r2
 8004022:	d102      	bne.n	800402a <BME280_Read_press+0x2e6>
   {
      return 0; // avoid exception caused by division by zero
 8004024:	eddf 7aae 	vldr	s15, [pc, #696]	; 80042e0 <BME280_Read_press+0x59c>
 8004028:	e152      	b.n	80042d0 <BME280_Read_press+0x58c>
   }
   p    = 1048576 - adc_P;
 800402a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800402e:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8004032:	17da      	asrs	r2, r3, #31
 8004034:	62bb      	str	r3, [r7, #40]	; 0x28
 8004036:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004038:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800403c:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
   p    = (((p << 31) - var2) * 3125) / var1;
 8004040:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004044:	105b      	asrs	r3, r3, #1
 8004046:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800404a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800404e:	07db      	lsls	r3, r3, #31
 8004050:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004054:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8004058:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800405c:	4621      	mov	r1, r4
 800405e:	1a89      	subs	r1, r1, r2
 8004060:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8004064:	4629      	mov	r1, r5
 8004066:	eb61 0303 	sbc.w	r3, r1, r3
 800406a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800406e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8004072:	4622      	mov	r2, r4
 8004074:	462b      	mov	r3, r5
 8004076:	1891      	adds	r1, r2, r2
 8004078:	6239      	str	r1, [r7, #32]
 800407a:	415b      	adcs	r3, r3
 800407c:	627b      	str	r3, [r7, #36]	; 0x24
 800407e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004082:	4621      	mov	r1, r4
 8004084:	1851      	adds	r1, r2, r1
 8004086:	61b9      	str	r1, [r7, #24]
 8004088:	4629      	mov	r1, r5
 800408a:	414b      	adcs	r3, r1
 800408c:	61fb      	str	r3, [r7, #28]
 800408e:	f04f 0200 	mov.w	r2, #0
 8004092:	f04f 0300 	mov.w	r3, #0
 8004096:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800409a:	4649      	mov	r1, r9
 800409c:	018b      	lsls	r3, r1, #6
 800409e:	4641      	mov	r1, r8
 80040a0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040a4:	4641      	mov	r1, r8
 80040a6:	018a      	lsls	r2, r1, #6
 80040a8:	4641      	mov	r1, r8
 80040aa:	1889      	adds	r1, r1, r2
 80040ac:	6139      	str	r1, [r7, #16]
 80040ae:	4649      	mov	r1, r9
 80040b0:	eb43 0101 	adc.w	r1, r3, r1
 80040b4:	6179      	str	r1, [r7, #20]
 80040b6:	f04f 0200 	mov.w	r2, #0
 80040ba:	f04f 0300 	mov.w	r3, #0
 80040be:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80040c2:	4649      	mov	r1, r9
 80040c4:	008b      	lsls	r3, r1, #2
 80040c6:	4641      	mov	r1, r8
 80040c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040cc:	4641      	mov	r1, r8
 80040ce:	008a      	lsls	r2, r1, #2
 80040d0:	4610      	mov	r0, r2
 80040d2:	4619      	mov	r1, r3
 80040d4:	4603      	mov	r3, r0
 80040d6:	4622      	mov	r2, r4
 80040d8:	189b      	adds	r3, r3, r2
 80040da:	60bb      	str	r3, [r7, #8]
 80040dc:	460b      	mov	r3, r1
 80040de:	462a      	mov	r2, r5
 80040e0:	eb42 0303 	adc.w	r3, r2, r3
 80040e4:	60fb      	str	r3, [r7, #12]
 80040e6:	f04f 0200 	mov.w	r2, #0
 80040ea:	f04f 0300 	mov.w	r3, #0
 80040ee:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80040f2:	4649      	mov	r1, r9
 80040f4:	008b      	lsls	r3, r1, #2
 80040f6:	4641      	mov	r1, r8
 80040f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040fc:	4641      	mov	r1, r8
 80040fe:	008a      	lsls	r2, r1, #2
 8004100:	4610      	mov	r0, r2
 8004102:	4619      	mov	r1, r3
 8004104:	4603      	mov	r3, r0
 8004106:	4622      	mov	r2, r4
 8004108:	189b      	adds	r3, r3, r2
 800410a:	67bb      	str	r3, [r7, #120]	; 0x78
 800410c:	462b      	mov	r3, r5
 800410e:	460a      	mov	r2, r1
 8004110:	eb42 0303 	adc.w	r3, r2, r3
 8004114:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004116:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800411a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800411e:	f7fc fdcb 	bl	8000cb8 <__aeabi_ldivmod>
 8004122:	4602      	mov	r2, r0
 8004124:	460b      	mov	r3, r1
 8004126:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
   var1 = (((int64_t)bme->p9) * (p >> 13) * (p >> 13)) >> 25;
 800412a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800412e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8004132:	b21b      	sxth	r3, r3
 8004134:	17da      	asrs	r2, r3, #31
 8004136:	673b      	str	r3, [r7, #112]	; 0x70
 8004138:	677a      	str	r2, [r7, #116]	; 0x74
 800413a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800413e:	f04f 0000 	mov.w	r0, #0
 8004142:	f04f 0100 	mov.w	r1, #0
 8004146:	0b50      	lsrs	r0, r2, #13
 8004148:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800414c:	1359      	asrs	r1, r3, #13
 800414e:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8004152:	462b      	mov	r3, r5
 8004154:	fb00 f203 	mul.w	r2, r0, r3
 8004158:	4623      	mov	r3, r4
 800415a:	fb03 f301 	mul.w	r3, r3, r1
 800415e:	4413      	add	r3, r2
 8004160:	4622      	mov	r2, r4
 8004162:	fba2 1200 	umull	r1, r2, r2, r0
 8004166:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800416a:	460a      	mov	r2, r1
 800416c:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8004170:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004174:	4413      	add	r3, r2
 8004176:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800417a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800417e:	f04f 0000 	mov.w	r0, #0
 8004182:	f04f 0100 	mov.w	r1, #0
 8004186:	0b50      	lsrs	r0, r2, #13
 8004188:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800418c:	1359      	asrs	r1, r3, #13
 800418e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8004192:	462b      	mov	r3, r5
 8004194:	fb00 f203 	mul.w	r2, r0, r3
 8004198:	4623      	mov	r3, r4
 800419a:	fb03 f301 	mul.w	r3, r3, r1
 800419e:	4413      	add	r3, r2
 80041a0:	4622      	mov	r2, r4
 80041a2:	fba2 1200 	umull	r1, r2, r2, r0
 80041a6:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80041aa:	460a      	mov	r2, r1
 80041ac:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80041b0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80041b4:	4413      	add	r3, r2
 80041b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80041ba:	f04f 0200 	mov.w	r2, #0
 80041be:	f04f 0300 	mov.w	r3, #0
 80041c2:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80041c6:	4621      	mov	r1, r4
 80041c8:	0e4a      	lsrs	r2, r1, #25
 80041ca:	4629      	mov	r1, r5
 80041cc:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80041d0:	4629      	mov	r1, r5
 80041d2:	164b      	asrs	r3, r1, #25
 80041d4:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
   var2 = (((int64_t)bme->p8) * p) >> 19;
 80041d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041dc:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80041e0:	b21b      	sxth	r3, r3
 80041e2:	17da      	asrs	r2, r3, #31
 80041e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80041e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80041e8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80041ec:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80041f0:	462a      	mov	r2, r5
 80041f2:	fb02 f203 	mul.w	r2, r2, r3
 80041f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041fa:	4621      	mov	r1, r4
 80041fc:	fb01 f303 	mul.w	r3, r1, r3
 8004200:	4413      	add	r3, r2
 8004202:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8004206:	4621      	mov	r1, r4
 8004208:	fba2 1201 	umull	r1, r2, r2, r1
 800420c:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8004210:	460a      	mov	r2, r1
 8004212:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8004216:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800421a:	4413      	add	r3, r2
 800421c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004220:	f04f 0200 	mov.w	r2, #0
 8004224:	f04f 0300 	mov.w	r3, #0
 8004228:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800422c:	4621      	mov	r1, r4
 800422e:	0cca      	lsrs	r2, r1, #19
 8004230:	4629      	mov	r1, r5
 8004232:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8004236:	4629      	mov	r1, r5
 8004238:	14cb      	asrs	r3, r1, #19
 800423a:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

   p = ((p + var1 + var2) >> 8) + (((int64_t)bme->p7) << 4);
 800423e:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8004242:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8004246:	1884      	adds	r4, r0, r2
 8004248:	663c      	str	r4, [r7, #96]	; 0x60
 800424a:	eb41 0303 	adc.w	r3, r1, r3
 800424e:	667b      	str	r3, [r7, #100]	; 0x64
 8004250:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8004254:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004258:	4621      	mov	r1, r4
 800425a:	1889      	adds	r1, r1, r2
 800425c:	65b9      	str	r1, [r7, #88]	; 0x58
 800425e:	4629      	mov	r1, r5
 8004260:	eb43 0101 	adc.w	r1, r3, r1
 8004264:	65f9      	str	r1, [r7, #92]	; 0x5c
 8004266:	f04f 0000 	mov.w	r0, #0
 800426a:	f04f 0100 	mov.w	r1, #0
 800426e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8004272:	4623      	mov	r3, r4
 8004274:	0a18      	lsrs	r0, r3, #8
 8004276:	462b      	mov	r3, r5
 8004278:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800427c:	462b      	mov	r3, r5
 800427e:	1219      	asrs	r1, r3, #8
 8004280:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004284:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8004288:	b21b      	sxth	r3, r3
 800428a:	17da      	asrs	r2, r3, #31
 800428c:	653b      	str	r3, [r7, #80]	; 0x50
 800428e:	657a      	str	r2, [r7, #84]	; 0x54
 8004290:	f04f 0200 	mov.w	r2, #0
 8004294:	f04f 0300 	mov.w	r3, #0
 8004298:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800429c:	464c      	mov	r4, r9
 800429e:	0123      	lsls	r3, r4, #4
 80042a0:	4644      	mov	r4, r8
 80042a2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80042a6:	4644      	mov	r4, r8
 80042a8:	0122      	lsls	r2, r4, #4
 80042aa:	1884      	adds	r4, r0, r2
 80042ac:	603c      	str	r4, [r7, #0]
 80042ae:	eb41 0303 	adc.w	r3, r1, r3
 80042b2:	607b      	str	r3, [r7, #4]
 80042b4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80042b8:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
   return (int32_t)p / 256;
 80042bc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	da00      	bge.n	80042c6 <BME280_Read_press+0x582>
 80042c4:	33ff      	adds	r3, #255	; 0xff
 80042c6:	121b      	asrs	r3, r3, #8
 80042c8:	ee07 3a90 	vmov	s15, r3
 80042cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80042d0:	eeb0 0a67 	vmov.f32	s0, s15
 80042d4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80042d8:	46bd      	mov	sp, r7
 80042da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042de:	bf00      	nop
 80042e0:	00000000 	.word	0x00000000

080042e4 <BME280_ReadAll>:
void BME280_ReadAll(BME280_t *bme, float *T, float *P, float *H)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
 80042f0:	603b      	str	r3, [r7, #0]
   *T = BME280_Read_temp(bme);
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f7ff fc52 	bl	8003b9c <BME280_Read_temp>
 80042f8:	eef0 7a40 	vmov.f32	s15, s0
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	edc3 7a00 	vstr	s15, [r3]
   *P = BME280_Read_press(bme) / 100;
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f7ff fd1e 	bl	8003d44 <BME280_Read_press>
 8004308:	eeb0 7a40 	vmov.f32	s14, s0
 800430c:	eddf 6a09 	vldr	s13, [pc, #36]	; 8004334 <BME280_ReadAll+0x50>
 8004310:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	edc3 7a00 	vstr	s15, [r3]
   *H = BME280_Read_hum(bme);
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f7ff fc96 	bl	8003c4c <BME280_Read_hum>
 8004320:	eef0 7a40 	vmov.f32	s15, s0
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	edc3 7a00 	vstr	s15, [r3]
}
 800432a:	bf00      	nop
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	42c80000 	.word	0x42c80000

08004338 <BME280_Init>:
void BME280_Init(BME280_t *bme, SPI_HandleTypeDef *spi, GPIO_TypeDef *CsPort, uint16_t CsPin)
{
 8004338:	b590      	push	{r4, r7, lr}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	607a      	str	r2, [r7, #4]
 8004344:	807b      	strh	r3, [r7, #2]
   bme->bme_spi       = spi;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	601a      	str	r2, [r3, #0]
   bme->bme280_CsPort = CsPort;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	605a      	str	r2, [r3, #4]
   bme->bme280_CsPin  = CsPin;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	887a      	ldrh	r2, [r7, #2]
 8004356:	855a      	strh	r2, [r3, #42]	; 0x2a
   bme->t1            = BME280_Read16LE(bme, BME280_DIG_T1);
 8004358:	2188      	movs	r1, #136	; 0x88
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	f7ff fbac 	bl	8003ab8 <BME280_Read16LE>
 8004360:	4603      	mov	r3, r0
 8004362:	461a      	mov	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	84da      	strh	r2, [r3, #38]	; 0x26
   bme->t2            = BME280_Read16LE(bme, BME280_DIG_T2);
 8004368:	218a      	movs	r1, #138	; 0x8a
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f7ff fba4 	bl	8003ab8 <BME280_Read16LE>
 8004370:	4603      	mov	r3, r0
 8004372:	b21a      	sxth	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	819a      	strh	r2, [r3, #12]
   bme->t3            = BME280_Read16LE(bme, BME280_DIG_T3);
 8004378:	218c      	movs	r1, #140	; 0x8c
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f7ff fb9c 	bl	8003ab8 <BME280_Read16LE>
 8004380:	4603      	mov	r3, r0
 8004382:	b21a      	sxth	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	81da      	strh	r2, [r3, #14]

   bme->p1 = BME280_Read16LE(bme, BME280_DIG_P1);
 8004388:	218e      	movs	r1, #142	; 0x8e
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f7ff fb94 	bl	8003ab8 <BME280_Read16LE>
 8004390:	4603      	mov	r3, r0
 8004392:	461a      	mov	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	851a      	strh	r2, [r3, #40]	; 0x28
   bme->p2 = BME280_Read16LE(bme, BME280_DIG_P2);
 8004398:	2190      	movs	r1, #144	; 0x90
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f7ff fb8c 	bl	8003ab8 <BME280_Read16LE>
 80043a0:	4603      	mov	r3, r0
 80043a2:	b21a      	sxth	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	821a      	strh	r2, [r3, #16]
   bme->p3 = BME280_Read16LE(bme, BME280_DIG_P3);
 80043a8:	2192      	movs	r1, #146	; 0x92
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f7ff fb84 	bl	8003ab8 <BME280_Read16LE>
 80043b0:	4603      	mov	r3, r0
 80043b2:	b21a      	sxth	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	825a      	strh	r2, [r3, #18]
   bme->p4 = BME280_Read16LE(bme, BME280_DIG_P4);
 80043b8:	2194      	movs	r1, #148	; 0x94
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f7ff fb7c 	bl	8003ab8 <BME280_Read16LE>
 80043c0:	4603      	mov	r3, r0
 80043c2:	b21a      	sxth	r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	829a      	strh	r2, [r3, #20]
   bme->p5 = BME280_Read16LE(bme, BME280_DIG_P5);
 80043c8:	2196      	movs	r1, #150	; 0x96
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	f7ff fb74 	bl	8003ab8 <BME280_Read16LE>
 80043d0:	4603      	mov	r3, r0
 80043d2:	b21a      	sxth	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	82da      	strh	r2, [r3, #22]
   bme->p6 = BME280_Read16LE(bme, BME280_DIG_P6);
 80043d8:	2198      	movs	r1, #152	; 0x98
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f7ff fb6c 	bl	8003ab8 <BME280_Read16LE>
 80043e0:	4603      	mov	r3, r0
 80043e2:	b21a      	sxth	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	831a      	strh	r2, [r3, #24]
   bme->p7 = BME280_Read16LE(bme, BME280_DIG_P7);
 80043e8:	219a      	movs	r1, #154	; 0x9a
 80043ea:	68f8      	ldr	r0, [r7, #12]
 80043ec:	f7ff fb64 	bl	8003ab8 <BME280_Read16LE>
 80043f0:	4603      	mov	r3, r0
 80043f2:	b21a      	sxth	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	835a      	strh	r2, [r3, #26]
   bme->p8 = BME280_Read16LE(bme, BME280_DIG_P8);
 80043f8:	219c      	movs	r1, #156	; 0x9c
 80043fa:	68f8      	ldr	r0, [r7, #12]
 80043fc:	f7ff fb5c 	bl	8003ab8 <BME280_Read16LE>
 8004400:	4603      	mov	r3, r0
 8004402:	b21a      	sxth	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	839a      	strh	r2, [r3, #28]
   bme->p9 = BME280_Read16LE(bme, BME280_DIG_P9);
 8004408:	219e      	movs	r1, #158	; 0x9e
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f7ff fb54 	bl	8003ab8 <BME280_Read16LE>
 8004410:	4603      	mov	r3, r0
 8004412:	b21a      	sxth	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	83da      	strh	r2, [r3, #30]

   bme->h1 = BME280_Read8(bme, BME280_DIG_H1);
 8004418:	21a1      	movs	r1, #161	; 0xa1
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f7ff fb02 	bl	8003a24 <BME280_Read8>
 8004420:	4603      	mov	r3, r0
 8004422:	461a      	mov	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	721a      	strb	r2, [r3, #8]
   bme->h2 = BME280_Read16LE(bme, BME280_DIG_H2);
 8004428:	21e1      	movs	r1, #225	; 0xe1
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f7ff fb44 	bl	8003ab8 <BME280_Read16LE>
 8004430:	4603      	mov	r3, r0
 8004432:	b21a      	sxth	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	841a      	strh	r2, [r3, #32]
   bme->h3 = BME280_Read8(bme, BME280_DIG_H3);
 8004438:	21e3      	movs	r1, #227	; 0xe3
 800443a:	68f8      	ldr	r0, [r7, #12]
 800443c:	f7ff faf2 	bl	8003a24 <BME280_Read8>
 8004440:	4603      	mov	r3, r0
 8004442:	461a      	mov	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	725a      	strb	r2, [r3, #9]
   bme->h4 = ((BME280_Read8(bme, BME280_DIG_H4) << 4) | (BME280_Read8(bme, BME280_DIG_H4 + 1) & 0xF));
 8004448:	21e4      	movs	r1, #228	; 0xe4
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f7ff faea 	bl	8003a24 <BME280_Read8>
 8004450:	4603      	mov	r3, r0
 8004452:	011b      	lsls	r3, r3, #4
 8004454:	b21c      	sxth	r4, r3
 8004456:	21e5      	movs	r1, #229	; 0xe5
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f7ff fae3 	bl	8003a24 <BME280_Read8>
 800445e:	4603      	mov	r3, r0
 8004460:	b21b      	sxth	r3, r3
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	b21b      	sxth	r3, r3
 8004468:	4323      	orrs	r3, r4
 800446a:	b21a      	sxth	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	845a      	strh	r2, [r3, #34]	; 0x22
   bme->h5 = ((BME280_Read8(bme, BME280_DIG_H5 + 1) << 4) | (BME280_Read8(bme, BME280_DIG_H5) >> 4));
 8004470:	21e6      	movs	r1, #230	; 0xe6
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f7ff fad6 	bl	8003a24 <BME280_Read8>
 8004478:	4603      	mov	r3, r0
 800447a:	011b      	lsls	r3, r3, #4
 800447c:	b21c      	sxth	r4, r3
 800447e:	21e5      	movs	r1, #229	; 0xe5
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f7ff facf 	bl	8003a24 <BME280_Read8>
 8004486:	4603      	mov	r3, r0
 8004488:	091b      	lsrs	r3, r3, #4
 800448a:	b2db      	uxtb	r3, r3
 800448c:	b21b      	sxth	r3, r3
 800448e:	4323      	orrs	r3, r4
 8004490:	b21a      	sxth	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	849a      	strh	r2, [r3, #36]	; 0x24
   bme->h6 = (int8_t)BME280_Read8(bme, BME280_DIG_H6);
 8004496:	21e7      	movs	r1, #231	; 0xe7
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f7ff fac3 	bl	8003a24 <BME280_Read8>
 800449e:	4603      	mov	r3, r0
 80044a0:	b25a      	sxtb	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	729a      	strb	r2, [r3, #10]
   BME280_Write8(bme, BME280_HUM_CONTROL, 0b00000100);
 80044a6:	2204      	movs	r2, #4
 80044a8:	21f2      	movs	r1, #242	; 0xf2
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f7ff fae1 	bl	8003a72 <BME280_Write8>
   BME280_Write8(bme, BME280_CONTROL, 0b10110111);
 80044b0:	22b7      	movs	r2, #183	; 0xb7
 80044b2:	21f4      	movs	r1, #244	; 0xf4
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f7ff fadc 	bl	8003a72 <BME280_Write8>
   BME280_Write8(bme, BME280_CONFIG, 0b00000000);
 80044ba:	2200      	movs	r2, #0
 80044bc:	21f5      	movs	r1, #245	; 0xf5
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f7ff fad7 	bl	8003a72 <BME280_Write8>
}
 80044c4:	bf00      	nop
 80044c6:	3714      	adds	r7, #20
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd90      	pop	{r4, r7, pc}

080044cc <Crc>:
#include "cmsis_os.h"
#include "main.h"
int RandomNumber[] = { 131456, 215134, 31254, 4135, 516454, 642754, 71363, 85362475, 9144316, 10341957, 11345134, 11354342 };
int k              = 0;
uint32_t Crc(uint32_t PreviuseCRC, uint32_t DataLength, uint8_t *data)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
   taskENTER_CRITICAL();
 80044d8:	f013 ff24 	bl	8018324 <vPortEnterCritical>
   PreviuseCRC ^= data[0];
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	461a      	mov	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	4053      	eors	r3, r2
 80044e6:	60fb      	str	r3, [r7, #12]
   for(uint32_t i = 1; i < DataLength; i++)
 80044e8:	2301      	movs	r3, #1
 80044ea:	617b      	str	r3, [r7, #20]
 80044ec:	e032      	b.n	8004554 <Crc+0x88>
   {
      uint32_t temp = data[i];
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	4413      	add	r3, r2
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	613b      	str	r3, [r7, #16]
      if(temp == 0x00000000)
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d115      	bne.n	800452a <Crc+0x5e>
      {
         temp = RandomNumber[k % 12];
 80044fe:	4b1c      	ldr	r3, [pc, #112]	; (8004570 <Crc+0xa4>)
 8004500:	6819      	ldr	r1, [r3, #0]
 8004502:	4b1c      	ldr	r3, [pc, #112]	; (8004574 <Crc+0xa8>)
 8004504:	fb83 2301 	smull	r2, r3, r3, r1
 8004508:	105a      	asrs	r2, r3, #1
 800450a:	17cb      	asrs	r3, r1, #31
 800450c:	1ad2      	subs	r2, r2, r3
 800450e:	4613      	mov	r3, r2
 8004510:	005b      	lsls	r3, r3, #1
 8004512:	4413      	add	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	1aca      	subs	r2, r1, r3
 8004518:	4b17      	ldr	r3, [pc, #92]	; (8004578 <Crc+0xac>)
 800451a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800451e:	613b      	str	r3, [r7, #16]
         k++;
 8004520:	4b13      	ldr	r3, [pc, #76]	; (8004570 <Crc+0xa4>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	3301      	adds	r3, #1
 8004526:	4a12      	ldr	r2, [pc, #72]	; (8004570 <Crc+0xa4>)
 8004528:	6013      	str	r3, [r2, #0]
      }
      PreviuseCRC ^= ((uint32_t)(temp) * (256 * i));
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	693a      	ldr	r2, [r7, #16]
 800452e:	fb02 f303 	mul.w	r3, r2, r3
 8004532:	021b      	lsls	r3, r3, #8
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	4053      	eors	r3, r2
 8004538:	60fb      	str	r3, [r7, #12]
      if(PreviuseCRC & 0x80000000)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2b00      	cmp	r3, #0
 800453e:	da03      	bge.n	8004548 <Crc+0x7c>
      {
         PreviuseCRC ^= 0xABC245C2;
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	4b0e      	ldr	r3, [pc, #56]	; (800457c <Crc+0xb0>)
 8004544:	4053      	eors	r3, r2
 8004546:	60fb      	str	r3, [r7, #12]
      }
      PreviuseCRC <<= 1;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	005b      	lsls	r3, r3, #1
 800454c:	60fb      	str	r3, [r7, #12]
   for(uint32_t i = 1; i < DataLength; i++)
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	3301      	adds	r3, #1
 8004552:	617b      	str	r3, [r7, #20]
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	429a      	cmp	r2, r3
 800455a:	d3c8      	bcc.n	80044ee <Crc+0x22>
   }
   k = 0;
 800455c:	4b04      	ldr	r3, [pc, #16]	; (8004570 <Crc+0xa4>)
 800455e:	2200      	movs	r2, #0
 8004560:	601a      	str	r2, [r3, #0]
   taskEXIT_CRITICAL();
 8004562:	f013 ff0f 	bl	8018384 <vPortExitCritical>
   return PreviuseCRC;
 8004566:	68fb      	ldr	r3, [r7, #12]
}
 8004568:	4618      	mov	r0, r3
 800456a:	3718      	adds	r7, #24
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	200004c0 	.word	0x200004c0
 8004574:	2aaaaaab 	.word	0x2aaaaaab
 8004578:	20000024 	.word	0x20000024
 800457c:	abc245c2 	.word	0xabc245c2

08004580 <RepareMessage>:
CRCStatus_TypeDef RepareMessage(uint32_t OryginalCRC, uint8_t *data, uint32_t DataLength)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b088      	sub	sp, #32
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
   uint8_t temp = 1;
 800458c:	2301      	movs	r3, #1
 800458e:	75fb      	strb	r3, [r7, #23]
   for(int i = 0; i < DataLength; i++)
 8004590:	2300      	movs	r3, #0
 8004592:	61fb      	str	r3, [r7, #28]
 8004594:	e03b      	b.n	800460e <RepareMessage+0x8e>
   {
      for(int j = 0; j < 8; j++)
 8004596:	2300      	movs	r3, #0
 8004598:	61bb      	str	r3, [r7, #24]
 800459a:	e032      	b.n	8004602 <RepareMessage+0x82>
      {
         data[i] ^= (temp << j);
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	4413      	add	r3, r2
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	b25a      	sxtb	r2, r3
 80045a6:	7df9      	ldrb	r1, [r7, #23]
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	fa01 f303 	lsl.w	r3, r1, r3
 80045ae:	b25b      	sxtb	r3, r3
 80045b0:	4053      	eors	r3, r2
 80045b2:	b259      	sxtb	r1, r3
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	68ba      	ldr	r2, [r7, #8]
 80045b8:	4413      	add	r3, r2
 80045ba:	b2ca      	uxtb	r2, r1
 80045bc:	701a      	strb	r2, [r3, #0]
         if(OryginalCRC == Crc(CRC_INITIAL_VALUE, DataLength - 4, data))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	3b04      	subs	r3, #4
 80045c2:	68ba      	ldr	r2, [r7, #8]
 80045c4:	4619      	mov	r1, r3
 80045c6:	f04f 30ff 	mov.w	r0, #4294967295
 80045ca:	f7ff ff7f 	bl	80044cc <Crc>
 80045ce:	4602      	mov	r2, r0
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d101      	bne.n	80045da <RepareMessage+0x5a>
         {
            return CRC_OK;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e01e      	b.n	8004618 <RepareMessage+0x98>
         }
         else
         {
            data[i] ^= (temp << j);
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	68ba      	ldr	r2, [r7, #8]
 80045de:	4413      	add	r3, r2
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	b25a      	sxtb	r2, r3
 80045e4:	7df9      	ldrb	r1, [r7, #23]
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	fa01 f303 	lsl.w	r3, r1, r3
 80045ec:	b25b      	sxtb	r3, r3
 80045ee:	4053      	eors	r3, r2
 80045f0:	b259      	sxtb	r1, r3
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	68ba      	ldr	r2, [r7, #8]
 80045f6:	4413      	add	r3, r2
 80045f8:	b2ca      	uxtb	r2, r1
 80045fa:	701a      	strb	r2, [r3, #0]
      for(int j = 0; j < 8; j++)
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	3301      	adds	r3, #1
 8004600:	61bb      	str	r3, [r7, #24]
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	2b07      	cmp	r3, #7
 8004606:	ddc9      	ble.n	800459c <RepareMessage+0x1c>
   for(int i = 0; i < DataLength; i++)
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	3301      	adds	r3, #1
 800460c:	61fb      	str	r3, [r7, #28]
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	429a      	cmp	r2, r3
 8004614:	d8bf      	bhi.n	8004596 <RepareMessage+0x16>
         }
      }
   }
   return CRC_ERROR;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3720      	adds	r7, #32
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8004626:	4b0f      	ldr	r3, [pc, #60]	; (8004664 <MX_DMA_Init+0x44>)
 8004628:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800462a:	4a0e      	ldr	r2, [pc, #56]	; (8004664 <MX_DMA_Init+0x44>)
 800462c:	f043 0304 	orr.w	r3, r3, #4
 8004630:	6493      	str	r3, [r2, #72]	; 0x48
 8004632:	4b0c      	ldr	r3, [pc, #48]	; (8004664 <MX_DMA_Init+0x44>)
 8004634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004636:	f003 0304 	and.w	r3, r3, #4
 800463a:	607b      	str	r3, [r7, #4]
 800463c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800463e:	4b09      	ldr	r3, [pc, #36]	; (8004664 <MX_DMA_Init+0x44>)
 8004640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004642:	4a08      	ldr	r2, [pc, #32]	; (8004664 <MX_DMA_Init+0x44>)
 8004644:	f043 0301 	orr.w	r3, r3, #1
 8004648:	6493      	str	r3, [r2, #72]	; 0x48
 800464a:	4b06      	ldr	r3, [pc, #24]	; (8004664 <MX_DMA_Init+0x44>)
 800464c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	603b      	str	r3, [r7, #0]
 8004654:	683b      	ldr	r3, [r7, #0]

}
 8004656:	bf00      	nop
 8004658:	370c      	adds	r7, #12
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	40021000 	.word	0x40021000

08004668 <e_papier_reset>:
const unsigned char lut_bb[] = {
   0x80, 0x17, 0x00, 0x00, 0x00, 0x02, 0x90, 0x17, 0x17, 0x00, 0x00, 0x02, 0x80, 0x0A, 0x01, 0x00, 0x00, 0x01, 0x50, 0x0E, 0x0E,
   0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
void e_papier_reset(void)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(EPAPIER_RST_GPIO_Port, EPAPIER_RST_Pin, 1);
 800466c:	2201      	movs	r2, #1
 800466e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004672:	480d      	ldr	r0, [pc, #52]	; (80046a8 <e_papier_reset+0x40>)
 8004674:	f009 fc2a 	bl	800decc <HAL_GPIO_WritePin>
   osDelay(200);
 8004678:	20c8      	movs	r0, #200	; 0xc8
 800467a:	f010 f961 	bl	8014940 <osDelay>
   HAL_GPIO_WritePin(EPAPIER_RST_GPIO_Port, EPAPIER_RST_Pin, 0);
 800467e:	2200      	movs	r2, #0
 8004680:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004684:	4808      	ldr	r0, [pc, #32]	; (80046a8 <e_papier_reset+0x40>)
 8004686:	f009 fc21 	bl	800decc <HAL_GPIO_WritePin>
   osDelay(200);
 800468a:	20c8      	movs	r0, #200	; 0xc8
 800468c:	f010 f958 	bl	8014940 <osDelay>
   HAL_GPIO_WritePin(EPAPIER_RST_GPIO_Port, EPAPIER_RST_Pin, 1);
 8004690:	2201      	movs	r2, #1
 8004692:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004696:	4804      	ldr	r0, [pc, #16]	; (80046a8 <e_papier_reset+0x40>)
 8004698:	f009 fc18 	bl	800decc <HAL_GPIO_WritePin>
   osDelay(200);
 800469c:	20c8      	movs	r0, #200	; 0xc8
 800469e:	f010 f94f 	bl	8014940 <osDelay>
}
 80046a2:	bf00      	nop
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	48000400 	.word	0x48000400

080046ac <e_papier_send_command>:
void e_papier_send_command(uint8_t command)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	4603      	mov	r3, r0
 80046b4:	71fb      	strb	r3, [r7, #7]
   HAL_GPIO_WritePin(SCREENS_DC_GPIO_Port, SCREENS_DC_Pin, 0);
 80046b6:	2200      	movs	r2, #0
 80046b8:	2101      	movs	r1, #1
 80046ba:	480c      	ldr	r0, [pc, #48]	; (80046ec <e_papier_send_command+0x40>)
 80046bc:	f009 fc06 	bl	800decc <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(EPAPIER_CS_GPIO_Port, EPAPIER_CS_Pin, 0);
 80046c0:	2200      	movs	r2, #0
 80046c2:	2102      	movs	r1, #2
 80046c4:	4809      	ldr	r0, [pc, #36]	; (80046ec <e_papier_send_command+0x40>)
 80046c6:	f009 fc01 	bl	800decc <HAL_GPIO_WritePin>
   HAL_SPI_Transmit(e_papier_spi, &command, 1, 1000);
 80046ca:	4b09      	ldr	r3, [pc, #36]	; (80046f0 <e_papier_send_command+0x44>)
 80046cc:	6818      	ldr	r0, [r3, #0]
 80046ce:	1df9      	adds	r1, r7, #7
 80046d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80046d4:	2201      	movs	r2, #1
 80046d6:	f00b fdfe 	bl	80102d6 <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(EPAPIER_CS_GPIO_Port, EPAPIER_CS_Pin, 1);
 80046da:	2201      	movs	r2, #1
 80046dc:	2102      	movs	r1, #2
 80046de:	4803      	ldr	r0, [pc, #12]	; (80046ec <e_papier_send_command+0x40>)
 80046e0:	f009 fbf4 	bl	800decc <HAL_GPIO_WritePin>
}
 80046e4:	bf00      	nop
 80046e6:	3708      	adds	r7, #8
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	48000400 	.word	0x48000400
 80046f0:	200004c4 	.word	0x200004c4

080046f4 <e_papier_send_data>:
void e_papier_send_data(uint8_t data)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	4603      	mov	r3, r0
 80046fc:	71fb      	strb	r3, [r7, #7]
   HAL_GPIO_WritePin(SCREENS_DC_GPIO_Port, SCREENS_DC_Pin, 1);
 80046fe:	2201      	movs	r2, #1
 8004700:	2101      	movs	r1, #1
 8004702:	480c      	ldr	r0, [pc, #48]	; (8004734 <e_papier_send_data+0x40>)
 8004704:	f009 fbe2 	bl	800decc <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(EPAPIER_CS_GPIO_Port, EPAPIER_CS_Pin, 0);
 8004708:	2200      	movs	r2, #0
 800470a:	2102      	movs	r1, #2
 800470c:	4809      	ldr	r0, [pc, #36]	; (8004734 <e_papier_send_data+0x40>)
 800470e:	f009 fbdd 	bl	800decc <HAL_GPIO_WritePin>
   HAL_SPI_Transmit(e_papier_spi, &data, 1, 1000);
 8004712:	4b09      	ldr	r3, [pc, #36]	; (8004738 <e_papier_send_data+0x44>)
 8004714:	6818      	ldr	r0, [r3, #0]
 8004716:	1df9      	adds	r1, r7, #7
 8004718:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800471c:	2201      	movs	r2, #1
 800471e:	f00b fdda 	bl	80102d6 <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(EPAPIER_CS_GPIO_Port, EPAPIER_CS_Pin, 1);
 8004722:	2201      	movs	r2, #1
 8004724:	2102      	movs	r1, #2
 8004726:	4803      	ldr	r0, [pc, #12]	; (8004734 <e_papier_send_data+0x40>)
 8004728:	f009 fbd0 	bl	800decc <HAL_GPIO_WritePin>
}
 800472c:	bf00      	nop
 800472e:	3708      	adds	r7, #8
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	48000400 	.word	0x48000400
 8004738:	200004c4 	.word	0x200004c4

0800473c <e_papier_wait_until_idle>:
void e_papier_wait_until_idle(void)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	af00      	add	r7, sp, #0
   while(HAL_GPIO_ReadPin(EPAPIER_BUSY_GPIO_Port, EPAPIER_BUSY_Pin) == 0)
 8004740:	e002      	b.n	8004748 <e_papier_wait_until_idle+0xc>
   {
      osDelay(100);
 8004742:	2064      	movs	r0, #100	; 0x64
 8004744:	f010 f8fc 	bl	8014940 <osDelay>
   while(HAL_GPIO_ReadPin(EPAPIER_BUSY_GPIO_Port, EPAPIER_BUSY_Pin) == 0)
 8004748:	2104      	movs	r1, #4
 800474a:	4804      	ldr	r0, [pc, #16]	; (800475c <e_papier_wait_until_idle+0x20>)
 800474c:	f009 fba6 	bl	800de9c <HAL_GPIO_ReadPin>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d0f5      	beq.n	8004742 <e_papier_wait_until_idle+0x6>
   }
}
 8004756:	bf00      	nop
 8004758:	bf00      	nop
 800475a:	bd80      	pop	{r7, pc}
 800475c:	48000400 	.word	0x48000400

08004760 <e_papier_set_pixel>:
void e_papier_set_pixel(uint16_t x, uint16_t y, color_t color)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	4603      	mov	r3, r0
 8004768:	80fb      	strh	r3, [r7, #6]
 800476a:	460b      	mov	r3, r1
 800476c:	80bb      	strh	r3, [r7, #4]
 800476e:	4613      	mov	r3, r2
 8004770:	70fb      	strb	r3, [r7, #3]
   if(x >= EPD_WIDTH || x < 0 || y >= EPD_HEIGHT || y < 0)
 8004772:	88fb      	ldrh	r3, [r7, #6]
 8004774:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004778:	d247      	bcs.n	800480a <e_papier_set_pixel+0xaa>
 800477a:	88bb      	ldrh	r3, [r7, #4]
 800477c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8004780:	d243      	bcs.n	800480a <e_papier_set_pixel+0xaa>
   {
      return;
   }
   if(color == WHITE)
 8004782:	78fb      	ldrb	r3, [r7, #3]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d120      	bne.n	80047ca <e_papier_set_pixel+0x6a>
   {
      BufferEpapier[x / 8 + y * EPD_WIDTH / 8] |= (0x80 > (x % 8));
 8004788:	88fb      	ldrh	r3, [r7, #6]
 800478a:	08db      	lsrs	r3, r3, #3
 800478c:	b299      	uxth	r1, r3
 800478e:	4608      	mov	r0, r1
 8004790:	88bb      	ldrh	r3, [r7, #4]
 8004792:	2232      	movs	r2, #50	; 0x32
 8004794:	fb02 f303 	mul.w	r3, r2, r3
 8004798:	4403      	add	r3, r0
 800479a:	4a1f      	ldr	r2, [pc, #124]	; (8004818 <e_papier_set_pixel+0xb8>)
 800479c:	5cd3      	ldrb	r3, [r2, r3]
 800479e:	b25a      	sxtb	r2, r3
 80047a0:	88fb      	ldrh	r3, [r7, #6]
 80047a2:	f003 0307 	and.w	r3, r3, #7
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	2b7f      	cmp	r3, #127	; 0x7f
 80047aa:	bf94      	ite	ls
 80047ac:	2301      	movls	r3, #1
 80047ae:	2300      	movhi	r3, #0
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	b25b      	sxtb	r3, r3
 80047b4:	4313      	orrs	r3, r2
 80047b6:	b258      	sxtb	r0, r3
 80047b8:	88bb      	ldrh	r3, [r7, #4]
 80047ba:	2232      	movs	r2, #50	; 0x32
 80047bc:	fb02 f303 	mul.w	r3, r2, r3
 80047c0:	440b      	add	r3, r1
 80047c2:	b2c1      	uxtb	r1, r0
 80047c4:	4a14      	ldr	r2, [pc, #80]	; (8004818 <e_papier_set_pixel+0xb8>)
 80047c6:	54d1      	strb	r1, [r2, r3]
 80047c8:	e020      	b.n	800480c <e_papier_set_pixel+0xac>
   }
   else
   {
      BufferEpapier[x / 8 + y * EPD_WIDTH / 8] &= ~(0x80 >> (x % 8));
 80047ca:	88fb      	ldrh	r3, [r7, #6]
 80047cc:	08db      	lsrs	r3, r3, #3
 80047ce:	b298      	uxth	r0, r3
 80047d0:	4601      	mov	r1, r0
 80047d2:	88bb      	ldrh	r3, [r7, #4]
 80047d4:	2232      	movs	r2, #50	; 0x32
 80047d6:	fb02 f303 	mul.w	r3, r2, r3
 80047da:	440b      	add	r3, r1
 80047dc:	4a0e      	ldr	r2, [pc, #56]	; (8004818 <e_papier_set_pixel+0xb8>)
 80047de:	5cd3      	ldrb	r3, [r2, r3]
 80047e0:	b25a      	sxtb	r2, r3
 80047e2:	88fb      	ldrh	r3, [r7, #6]
 80047e4:	f003 0307 	and.w	r3, r3, #7
 80047e8:	2180      	movs	r1, #128	; 0x80
 80047ea:	fa41 f303 	asr.w	r3, r1, r3
 80047ee:	b25b      	sxtb	r3, r3
 80047f0:	43db      	mvns	r3, r3
 80047f2:	b25b      	sxtb	r3, r3
 80047f4:	4013      	ands	r3, r2
 80047f6:	b259      	sxtb	r1, r3
 80047f8:	88bb      	ldrh	r3, [r7, #4]
 80047fa:	2232      	movs	r2, #50	; 0x32
 80047fc:	fb02 f303 	mul.w	r3, r2, r3
 8004800:	4403      	add	r3, r0
 8004802:	b2c9      	uxtb	r1, r1
 8004804:	4a04      	ldr	r2, [pc, #16]	; (8004818 <e_papier_set_pixel+0xb8>)
 8004806:	54d1      	strb	r1, [r2, r3]
 8004808:	e000      	b.n	800480c <e_papier_set_pixel+0xac>
      return;
 800480a:	bf00      	nop
   }
}
 800480c:	370c      	adds	r7, #12
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	200004c8 	.word	0x200004c8

0800481c <e_papier_set_lut>:
void e_papier_set_lut(void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
   uint16_t count;
   e_papier_send_command(LUT_FOR_VCOM); // g vcom
 8004822:	2020      	movs	r0, #32
 8004824:	f7ff ff42 	bl	80046ac <e_papier_send_command>
   for(count = 0; count < 44; count++)
 8004828:	2300      	movs	r3, #0
 800482a:	80fb      	strh	r3, [r7, #6]
 800482c:	e008      	b.n	8004840 <e_papier_set_lut+0x24>
   {
      e_papier_send_data(lut_vcom0[count]);
 800482e:	88fb      	ldrh	r3, [r7, #6]
 8004830:	4a2b      	ldr	r2, [pc, #172]	; (80048e0 <e_papier_set_lut+0xc4>)
 8004832:	5cd3      	ldrb	r3, [r2, r3]
 8004834:	4618      	mov	r0, r3
 8004836:	f7ff ff5d 	bl	80046f4 <e_papier_send_data>
   for(count = 0; count < 44; count++)
 800483a:	88fb      	ldrh	r3, [r7, #6]
 800483c:	3301      	adds	r3, #1
 800483e:	80fb      	strh	r3, [r7, #6]
 8004840:	88fb      	ldrh	r3, [r7, #6]
 8004842:	2b2b      	cmp	r3, #43	; 0x2b
 8004844:	d9f3      	bls.n	800482e <e_papier_set_lut+0x12>
   }

   e_papier_send_command(LUT_WHITE_TO_WHITE);
 8004846:	2021      	movs	r0, #33	; 0x21
 8004848:	f7ff ff30 	bl	80046ac <e_papier_send_command>
   for(count = 0; count < 42; count++)
 800484c:	2300      	movs	r3, #0
 800484e:	80fb      	strh	r3, [r7, #6]
 8004850:	e008      	b.n	8004864 <e_papier_set_lut+0x48>
   {
      e_papier_send_data(lut_ww[count]);
 8004852:	88fb      	ldrh	r3, [r7, #6]
 8004854:	4a23      	ldr	r2, [pc, #140]	; (80048e4 <e_papier_set_lut+0xc8>)
 8004856:	5cd3      	ldrb	r3, [r2, r3]
 8004858:	4618      	mov	r0, r3
 800485a:	f7ff ff4b 	bl	80046f4 <e_papier_send_data>
   for(count = 0; count < 42; count++)
 800485e:	88fb      	ldrh	r3, [r7, #6]
 8004860:	3301      	adds	r3, #1
 8004862:	80fb      	strh	r3, [r7, #6]
 8004864:	88fb      	ldrh	r3, [r7, #6]
 8004866:	2b29      	cmp	r3, #41	; 0x29
 8004868:	d9f3      	bls.n	8004852 <e_papier_set_lut+0x36>
   }

   e_papier_send_command(LUT_BLACK_TO_WHITE);
 800486a:	2022      	movs	r0, #34	; 0x22
 800486c:	f7ff ff1e 	bl	80046ac <e_papier_send_command>
   for(count = 0; count < 42; count++)
 8004870:	2300      	movs	r3, #0
 8004872:	80fb      	strh	r3, [r7, #6]
 8004874:	e008      	b.n	8004888 <e_papier_set_lut+0x6c>
   {
      e_papier_send_data(lut_bw[count]);
 8004876:	88fb      	ldrh	r3, [r7, #6]
 8004878:	4a1b      	ldr	r2, [pc, #108]	; (80048e8 <e_papier_set_lut+0xcc>)
 800487a:	5cd3      	ldrb	r3, [r2, r3]
 800487c:	4618      	mov	r0, r3
 800487e:	f7ff ff39 	bl	80046f4 <e_papier_send_data>
   for(count = 0; count < 42; count++)
 8004882:	88fb      	ldrh	r3, [r7, #6]
 8004884:	3301      	adds	r3, #1
 8004886:	80fb      	strh	r3, [r7, #6]
 8004888:	88fb      	ldrh	r3, [r7, #6]
 800488a:	2b29      	cmp	r3, #41	; 0x29
 800488c:	d9f3      	bls.n	8004876 <e_papier_set_lut+0x5a>
   }

   e_papier_send_command(LUT_WHITE_TO_BLACK);
 800488e:	2023      	movs	r0, #35	; 0x23
 8004890:	f7ff ff0c 	bl	80046ac <e_papier_send_command>
   for(count = 0; count < 42; count++)
 8004894:	2300      	movs	r3, #0
 8004896:	80fb      	strh	r3, [r7, #6]
 8004898:	e008      	b.n	80048ac <e_papier_set_lut+0x90>
   {
      e_papier_send_data(lut_wb[count]);
 800489a:	88fb      	ldrh	r3, [r7, #6]
 800489c:	4a13      	ldr	r2, [pc, #76]	; (80048ec <e_papier_set_lut+0xd0>)
 800489e:	5cd3      	ldrb	r3, [r2, r3]
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7ff ff27 	bl	80046f4 <e_papier_send_data>
   for(count = 0; count < 42; count++)
 80048a6:	88fb      	ldrh	r3, [r7, #6]
 80048a8:	3301      	adds	r3, #1
 80048aa:	80fb      	strh	r3, [r7, #6]
 80048ac:	88fb      	ldrh	r3, [r7, #6]
 80048ae:	2b29      	cmp	r3, #41	; 0x29
 80048b0:	d9f3      	bls.n	800489a <e_papier_set_lut+0x7e>
   }

   e_papier_send_command(LUT_BLACK_TO_BLACK);
 80048b2:	2024      	movs	r0, #36	; 0x24
 80048b4:	f7ff fefa 	bl	80046ac <e_papier_send_command>
   for(count = 0; count < 42; count++)
 80048b8:	2300      	movs	r3, #0
 80048ba:	80fb      	strh	r3, [r7, #6]
 80048bc:	e008      	b.n	80048d0 <e_papier_set_lut+0xb4>
   {
      e_papier_send_data(lut_bb[count]);
 80048be:	88fb      	ldrh	r3, [r7, #6]
 80048c0:	4a0b      	ldr	r2, [pc, #44]	; (80048f0 <e_papier_set_lut+0xd4>)
 80048c2:	5cd3      	ldrb	r3, [r2, r3]
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7ff ff15 	bl	80046f4 <e_papier_send_data>
   for(count = 0; count < 42; count++)
 80048ca:	88fb      	ldrh	r3, [r7, #6]
 80048cc:	3301      	adds	r3, #1
 80048ce:	80fb      	strh	r3, [r7, #6]
 80048d0:	88fb      	ldrh	r3, [r7, #6]
 80048d2:	2b29      	cmp	r3, #41	; 0x29
 80048d4:	d9f3      	bls.n	80048be <e_papier_set_lut+0xa2>
   }
}
 80048d6:	bf00      	nop
 80048d8:	bf00      	nop
 80048da:	3708      	adds	r7, #8
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	08023cc4 	.word	0x08023cc4
 80048e4:	08023cf0 	.word	0x08023cf0
 80048e8:	08023d1c 	.word	0x08023d1c
 80048ec:	08023d48 	.word	0x08023d48
 80048f0:	08023d74 	.word	0x08023d74

080048f4 <e_papier_turn_on_display>:
      }
   }
   // e_papier_wait_until_idle();
}
void e_papier_turn_on_display(void)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	af00      	add	r7, sp, #0
   e_papier_send_command(DISPLAY_REFRESH);
 80048f8:	2012      	movs	r0, #18
 80048fa:	f7ff fed7 	bl	80046ac <e_papier_send_command>
   e_papier_wait_until_idle();
 80048fe:	f7ff ff1d 	bl	800473c <e_papier_wait_until_idle>
}
 8004902:	bf00      	nop
 8004904:	bd80      	pop	{r7, pc}
	...

08004908 <e_papier_display>:
void e_papier_display(void)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
   uint16_t Width, Height;
   Width  = (EPD_WIDTH % 8 == 0) ? (EPD_WIDTH / 8) : (EPD_WIDTH / 8 + 1);
 800490e:	2332      	movs	r3, #50	; 0x32
 8004910:	807b      	strh	r3, [r7, #2]
   Height = EPD_HEIGHT;
 8004912:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004916:	803b      	strh	r3, [r7, #0]
   if(osEventFlagsWait(C3V1FlagsHandle, E_PAPIER_DARK_MODE, osFlagsWaitAny | osFlagsNoClear, 1) != osFlagsErrorTimeout)
 8004918:	4b32      	ldr	r3, [pc, #200]	; (80049e4 <e_papier_display+0xdc>)
 800491a:	6818      	ldr	r0, [r3, #0]
 800491c:	2301      	movs	r3, #1
 800491e:	2202      	movs	r2, #2
 8004920:	2140      	movs	r1, #64	; 0x40
 8004922:	f010 f96f 	bl	8014c04 <osEventFlagsWait>
 8004926:	4603      	mov	r3, r0
 8004928:	f113 0f02 	cmn.w	r3, #2
 800492c:	d015      	beq.n	800495a <e_papier_display+0x52>
   {
      for(int i = 0; i < sizeof(BufferEpapier); i++)
 800492e:	2300      	movs	r3, #0
 8004930:	60fb      	str	r3, [r7, #12]
 8004932:	e00d      	b.n	8004950 <e_papier_display+0x48>
      {
         BufferEpapier[i] = ~BufferEpapier[i];
 8004934:	4a2c      	ldr	r2, [pc, #176]	; (80049e8 <e_papier_display+0xe0>)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	4413      	add	r3, r2
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	43db      	mvns	r3, r3
 800493e:	b2d9      	uxtb	r1, r3
 8004940:	4a29      	ldr	r2, [pc, #164]	; (80049e8 <e_papier_display+0xe0>)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	4413      	add	r3, r2
 8004946:	460a      	mov	r2, r1
 8004948:	701a      	strb	r2, [r3, #0]
      for(int i = 0; i < sizeof(BufferEpapier); i++)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	3301      	adds	r3, #1
 800494e:	60fb      	str	r3, [r7, #12]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f643 2297 	movw	r2, #14999	; 0x3a97
 8004956:	4293      	cmp	r3, r2
 8004958:	d9ec      	bls.n	8004934 <e_papier_display+0x2c>
      }
   }
   e_papier_send_command(DATA_START_TRANSMISSION_1);
 800495a:	2010      	movs	r0, #16
 800495c:	f7ff fea6 	bl	80046ac <e_papier_send_command>
   for(uint16_t j = 0; j < Height; j++)
 8004960:	2300      	movs	r3, #0
 8004962:	817b      	strh	r3, [r7, #10]
 8004964:	e00f      	b.n	8004986 <e_papier_display+0x7e>
   {
      for(uint16_t i = 0; i < Width; i++)
 8004966:	2300      	movs	r3, #0
 8004968:	813b      	strh	r3, [r7, #8]
 800496a:	e005      	b.n	8004978 <e_papier_display+0x70>
      {
         e_papier_send_data(0XFF);
 800496c:	20ff      	movs	r0, #255	; 0xff
 800496e:	f7ff fec1 	bl	80046f4 <e_papier_send_data>
      for(uint16_t i = 0; i < Width; i++)
 8004972:	893b      	ldrh	r3, [r7, #8]
 8004974:	3301      	adds	r3, #1
 8004976:	813b      	strh	r3, [r7, #8]
 8004978:	893a      	ldrh	r2, [r7, #8]
 800497a:	887b      	ldrh	r3, [r7, #2]
 800497c:	429a      	cmp	r2, r3
 800497e:	d3f5      	bcc.n	800496c <e_papier_display+0x64>
   for(uint16_t j = 0; j < Height; j++)
 8004980:	897b      	ldrh	r3, [r7, #10]
 8004982:	3301      	adds	r3, #1
 8004984:	817b      	strh	r3, [r7, #10]
 8004986:	897a      	ldrh	r2, [r7, #10]
 8004988:	883b      	ldrh	r3, [r7, #0]
 800498a:	429a      	cmp	r2, r3
 800498c:	d3eb      	bcc.n	8004966 <e_papier_display+0x5e>
      }
   }
   e_papier_send_command(DATA_START_TRANSMISSION_2);
 800498e:	2013      	movs	r0, #19
 8004990:	f7ff fe8c 	bl	80046ac <e_papier_send_command>
   for(uint16_t j = 0; j < Height; j++)
 8004994:	2300      	movs	r3, #0
 8004996:	80fb      	strh	r3, [r7, #6]
 8004998:	e017      	b.n	80049ca <e_papier_display+0xc2>
   {
      for(uint16_t i = 0; i < Width; i++)
 800499a:	2300      	movs	r3, #0
 800499c:	80bb      	strh	r3, [r7, #4]
 800499e:	e00d      	b.n	80049bc <e_papier_display+0xb4>
      {
         e_papier_send_data(BufferEpapier[i + j * Width]);
 80049a0:	88ba      	ldrh	r2, [r7, #4]
 80049a2:	88fb      	ldrh	r3, [r7, #6]
 80049a4:	8879      	ldrh	r1, [r7, #2]
 80049a6:	fb01 f303 	mul.w	r3, r1, r3
 80049aa:	4413      	add	r3, r2
 80049ac:	4a0e      	ldr	r2, [pc, #56]	; (80049e8 <e_papier_display+0xe0>)
 80049ae:	5cd3      	ldrb	r3, [r2, r3]
 80049b0:	4618      	mov	r0, r3
 80049b2:	f7ff fe9f 	bl	80046f4 <e_papier_send_data>
      for(uint16_t i = 0; i < Width; i++)
 80049b6:	88bb      	ldrh	r3, [r7, #4]
 80049b8:	3301      	adds	r3, #1
 80049ba:	80bb      	strh	r3, [r7, #4]
 80049bc:	88ba      	ldrh	r2, [r7, #4]
 80049be:	887b      	ldrh	r3, [r7, #2]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d3ed      	bcc.n	80049a0 <e_papier_display+0x98>
   for(uint16_t j = 0; j < Height; j++)
 80049c4:	88fb      	ldrh	r3, [r7, #6]
 80049c6:	3301      	adds	r3, #1
 80049c8:	80fb      	strh	r3, [r7, #6]
 80049ca:	88fa      	ldrh	r2, [r7, #6]
 80049cc:	883b      	ldrh	r3, [r7, #0]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d3e3      	bcc.n	800499a <e_papier_display+0x92>
      }
   }
   e_papier_turn_on_display();
 80049d2:	f7ff ff8f 	bl	80048f4 <e_papier_turn_on_display>
   e_papier_wait_until_idle();
 80049d6:	f7ff feb1 	bl	800473c <e_papier_wait_until_idle>
}
 80049da:	bf00      	nop
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	20004054 	.word	0x20004054
 80049e8:	200004c8 	.word	0x200004c8

080049ec <e_papier_clear>:
void e_papier_clear()
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0
   memset(BufferEpapier, 0xff, EPD_HEIGHT * EPD_WIDTH / 8);
 80049f0:	f643 2298 	movw	r2, #15000	; 0x3a98
 80049f4:	21ff      	movs	r1, #255	; 0xff
 80049f6:	4802      	ldr	r0, [pc, #8]	; (8004a00 <e_papier_clear+0x14>)
 80049f8:	f013 ffda 	bl	80189b0 <memset>
}
 80049fc:	bf00      	nop
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	200004c8 	.word	0x200004c8

08004a04 <e_papier_init>:
void e_papier_init(SPI_HandleTypeDef *spi)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
   e_papier_spi = spi;
 8004a0c:	4a2b      	ldr	r2, [pc, #172]	; (8004abc <e_papier_init+0xb8>)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6013      	str	r3, [r2, #0]
   e_papier_reset();
 8004a12:	f7ff fe29 	bl	8004668 <e_papier_reset>

   e_papier_send_command(POWER_SETTING); // POWER SETTING
 8004a16:	2001      	movs	r0, #1
 8004a18:	f7ff fe48 	bl	80046ac <e_papier_send_command>
   e_papier_send_data(0x03);
 8004a1c:	2003      	movs	r0, #3
 8004a1e:	f7ff fe69 	bl	80046f4 <e_papier_send_data>
   e_papier_send_data(0x00);
 8004a22:	2000      	movs	r0, #0
 8004a24:	f7ff fe66 	bl	80046f4 <e_papier_send_data>
   e_papier_send_data(0x2b);
 8004a28:	202b      	movs	r0, #43	; 0x2b
 8004a2a:	f7ff fe63 	bl	80046f4 <e_papier_send_data>
   e_papier_send_data(0x2b);
 8004a2e:	202b      	movs	r0, #43	; 0x2b
 8004a30:	f7ff fe60 	bl	80046f4 <e_papier_send_data>

   e_papier_send_command(BOOSTER_SOFT_START); // boost soft start
 8004a34:	2006      	movs	r0, #6
 8004a36:	f7ff fe39 	bl	80046ac <e_papier_send_command>
   e_papier_send_data(0x17);                  // A
 8004a3a:	2017      	movs	r0, #23
 8004a3c:	f7ff fe5a 	bl	80046f4 <e_papier_send_data>
   e_papier_send_data(0x17);                  // B
 8004a40:	2017      	movs	r0, #23
 8004a42:	f7ff fe57 	bl	80046f4 <e_papier_send_data>
   e_papier_send_data(0x17);                  // C
 8004a46:	2017      	movs	r0, #23
 8004a48:	f7ff fe54 	bl	80046f4 <e_papier_send_data>

   e_papier_send_command(POWER_ON);
 8004a4c:	2004      	movs	r0, #4
 8004a4e:	f7ff fe2d 	bl	80046ac <e_papier_send_command>
   e_papier_wait_until_idle();
 8004a52:	f7ff fe73 	bl	800473c <e_papier_wait_until_idle>

   e_papier_send_command(PANEL_SETTING); // panel setting
 8004a56:	2000      	movs	r0, #0
 8004a58:	f7ff fe28 	bl	80046ac <e_papier_send_command>
   e_papier_send_data(0xbf);             // KW-BF   KWR-AF	BWROTP 0f	BWOTP 1f
 8004a5c:	20bf      	movs	r0, #191	; 0xbf
 8004a5e:	f7ff fe49 	bl	80046f4 <e_papier_send_data>
   e_papier_send_data(0x0d);
 8004a62:	200d      	movs	r0, #13
 8004a64:	f7ff fe46 	bl	80046f4 <e_papier_send_data>

   e_papier_send_command(PLL_CONTROL); // PLL setting
 8004a68:	2030      	movs	r0, #48	; 0x30
 8004a6a:	f7ff fe1f 	bl	80046ac <e_papier_send_command>
   e_papier_send_data(0x3C);           // 3A 100HZ   29 150Hz 39 200HZ	31 171HZ
 8004a6e:	203c      	movs	r0, #60	; 0x3c
 8004a70:	f7ff fe40 	bl	80046f4 <e_papier_send_data>

   e_papier_send_command(0x61); // resolution setting
 8004a74:	2061      	movs	r0, #97	; 0x61
 8004a76:	f7ff fe19 	bl	80046ac <e_papier_send_command>
   e_papier_send_data(0x01);
 8004a7a:	2001      	movs	r0, #1
 8004a7c:	f7ff fe3a 	bl	80046f4 <e_papier_send_data>
   e_papier_send_data(0x90); // 128
 8004a80:	2090      	movs	r0, #144	; 0x90
 8004a82:	f7ff fe37 	bl	80046f4 <e_papier_send_data>
   e_papier_send_data(0x01); //
 8004a86:	2001      	movs	r0, #1
 8004a88:	f7ff fe34 	bl	80046f4 <e_papier_send_data>
   e_papier_send_data(0x2c);
 8004a8c:	202c      	movs	r0, #44	; 0x2c
 8004a8e:	f7ff fe31 	bl	80046f4 <e_papier_send_data>

   e_papier_send_command(0x82); // vcom_DC setting
 8004a92:	2082      	movs	r0, #130	; 0x82
 8004a94:	f7ff fe0a 	bl	80046ac <e_papier_send_command>
   e_papier_send_data(0x28);
 8004a98:	2028      	movs	r0, #40	; 0x28
 8004a9a:	f7ff fe2b 	bl	80046f4 <e_papier_send_data>

   e_papier_send_command(0X50); // VCOM AND DATA INTERVAL SETTING
 8004a9e:	2050      	movs	r0, #80	; 0x50
 8004aa0:	f7ff fe04 	bl	80046ac <e_papier_send_command>
   e_papier_send_data(0x97);    // 97white border 77black border		VBDF 17|D7 VBDW 97 VBDB 57		VBDF F7 VBDW 77 VBDB 37  VBDR B7
 8004aa4:	2097      	movs	r0, #151	; 0x97
 8004aa6:	f7ff fe25 	bl	80046f4 <e_papier_send_data>

   e_papier_set_lut();
 8004aaa:	f7ff feb7 	bl	800481c <e_papier_set_lut>
   e_papier_clear();
 8004aae:	f7ff ff9d 	bl	80049ec <e_papier_clear>
}
 8004ab2:	bf00      	nop
 8004ab4:	3708      	adds	r7, #8
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	200004c4 	.word	0x200004c4

08004ac0 <flash_CsLow>:

#include "flash_spi.h"

#include "cmsis_os.h"
void flash_CsLow(flash_t *flash)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(flash->flash_CsPort, flash->flash_CsPin, 0);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	68d8      	ldr	r0, [r3, #12]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	891b      	ldrh	r3, [r3, #8]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	f009 f9fa 	bl	800decc <HAL_GPIO_WritePin>
}
 8004ad8:	bf00      	nop
 8004ada:	3708      	adds	r7, #8
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <flash_CsHigh>:
void flash_CsHigh(flash_t *flash)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(flash->flash_CsPort, flash->flash_CsPin, 1);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	68d8      	ldr	r0, [r3, #12]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	891b      	ldrh	r3, [r3, #8]
 8004af0:	2201      	movs	r2, #1
 8004af2:	4619      	mov	r1, r3
 8004af4:	f009 f9ea 	bl	800decc <HAL_GPIO_WritePin>
}
 8004af8:	bf00      	nop
 8004afa:	3708      	adds	r7, #8
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <flash_WriteCommand>:
void flash_WriteCommand(flash_t *flash, uint8_t *command, uint8_t size)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	71fb      	strb	r3, [r7, #7]
   HAL_SPI_Transmit(flash->flash_spi, command, size, 1000);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6818      	ldr	r0, [r3, #0]
 8004b12:	79fb      	ldrb	r3, [r7, #7]
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b1a:	68b9      	ldr	r1, [r7, #8]
 8004b1c:	f00b fbdb 	bl	80102d6 <HAL_SPI_Transmit>
}
 8004b20:	bf00      	nop
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <flash_ReadCommand>:
void flash_ReadCommand(flash_t *flash, uint8_t *command, uint8_t size)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	4613      	mov	r3, r2
 8004b34:	71fb      	strb	r3, [r7, #7]
   HAL_SPI_Receive(flash->flash_spi, command, size, 1000);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6818      	ldr	r0, [r3, #0]
 8004b3a:	79fb      	ldrb	r3, [r7, #7]
 8004b3c:	b29a      	uxth	r2, r3
 8004b3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b42:	68b9      	ldr	r1, [r7, #8]
 8004b44:	f00b fd35 	bl	80105b2 <HAL_SPI_Receive>
}
 8004b48:	bf00      	nop
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <flash_WriteData>:
void flash_WriteData(flash_t *flash, uint8_t *data, uint32_t size)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
   HAL_SPI_Transmit(flash->flash_spi, data, size, 1000);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6818      	ldr	r0, [r3, #0]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b68:	68b9      	ldr	r1, [r7, #8]
 8004b6a:	f00b fbb4 	bl	80102d6 <HAL_SPI_Transmit>
}
 8004b6e:	bf00      	nop
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <flash_ReadData>:
void flash_ReadData(flash_t *flash, uint8_t *data, uint32_t size)
{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b084      	sub	sp, #16
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	60f8      	str	r0, [r7, #12]
 8004b7e:	60b9      	str	r1, [r7, #8]
 8004b80:	607a      	str	r2, [r7, #4]
   HAL_SPI_Receive(flash->flash_spi, data, size, 1000);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6818      	ldr	r0, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	b29a      	uxth	r2, r3
 8004b8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b8e:	68b9      	ldr	r1, [r7, #8]
 8004b90:	f00b fd0f 	bl	80105b2 <HAL_SPI_Receive>
}
 8004b94:	bf00      	nop
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <flash_ReadSR1>:
uint8_t flash_ReadSR1(flash_t *flash)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
   flash_CsLow(flash);
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f7ff ff8b 	bl	8004ac0 <flash_CsLow>
   uint8_t command = READ_SR1;
 8004baa:	2305      	movs	r3, #5
 8004bac:	73fb      	strb	r3, [r7, #15]
   flash_WriteCommand(flash, &command, 1);
 8004bae:	f107 030f 	add.w	r3, r7, #15
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f7ff ffa2 	bl	8004b00 <flash_WriteCommand>
   flash_ReadCommand(flash, &command, 1);
 8004bbc:	f107 030f 	add.w	r3, r7, #15
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f7ff ffaf 	bl	8004b28 <flash_ReadCommand>
   flash_CsHigh(flash);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f7ff ff88 	bl	8004ae0 <flash_CsHigh>
   return command;
 8004bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <flash_Reset>:
   flash_ReadCommand(flash, &command, 1);
   flash_CsHigh(flash);
   return command;
}
void flash_Reset(flash_t *flash)
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b084      	sub	sp, #16
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
   uint8_t command = ENABLE_RESET;
 8004be2:	2366      	movs	r3, #102	; 0x66
 8004be4:	73fb      	strb	r3, [r7, #15]
   flash_CsLow(flash);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f7ff ff6a 	bl	8004ac0 <flash_CsLow>
   flash_WriteCommand(flash, &command, 1);
 8004bec:	f107 030f 	add.w	r3, r7, #15
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f7ff ff83 	bl	8004b00 <flash_WriteCommand>
   flash_CsHigh(flash);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7ff ff70 	bl	8004ae0 <flash_CsHigh>
   command = RESET;
 8004c00:	2399      	movs	r3, #153	; 0x99
 8004c02:	73fb      	strb	r3, [r7, #15]
   flash_CsLow(flash);
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f7ff ff5b 	bl	8004ac0 <flash_CsLow>
   flash_WriteCommand(flash, &command, 1);
 8004c0a:	f107 030f 	add.w	r3, r7, #15
 8004c0e:	2201      	movs	r2, #1
 8004c10:	4619      	mov	r1, r3
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7ff ff74 	bl	8004b00 <flash_WriteCommand>
   flash_CsHigh(flash);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f7ff ff61 	bl	8004ae0 <flash_CsHigh>
}
 8004c1e:	bf00      	nop
 8004c20:	3710      	adds	r7, #16
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <flash_SetWELBit>:
void flash_SetWELBit(flash_t *flash)
{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b084      	sub	sp, #16
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
   flash_CsLow(flash);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f7ff ff46 	bl	8004ac0 <flash_CsLow>
   uint8_t command = WRITE_ENABLE;
 8004c34:	2306      	movs	r3, #6
 8004c36:	73fb      	strb	r3, [r7, #15]
   flash_WriteCommand(flash, &command, 1);
 8004c38:	f107 030f 	add.w	r3, r7, #15
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	4619      	mov	r1, r3
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f7ff ff5d 	bl	8004b00 <flash_WriteCommand>
   flash_CsHigh(flash);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f7ff ff4a 	bl	8004ae0 <flash_CsHigh>
}
 8004c4c:	bf00      	nop
 8004c4e:	3710      	adds	r7, #16
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <flash_ReadID>:
void flash_ReadID(flash_t *flash)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
   uint8_t id[3], command = JEDEC_ID;
 8004c5c:	239f      	movs	r3, #159	; 0x9f
 8004c5e:	72fb      	strb	r3, [r7, #11]
   flash_CsLow(flash);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f7ff ff2d 	bl	8004ac0 <flash_CsLow>
   flash_WriteCommand(flash, &command, 1);
 8004c66:	f107 030b 	add.w	r3, r7, #11
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f7ff ff46 	bl	8004b00 <flash_WriteCommand>
   flash_ReadCommand(flash, id, 3);
 8004c74:	f107 030c 	add.w	r3, r7, #12
 8004c78:	2203      	movs	r2, #3
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f7ff ff53 	bl	8004b28 <flash_ReadCommand>
   flash_CsHigh(flash);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f7ff ff2c 	bl	8004ae0 <flash_CsHigh>
   flash->id = ((id[0] << 16) | (id[1] << 8) | id[2]);
 8004c88:	7b3b      	ldrb	r3, [r7, #12]
 8004c8a:	041a      	lsls	r2, r3, #16
 8004c8c:	7b7b      	ldrb	r3, [r7, #13]
 8004c8e:	021b      	lsls	r3, r3, #8
 8004c90:	4313      	orrs	r3, r2
 8004c92:	7bba      	ldrb	r2, [r7, #14]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	461a      	mov	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	605a      	str	r2, [r3, #4]
}
 8004c9c:	bf00      	nop
 8004c9e:	3710      	adds	r7, #16
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <flash_WaitForEndProcess>:
void flash_WaitForEndProcess(flash_t *flash)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
   while((flash_ReadSR1(flash) & BUSY_FLAG))
 8004cac:	e002      	b.n	8004cb4 <flash_WaitForEndProcess+0x10>
   {
      osDelay(5);
 8004cae:	2005      	movs	r0, #5
 8004cb0:	f00f fe46 	bl	8014940 <osDelay>
   while((flash_ReadSR1(flash) & BUSY_FLAG))
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f7ff ff71 	bl	8004b9c <flash_ReadSR1>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	f003 0301 	and.w	r3, r3, #1
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1f4      	bne.n	8004cae <flash_WaitForEndProcess+0xa>
   }
}
 8004cc4:	bf00      	nop
 8004cc6:	bf00      	nop
 8004cc8:	3708      	adds	r7, #8
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <flash_SetWELBit_and_WaitForEndProcess>:
void flash_SetWELBit_and_WaitForEndProcess(flash_t *flash)
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b082      	sub	sp, #8
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
   while(!(flash_ReadSR1(flash) & WEL_BIT))
 8004cd6:	e005      	b.n	8004ce4 <flash_SetWELBit_and_WaitForEndProcess+0x16>
   {
      flash_SetWELBit(flash);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f7ff ffa4 	bl	8004c26 <flash_SetWELBit>
      osDelay(5);
 8004cde:	2005      	movs	r0, #5
 8004ce0:	f00f fe2e 	bl	8014940 <osDelay>
   while(!(flash_ReadSR1(flash) & WEL_BIT))
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f7ff ff59 	bl	8004b9c <flash_ReadSR1>
 8004cea:	4603      	mov	r3, r0
 8004cec:	f003 0302 	and.w	r3, r3, #2
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d0f1      	beq.n	8004cd8 <flash_SetWELBit_and_WaitForEndProcess+0xa>
   }
}
 8004cf4:	bf00      	nop
 8004cf6:	bf00      	nop
 8004cf8:	3708      	adds	r7, #8
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <flash_WritePage>:
   flash_CsHigh(flash);
   flash_WaitForEndProcess(flash);
   flash_WaitForEndProcess(flash);
}
void flash_WritePage(flash_t *flash, uint32_t page_addr, uint8_t *data)
{
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b086      	sub	sp, #24
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	60f8      	str	r0, [r7, #12]
 8004d06:	60b9      	str	r1, [r7, #8]
 8004d08:	607a      	str	r2, [r7, #4]
   uint8_t dataToSend[4];
   flash_WaitForEndProcess(flash);
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f7ff ffca 	bl	8004ca4 <flash_WaitForEndProcess>
   flash_SetWELBit_and_WaitForEndProcess(flash);
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f7ff ffdc 	bl	8004cce <flash_SetWELBit_and_WaitForEndProcess>
   page_addr *= PAGE_SIZE;
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	021b      	lsls	r3, r3, #8
 8004d1a:	60bb      	str	r3, [r7, #8]
   dataToSend[0] = PAGE_PROGRAM;
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	753b      	strb	r3, [r7, #20]
   dataToSend[1] = (page_addr >> 16) & 0xff;
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	0c1b      	lsrs	r3, r3, #16
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	757b      	strb	r3, [r7, #21]
   dataToSend[2] = (page_addr >> 8) & 0xff;
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	0a1b      	lsrs	r3, r3, #8
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	75bb      	strb	r3, [r7, #22]
   dataToSend[3] = page_addr & 0xff;
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	75fb      	strb	r3, [r7, #23]
   flash_CsLow(flash);
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f7ff fec2 	bl	8004ac0 <flash_CsLow>
   flash_WriteCommand(flash, dataToSend, 4);
 8004d3c:	f107 0314 	add.w	r3, r7, #20
 8004d40:	2204      	movs	r2, #4
 8004d42:	4619      	mov	r1, r3
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f7ff fedb 	bl	8004b00 <flash_WriteCommand>
   flash_WriteData(flash, data, PAGE_SIZE);
 8004d4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d4e:	6879      	ldr	r1, [r7, #4]
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f7ff fefd 	bl	8004b50 <flash_WriteData>
   flash_CsHigh(flash);
 8004d56:	68f8      	ldr	r0, [r7, #12]
 8004d58:	f7ff fec2 	bl	8004ae0 <flash_CsHigh>
   flash_WaitForEndProcess(flash);
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f7ff ffa1 	bl	8004ca4 <flash_WaitForEndProcess>
}
 8004d62:	bf00      	nop
 8004d64:	3718      	adds	r7, #24
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <flash_ReadPage>:
void flash_ReadPage(flash_t *flash, uint32_t page_addr, uint8_t *data)
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b086      	sub	sp, #24
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	60f8      	str	r0, [r7, #12]
 8004d72:	60b9      	str	r1, [r7, #8]
 8004d74:	607a      	str	r2, [r7, #4]
   uint8_t dataToSend[4];
   page_addr *= PAGE_SIZE;
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	021b      	lsls	r3, r3, #8
 8004d7a:	60bb      	str	r3, [r7, #8]
   flash_WaitForEndProcess(flash);
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f7ff ff91 	bl	8004ca4 <flash_WaitForEndProcess>
   flash_SetWELBit_and_WaitForEndProcess(flash);
 8004d82:	68f8      	ldr	r0, [r7, #12]
 8004d84:	f7ff ffa3 	bl	8004cce <flash_SetWELBit_and_WaitForEndProcess>
   dataToSend[0] = READ_DATA;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	753b      	strb	r3, [r7, #20]
   dataToSend[1] = (page_addr >> 16) & 0xff;
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	0c1b      	lsrs	r3, r3, #16
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	757b      	strb	r3, [r7, #21]
   dataToSend[2] = (page_addr >> 8) & 0xff;
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	0a1b      	lsrs	r3, r3, #8
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	75bb      	strb	r3, [r7, #22]
   dataToSend[3] = page_addr & 0xff;
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	75fb      	strb	r3, [r7, #23]
   flash_CsLow(flash);
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	f7ff fe8c 	bl	8004ac0 <flash_CsLow>
   flash_WriteCommand(flash, dataToSend, 4);
 8004da8:	f107 0314 	add.w	r3, r7, #20
 8004dac:	2204      	movs	r2, #4
 8004dae:	4619      	mov	r1, r3
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f7ff fea5 	bl	8004b00 <flash_WriteCommand>
   flash_ReadData(flash, data, PAGE_SIZE);
 8004db6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004dba:	6879      	ldr	r1, [r7, #4]
 8004dbc:	68f8      	ldr	r0, [r7, #12]
 8004dbe:	f7ff feda 	bl	8004b76 <flash_ReadData>
   flash_CsHigh(flash);
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f7ff fe8c 	bl	8004ae0 <flash_CsHigh>
   flash_WaitForEndProcess(flash);
 8004dc8:	68f8      	ldr	r0, [r7, #12]
 8004dca:	f7ff ff6b 	bl	8004ca4 <flash_WaitForEndProcess>
   flash_WaitForEndProcess(flash);
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f7ff ff68 	bl	8004ca4 <flash_WaitForEndProcess>
}
 8004dd4:	bf00      	nop
 8004dd6:	3718      	adds	r7, #24
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <flash_Init>:
   flash_WriteCommand(flash, &Temp, 1);
   flash_CsHigh(flash);
   flash_WaitForEndProcess(flash);
}
void flash_Init(flash_t *flash, SPI_HandleTypeDef *spi, GPIO_TypeDef *cs_port, uint16_t cs_pin)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
 8004de8:	807b      	strh	r3, [r7, #2]
   flash->flash_spi    = spi;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	68ba      	ldr	r2, [r7, #8]
 8004dee:	601a      	str	r2, [r3, #0]
   flash->flash_CsPort = cs_port;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	60da      	str	r2, [r3, #12]
   flash->flash_CsPin  = cs_pin;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	887a      	ldrh	r2, [r7, #2]
 8004dfa:	811a      	strh	r2, [r3, #8]
   flash_Reset(flash);
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f7ff feec 	bl	8004bda <flash_Reset>
   flash_ReadID(flash);
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f7ff ff26 	bl	8004c54 <flash_ReadID>
}
 8004e08:	bf00      	nop
 8004e0a:	3710      	adds	r7, #16
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <fram_CsLow>:
#include "fram.h"
#include "gpio.h"
#include "iwdg.h"
#include "spi.h"
void fram_CsLow(fram_t *fram)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(fram->cs_port, fram->cs_pin, 0);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6898      	ldr	r0, [r3, #8]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	8a5b      	ldrh	r3, [r3, #18]
 8004e20:	2200      	movs	r2, #0
 8004e22:	4619      	mov	r1, r3
 8004e24:	f009 f852 	bl	800decc <HAL_GPIO_WritePin>
}
 8004e28:	bf00      	nop
 8004e2a:	3708      	adds	r7, #8
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <fram_CsHigh>:
void fram_CsHigh(fram_t *fram)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(fram->cs_port, fram->cs_pin, 1);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6898      	ldr	r0, [r3, #8]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	8a5b      	ldrh	r3, [r3, #18]
 8004e40:	2201      	movs	r2, #1
 8004e42:	4619      	mov	r1, r3
 8004e44:	f009 f842 	bl	800decc <HAL_GPIO_WritePin>
}
 8004e48:	bf00      	nop
 8004e4a:	3708      	adds	r7, #8
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <fram_SetWELBit>:
void fram_SetWELBit(fram_t *fram)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
   uint8_t com = WREN;
 8004e58:	2306      	movs	r3, #6
 8004e5a:	73fb      	strb	r3, [r7, #15]
   fram_CsLow(fram);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f7ff ffd7 	bl	8004e10 <fram_CsLow>
   HAL_SPI_Transmit(fram->fram_spi, &com, 1, 1000);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6818      	ldr	r0, [r3, #0]
 8004e66:	f107 010f 	add.w	r1, r7, #15
 8004e6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f00b fa31 	bl	80102d6 <HAL_SPI_Transmit>
   fram_CsHigh(fram);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f7ff ffdb 	bl	8004e30 <fram_CsHigh>
   HAL_IWDG_Refresh(&hiwdg);
 8004e7a:	4805      	ldr	r0, [pc, #20]	; (8004e90 <fram_SetWELBit+0x40>)
 8004e7c:	f009 f8a7 	bl	800dfce <HAL_IWDG_Refresh>
   osDelay(100);
 8004e80:	2064      	movs	r0, #100	; 0x64
 8004e82:	f00f fd5d 	bl	8014940 <osDelay>
}
 8004e86:	bf00      	nop
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	20004058 	.word	0x20004058

08004e94 <fram_SetProtectedBlocs>:
void fram_SetProtectedBlocs(fram_t *fram, uint8_t blocs)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	70fb      	strb	r3, [r7, #3]
   if(blocs > 3)
 8004ea0:	78fb      	ldrb	r3, [r7, #3]
 8004ea2:	2b03      	cmp	r3, #3
 8004ea4:	d901      	bls.n	8004eaa <fram_SetProtectedBlocs+0x16>
   {
      blocs = 3;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	70fb      	strb	r3, [r7, #3]
   }
   uint8_t data[2];
   data[0] = WRSR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	733b      	strb	r3, [r7, #12]
   data[1] = (blocs << 2);
 8004eae:	78fb      	ldrb	r3, [r7, #3]
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	737b      	strb	r3, [r7, #13]
   fram_SetWELBit(fram);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f7ff ffca 	bl	8004e50 <fram_SetWELBit>
   fram_CsLow(fram);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f7ff ffa7 	bl	8004e10 <fram_CsLow>
   HAL_SPI_Transmit(fram->fram_spi, data, 2, 1000);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6818      	ldr	r0, [r3, #0]
 8004ec6:	f107 010c 	add.w	r1, r7, #12
 8004eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ece:	2202      	movs	r2, #2
 8004ed0:	f00b fa01 	bl	80102d6 <HAL_SPI_Transmit>
   fram_CsHigh(fram);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f7ff ffab 	bl	8004e30 <fram_CsHigh>
}
 8004eda:	bf00      	nop
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <fram_Read32>:
uint32_t fram_Read32(fram_t *fram, uint32_t Address)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b084      	sub	sp, #16
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
 8004eea:	6039      	str	r1, [r7, #0]
   uint8_t Temp[4];
   fram_Read(fram, Address, Temp, 4);
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	b299      	uxth	r1, r3
 8004ef0:	f107 020c 	add.w	r2, r7, #12
 8004ef4:	2304      	movs	r3, #4
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f8a7 	bl	800504a <fram_Read>
   return ((Temp[0] << 24) | (Temp[1] << 16) | (Temp[2] << 8) | Temp[3]);
 8004efc:	7b3b      	ldrb	r3, [r7, #12]
 8004efe:	061a      	lsls	r2, r3, #24
 8004f00:	7b7b      	ldrb	r3, [r7, #13]
 8004f02:	041b      	lsls	r3, r3, #16
 8004f04:	431a      	orrs	r2, r3
 8004f06:	7bbb      	ldrb	r3, [r7, #14]
 8004f08:	021b      	lsls	r3, r3, #8
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	7bfa      	ldrb	r2, [r7, #15]
 8004f0e:	4313      	orrs	r3, r2
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3710      	adds	r7, #16
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <fram_Write32>:
void fram_Write32(fram_t *fram, uint32_t Address, uint32_t Data)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b086      	sub	sp, #24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
   uint8_t Temp[4];
   Temp[0] = ((Data >> 24) & 0xff);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	0e1b      	lsrs	r3, r3, #24
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	753b      	strb	r3, [r7, #20]
   Temp[1] = ((Data >> 16) & 0xff);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	0c1b      	lsrs	r3, r3, #16
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	757b      	strb	r3, [r7, #21]
   Temp[2] = ((Data >> 8) & 0xff);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	0a1b      	lsrs	r3, r3, #8
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	75bb      	strb	r3, [r7, #22]
   Temp[3] = ((Data >> 0) & 0xff);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	75fb      	strb	r3, [r7, #23]
   fram_Write(fram, Address, Temp, 4);
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	b299      	uxth	r1, r3
 8004f46:	f107 0214 	add.w	r2, r7, #20
 8004f4a:	2304      	movs	r3, #4
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f000 f84d 	bl	8004fec <fram_Write>
}
 8004f52:	bf00      	nop
 8004f54:	3718      	adds	r7, #24
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <fram_Increment32>:
   {
      fram_Write(fram, i, &Temp, 1);
   }
}
FramStatus_TypeDef fram_Increment32(fram_t *fram, uint32_t Address)
{
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b084      	sub	sp, #16
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
 8004f62:	6039      	str	r1, [r7, #0]
   uint32_t Temp = 0, Confirm = 0;
 8004f64:	2300      	movs	r3, #0
 8004f66:	60fb      	str	r3, [r7, #12]
 8004f68:	2300      	movs	r3, #0
 8004f6a:	60bb      	str	r3, [r7, #8]
   Temp = fram_Read32(fram, Address);
 8004f6c:	6839      	ldr	r1, [r7, #0]
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f7ff ffb7 	bl	8004ee2 <fram_Read32>
 8004f74:	60f8      	str	r0, [r7, #12]
   Temp++;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	3301      	adds	r3, #1
 8004f7a:	60fb      	str	r3, [r7, #12]
   fram_Write32(fram, Address, Temp);
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	6839      	ldr	r1, [r7, #0]
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f7ff ffc9 	bl	8004f18 <fram_Write32>
   Confirm = fram_Read32(fram, Address);
 8004f86:	6839      	ldr	r1, [r7, #0]
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f7ff ffaa 	bl	8004ee2 <fram_Read32>
 8004f8e:	60b8      	str	r0, [r7, #8]
   if(Temp == Confirm)
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d101      	bne.n	8004f9c <fram_Increment32+0x42>
   {
      return FRAM_OK;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e000      	b.n	8004f9e <fram_Increment32+0x44>
   }
   else
   {
      return FRAM_ERROR;
 8004f9c:	2300      	movs	r3, #0
   }
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3710      	adds	r7, #16
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <fram_ReadSreg>:
uint8_t fram_ReadSreg(fram_t *fram)
{
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b084      	sub	sp, #16
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
   fram_CsLow(fram);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f7ff ff2e 	bl	8004e10 <fram_CsLow>
   uint8_t _sreg;
   uint8_t com = RDSR;
 8004fb4:	2305      	movs	r3, #5
 8004fb6:	73bb      	strb	r3, [r7, #14]
   HAL_SPI_Transmit(fram->fram_spi, &com, 1, 1000);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6818      	ldr	r0, [r3, #0]
 8004fbc:	f107 010e 	add.w	r1, r7, #14
 8004fc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f00b f986 	bl	80102d6 <HAL_SPI_Transmit>
   HAL_SPI_Receive(fram->fram_spi, &_sreg, 1, 1000);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6818      	ldr	r0, [r3, #0]
 8004fce:	f107 010f 	add.w	r1, r7, #15
 8004fd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f00b faeb 	bl	80105b2 <HAL_SPI_Receive>
   fram_CsHigh(fram);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f7ff ff27 	bl	8004e30 <fram_CsHigh>
   return _sreg;
 8004fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3710      	adds	r7, #16
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <fram_Write>:
void fram_Write(fram_t *fram, uint16_t addr, uint8_t *buff, uint16_t length)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b086      	sub	sp, #24
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	607a      	str	r2, [r7, #4]
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	817b      	strh	r3, [r7, #10]
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	813b      	strh	r3, [r7, #8]
   fram_SetWELBit(fram);
 8005000:	68f8      	ldr	r0, [r7, #12]
 8005002:	f7ff ff25 	bl	8004e50 <fram_SetWELBit>
   uint8_t data[3];
   data[0] = WRITE;
 8005006:	2302      	movs	r3, #2
 8005008:	753b      	strb	r3, [r7, #20]
   data[1] = (addr & 0xff) >> 8;
 800500a:	2300      	movs	r3, #0
 800500c:	757b      	strb	r3, [r7, #21]
   data[2] = addr & 0xff;
 800500e:	897b      	ldrh	r3, [r7, #10]
 8005010:	b2db      	uxtb	r3, r3
 8005012:	75bb      	strb	r3, [r7, #22]
   fram_CsLow(fram);
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f7ff fefb 	bl	8004e10 <fram_CsLow>
   HAL_SPI_Transmit(fram->fram_spi, data, 3, 1000);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6818      	ldr	r0, [r3, #0]
 800501e:	f107 0114 	add.w	r1, r7, #20
 8005022:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005026:	2203      	movs	r2, #3
 8005028:	f00b f955 	bl	80102d6 <HAL_SPI_Transmit>
   HAL_SPI_Transmit(fram->fram_spi, buff, length, 1000);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6818      	ldr	r0, [r3, #0]
 8005030:	893a      	ldrh	r2, [r7, #8]
 8005032:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005036:	6879      	ldr	r1, [r7, #4]
 8005038:	f00b f94d 	bl	80102d6 <HAL_SPI_Transmit>
   fram_CsHigh(fram);
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	f7ff fef7 	bl	8004e30 <fram_CsHigh>
}
 8005042:	bf00      	nop
 8005044:	3718      	adds	r7, #24
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <fram_Read>:
void fram_Read(fram_t *fram, uint16_t addr, uint8_t *buff, uint16_t length)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b086      	sub	sp, #24
 800504e:	af00      	add	r7, sp, #0
 8005050:	60f8      	str	r0, [r7, #12]
 8005052:	607a      	str	r2, [r7, #4]
 8005054:	461a      	mov	r2, r3
 8005056:	460b      	mov	r3, r1
 8005058:	817b      	strh	r3, [r7, #10]
 800505a:	4613      	mov	r3, r2
 800505c:	813b      	strh	r3, [r7, #8]
   fram_SetWELBit(fram);
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f7ff fef6 	bl	8004e50 <fram_SetWELBit>
   uint8_t data[3];
   data[0] = READ;
 8005064:	2303      	movs	r3, #3
 8005066:	753b      	strb	r3, [r7, #20]
   data[1] = (addr & 0xff) >> 8;
 8005068:	2300      	movs	r3, #0
 800506a:	757b      	strb	r3, [r7, #21]
   data[2] = addr & 0xff;
 800506c:	897b      	ldrh	r3, [r7, #10]
 800506e:	b2db      	uxtb	r3, r3
 8005070:	75bb      	strb	r3, [r7, #22]
   fram_CsLow(fram);
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f7ff fecc 	bl	8004e10 <fram_CsLow>
   HAL_SPI_Transmit(fram->fram_spi, data, 3, 1000);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6818      	ldr	r0, [r3, #0]
 800507c:	f107 0114 	add.w	r1, r7, #20
 8005080:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005084:	2203      	movs	r2, #3
 8005086:	f00b f926 	bl	80102d6 <HAL_SPI_Transmit>
   HAL_SPI_Receive(fram->fram_spi, buff, length, 1000);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6818      	ldr	r0, [r3, #0]
 800508e:	893a      	ldrh	r2, [r7, #8]
 8005090:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005094:	6879      	ldr	r1, [r7, #4]
 8005096:	f00b fa8c 	bl	80105b2 <HAL_SPI_Receive>
   fram_CsHigh(fram);
 800509a:	68f8      	ldr	r0, [r7, #12]
 800509c:	f7ff fec8 	bl	8004e30 <fram_CsHigh>
}
 80050a0:	bf00      	nop
 80050a2:	3718      	adds	r7, #24
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <fram_ReadID>:
uint32_t fram_ReadID(fram_t *fram)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
   uint8_t com, id[4];
   com = RDID;
 80050b0:	239f      	movs	r3, #159	; 0x9f
 80050b2:	73fb      	strb	r3, [r7, #15]
   fram_CsLow(fram);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f7ff feab 	bl	8004e10 <fram_CsLow>
   HAL_SPI_Transmit(fram->fram_spi, &com, 1, 1000);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6818      	ldr	r0, [r3, #0]
 80050be:	f107 010f 	add.w	r1, r7, #15
 80050c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80050c6:	2201      	movs	r2, #1
 80050c8:	f00b f905 	bl	80102d6 <HAL_SPI_Transmit>
   HAL_SPI_Receive(fram->fram_spi, id, 4, 1000);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6818      	ldr	r0, [r3, #0]
 80050d0:	f107 0108 	add.w	r1, r7, #8
 80050d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80050d8:	2204      	movs	r2, #4
 80050da:	f00b fa6a 	bl	80105b2 <HAL_SPI_Receive>
   fram_CsHigh(fram);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f7ff fea6 	bl	8004e30 <fram_CsHigh>
   return ((id[0] << 24) | (id[1] << 16) | (id[2] << 8) | id[3]);
 80050e4:	7a3b      	ldrb	r3, [r7, #8]
 80050e6:	061a      	lsls	r2, r3, #24
 80050e8:	7a7b      	ldrb	r3, [r7, #9]
 80050ea:	041b      	lsls	r3, r3, #16
 80050ec:	431a      	orrs	r2, r3
 80050ee:	7abb      	ldrb	r3, [r7, #10]
 80050f0:	021b      	lsls	r3, r3, #8
 80050f2:	4313      	orrs	r3, r2
 80050f4:	7afa      	ldrb	r2, [r7, #11]
 80050f6:	4313      	orrs	r3, r2
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <fram_Init>:
void fram_Init(fram_t *fram, SPI_HandleTypeDef *spi, GPIO_TypeDef *_hold_port, GPIO_TypeDef *_cs_port, GPIO_TypeDef *_wp_port, uint16_t _hold_pin,
               uint16_t _cs_pin, uint16_t _wp_pin)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
 800510c:	603b      	str	r3, [r7, #0]
   fram->fram_spi  = spi;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	68ba      	ldr	r2, [r7, #8]
 8005112:	601a      	str	r2, [r3, #0]
   fram->hold_port = _hold_port;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	605a      	str	r2, [r3, #4]
   fram->hold_pin  = _hold_pin;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	8bba      	ldrh	r2, [r7, #28]
 800511e:	821a      	strh	r2, [r3, #16]
   fram->cs_port   = _cs_port;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	683a      	ldr	r2, [r7, #0]
 8005124:	609a      	str	r2, [r3, #8]
   fram->cs_pin    = _cs_pin;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	8c3a      	ldrh	r2, [r7, #32]
 800512a:	825a      	strh	r2, [r3, #18]
   fram->wp_port   = _wp_port;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	69ba      	ldr	r2, [r7, #24]
 8005130:	60da      	str	r2, [r3, #12]
   fram->wp_pin    = _wp_pin;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005136:	829a      	strh	r2, [r3, #20]
   HAL_GPIO_WritePin(fram->hold_port, fram->hold_pin, 1);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6858      	ldr	r0, [r3, #4]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	8a1b      	ldrh	r3, [r3, #16]
 8005140:	2201      	movs	r2, #1
 8005142:	4619      	mov	r1, r3
 8005144:	f008 fec2 	bl	800decc <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(fram->wp_port, fram->wp_pin, 1);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	68d8      	ldr	r0, [r3, #12]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	8a9b      	ldrh	r3, [r3, #20]
 8005150:	2201      	movs	r2, #1
 8005152:	4619      	mov	r1, r3
 8005154:	f008 feba 	bl	800decc <HAL_GPIO_WritePin>
   fram_SetProtectedBlocs(fram, 0);
 8005158:	2100      	movs	r1, #0
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	f7ff fe9a 	bl	8004e94 <fram_SetProtectedBlocs>
   fram->sreg   = fram_ReadSreg(fram);
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f7ff ff20 	bl	8004fa6 <fram_ReadSreg>
 8005166:	4603      	mov	r3, r0
 8005168:	461a      	mov	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	759a      	strb	r2, [r3, #22]
   fram->framID = fram_ReadID(fram);
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f7ff ff9a 	bl	80050a8 <fram_ReadID>
 8005174:	4602      	mov	r2, r0
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	619a      	str	r2, [r3, #24]
}
 800517a:	bf00      	nop
 800517c:	3710      	adds	r7, #16
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
	...

08005184 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8005184:	b580      	push	{r7, lr}
 8005186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of ScreensDcMutex */
  ScreensDcMutexHandle = osMutexNew(&ScreensDcMutex_attributes);
 8005188:	4878      	ldr	r0, [pc, #480]	; (800536c <MX_FREERTOS_Init+0x1e8>)
 800518a:	f00f fda1 	bl	8014cd0 <osMutexNew>
 800518e:	4603      	mov	r3, r0
 8005190:	4a77      	ldr	r2, [pc, #476]	; (8005370 <MX_FREERTOS_Init+0x1ec>)
 8005192:	6013      	str	r3, [r2, #0]

  /* creation of SSD1306Mutex */
  SSD1306MutexHandle = osMutexNew(&SSD1306Mutex_attributes);
 8005194:	4877      	ldr	r0, [pc, #476]	; (8005374 <MX_FREERTOS_Init+0x1f0>)
 8005196:	f00f fd9b 	bl	8014cd0 <osMutexNew>
 800519a:	4603      	mov	r3, r0
 800519c:	4a76      	ldr	r2, [pc, #472]	; (8005378 <MX_FREERTOS_Init+0x1f4>)
 800519e:	6013      	str	r3, [r2, #0]

  /* creation of SPI1Mutex */
  SPI1MutexHandle = osMutexNew(&SPI1Mutex_attributes);
 80051a0:	4876      	ldr	r0, [pc, #472]	; (800537c <MX_FREERTOS_Init+0x1f8>)
 80051a2:	f00f fd95 	bl	8014cd0 <osMutexNew>
 80051a6:	4603      	mov	r3, r0
 80051a8:	4a75      	ldr	r2, [pc, #468]	; (8005380 <MX_FREERTOS_Init+0x1fc>)
 80051aa:	6013      	str	r3, [r2, #0]

  /* creation of E_PAPIERMutex */
  E_PAPIERMutexHandle = osMutexNew(&E_PAPIERMutex_attributes);
 80051ac:	4875      	ldr	r0, [pc, #468]	; (8005384 <MX_FREERTOS_Init+0x200>)
 80051ae:	f00f fd8f 	bl	8014cd0 <osMutexNew>
 80051b2:	4603      	mov	r3, r0
 80051b4:	4a74      	ldr	r2, [pc, #464]	; (8005388 <MX_FREERTOS_Init+0x204>)
 80051b6:	6013      	str	r3, [r2, #0]

  /* creation of BME280Mutex */
  BME280MutexHandle = osMutexNew(&BME280Mutex_attributes);
 80051b8:	4874      	ldr	r0, [pc, #464]	; (800538c <MX_FREERTOS_Init+0x208>)
 80051ba:	f00f fd89 	bl	8014cd0 <osMutexNew>
 80051be:	4603      	mov	r3, r0
 80051c0:	4a73      	ldr	r2, [pc, #460]	; (8005390 <MX_FREERTOS_Init+0x20c>)
 80051c2:	6013      	str	r3, [r2, #0]

  /* creation of MenuMutex */
  MenuMutexHandle = osMutexNew(&MenuMutex_attributes);
 80051c4:	4873      	ldr	r0, [pc, #460]	; (8005394 <MX_FREERTOS_Init+0x210>)
 80051c6:	f00f fd83 	bl	8014cd0 <osMutexNew>
 80051ca:	4603      	mov	r3, r0
 80051cc:	4a72      	ldr	r2, [pc, #456]	; (8005398 <MX_FREERTOS_Init+0x214>)
 80051ce:	6013      	str	r3, [r2, #0]

  /* creation of RTCMutex */
  RTCMutexHandle = osMutexNew(&RTCMutex_attributes);
 80051d0:	4872      	ldr	r0, [pc, #456]	; (800539c <MX_FREERTOS_Init+0x218>)
 80051d2:	f00f fd7d 	bl	8014cd0 <osMutexNew>
 80051d6:	4603      	mov	r3, r0
 80051d8:	4a71      	ldr	r2, [pc, #452]	; (80053a0 <MX_FREERTOS_Init+0x21c>)
 80051da:	6013      	str	r3, [r2, #0]

  /* creation of EncoderMutex */
  EncoderMutexHandle = osMutexNew(&EncoderMutex_attributes);
 80051dc:	4871      	ldr	r0, [pc, #452]	; (80053a4 <MX_FREERTOS_Init+0x220>)
 80051de:	f00f fd77 	bl	8014cd0 <osMutexNew>
 80051e2:	4603      	mov	r3, r0
 80051e4:	4a70      	ldr	r2, [pc, #448]	; (80053a8 <MX_FREERTOS_Init+0x224>)
 80051e6:	6013      	str	r3, [r2, #0]
   /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of MenuTimer */
  MenuTimerHandle = osTimerNew(MenuTimerCallback, osTimerOnce, NULL, &MenuTimer_attributes);
 80051e8:	4b70      	ldr	r3, [pc, #448]	; (80053ac <MX_FREERTOS_Init+0x228>)
 80051ea:	2200      	movs	r2, #0
 80051ec:	2100      	movs	r1, #0
 80051ee:	4870      	ldr	r0, [pc, #448]	; (80053b0 <MX_FREERTOS_Init+0x22c>)
 80051f0:	f00f fbd6 	bl	80149a0 <osTimerNew>
 80051f4:	4603      	mov	r3, r0
 80051f6:	4a6f      	ldr	r2, [pc, #444]	; (80053b4 <MX_FREERTOS_Init+0x230>)
 80051f8:	6013      	str	r3, [r2, #0]
   /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of MeasurmentQueue */
  MeasurmentQueueHandle = osMessageQueueNew (16, sizeof(MV_TypeDef), &MeasurmentQueue_attributes);
 80051fa:	4a6f      	ldr	r2, [pc, #444]	; (80053b8 <MX_FREERTOS_Init+0x234>)
 80051fc:	2130      	movs	r1, #48	; 0x30
 80051fe:	2010      	movs	r0, #16
 8005200:	f00f fe74 	bl	8014eec <osMessageQueueNew>
 8005204:	4603      	mov	r3, r0
 8005206:	4a6d      	ldr	r2, [pc, #436]	; (80053bc <MX_FREERTOS_Init+0x238>)
 8005208:	6013      	str	r3, [r2, #0]

  /* creation of MoonPhaseQueue */
  MoonPhaseQueueHandle = osMessageQueueNew (16, sizeof(double), &MoonPhaseQueue_attributes);
 800520a:	4a6d      	ldr	r2, [pc, #436]	; (80053c0 <MX_FREERTOS_Init+0x23c>)
 800520c:	2108      	movs	r1, #8
 800520e:	2010      	movs	r0, #16
 8005210:	f00f fe6c 	bl	8014eec <osMessageQueueNew>
 8005214:	4603      	mov	r3, r0
 8005216:	4a6b      	ldr	r2, [pc, #428]	; (80053c4 <MX_FREERTOS_Init+0x240>)
 8005218:	6013      	str	r3, [r2, #0]

  /* creation of ChartQueue */
  ChartQueueHandle = osMessageQueueNew (16, sizeof(ChartDateAndType_TypeDef), &ChartQueue_attributes);
 800521a:	4a6b      	ldr	r2, [pc, #428]	; (80053c8 <MX_FREERTOS_Init+0x244>)
 800521c:	2106      	movs	r1, #6
 800521e:	2010      	movs	r0, #16
 8005220:	f00f fe64 	bl	8014eec <osMessageQueueNew>
 8005224:	4603      	mov	r3, r0
 8005226:	4a69      	ldr	r2, [pc, #420]	; (80053cc <MX_FREERTOS_Init+0x248>)
 8005228:	6013      	str	r3, [r2, #0]

  /* creation of DataToSaveQueue */
  DataToSaveQueueHandle = osMessageQueueNew (16, sizeof(MV_TypeDef), &DataToSaveQueue_attributes);
 800522a:	4a69      	ldr	r2, [pc, #420]	; (80053d0 <MX_FREERTOS_Init+0x24c>)
 800522c:	2130      	movs	r1, #48	; 0x30
 800522e:	2010      	movs	r0, #16
 8005230:	f00f fe5c 	bl	8014eec <osMessageQueueNew>
 8005234:	4603      	mov	r3, r0
 8005236:	4a67      	ldr	r2, [pc, #412]	; (80053d4 <MX_FREERTOS_Init+0x250>)
 8005238:	6013      	str	r3, [r2, #0]

  /* creation of RfpMessageQueue */
  RfpMessageQueueHandle = osMessageQueueNew (16, sizeof(RfpMessage_TypeDef), &RfpMessageQueue_attributes);
 800523a:	4a67      	ldr	r2, [pc, #412]	; (80053d8 <MX_FREERTOS_Init+0x254>)
 800523c:	2104      	movs	r1, #4
 800523e:	2010      	movs	r0, #16
 8005240:	f00f fe54 	bl	8014eec <osMessageQueueNew>
 8005244:	4603      	mov	r3, r0
 8005246:	4a65      	ldr	r2, [pc, #404]	; (80053dc <MX_FREERTOS_Init+0x258>)
 8005248:	6013      	str	r3, [r2, #0]

  /* creation of ExternalMeasurmentQueue */
  ExternalMeasurmentQueueHandle = osMessageQueueNew (16, sizeof(MV_TypeDef), &ExternalMeasurmentQueue_attributes);
 800524a:	4a65      	ldr	r2, [pc, #404]	; (80053e0 <MX_FREERTOS_Init+0x25c>)
 800524c:	2130      	movs	r1, #48	; 0x30
 800524e:	2010      	movs	r0, #16
 8005250:	f00f fe4c 	bl	8014eec <osMessageQueueNew>
 8005254:	4603      	mov	r3, r0
 8005256:	4a63      	ldr	r2, [pc, #396]	; (80053e4 <MX_FREERTOS_Init+0x260>)
 8005258:	6013      	str	r3, [r2, #0]

  /* creation of SunriseQueue */
  SunriseQueueHandle = osMessageQueueNew (16, sizeof(Sunrise_TypeDef), &SunriseQueue_attributes);
 800525a:	4a63      	ldr	r2, [pc, #396]	; (80053e8 <MX_FREERTOS_Init+0x264>)
 800525c:	2118      	movs	r1, #24
 800525e:	2010      	movs	r0, #16
 8005260:	f00f fe44 	bl	8014eec <osMessageQueueNew>
 8005264:	4603      	mov	r3, r0
 8005266:	4a61      	ldr	r2, [pc, #388]	; (80053ec <MX_FREERTOS_Init+0x268>)
 8005268:	6013      	str	r3, [r2, #0]

  /* creation of WS2812Queue */
  WS2812QueueHandle = osMessageQueueNew (16, sizeof(Sunrise_TypeDef), &WS2812Queue_attributes);
 800526a:	4a61      	ldr	r2, [pc, #388]	; (80053f0 <MX_FREERTOS_Init+0x26c>)
 800526c:	2118      	movs	r1, #24
 800526e:	2010      	movs	r0, #16
 8005270:	f00f fe3c 	bl	8014eec <osMessageQueueNew>
 8005274:	4603      	mov	r3, r0
 8005276:	4a5f      	ldr	r2, [pc, #380]	; (80053f4 <MX_FREERTOS_Init+0x270>)
 8005278:	6013      	str	r3, [r2, #0]
   /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800527a:	4a5f      	ldr	r2, [pc, #380]	; (80053f8 <MX_FREERTOS_Init+0x274>)
 800527c:	2100      	movs	r1, #0
 800527e:	485f      	ldr	r0, [pc, #380]	; (80053fc <MX_FREERTOS_Init+0x278>)
 8005280:	f00f facc 	bl	801481c <osThreadNew>
 8005284:	4603      	mov	r3, r0
 8005286:	4a5e      	ldr	r2, [pc, #376]	; (8005400 <MX_FREERTOS_Init+0x27c>)
 8005288:	6013      	str	r3, [r2, #0]

  /* creation of InitAndTimeTask */
  InitAndTimeTaskHandle = osThreadNew(StartInitAndTimeTask, NULL, &InitAndTimeTask_attributes);
 800528a:	4a5e      	ldr	r2, [pc, #376]	; (8005404 <MX_FREERTOS_Init+0x280>)
 800528c:	2100      	movs	r1, #0
 800528e:	485e      	ldr	r0, [pc, #376]	; (8005408 <MX_FREERTOS_Init+0x284>)
 8005290:	f00f fac4 	bl	801481c <osThreadNew>
 8005294:	4603      	mov	r3, r0
 8005296:	4a5d      	ldr	r2, [pc, #372]	; (800540c <MX_FREERTOS_Init+0x288>)
 8005298:	6013      	str	r3, [r2, #0]

  /* creation of RfpTask */
  RfpTaskHandle = osThreadNew(StartRfpTask, NULL, &RfpTask_attributes);
 800529a:	4a5d      	ldr	r2, [pc, #372]	; (8005410 <MX_FREERTOS_Init+0x28c>)
 800529c:	2100      	movs	r1, #0
 800529e:	485d      	ldr	r0, [pc, #372]	; (8005414 <MX_FREERTOS_Init+0x290>)
 80052a0:	f00f fabc 	bl	801481c <osThreadNew>
 80052a4:	4603      	mov	r3, r0
 80052a6:	4a5c      	ldr	r2, [pc, #368]	; (8005418 <MX_FREERTOS_Init+0x294>)
 80052a8:	6013      	str	r3, [r2, #0]

  /* creation of MeasurmentTask */
  MeasurmentTaskHandle = osThreadNew(StartMeasurmentTask, NULL, &MeasurmentTask_attributes);
 80052aa:	4a5c      	ldr	r2, [pc, #368]	; (800541c <MX_FREERTOS_Init+0x298>)
 80052ac:	2100      	movs	r1, #0
 80052ae:	485c      	ldr	r0, [pc, #368]	; (8005420 <MX_FREERTOS_Init+0x29c>)
 80052b0:	f00f fab4 	bl	801481c <osThreadNew>
 80052b4:	4603      	mov	r3, r0
 80052b6:	4a5b      	ldr	r2, [pc, #364]	; (8005424 <MX_FREERTOS_Init+0x2a0>)
 80052b8:	6013      	str	r3, [r2, #0]

  /* creation of InternalMeasurmentTask */
  InternalMeasurmentTaskHandle = osThreadNew(StartInternalMeasurmentTask, NULL, &InternalMeasurmentTask_attributes);
 80052ba:	4a5b      	ldr	r2, [pc, #364]	; (8005428 <MX_FREERTOS_Init+0x2a4>)
 80052bc:	2100      	movs	r1, #0
 80052be:	485b      	ldr	r0, [pc, #364]	; (800542c <MX_FREERTOS_Init+0x2a8>)
 80052c0:	f00f faac 	bl	801481c <osThreadNew>
 80052c4:	4603      	mov	r3, r0
 80052c6:	4a5a      	ldr	r2, [pc, #360]	; (8005430 <MX_FREERTOS_Init+0x2ac>)
 80052c8:	6013      	str	r3, [r2, #0]

  /* creation of MoonPhaseTask */
  MoonPhaseTaskHandle = osThreadNew(StartMoonPhaseTask, NULL, &MoonPhaseTask_attributes);
 80052ca:	4a5a      	ldr	r2, [pc, #360]	; (8005434 <MX_FREERTOS_Init+0x2b0>)
 80052cc:	2100      	movs	r1, #0
 80052ce:	485a      	ldr	r0, [pc, #360]	; (8005438 <MX_FREERTOS_Init+0x2b4>)
 80052d0:	f00f faa4 	bl	801481c <osThreadNew>
 80052d4:	4603      	mov	r3, r0
 80052d6:	4a59      	ldr	r2, [pc, #356]	; (800543c <MX_FREERTOS_Init+0x2b8>)
 80052d8:	6013      	str	r3, [r2, #0]

  /* creation of E_PapierDrawingTask */
  E_PapierDrawingTaskHandle = osThreadNew(StartE_PapierDrawingTask, NULL, &E_PapierDrawingTask_attributes);
 80052da:	4a59      	ldr	r2, [pc, #356]	; (8005440 <MX_FREERTOS_Init+0x2bc>)
 80052dc:	2100      	movs	r1, #0
 80052de:	4859      	ldr	r0, [pc, #356]	; (8005444 <MX_FREERTOS_Init+0x2c0>)
 80052e0:	f00f fa9c 	bl	801481c <osThreadNew>
 80052e4:	4603      	mov	r3, r0
 80052e6:	4a58      	ldr	r2, [pc, #352]	; (8005448 <MX_FREERTOS_Init+0x2c4>)
 80052e8:	6013      	str	r3, [r2, #0]

  /* creation of E_PapierDisplayTask */
  E_PapierDisplayTaskHandle = osThreadNew(StartE_PapierDisplayTask, NULL, &E_PapierDisplayTask_attributes);
 80052ea:	4a58      	ldr	r2, [pc, #352]	; (800544c <MX_FREERTOS_Init+0x2c8>)
 80052ec:	2100      	movs	r1, #0
 80052ee:	4858      	ldr	r0, [pc, #352]	; (8005450 <MX_FREERTOS_Init+0x2cc>)
 80052f0:	f00f fa94 	bl	801481c <osThreadNew>
 80052f4:	4603      	mov	r3, r0
 80052f6:	4a57      	ldr	r2, [pc, #348]	; (8005454 <MX_FREERTOS_Init+0x2d0>)
 80052f8:	6013      	str	r3, [r2, #0]

  /* creation of MenuTask */
  MenuTaskHandle = osThreadNew(StartMenuTask, NULL, &MenuTask_attributes);
 80052fa:	4a57      	ldr	r2, [pc, #348]	; (8005458 <MX_FREERTOS_Init+0x2d4>)
 80052fc:	2100      	movs	r1, #0
 80052fe:	4857      	ldr	r0, [pc, #348]	; (800545c <MX_FREERTOS_Init+0x2d8>)
 8005300:	f00f fa8c 	bl	801481c <osThreadNew>
 8005304:	4603      	mov	r3, r0
 8005306:	4a56      	ldr	r2, [pc, #344]	; (8005460 <MX_FREERTOS_Init+0x2dc>)
 8005308:	6013      	str	r3, [r2, #0]

  /* creation of SaveMemoryTask */
  SaveMemoryTaskHandle = osThreadNew(StartSaveMemoryTask, NULL, &SaveMemoryTask_attributes);
 800530a:	4a56      	ldr	r2, [pc, #344]	; (8005464 <MX_FREERTOS_Init+0x2e0>)
 800530c:	2100      	movs	r1, #0
 800530e:	4856      	ldr	r0, [pc, #344]	; (8005468 <MX_FREERTOS_Init+0x2e4>)
 8005310:	f00f fa84 	bl	801481c <osThreadNew>
 8005314:	4603      	mov	r3, r0
 8005316:	4a55      	ldr	r2, [pc, #340]	; (800546c <MX_FREERTOS_Init+0x2e8>)
 8005318:	6013      	str	r3, [r2, #0]

  /* creation of ChartTask */
  ChartTaskHandle = osThreadNew(StartChartTask, NULL, &ChartTask_attributes);
 800531a:	4a55      	ldr	r2, [pc, #340]	; (8005470 <MX_FREERTOS_Init+0x2ec>)
 800531c:	2100      	movs	r1, #0
 800531e:	4855      	ldr	r0, [pc, #340]	; (8005474 <MX_FREERTOS_Init+0x2f0>)
 8005320:	f00f fa7c 	bl	801481c <osThreadNew>
 8005324:	4603      	mov	r3, r0
 8005326:	4a54      	ldr	r2, [pc, #336]	; (8005478 <MX_FREERTOS_Init+0x2f4>)
 8005328:	6013      	str	r3, [r2, #0]

  /* creation of RfpMessageTask */
  RfpMessageTaskHandle = osThreadNew(StartRfpMessageTask, NULL, &RfpMessageTask_attributes);
 800532a:	4a54      	ldr	r2, [pc, #336]	; (800547c <MX_FREERTOS_Init+0x2f8>)
 800532c:	2100      	movs	r1, #0
 800532e:	4854      	ldr	r0, [pc, #336]	; (8005480 <MX_FREERTOS_Init+0x2fc>)
 8005330:	f00f fa74 	bl	801481c <osThreadNew>
 8005334:	4603      	mov	r3, r0
 8005336:	4a53      	ldr	r2, [pc, #332]	; (8005484 <MX_FREERTOS_Init+0x300>)
 8005338:	6013      	str	r3, [r2, #0]

  /* creation of SunriseAndSunsetTask */
  SunriseAndSunsetTaskHandle = osThreadNew(StartSunriseAndSunsetTask, NULL, &SunriseAndSunsetTask_attributes);
 800533a:	4a53      	ldr	r2, [pc, #332]	; (8005488 <MX_FREERTOS_Init+0x304>)
 800533c:	2100      	movs	r1, #0
 800533e:	4853      	ldr	r0, [pc, #332]	; (800548c <MX_FREERTOS_Init+0x308>)
 8005340:	f00f fa6c 	bl	801481c <osThreadNew>
 8005344:	4603      	mov	r3, r0
 8005346:	4a52      	ldr	r2, [pc, #328]	; (8005490 <MX_FREERTOS_Init+0x30c>)
 8005348:	6013      	str	r3, [r2, #0]

  /* creation of WS2812Task */
  WS2812TaskHandle = osThreadNew(StartWS2812Task, NULL, &WS2812Task_attributes);
 800534a:	4a52      	ldr	r2, [pc, #328]	; (8005494 <MX_FREERTOS_Init+0x310>)
 800534c:	2100      	movs	r1, #0
 800534e:	4852      	ldr	r0, [pc, #328]	; (8005498 <MX_FREERTOS_Init+0x314>)
 8005350:	f00f fa64 	bl	801481c <osThreadNew>
 8005354:	4603      	mov	r3, r0
 8005356:	4a51      	ldr	r2, [pc, #324]	; (800549c <MX_FREERTOS_Init+0x318>)
 8005358:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
   /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* creation of C3V1Flags */
  C3V1FlagsHandle = osEventFlagsNew(&C3V1Flags_attributes);
 800535a:	4851      	ldr	r0, [pc, #324]	; (80054a0 <MX_FREERTOS_Init+0x31c>)
 800535c:	f00f fb9c 	bl	8014a98 <osEventFlagsNew>
 8005360:	4603      	mov	r3, r0
 8005362:	4a50      	ldr	r2, [pc, #320]	; (80054a4 <MX_FREERTOS_Init+0x320>)
 8005364:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
   /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8005366:	bf00      	nop
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	08024248 	.word	0x08024248
 8005370:	20004034 	.word	0x20004034
 8005374:	08024258 	.word	0x08024258
 8005378:	20004038 	.word	0x20004038
 800537c:	08024268 	.word	0x08024268
 8005380:	2000403c 	.word	0x2000403c
 8005384:	08024278 	.word	0x08024278
 8005388:	20004040 	.word	0x20004040
 800538c:	08024288 	.word	0x08024288
 8005390:	20004044 	.word	0x20004044
 8005394:	08024298 	.word	0x08024298
 8005398:	20004048 	.word	0x20004048
 800539c:	080242a8 	.word	0x080242a8
 80053a0:	2000404c 	.word	0x2000404c
 80053a4:	080242b8 	.word	0x080242b8
 80053a8:	20004050 	.word	0x20004050
 80053ac:	08024238 	.word	0x08024238
 80053b0:	08008859 	.word	0x08008859
 80053b4:	20004030 	.word	0x20004030
 80053b8:	08024178 	.word	0x08024178
 80053bc:	20004010 	.word	0x20004010
 80053c0:	08024190 	.word	0x08024190
 80053c4:	20004014 	.word	0x20004014
 80053c8:	080241a8 	.word	0x080241a8
 80053cc:	20004018 	.word	0x20004018
 80053d0:	080241c0 	.word	0x080241c0
 80053d4:	2000401c 	.word	0x2000401c
 80053d8:	080241d8 	.word	0x080241d8
 80053dc:	20004020 	.word	0x20004020
 80053e0:	080241f0 	.word	0x080241f0
 80053e4:	20004024 	.word	0x20004024
 80053e8:	08024208 	.word	0x08024208
 80053ec:	20004028 	.word	0x20004028
 80053f0:	08024220 	.word	0x08024220
 80053f4:	2000402c 	.word	0x2000402c
 80053f8:	08023f80 	.word	0x08023f80
 80053fc:	080054a9 	.word	0x080054a9
 8005400:	20003fd8 	.word	0x20003fd8
 8005404:	08023fa4 	.word	0x08023fa4
 8005408:	080054d1 	.word	0x080054d1
 800540c:	20003fdc 	.word	0x20003fdc
 8005410:	08023fc8 	.word	0x08023fc8
 8005414:	08005849 	.word	0x08005849
 8005418:	20003fe0 	.word	0x20003fe0
 800541c:	08023fec 	.word	0x08023fec
 8005420:	0800587d 	.word	0x0800587d
 8005424:	20003fe4 	.word	0x20003fe4
 8005428:	08024010 	.word	0x08024010
 800542c:	080058e1 	.word	0x080058e1
 8005430:	20003fe8 	.word	0x20003fe8
 8005434:	08024034 	.word	0x08024034
 8005438:	080059b1 	.word	0x080059b1
 800543c:	20003fec 	.word	0x20003fec
 8005440:	08024058 	.word	0x08024058
 8005444:	08005b2d 	.word	0x08005b2d
 8005448:	20003ff0 	.word	0x20003ff0
 800544c:	0802407c 	.word	0x0802407c
 8005450:	080062b5 	.word	0x080062b5
 8005454:	20003ff4 	.word	0x20003ff4
 8005458:	080240a0 	.word	0x080240a0
 800545c:	08006345 	.word	0x08006345
 8005460:	20003ff8 	.word	0x20003ff8
 8005464:	080240c4 	.word	0x080240c4
 8005468:	08006389 	.word	0x08006389
 800546c:	20003ffc 	.word	0x20003ffc
 8005470:	080240e8 	.word	0x080240e8
 8005474:	08006b31 	.word	0x08006b31
 8005478:	20004000 	.word	0x20004000
 800547c:	0802410c 	.word	0x0802410c
 8005480:	0800868d 	.word	0x0800868d
 8005484:	20004004 	.word	0x20004004
 8005488:	08024130 	.word	0x08024130
 800548c:	08008725 	.word	0x08008725
 8005490:	20004008 	.word	0x20004008
 8005494:	08024154 	.word	0x08024154
 8005498:	08008829 	.word	0x08008829
 800549c:	2000400c 	.word	0x2000400c
 80054a0:	080242c8 	.word	0x080242c8
 80054a4:	20004054 	.word	0x20004054

080054a8 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
   /* Infinite loop */
   for(;;)
   {
      HAL_GPIO_TogglePin(HEARTBEAT_GPIO_Port, HEARTBEAT_Pin);
 80054b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80054b4:	4804      	ldr	r0, [pc, #16]	; (80054c8 <StartDefaultTask+0x20>)
 80054b6:	f008 fd21 	bl	800defc <HAL_GPIO_TogglePin>
      HAL_IWDG_Refresh(&hiwdg);
 80054ba:	4804      	ldr	r0, [pc, #16]	; (80054cc <StartDefaultTask+0x24>)
 80054bc:	f008 fd87 	bl	800dfce <HAL_IWDG_Refresh>
      osDelay(100);
 80054c0:	2064      	movs	r0, #100	; 0x64
 80054c2:	f00f fa3d 	bl	8014940 <osDelay>
      HAL_GPIO_TogglePin(HEARTBEAT_GPIO_Port, HEARTBEAT_Pin);
 80054c6:	e7f3      	b.n	80054b0 <StartDefaultTask+0x8>
 80054c8:	48000400 	.word	0x48000400
 80054cc:	20004058 	.word	0x20004058

080054d0 <StartInitAndTimeTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartInitAndTimeTask */
void StartInitAndTimeTask(void *argument)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b0a6      	sub	sp, #152	; 0x98
 80054d4:	af04      	add	r7, sp, #16
 80054d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartInitAndTimeTask */
   RFP_Init(&Rfp, RFP_IDWS);
 80054d8:	2103      	movs	r1, #3
 80054da:	48bd      	ldr	r0, [pc, #756]	; (80057d0 <StartInitAndTimeTask+0x300>)
 80054dc:	f006 fc78 	bl	800bdd0 <RFP_Init>
   e_papier_init(&hspi1);
 80054e0:	48bc      	ldr	r0, [pc, #752]	; (80057d4 <StartInitAndTimeTask+0x304>)
 80054e2:	f7ff fa8f 	bl	8004a04 <e_papier_init>
   ssd1306_init(&hspi1);
 80054e6:	48bb      	ldr	r0, [pc, #748]	; (80057d4 <StartInitAndTimeTask+0x304>)
 80054e8:	f007 f976 	bl	800c7d8 <ssd1306_init>
   taskENTER_CRITICAL();
 80054ec:	f012 ff1a 	bl	8018324 <vPortEnterCritical>
   BME280_Init(&Bme, &hspi1, BME280_CS_GPIO_Port, BME280_CS_Pin);
 80054f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80054f4:	4ab8      	ldr	r2, [pc, #736]	; (80057d8 <StartInitAndTimeTask+0x308>)
 80054f6:	49b7      	ldr	r1, [pc, #732]	; (80057d4 <StartInitAndTimeTask+0x304>)
 80054f8:	48b8      	ldr	r0, [pc, #736]	; (80057dc <StartInitAndTimeTask+0x30c>)
 80054fa:	f7fe ff1d 	bl	8004338 <BME280_Init>
   GFX_SetFont(font_8x5);
 80054fe:	48b8      	ldr	r0, [pc, #736]	; (80057e0 <StartInitAndTimeTask+0x310>)
 8005500:	f7fb fe0a 	bl	8001118 <GFX_SetFont>
   RFP_RegisterDataFunction(RFP_DataFunction);
 8005504:	48b7      	ldr	r0, [pc, #732]	; (80057e4 <StartInitAndTimeTask+0x314>)
 8005506:	f006 fce3 	bl	800bed0 <RFP_RegisterDataFunction>
   MENU_Init();
 800550a:	f7fc fb9f 	bl	8001c4c <MENU_Init>
   fram_Init(&Fram, &hspi1, FRAM_HOLD_GPIO_Port, FRAM_CS_GPIO_Port, FRAM_WP_GPIO_Port, FRAM_HOLD_Pin, FRAM_CS_Pin, FRAM_WP_Pin);
 800550e:	2380      	movs	r3, #128	; 0x80
 8005510:	9303      	str	r3, [sp, #12]
 8005512:	2340      	movs	r3, #64	; 0x40
 8005514:	9302      	str	r3, [sp, #8]
 8005516:	f44f 7380 	mov.w	r3, #256	; 0x100
 800551a:	9301      	str	r3, [sp, #4]
 800551c:	4bae      	ldr	r3, [pc, #696]	; (80057d8 <StartInitAndTimeTask+0x308>)
 800551e:	9300      	str	r3, [sp, #0]
 8005520:	4bad      	ldr	r3, [pc, #692]	; (80057d8 <StartInitAndTimeTask+0x308>)
 8005522:	4aad      	ldr	r2, [pc, #692]	; (80057d8 <StartInitAndTimeTask+0x308>)
 8005524:	49ab      	ldr	r1, [pc, #684]	; (80057d4 <StartInitAndTimeTask+0x304>)
 8005526:	48b0      	ldr	r0, [pc, #704]	; (80057e8 <StartInitAndTimeTask+0x318>)
 8005528:	f7ff fdea 	bl	8005100 <fram_Init>
   flash_Init(&Flash, &hspi1, FLASH_CS_GPIO_Port, FLASH_CS_Pin);
 800552c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005530:	4aa9      	ldr	r2, [pc, #676]	; (80057d8 <StartInitAndTimeTask+0x308>)
 8005532:	49a8      	ldr	r1, [pc, #672]	; (80057d4 <StartInitAndTimeTask+0x304>)
 8005534:	48ad      	ldr	r0, [pc, #692]	; (80057ec <StartInitAndTimeTask+0x31c>)
 8005536:	f7ff fc51 	bl	8004ddc <flash_Init>
   //   fram_ChipErase(&Fram);
   //   HAL_IWDG_Refresh(&hiwdg);
   //   flash_ChipErase(&Flash);
   EF_SetFont(&timesNewRoman_12ptFontInfo);
 800553a:	48ad      	ldr	r0, [pc, #692]	; (80057f0 <StartInitAndTimeTask+0x320>)
 800553c:	f7fc f852 	bl	80015e4 <EF_SetFont>
   EF_PutString((uint8_t *)"WITAJ W PROJEKCIE INŻYNIERSKIM", 0, 0, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8005540:	2301      	movs	r3, #1
 8005542:	9302      	str	r3, [sp, #8]
 8005544:	2301      	movs	r3, #1
 8005546:	9301      	str	r3, [sp, #4]
 8005548:	2300      	movs	r3, #0
 800554a:	9300      	str	r3, [sp, #0]
 800554c:	2300      	movs	r3, #0
 800554e:	2200      	movs	r2, #0
 8005550:	2100      	movs	r1, #0
 8005552:	48a8      	ldr	r0, [pc, #672]	; (80057f4 <StartInitAndTimeTask+0x324>)
 8005554:	f7fc fa60 	bl	8001a18 <EF_PutString>
   EF_PutString((uint8_t *)"NA TEN MOMENT TRWA INICJALIZACJA", 0, 20, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8005558:	2301      	movs	r3, #1
 800555a:	9302      	str	r3, [sp, #8]
 800555c:	2301      	movs	r3, #1
 800555e:	9301      	str	r3, [sp, #4]
 8005560:	2300      	movs	r3, #0
 8005562:	9300      	str	r3, [sp, #0]
 8005564:	2300      	movs	r3, #0
 8005566:	2214      	movs	r2, #20
 8005568:	2100      	movs	r1, #0
 800556a:	48a3      	ldr	r0, [pc, #652]	; (80057f8 <StartInitAndTimeTask+0x328>)
 800556c:	f7fc fa54 	bl	8001a18 <EF_PutString>
   EF_PutString((uint8_t *)"ZA OKO??O 2 MINUTY POJAWIĄ SI?? WINIKI", 0, 40, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8005570:	2301      	movs	r3, #1
 8005572:	9302      	str	r3, [sp, #8]
 8005574:	2301      	movs	r3, #1
 8005576:	9301      	str	r3, [sp, #4]
 8005578:	2300      	movs	r3, #0
 800557a:	9300      	str	r3, [sp, #0]
 800557c:	2300      	movs	r3, #0
 800557e:	2228      	movs	r2, #40	; 0x28
 8005580:	2100      	movs	r1, #0
 8005582:	489e      	ldr	r0, [pc, #632]	; (80057fc <StartInitAndTimeTask+0x32c>)
 8005584:	f7fc fa48 	bl	8001a18 <EF_PutString>
   EF_PutString((uint8_t *)"SPRAWDŹ ZIELONĄ DIDE!", 0, 80, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8005588:	2301      	movs	r3, #1
 800558a:	9302      	str	r3, [sp, #8]
 800558c:	2301      	movs	r3, #1
 800558e:	9301      	str	r3, [sp, #4]
 8005590:	2300      	movs	r3, #0
 8005592:	9300      	str	r3, [sp, #0]
 8005594:	2300      	movs	r3, #0
 8005596:	2250      	movs	r2, #80	; 0x50
 8005598:	2100      	movs	r1, #0
 800559a:	4899      	ldr	r0, [pc, #612]	; (8005800 <StartInitAndTimeTask+0x330>)
 800559c:	f7fc fa3c 	bl	8001a18 <EF_PutString>
   EF_PutString((uint8_t *)"JEŻELI MIGA TO WSZYSTKO DOBRZE", 0, 100, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 80055a0:	2301      	movs	r3, #1
 80055a2:	9302      	str	r3, [sp, #8]
 80055a4:	2301      	movs	r3, #1
 80055a6:	9301      	str	r3, [sp, #4]
 80055a8:	2300      	movs	r3, #0
 80055aa:	9300      	str	r3, [sp, #0]
 80055ac:	2300      	movs	r3, #0
 80055ae:	2264      	movs	r2, #100	; 0x64
 80055b0:	2100      	movs	r1, #0
 80055b2:	4894      	ldr	r0, [pc, #592]	; (8005804 <StartInitAndTimeTask+0x334>)
 80055b4:	f7fc fa30 	bl	8001a18 <EF_PutString>
   EF_PutString((uint8_t *)"JEŻELI NIE TO NALEŻY WCISĄĆ RESET", 0, 120, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 80055b8:	2301      	movs	r3, #1
 80055ba:	9302      	str	r3, [sp, #8]
 80055bc:	2301      	movs	r3, #1
 80055be:	9301      	str	r3, [sp, #4]
 80055c0:	2300      	movs	r3, #0
 80055c2:	9300      	str	r3, [sp, #0]
 80055c4:	2300      	movs	r3, #0
 80055c6:	2278      	movs	r2, #120	; 0x78
 80055c8:	2100      	movs	r1, #0
 80055ca:	488f      	ldr	r0, [pc, #572]	; (8005808 <StartInitAndTimeTask+0x338>)
 80055cc:	f7fc fa24 	bl	8001a18 <EF_PutString>
   EF_PutString((uint8_t *)"FIRMWARE VERSION: 3.2", 0, 260, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 80055d0:	2301      	movs	r3, #1
 80055d2:	9302      	str	r3, [sp, #8]
 80055d4:	2301      	movs	r3, #1
 80055d6:	9301      	str	r3, [sp, #4]
 80055d8:	2300      	movs	r3, #0
 80055da:	9300      	str	r3, [sp, #0]
 80055dc:	2300      	movs	r3, #0
 80055de:	f44f 7282 	mov.w	r2, #260	; 0x104
 80055e2:	2100      	movs	r1, #0
 80055e4:	4889      	ldr	r0, [pc, #548]	; (800580c <StartInitAndTimeTask+0x33c>)
 80055e6:	f7fc fa17 	bl	8001a18 <EF_PutString>
   EF_PutString((uint8_t *)"HARDWARE VERSION: 1.2", 0, 280, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 80055ea:	2301      	movs	r3, #1
 80055ec:	9302      	str	r3, [sp, #8]
 80055ee:	2301      	movs	r3, #1
 80055f0:	9301      	str	r3, [sp, #4]
 80055f2:	2300      	movs	r3, #0
 80055f4:	9300      	str	r3, [sp, #0]
 80055f6:	2300      	movs	r3, #0
 80055f8:	f44f 728c 	mov.w	r2, #280	; 0x118
 80055fc:	2100      	movs	r1, #0
 80055fe:	4884      	ldr	r0, [pc, #528]	; (8005810 <StartInitAndTimeTask+0x340>)
 8005600:	f7fc fa0a 	bl	8001a18 <EF_PutString>
   EF_PutString((uint8_t *)"AUTOR: MARCIN WOJEWODZIC", 0, 220, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8005604:	2301      	movs	r3, #1
 8005606:	9302      	str	r3, [sp, #8]
 8005608:	2301      	movs	r3, #1
 800560a:	9301      	str	r3, [sp, #4]
 800560c:	2300      	movs	r3, #0
 800560e:	9300      	str	r3, [sp, #0]
 8005610:	2300      	movs	r3, #0
 8005612:	22dc      	movs	r2, #220	; 0xdc
 8005614:	2100      	movs	r1, #0
 8005616:	487f      	ldr	r0, [pc, #508]	; (8005814 <StartInitAndTimeTask+0x344>)
 8005618:	f7fc f9fe 	bl	8001a18 <EF_PutString>
   EF_PutString((uint8_t *)"PROMOTOR: Dr Inż. MARCIN RODZIEWICZ", 0, 240, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 800561c:	2301      	movs	r3, #1
 800561e:	9302      	str	r3, [sp, #8]
 8005620:	2301      	movs	r3, #1
 8005622:	9301      	str	r3, [sp, #4]
 8005624:	2300      	movs	r3, #0
 8005626:	9300      	str	r3, [sp, #0]
 8005628:	2300      	movs	r3, #0
 800562a:	22f0      	movs	r2, #240	; 0xf0
 800562c:	2100      	movs	r1, #0
 800562e:	487a      	ldr	r0, [pc, #488]	; (8005818 <StartInitAndTimeTask+0x348>)
 8005630:	f7fc f9f2 	bl	8001a18 <EF_PutString>
   e_papier_display();
 8005634:	f7ff f968 	bl	8004908 <e_papier_display>
   taskEXIT_CRITICAL();
 8005638:	f012 fea4 	bl	8018384 <vPortExitCritical>
   osEventFlagsSet(C3V1FlagsHandle, INITIALIZE_ALL_FLAG);
 800563c:	4b77      	ldr	r3, [pc, #476]	; (800581c <StartInitAndTimeTask+0x34c>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2102      	movs	r1, #2
 8005642:	4618      	mov	r0, r3
 8005644:	f00f fa68 	bl	8014b18 <osEventFlagsSet>
   RTC_TimeTypeDef RtcTime;
   RTC_DateTypeDef RtcDate;
   RTC_DateTypeDef ActualRtcDate = { 0 };
 8005648:	2300      	movs	r3, #0
 800564a:	66fb      	str	r3, [r7, #108]	; 0x6c
   char data[100];
   /* Infinite loop */
   for(;;)
   {
      osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 800564c:	4b73      	ldr	r3, [pc, #460]	; (800581c <StartInitAndTimeTask+0x34c>)
 800564e:	6818      	ldr	r0, [r3, #0]
 8005650:	f04f 33ff 	mov.w	r3, #4294967295
 8005654:	2202      	movs	r2, #2
 8005656:	2102      	movs	r1, #2
 8005658:	f00f fad4 	bl	8014c04 <osEventFlagsWait>
      osMutexAcquire(MenuMutexHandle, osWaitForever);
 800565c:	4b70      	ldr	r3, [pc, #448]	; (8005820 <StartInitAndTimeTask+0x350>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f04f 31ff 	mov.w	r1, #4294967295
 8005664:	4618      	mov	r0, r3
 8005666:	f00f fbb9 	bl	8014ddc <osMutexAcquire>
      osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 800566a:	4b6e      	ldr	r3, [pc, #440]	; (8005824 <StartInitAndTimeTask+0x354>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f04f 31ff 	mov.w	r1, #4294967295
 8005672:	4618      	mov	r0, r3
 8005674:	f00f fbb2 	bl	8014ddc <osMutexAcquire>
      osMutexAcquire(SSD1306MutexHandle, osWaitForever);
 8005678:	4b6b      	ldr	r3, [pc, #428]	; (8005828 <StartInitAndTimeTask+0x358>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f04f 31ff 	mov.w	r1, #4294967295
 8005680:	4618      	mov	r0, r3
 8005682:	f00f fbab 	bl	8014ddc <osMutexAcquire>
      osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8005686:	4b69      	ldr	r3, [pc, #420]	; (800582c <StartInitAndTimeTask+0x35c>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f04f 31ff 	mov.w	r1, #4294967295
 800568e:	4618      	mov	r0, r3
 8005690:	f00f fba4 	bl	8014ddc <osMutexAcquire>
      ssd1306_clear();
 8005694:	f007 f894 	bl	800c7c0 <ssd1306_clear>
      osMutexAcquire(RTCMutexHandle, osWaitForever);
 8005698:	4b65      	ldr	r3, [pc, #404]	; (8005830 <StartInitAndTimeTask+0x360>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f04f 31ff 	mov.w	r1, #4294967295
 80056a0:	4618      	mov	r0, r3
 80056a2:	f00f fb9b 	bl	8014ddc <osMutexAcquire>
      HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 80056a6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80056aa:	2200      	movs	r2, #0
 80056ac:	4619      	mov	r1, r3
 80056ae:	4861      	ldr	r0, [pc, #388]	; (8005834 <StartInitAndTimeTask+0x364>)
 80056b0:	f00a fb62 	bl	800fd78 <HAL_RTC_GetTime>
      HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 80056b4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80056b8:	2200      	movs	r2, #0
 80056ba:	4619      	mov	r1, r3
 80056bc:	485d      	ldr	r0, [pc, #372]	; (8005834 <StartInitAndTimeTask+0x364>)
 80056be:	f00a fc45 	bl	800ff4c <HAL_RTC_GetDate>
      osMutexRelease(RTCMutexHandle);
 80056c2:	4b5b      	ldr	r3, [pc, #364]	; (8005830 <StartInitAndTimeTask+0x360>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4618      	mov	r0, r3
 80056c8:	f00f fbd3 	bl	8014e72 <osMutexRelease>
      sprintf(data, "%d : %d", RtcTime.Hours, RtcTime.Minutes);
 80056cc:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 80056d0:	461a      	mov	r2, r3
 80056d2:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 80056d6:	f107 0008 	add.w	r0, r7, #8
 80056da:	4957      	ldr	r1, [pc, #348]	; (8005838 <StartInitAndTimeTask+0x368>)
 80056dc:	f006 fb40 	bl	800bd60 <sprintf_>
      EF_SetFont(&timesNewRoman_22ptFontInfo);
 80056e0:	4856      	ldr	r0, [pc, #344]	; (800583c <StartInitAndTimeTask+0x36c>)
 80056e2:	f7fb ff7f 	bl	80015e4 <EF_SetFont>
      if(RtcTime.Hours > 10)
 80056e6:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 80056ea:	2b0a      	cmp	r3, #10
 80056ec:	d90d      	bls.n	800570a <StartInitAndTimeTask+0x23a>
      {
         EF_PutString((uint8_t *)data, 23, 0, WHITE, BG_TRANSPARENT, BLACK, OLED);
 80056ee:	f107 0008 	add.w	r0, r7, #8
 80056f2:	2300      	movs	r3, #0
 80056f4:	9302      	str	r3, [sp, #8]
 80056f6:	2300      	movs	r3, #0
 80056f8:	9301      	str	r3, [sp, #4]
 80056fa:	2300      	movs	r3, #0
 80056fc:	9300      	str	r3, [sp, #0]
 80056fe:	2301      	movs	r3, #1
 8005700:	2200      	movs	r2, #0
 8005702:	2117      	movs	r1, #23
 8005704:	f7fc f988 	bl	8001a18 <EF_PutString>
 8005708:	e00c      	b.n	8005724 <StartInitAndTimeTask+0x254>
      }
      else
      {
         EF_PutString((uint8_t *)data, 38, 0, WHITE, BG_TRANSPARENT, BLACK, OLED);
 800570a:	f107 0008 	add.w	r0, r7, #8
 800570e:	2300      	movs	r3, #0
 8005710:	9302      	str	r3, [sp, #8]
 8005712:	2300      	movs	r3, #0
 8005714:	9301      	str	r3, [sp, #4]
 8005716:	2300      	movs	r3, #0
 8005718:	9300      	str	r3, [sp, #0]
 800571a:	2301      	movs	r3, #1
 800571c:	2200      	movs	r2, #0
 800571e:	2126      	movs	r1, #38	; 0x26
 8005720:	f7fc f97a 	bl	8001a18 <EF_PutString>
      }
      EF_SetFont(&timesNewRoman_16ptFontInfo);
 8005724:	4846      	ldr	r0, [pc, #280]	; (8005840 <StartInitAndTimeTask+0x370>)
 8005726:	f7fb ff5d 	bl	80015e4 <EF_SetFont>
      sprintf(data, "%d : %d : 20%d", RtcDate.Date, RtcDate.Month, RtcDate.Year);
 800572a:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800572e:	461a      	mov	r2, r3
 8005730:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8005734:	4619      	mov	r1, r3
 8005736:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800573a:	f107 0008 	add.w	r0, r7, #8
 800573e:	9300      	str	r3, [sp, #0]
 8005740:	460b      	mov	r3, r1
 8005742:	4940      	ldr	r1, [pc, #256]	; (8005844 <StartInitAndTimeTask+0x374>)
 8005744:	f006 fb0c 	bl	800bd60 <sprintf_>
      EF_PutString((uint8_t *)data, 10, 30, WHITE, BG_TRANSPARENT, BLACK, OLED);
 8005748:	f107 0008 	add.w	r0, r7, #8
 800574c:	2300      	movs	r3, #0
 800574e:	9302      	str	r3, [sp, #8]
 8005750:	2300      	movs	r3, #0
 8005752:	9301      	str	r3, [sp, #4]
 8005754:	2300      	movs	r3, #0
 8005756:	9300      	str	r3, [sp, #0]
 8005758:	2301      	movs	r3, #1
 800575a:	221e      	movs	r2, #30
 800575c:	210a      	movs	r1, #10
 800575e:	f7fc f95b 	bl	8001a18 <EF_PutString>
      ;
      ssd1306_display();
 8005762:	f007 f801 	bl	800c768 <ssd1306_display>
      osMutexRelease(SPI1MutexHandle);
 8005766:	4b31      	ldr	r3, [pc, #196]	; (800582c <StartInitAndTimeTask+0x35c>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4618      	mov	r0, r3
 800576c:	f00f fb81 	bl	8014e72 <osMutexRelease>
      osMutexRelease(SSD1306MutexHandle);
 8005770:	4b2d      	ldr	r3, [pc, #180]	; (8005828 <StartInitAndTimeTask+0x358>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4618      	mov	r0, r3
 8005776:	f00f fb7c 	bl	8014e72 <osMutexRelease>
      osMutexRelease(ScreensDcMutexHandle);
 800577a:	4b2a      	ldr	r3, [pc, #168]	; (8005824 <StartInitAndTimeTask+0x354>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4618      	mov	r0, r3
 8005780:	f00f fb77 	bl	8014e72 <osMutexRelease>
      osMutexRelease(MenuMutexHandle);
 8005784:	4b26      	ldr	r3, [pc, #152]	; (8005820 <StartInitAndTimeTask+0x350>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4618      	mov	r0, r3
 800578a:	f00f fb72 	bl	8014e72 <osMutexRelease>
      if(ActualRtcDate.Date != RtcDate.Date)
 800578e:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8005792:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8005796:	429a      	cmp	r2, r3
 8005798:	d015      	beq.n	80057c6 <StartInitAndTimeTask+0x2f6>
      {
         ActualRtcDate.Date = RtcDate.Date;
 800579a:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800579e:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
         osEventFlagsSet(C3V1FlagsHandle, MOON_PHASE_FLAG);
 80057a2:	4b1e      	ldr	r3, [pc, #120]	; (800581c <StartInitAndTimeTask+0x34c>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2110      	movs	r1, #16
 80057a8:	4618      	mov	r0, r3
 80057aa:	f00f f9b5 	bl	8014b18 <osEventFlagsSet>
         osEventFlagsSet(C3V1FlagsHandle, NEW_DAY_TO_SAVE);
 80057ae:	4b1b      	ldr	r3, [pc, #108]	; (800581c <StartInitAndTimeTask+0x34c>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2120      	movs	r1, #32
 80057b4:	4618      	mov	r0, r3
 80057b6:	f00f f9af 	bl	8014b18 <osEventFlagsSet>
         osEventFlagsSet(C3V1FlagsHandle, NEW_DAY_FLAG);
 80057ba:	4b18      	ldr	r3, [pc, #96]	; (800581c <StartInitAndTimeTask+0x34c>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2180      	movs	r1, #128	; 0x80
 80057c0:	4618      	mov	r0, r3
 80057c2:	f00f f9a9 	bl	8014b18 <osEventFlagsSet>
      }
      osDelay(1000);
 80057c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80057ca:	f00f f8b9 	bl	8014940 <osDelay>
      osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 80057ce:	e73d      	b.n	800564c <StartInitAndTimeTask+0x17c>
 80057d0:	20003f60 	.word	0x20003f60
 80057d4:	20004198 	.word	0x20004198
 80057d8:	48000400 	.word	0x48000400
 80057dc:	20003f7c 	.word	0x20003f7c
 80057e0:	08023da0 	.word	0x08023da0
 80057e4:	080089b9 	.word	0x080089b9
 80057e8:	20003fbc 	.word	0x20003fbc
 80057ec:	20003fac 	.word	0x20003fac
 80057f0:	08020a54 	.word	0x08020a54
 80057f4:	0801f230 	.word	0x0801f230
 80057f8:	0801f250 	.word	0x0801f250
 80057fc:	0801f274 	.word	0x0801f274
 8005800:	0801f29c 	.word	0x0801f29c
 8005804:	0801f2b4 	.word	0x0801f2b4
 8005808:	0801f2d4 	.word	0x0801f2d4
 800580c:	0801f2fc 	.word	0x0801f2fc
 8005810:	0801f314 	.word	0x0801f314
 8005814:	0801f32c 	.word	0x0801f32c
 8005818:	0801f348 	.word	0x0801f348
 800581c:	20004054 	.word	0x20004054
 8005820:	20004048 	.word	0x20004048
 8005824:	20004034 	.word	0x20004034
 8005828:	20004038 	.word	0x20004038
 800582c:	2000403c 	.word	0x2000403c
 8005830:	2000404c 	.word	0x2000404c
 8005834:	20004164 	.word	0x20004164
 8005838:	0801f370 	.word	0x0801f370
 800583c:	08023cb8 	.word	0x08023cb8
 8005840:	08021d60 	.word	0x08021d60
 8005844:	0801f378 	.word	0x0801f378

08005848 <StartRfpTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartRfpTask */
void StartRfpTask(void *argument)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRfpTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8005850:	4b08      	ldr	r3, [pc, #32]	; (8005874 <StartRfpTask+0x2c>)
 8005852:	6818      	ldr	r0, [r3, #0]
 8005854:	f04f 33ff 	mov.w	r3, #4294967295
 8005858:	2202      	movs	r2, #2
 800585a:	2102      	movs	r1, #2
 800585c:	f00f f9d2 	bl	8014c04 <osEventFlagsWait>
   /* Infinite loop */
   for(;;)
   {
      if(Rfp.Initialize == RFP_INITIALIZE)
 8005860:	4b05      	ldr	r3, [pc, #20]	; (8005878 <StartRfpTask+0x30>)
 8005862:	78db      	ldrb	r3, [r3, #3]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d101      	bne.n	800586c <StartRfpTask+0x24>
      {
         RFP_Handle();
 8005868:	f006 fa96 	bl	800bd98 <RFP_Handle>
      }
      osDelay(10);
 800586c:	200a      	movs	r0, #10
 800586e:	f00f f867 	bl	8014940 <osDelay>
      if(Rfp.Initialize == RFP_INITIALIZE)
 8005872:	e7f5      	b.n	8005860 <StartRfpTask+0x18>
 8005874:	20004054 	.word	0x20004054
 8005878:	20003f60 	.word	0x20003f60

0800587c <StartMeasurmentTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMeasurmentTask */
void StartMeasurmentTask(void *argument)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b086      	sub	sp, #24
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMeasurmentTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8005884:	4b14      	ldr	r3, [pc, #80]	; (80058d8 <StartMeasurmentTask+0x5c>)
 8005886:	6818      	ldr	r0, [r3, #0]
 8005888:	f04f 33ff 	mov.w	r3, #4294967295
 800588c:	2202      	movs	r2, #2
 800588e:	2102      	movs	r1, #2
 8005890:	f00f f9b8 	bl	8014c04 <osEventFlagsWait>
   uint32_t Time                 = 1000;
 8005894:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005898:	617b      	str	r3, [r7, #20]
   uint8_t Command               = RFP_START_MEASURMENT;
 800589a:	2302      	movs	r3, #2
 800589c:	74fb      	strb	r3, [r7, #19]
   RfpMessage_TypeDef RfpMessage = { 0 };
 800589e:	2300      	movs	r3, #0
 80058a0:	60fb      	str	r3, [r7, #12]
   /* Infinite loop */
   for(;;)
   {
      RfpMessage.AdditionalData = 0;
 80058a2:	2300      	movs	r3, #0
 80058a4:	81fb      	strh	r3, [r7, #14]
      RfpMessage.Data           = Command;
 80058a6:	7cfb      	ldrb	r3, [r7, #19]
 80058a8:	737b      	strb	r3, [r7, #13]
      RfpMessage.MessageType    = RFP_COMMAND;
 80058aa:	2301      	movs	r3, #1
 80058ac:	733b      	strb	r3, [r7, #12]
      osMessageQueuePut(RfpMessageQueueHandle, &RfpMessage, 0, osWaitForever);
 80058ae:	4b0b      	ldr	r3, [pc, #44]	; (80058dc <StartMeasurmentTask+0x60>)
 80058b0:	6818      	ldr	r0, [r3, #0]
 80058b2:	f107 010c 	add.w	r1, r7, #12
 80058b6:	f04f 33ff 	mov.w	r3, #4294967295
 80058ba:	2200      	movs	r2, #0
 80058bc:	f00f fb8a 	bl	8014fd4 <osMessageQueuePut>
      osEventFlagsWait(C3V1FlagsHandle, SEND_MEASURMENT_COMMAND_FLAG, osFlagsWaitAny, osWaitForever);
 80058c0:	4b05      	ldr	r3, [pc, #20]	; (80058d8 <StartMeasurmentTask+0x5c>)
 80058c2:	6818      	ldr	r0, [r3, #0]
 80058c4:	f04f 33ff 	mov.w	r3, #4294967295
 80058c8:	2200      	movs	r2, #0
 80058ca:	2101      	movs	r1, #1
 80058cc:	f00f f99a 	bl	8014c04 <osEventFlagsWait>
      osDelay(Time);
 80058d0:	6978      	ldr	r0, [r7, #20]
 80058d2:	f00f f835 	bl	8014940 <osDelay>
      RfpMessage.AdditionalData = 0;
 80058d6:	e7e4      	b.n	80058a2 <StartMeasurmentTask+0x26>
 80058d8:	20004054 	.word	0x20004054
 80058dc:	20004020 	.word	0x20004020

080058e0 <StartInternalMeasurmentTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartInternalMeasurmentTask */
void StartInternalMeasurmentTask(void *argument)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b08e      	sub	sp, #56	; 0x38
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartInternalMeasurmentTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 80058e8:	4b2a      	ldr	r3, [pc, #168]	; (8005994 <StartInternalMeasurmentTask+0xb4>)
 80058ea:	6818      	ldr	r0, [r3, #0]
 80058ec:	f04f 33ff 	mov.w	r3, #4294967295
 80058f0:	2202      	movs	r2, #2
 80058f2:	2102      	movs	r1, #2
 80058f4:	f00f f986 	bl	8014c04 <osEventFlagsWait>
   MV_TypeDef _Mv = { 0 };
 80058f8:	f107 0308 	add.w	r3, r7, #8
 80058fc:	2230      	movs	r2, #48	; 0x30
 80058fe:	2100      	movs	r1, #0
 8005900:	4618      	mov	r0, r3
 8005902:	f013 f855 	bl	80189b0 <memset>
   /* Infinite loop */
   for(;;)
   {
      osMessageQueueGet(ExternalMeasurmentQueueHandle, &_Mv, 0, osWaitForever);
 8005906:	4b24      	ldr	r3, [pc, #144]	; (8005998 <StartInternalMeasurmentTask+0xb8>)
 8005908:	6818      	ldr	r0, [r3, #0]
 800590a:	f107 0108 	add.w	r1, r7, #8
 800590e:	f04f 33ff 	mov.w	r3, #4294967295
 8005912:	2200      	movs	r2, #0
 8005914:	f00f fbbe 	bl	8015094 <osMessageQueueGet>
      osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8005918:	4b20      	ldr	r3, [pc, #128]	; (800599c <StartInternalMeasurmentTask+0xbc>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f04f 31ff 	mov.w	r1, #4294967295
 8005920:	4618      	mov	r0, r3
 8005922:	f00f fa5b 	bl	8014ddc <osMutexAcquire>
      osMutexAcquire(BME280MutexHandle, osWaitForever);
 8005926:	4b1e      	ldr	r3, [pc, #120]	; (80059a0 <StartInternalMeasurmentTask+0xc0>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f04f 31ff 	mov.w	r1, #4294967295
 800592e:	4618      	mov	r0, r3
 8005930:	f00f fa54 	bl	8014ddc <osMutexAcquire>
      BME280_ReadAll(&Bme, &_Mv.InternalTemperature, &_Mv.Pressure, &_Mv.InternalHumidity);
 8005934:	f107 0308 	add.w	r3, r7, #8
 8005938:	f103 000c 	add.w	r0, r3, #12
 800593c:	f107 0308 	add.w	r3, r7, #8
 8005940:	f103 0210 	add.w	r2, r3, #16
 8005944:	f107 0308 	add.w	r3, r7, #8
 8005948:	f103 0108 	add.w	r1, r3, #8
 800594c:	4603      	mov	r3, r0
 800594e:	4815      	ldr	r0, [pc, #84]	; (80059a4 <StartInternalMeasurmentTask+0xc4>)
 8005950:	f7fe fcc8 	bl	80042e4 <BME280_ReadAll>
      osMutexRelease(BME280MutexHandle);
 8005954:	4b12      	ldr	r3, [pc, #72]	; (80059a0 <StartInternalMeasurmentTask+0xc0>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4618      	mov	r0, r3
 800595a:	f00f fa8a 	bl	8014e72 <osMutexRelease>
      osMutexRelease(SPI1MutexHandle);
 800595e:	4b0f      	ldr	r3, [pc, #60]	; (800599c <StartInternalMeasurmentTask+0xbc>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4618      	mov	r0, r3
 8005964:	f00f fa85 	bl	8014e72 <osMutexRelease>
      osMessageQueuePut(MeasurmentQueueHandle, &_Mv, 0, osWaitForever);
 8005968:	4b0f      	ldr	r3, [pc, #60]	; (80059a8 <StartInternalMeasurmentTask+0xc8>)
 800596a:	6818      	ldr	r0, [r3, #0]
 800596c:	f107 0108 	add.w	r1, r7, #8
 8005970:	f04f 33ff 	mov.w	r3, #4294967295
 8005974:	2200      	movs	r2, #0
 8005976:	f00f fb2d 	bl	8014fd4 <osMessageQueuePut>
      osMessageQueuePut(DataToSaveQueueHandle, &_Mv, 0, osWaitForever);
 800597a:	4b0c      	ldr	r3, [pc, #48]	; (80059ac <StartInternalMeasurmentTask+0xcc>)
 800597c:	6818      	ldr	r0, [r3, #0]
 800597e:	f107 0108 	add.w	r1, r7, #8
 8005982:	f04f 33ff 	mov.w	r3, #4294967295
 8005986:	2200      	movs	r2, #0
 8005988:	f00f fb24 	bl	8014fd4 <osMessageQueuePut>
      osDelay(1);
 800598c:	2001      	movs	r0, #1
 800598e:	f00e ffd7 	bl	8014940 <osDelay>
      osMessageQueueGet(ExternalMeasurmentQueueHandle, &_Mv, 0, osWaitForever);
 8005992:	e7b8      	b.n	8005906 <StartInternalMeasurmentTask+0x26>
 8005994:	20004054 	.word	0x20004054
 8005998:	20004024 	.word	0x20004024
 800599c:	2000403c 	.word	0x2000403c
 80059a0:	20004044 	.word	0x20004044
 80059a4:	20003f7c 	.word	0x20003f7c
 80059a8:	20004010 	.word	0x20004010
 80059ac:	2000401c 	.word	0x2000401c

080059b0 <StartMoonPhaseTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMoonPhaseTask */
void StartMoonPhaseTask(void *argument)
{
 80059b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059b4:	ed2d 8b04 	vpush	{d8-d9}
 80059b8:	b08e      	sub	sp, #56	; 0x38
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMoonPhaseTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 80059be:	4b57      	ldr	r3, [pc, #348]	; (8005b1c <StartMoonPhaseTask+0x16c>)
 80059c0:	6818      	ldr	r0, [r3, #0]
 80059c2:	f04f 33ff 	mov.w	r3, #4294967295
 80059c6:	2202      	movs	r2, #2
 80059c8:	2102      	movs	r1, #2
 80059ca:	f00f f91b 	bl	8014c04 <osEventFlagsWait>
   /* Infinite loop */
   for(;;)
   {
      osEventFlagsWait(C3V1FlagsHandle, MOON_PHASE_FLAG, osFlagsWaitAny, osWaitForever);
 80059ce:	4b53      	ldr	r3, [pc, #332]	; (8005b1c <StartMoonPhaseTask+0x16c>)
 80059d0:	6818      	ldr	r0, [r3, #0]
 80059d2:	f04f 33ff 	mov.w	r3, #4294967295
 80059d6:	2200      	movs	r2, #0
 80059d8:	2110      	movs	r1, #16
 80059da:	f00f f913 	bl	8014c04 <osEventFlagsWait>
      RTC_TimeTypeDef RtcTime;
      RTC_DateTypeDef RtcDate;
      double PhaseMoon = 0.0;
 80059de:	f04f 0200 	mov.w	r2, #0
 80059e2:	f04f 0300 	mov.w	r3, #0
 80059e6:	e9c7 2302 	strd	r2, r3, [r7, #8]
      uint32_t Cnt     = 0;
 80059ea:	2300      	movs	r3, #0
 80059ec:	637b      	str	r3, [r7, #52]	; 0x34
      osMutexAcquire(RTCMutexHandle, osWaitForever);
 80059ee:	4b4c      	ldr	r3, [pc, #304]	; (8005b20 <StartMoonPhaseTask+0x170>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f04f 31ff 	mov.w	r1, #4294967295
 80059f6:	4618      	mov	r0, r3
 80059f8:	f00f f9f0 	bl	8014ddc <osMutexAcquire>
      HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 80059fc:	f107 0314 	add.w	r3, r7, #20
 8005a00:	2200      	movs	r2, #0
 8005a02:	4619      	mov	r1, r3
 8005a04:	4847      	ldr	r0, [pc, #284]	; (8005b24 <StartMoonPhaseTask+0x174>)
 8005a06:	f00a f9b7 	bl	800fd78 <HAL_RTC_GetTime>
      HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 8005a0a:	f107 0310 	add.w	r3, r7, #16
 8005a0e:	2200      	movs	r2, #0
 8005a10:	4619      	mov	r1, r3
 8005a12:	4844      	ldr	r0, [pc, #272]	; (8005b24 <StartMoonPhaseTask+0x174>)
 8005a14:	f00a fa9a 	bl	800ff4c <HAL_RTC_GetDate>
      osMutexRelease(RTCMutexHandle);
 8005a18:	4b41      	ldr	r3, [pc, #260]	; (8005b20 <StartMoonPhaseTask+0x170>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f00f fa28 	bl	8014e72 <osMutexRelease>
      for(int Hours = 0; Hours < 24; Hours++)
 8005a22:	2300      	movs	r3, #0
 8005a24:	633b      	str	r3, [r7, #48]	; 0x30
 8005a26:	e059      	b.n	8005adc <StartMoonPhaseTask+0x12c>
      {
         for(int Minutes = 0; Minutes < 60; Minutes++)
 8005a28:	2300      	movs	r3, #0
 8005a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a2c:	e050      	b.n	8005ad0 <StartMoonPhaseTask+0x120>
         {
            for(int Seconds = 0; Seconds < 60; Seconds++)
 8005a2e:	2300      	movs	r3, #0
 8005a30:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a32:	e047      	b.n	8005ac4 <StartMoonPhaseTask+0x114>
            {
               PhaseMoon += faza((RtcDate.Year + 2000), RtcDate.Month, RtcDate.Date, Hours, Minutes, Seconds);
 8005a34:	7cfb      	ldrb	r3, [r7, #19]
 8005a36:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7fa fd8a 	bl	8000554 <__aeabi_i2d>
 8005a40:	4604      	mov	r4, r0
 8005a42:	460d      	mov	r5, r1
 8005a44:	7c7b      	ldrb	r3, [r7, #17]
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7fa fd74 	bl	8000534 <__aeabi_ui2d>
 8005a4c:	4680      	mov	r8, r0
 8005a4e:	4689      	mov	r9, r1
 8005a50:	7cbb      	ldrb	r3, [r7, #18]
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7fa fd6e 	bl	8000534 <__aeabi_ui2d>
 8005a58:	4682      	mov	sl, r0
 8005a5a:	468b      	mov	fp, r1
 8005a5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a5e:	f7fa fd79 	bl	8000554 <__aeabi_i2d>
 8005a62:	ec41 0b18 	vmov	d8, r0, r1
 8005a66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a68:	f7fa fd74 	bl	8000554 <__aeabi_i2d>
 8005a6c:	ec41 0b19 	vmov	d9, r0, r1
 8005a70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a72:	f7fa fd6f 	bl	8000554 <__aeabi_i2d>
 8005a76:	4602      	mov	r2, r0
 8005a78:	460b      	mov	r3, r1
 8005a7a:	ec43 2b15 	vmov	d5, r2, r3
 8005a7e:	eeb0 4a49 	vmov.f32	s8, s18
 8005a82:	eef0 4a69 	vmov.f32	s9, s19
 8005a86:	eeb0 3a48 	vmov.f32	s6, s16
 8005a8a:	eef0 3a68 	vmov.f32	s7, s17
 8005a8e:	ec4b ab12 	vmov	d2, sl, fp
 8005a92:	ec49 8b11 	vmov	d1, r8, r9
 8005a96:	ec45 4b10 	vmov	d0, r4, r5
 8005a9a:	f003 f8a5 	bl	8008be8 <faza>
 8005a9e:	ec51 0b10 	vmov	r0, r1, d0
 8005aa2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005aa6:	f7fa fc09 	bl	80002bc <__adddf3>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	460b      	mov	r3, r1
 8005aae:	e9c7 2302 	strd	r2, r3, [r7, #8]
               Cnt++;
 8005ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	637b      	str	r3, [r7, #52]	; 0x34
               osDelay(5);
 8005ab8:	2005      	movs	r0, #5
 8005aba:	f00e ff41 	bl	8014940 <osDelay>
            for(int Seconds = 0; Seconds < 60; Seconds++)
 8005abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac6:	2b3b      	cmp	r3, #59	; 0x3b
 8005ac8:	ddb4      	ble.n	8005a34 <StartMoonPhaseTask+0x84>
         for(int Minutes = 0; Minutes < 60; Minutes++)
 8005aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005acc:	3301      	adds	r3, #1
 8005ace:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad2:	2b3b      	cmp	r3, #59	; 0x3b
 8005ad4:	ddab      	ble.n	8005a2e <StartMoonPhaseTask+0x7e>
      for(int Hours = 0; Hours < 24; Hours++)
 8005ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad8:	3301      	adds	r3, #1
 8005ada:	633b      	str	r3, [r7, #48]	; 0x30
 8005adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ade:	2b17      	cmp	r3, #23
 8005ae0:	dda2      	ble.n	8005a28 <StartMoonPhaseTask+0x78>
            }
         }
      }
      PhaseMoon /= (Cnt);
 8005ae2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005ae6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005ae8:	f7fa fd24 	bl	8000534 <__aeabi_ui2d>
 8005aec:	4602      	mov	r2, r0
 8005aee:	460b      	mov	r3, r1
 8005af0:	4620      	mov	r0, r4
 8005af2:	4629      	mov	r1, r5
 8005af4:	f7fa fec2 	bl	800087c <__aeabi_ddiv>
 8005af8:	4602      	mov	r2, r0
 8005afa:	460b      	mov	r3, r1
 8005afc:	e9c7 2302 	strd	r2, r3, [r7, #8]
      osMessageQueuePut(MoonPhaseQueueHandle, &PhaseMoon, 0, osWaitForever);
 8005b00:	4b09      	ldr	r3, [pc, #36]	; (8005b28 <StartMoonPhaseTask+0x178>)
 8005b02:	6818      	ldr	r0, [r3, #0]
 8005b04:	f107 0108 	add.w	r1, r7, #8
 8005b08:	f04f 33ff 	mov.w	r3, #4294967295
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f00f fa61 	bl	8014fd4 <osMessageQueuePut>
      osDelay(1);
 8005b12:	2001      	movs	r0, #1
 8005b14:	f00e ff14 	bl	8014940 <osDelay>
   {
 8005b18:	e759      	b.n	80059ce <StartMoonPhaseTask+0x1e>
 8005b1a:	bf00      	nop
 8005b1c:	20004054 	.word	0x20004054
 8005b20:	2000404c 	.word	0x2000404c
 8005b24:	20004164 	.word	0x20004164
 8005b28:	20004014 	.word	0x20004014

08005b2c <StartE_PapierDrawingTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartE_PapierDrawingTask */
void StartE_PapierDrawingTask(void *argument)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b0b6      	sub	sp, #216	; 0xd8
 8005b30:	af04      	add	r7, sp, #16
 8005b32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartE_PapierDrawingTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8005b34:	4b15      	ldr	r3, [pc, #84]	; (8005b8c <StartE_PapierDrawingTask+0x60>)
 8005b36:	6818      	ldr	r0, [r3, #0]
 8005b38:	f04f 33ff 	mov.w	r3, #4294967295
 8005b3c:	2202      	movs	r2, #2
 8005b3e:	2102      	movs	r1, #2
 8005b40:	f00f f860 	bl	8014c04 <osEventFlagsWait>
   RTC_TimeTypeDef RtcTime;
   RTC_DateTypeDef RtcDate;
   MV_TypeDef _Mv    = { 0 };
 8005b44:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005b48:	2230      	movs	r2, #48	; 0x30
 8005b4a:	2100      	movs	r1, #0
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f012 ff2f 	bl	80189b0 <memset>
   double _MoonPhase = 0;
 8005b52:	f04f 0200 	mov.w	r2, #0
 8005b56:	f04f 0300 	mov.w	r3, #0
 8005b5a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
   /* Infinite loop */
   for(;;)
   {
      osMessageQueueGet(MeasurmentQueueHandle, &_Mv, 0, osWaitForever);
 8005b5e:	4b0c      	ldr	r3, [pc, #48]	; (8005b90 <StartE_PapierDrawingTask+0x64>)
 8005b60:	6818      	ldr	r0, [r3, #0]
 8005b62:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8005b66:	f04f 33ff 	mov.w	r3, #4294967295
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f00f fa92 	bl	8015094 <osMessageQueueGet>
      osMutexAcquire(E_PAPIERMutexHandle, osWaitForever);
 8005b70:	4b08      	ldr	r3, [pc, #32]	; (8005b94 <StartE_PapierDrawingTask+0x68>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f04f 31ff 	mov.w	r1, #4294967295
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f00f f92f 	bl	8014ddc <osMutexAcquire>
      e_papier_clear();
 8005b7e:	f7fe ff35 	bl	80049ec <e_papier_clear>
      for(int i = 1; i < 3; i++)
 8005b82:	2301      	movs	r3, #1
 8005b84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b88:	e01e      	b.n	8005bc8 <StartE_PapierDrawingTask+0x9c>
 8005b8a:	bf00      	nop
 8005b8c:	20004054 	.word	0x20004054
 8005b90:	20004010 	.word	0x20004010
 8005b94:	20004040 	.word	0x20004040
      {
         GFX_DrawLine(150 * i, 0, 150 * i, 300, BLACK, E_PAPIER);
 8005b98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b9c:	2296      	movs	r2, #150	; 0x96
 8005b9e:	fb02 f003 	mul.w	r0, r2, r3
 8005ba2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005ba6:	2296      	movs	r2, #150	; 0x96
 8005ba8:	fb03 f202 	mul.w	r2, r3, r2
 8005bac:	2301      	movs	r3, #1
 8005bae:	9301      	str	r3, [sp, #4]
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	9300      	str	r3, [sp, #0]
 8005bb4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8005bb8:	2100      	movs	r1, #0
 8005bba:	f7fb fc9b 	bl	80014f4 <GFX_DrawLine>
      for(int i = 1; i < 3; i++)
 8005bbe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005bc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	dde3      	ble.n	8005b98 <StartE_PapierDrawingTask+0x6c>
      }
      GFX_DrawLine(0, 40, 400, 40, BLACK, E_PAPIER);
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	9301      	str	r3, [sp, #4]
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	9300      	str	r3, [sp, #0]
 8005bd8:	2328      	movs	r3, #40	; 0x28
 8005bda:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005bde:	2128      	movs	r1, #40	; 0x28
 8005be0:	2000      	movs	r0, #0
 8005be2:	f7fb fc87 	bl	80014f4 <GFX_DrawLine>
      char mes[100];
      osMutexAcquire(RTCMutexHandle, osWaitForever);
 8005be6:	4bc9      	ldr	r3, [pc, #804]	; (8005f0c <StartE_PapierDrawingTask+0x3e0>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f04f 31ff 	mov.w	r1, #4294967295
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f00f f8f4 	bl	8014ddc <osMutexAcquire>
      HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 8005bf4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	48c4      	ldr	r0, [pc, #784]	; (8005f10 <StartE_PapierDrawingTask+0x3e4>)
 8005bfe:	f00a f8bb 	bl	800fd78 <HAL_RTC_GetTime>
      HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 8005c02:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005c06:	2200      	movs	r2, #0
 8005c08:	4619      	mov	r1, r3
 8005c0a:	48c1      	ldr	r0, [pc, #772]	; (8005f10 <StartE_PapierDrawingTask+0x3e4>)
 8005c0c:	f00a f99e 	bl	800ff4c <HAL_RTC_GetDate>
      osMutexRelease(RTCMutexHandle);
 8005c10:	4bbe      	ldr	r3, [pc, #760]	; (8005f0c <StartE_PapierDrawingTask+0x3e0>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4618      	mov	r0, r3
 8005c16:	f00f f92c 	bl	8014e72 <osMutexRelease>
      osMessageQueueGet(MoonPhaseQueueHandle, &_MoonPhase, 0, 0);
 8005c1a:	4bbe      	ldr	r3, [pc, #760]	; (8005f14 <StartE_PapierDrawingTask+0x3e8>)
 8005c1c:	6818      	ldr	r0, [r3, #0]
 8005c1e:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8005c22:	2300      	movs	r3, #0
 8005c24:	2200      	movs	r2, #0
 8005c26:	f00f fa35 	bl	8015094 <osMessageQueueGet>
      EF_SetFont(&timesNewRoman_12ptFontInfo);
 8005c2a:	48bb      	ldr	r0, [pc, #748]	; (8005f18 <StartE_PapierDrawingTask+0x3ec>)
 8005c2c:	f7fb fcda 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)"WARUNKI ", 0, 0, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8005c30:	2301      	movs	r3, #1
 8005c32:	9302      	str	r3, [sp, #8]
 8005c34:	2301      	movs	r3, #1
 8005c36:	9301      	str	r3, [sp, #4]
 8005c38:	2300      	movs	r3, #0
 8005c3a:	9300      	str	r3, [sp, #0]
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	2200      	movs	r2, #0
 8005c40:	2100      	movs	r1, #0
 8005c42:	48b6      	ldr	r0, [pc, #728]	; (8005f1c <StartE_PapierDrawingTask+0x3f0>)
 8005c44:	f7fb fee8 	bl	8001a18 <EF_PutString>
      EF_PutString((uint8_t *)"ZEWN??TRZNE", 0, 20, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8005c48:	2301      	movs	r3, #1
 8005c4a:	9302      	str	r3, [sp, #8]
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	9301      	str	r3, [sp, #4]
 8005c50:	2300      	movs	r3, #0
 8005c52:	9300      	str	r3, [sp, #0]
 8005c54:	2300      	movs	r3, #0
 8005c56:	2214      	movs	r2, #20
 8005c58:	2100      	movs	r1, #0
 8005c5a:	48b1      	ldr	r0, [pc, #708]	; (8005f20 <StartE_PapierDrawingTask+0x3f4>)
 8005c5c:	f7fb fedc 	bl	8001a18 <EF_PutString>

      EF_PutString((uint8_t *)"PM 1.0", 0, 40, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8005c60:	2301      	movs	r3, #1
 8005c62:	9302      	str	r3, [sp, #8]
 8005c64:	2301      	movs	r3, #1
 8005c66:	9301      	str	r3, [sp, #4]
 8005c68:	2300      	movs	r3, #0
 8005c6a:	9300      	str	r3, [sp, #0]
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	2228      	movs	r2, #40	; 0x28
 8005c70:	2100      	movs	r1, #0
 8005c72:	48ac      	ldr	r0, [pc, #688]	; (8005f24 <StartE_PapierDrawingTask+0x3f8>)
 8005c74:	f7fb fed0 	bl	8001a18 <EF_PutString>
      EF_SetFont(&timesNewRoman_16ptFontInfo);
 8005c78:	48ab      	ldr	r0, [pc, #684]	; (8005f28 <StartE_PapierDrawingTask+0x3fc>)
 8005c7a:	f7fb fcb3 	bl	80015e4 <EF_SetFont>
      sprintf(mes, "%d ug/m3", _Mv.ExtPM1);
 8005c7e:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8005c82:	461a      	mov	r2, r3
 8005c84:	f107 030c 	add.w	r3, r7, #12
 8005c88:	49a8      	ldr	r1, [pc, #672]	; (8005f2c <StartE_PapierDrawingTask+0x400>)
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f006 f868 	bl	800bd60 <sprintf_>
      EF_PutString((uint8_t *)mes, 0, 55, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8005c90:	f107 000c 	add.w	r0, r7, #12
 8005c94:	2301      	movs	r3, #1
 8005c96:	9302      	str	r3, [sp, #8]
 8005c98:	2301      	movs	r3, #1
 8005c9a:	9301      	str	r3, [sp, #4]
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	9300      	str	r3, [sp, #0]
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	2237      	movs	r2, #55	; 0x37
 8005ca4:	2100      	movs	r1, #0
 8005ca6:	f7fb feb7 	bl	8001a18 <EF_PutString>

      EF_SetFont(&timesNewRoman_12ptFontInfo);
 8005caa:	489b      	ldr	r0, [pc, #620]	; (8005f18 <StartE_PapierDrawingTask+0x3ec>)
 8005cac:	f7fb fc9a 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)"PM 2.5", 0, 80, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	9302      	str	r3, [sp, #8]
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	9301      	str	r3, [sp, #4]
 8005cb8:	2300      	movs	r3, #0
 8005cba:	9300      	str	r3, [sp, #0]
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	2250      	movs	r2, #80	; 0x50
 8005cc0:	2100      	movs	r1, #0
 8005cc2:	489b      	ldr	r0, [pc, #620]	; (8005f30 <StartE_PapierDrawingTask+0x404>)
 8005cc4:	f7fb fea8 	bl	8001a18 <EF_PutString>
      sprintf(mes, "%d ug/m3", _Mv.ExtPM25);
 8005cc8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8005ccc:	461a      	mov	r2, r3
 8005cce:	f107 030c 	add.w	r3, r7, #12
 8005cd2:	4996      	ldr	r1, [pc, #600]	; (8005f2c <StartE_PapierDrawingTask+0x400>)
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f006 f843 	bl	800bd60 <sprintf_>
      EF_SetFont(&timesNewRoman_16ptFontInfo);
 8005cda:	4893      	ldr	r0, [pc, #588]	; (8005f28 <StartE_PapierDrawingTask+0x3fc>)
 8005cdc:	f7fb fc82 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)mes, 0, 95, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8005ce0:	f107 000c 	add.w	r0, r7, #12
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	9302      	str	r3, [sp, #8]
 8005ce8:	2301      	movs	r3, #1
 8005cea:	9301      	str	r3, [sp, #4]
 8005cec:	2300      	movs	r3, #0
 8005cee:	9300      	str	r3, [sp, #0]
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	225f      	movs	r2, #95	; 0x5f
 8005cf4:	2100      	movs	r1, #0
 8005cf6:	f7fb fe8f 	bl	8001a18 <EF_PutString>

      EF_SetFont(&timesNewRoman_12ptFontInfo);
 8005cfa:	4887      	ldr	r0, [pc, #540]	; (8005f18 <StartE_PapierDrawingTask+0x3ec>)
 8005cfc:	f7fb fc72 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)"PM 10.0", 0, 120, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8005d00:	2301      	movs	r3, #1
 8005d02:	9302      	str	r3, [sp, #8]
 8005d04:	2301      	movs	r3, #1
 8005d06:	9301      	str	r3, [sp, #4]
 8005d08:	2300      	movs	r3, #0
 8005d0a:	9300      	str	r3, [sp, #0]
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	2278      	movs	r2, #120	; 0x78
 8005d10:	2100      	movs	r1, #0
 8005d12:	4888      	ldr	r0, [pc, #544]	; (8005f34 <StartE_PapierDrawingTask+0x408>)
 8005d14:	f7fb fe80 	bl	8001a18 <EF_PutString>
      sprintf(mes, "%d ug/m3", _Mv.ExtPM10);
 8005d18:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	f107 030c 	add.w	r3, r7, #12
 8005d22:	4982      	ldr	r1, [pc, #520]	; (8005f2c <StartE_PapierDrawingTask+0x400>)
 8005d24:	4618      	mov	r0, r3
 8005d26:	f006 f81b 	bl	800bd60 <sprintf_>
      EF_SetFont(&timesNewRoman_16ptFontInfo);
 8005d2a:	487f      	ldr	r0, [pc, #508]	; (8005f28 <StartE_PapierDrawingTask+0x3fc>)
 8005d2c:	f7fb fc5a 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)mes, 0, 135, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8005d30:	f107 000c 	add.w	r0, r7, #12
 8005d34:	2301      	movs	r3, #1
 8005d36:	9302      	str	r3, [sp, #8]
 8005d38:	2301      	movs	r3, #1
 8005d3a:	9301      	str	r3, [sp, #4]
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	9300      	str	r3, [sp, #0]
 8005d40:	2300      	movs	r3, #0
 8005d42:	2287      	movs	r2, #135	; 0x87
 8005d44:	2100      	movs	r1, #0
 8005d46:	f7fb fe67 	bl	8001a18 <EF_PutString>

      EF_SetFont(&timesNewRoman_12ptFontInfo);
 8005d4a:	4873      	ldr	r0, [pc, #460]	; (8005f18 <StartE_PapierDrawingTask+0x3ec>)
 8005d4c:	f7fb fc4a 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)"TEMPERATURA", 0, 160, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8005d50:	2301      	movs	r3, #1
 8005d52:	9302      	str	r3, [sp, #8]
 8005d54:	2301      	movs	r3, #1
 8005d56:	9301      	str	r3, [sp, #4]
 8005d58:	2300      	movs	r3, #0
 8005d5a:	9300      	str	r3, [sp, #0]
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	22a0      	movs	r2, #160	; 0xa0
 8005d60:	2100      	movs	r1, #0
 8005d62:	4875      	ldr	r0, [pc, #468]	; (8005f38 <StartE_PapierDrawingTask+0x40c>)
 8005d64:	f7fb fe58 	bl	8001a18 <EF_PutString>
      sprintf(mes, "%0.2f T", _Mv.ExtTemperature);
 8005d68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7fa fc04 	bl	8000578 <__aeabi_f2d>
 8005d70:	4602      	mov	r2, r0
 8005d72:	460b      	mov	r3, r1
 8005d74:	f107 000c 	add.w	r0, r7, #12
 8005d78:	4970      	ldr	r1, [pc, #448]	; (8005f3c <StartE_PapierDrawingTask+0x410>)
 8005d7a:	f005 fff1 	bl	800bd60 <sprintf_>
      EF_SetFont(&timesNewRoman_16ptFontInfo);
 8005d7e:	486a      	ldr	r0, [pc, #424]	; (8005f28 <StartE_PapierDrawingTask+0x3fc>)
 8005d80:	f7fb fc30 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)mes, 0, 175, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8005d84:	f107 000c 	add.w	r0, r7, #12
 8005d88:	2301      	movs	r3, #1
 8005d8a:	9302      	str	r3, [sp, #8]
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	9301      	str	r3, [sp, #4]
 8005d90:	2300      	movs	r3, #0
 8005d92:	9300      	str	r3, [sp, #0]
 8005d94:	2300      	movs	r3, #0
 8005d96:	22af      	movs	r2, #175	; 0xaf
 8005d98:	2100      	movs	r1, #0
 8005d9a:	f7fb fe3d 	bl	8001a18 <EF_PutString>

      EF_SetFont(&timesNewRoman_12ptFontInfo);
 8005d9e:	485e      	ldr	r0, [pc, #376]	; (8005f18 <StartE_PapierDrawingTask+0x3ec>)
 8005da0:	f7fb fc20 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)"WILGOTNOŚĆ", 0, 200, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8005da4:	2301      	movs	r3, #1
 8005da6:	9302      	str	r3, [sp, #8]
 8005da8:	2301      	movs	r3, #1
 8005daa:	9301      	str	r3, [sp, #4]
 8005dac:	2300      	movs	r3, #0
 8005dae:	9300      	str	r3, [sp, #0]
 8005db0:	2300      	movs	r3, #0
 8005db2:	22c8      	movs	r2, #200	; 0xc8
 8005db4:	2100      	movs	r1, #0
 8005db6:	4862      	ldr	r0, [pc, #392]	; (8005f40 <StartE_PapierDrawingTask+0x414>)
 8005db8:	f7fb fe2e 	bl	8001a18 <EF_PutString>
      sprintf(mes, "%0.2f %%", _Mv.ExtHumidity);
 8005dbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7fa fbd9 	bl	8000578 <__aeabi_f2d>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	460b      	mov	r3, r1
 8005dca:	f107 000c 	add.w	r0, r7, #12
 8005dce:	495d      	ldr	r1, [pc, #372]	; (8005f44 <StartE_PapierDrawingTask+0x418>)
 8005dd0:	f005 ffc6 	bl	800bd60 <sprintf_>
      EF_SetFont(&timesNewRoman_16ptFontInfo);
 8005dd4:	4854      	ldr	r0, [pc, #336]	; (8005f28 <StartE_PapierDrawingTask+0x3fc>)
 8005dd6:	f7fb fc05 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)mes, 0, 215, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8005dda:	f107 000c 	add.w	r0, r7, #12
 8005dde:	2301      	movs	r3, #1
 8005de0:	9302      	str	r3, [sp, #8]
 8005de2:	2301      	movs	r3, #1
 8005de4:	9301      	str	r3, [sp, #4]
 8005de6:	2300      	movs	r3, #0
 8005de8:	9300      	str	r3, [sp, #0]
 8005dea:	2300      	movs	r3, #0
 8005dec:	22d7      	movs	r2, #215	; 0xd7
 8005dee:	2100      	movs	r1, #0
 8005df0:	f7fb fe12 	bl	8001a18 <EF_PutString>

      EF_SetFont(&timesNewRoman_12ptFontInfo);
 8005df4:	4848      	ldr	r0, [pc, #288]	; (8005f18 <StartE_PapierDrawingTask+0x3ec>)
 8005df6:	f7fb fbf5 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)"NAPI??CIE", 0, 240, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	9302      	str	r3, [sp, #8]
 8005dfe:	2301      	movs	r3, #1
 8005e00:	9301      	str	r3, [sp, #4]
 8005e02:	2300      	movs	r3, #0
 8005e04:	9300      	str	r3, [sp, #0]
 8005e06:	2300      	movs	r3, #0
 8005e08:	22f0      	movs	r2, #240	; 0xf0
 8005e0a:	2100      	movs	r1, #0
 8005e0c:	484e      	ldr	r0, [pc, #312]	; (8005f48 <StartE_PapierDrawingTask+0x41c>)
 8005e0e:	f7fb fe03 	bl	8001a18 <EF_PutString>
      EF_PutString((uint8_t *)"BATERII", 0, 255, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8005e12:	2301      	movs	r3, #1
 8005e14:	9302      	str	r3, [sp, #8]
 8005e16:	2301      	movs	r3, #1
 8005e18:	9301      	str	r3, [sp, #4]
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	9300      	str	r3, [sp, #0]
 8005e1e:	2300      	movs	r3, #0
 8005e20:	22ff      	movs	r2, #255	; 0xff
 8005e22:	2100      	movs	r1, #0
 8005e24:	4849      	ldr	r0, [pc, #292]	; (8005f4c <StartE_PapierDrawingTask+0x420>)
 8005e26:	f7fb fdf7 	bl	8001a18 <EF_PutString>
      sprintf(mes, "%0.2fV", _Mv.BatteryVoltage);
 8005e2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7fa fba2 	bl	8000578 <__aeabi_f2d>
 8005e34:	4602      	mov	r2, r0
 8005e36:	460b      	mov	r3, r1
 8005e38:	f107 000c 	add.w	r0, r7, #12
 8005e3c:	4944      	ldr	r1, [pc, #272]	; (8005f50 <StartE_PapierDrawingTask+0x424>)
 8005e3e:	f005 ff8f 	bl	800bd60 <sprintf_>
      EF_SetFont(&timesNewRoman_16ptFontInfo);
 8005e42:	4839      	ldr	r0, [pc, #228]	; (8005f28 <StartE_PapierDrawingTask+0x3fc>)
 8005e44:	f7fb fbce 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)mes, 0, 270, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8005e48:	f107 000c 	add.w	r0, r7, #12
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	9302      	str	r3, [sp, #8]
 8005e50:	2301      	movs	r3, #1
 8005e52:	9301      	str	r3, [sp, #4]
 8005e54:	2300      	movs	r3, #0
 8005e56:	9300      	str	r3, [sp, #0]
 8005e58:	2300      	movs	r3, #0
 8005e5a:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8005e5e:	2100      	movs	r1, #0
 8005e60:	f7fb fdda 	bl	8001a18 <EF_PutString>

      EF_SetFont(&timesNewRoman_12ptFontInfo);
 8005e64:	482c      	ldr	r0, [pc, #176]	; (8005f18 <StartE_PapierDrawingTask+0x3ec>)
 8005e66:	f7fb fbbd 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)"WARUNKI ", 152, 0, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	9302      	str	r3, [sp, #8]
 8005e6e:	2301      	movs	r3, #1
 8005e70:	9301      	str	r3, [sp, #4]
 8005e72:	2300      	movs	r3, #0
 8005e74:	9300      	str	r3, [sp, #0]
 8005e76:	2300      	movs	r3, #0
 8005e78:	2200      	movs	r2, #0
 8005e7a:	2198      	movs	r1, #152	; 0x98
 8005e7c:	4827      	ldr	r0, [pc, #156]	; (8005f1c <StartE_PapierDrawingTask+0x3f0>)
 8005e7e:	f7fb fdcb 	bl	8001a18 <EF_PutString>
      EF_PutString((uint8_t *)"WEWN??TRZNE", 152, 20, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8005e82:	2301      	movs	r3, #1
 8005e84:	9302      	str	r3, [sp, #8]
 8005e86:	2301      	movs	r3, #1
 8005e88:	9301      	str	r3, [sp, #4]
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	9300      	str	r3, [sp, #0]
 8005e8e:	2300      	movs	r3, #0
 8005e90:	2214      	movs	r2, #20
 8005e92:	2198      	movs	r1, #152	; 0x98
 8005e94:	482f      	ldr	r0, [pc, #188]	; (8005f54 <StartE_PapierDrawingTask+0x428>)
 8005e96:	f7fb fdbf 	bl	8001a18 <EF_PutString>

      EF_PutString((uint8_t *)"PM 1.0", 152, 40, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	9302      	str	r3, [sp, #8]
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	9301      	str	r3, [sp, #4]
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	9300      	str	r3, [sp, #0]
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	2228      	movs	r2, #40	; 0x28
 8005eaa:	2198      	movs	r1, #152	; 0x98
 8005eac:	481d      	ldr	r0, [pc, #116]	; (8005f24 <StartE_PapierDrawingTask+0x3f8>)
 8005eae:	f7fb fdb3 	bl	8001a18 <EF_PutString>
      EF_SetFont(&timesNewRoman_16ptFontInfo);
 8005eb2:	481d      	ldr	r0, [pc, #116]	; (8005f28 <StartE_PapierDrawingTask+0x3fc>)
 8005eb4:	f7fb fb96 	bl	80015e4 <EF_SetFont>
      sprintf(mes, "%d ug/m3", _Mv.InternalPM1);
 8005eb8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	f107 030c 	add.w	r3, r7, #12
 8005ec2:	491a      	ldr	r1, [pc, #104]	; (8005f2c <StartE_PapierDrawingTask+0x400>)
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f005 ff4b 	bl	800bd60 <sprintf_>
      EF_PutString((uint8_t *)mes, 152, 55, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8005eca:	f107 000c 	add.w	r0, r7, #12
 8005ece:	2301      	movs	r3, #1
 8005ed0:	9302      	str	r3, [sp, #8]
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	9301      	str	r3, [sp, #4]
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	9300      	str	r3, [sp, #0]
 8005eda:	2300      	movs	r3, #0
 8005edc:	2237      	movs	r2, #55	; 0x37
 8005ede:	2198      	movs	r1, #152	; 0x98
 8005ee0:	f7fb fd9a 	bl	8001a18 <EF_PutString>

      EF_SetFont(&timesNewRoman_12ptFontInfo);
 8005ee4:	480c      	ldr	r0, [pc, #48]	; (8005f18 <StartE_PapierDrawingTask+0x3ec>)
 8005ee6:	f7fb fb7d 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)"PM 2.5", 152, 80, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8005eea:	2301      	movs	r3, #1
 8005eec:	9302      	str	r3, [sp, #8]
 8005eee:	2301      	movs	r3, #1
 8005ef0:	9301      	str	r3, [sp, #4]
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	9300      	str	r3, [sp, #0]
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	2250      	movs	r2, #80	; 0x50
 8005efa:	2198      	movs	r1, #152	; 0x98
 8005efc:	480c      	ldr	r0, [pc, #48]	; (8005f30 <StartE_PapierDrawingTask+0x404>)
 8005efe:	f7fb fd8b 	bl	8001a18 <EF_PutString>
      sprintf(mes, "%d ug/m3", _Mv.InternalPM25);
 8005f02:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8005f06:	461a      	mov	r2, r3
 8005f08:	e026      	b.n	8005f58 <StartE_PapierDrawingTask+0x42c>
 8005f0a:	bf00      	nop
 8005f0c:	2000404c 	.word	0x2000404c
 8005f10:	20004164 	.word	0x20004164
 8005f14:	20004014 	.word	0x20004014
 8005f18:	08020a54 	.word	0x08020a54
 8005f1c:	0801f388 	.word	0x0801f388
 8005f20:	0801f394 	.word	0x0801f394
 8005f24:	0801f3a0 	.word	0x0801f3a0
 8005f28:	08021d60 	.word	0x08021d60
 8005f2c:	0801f3a8 	.word	0x0801f3a8
 8005f30:	0801f3b4 	.word	0x0801f3b4
 8005f34:	0801f3bc 	.word	0x0801f3bc
 8005f38:	0801f3c4 	.word	0x0801f3c4
 8005f3c:	0801f3d0 	.word	0x0801f3d0
 8005f40:	0801f3d8 	.word	0x0801f3d8
 8005f44:	0801f3e8 	.word	0x0801f3e8
 8005f48:	0801f3f4 	.word	0x0801f3f4
 8005f4c:	0801f400 	.word	0x0801f400
 8005f50:	0801f408 	.word	0x0801f408
 8005f54:	0801f410 	.word	0x0801f410
 8005f58:	f107 030c 	add.w	r3, r7, #12
 8005f5c:	49be      	ldr	r1, [pc, #760]	; (8006258 <StartE_PapierDrawingTask+0x72c>)
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f005 fefe 	bl	800bd60 <sprintf_>
      EF_SetFont(&timesNewRoman_16ptFontInfo);
 8005f64:	48bd      	ldr	r0, [pc, #756]	; (800625c <StartE_PapierDrawingTask+0x730>)
 8005f66:	f7fb fb3d 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)mes, 152, 95, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8005f6a:	f107 000c 	add.w	r0, r7, #12
 8005f6e:	2301      	movs	r3, #1
 8005f70:	9302      	str	r3, [sp, #8]
 8005f72:	2301      	movs	r3, #1
 8005f74:	9301      	str	r3, [sp, #4]
 8005f76:	2300      	movs	r3, #0
 8005f78:	9300      	str	r3, [sp, #0]
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	225f      	movs	r2, #95	; 0x5f
 8005f7e:	2198      	movs	r1, #152	; 0x98
 8005f80:	f7fb fd4a 	bl	8001a18 <EF_PutString>

      EF_SetFont(&timesNewRoman_12ptFontInfo);
 8005f84:	48b6      	ldr	r0, [pc, #728]	; (8006260 <StartE_PapierDrawingTask+0x734>)
 8005f86:	f7fb fb2d 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)"PM 10.0", 152, 120, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	9302      	str	r3, [sp, #8]
 8005f8e:	2301      	movs	r3, #1
 8005f90:	9301      	str	r3, [sp, #4]
 8005f92:	2300      	movs	r3, #0
 8005f94:	9300      	str	r3, [sp, #0]
 8005f96:	2300      	movs	r3, #0
 8005f98:	2278      	movs	r2, #120	; 0x78
 8005f9a:	2198      	movs	r1, #152	; 0x98
 8005f9c:	48b1      	ldr	r0, [pc, #708]	; (8006264 <StartE_PapierDrawingTask+0x738>)
 8005f9e:	f7fb fd3b 	bl	8001a18 <EF_PutString>
      sprintf(mes, "%d ug/m3", _Mv.InternalPM10);
 8005fa2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	f107 030c 	add.w	r3, r7, #12
 8005fac:	49aa      	ldr	r1, [pc, #680]	; (8006258 <StartE_PapierDrawingTask+0x72c>)
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f005 fed6 	bl	800bd60 <sprintf_>
      EF_SetFont(&timesNewRoman_16ptFontInfo);
 8005fb4:	48a9      	ldr	r0, [pc, #676]	; (800625c <StartE_PapierDrawingTask+0x730>)
 8005fb6:	f7fb fb15 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)mes, 152, 135, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8005fba:	f107 000c 	add.w	r0, r7, #12
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	9302      	str	r3, [sp, #8]
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	9301      	str	r3, [sp, #4]
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	9300      	str	r3, [sp, #0]
 8005fca:	2300      	movs	r3, #0
 8005fcc:	2287      	movs	r2, #135	; 0x87
 8005fce:	2198      	movs	r1, #152	; 0x98
 8005fd0:	f7fb fd22 	bl	8001a18 <EF_PutString>

      EF_SetFont(&timesNewRoman_12ptFontInfo);
 8005fd4:	48a2      	ldr	r0, [pc, #648]	; (8006260 <StartE_PapierDrawingTask+0x734>)
 8005fd6:	f7fb fb05 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)"TEMPERATURA", 152, 160, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8005fda:	2301      	movs	r3, #1
 8005fdc:	9302      	str	r3, [sp, #8]
 8005fde:	2301      	movs	r3, #1
 8005fe0:	9301      	str	r3, [sp, #4]
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	9300      	str	r3, [sp, #0]
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	22a0      	movs	r2, #160	; 0xa0
 8005fea:	2198      	movs	r1, #152	; 0x98
 8005fec:	489e      	ldr	r0, [pc, #632]	; (8006268 <StartE_PapierDrawingTask+0x73c>)
 8005fee:	f7fb fd13 	bl	8001a18 <EF_PutString>
      sprintf(mes, "%0.2f T", _Mv.InternalTemperature);
 8005ff2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f7fa fabe 	bl	8000578 <__aeabi_f2d>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	460b      	mov	r3, r1
 8006000:	f107 000c 	add.w	r0, r7, #12
 8006004:	4999      	ldr	r1, [pc, #612]	; (800626c <StartE_PapierDrawingTask+0x740>)
 8006006:	f005 feab 	bl	800bd60 <sprintf_>
      EF_SetFont(&timesNewRoman_16ptFontInfo);
 800600a:	4894      	ldr	r0, [pc, #592]	; (800625c <StartE_PapierDrawingTask+0x730>)
 800600c:	f7fb faea 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)mes, 152, 175, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006010:	f107 000c 	add.w	r0, r7, #12
 8006014:	2301      	movs	r3, #1
 8006016:	9302      	str	r3, [sp, #8]
 8006018:	2301      	movs	r3, #1
 800601a:	9301      	str	r3, [sp, #4]
 800601c:	2300      	movs	r3, #0
 800601e:	9300      	str	r3, [sp, #0]
 8006020:	2300      	movs	r3, #0
 8006022:	22af      	movs	r2, #175	; 0xaf
 8006024:	2198      	movs	r1, #152	; 0x98
 8006026:	f7fb fcf7 	bl	8001a18 <EF_PutString>

      EF_SetFont(&timesNewRoman_12ptFontInfo);
 800602a:	488d      	ldr	r0, [pc, #564]	; (8006260 <StartE_PapierDrawingTask+0x734>)
 800602c:	f7fb fada 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)"WILGOTNOŚĆ", 152, 200, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006030:	2301      	movs	r3, #1
 8006032:	9302      	str	r3, [sp, #8]
 8006034:	2301      	movs	r3, #1
 8006036:	9301      	str	r3, [sp, #4]
 8006038:	2300      	movs	r3, #0
 800603a:	9300      	str	r3, [sp, #0]
 800603c:	2300      	movs	r3, #0
 800603e:	22c8      	movs	r2, #200	; 0xc8
 8006040:	2198      	movs	r1, #152	; 0x98
 8006042:	488b      	ldr	r0, [pc, #556]	; (8006270 <StartE_PapierDrawingTask+0x744>)
 8006044:	f7fb fce8 	bl	8001a18 <EF_PutString>
      sprintf(mes, "%0.2f %%", _Mv.InternalHumidity);
 8006048:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800604c:	4618      	mov	r0, r3
 800604e:	f7fa fa93 	bl	8000578 <__aeabi_f2d>
 8006052:	4602      	mov	r2, r0
 8006054:	460b      	mov	r3, r1
 8006056:	f107 000c 	add.w	r0, r7, #12
 800605a:	4986      	ldr	r1, [pc, #536]	; (8006274 <StartE_PapierDrawingTask+0x748>)
 800605c:	f005 fe80 	bl	800bd60 <sprintf_>
      EF_SetFont(&timesNewRoman_16ptFontInfo);
 8006060:	487e      	ldr	r0, [pc, #504]	; (800625c <StartE_PapierDrawingTask+0x730>)
 8006062:	f7fb fabf 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)mes, 152, 215, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006066:	f107 000c 	add.w	r0, r7, #12
 800606a:	2301      	movs	r3, #1
 800606c:	9302      	str	r3, [sp, #8]
 800606e:	2301      	movs	r3, #1
 8006070:	9301      	str	r3, [sp, #4]
 8006072:	2300      	movs	r3, #0
 8006074:	9300      	str	r3, [sp, #0]
 8006076:	2300      	movs	r3, #0
 8006078:	22d7      	movs	r2, #215	; 0xd7
 800607a:	2198      	movs	r1, #152	; 0x98
 800607c:	f7fb fccc 	bl	8001a18 <EF_PutString>

      EF_SetFont(&timesNewRoman_12ptFontInfo);
 8006080:	4877      	ldr	r0, [pc, #476]	; (8006260 <StartE_PapierDrawingTask+0x734>)
 8006082:	f7fb faaf 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)"CIŚNIENIE", 152, 240, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006086:	2301      	movs	r3, #1
 8006088:	9302      	str	r3, [sp, #8]
 800608a:	2301      	movs	r3, #1
 800608c:	9301      	str	r3, [sp, #4]
 800608e:	2300      	movs	r3, #0
 8006090:	9300      	str	r3, [sp, #0]
 8006092:	2300      	movs	r3, #0
 8006094:	22f0      	movs	r2, #240	; 0xf0
 8006096:	2198      	movs	r1, #152	; 0x98
 8006098:	4877      	ldr	r0, [pc, #476]	; (8006278 <StartE_PapierDrawingTask+0x74c>)
 800609a:	f7fb fcbd 	bl	8001a18 <EF_PutString>
      sprintf(mes, "%0.2f hPa", _Mv.Pressure);
 800609e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7fa fa68 	bl	8000578 <__aeabi_f2d>
 80060a8:	4602      	mov	r2, r0
 80060aa:	460b      	mov	r3, r1
 80060ac:	f107 000c 	add.w	r0, r7, #12
 80060b0:	4972      	ldr	r1, [pc, #456]	; (800627c <StartE_PapierDrawingTask+0x750>)
 80060b2:	f005 fe55 	bl	800bd60 <sprintf_>
      EF_SetFont(&timesNewRoman_16ptFontInfo);
 80060b6:	4869      	ldr	r0, [pc, #420]	; (800625c <StartE_PapierDrawingTask+0x730>)
 80060b8:	f7fb fa94 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)mes, 152, 255, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 80060bc:	f107 000c 	add.w	r0, r7, #12
 80060c0:	2301      	movs	r3, #1
 80060c2:	9302      	str	r3, [sp, #8]
 80060c4:	2301      	movs	r3, #1
 80060c6:	9301      	str	r3, [sp, #4]
 80060c8:	2300      	movs	r3, #0
 80060ca:	9300      	str	r3, [sp, #0]
 80060cc:	2300      	movs	r3, #0
 80060ce:	22ff      	movs	r2, #255	; 0xff
 80060d0:	2198      	movs	r1, #152	; 0x98
 80060d2:	f7fb fca1 	bl	8001a18 <EF_PutString>

      EF_SetFont(&timesNewRoman_10ptFontInfo);
 80060d6:	486a      	ldr	r0, [pc, #424]	; (8006280 <StartE_PapierDrawingTask+0x754>)
 80060d8:	f7fb fa84 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)"SEKCJA", 300, 0, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 80060dc:	2301      	movs	r3, #1
 80060de:	9302      	str	r3, [sp, #8]
 80060e0:	2301      	movs	r3, #1
 80060e2:	9301      	str	r3, [sp, #4]
 80060e4:	2300      	movs	r3, #0
 80060e6:	9300      	str	r3, [sp, #0]
 80060e8:	2300      	movs	r3, #0
 80060ea:	2200      	movs	r2, #0
 80060ec:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80060f0:	4864      	ldr	r0, [pc, #400]	; (8006284 <StartE_PapierDrawingTask+0x758>)
 80060f2:	f7fb fc91 	bl	8001a18 <EF_PutString>
      EF_PutString((uint8_t *)"DODATKOWA", 300, 20, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 80060f6:	2301      	movs	r3, #1
 80060f8:	9302      	str	r3, [sp, #8]
 80060fa:	2301      	movs	r3, #1
 80060fc:	9301      	str	r3, [sp, #4]
 80060fe:	2300      	movs	r3, #0
 8006100:	9300      	str	r3, [sp, #0]
 8006102:	2300      	movs	r3, #0
 8006104:	2214      	movs	r2, #20
 8006106:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800610a:	485f      	ldr	r0, [pc, #380]	; (8006288 <StartE_PapierDrawingTask+0x75c>)
 800610c:	f7fb fc84 	bl	8001a18 <EF_PutString>

      EF_SetFont(&timesNewRoman_10ptFontInfo);
 8006110:	485b      	ldr	r0, [pc, #364]	; (8006280 <StartE_PapierDrawingTask+0x754>)
 8006112:	f7fb fa67 	bl	80015e4 <EF_SetFont>
      EF_PutString((uint8_t *)"FAZA", 300, 40, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006116:	2301      	movs	r3, #1
 8006118:	9302      	str	r3, [sp, #8]
 800611a:	2301      	movs	r3, #1
 800611c:	9301      	str	r3, [sp, #4]
 800611e:	2300      	movs	r3, #0
 8006120:	9300      	str	r3, [sp, #0]
 8006122:	2300      	movs	r3, #0
 8006124:	2228      	movs	r2, #40	; 0x28
 8006126:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800612a:	4858      	ldr	r0, [pc, #352]	; (800628c <StartE_PapierDrawingTask+0x760>)
 800612c:	f7fb fc74 	bl	8001a18 <EF_PutString>
      EF_PutString((uint8_t *)"KSI??ŻYCA", 300, 52, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006130:	2301      	movs	r3, #1
 8006132:	9302      	str	r3, [sp, #8]
 8006134:	2301      	movs	r3, #1
 8006136:	9301      	str	r3, [sp, #4]
 8006138:	2300      	movs	r3, #0
 800613a:	9300      	str	r3, [sp, #0]
 800613c:	2300      	movs	r3, #0
 800613e:	2234      	movs	r2, #52	; 0x34
 8006140:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006144:	4852      	ldr	r0, [pc, #328]	; (8006290 <StartE_PapierDrawingTask+0x764>)
 8006146:	f7fb fc67 	bl	8001a18 <EF_PutString>
      sprintf(mes, "%0.2f%%", _MoonPhase);
 800614a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800614e:	f107 000c 	add.w	r0, r7, #12
 8006152:	4950      	ldr	r1, [pc, #320]	; (8006294 <StartE_PapierDrawingTask+0x768>)
 8006154:	f005 fe04 	bl	800bd60 <sprintf_>
      EF_PutString((uint8_t *)mes, 300, 64, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006158:	f107 000c 	add.w	r0, r7, #12
 800615c:	2301      	movs	r3, #1
 800615e:	9302      	str	r3, [sp, #8]
 8006160:	2301      	movs	r3, #1
 8006162:	9301      	str	r3, [sp, #4]
 8006164:	2300      	movs	r3, #0
 8006166:	9300      	str	r3, [sp, #0]
 8006168:	2300      	movs	r3, #0
 800616a:	2240      	movs	r2, #64	; 0x40
 800616c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006170:	f7fb fc52 	bl	8001a18 <EF_PutString>

      EF_PutString((uint8_t *)"CZAS", 300, 76, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006174:	2301      	movs	r3, #1
 8006176:	9302      	str	r3, [sp, #8]
 8006178:	2301      	movs	r3, #1
 800617a:	9301      	str	r3, [sp, #4]
 800617c:	2300      	movs	r3, #0
 800617e:	9300      	str	r3, [sp, #0]
 8006180:	2300      	movs	r3, #0
 8006182:	224c      	movs	r2, #76	; 0x4c
 8006184:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006188:	4843      	ldr	r0, [pc, #268]	; (8006298 <StartE_PapierDrawingTask+0x76c>)
 800618a:	f7fb fc45 	bl	8001a18 <EF_PutString>
      EF_PutString((uint8_t *)"NADEJŚCIA", 300, 88, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 800618e:	2301      	movs	r3, #1
 8006190:	9302      	str	r3, [sp, #8]
 8006192:	2301      	movs	r3, #1
 8006194:	9301      	str	r3, [sp, #4]
 8006196:	2300      	movs	r3, #0
 8006198:	9300      	str	r3, [sp, #0]
 800619a:	2300      	movs	r3, #0
 800619c:	2258      	movs	r2, #88	; 0x58
 800619e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80061a2:	483e      	ldr	r0, [pc, #248]	; (800629c <StartE_PapierDrawingTask+0x770>)
 80061a4:	f7fb fc38 	bl	8001a18 <EF_PutString>
      EF_PutString((uint8_t *)"DANYCH", 300, 100, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 80061a8:	2301      	movs	r3, #1
 80061aa:	9302      	str	r3, [sp, #8]
 80061ac:	2301      	movs	r3, #1
 80061ae:	9301      	str	r3, [sp, #4]
 80061b0:	2300      	movs	r3, #0
 80061b2:	9300      	str	r3, [sp, #0]
 80061b4:	2300      	movs	r3, #0
 80061b6:	2264      	movs	r2, #100	; 0x64
 80061b8:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80061bc:	4838      	ldr	r0, [pc, #224]	; (80062a0 <StartE_PapierDrawingTask+0x774>)
 80061be:	f7fb fc2b 	bl	8001a18 <EF_PutString>
      sprintf(mes, "%d : %d", RtcTime.Hours, RtcTime.Minutes);
 80061c2:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 80061c6:	461a      	mov	r2, r3
 80061c8:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 80061cc:	f107 000c 	add.w	r0, r7, #12
 80061d0:	4934      	ldr	r1, [pc, #208]	; (80062a4 <StartE_PapierDrawingTask+0x778>)
 80061d2:	f005 fdc5 	bl	800bd60 <sprintf_>
      EF_PutString((uint8_t *)mes, 300, 112, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 80061d6:	f107 000c 	add.w	r0, r7, #12
 80061da:	2301      	movs	r3, #1
 80061dc:	9302      	str	r3, [sp, #8]
 80061de:	2301      	movs	r3, #1
 80061e0:	9301      	str	r3, [sp, #4]
 80061e2:	2300      	movs	r3, #0
 80061e4:	9300      	str	r3, [sp, #0]
 80061e6:	2300      	movs	r3, #0
 80061e8:	2270      	movs	r2, #112	; 0x70
 80061ea:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80061ee:	f7fb fc13 	bl	8001a18 <EF_PutString>
      sprintf(mes, "%d : %d : 20%d", RtcDate.Date, RtcDate.Month, RtcDate.Year);
 80061f2:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 80061f6:	461a      	mov	r2, r3
 80061f8:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 80061fc:	4619      	mov	r1, r3
 80061fe:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8006202:	f107 000c 	add.w	r0, r7, #12
 8006206:	9300      	str	r3, [sp, #0]
 8006208:	460b      	mov	r3, r1
 800620a:	4927      	ldr	r1, [pc, #156]	; (80062a8 <StartE_PapierDrawingTask+0x77c>)
 800620c:	f005 fda8 	bl	800bd60 <sprintf_>
      EF_PutString((uint8_t *)mes, 300, 124, BLACK, BG_TRANSPARENT, WHITE, E_PAPIER);
 8006210:	f107 000c 	add.w	r0, r7, #12
 8006214:	2301      	movs	r3, #1
 8006216:	9302      	str	r3, [sp, #8]
 8006218:	2301      	movs	r3, #1
 800621a:	9301      	str	r3, [sp, #4]
 800621c:	2300      	movs	r3, #0
 800621e:	9300      	str	r3, [sp, #0]
 8006220:	2300      	movs	r3, #0
 8006222:	227c      	movs	r2, #124	; 0x7c
 8006224:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006228:	f7fb fbf6 	bl	8001a18 <EF_PutString>
      osMutexRelease(E_PAPIERMutexHandle);
 800622c:	4b1f      	ldr	r3, [pc, #124]	; (80062ac <StartE_PapierDrawingTask+0x780>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4618      	mov	r0, r3
 8006232:	f00e fe1e 	bl	8014e72 <osMutexRelease>
      osEventFlagsSet(C3V1FlagsHandle, E_PAPIER_DISPLAY_FLAG);
 8006236:	4b1e      	ldr	r3, [pc, #120]	; (80062b0 <StartE_PapierDrawingTask+0x784>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2108      	movs	r1, #8
 800623c:	4618      	mov	r0, r3
 800623e:	f00e fc6b 	bl	8014b18 <osEventFlagsSet>
      osEventFlagsSet(C3V1FlagsHandle, SEND_MEASURMENT_COMMAND_FLAG);
 8006242:	4b1b      	ldr	r3, [pc, #108]	; (80062b0 <StartE_PapierDrawingTask+0x784>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2101      	movs	r1, #1
 8006248:	4618      	mov	r0, r3
 800624a:	f00e fc65 	bl	8014b18 <osEventFlagsSet>

      osDelay(1);
 800624e:	2001      	movs	r0, #1
 8006250:	f00e fb76 	bl	8014940 <osDelay>
   {
 8006254:	e483      	b.n	8005b5e <StartE_PapierDrawingTask+0x32>
 8006256:	bf00      	nop
 8006258:	0801f3a8 	.word	0x0801f3a8
 800625c:	08021d60 	.word	0x08021d60
 8006260:	08020a54 	.word	0x08020a54
 8006264:	0801f3bc 	.word	0x0801f3bc
 8006268:	0801f3c4 	.word	0x0801f3c4
 800626c:	0801f3d0 	.word	0x0801f3d0
 8006270:	0801f3d8 	.word	0x0801f3d8
 8006274:	0801f3e8 	.word	0x0801f3e8
 8006278:	0801f41c 	.word	0x0801f41c
 800627c:	0801f428 	.word	0x0801f428
 8006280:	0801fdfc 	.word	0x0801fdfc
 8006284:	0801f434 	.word	0x0801f434
 8006288:	0801f43c 	.word	0x0801f43c
 800628c:	0801f448 	.word	0x0801f448
 8006290:	0801f450 	.word	0x0801f450
 8006294:	0801f45c 	.word	0x0801f45c
 8006298:	0801f464 	.word	0x0801f464
 800629c:	0801f46c 	.word	0x0801f46c
 80062a0:	0801f478 	.word	0x0801f478
 80062a4:	0801f370 	.word	0x0801f370
 80062a8:	0801f378 	.word	0x0801f378
 80062ac:	20004040 	.word	0x20004040
 80062b0:	20004054 	.word	0x20004054

080062b4 <StartE_PapierDisplayTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartE_PapierDisplayTask */
void StartE_PapierDisplayTask(void *argument)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartE_PapierDisplayTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 80062bc:	4b1d      	ldr	r3, [pc, #116]	; (8006334 <StartE_PapierDisplayTask+0x80>)
 80062be:	6818      	ldr	r0, [r3, #0]
 80062c0:	f04f 33ff 	mov.w	r3, #4294967295
 80062c4:	2202      	movs	r2, #2
 80062c6:	2102      	movs	r1, #2
 80062c8:	f00e fc9c 	bl	8014c04 <osEventFlagsWait>
   /* Infinite loop */
   for(;;)
   {
      osEventFlagsWait(C3V1FlagsHandle, E_PAPIER_DISPLAY_FLAG, osFlagsWaitAny, osWaitForever);
 80062cc:	4b19      	ldr	r3, [pc, #100]	; (8006334 <StartE_PapierDisplayTask+0x80>)
 80062ce:	6818      	ldr	r0, [r3, #0]
 80062d0:	f04f 33ff 	mov.w	r3, #4294967295
 80062d4:	2200      	movs	r2, #0
 80062d6:	2108      	movs	r1, #8
 80062d8:	f00e fc94 	bl	8014c04 <osEventFlagsWait>
      osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 80062dc:	4b16      	ldr	r3, [pc, #88]	; (8006338 <StartE_PapierDisplayTask+0x84>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f04f 31ff 	mov.w	r1, #4294967295
 80062e4:	4618      	mov	r0, r3
 80062e6:	f00e fd79 	bl	8014ddc <osMutexAcquire>
      osMutexAcquire(E_PAPIERMutexHandle, osWaitForever);
 80062ea:	4b14      	ldr	r3, [pc, #80]	; (800633c <StartE_PapierDisplayTask+0x88>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f04f 31ff 	mov.w	r1, #4294967295
 80062f2:	4618      	mov	r0, r3
 80062f4:	f00e fd72 	bl	8014ddc <osMutexAcquire>
      osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80062f8:	4b11      	ldr	r3, [pc, #68]	; (8006340 <StartE_PapierDisplayTask+0x8c>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f04f 31ff 	mov.w	r1, #4294967295
 8006300:	4618      	mov	r0, r3
 8006302:	f00e fd6b 	bl	8014ddc <osMutexAcquire>
      e_papier_display();
 8006306:	f7fe faff 	bl	8004908 <e_papier_display>
      e_papier_clear();
 800630a:	f7fe fb6f 	bl	80049ec <e_papier_clear>
      osMutexRelease(SPI1MutexHandle);
 800630e:	4b0c      	ldr	r3, [pc, #48]	; (8006340 <StartE_PapierDisplayTask+0x8c>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4618      	mov	r0, r3
 8006314:	f00e fdad 	bl	8014e72 <osMutexRelease>
      osMutexRelease(E_PAPIERMutexHandle);
 8006318:	4b08      	ldr	r3, [pc, #32]	; (800633c <StartE_PapierDisplayTask+0x88>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4618      	mov	r0, r3
 800631e:	f00e fda8 	bl	8014e72 <osMutexRelease>
      osMutexRelease(ScreensDcMutexHandle);
 8006322:	4b05      	ldr	r3, [pc, #20]	; (8006338 <StartE_PapierDisplayTask+0x84>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4618      	mov	r0, r3
 8006328:	f00e fda3 	bl	8014e72 <osMutexRelease>
      osDelay(1);
 800632c:	2001      	movs	r0, #1
 800632e:	f00e fb07 	bl	8014940 <osDelay>
      osEventFlagsWait(C3V1FlagsHandle, E_PAPIER_DISPLAY_FLAG, osFlagsWaitAny, osWaitForever);
 8006332:	e7cb      	b.n	80062cc <StartE_PapierDisplayTask+0x18>
 8006334:	20004054 	.word	0x20004054
 8006338:	20004034 	.word	0x20004034
 800633c:	20004040 	.word	0x20004040
 8006340:	2000403c 	.word	0x2000403c

08006344 <StartMenuTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMenuTask */
void StartMenuTask(void *argument)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMenuTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 800634c:	4b0c      	ldr	r3, [pc, #48]	; (8006380 <StartMenuTask+0x3c>)
 800634e:	6818      	ldr	r0, [r3, #0]
 8006350:	f04f 33ff 	mov.w	r3, #4294967295
 8006354:	2202      	movs	r2, #2
 8006356:	2102      	movs	r1, #2
 8006358:	f00e fc54 	bl	8014c04 <osEventFlagsWait>
   /* Infinite loop */
   for(;;)
   {
      osMutexAcquire(EncoderMutexHandle, osWaitForever);
 800635c:	4b09      	ldr	r3, [pc, #36]	; (8006384 <StartMenuTask+0x40>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f04f 31ff 	mov.w	r1, #4294967295
 8006364:	4618      	mov	r0, r3
 8006366:	f00e fd39 	bl	8014ddc <osMutexAcquire>
      MENU_Handler();
 800636a:	f7fb fc79 	bl	8001c60 <MENU_Handler>
      osMutexRelease(EncoderMutexHandle);
 800636e:	4b05      	ldr	r3, [pc, #20]	; (8006384 <StartMenuTask+0x40>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4618      	mov	r0, r3
 8006374:	f00e fd7d 	bl	8014e72 <osMutexRelease>
      osDelay(10);
 8006378:	200a      	movs	r0, #10
 800637a:	f00e fae1 	bl	8014940 <osDelay>
      osMutexAcquire(EncoderMutexHandle, osWaitForever);
 800637e:	e7ed      	b.n	800635c <StartMenuTask+0x18>
 8006380:	20004054 	.word	0x20004054
 8006384:	20004050 	.word	0x20004050

08006388 <StartSaveMemoryTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSaveMemoryTask */
void StartSaveMemoryTask(void *argument)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	f5ad 7d1e 	sub.w	sp, sp, #632	; 0x278
 800638e:	af00      	add	r7, sp, #0
 8006390:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8006394:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8006398:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartSaveMemoryTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 800639a:	4b62      	ldr	r3, [pc, #392]	; (8006524 <StartSaveMemoryTask+0x19c>)
 800639c:	6818      	ldr	r0, [r3, #0]
 800639e:	f04f 33ff 	mov.w	r3, #4294967295
 80063a2:	2202      	movs	r2, #2
 80063a4:	2102      	movs	r1, #2
 80063a6:	f00e fc2d 	bl	8014c04 <osEventFlagsWait>
   osEventFlagsWait(C3V1FlagsHandle, NEW_DAY_TO_SAVE, osFlagsWaitAny, osWaitForever);
 80063aa:	4b5e      	ldr	r3, [pc, #376]	; (8006524 <StartSaveMemoryTask+0x19c>)
 80063ac:	6818      	ldr	r0, [r3, #0]
 80063ae:	f04f 33ff 	mov.w	r3, #4294967295
 80063b2:	2200      	movs	r2, #0
 80063b4:	2120      	movs	r1, #32
 80063b6:	f00e fc25 	bl	8014c04 <osEventFlagsWait>
   PageVariable_TypeDef Pv             = { 0 };
 80063ba:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80063be:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80063c2:	4618      	mov	r0, r3
 80063c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80063c8:	461a      	mov	r2, r3
 80063ca:	2100      	movs	r1, #0
 80063cc:	f012 faf0 	bl	80189b0 <memset>
   MV_TypeDef _Mv                      = { 0 };
 80063d0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80063d4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80063d8:	4618      	mov	r0, r3
 80063da:	2330      	movs	r3, #48	; 0x30
 80063dc:	461a      	mov	r2, r3
 80063de:	2100      	movs	r1, #0
 80063e0:	f012 fae6 	bl	80189b0 <memset>
   uint32_t Cnt                        = 0;
 80063e4:	2300      	movs	r3, #0
 80063e6:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
   RTC_TimeTypeDef RtcTime             = { 0 };
 80063ea:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80063ee:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80063f2:	461a      	mov	r2, r3
 80063f4:	2300      	movs	r3, #0
 80063f6:	6013      	str	r3, [r2, #0]
 80063f8:	6053      	str	r3, [r2, #4]
 80063fa:	6093      	str	r3, [r2, #8]
 80063fc:	60d3      	str	r3, [r2, #12]
 80063fe:	6113      	str	r3, [r2, #16]
   RTC_DateTypeDef RtcDate             = { 0 };
 8006400:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8006404:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8006408:	2200      	movs	r2, #0
 800640a:	601a      	str	r2, [r3, #0]
   PageVariable_TypeDef ConfirmPv      = { 0 };
 800640c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8006410:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006414:	4618      	mov	r0, r3
 8006416:	f44f 7380 	mov.w	r3, #256	; 0x100
 800641a:	461a      	mov	r2, r3
 800641c:	2100      	movs	r1, #0
 800641e:	f012 fac7 	bl	80189b0 <memset>
   FramDateChart_TypeDef FramDateChart = { 0 };
 8006422:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8006426:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800642a:	461a      	mov	r2, r3
 800642c:	2300      	movs	r3, #0
 800642e:	6013      	str	r3, [r2, #0]
 8006430:	6053      	str	r3, [r2, #4]
 8006432:	6093      	str	r3, [r2, #8]
 8006434:	60d3      	str	r3, [r2, #12]
   uint8_t FramDataChartExistFlag      = 0;
 8006436:	2300      	movs	r3, #0
 8006438:	f887 3273 	strb.w	r3, [r7, #627]	; 0x273
   osMutexAcquire(SPI1MutexHandle, osWaitForever);
 800643c:	4b3a      	ldr	r3, [pc, #232]	; (8006528 <StartSaveMemoryTask+0x1a0>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f04f 31ff 	mov.w	r1, #4294967295
 8006444:	4618      	mov	r0, r3
 8006446:	f00e fcc9 	bl	8014ddc <osMutexAcquire>
   uint32_t PageCnt          = fram_Read32(&Fram, LAST_PAGE_NUMBER_ADDR);
 800644a:	2100      	movs	r1, #0
 800644c:	4837      	ldr	r0, [pc, #220]	; (800652c <StartSaveMemoryTask+0x1a4>)
 800644e:	f7fe fd48 	bl	8004ee2 <fram_Read32>
 8006452:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
   uint32_t FramDateChartCnt = fram_Read32(&Fram, DATE_CHART_CNT_ADDR);
 8006456:	2104      	movs	r1, #4
 8006458:	4834      	ldr	r0, [pc, #208]	; (800652c <StartSaveMemoryTask+0x1a4>)
 800645a:	f7fe fd42 	bl	8004ee2 <fram_Read32>
 800645e:	f8c7 0264 	str.w	r0, [r7, #612]	; 0x264
   osMutexRelease(SPI1MutexHandle);
 8006462:	4b31      	ldr	r3, [pc, #196]	; (8006528 <StartSaveMemoryTask+0x1a0>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4618      	mov	r0, r3
 8006468:	f00e fd03 	bl	8014e72 <osMutexRelease>
   osMutexAcquire(RTCMutexHandle, osWaitForever);
 800646c:	4b30      	ldr	r3, [pc, #192]	; (8006530 <StartSaveMemoryTask+0x1a8>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f04f 31ff 	mov.w	r1, #4294967295
 8006474:	4618      	mov	r0, r3
 8006476:	f00e fcb1 	bl	8014ddc <osMutexAcquire>
   HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 800647a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800647e:	2200      	movs	r2, #0
 8006480:	4619      	mov	r1, r3
 8006482:	482c      	ldr	r0, [pc, #176]	; (8006534 <StartSaveMemoryTask+0x1ac>)
 8006484:	f009 fc78 	bl	800fd78 <HAL_RTC_GetTime>
   HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 8006488:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800648c:	2200      	movs	r2, #0
 800648e:	4619      	mov	r1, r3
 8006490:	4828      	ldr	r0, [pc, #160]	; (8006534 <StartSaveMemoryTask+0x1ac>)
 8006492:	f009 fd5b 	bl	800ff4c <HAL_RTC_GetDate>
   osMutexRelease(RTCMutexHandle);
 8006496:	4b26      	ldr	r3, [pc, #152]	; (8006530 <StartSaveMemoryTask+0x1a8>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4618      	mov	r0, r3
 800649c:	f00e fce9 	bl	8014e72 <osMutexRelease>

   for(int i = DATE_CHART_ADDR_START; i < DATE_CHART_ADDR_END; i += 12)
 80064a0:	2308      	movs	r3, #8
 80064a2:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 80064a6:	e04c      	b.n	8006542 <StartSaveMemoryTask+0x1ba>
   {
      osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80064a8:	4b1f      	ldr	r3, [pc, #124]	; (8006528 <StartSaveMemoryTask+0x1a0>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f04f 31ff 	mov.w	r1, #4294967295
 80064b0:	4618      	mov	r0, r3
 80064b2:	f00e fc93 	bl	8014ddc <osMutexAcquire>
      fram_Read(&Fram, i, &FramDateChart, 12);
 80064b6:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 80064ba:	b299      	uxth	r1, r3
 80064bc:	f107 020c 	add.w	r2, r7, #12
 80064c0:	230c      	movs	r3, #12
 80064c2:	481a      	ldr	r0, [pc, #104]	; (800652c <StartSaveMemoryTask+0x1a4>)
 80064c4:	f7fe fdc1 	bl	800504a <fram_Read>
      osMutexRelease(SPI1MutexHandle);
 80064c8:	4b17      	ldr	r3, [pc, #92]	; (8006528 <StartSaveMemoryTask+0x1a0>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4618      	mov	r0, r3
 80064ce:	f00e fcd0 	bl	8014e72 <osMutexRelease>
      if(FramDateChart.Date == RtcDate.Date && FramDateChart.Month == RtcDate.Month && FramDateChart.Year == RtcDate.Year)
 80064d2:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80064d6:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80064da:	781a      	ldrb	r2, [r3, #0]
 80064dc:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80064e0:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80064e4:	789b      	ldrb	r3, [r3, #2]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d126      	bne.n	8006538 <StartSaveMemoryTask+0x1b0>
 80064ea:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80064ee:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80064f2:	785a      	ldrb	r2, [r3, #1]
 80064f4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80064f8:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80064fc:	785b      	ldrb	r3, [r3, #1]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d11a      	bne.n	8006538 <StartSaveMemoryTask+0x1b0>
 8006502:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8006506:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800650a:	789a      	ldrb	r2, [r3, #2]
 800650c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8006510:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8006514:	78db      	ldrb	r3, [r3, #3]
 8006516:	429a      	cmp	r2, r3
 8006518:	d10e      	bne.n	8006538 <StartSaveMemoryTask+0x1b0>
      {
         FramDataChartExistFlag = 1;
 800651a:	2301      	movs	r3, #1
 800651c:	f887 3273 	strb.w	r3, [r7, #627]	; 0x273
         // FramDateChart.Length   = 0;
         // fram_Write(&Fram, DATE_CHART_ADDR_START + FramDateChartCnt * sizeof(FramDateChart_TypeDef), &FramDateChart,
         // sizeof(FramDateChart_TypeDef));
         break;
 8006520:	e015      	b.n	800654e <StartSaveMemoryTask+0x1c6>
 8006522:	bf00      	nop
 8006524:	20004054 	.word	0x20004054
 8006528:	2000403c 	.word	0x2000403c
 800652c:	20003fbc 	.word	0x20003fbc
 8006530:	2000404c 	.word	0x2000404c
 8006534:	20004164 	.word	0x20004164
   for(int i = DATE_CHART_ADDR_START; i < DATE_CHART_ADDR_END; i += 12)
 8006538:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 800653c:	330c      	adds	r3, #12
 800653e:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 8006542:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8006546:	f241 7277 	movw	r2, #6007	; 0x1777
 800654a:	4293      	cmp	r3, r2
 800654c:	ddac      	ble.n	80064a8 <StartSaveMemoryTask+0x120>
      }
   }
   if(FramDataChartExistFlag == 0)
 800654e:	f897 3273 	ldrb.w	r3, [r7, #627]	; 0x273
 8006552:	2b00      	cmp	r3, #0
 8006554:	d157      	bne.n	8006606 <StartSaveMemoryTask+0x27e>
   {
      osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8006556:	4ba7      	ldr	r3, [pc, #668]	; (80067f4 <StartSaveMemoryTask+0x46c>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f04f 31ff 	mov.w	r1, #4294967295
 800655e:	4618      	mov	r0, r3
 8006560:	f00e fc3c 	bl	8014ddc <osMutexAcquire>
      fram_Increment32(&Fram, DATE_CHART_CNT_ADDR);
 8006564:	2104      	movs	r1, #4
 8006566:	48a4      	ldr	r0, [pc, #656]	; (80067f8 <StartSaveMemoryTask+0x470>)
 8006568:	f7fe fcf7 	bl	8004f5a <fram_Increment32>
      FramDateChart.Date           = RtcDate.Date;
 800656c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8006570:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8006574:	789a      	ldrb	r2, [r3, #2]
 8006576:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800657a:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800657e:	701a      	strb	r2, [r3, #0]
      FramDateChart.Month          = RtcDate.Month;
 8006580:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8006584:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8006588:	785a      	ldrb	r2, [r3, #1]
 800658a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800658e:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8006592:	705a      	strb	r2, [r3, #1]
      FramDateChart.Year           = RtcDate.Year;
 8006594:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8006598:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800659c:	78da      	ldrb	r2, [r3, #3]
 800659e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80065a2:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80065a6:	709a      	strb	r2, [r3, #2]
      FramDateChart.StartFlashPage = PageCnt;
 80065a8:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80065ac:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80065b0:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 80065b4:	605a      	str	r2, [r3, #4]
      FramDateChart.Length         = 0;
 80065b6:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80065ba:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80065be:	2200      	movs	r2, #0
 80065c0:	721a      	strb	r2, [r3, #8]
      FramDateChart.Crc            = CRC_INITIAL_VALUE;
 80065c2:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80065c6:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80065ca:	f04f 32ff 	mov.w	r2, #4294967295
 80065ce:	60da      	str	r2, [r3, #12]
      FramDateChartCnt             = fram_Read32(&Fram, DATE_CHART_CNT_ADDR);
 80065d0:	2104      	movs	r1, #4
 80065d2:	4889      	ldr	r0, [pc, #548]	; (80067f8 <StartSaveMemoryTask+0x470>)
 80065d4:	f7fe fc85 	bl	8004ee2 <fram_Read32>
 80065d8:	f8c7 0264 	str.w	r0, [r7, #612]	; 0x264
      fram_Write(&Fram, DATE_CHART_ADDR_START + FramDateChartCnt * 12, &FramDateChart, 12);
 80065dc:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	461a      	mov	r2, r3
 80065e4:	0052      	lsls	r2, r2, #1
 80065e6:	4413      	add	r3, r2
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	3308      	adds	r3, #8
 80065ee:	b299      	uxth	r1, r3
 80065f0:	f107 020c 	add.w	r2, r7, #12
 80065f4:	230c      	movs	r3, #12
 80065f6:	4880      	ldr	r0, [pc, #512]	; (80067f8 <StartSaveMemoryTask+0x470>)
 80065f8:	f7fe fcf8 	bl	8004fec <fram_Write>
      osMutexRelease(SPI1MutexHandle);
 80065fc:	4b7d      	ldr	r3, [pc, #500]	; (80067f4 <StartSaveMemoryTask+0x46c>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4618      	mov	r0, r3
 8006602:	f00e fc36 	bl	8014e72 <osMutexRelease>
   }

   /* Infinite loop */
   for(;;)
   {
      osMessageQueueGet(DataToSaveQueueHandle, &_Mv, 0, osWaitForever);
 8006606:	4b7d      	ldr	r3, [pc, #500]	; (80067fc <StartSaveMemoryTask+0x474>)
 8006608:	6818      	ldr	r0, [r3, #0]
 800660a:	f507 719a 	add.w	r1, r7, #308	; 0x134
 800660e:	f04f 33ff 	mov.w	r3, #4294967295
 8006612:	2200      	movs	r2, #0
 8006614:	f00e fd3e 	bl	8015094 <osMessageQueueGet>
      osMutexAcquire(RTCMutexHandle, osWaitForever);
 8006618:	4b79      	ldr	r3, [pc, #484]	; (8006800 <StartSaveMemoryTask+0x478>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f04f 31ff 	mov.w	r1, #4294967295
 8006620:	4618      	mov	r0, r3
 8006622:	f00e fbdb 	bl	8014ddc <osMutexAcquire>
      HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 8006626:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800662a:	2200      	movs	r2, #0
 800662c:	4619      	mov	r1, r3
 800662e:	4875      	ldr	r0, [pc, #468]	; (8006804 <StartSaveMemoryTask+0x47c>)
 8006630:	f009 fba2 	bl	800fd78 <HAL_RTC_GetTime>
      HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 8006634:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8006638:	2200      	movs	r2, #0
 800663a:	4619      	mov	r1, r3
 800663c:	4871      	ldr	r0, [pc, #452]	; (8006804 <StartSaveMemoryTask+0x47c>)
 800663e:	f009 fc85 	bl	800ff4c <HAL_RTC_GetDate>
      osMutexRelease(RTCMutexHandle);
 8006642:	4b6f      	ldr	r3, [pc, #444]	; (8006800 <StartSaveMemoryTask+0x478>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4618      	mov	r0, r3
 8006648:	f00e fc13 	bl	8014e72 <osMutexRelease>
      if(osEventFlagsWait(C3V1FlagsHandle, NEW_DAY_TO_SAVE, osFlagsWaitAny, 1) != osFlagsErrorTimeout)
 800664c:	4b6e      	ldr	r3, [pc, #440]	; (8006808 <StartSaveMemoryTask+0x480>)
 800664e:	6818      	ldr	r0, [r3, #0]
 8006650:	2301      	movs	r3, #1
 8006652:	2200      	movs	r2, #0
 8006654:	2120      	movs	r1, #32
 8006656:	f00e fad5 	bl	8014c04 <osEventFlagsWait>
 800665a:	4603      	mov	r3, r0
 800665c:	f113 0f02 	cmn.w	r3, #2
 8006660:	f000 80d6 	beq.w	8006810 <StartSaveMemoryTask+0x488>
      {
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8006664:	4b63      	ldr	r3, [pc, #396]	; (80067f4 <StartSaveMemoryTask+0x46c>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f04f 31ff 	mov.w	r1, #4294967295
 800666c:	4618      	mov	r0, r3
 800666e:	f00e fbb5 	bl	8014ddc <osMutexAcquire>
         PageCnt = fram_Read32(&Fram, LAST_PAGE_NUMBER_ADDR);
 8006672:	2100      	movs	r1, #0
 8006674:	4860      	ldr	r0, [pc, #384]	; (80067f8 <StartSaveMemoryTask+0x470>)
 8006676:	f7fe fc34 	bl	8004ee2 <fram_Read32>
 800667a:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
         flash_WritePage(&Flash, PageCnt, &Pv);
 800667e:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8006682:	461a      	mov	r2, r3
 8006684:	f8d7 126c 	ldr.w	r1, [r7, #620]	; 0x26c
 8006688:	4860      	ldr	r0, [pc, #384]	; (800680c <StartSaveMemoryTask+0x484>)
 800668a:	f7fe fb38 	bl	8004cfe <flash_WritePage>
         flash_ReadPage(&Flash, PageCnt, &ConfirmPv);
 800668e:	f107 031c 	add.w	r3, r7, #28
 8006692:	461a      	mov	r2, r3
 8006694:	f8d7 126c 	ldr.w	r1, [r7, #620]	; 0x26c
 8006698:	485c      	ldr	r0, [pc, #368]	; (800680c <StartSaveMemoryTask+0x484>)
 800669a:	f7fe fb66 	bl	8004d6a <flash_ReadPage>
         if(Pv.PageCRC == ConfirmPv.PageCRC)
 800669e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80066a2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80066a6:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 80066aa:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80066ae:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80066b2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d147      	bne.n	800674a <StartSaveMemoryTask+0x3c2>
         {
            fram_Increment32(&Fram, LAST_PAGE_NUMBER_ADDR);
 80066ba:	2100      	movs	r1, #0
 80066bc:	484e      	ldr	r0, [pc, #312]	; (80067f8 <StartSaveMemoryTask+0x470>)
 80066be:	f7fe fc4c 	bl	8004f5a <fram_Increment32>
            PageCnt = fram_Read32(&Fram, LAST_PAGE_NUMBER_ADDR);
 80066c2:	2100      	movs	r1, #0
 80066c4:	484c      	ldr	r0, [pc, #304]	; (80067f8 <StartSaveMemoryTask+0x470>)
 80066c6:	f7fe fc0c 	bl	8004ee2 <fram_Read32>
 80066ca:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
            FramDateChart.Length++;
 80066ce:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80066d2:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80066d6:	7a1b      	ldrb	r3, [r3, #8]
 80066d8:	3301      	adds	r3, #1
 80066da:	b2da      	uxtb	r2, r3
 80066dc:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80066e0:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80066e4:	721a      	strb	r2, [r3, #8]
            FramDateChart.Crc = Crc(FramDateChart.Crc, 256, &Pv);
 80066e6:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80066ea:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 80066f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80066f8:	4618      	mov	r0, r3
 80066fa:	f7fd fee7 	bl	80044cc <Crc>
 80066fe:	4602      	mov	r2, r0
 8006700:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8006704:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8006708:	60da      	str	r2, [r3, #12]
            FramDateChartCnt  = fram_Read32(&Fram, DATE_CHART_CNT_ADDR);
 800670a:	2104      	movs	r1, #4
 800670c:	483a      	ldr	r0, [pc, #232]	; (80067f8 <StartSaveMemoryTask+0x470>)
 800670e:	f7fe fbe8 	bl	8004ee2 <fram_Read32>
 8006712:	f8c7 0264 	str.w	r0, [r7, #612]	; 0x264
            fram_Write(&Fram, DATE_CHART_ADDR_START + FramDateChartCnt * 12, &FramDateChart, 12);
 8006716:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 800671a:	b29b      	uxth	r3, r3
 800671c:	461a      	mov	r2, r3
 800671e:	0052      	lsls	r2, r2, #1
 8006720:	4413      	add	r3, r2
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	b29b      	uxth	r3, r3
 8006726:	3308      	adds	r3, #8
 8006728:	b299      	uxth	r1, r3
 800672a:	f107 020c 	add.w	r2, r7, #12
 800672e:	230c      	movs	r3, #12
 8006730:	4831      	ldr	r0, [pc, #196]	; (80067f8 <StartSaveMemoryTask+0x470>)
 8006732:	f7fe fc5b 	bl	8004fec <fram_Write>
            Memory_ClearBuffer(&ConfirmPv);
 8006736:	f107 031c 	add.w	r3, r7, #28
 800673a:	4618      	mov	r0, r3
 800673c:	f002 f896 	bl	800886c <Memory_ClearBuffer>
            Memory_ClearBuffer(&Pv);
 8006740:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8006744:	4618      	mov	r0, r3
 8006746:	f002 f891 	bl	800886c <Memory_ClearBuffer>
         }
         fram_Increment32(&Fram, DATE_CHART_CNT_ADDR);
 800674a:	2104      	movs	r1, #4
 800674c:	482a      	ldr	r0, [pc, #168]	; (80067f8 <StartSaveMemoryTask+0x470>)
 800674e:	f7fe fc04 	bl	8004f5a <fram_Increment32>
         FramDateChart.Date           = RtcDate.Date;
 8006752:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8006756:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800675a:	789a      	ldrb	r2, [r3, #2]
 800675c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8006760:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8006764:	701a      	strb	r2, [r3, #0]
         FramDateChart.Month          = RtcDate.Month;
 8006766:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800676a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800676e:	785a      	ldrb	r2, [r3, #1]
 8006770:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8006774:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8006778:	705a      	strb	r2, [r3, #1]
         FramDateChart.Year           = RtcDate.Year;
 800677a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800677e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8006782:	78da      	ldrb	r2, [r3, #3]
 8006784:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8006788:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800678c:	709a      	strb	r2, [r3, #2]
         FramDateChart.StartFlashPage = PageCnt;
 800678e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8006792:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8006796:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 800679a:	605a      	str	r2, [r3, #4]
         FramDateChart.Length         = 0;
 800679c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80067a0:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80067a4:	2200      	movs	r2, #0
 80067a6:	721a      	strb	r2, [r3, #8]
         FramDateChart.Crc            = CRC_INITIAL_VALUE;
 80067a8:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80067ac:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80067b0:	f04f 32ff 	mov.w	r2, #4294967295
 80067b4:	60da      	str	r2, [r3, #12]
         FramDateChartCnt             = fram_Read32(&Fram, DATE_CHART_CNT_ADDR);
 80067b6:	2104      	movs	r1, #4
 80067b8:	480f      	ldr	r0, [pc, #60]	; (80067f8 <StartSaveMemoryTask+0x470>)
 80067ba:	f7fe fb92 	bl	8004ee2 <fram_Read32>
 80067be:	f8c7 0264 	str.w	r0, [r7, #612]	; 0x264
         fram_Write(&Fram, DATE_CHART_ADDR_START + FramDateChartCnt * 12, &FramDateChart, 12);
 80067c2:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	461a      	mov	r2, r3
 80067ca:	0052      	lsls	r2, r2, #1
 80067cc:	4413      	add	r3, r2
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	3308      	adds	r3, #8
 80067d4:	b299      	uxth	r1, r3
 80067d6:	f107 020c 	add.w	r2, r7, #12
 80067da:	230c      	movs	r3, #12
 80067dc:	4806      	ldr	r0, [pc, #24]	; (80067f8 <StartSaveMemoryTask+0x470>)
 80067de:	f7fe fc05 	bl	8004fec <fram_Write>
         Cnt = 0;
 80067e2:	2300      	movs	r3, #0
 80067e4:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
         osMutexRelease(SPI1MutexHandle);
 80067e8:	4b02      	ldr	r3, [pc, #8]	; (80067f4 <StartSaveMemoryTask+0x46c>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4618      	mov	r0, r3
 80067ee:	f00e fb40 	bl	8014e72 <osMutexRelease>
 80067f2:	e00d      	b.n	8006810 <StartSaveMemoryTask+0x488>
 80067f4:	2000403c 	.word	0x2000403c
 80067f8:	20003fbc 	.word	0x20003fbc
 80067fc:	2000401c 	.word	0x2000401c
 8006800:	2000404c 	.word	0x2000404c
 8006804:	20004164 	.word	0x20004164
 8006808:	20004054 	.word	0x20004054
 800680c:	20003fac 	.word	0x20003fac
      }
      Pv.Record[Cnt].ExternalHumidity    = _Mv.ExtHumidity;
 8006810:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8006814:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006818:	6859      	ldr	r1, [r3, #4]
 800681a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800681e:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8006822:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8006826:	4613      	mov	r3, r2
 8006828:	00db      	lsls	r3, r3, #3
 800682a:	1a9b      	subs	r3, r3, r2
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	4403      	add	r3, r0
 8006830:	3318      	adds	r3, #24
 8006832:	6019      	str	r1, [r3, #0]
      Pv.Record[Cnt].ExternalPM1         = _Mv.ExtPM1;
 8006834:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8006838:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800683c:	8a98      	ldrh	r0, [r3, #20]
 800683e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8006842:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 8006846:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 800684a:	4613      	mov	r3, r2
 800684c:	00db      	lsls	r3, r3, #3
 800684e:	1a9b      	subs	r3, r3, r2
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	440b      	add	r3, r1
 8006854:	330a      	adds	r3, #10
 8006856:	4602      	mov	r2, r0
 8006858:	801a      	strh	r2, [r3, #0]
      Pv.Record[Cnt].ExternalPM10        = _Mv.ExtPM10;
 800685a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800685e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006862:	8b18      	ldrh	r0, [r3, #24]
 8006864:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8006868:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 800686c:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8006870:	4613      	mov	r3, r2
 8006872:	00db      	lsls	r3, r3, #3
 8006874:	1a9b      	subs	r3, r3, r2
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	440b      	add	r3, r1
 800687a:	330e      	adds	r3, #14
 800687c:	4602      	mov	r2, r0
 800687e:	801a      	strh	r2, [r3, #0]
      Pv.Record[Cnt].ExternalPM25        = _Mv.ExtPM25;
 8006880:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8006884:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006888:	8ad8      	ldrh	r0, [r3, #22]
 800688a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800688e:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 8006892:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8006896:	4613      	mov	r3, r2
 8006898:	00db      	lsls	r3, r3, #3
 800689a:	1a9b      	subs	r3, r3, r2
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	440b      	add	r3, r1
 80068a0:	330c      	adds	r3, #12
 80068a2:	4602      	mov	r2, r0
 80068a4:	801a      	strh	r2, [r3, #0]
      Pv.Record[Cnt].ExternalTemperature = _Mv.ExtTemperature;
 80068a6:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80068aa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80068ae:	6819      	ldr	r1, [r3, #0]
 80068b0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80068b4:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 80068b8:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 80068bc:	4613      	mov	r3, r2
 80068be:	00db      	lsls	r3, r3, #3
 80068c0:	1a9b      	subs	r3, r3, r2
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	4403      	add	r3, r0
 80068c6:	3314      	adds	r3, #20
 80068c8:	6019      	str	r1, [r3, #0]
      Pv.Record[Cnt].Hour                = RtcTime.Hours;
 80068ca:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80068ce:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80068d2:	7818      	ldrb	r0, [r3, #0]
 80068d4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80068d8:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 80068dc:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 80068e0:	4613      	mov	r3, r2
 80068e2:	00db      	lsls	r3, r3, #3
 80068e4:	1a9b      	subs	r3, r3, r2
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	440b      	add	r3, r1
 80068ea:	3303      	adds	r3, #3
 80068ec:	4602      	mov	r2, r0
 80068ee:	701a      	strb	r2, [r3, #0]
      Pv.Record[Cnt].InternalPM1         = _Mv.InternalPM1;
 80068f0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80068f4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80068f8:	8b58      	ldrh	r0, [r3, #26]
 80068fa:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80068fe:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 8006902:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8006906:	4613      	mov	r3, r2
 8006908:	00db      	lsls	r3, r3, #3
 800690a:	1a9b      	subs	r3, r3, r2
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	440b      	add	r3, r1
 8006910:	3304      	adds	r3, #4
 8006912:	4602      	mov	r2, r0
 8006914:	801a      	strh	r2, [r3, #0]
      Pv.Record[Cnt].InternalPM10        = _Mv.InternalPM10;
 8006916:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800691a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800691e:	8bd8      	ldrh	r0, [r3, #30]
 8006920:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8006924:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 8006928:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 800692c:	4613      	mov	r3, r2
 800692e:	00db      	lsls	r3, r3, #3
 8006930:	1a9b      	subs	r3, r3, r2
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	440b      	add	r3, r1
 8006936:	3308      	adds	r3, #8
 8006938:	4602      	mov	r2, r0
 800693a:	801a      	strh	r2, [r3, #0]
      Pv.Record[Cnt].InternalPM25        = _Mv.InternalPM25;
 800693c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8006940:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006944:	8b98      	ldrh	r0, [r3, #28]
 8006946:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800694a:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 800694e:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8006952:	4613      	mov	r3, r2
 8006954:	00db      	lsls	r3, r3, #3
 8006956:	1a9b      	subs	r3, r3, r2
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	440b      	add	r3, r1
 800695c:	3306      	adds	r3, #6
 800695e:	4602      	mov	r2, r0
 8006960:	801a      	strh	r2, [r3, #0]
      Pv.Record[Cnt].Minute              = RtcTime.Minutes;
 8006962:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8006966:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800696a:	7858      	ldrb	r0, [r3, #1]
 800696c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8006970:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 8006974:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8006978:	4613      	mov	r3, r2
 800697a:	00db      	lsls	r3, r3, #3
 800697c:	1a9b      	subs	r3, r3, r2
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	440b      	add	r3, r1
 8006982:	3302      	adds	r3, #2
 8006984:	4602      	mov	r2, r0
 8006986:	701a      	strb	r2, [r3, #0]
      Pv.Record[Cnt].Pressure            = _Mv.Pressure;
 8006988:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800698c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006990:	6919      	ldr	r1, [r3, #16]
 8006992:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8006996:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 800699a:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 800699e:	4613      	mov	r3, r2
 80069a0:	00db      	lsls	r3, r3, #3
 80069a2:	1a9b      	subs	r3, r3, r2
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	4403      	add	r3, r0
 80069a8:	3310      	adds	r3, #16
 80069aa:	6019      	str	r1, [r3, #0]
      Pv.Record[Cnt].Reserved            = Cnt;
 80069ac:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 80069b0:	b2d8      	uxtb	r0, r3
 80069b2:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80069b6:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 80069ba:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 80069be:	4613      	mov	r3, r2
 80069c0:	00db      	lsls	r3, r3, #3
 80069c2:	1a9b      	subs	r3, r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	440b      	add	r3, r1
 80069c8:	4602      	mov	r2, r0
 80069ca:	701a      	strb	r2, [r3, #0]
      Pv.Record[Cnt].Second              = RtcTime.Seconds;
 80069cc:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80069d0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80069d4:	7898      	ldrb	r0, [r3, #2]
 80069d6:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80069da:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 80069de:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 80069e2:	4613      	mov	r3, r2
 80069e4:	00db      	lsls	r3, r3, #3
 80069e6:	1a9b      	subs	r3, r3, r2
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	440b      	add	r3, r1
 80069ec:	3301      	adds	r3, #1
 80069ee:	4602      	mov	r2, r0
 80069f0:	701a      	strb	r2, [r3, #0]
      Cnt++;
 80069f2:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 80069f6:	3301      	adds	r3, #1
 80069f8:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
      if(Cnt == 9)
 80069fc:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8006a00:	2b09      	cmp	r3, #9
 8006a02:	f040 808a 	bne.w	8006b1a <StartSaveMemoryTask+0x792>
      {
         Cnt        = 0;
 8006a06:	2300      	movs	r3, #0
 8006a08:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
         Pv.PageCRC = Crc(CRC_INITIAL_VALUE, 252, &Pv);
 8006a0c:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8006a10:	461a      	mov	r2, r3
 8006a12:	21fc      	movs	r1, #252	; 0xfc
 8006a14:	f04f 30ff 	mov.w	r0, #4294967295
 8006a18:	f7fd fd58 	bl	80044cc <Crc>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8006a22:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006a26:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8006a2a:	4b3e      	ldr	r3, [pc, #248]	; (8006b24 <StartSaveMemoryTask+0x79c>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f04f 31ff 	mov.w	r1, #4294967295
 8006a32:	4618      	mov	r0, r3
 8006a34:	f00e f9d2 	bl	8014ddc <osMutexAcquire>
         PageCnt = fram_Read32(&Fram, LAST_PAGE_NUMBER_ADDR);
 8006a38:	2100      	movs	r1, #0
 8006a3a:	483b      	ldr	r0, [pc, #236]	; (8006b28 <StartSaveMemoryTask+0x7a0>)
 8006a3c:	f7fe fa51 	bl	8004ee2 <fram_Read32>
 8006a40:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
         flash_WritePage(&Flash, PageCnt, &Pv);
 8006a44:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8006a48:	461a      	mov	r2, r3
 8006a4a:	f8d7 126c 	ldr.w	r1, [r7, #620]	; 0x26c
 8006a4e:	4837      	ldr	r0, [pc, #220]	; (8006b2c <StartSaveMemoryTask+0x7a4>)
 8006a50:	f7fe f955 	bl	8004cfe <flash_WritePage>
         flash_ReadPage(&Flash, PageCnt, &ConfirmPv);
 8006a54:	f107 031c 	add.w	r3, r7, #28
 8006a58:	461a      	mov	r2, r3
 8006a5a:	f8d7 126c 	ldr.w	r1, [r7, #620]	; 0x26c
 8006a5e:	4833      	ldr	r0, [pc, #204]	; (8006b2c <StartSaveMemoryTask+0x7a4>)
 8006a60:	f7fe f983 	bl	8004d6a <flash_ReadPage>
         if(Pv.PageCRC == ConfirmPv.PageCRC)
 8006a64:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8006a68:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006a6c:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8006a70:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8006a74:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006a78:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d147      	bne.n	8006b10 <StartSaveMemoryTask+0x788>
         {
            fram_Increment32(&Fram, LAST_PAGE_NUMBER_ADDR);
 8006a80:	2100      	movs	r1, #0
 8006a82:	4829      	ldr	r0, [pc, #164]	; (8006b28 <StartSaveMemoryTask+0x7a0>)
 8006a84:	f7fe fa69 	bl	8004f5a <fram_Increment32>
            PageCnt = fram_Read32(&Fram, LAST_PAGE_NUMBER_ADDR);
 8006a88:	2100      	movs	r1, #0
 8006a8a:	4827      	ldr	r0, [pc, #156]	; (8006b28 <StartSaveMemoryTask+0x7a0>)
 8006a8c:	f7fe fa29 	bl	8004ee2 <fram_Read32>
 8006a90:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
            FramDateChart.Length++;
 8006a94:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8006a98:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8006a9c:	7a1b      	ldrb	r3, [r3, #8]
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	b2da      	uxtb	r2, r3
 8006aa2:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8006aa6:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8006aaa:	721a      	strb	r2, [r3, #8]
            FramDateChart.Crc = Crc(FramDateChart.Crc, 256, &Pv);
 8006aac:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8006ab0:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8006aba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7fd fd04 	bl	80044cc <Crc>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8006aca:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8006ace:	60da      	str	r2, [r3, #12]
            FramDateChartCnt  = fram_Read32(&Fram, DATE_CHART_CNT_ADDR);
 8006ad0:	2104      	movs	r1, #4
 8006ad2:	4815      	ldr	r0, [pc, #84]	; (8006b28 <StartSaveMemoryTask+0x7a0>)
 8006ad4:	f7fe fa05 	bl	8004ee2 <fram_Read32>
 8006ad8:	f8c7 0264 	str.w	r0, [r7, #612]	; 0x264
            fram_Write(&Fram, DATE_CHART_ADDR_START + FramDateChartCnt * 12, &FramDateChart, 12);
 8006adc:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	0052      	lsls	r2, r2, #1
 8006ae6:	4413      	add	r3, r2
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	3308      	adds	r3, #8
 8006aee:	b299      	uxth	r1, r3
 8006af0:	f107 020c 	add.w	r2, r7, #12
 8006af4:	230c      	movs	r3, #12
 8006af6:	480c      	ldr	r0, [pc, #48]	; (8006b28 <StartSaveMemoryTask+0x7a0>)
 8006af8:	f7fe fa78 	bl	8004fec <fram_Write>
            Memory_ClearBuffer(&ConfirmPv);
 8006afc:	f107 031c 	add.w	r3, r7, #28
 8006b00:	4618      	mov	r0, r3
 8006b02:	f001 feb3 	bl	800886c <Memory_ClearBuffer>
            Memory_ClearBuffer(&Pv);
 8006b06:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f001 feae 	bl	800886c <Memory_ClearBuffer>
         }
         osMutexRelease(SPI1MutexHandle);
 8006b10:	4b04      	ldr	r3, [pc, #16]	; (8006b24 <StartSaveMemoryTask+0x79c>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4618      	mov	r0, r3
 8006b16:	f00e f9ac 	bl	8014e72 <osMutexRelease>
      }
      osDelay(1);
 8006b1a:	2001      	movs	r0, #1
 8006b1c:	f00d ff10 	bl	8014940 <osDelay>
      osMessageQueueGet(DataToSaveQueueHandle, &_Mv, 0, osWaitForever);
 8006b20:	e571      	b.n	8006606 <StartSaveMemoryTask+0x27e>
 8006b22:	bf00      	nop
 8006b24:	2000403c 	.word	0x2000403c
 8006b28:	20003fbc 	.word	0x20003fbc
 8006b2c:	20003fac 	.word	0x20003fac

08006b30 <StartChartTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartChartTask */
void StartChartTask(void *argument)
{
 8006b30:	b5b0      	push	{r4, r5, r7, lr}
 8006b32:	f5ad 5d04 	sub.w	sp, sp, #8448	; 0x2100
 8006b36:	b082      	sub	sp, #8
 8006b38:	af02      	add	r7, sp, #8
 8006b3a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8006b3e:	f843 0cfc 	str.w	r0, [r3, #-252]
  /* USER CODE BEGIN StartChartTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8006b42:	4bc5      	ldr	r3, [pc, #788]	; (8006e58 <StartChartTask+0x328>)
 8006b44:	6818      	ldr	r0, [r3, #0]
 8006b46:	f04f 33ff 	mov.w	r3, #4294967295
 8006b4a:	2202      	movs	r2, #2
 8006b4c:	2102      	movs	r1, #2
 8006b4e:	f00e f859 	bl	8014c04 <osEventFlagsWait>
   ChartTypeVariable_TypeDef ChartVariable;
   uint8_t Hour[800]                   = { 0 };
 8006b52:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8006b56:	2200      	movs	r2, #0
 8006b58:	f843 2c20 	str.w	r2, [r3, #-32]
 8006b5c:	3b1c      	subs	r3, #28
 8006b5e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8006b62:	2100      	movs	r1, #0
 8006b64:	4618      	mov	r0, r3
 8006b66:	f011 ff23 	bl	80189b0 <memset>
   uint8_t Minute[800]                 = { 0 };
 8006b6a:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8006b6e:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 8006b72:	2200      	movs	r2, #0
 8006b74:	601a      	str	r2, [r3, #0]
 8006b76:	3304      	adds	r3, #4
 8006b78:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8006b7c:	2100      	movs	r1, #0
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f011 ff16 	bl	80189b0 <memset>
   ChartDateAndType_TypeDef Cda        = { 0 };
 8006b84:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8006b88:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	601a      	str	r2, [r3, #0]
 8006b90:	809a      	strh	r2, [r3, #4]
   uint8_t FramDataChartExistFlag      = 0;
 8006b92:	2300      	movs	r3, #0
 8006b94:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8006b98:	f102 023f 	add.w	r2, r2, #63	; 0x3f
 8006b9c:	7013      	strb	r3, [r2, #0]
   FramDateChart_TypeDef FramDateChart = { 0 };
 8006b9e:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8006ba2:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	2300      	movs	r3, #0
 8006baa:	6013      	str	r3, [r2, #0]
 8006bac:	6053      	str	r3, [r2, #4]
 8006bae:	6093      	str	r3, [r2, #8]
 8006bb0:	60d3      	str	r3, [r2, #12]
   PageVariable_TypeDef Pv             = { 0 };
 8006bb2:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8006bb6:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	2100      	movs	r1, #0
 8006bc4:	f011 fef4 	bl	80189b0 <memset>
   uint16_t Y_Axis[800]                = { 0 };
 8006bc8:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8006bcc:	f6a3 2398 	subw	r3, r3, #2712	; 0xa98
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	2100      	movs	r1, #0
 8006bda:	f011 fee9 	bl	80189b0 <memset>
   uint16_t X_Axis[800]                = { 0 };
 8006bde:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8006be2:	3bd8      	subs	r3, #216	; 0xd8
 8006be4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8006be8:	2100      	movs	r1, #0
 8006bea:	4618      	mov	r0, r3
 8006bec:	f011 fee0 	bl	80189b0 <memset>
   /* Infinite loop */
   for(;;)
   {
      osMessageQueueGet(ChartQueueHandle, &Cda, 0, osWaitForever);
 8006bf0:	4b9a      	ldr	r3, [pc, #616]	; (8006e5c <StartChartTask+0x32c>)
 8006bf2:	6818      	ldr	r0, [r3, #0]
 8006bf4:	f507 615c 	add.w	r1, r7, #3520	; 0xdc0
 8006bf8:	3908      	subs	r1, #8
 8006bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f00e fa48 	bl	8015094 <osMessageQueueGet>
      osMutexAcquire(E_PAPIERMutexHandle, osWaitForever);
 8006c04:	4b96      	ldr	r3, [pc, #600]	; (8006e60 <StartChartTask+0x330>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f04f 31ff 	mov.w	r1, #4294967295
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f00e f8e5 	bl	8014ddc <osMutexAcquire>
      e_papier_clear();
 8006c12:	f7fd feeb 	bl	80049ec <e_papier_clear>
      GFX_DrawLine(63, 50, 63, 281, BLACK, E_PAPIER);
 8006c16:	2301      	movs	r3, #1
 8006c18:	9301      	str	r3, [sp, #4]
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	9300      	str	r3, [sp, #0]
 8006c1e:	f240 1319 	movw	r3, #281	; 0x119
 8006c22:	223f      	movs	r2, #63	; 0x3f
 8006c24:	2132      	movs	r1, #50	; 0x32
 8006c26:	203f      	movs	r0, #63	; 0x3f
 8006c28:	f7fa fc64 	bl	80014f4 <GFX_DrawLine>
      GFX_DrawLine(40, 281, 399, 281, BLACK, E_PAPIER);
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	9301      	str	r3, [sp, #4]
 8006c30:	2300      	movs	r3, #0
 8006c32:	9300      	str	r3, [sp, #0]
 8006c34:	f240 1319 	movw	r3, #281	; 0x119
 8006c38:	f240 128f 	movw	r2, #399	; 0x18f
 8006c3c:	f240 1119 	movw	r1, #281	; 0x119
 8006c40:	2028      	movs	r0, #40	; 0x28
 8006c42:	f7fa fc57 	bl	80014f4 <GFX_DrawLine>
      GFX_DrawLine(40, 223, 399, 223, BLACK, E_PAPIER);
 8006c46:	2301      	movs	r3, #1
 8006c48:	9301      	str	r3, [sp, #4]
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	9300      	str	r3, [sp, #0]
 8006c4e:	23df      	movs	r3, #223	; 0xdf
 8006c50:	f240 128f 	movw	r2, #399	; 0x18f
 8006c54:	21df      	movs	r1, #223	; 0xdf
 8006c56:	2028      	movs	r0, #40	; 0x28
 8006c58:	f7fa fc4c 	bl	80014f4 <GFX_DrawLine>
      GFX_DrawLine(40, 165, 399, 165, BLACK, E_PAPIER);
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	9301      	str	r3, [sp, #4]
 8006c60:	2300      	movs	r3, #0
 8006c62:	9300      	str	r3, [sp, #0]
 8006c64:	23a5      	movs	r3, #165	; 0xa5
 8006c66:	f240 128f 	movw	r2, #399	; 0x18f
 8006c6a:	21a5      	movs	r1, #165	; 0xa5
 8006c6c:	2028      	movs	r0, #40	; 0x28
 8006c6e:	f7fa fc41 	bl	80014f4 <GFX_DrawLine>
      GFX_DrawLine(40, 108, 399, 108, BLACK, E_PAPIER);
 8006c72:	2301      	movs	r3, #1
 8006c74:	9301      	str	r3, [sp, #4]
 8006c76:	2300      	movs	r3, #0
 8006c78:	9300      	str	r3, [sp, #0]
 8006c7a:	236c      	movs	r3, #108	; 0x6c
 8006c7c:	f240 128f 	movw	r2, #399	; 0x18f
 8006c80:	216c      	movs	r1, #108	; 0x6c
 8006c82:	2028      	movs	r0, #40	; 0x28
 8006c84:	f7fa fc36 	bl	80014f4 <GFX_DrawLine>
      GFX_DrawLine(40, 50, 399, 50, BLACK, E_PAPIER);
 8006c88:	2301      	movs	r3, #1
 8006c8a:	9301      	str	r3, [sp, #4]
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	9300      	str	r3, [sp, #0]
 8006c90:	2332      	movs	r3, #50	; 0x32
 8006c92:	f240 128f 	movw	r2, #399	; 0x18f
 8006c96:	2132      	movs	r1, #50	; 0x32
 8006c98:	2028      	movs	r0, #40	; 0x28
 8006c9a:	f7fa fc2b 	bl	80014f4 <GFX_DrawLine>
      for(int i = 1; i < 24; i++)
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8006ca4:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8006ca8:	6013      	str	r3, [r2, #0]
 8006caa:	e02a      	b.n	8006d02 <StartChartTask+0x1d2>
      {
         GFX_DrawLine(64 + i * 14, 281, 64 + i * 14, 270, BLACK, E_PAPIER);
 8006cac:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8006cb0:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	00db      	lsls	r3, r3, #3
 8006cba:	1a9b      	subs	r3, r3, r2
 8006cbc:	005b      	lsls	r3, r3, #1
 8006cbe:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8006cc2:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8006cc6:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	4613      	mov	r3, r2
 8006cce:	00db      	lsls	r3, r3, #3
 8006cd0:	1a9b      	subs	r3, r3, r2
 8006cd2:	005b      	lsls	r3, r3, #1
 8006cd4:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8006cd8:	2301      	movs	r3, #1
 8006cda:	9301      	str	r3, [sp, #4]
 8006cdc:	2300      	movs	r3, #0
 8006cde:	9300      	str	r3, [sp, #0]
 8006ce0:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8006ce4:	f240 1119 	movw	r1, #281	; 0x119
 8006ce8:	f7fa fc04 	bl	80014f4 <GFX_DrawLine>
      for(int i = 1; i < 24; i++)
 8006cec:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8006cf0:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8006cfc:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8006d00:	6013      	str	r3, [r2, #0]
 8006d02:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8006d06:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2b17      	cmp	r3, #23
 8006d0e:	ddcd      	ble.n	8006cac <StartChartTask+0x17c>
      }
      for(int i = 1; i < 24; i++)
 8006d10:	2301      	movs	r3, #1
 8006d12:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8006d16:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8006d1a:	6013      	str	r3, [r2, #0]
 8006d1c:	e02d      	b.n	8006d7a <StartChartTask+0x24a>
      {
         char Temp[3];
         sprintf(Temp, "%d", i);
 8006d1e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006d22:	3b1c      	subs	r3, #28
 8006d24:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8006d28:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8006d2c:	6812      	ldr	r2, [r2, #0]
 8006d2e:	494d      	ldr	r1, [pc, #308]	; (8006e64 <StartChartTask+0x334>)
 8006d30:	4618      	mov	r0, r3
 8006d32:	f005 f815 	bl	800bd60 <sprintf_>
         GFX_DrawString(64 + i * 14 - 5, 290, Temp, BLACK, 1, E_PAPIER);
 8006d36:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8006d3a:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	4613      	mov	r3, r2
 8006d42:	00db      	lsls	r3, r3, #3
 8006d44:	1a9b      	subs	r3, r3, r2
 8006d46:	005b      	lsls	r3, r3, #1
 8006d48:	f103 003b 	add.w	r0, r3, #59	; 0x3b
 8006d4c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006d50:	3a1c      	subs	r2, #28
 8006d52:	2301      	movs	r3, #1
 8006d54:	9301      	str	r3, [sp, #4]
 8006d56:	2301      	movs	r3, #1
 8006d58:	9300      	str	r3, [sp, #0]
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	f44f 7191 	mov.w	r1, #290	; 0x122
 8006d60:	f7fa faa8 	bl	80012b4 <GFX_DrawString>
      for(int i = 1; i < 24; i++)
 8006d64:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8006d68:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	3301      	adds	r3, #1
 8006d70:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8006d74:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8006d78:	6013      	str	r3, [r2, #0]
 8006d7a:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8006d7e:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2b17      	cmp	r3, #23
 8006d86:	ddca      	ble.n	8006d1e <StartChartTask+0x1ee>
      }
      osMutexRelease(E_PAPIERMutexHandle);
 8006d88:	4b35      	ldr	r3, [pc, #212]	; (8006e60 <StartChartTask+0x330>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f00e f870 	bl	8014e72 <osMutexRelease>
      if(Cda.ChartType == PRESSURE || Cda.ChartType == EXTERNAL_TEMPERATURE || Cda.ChartType == EXTERNAL_HUMIDITY)
 8006d92:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8006d96:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8006d9a:	791b      	ldrb	r3, [r3, #4]
 8006d9c:	2b06      	cmp	r3, #6
 8006d9e:	d00e      	beq.n	8006dbe <StartChartTask+0x28e>
 8006da0:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8006da4:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8006da8:	791b      	ldrb	r3, [r3, #4]
 8006daa:	2b07      	cmp	r3, #7
 8006dac:	d007      	beq.n	8006dbe <StartChartTask+0x28e>
 8006dae:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8006db2:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8006db6:	791b      	ldrb	r3, [r3, #4]
 8006db8:	2b08      	cmp	r3, #8
 8006dba:	f040 85dd 	bne.w	8007978 <StartChartTask+0xe48>
      {
         for(int i = DATE_CHART_ADDR_START; i < DATE_CHART_ADDR_END; i += 12)
 8006dbe:	2308      	movs	r3, #8
 8006dc0:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8006dc4:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8006dc8:	6013      	str	r3, [r2, #0]
 8006dca:	e05c      	b.n	8006e86 <StartChartTask+0x356>
         {
            osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8006dcc:	4b26      	ldr	r3, [pc, #152]	; (8006e68 <StartChartTask+0x338>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f00e f801 	bl	8014ddc <osMutexAcquire>
            fram_Read(&Fram, i, &FramDateChart, 12);
 8006dda:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8006dde:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	b299      	uxth	r1, r3
 8006de6:	f507 625c 	add.w	r2, r7, #3520	; 0xdc0
 8006dea:	3a18      	subs	r2, #24
 8006dec:	230c      	movs	r3, #12
 8006dee:	481f      	ldr	r0, [pc, #124]	; (8006e6c <StartChartTask+0x33c>)
 8006df0:	f7fe f92b 	bl	800504a <fram_Read>
            osMutexRelease(SPI1MutexHandle);
 8006df4:	4b1c      	ldr	r3, [pc, #112]	; (8006e68 <StartChartTask+0x338>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f00e f83a 	bl	8014e72 <osMutexRelease>
            if(FramDateChart.Date == Cda.Date && FramDateChart.Month == Cda.Month && FramDateChart.Year == Cda.Year)
 8006dfe:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8006e02:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8006e06:	781a      	ldrb	r2, [r3, #0]
 8006e08:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8006e0c:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8006e10:	78db      	ldrb	r3, [r3, #3]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d12c      	bne.n	8006e70 <StartChartTask+0x340>
 8006e16:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8006e1a:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8006e1e:	785a      	ldrb	r2, [r3, #1]
 8006e20:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8006e24:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8006e28:	789b      	ldrb	r3, [r3, #2]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d120      	bne.n	8006e70 <StartChartTask+0x340>
 8006e2e:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8006e32:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8006e36:	789b      	ldrb	r3, [r3, #2]
 8006e38:	b29a      	uxth	r2, r3
 8006e3a:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8006e3e:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8006e42:	881b      	ldrh	r3, [r3, #0]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d113      	bne.n	8006e70 <StartChartTask+0x340>
            {
               FramDataChartExistFlag = 1;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8006e4e:	f102 023f 	add.w	r2, r2, #63	; 0x3f
 8006e52:	7013      	strb	r3, [r2, #0]
               break;
 8006e54:	e020      	b.n	8006e98 <StartChartTask+0x368>
 8006e56:	bf00      	nop
 8006e58:	20004054 	.word	0x20004054
 8006e5c:	20004018 	.word	0x20004018
 8006e60:	20004040 	.word	0x20004040
 8006e64:	0801f480 	.word	0x0801f480
 8006e68:	2000403c 	.word	0x2000403c
 8006e6c:	20003fbc 	.word	0x20003fbc
         for(int i = DATE_CHART_ADDR_START; i < DATE_CHART_ADDR_END; i += 12)
 8006e70:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8006e74:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	330c      	adds	r3, #12
 8006e7c:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8006e80:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8006e84:	6013      	str	r3, [r2, #0]
 8006e86:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8006e8a:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f241 7277 	movw	r2, #6007	; 0x1777
 8006e94:	4293      	cmp	r3, r2
 8006e96:	dd99      	ble.n	8006dcc <StartChartTask+0x29c>
            }
         }
         if(FramDataChartExistFlag == 1)
 8006e98:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8006e9c:	f103 033f 	add.w	r3, r3, #63	; 0x3f
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	f040 813d 	bne.w	8007122 <StartChartTask+0x5f2>
         {
            FramDataChartExistFlag = 0;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8006eae:	f102 023f 	add.w	r2, r2, #63	; 0x3f
 8006eb2:	7013      	strb	r3, [r2, #0]
            for(int i = 0; i < FramDateChart.Length; i++)
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8006eba:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8006ebe:	6013      	str	r3, [r2, #0]
 8006ec0:	e121      	b.n	8007106 <StartChartTask+0x5d6>
            {
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8006ec2:	4bc7      	ldr	r3, [pc, #796]	; (80071e0 <StartChartTask+0x6b0>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f04f 31ff 	mov.w	r1, #4294967295
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f00d ff86 	bl	8014ddc <osMutexAcquire>
               flash_ReadPage(&Flash, i + FramDateChart.StartFlashPage, &Pv);
 8006ed0:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8006ed4:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8006ed8:	685a      	ldr	r2, [r3, #4]
 8006eda:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8006ede:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	18d1      	adds	r1, r2, r3
 8006ee6:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8006eea:	3b18      	subs	r3, #24
 8006eec:	461a      	mov	r2, r3
 8006eee:	48bd      	ldr	r0, [pc, #756]	; (80071e4 <StartChartTask+0x6b4>)
 8006ef0:	f7fd ff3b 	bl	8004d6a <flash_ReadPage>
               osMutexRelease(SPI1MutexHandle);
 8006ef4:	4bba      	ldr	r3, [pc, #744]	; (80071e0 <StartChartTask+0x6b0>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f00d ffba 	bl	8014e72 <osMutexRelease>
               uint32_t TempCrc = Crc(CRC_INITIAL_VALUE, 252, &Pv);
 8006efe:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8006f02:	3b18      	subs	r3, #24
 8006f04:	461a      	mov	r2, r3
 8006f06:	21fc      	movs	r1, #252	; 0xfc
 8006f08:	f04f 30ff 	mov.w	r0, #4294967295
 8006f0c:	f7fd fade 	bl	80044cc <Crc>
 8006f10:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8006f14:	f103 030c 	add.w	r3, r3, #12
 8006f18:	6018      	str	r0, [r3, #0]
               if(TempCrc == Pv.PageCRC)
 8006f1a:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8006f1e:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 8006f22:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8006f26:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8006f2a:	f102 020c 	add.w	r2, r2, #12
 8006f2e:	6812      	ldr	r2, [r2, #0]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	f040 80dd 	bne.w	80070f0 <StartChartTask+0x5c0>
               {
                  for(int j = (i * 9), k = 0; k < 9; k++)
 8006f36:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8006f3a:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	4613      	mov	r3, r2
 8006f42:	00db      	lsls	r3, r3, #3
 8006f44:	4413      	add	r3, r2
 8006f46:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8006f4a:	f102 0208 	add.w	r2, r2, #8
 8006f4e:	6013      	str	r3, [r2, #0]
 8006f50:	2300      	movs	r3, #0
 8006f52:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8006f56:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8006f5a:	6013      	str	r3, [r2, #0]
 8006f5c:	e0c0      	b.n	80070e0 <StartChartTask+0x5b0>
                  {
                     if(Cda.ChartType == PRESSURE)
 8006f5e:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8006f62:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8006f66:	791b      	ldrb	r3, [r3, #4]
 8006f68:	2b06      	cmp	r3, #6
 8006f6a:	d122      	bne.n	8006fb2 <StartChartTask+0x482>
                     {
                        ChartVariable.FloatingPointType[j + k] = Pv.Record[k].Pressure;
 8006f6c:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8006f70:	f103 0308 	add.w	r3, r3, #8
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8006f7a:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	18d0      	adds	r0, r2, r3
 8006f82:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8006f86:	f5a3 618b 	sub.w	r1, r3, #1112	; 0x458
 8006f8a:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8006f8e:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	4613      	mov	r3, r2
 8006f96:	00db      	lsls	r3, r3, #3
 8006f98:	1a9b      	subs	r3, r3, r2
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	440b      	add	r3, r1
 8006f9e:	3310      	adds	r3, #16
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8006fa6:	f5a3 6150 	sub.w	r1, r3, #3328	; 0xd00
 8006faa:	0083      	lsls	r3, r0, #2
 8006fac:	440b      	add	r3, r1
 8006fae:	601a      	str	r2, [r3, #0]
 8006fb0:	e04b      	b.n	800704a <StartChartTask+0x51a>
                     }
                     else if(Cda.ChartType == EXTERNAL_TEMPERATURE)
 8006fb2:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8006fb6:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8006fba:	791b      	ldrb	r3, [r3, #4]
 8006fbc:	2b07      	cmp	r3, #7
 8006fbe:	d122      	bne.n	8007006 <StartChartTask+0x4d6>
                     {
                        ChartVariable.FloatingPointType[j + k] = Pv.Record[k].ExternalTemperature;
 8006fc0:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8006fc4:	f103 0308 	add.w	r3, r3, #8
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8006fce:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	18d0      	adds	r0, r2, r3
 8006fd6:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8006fda:	f5a3 618b 	sub.w	r1, r3, #1112	; 0x458
 8006fde:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8006fe2:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	4613      	mov	r3, r2
 8006fea:	00db      	lsls	r3, r3, #3
 8006fec:	1a9b      	subs	r3, r3, r2
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	440b      	add	r3, r1
 8006ff2:	3314      	adds	r3, #20
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8006ffa:	f5a3 6150 	sub.w	r1, r3, #3328	; 0xd00
 8006ffe:	0083      	lsls	r3, r0, #2
 8007000:	440b      	add	r3, r1
 8007002:	601a      	str	r2, [r3, #0]
 8007004:	e021      	b.n	800704a <StartChartTask+0x51a>
                     }
                     else
                     {
                        ChartVariable.FloatingPointType[j + k] = Pv.Record[k].ExternalHumidity;
 8007006:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 800700a:	f103 0308 	add.w	r3, r3, #8
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007014:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	18d0      	adds	r0, r2, r3
 800701c:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007020:	f5a3 618b 	sub.w	r1, r3, #1112	; 0x458
 8007024:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007028:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	4613      	mov	r3, r2
 8007030:	00db      	lsls	r3, r3, #3
 8007032:	1a9b      	subs	r3, r3, r2
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	440b      	add	r3, r1
 8007038:	3318      	adds	r3, #24
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8007040:	f5a3 6150 	sub.w	r1, r3, #3328	; 0xd00
 8007044:	0083      	lsls	r3, r0, #2
 8007046:	440b      	add	r3, r1
 8007048:	601a      	str	r2, [r3, #0]
                     }
                     Minute[j + k] = Pv.Record[k].Minute;
 800704a:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 800704e:	f103 0308 	add.w	r3, r3, #8
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007058:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	18d1      	adds	r1, r2, r3
 8007060:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007064:	f5a3 608b 	sub.w	r0, r3, #1112	; 0x458
 8007068:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 800706c:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	4613      	mov	r3, r2
 8007074:	00db      	lsls	r3, r3, #3
 8007076:	1a9b      	subs	r3, r3, r2
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	4403      	add	r3, r0
 800707c:	3302      	adds	r3, #2
 800707e:	781a      	ldrb	r2, [r3, #0]
 8007080:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007084:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 8007088:	545a      	strb	r2, [r3, r1]
                     Hour[j + k]   = Pv.Record[k].Hour;
 800708a:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 800708e:	f103 0308 	add.w	r3, r3, #8
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007098:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	18d1      	adds	r1, r2, r3
 80070a0:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80070a4:	f5a3 608b 	sub.w	r0, r3, #1112	; 0x458
 80070a8:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80070ac:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	4613      	mov	r3, r2
 80070b4:	00db      	lsls	r3, r3, #3
 80070b6:	1a9b      	subs	r3, r3, r2
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	4403      	add	r3, r0
 80070bc:	3303      	adds	r3, #3
 80070be:	781a      	ldrb	r2, [r3, #0]
 80070c0:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80070c4:	440b      	add	r3, r1
 80070c6:	f803 2c20 	strb.w	r2, [r3, #-32]
                  for(int j = (i * 9), k = 0; k < 9; k++)
 80070ca:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80070ce:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	3301      	adds	r3, #1
 80070d6:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 80070da:	f102 0228 	add.w	r2, r2, #40	; 0x28
 80070de:	6013      	str	r3, [r2, #0]
 80070e0:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80070e4:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2b08      	cmp	r3, #8
 80070ec:	f77f af37 	ble.w	8006f5e <StartChartTask+0x42e>
            for(int i = 0; i < FramDateChart.Length; i++)
 80070f0:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80070f4:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	3301      	adds	r3, #1
 80070fc:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007100:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8007104:	6013      	str	r3, [r2, #0]
 8007106:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800710a:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 800710e:	7a1b      	ldrb	r3, [r3, #8]
 8007110:	461a      	mov	r2, r3
 8007112:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007116:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4293      	cmp	r3, r2
 800711e:	f6ff aed0 	blt.w	8006ec2 <StartChartTask+0x392>
                  }
               }
            }
         }
         float _Max = 0, _Min = 10000000.0;
 8007122:	f04f 0300 	mov.w	r3, #0
 8007126:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 800712a:	f102 0224 	add.w	r2, r2, #36	; 0x24
 800712e:	6013      	str	r3, [r2, #0]
 8007130:	4b2d      	ldr	r3, [pc, #180]	; (80071e8 <StartChartTask+0x6b8>)
 8007132:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007136:	f102 0220 	add.w	r2, r2, #32
 800713a:	6013      	str	r3, [r2, #0]
         int a      = 0;
 800713c:	2300      	movs	r3, #0
 800713e:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8007142:	f102 0204 	add.w	r2, r2, #4
 8007146:	6013      	str	r3, [r2, #0]
         float _Avg = 0;
 8007148:	f04f 0300 	mov.w	r3, #0
 800714c:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007150:	f102 021c 	add.w	r2, r2, #28
 8007154:	6013      	str	r3, [r2, #0]
         for(int i = 0; i < FramDateChart.Length * 9; i++)
 8007156:	2300      	movs	r3, #0
 8007158:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 800715c:	f102 0218 	add.w	r2, r2, #24
 8007160:	6013      	str	r3, [r2, #0]
 8007162:	e025      	b.n	80071b0 <StartChartTask+0x680>
         {
            _Avg += ChartVariable.FloatingPointType[i];
 8007164:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8007168:	f5a3 6250 	sub.w	r2, r3, #3328	; 0xd00
 800716c:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007170:	f103 0318 	add.w	r3, r3, #24
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	4413      	add	r3, r2
 800717a:	edd3 7a00 	vldr	s15, [r3]
 800717e:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007182:	f103 031c 	add.w	r3, r3, #28
 8007186:	ed93 7a00 	vldr	s14, [r3]
 800718a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800718e:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007192:	f103 031c 	add.w	r3, r3, #28
 8007196:	edc3 7a00 	vstr	s15, [r3]
         for(int i = 0; i < FramDateChart.Length * 9; i++)
 800719a:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 800719e:	f103 0318 	add.w	r3, r3, #24
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	3301      	adds	r3, #1
 80071a6:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 80071aa:	f102 0218 	add.w	r2, r2, #24
 80071ae:	6013      	str	r3, [r2, #0]
 80071b0:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80071b4:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 80071b8:	7a1b      	ldrb	r3, [r3, #8]
 80071ba:	461a      	mov	r2, r3
 80071bc:	4613      	mov	r3, r2
 80071be:	00db      	lsls	r3, r3, #3
 80071c0:	4413      	add	r3, r2
 80071c2:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 80071c6:	f102 0218 	add.w	r2, r2, #24
 80071ca:	6812      	ldr	r2, [r2, #0]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	dbc9      	blt.n	8007164 <StartChartTask+0x634>
         }
         for(int i = 0; i < FramDateChart.Length * 9; i++)
 80071d0:	2300      	movs	r3, #0
 80071d2:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 80071d6:	f102 0214 	add.w	r2, r2, #20
 80071da:	6013      	str	r3, [r2, #0]
 80071dc:	e0b9      	b.n	8007352 <StartChartTask+0x822>
 80071de:	bf00      	nop
 80071e0:	2000403c 	.word	0x2000403c
 80071e4:	20003fac 	.word	0x20003fac
 80071e8:	4b189680 	.word	0x4b189680
 80071ec:	44960000 	.word	0x44960000
 80071f0:	437a0000 	.word	0x437a0000
         {
            if(ChartVariable.FloatingPointType[i] > 1200.0)
 80071f4:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80071f8:	f5a3 6250 	sub.w	r2, r3, #3328	; 0xd00
 80071fc:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007200:	f103 0314 	add.w	r3, r3, #20
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	4413      	add	r3, r2
 800720a:	edd3 7a00 	vldr	s15, [r3]
 800720e:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 80071ec <StartChartTask+0x6bc>
 8007212:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800721a:	dd21      	ble.n	8007260 <StartChartTask+0x730>
            {
               ChartVariable.FloatingPointType[i] = (_Avg / (FramDateChart.Length * 9));
 800721c:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007220:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8007224:	7a1b      	ldrb	r3, [r3, #8]
 8007226:	461a      	mov	r2, r3
 8007228:	4613      	mov	r3, r2
 800722a:	00db      	lsls	r3, r3, #3
 800722c:	4413      	add	r3, r2
 800722e:	ee07 3a90 	vmov	s15, r3
 8007232:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007236:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 800723a:	f103 031c 	add.w	r3, r3, #28
 800723e:	edd3 6a00 	vldr	s13, [r3]
 8007242:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007246:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 800724a:	f5a3 6250 	sub.w	r2, r3, #3328	; 0xd00
 800724e:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007252:	f103 0314 	add.w	r3, r3, #20
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	4413      	add	r3, r2
 800725c:	edc3 7a00 	vstr	s15, [r3]
            }
            if(_Max < ChartVariable.FloatingPointType[i])
 8007260:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8007264:	f5a3 6250 	sub.w	r2, r3, #3328	; 0xd00
 8007268:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 800726c:	f103 0314 	add.w	r3, r3, #20
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	4413      	add	r3, r2
 8007276:	edd3 7a00 	vldr	s15, [r3]
 800727a:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 800727e:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8007282:	ed93 7a00 	vldr	s14, [r3]
 8007286:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800728a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800728e:	d51a      	bpl.n	80072c6 <StartChartTask+0x796>
            {
               _Max = ChartVariable.FloatingPointType[i];
 8007290:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8007294:	f5a3 6250 	sub.w	r2, r3, #3328	; 0xd00
 8007298:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 800729c:	f103 0314 	add.w	r3, r3, #20
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	4413      	add	r3, r2
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 80072ac:	f102 0224 	add.w	r2, r2, #36	; 0x24
 80072b0:	6013      	str	r3, [r2, #0]
               a    = i;
 80072b2:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80072b6:	f103 0314 	add.w	r3, r3, #20
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 80072c0:	f102 0204 	add.w	r2, r2, #4
 80072c4:	6013      	str	r3, [r2, #0]
            }
            if(_Min > ChartVariable.FloatingPointType[i] && ChartVariable.FloatingPointType[i] != 0.0)
 80072c6:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80072ca:	f5a3 6250 	sub.w	r2, r3, #3328	; 0xd00
 80072ce:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80072d2:	f103 0314 	add.w	r3, r3, #20
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	4413      	add	r3, r2
 80072dc:	edd3 7a00 	vldr	s15, [r3]
 80072e0:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80072e4:	f103 0320 	add.w	r3, r3, #32
 80072e8:	ed93 7a00 	vldr	s14, [r3]
 80072ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80072f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072f4:	dd22      	ble.n	800733c <StartChartTask+0x80c>
 80072f6:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80072fa:	f5a3 6250 	sub.w	r2, r3, #3328	; 0xd00
 80072fe:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007302:	f103 0314 	add.w	r3, r3, #20
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	009b      	lsls	r3, r3, #2
 800730a:	4413      	add	r3, r2
 800730c:	edd3 7a00 	vldr	s15, [r3]
 8007310:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007318:	d010      	beq.n	800733c <StartChartTask+0x80c>
            {
               _Min = ChartVariable.FloatingPointType[i];
 800731a:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 800731e:	f5a3 6250 	sub.w	r2, r3, #3328	; 0xd00
 8007322:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007326:	f103 0314 	add.w	r3, r3, #20
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	4413      	add	r3, r2
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007336:	f102 0220 	add.w	r2, r2, #32
 800733a:	6013      	str	r3, [r2, #0]
         for(int i = 0; i < FramDateChart.Length * 9; i++)
 800733c:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007340:	f103 0314 	add.w	r3, r3, #20
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	3301      	adds	r3, #1
 8007348:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 800734c:	f102 0214 	add.w	r2, r2, #20
 8007350:	6013      	str	r3, [r2, #0]
 8007352:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007356:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 800735a:	7a1b      	ldrb	r3, [r3, #8]
 800735c:	461a      	mov	r2, r3
 800735e:	4613      	mov	r3, r2
 8007360:	00db      	lsls	r3, r3, #3
 8007362:	4413      	add	r3, r2
 8007364:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007368:	f102 0214 	add.w	r2, r2, #20
 800736c:	6812      	ldr	r2, [r2, #0]
 800736e:	429a      	cmp	r2, r3
 8007370:	f6ff af40 	blt.w	80071f4 <StartChartTask+0x6c4>
            }
         }
         for(int i = 0; i < 800; i++)
 8007374:	2300      	movs	r3, #0
 8007376:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 800737a:	f102 0210 	add.w	r2, r2, #16
 800737e:	6013      	str	r3, [r2, #0]
 8007380:	e079      	b.n	8007476 <StartChartTask+0x946>
         {
            if(ChartVariable.FloatingPointType[i] == 0)
 8007382:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8007386:	f5a3 6250 	sub.w	r2, r3, #3328	; 0xd00
 800738a:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 800738e:	f103 0310 	add.w	r3, r3, #16
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	4413      	add	r3, r2
 8007398:	edd3 7a00 	vldr	s15, [r3]
 800739c:	eef5 7a40 	vcmp.f32	s15, #0.0
 80073a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073a4:	d110      	bne.n	80073c8 <StartChartTask+0x898>
            {
               ChartVariable.FloatingPointType[i] = _Min;
 80073a6:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80073aa:	f5a3 6250 	sub.w	r2, r3, #3328	; 0xd00
 80073ae:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80073b2:	f103 0310 	add.w	r3, r3, #16
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	4413      	add	r3, r2
 80073bc:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 80073c0:	f102 0220 	add.w	r2, r2, #32
 80073c4:	6812      	ldr	r2, [r2, #0]
 80073c6:	601a      	str	r2, [r3, #0]
            }
            Y_Axis[i] = (uint16_t)mapf(ChartVariable.FloatingPointType[i], _Min, _Max, 20.0, 250.0);
 80073c8:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80073cc:	f5a3 6250 	sub.w	r2, r3, #3328	; 0xd00
 80073d0:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80073d4:	f103 0310 	add.w	r3, r3, #16
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	4413      	add	r3, r2
 80073de:	edd3 7a00 	vldr	s15, [r3]
 80073e2:	ed1f 2a7d 	vldr	s4, [pc, #-500]	; 80071f0 <StartChartTask+0x6c0>
 80073e6:	eef3 1a04 	vmov.f32	s3, #52	; 0x41a00000  20.0
 80073ea:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80073ee:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80073f2:	ed93 1a00 	vldr	s2, [r3]
 80073f6:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80073fa:	f103 0320 	add.w	r3, r3, #32
 80073fe:	edd3 0a00 	vldr	s1, [r3]
 8007402:	eeb0 0a67 	vmov.f32	s0, s15
 8007406:	f002 fe79 	bl	800a0fc <mapf>
 800740a:	eef0 7a40 	vmov.f32	s15, s0
 800740e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007412:	ee17 3a90 	vmov	r3, s15
 8007416:	b299      	uxth	r1, r3
 8007418:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800741c:	f6a3 2398 	subw	r3, r3, #2712	; 0xa98
 8007420:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007424:	f102 0210 	add.w	r2, r2, #16
 8007428:	6812      	ldr	r2, [r2, #0]
 800742a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            Y_Axis[i] = 300 - Y_Axis[i];
 800742e:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007432:	f6a3 2398 	subw	r3, r3, #2712	; 0xa98
 8007436:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 800743a:	f102 0210 	add.w	r2, r2, #16
 800743e:	6812      	ldr	r2, [r2, #0]
 8007440:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007444:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 8007448:	b299      	uxth	r1, r3
 800744a:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800744e:	f6a3 2398 	subw	r3, r3, #2712	; 0xa98
 8007452:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007456:	f102 0210 	add.w	r2, r2, #16
 800745a:	6812      	ldr	r2, [r2, #0]
 800745c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
         for(int i = 0; i < 800; i++)
 8007460:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007464:	f103 0310 	add.w	r3, r3, #16
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	3301      	adds	r3, #1
 800746c:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007470:	f102 0210 	add.w	r2, r2, #16
 8007474:	6013      	str	r3, [r2, #0]
 8007476:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 800747a:	f103 0310 	add.w	r3, r3, #16
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8007484:	f6ff af7d 	blt.w	8007382 <StartChartTask+0x852>
         }
         for(int i = 0; i < 800; i++)
 8007488:	2300      	movs	r3, #0
 800748a:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 800748e:	f102 020c 	add.w	r2, r2, #12
 8007492:	6013      	str	r3, [r2, #0]
 8007494:	e0b8      	b.n	8007608 <StartChartTask+0xad8>
         {
            if(Hour[i] != 0 && Minute[i] != 0)
 8007496:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800749a:	461a      	mov	r2, r3
 800749c:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80074a0:	f103 030c 	add.w	r3, r3, #12
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4413      	add	r3, r2
 80074a8:	3b20      	subs	r3, #32
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	f000 8084 	beq.w	80075ba <StartChartTask+0xa8a>
 80074b2:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80074b6:	f5a3 7250 	sub.w	r2, r3, #832	; 0x340
 80074ba:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80074be:	f103 030c 	add.w	r3, r3, #12
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4413      	add	r3, r2
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d076      	beq.n	80075ba <StartChartTask+0xa8a>
            {
               X_Axis[i] = map(Hour[i] * 60 + Minute[i], Hour[i] * 60, (Hour[i] + 1) * 60, 64 + (Hour[i] * 14), 64 + ((Hour[i] + 1) * 14));
 80074cc:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80074d0:	461a      	mov	r2, r3
 80074d2:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80074d6:	f103 030c 	add.w	r3, r3, #12
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4413      	add	r3, r2
 80074de:	3b20      	subs	r3, #32
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	461a      	mov	r2, r3
 80074e4:	4613      	mov	r3, r2
 80074e6:	011b      	lsls	r3, r3, #4
 80074e8:	1a9b      	subs	r3, r3, r2
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	4619      	mov	r1, r3
 80074ee:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80074f2:	f5a3 7250 	sub.w	r2, r3, #832	; 0x340
 80074f6:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80074fa:	f103 030c 	add.w	r3, r3, #12
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4413      	add	r3, r2
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	440b      	add	r3, r1
 8007506:	4618      	mov	r0, r3
 8007508:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800750c:	461a      	mov	r2, r3
 800750e:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007512:	f103 030c 	add.w	r3, r3, #12
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4413      	add	r3, r2
 800751a:	3b20      	subs	r3, #32
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	461a      	mov	r2, r3
 8007520:	4613      	mov	r3, r2
 8007522:	011b      	lsls	r3, r3, #4
 8007524:	1a9b      	subs	r3, r3, r2
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	4619      	mov	r1, r3
 800752a:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800752e:	461a      	mov	r2, r3
 8007530:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007534:	f103 030c 	add.w	r3, r3, #12
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4413      	add	r3, r2
 800753c:	3b20      	subs	r3, #32
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	1c5a      	adds	r2, r3, #1
 8007542:	4613      	mov	r3, r2
 8007544:	011b      	lsls	r3, r3, #4
 8007546:	1a9b      	subs	r3, r3, r2
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	461c      	mov	r4, r3
 800754c:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007550:	461a      	mov	r2, r3
 8007552:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007556:	f103 030c 	add.w	r3, r3, #12
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4413      	add	r3, r2
 800755e:	3b20      	subs	r3, #32
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	461a      	mov	r2, r3
 8007564:	4613      	mov	r3, r2
 8007566:	00db      	lsls	r3, r3, #3
 8007568:	1a9b      	subs	r3, r3, r2
 800756a:	005b      	lsls	r3, r3, #1
 800756c:	3340      	adds	r3, #64	; 0x40
 800756e:	461d      	mov	r5, r3
 8007570:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007574:	461a      	mov	r2, r3
 8007576:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 800757a:	f103 030c 	add.w	r3, r3, #12
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4413      	add	r3, r2
 8007582:	3b20      	subs	r3, #32
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	1c5a      	adds	r2, r3, #1
 8007588:	4613      	mov	r3, r2
 800758a:	00db      	lsls	r3, r3, #3
 800758c:	1a9b      	subs	r3, r3, r2
 800758e:	005b      	lsls	r3, r3, #1
 8007590:	3340      	adds	r3, #64	; 0x40
 8007592:	9300      	str	r3, [sp, #0]
 8007594:	462b      	mov	r3, r5
 8007596:	4622      	mov	r2, r4
 8007598:	f002 fdde 	bl	800a158 <map>
 800759c:	4603      	mov	r3, r0
 800759e:	b29a      	uxth	r2, r3
 80075a0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80075a4:	4619      	mov	r1, r3
 80075a6:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80075aa:	f103 030c 	add.w	r3, r3, #12
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	005b      	lsls	r3, r3, #1
 80075b2:	440b      	add	r3, r1
 80075b4:	f823 2cd8 	strh.w	r2, [r3, #-216]
 80075b8:	e01b      	b.n	80075f2 <StartChartTask+0xac2>
            }
            else if(X_Axis[i] == 0)
 80075ba:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80075be:	461a      	mov	r2, r3
 80075c0:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80075c4:	f103 030c 	add.w	r3, r3, #12
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	005b      	lsls	r3, r3, #1
 80075cc:	4413      	add	r3, r2
 80075ce:	f833 3cd8 	ldrh.w	r3, [r3, #-216]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d10d      	bne.n	80075f2 <StartChartTask+0xac2>
            {
               X_Axis[i] = 0xffff;
 80075d6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80075da:	461a      	mov	r2, r3
 80075dc:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80075e0:	f103 030c 	add.w	r3, r3, #12
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	005b      	lsls	r3, r3, #1
 80075e8:	4413      	add	r3, r2
 80075ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80075ee:	f823 2cd8 	strh.w	r2, [r3, #-216]
         for(int i = 0; i < 800; i++)
 80075f2:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80075f6:	f103 030c 	add.w	r3, r3, #12
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	3301      	adds	r3, #1
 80075fe:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007602:	f102 020c 	add.w	r2, r2, #12
 8007606:	6013      	str	r3, [r2, #0]
 8007608:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 800760c:	f103 030c 	add.w	r3, r3, #12
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8007616:	f6ff af3e 	blt.w	8007496 <StartChartTask+0x966>
            }
         }
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 800761a:	4bdb      	ldr	r3, [pc, #876]	; (8007988 <StartChartTask+0xe58>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f04f 31ff 	mov.w	r1, #4294967295
 8007622:	4618      	mov	r0, r3
 8007624:	f00d fbda 	bl	8014ddc <osMutexAcquire>
         osMutexAcquire(E_PAPIERMutexHandle, osWaitForever);
 8007628:	4bd8      	ldr	r3, [pc, #864]	; (800798c <StartChartTask+0xe5c>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f04f 31ff 	mov.w	r1, #4294967295
 8007630:	4618      	mov	r0, r3
 8007632:	f00d fbd3 	bl	8014ddc <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8007636:	4bd6      	ldr	r3, [pc, #856]	; (8007990 <StartChartTask+0xe60>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f04f 31ff 	mov.w	r1, #4294967295
 800763e:	4618      	mov	r0, r3
 8007640:	f00d fbcc 	bl	8014ddc <osMutexAcquire>
         if(X_Axis[0] != 0xffff && X_Axis[1] != 0xffff)
 8007644:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8007648:	f833 3cd8 	ldrh.w	r3, [r3, #-216]
 800764c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007650:	4293      	cmp	r3, r2
 8007652:	d024      	beq.n	800769e <StartChartTask+0xb6e>
 8007654:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8007658:	f833 3cd6 	ldrh.w	r3, [r3, #-214]
 800765c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007660:	4293      	cmp	r3, r2
 8007662:	d01c      	beq.n	800769e <StartChartTask+0xb6e>
         {
            GFX_DrawLine(X_Axis[0], Y_Axis[0], X_Axis[1], Y_Axis[1], BLACK, E_PAPIER);
 8007664:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8007668:	f833 3cd8 	ldrh.w	r3, [r3, #-216]
 800766c:	4618      	mov	r0, r3
 800766e:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007672:	f6a3 2398 	subw	r3, r3, #2712	; 0xa98
 8007676:	881b      	ldrh	r3, [r3, #0]
 8007678:	4619      	mov	r1, r3
 800767a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800767e:	f833 3cd6 	ldrh.w	r3, [r3, #-214]
 8007682:	461a      	mov	r2, r3
 8007684:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007688:	f6a3 2398 	subw	r3, r3, #2712	; 0xa98
 800768c:	885b      	ldrh	r3, [r3, #2]
 800768e:	461c      	mov	r4, r3
 8007690:	2301      	movs	r3, #1
 8007692:	9301      	str	r3, [sp, #4]
 8007694:	2300      	movs	r3, #0
 8007696:	9300      	str	r3, [sp, #0]
 8007698:	4623      	mov	r3, r4
 800769a:	f7f9 ff2b 	bl	80014f4 <GFX_DrawLine>
         }
         for(int i = 1; i < 800; i++)
 800769e:	2301      	movs	r3, #1
 80076a0:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 80076a4:	f102 0208 	add.w	r2, r2, #8
 80076a8:	6013      	str	r3, [r2, #0]
 80076aa:	e065      	b.n	8007778 <StartChartTask+0xc48>
         {
            if(X_Axis[i + 1] != 0xffff && X_Axis[i] != 0xffff)
 80076ac:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80076b0:	f103 0308 	add.w	r3, r3, #8
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	3301      	adds	r3, #1
 80076b8:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80076bc:	005b      	lsls	r3, r3, #1
 80076be:	4413      	add	r3, r2
 80076c0:	f833 3cd8 	ldrh.w	r3, [r3, #-216]
 80076c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d04a      	beq.n	8007762 <StartChartTask+0xc32>
 80076cc:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80076d0:	461a      	mov	r2, r3
 80076d2:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80076d6:	f103 0308 	add.w	r3, r3, #8
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	005b      	lsls	r3, r3, #1
 80076de:	4413      	add	r3, r2
 80076e0:	f833 3cd8 	ldrh.w	r3, [r3, #-216]
 80076e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d03a      	beq.n	8007762 <StartChartTask+0xc32>
            {
               GFX_DrawLine(X_Axis[i], Y_Axis[i], X_Axis[i + 1], Y_Axis[i + 1], BLACK, E_PAPIER);
 80076ec:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80076f0:	461a      	mov	r2, r3
 80076f2:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80076f6:	f103 0308 	add.w	r3, r3, #8
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	005b      	lsls	r3, r3, #1
 80076fe:	4413      	add	r3, r2
 8007700:	f833 3cd8 	ldrh.w	r3, [r3, #-216]
 8007704:	4618      	mov	r0, r3
 8007706:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800770a:	f6a3 2398 	subw	r3, r3, #2712	; 0xa98
 800770e:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007712:	f102 0208 	add.w	r2, r2, #8
 8007716:	6812      	ldr	r2, [r2, #0]
 8007718:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800771c:	4619      	mov	r1, r3
 800771e:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007722:	f103 0308 	add.w	r3, r3, #8
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	3301      	adds	r3, #1
 800772a:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800772e:	005b      	lsls	r3, r3, #1
 8007730:	4413      	add	r3, r2
 8007732:	f833 3cd8 	ldrh.w	r3, [r3, #-216]
 8007736:	461c      	mov	r4, r3
 8007738:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 800773c:	f103 0308 	add.w	r3, r3, #8
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	1c5a      	adds	r2, r3, #1
 8007744:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007748:	f6a3 2398 	subw	r3, r3, #2712	; 0xa98
 800774c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007750:	461a      	mov	r2, r3
 8007752:	2301      	movs	r3, #1
 8007754:	9301      	str	r3, [sp, #4]
 8007756:	2300      	movs	r3, #0
 8007758:	9300      	str	r3, [sp, #0]
 800775a:	4613      	mov	r3, r2
 800775c:	4622      	mov	r2, r4
 800775e:	f7f9 fec9 	bl	80014f4 <GFX_DrawLine>
         for(int i = 1; i < 800; i++)
 8007762:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007766:	f103 0308 	add.w	r3, r3, #8
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	3301      	adds	r3, #1
 800776e:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007772:	f102 0208 	add.w	r2, r2, #8
 8007776:	6013      	str	r3, [r2, #0]
 8007778:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 800777c:	f103 0308 	add.w	r3, r3, #8
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8007786:	db91      	blt.n	80076ac <StartChartTask+0xb7c>
            }
         }
         char Temp[10];
         float TempDifferencje = _Max - _Min;
 8007788:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 800778c:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8007790:	ed93 7a00 	vldr	s14, [r3]
 8007794:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007798:	f103 0320 	add.w	r3, r3, #32
 800779c:	edd3 7a00 	vldr	s15, [r3]
 80077a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80077a4:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80077a8:	edc3 7a00 	vstr	s15, [r3]
         sprintf(Temp, "%0.2f", (_Min + TempDifferencje / 4));
 80077ac:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80077b0:	edd3 7a00 	vldr	s15, [r3]
 80077b4:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80077b8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80077bc:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80077c0:	f103 0320 	add.w	r3, r3, #32
 80077c4:	edd3 7a00 	vldr	s15, [r3]
 80077c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80077cc:	ee17 0a90 	vmov	r0, s15
 80077d0:	f7f8 fed2 	bl	8000578 <__aeabi_f2d>
 80077d4:	4602      	mov	r2, r0
 80077d6:	460b      	mov	r3, r1
 80077d8:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80077dc:	3828      	subs	r0, #40	; 0x28
 80077de:	496d      	ldr	r1, [pc, #436]	; (8007994 <StartChartTask+0xe64>)
 80077e0:	f004 fabe 	bl	800bd60 <sprintf_>
         GFX_DrawString(0, 218, Temp, BLACK, 1, E_PAPIER);
 80077e4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80077e8:	3a28      	subs	r2, #40	; 0x28
 80077ea:	2301      	movs	r3, #1
 80077ec:	9301      	str	r3, [sp, #4]
 80077ee:	2301      	movs	r3, #1
 80077f0:	9300      	str	r3, [sp, #0]
 80077f2:	2300      	movs	r3, #0
 80077f4:	21da      	movs	r1, #218	; 0xda
 80077f6:	2000      	movs	r0, #0
 80077f8:	f7f9 fd5c 	bl	80012b4 <GFX_DrawString>
         sprintf(Temp, "%0.2f", (_Min + TempDifferencje / 2));
 80077fc:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8007800:	edd3 7a00 	vldr	s15, [r3]
 8007804:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007808:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800780c:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007810:	f103 0320 	add.w	r3, r3, #32
 8007814:	edd3 7a00 	vldr	s15, [r3]
 8007818:	ee77 7a27 	vadd.f32	s15, s14, s15
 800781c:	ee17 0a90 	vmov	r0, s15
 8007820:	f7f8 feaa 	bl	8000578 <__aeabi_f2d>
 8007824:	4602      	mov	r2, r0
 8007826:	460b      	mov	r3, r1
 8007828:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800782c:	3828      	subs	r0, #40	; 0x28
 800782e:	4959      	ldr	r1, [pc, #356]	; (8007994 <StartChartTask+0xe64>)
 8007830:	f004 fa96 	bl	800bd60 <sprintf_>
         GFX_DrawString(0, 160, Temp, BLACK, 1, E_PAPIER);
 8007834:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007838:	3a28      	subs	r2, #40	; 0x28
 800783a:	2301      	movs	r3, #1
 800783c:	9301      	str	r3, [sp, #4]
 800783e:	2301      	movs	r3, #1
 8007840:	9300      	str	r3, [sp, #0]
 8007842:	2300      	movs	r3, #0
 8007844:	21a0      	movs	r1, #160	; 0xa0
 8007846:	2000      	movs	r0, #0
 8007848:	f7f9 fd34 	bl	80012b4 <GFX_DrawString>
         sprintf(Temp, "%0.2f", (_Max - TempDifferencje / 4));
 800784c:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8007850:	ed93 7a00 	vldr	s14, [r3]
 8007854:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8007858:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800785c:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007860:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8007864:	ed93 7a00 	vldr	s14, [r3]
 8007868:	ee77 7a67 	vsub.f32	s15, s14, s15
 800786c:	ee17 0a90 	vmov	r0, s15
 8007870:	f7f8 fe82 	bl	8000578 <__aeabi_f2d>
 8007874:	4602      	mov	r2, r0
 8007876:	460b      	mov	r3, r1
 8007878:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800787c:	3828      	subs	r0, #40	; 0x28
 800787e:	4945      	ldr	r1, [pc, #276]	; (8007994 <StartChartTask+0xe64>)
 8007880:	f004 fa6e 	bl	800bd60 <sprintf_>
         GFX_DrawString(0, 103, Temp, BLACK, 1, E_PAPIER);
 8007884:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007888:	3a28      	subs	r2, #40	; 0x28
 800788a:	2301      	movs	r3, #1
 800788c:	9301      	str	r3, [sp, #4]
 800788e:	2301      	movs	r3, #1
 8007890:	9300      	str	r3, [sp, #0]
 8007892:	2300      	movs	r3, #0
 8007894:	2167      	movs	r1, #103	; 0x67
 8007896:	2000      	movs	r0, #0
 8007898:	f7f9 fd0c 	bl	80012b4 <GFX_DrawString>
         sprintf(Temp, "%0.2f", _Min);
 800789c:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80078a0:	f103 0320 	add.w	r3, r3, #32
 80078a4:	6818      	ldr	r0, [r3, #0]
 80078a6:	f7f8 fe67 	bl	8000578 <__aeabi_f2d>
 80078aa:	4602      	mov	r2, r0
 80078ac:	460b      	mov	r3, r1
 80078ae:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80078b2:	3828      	subs	r0, #40	; 0x28
 80078b4:	4937      	ldr	r1, [pc, #220]	; (8007994 <StartChartTask+0xe64>)
 80078b6:	f004 fa53 	bl	800bd60 <sprintf_>
         GFX_DrawString(0, 276, Temp, BLACK, 1, E_PAPIER);
 80078ba:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80078be:	3a28      	subs	r2, #40	; 0x28
 80078c0:	2301      	movs	r3, #1
 80078c2:	9301      	str	r3, [sp, #4]
 80078c4:	2301      	movs	r3, #1
 80078c6:	9300      	str	r3, [sp, #0]
 80078c8:	2300      	movs	r3, #0
 80078ca:	f44f 718a 	mov.w	r1, #276	; 0x114
 80078ce:	2000      	movs	r0, #0
 80078d0:	f7f9 fcf0 	bl	80012b4 <GFX_DrawString>
         sprintf(Temp, "%0.2f", _Max);
 80078d4:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80078d8:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80078dc:	6818      	ldr	r0, [r3, #0]
 80078de:	f7f8 fe4b 	bl	8000578 <__aeabi_f2d>
 80078e2:	4602      	mov	r2, r0
 80078e4:	460b      	mov	r3, r1
 80078e6:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80078ea:	3828      	subs	r0, #40	; 0x28
 80078ec:	4929      	ldr	r1, [pc, #164]	; (8007994 <StartChartTask+0xe64>)
 80078ee:	f004 fa37 	bl	800bd60 <sprintf_>
         GFX_DrawString(0, 45, Temp, BLACK, 1, E_PAPIER);
 80078f2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80078f6:	3a28      	subs	r2, #40	; 0x28
 80078f8:	2301      	movs	r3, #1
 80078fa:	9301      	str	r3, [sp, #4]
 80078fc:	2301      	movs	r3, #1
 80078fe:	9300      	str	r3, [sp, #0]
 8007900:	2300      	movs	r3, #0
 8007902:	212d      	movs	r1, #45	; 0x2d
 8007904:	2000      	movs	r0, #0
 8007906:	f7f9 fcd5 	bl	80012b4 <GFX_DrawString>
         e_papier_display();
 800790a:	f7fc fffd 	bl	8004908 <e_papier_display>
         osMutexAcquire(EncoderMutexHandle, osWaitForever);
 800790e:	4b22      	ldr	r3, [pc, #136]	; (8007998 <StartChartTask+0xe68>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f04f 31ff 	mov.w	r1, #4294967295
 8007916:	4618      	mov	r0, r3
 8007918:	f00d fa60 	bl	8014ddc <osMutexAcquire>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 800791c:	e002      	b.n	8007924 <StartChartTask+0xdf4>
         {
            osDelay(100);
 800791e:	2064      	movs	r0, #100	; 0x64
 8007920:	f00d f80e 	bl	8014940 <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 8007924:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007928:	481c      	ldr	r0, [pc, #112]	; (800799c <StartChartTask+0xe6c>)
 800792a:	f006 fab7 	bl	800de9c <HAL_GPIO_ReadPin>
 800792e:	4603      	mov	r3, r0
 8007930:	2b01      	cmp	r3, #1
 8007932:	d0f4      	beq.n	800791e <StartChartTask+0xdee>
         }
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 8007934:	e002      	b.n	800793c <StartChartTask+0xe0c>
         {
            osDelay(100);
 8007936:	2064      	movs	r0, #100	; 0x64
 8007938:	f00d f802 	bl	8014940 <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 800793c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007940:	4816      	ldr	r0, [pc, #88]	; (800799c <StartChartTask+0xe6c>)
 8007942:	f006 faab 	bl	800de9c <HAL_GPIO_ReadPin>
 8007946:	4603      	mov	r3, r0
 8007948:	2b00      	cmp	r3, #0
 800794a:	d0f4      	beq.n	8007936 <StartChartTask+0xe06>
         }
         osMutexRelease(EncoderMutexHandle);
 800794c:	4b12      	ldr	r3, [pc, #72]	; (8007998 <StartChartTask+0xe68>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4618      	mov	r0, r3
 8007952:	f00d fa8e 	bl	8014e72 <osMutexRelease>
         osMutexRelease(SPI1MutexHandle);
 8007956:	4b0e      	ldr	r3, [pc, #56]	; (8007990 <StartChartTask+0xe60>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4618      	mov	r0, r3
 800795c:	f00d fa89 	bl	8014e72 <osMutexRelease>
         osMutexRelease(E_PAPIERMutexHandle);
 8007960:	4b0a      	ldr	r3, [pc, #40]	; (800798c <StartChartTask+0xe5c>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4618      	mov	r0, r3
 8007966:	f00d fa84 	bl	8014e72 <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 800796a:	4b07      	ldr	r3, [pc, #28]	; (8007988 <StartChartTask+0xe58>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4618      	mov	r0, r3
 8007970:	f00d fa7f 	bl	8014e72 <osMutexRelease>
      {
 8007974:	f000 bdde 	b.w	8008534 <StartChartTask+0x1a04>
      }
      else
      {
         for(int i = DATE_CHART_ADDR_START; i < DATE_CHART_ADDR_END; i += 12)
 8007978:	2308      	movs	r3, #8
 800797a:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 800797e:	f102 0204 	add.w	r2, r2, #4
 8007982:	6013      	str	r3, [r2, #0]
 8007984:	e05c      	b.n	8007a40 <StartChartTask+0xf10>
 8007986:	bf00      	nop
 8007988:	20004034 	.word	0x20004034
 800798c:	20004040 	.word	0x20004040
 8007990:	2000403c 	.word	0x2000403c
 8007994:	0801f484 	.word	0x0801f484
 8007998:	20004050 	.word	0x20004050
 800799c:	48000400 	.word	0x48000400
         {
            osMutexAcquire(SPI1MutexHandle, osWaitForever);
 80079a0:	4bc1      	ldr	r3, [pc, #772]	; (8007ca8 <StartChartTask+0x1178>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f04f 31ff 	mov.w	r1, #4294967295
 80079a8:	4618      	mov	r0, r3
 80079aa:	f00d fa17 	bl	8014ddc <osMutexAcquire>
            fram_Read(&Fram, i, &FramDateChart, 12);
 80079ae:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80079b2:	f103 0304 	add.w	r3, r3, #4
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	b299      	uxth	r1, r3
 80079ba:	f507 625c 	add.w	r2, r7, #3520	; 0xdc0
 80079be:	3a18      	subs	r2, #24
 80079c0:	230c      	movs	r3, #12
 80079c2:	48ba      	ldr	r0, [pc, #744]	; (8007cac <StartChartTask+0x117c>)
 80079c4:	f7fd fb41 	bl	800504a <fram_Read>
            osMutexRelease(SPI1MutexHandle);
 80079c8:	4bb7      	ldr	r3, [pc, #732]	; (8007ca8 <StartChartTask+0x1178>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4618      	mov	r0, r3
 80079ce:	f00d fa50 	bl	8014e72 <osMutexRelease>
            if(FramDateChart.Date == Cda.Date && FramDateChart.Month == Cda.Month && FramDateChart.Year == Cda.Year)
 80079d2:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80079d6:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 80079da:	781a      	ldrb	r2, [r3, #0]
 80079dc:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80079e0:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 80079e4:	78db      	ldrb	r3, [r3, #3]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d11f      	bne.n	8007a2a <StartChartTask+0xefa>
 80079ea:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80079ee:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 80079f2:	785a      	ldrb	r2, [r3, #1]
 80079f4:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80079f8:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 80079fc:	789b      	ldrb	r3, [r3, #2]
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d113      	bne.n	8007a2a <StartChartTask+0xefa>
 8007a02:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007a06:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8007a0a:	789b      	ldrb	r3, [r3, #2]
 8007a0c:	b29a      	uxth	r2, r3
 8007a0e:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007a12:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8007a16:	881b      	ldrh	r3, [r3, #0]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d106      	bne.n	8007a2a <StartChartTask+0xefa>
            {
               FramDataChartExistFlag = 1;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007a22:	f102 023f 	add.w	r2, r2, #63	; 0x3f
 8007a26:	7013      	strb	r3, [r2, #0]
               break;
 8007a28:	e013      	b.n	8007a52 <StartChartTask+0xf22>
         for(int i = DATE_CHART_ADDR_START; i < DATE_CHART_ADDR_END; i += 12)
 8007a2a:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007a2e:	f103 0304 	add.w	r3, r3, #4
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	330c      	adds	r3, #12
 8007a36:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007a3a:	f102 0204 	add.w	r2, r2, #4
 8007a3e:	6013      	str	r3, [r2, #0]
 8007a40:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007a44:	f103 0304 	add.w	r3, r3, #4
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f241 7277 	movw	r2, #6007	; 0x1777
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	dda6      	ble.n	80079a0 <StartChartTask+0xe70>
            }
         }
         if(FramDataChartExistFlag == 1)
 8007a52:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007a56:	f103 033f 	add.w	r3, r3, #63	; 0x3f
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	f040 81b0 	bne.w	8007dc2 <StartChartTask+0x1292>
         {
            FramDataChartExistFlag = 0;
 8007a62:	2300      	movs	r3, #0
 8007a64:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007a68:	f102 023f 	add.w	r2, r2, #63	; 0x3f
 8007a6c:	7013      	strb	r3, [r2, #0]
            for(int i = 0; i < FramDateChart.Length; i++)
 8007a6e:	2300      	movs	r3, #0
 8007a70:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007a74:	6013      	str	r3, [r2, #0]
 8007a76:	e198      	b.n	8007daa <StartChartTask+0x127a>
            {
               osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8007a78:	4b8b      	ldr	r3, [pc, #556]	; (8007ca8 <StartChartTask+0x1178>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8007a80:	4618      	mov	r0, r3
 8007a82:	f00d f9ab 	bl	8014ddc <osMutexAcquire>
               flash_ReadPage(&Flash, i + FramDateChart.StartFlashPage, &Pv);
 8007a86:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007a8a:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8007a8e:	685a      	ldr	r2, [r3, #4]
 8007a90:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	18d1      	adds	r1, r2, r3
 8007a98:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8007a9c:	3b18      	subs	r3, #24
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	4883      	ldr	r0, [pc, #524]	; (8007cb0 <StartChartTask+0x1180>)
 8007aa2:	f7fd f962 	bl	8004d6a <flash_ReadPage>
               osMutexRelease(SPI1MutexHandle);
 8007aa6:	4b80      	ldr	r3, [pc, #512]	; (8007ca8 <StartChartTask+0x1178>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f00d f9e1 	bl	8014e72 <osMutexRelease>
               uint32_t TempCrc = Crc(CRC_INITIAL_VALUE, 252, &Pv);
 8007ab0:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8007ab4:	3b18      	subs	r3, #24
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	21fc      	movs	r1, #252	; 0xfc
 8007aba:	f04f 30ff 	mov.w	r0, #4294967295
 8007abe:	f7fc fd05 	bl	80044cc <Crc>
 8007ac2:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8007ac6:	f103 0318 	add.w	r3, r3, #24
 8007aca:	6018      	str	r0, [r3, #0]
               if(TempCrc == Pv.PageCRC)
 8007acc:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007ad0:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 8007ad4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8007ad8:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8007adc:	f102 0218 	add.w	r2, r2, #24
 8007ae0:	6812      	ldr	r2, [r2, #0]
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	f040 815a 	bne.w	8007d9c <StartChartTask+0x126c>
               {
                  for(int j = (i * 9), k = 0; k < 9; k++)
 8007ae8:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	4613      	mov	r3, r2
 8007af0:	00db      	lsls	r3, r3, #3
 8007af2:	4413      	add	r3, r2
 8007af4:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8007af8:	f102 0214 	add.w	r2, r2, #20
 8007afc:	6013      	str	r3, [r2, #0]
 8007afe:	2300      	movs	r3, #0
 8007b00:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8007b04:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8007b08:	6013      	str	r3, [r2, #0]
 8007b0a:	e13f      	b.n	8007d8c <StartChartTask+0x125c>
                  {
                     if(Cda.ChartType == INTERNAL_PM1)
 8007b0c:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007b10:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8007b14:	791b      	ldrb	r3, [r3, #4]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d121      	bne.n	8007b5e <StartChartTask+0x102e>
                     {
                        ChartVariable.IntegerType[j + k] = Pv.Record[k].InternalPM1;
 8007b1a:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8007b1e:	f103 0314 	add.w	r3, r3, #20
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8007b28:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	18d1      	adds	r1, r2, r3
 8007b30:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007b34:	f5a3 608b 	sub.w	r0, r3, #1112	; 0x458
 8007b38:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8007b3c:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	4613      	mov	r3, r2
 8007b44:	00db      	lsls	r3, r3, #3
 8007b46:	1a9b      	subs	r3, r3, r2
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	4403      	add	r3, r0
 8007b4c:	3304      	adds	r3, #4
 8007b4e:	881a      	ldrh	r2, [r3, #0]
 8007b50:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8007b54:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 8007b58:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 8007b5c:	e0cb      	b.n	8007cf6 <StartChartTask+0x11c6>
                     }
                     else if(Cda.ChartType == INTERNAL_PM25)
 8007b5e:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007b62:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8007b66:	791b      	ldrb	r3, [r3, #4]
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d121      	bne.n	8007bb0 <StartChartTask+0x1080>
                     {
                        ChartVariable.IntegerType[j + k] = Pv.Record[k].InternalPM25;
 8007b6c:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8007b70:	f103 0314 	add.w	r3, r3, #20
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8007b7a:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	18d1      	adds	r1, r2, r3
 8007b82:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007b86:	f5a3 608b 	sub.w	r0, r3, #1112	; 0x458
 8007b8a:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8007b8e:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	4613      	mov	r3, r2
 8007b96:	00db      	lsls	r3, r3, #3
 8007b98:	1a9b      	subs	r3, r3, r2
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	4403      	add	r3, r0
 8007b9e:	3306      	adds	r3, #6
 8007ba0:	881a      	ldrh	r2, [r3, #0]
 8007ba2:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8007ba6:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 8007baa:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 8007bae:	e0a2      	b.n	8007cf6 <StartChartTask+0x11c6>
                     }
                     else if(Cda.ChartType == INTERNAL_PM10)
 8007bb0:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007bb4:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8007bb8:	791b      	ldrb	r3, [r3, #4]
 8007bba:	2b02      	cmp	r3, #2
 8007bbc:	d121      	bne.n	8007c02 <StartChartTask+0x10d2>
                     {
                        ChartVariable.IntegerType[j + k] = Pv.Record[k].InternalPM10;
 8007bbe:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8007bc2:	f103 0314 	add.w	r3, r3, #20
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8007bcc:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	18d1      	adds	r1, r2, r3
 8007bd4:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007bd8:	f5a3 608b 	sub.w	r0, r3, #1112	; 0x458
 8007bdc:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8007be0:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	4613      	mov	r3, r2
 8007be8:	00db      	lsls	r3, r3, #3
 8007bea:	1a9b      	subs	r3, r3, r2
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	4403      	add	r3, r0
 8007bf0:	3308      	adds	r3, #8
 8007bf2:	881a      	ldrh	r2, [r3, #0]
 8007bf4:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8007bf8:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 8007bfc:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 8007c00:	e079      	b.n	8007cf6 <StartChartTask+0x11c6>
                     }
                     else if(Cda.ChartType == EXTERNAL_PM1)
 8007c02:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007c06:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8007c0a:	791b      	ldrb	r3, [r3, #4]
 8007c0c:	2b03      	cmp	r3, #3
 8007c0e:	d121      	bne.n	8007c54 <StartChartTask+0x1124>
                     {
                        ChartVariable.IntegerType[j + k] = Pv.Record[k].ExternalPM1;
 8007c10:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8007c14:	f103 0314 	add.w	r3, r3, #20
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8007c1e:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	18d1      	adds	r1, r2, r3
 8007c26:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007c2a:	f5a3 608b 	sub.w	r0, r3, #1112	; 0x458
 8007c2e:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8007c32:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	4613      	mov	r3, r2
 8007c3a:	00db      	lsls	r3, r3, #3
 8007c3c:	1a9b      	subs	r3, r3, r2
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	4403      	add	r3, r0
 8007c42:	330a      	adds	r3, #10
 8007c44:	881a      	ldrh	r2, [r3, #0]
 8007c46:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8007c4a:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 8007c4e:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 8007c52:	e050      	b.n	8007cf6 <StartChartTask+0x11c6>
                     }
                     else if(Cda.ChartType == EXTERNAL_PM25)
 8007c54:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007c58:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8007c5c:	791b      	ldrb	r3, [r3, #4]
 8007c5e:	2b04      	cmp	r3, #4
 8007c60:	d128      	bne.n	8007cb4 <StartChartTask+0x1184>
                     {
                        ChartVariable.IntegerType[j + k] = Pv.Record[k].ExternalPM25;
 8007c62:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8007c66:	f103 0314 	add.w	r3, r3, #20
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8007c70:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	18d1      	adds	r1, r2, r3
 8007c78:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007c7c:	f5a3 608b 	sub.w	r0, r3, #1112	; 0x458
 8007c80:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8007c84:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	4613      	mov	r3, r2
 8007c8c:	00db      	lsls	r3, r3, #3
 8007c8e:	1a9b      	subs	r3, r3, r2
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	4403      	add	r3, r0
 8007c94:	330c      	adds	r3, #12
 8007c96:	881a      	ldrh	r2, [r3, #0]
 8007c98:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8007c9c:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 8007ca0:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 8007ca4:	e027      	b.n	8007cf6 <StartChartTask+0x11c6>
 8007ca6:	bf00      	nop
 8007ca8:	2000403c 	.word	0x2000403c
 8007cac:	20003fbc 	.word	0x20003fbc
 8007cb0:	20003fac 	.word	0x20003fac
                     }
                     else
                     {
                        ChartVariable.IntegerType[j + k] = Pv.Record[k].ExternalPM10;
 8007cb4:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8007cb8:	f103 0314 	add.w	r3, r3, #20
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8007cc2:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	18d1      	adds	r1, r2, r3
 8007cca:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007cce:	f5a3 608b 	sub.w	r0, r3, #1112	; 0x458
 8007cd2:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8007cd6:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	4613      	mov	r3, r2
 8007cde:	00db      	lsls	r3, r3, #3
 8007ce0:	1a9b      	subs	r3, r3, r2
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	4403      	add	r3, r0
 8007ce6:	330e      	adds	r3, #14
 8007ce8:	881a      	ldrh	r2, [r3, #0]
 8007cea:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8007cee:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 8007cf2:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
                     }
                     Minute[j + k] = Pv.Record[k].Minute;
 8007cf6:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8007cfa:	f103 0314 	add.w	r3, r3, #20
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8007d04:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	18d1      	adds	r1, r2, r3
 8007d0c:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007d10:	f5a3 608b 	sub.w	r0, r3, #1112	; 0x458
 8007d14:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8007d18:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	4613      	mov	r3, r2
 8007d20:	00db      	lsls	r3, r3, #3
 8007d22:	1a9b      	subs	r3, r3, r2
 8007d24:	009b      	lsls	r3, r3, #2
 8007d26:	4403      	add	r3, r0
 8007d28:	3302      	adds	r3, #2
 8007d2a:	781a      	ldrb	r2, [r3, #0]
 8007d2c:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007d30:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 8007d34:	545a      	strb	r2, [r3, r1]
                     Hour[j + k]   = Pv.Record[k].Hour;
 8007d36:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8007d3a:	f103 0314 	add.w	r3, r3, #20
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8007d44:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	18d1      	adds	r1, r2, r3
 8007d4c:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007d50:	f5a3 608b 	sub.w	r0, r3, #1112	; 0x458
 8007d54:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8007d58:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	4613      	mov	r3, r2
 8007d60:	00db      	lsls	r3, r3, #3
 8007d62:	1a9b      	subs	r3, r3, r2
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	4403      	add	r3, r0
 8007d68:	3303      	adds	r3, #3
 8007d6a:	781a      	ldrb	r2, [r3, #0]
 8007d6c:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007d70:	440b      	add	r3, r1
 8007d72:	f803 2c20 	strb.w	r2, [r3, #-32]
                  for(int j = (i * 9), k = 0; k < 9; k++)
 8007d76:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8007d7a:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	3301      	adds	r3, #1
 8007d82:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8007d86:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8007d8a:	6013      	str	r3, [r2, #0]
 8007d8c:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8007d90:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	2b08      	cmp	r3, #8
 8007d98:	f77f aeb8 	ble.w	8007b0c <StartChartTask+0xfdc>
            for(int i = 0; i < FramDateChart.Length; i++)
 8007d9c:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	3301      	adds	r3, #1
 8007da4:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8007da8:	6013      	str	r3, [r2, #0]
 8007daa:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007dae:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8007db2:	7a1b      	ldrb	r3, [r3, #8]
 8007db4:	461a      	mov	r2, r3
 8007db6:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	f6ff ae5b 	blt.w	8007a78 <StartChartTask+0xf48>
                  }
               }
            }
         }
         uint16_t _Max = 0, _Min = 65000;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8007dc8:	f102 023a 	add.w	r2, r2, #58	; 0x3a
 8007dcc:	8013      	strh	r3, [r2, #0]
 8007dce:	f64f 53e8 	movw	r3, #65000	; 0xfde8
 8007dd2:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8007dd6:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8007dda:	8013      	strh	r3, [r2, #0]
         uint32_t _Avg = 0;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8007de2:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8007de6:	6013      	str	r3, [r2, #0]
         for(int i = 0; i < FramDateChart.Length * 9; i++)
 8007de8:	2300      	movs	r3, #0
 8007dea:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8007dee:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8007df2:	6013      	str	r3, [r2, #0]
 8007df4:	e021      	b.n	8007e3a <StartChartTask+0x130a>
         {
            _Avg += ChartVariable.IntegerType[i];
 8007df6:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8007dfa:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 8007dfe:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8007e02:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8007e06:	6812      	ldr	r2, [r2, #0]
 8007e08:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8007e12:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4413      	add	r3, r2
 8007e1a:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8007e1e:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8007e22:	6013      	str	r3, [r2, #0]
         for(int i = 0; i < FramDateChart.Length * 9; i++)
 8007e24:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8007e28:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8007e34:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8007e38:	6013      	str	r3, [r2, #0]
 8007e3a:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007e3e:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8007e42:	7a1b      	ldrb	r3, [r3, #8]
 8007e44:	461a      	mov	r2, r3
 8007e46:	4613      	mov	r3, r2
 8007e48:	00db      	lsls	r3, r3, #3
 8007e4a:	4413      	add	r3, r2
 8007e4c:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8007e50:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8007e54:	6812      	ldr	r2, [r2, #0]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	dbcd      	blt.n	8007df6 <StartChartTask+0x12c6>
         }
         for(int i = 0; i < FramDateChart.Length * 9; i++)
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8007e60:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8007e64:	6013      	str	r3, [r2, #0]
 8007e66:	e086      	b.n	8007f76 <StartChartTask+0x1446>
         {
            if(ChartVariable.IntegerType[i] > 500)
 8007e68:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8007e6c:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 8007e70:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8007e74:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8007e78:	6812      	ldr	r2, [r2, #0]
 8007e7a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007e7e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007e82:	d91c      	bls.n	8007ebe <StartChartTask+0x138e>
            {
               ChartVariable.IntegerType[i] = _Avg / (FramDateChart.Length * 9);
 8007e84:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007e88:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8007e8c:	7a1b      	ldrb	r3, [r3, #8]
 8007e8e:	461a      	mov	r2, r3
 8007e90:	4613      	mov	r3, r2
 8007e92:	00db      	lsls	r3, r3, #3
 8007e94:	4413      	add	r3, r2
 8007e96:	461a      	mov	r2, r3
 8007e98:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8007e9c:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ea6:	b299      	uxth	r1, r3
 8007ea8:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8007eac:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 8007eb0:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8007eb4:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8007eb8:	6812      	ldr	r2, [r2, #0]
 8007eba:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            }
            if(_Max < ChartVariable.IntegerType[i])
 8007ebe:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8007ec2:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 8007ec6:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8007eca:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8007ece:	6812      	ldr	r2, [r2, #0]
 8007ed0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007ed4:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8007ed8:	f102 023a 	add.w	r2, r2, #58	; 0x3a
 8007edc:	8812      	ldrh	r2, [r2, #0]
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d20f      	bcs.n	8007f02 <StartChartTask+0x13d2>
            {
               _Max = ChartVariable.IntegerType[i];
 8007ee2:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8007ee6:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 8007eea:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8007eee:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8007ef2:	6812      	ldr	r2, [r2, #0]
 8007ef4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007ef8:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8007efc:	f102 023a 	add.w	r2, r2, #58	; 0x3a
 8007f00:	8013      	strh	r3, [r2, #0]
            }
            if(_Min > ChartVariable.IntegerType[i] && ChartVariable.IntegerType[i] != 0.0)
 8007f02:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8007f06:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 8007f0a:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8007f0e:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8007f12:	6812      	ldr	r2, [r2, #0]
 8007f14:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007f18:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8007f1c:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8007f20:	8812      	ldrh	r2, [r2, #0]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d91c      	bls.n	8007f60 <StartChartTask+0x1430>
 8007f26:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8007f2a:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 8007f2e:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8007f32:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8007f36:	6812      	ldr	r2, [r2, #0]
 8007f38:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d00f      	beq.n	8007f60 <StartChartTask+0x1430>
            {
               _Min = ChartVariable.IntegerType[i];
 8007f40:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8007f44:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 8007f48:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8007f4c:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8007f50:	6812      	ldr	r2, [r2, #0]
 8007f52:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007f56:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8007f5a:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8007f5e:	8013      	strh	r3, [r2, #0]
         for(int i = 0; i < FramDateChart.Length * 9; i++)
 8007f60:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8007f64:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8007f70:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8007f74:	6013      	str	r3, [r2, #0]
 8007f76:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8007f7a:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8007f7e:	7a1b      	ldrb	r3, [r3, #8]
 8007f80:	461a      	mov	r2, r3
 8007f82:	4613      	mov	r3, r2
 8007f84:	00db      	lsls	r3, r3, #3
 8007f86:	4413      	add	r3, r2
 8007f88:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8007f8c:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8007f90:	6812      	ldr	r2, [r2, #0]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	f6ff af68 	blt.w	8007e68 <StartChartTask+0x1338>
            }
         }
         for(int i = 0; i < 800; i++)
 8007f98:	2300      	movs	r3, #0
 8007f9a:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8007f9e:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8007fa2:	6013      	str	r3, [r2, #0]
 8007fa4:	e068      	b.n	8008078 <StartChartTask+0x1548>
         {
            if(ChartVariable.IntegerType[i] == 0)
 8007fa6:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8007faa:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 8007fae:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8007fb2:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8007fb6:	6812      	ldr	r2, [r2, #0]
 8007fb8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d10f      	bne.n	8007fe0 <StartChartTask+0x14b0>
            {
               ChartVariable.IntegerType[i] = _Min;
 8007fc0:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8007fc4:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 8007fc8:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8007fcc:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8007fd0:	6812      	ldr	r2, [r2, #0]
 8007fd2:	f507 5102 	add.w	r1, r7, #8320	; 0x2080
 8007fd6:	f101 0138 	add.w	r1, r1, #56	; 0x38
 8007fda:	8809      	ldrh	r1, [r1, #0]
 8007fdc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            }
            Y_Axis[i] = (uint16_t)map(ChartVariable.IntegerType[i], _Min, _Max, 20, 250);
 8007fe0:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8007fe4:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 8007fe8:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8007fec:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8007ff0:	6812      	ldr	r2, [r2, #0]
 8007ff2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8007ffc:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8008000:	8819      	ldrh	r1, [r3, #0]
 8008002:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008006:	f103 033a 	add.w	r3, r3, #58	; 0x3a
 800800a:	881a      	ldrh	r2, [r3, #0]
 800800c:	23fa      	movs	r3, #250	; 0xfa
 800800e:	9300      	str	r3, [sp, #0]
 8008010:	2314      	movs	r3, #20
 8008012:	f002 f8a1 	bl	800a158 <map>
 8008016:	4603      	mov	r3, r0
 8008018:	b299      	uxth	r1, r3
 800801a:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800801e:	f6a3 2398 	subw	r3, r3, #2712	; 0xa98
 8008022:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008026:	f102 0228 	add.w	r2, r2, #40	; 0x28
 800802a:	6812      	ldr	r2, [r2, #0]
 800802c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            Y_Axis[i] = 300 - Y_Axis[i];
 8008030:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008034:	f6a3 2398 	subw	r3, r3, #2712	; 0xa98
 8008038:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 800803c:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8008040:	6812      	ldr	r2, [r2, #0]
 8008042:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008046:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 800804a:	b299      	uxth	r1, r3
 800804c:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008050:	f6a3 2398 	subw	r3, r3, #2712	; 0xa98
 8008054:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008058:	f102 0228 	add.w	r2, r2, #40	; 0x28
 800805c:	6812      	ldr	r2, [r2, #0]
 800805e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
         for(int i = 0; i < 800; i++)
 8008062:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008066:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	3301      	adds	r3, #1
 800806e:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008072:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8008076:	6013      	str	r3, [r2, #0]
 8008078:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 800807c:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8008086:	db8e      	blt.n	8007fa6 <StartChartTask+0x1476>
         }
         for(int i = 0; i < 800; i++)
 8008088:	2300      	movs	r3, #0
 800808a:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 800808e:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8008092:	6013      	str	r3, [r2, #0]
 8008094:	e0b8      	b.n	8008208 <StartChartTask+0x16d8>
         {
            if(Hour[i] != 0 && Minute[i] != 0)
 8008096:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800809a:	461a      	mov	r2, r3
 800809c:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80080a0:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4413      	add	r3, r2
 80080a8:	3b20      	subs	r3, #32
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	f000 8084 	beq.w	80081ba <StartChartTask+0x168a>
 80080b2:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80080b6:	f5a3 7250 	sub.w	r2, r3, #832	; 0x340
 80080ba:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80080be:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4413      	add	r3, r2
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d076      	beq.n	80081ba <StartChartTask+0x168a>
            {
               X_Axis[i] = map(Hour[i] * 60 + Minute[i], Hour[i] * 60, (Hour[i] + 1) * 60, 64 + (Hour[i] * 14), 64 + ((Hour[i] + 1) * 14));
 80080cc:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80080d0:	461a      	mov	r2, r3
 80080d2:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80080d6:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4413      	add	r3, r2
 80080de:	3b20      	subs	r3, #32
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	461a      	mov	r2, r3
 80080e4:	4613      	mov	r3, r2
 80080e6:	011b      	lsls	r3, r3, #4
 80080e8:	1a9b      	subs	r3, r3, r2
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	4619      	mov	r1, r3
 80080ee:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80080f2:	f5a3 7250 	sub.w	r2, r3, #832	; 0x340
 80080f6:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80080fa:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4413      	add	r3, r2
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	440b      	add	r3, r1
 8008106:	4618      	mov	r0, r3
 8008108:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800810c:	461a      	mov	r2, r3
 800810e:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008112:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4413      	add	r3, r2
 800811a:	3b20      	subs	r3, #32
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	461a      	mov	r2, r3
 8008120:	4613      	mov	r3, r2
 8008122:	011b      	lsls	r3, r3, #4
 8008124:	1a9b      	subs	r3, r3, r2
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	4619      	mov	r1, r3
 800812a:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800812e:	461a      	mov	r2, r3
 8008130:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008134:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4413      	add	r3, r2
 800813c:	3b20      	subs	r3, #32
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	1c5a      	adds	r2, r3, #1
 8008142:	4613      	mov	r3, r2
 8008144:	011b      	lsls	r3, r3, #4
 8008146:	1a9b      	subs	r3, r3, r2
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	461c      	mov	r4, r3
 800814c:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008150:	461a      	mov	r2, r3
 8008152:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008156:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4413      	add	r3, r2
 800815e:	3b20      	subs	r3, #32
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	461a      	mov	r2, r3
 8008164:	4613      	mov	r3, r2
 8008166:	00db      	lsls	r3, r3, #3
 8008168:	1a9b      	subs	r3, r3, r2
 800816a:	005b      	lsls	r3, r3, #1
 800816c:	3340      	adds	r3, #64	; 0x40
 800816e:	461d      	mov	r5, r3
 8008170:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008174:	461a      	mov	r2, r3
 8008176:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 800817a:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4413      	add	r3, r2
 8008182:	3b20      	subs	r3, #32
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	1c5a      	adds	r2, r3, #1
 8008188:	4613      	mov	r3, r2
 800818a:	00db      	lsls	r3, r3, #3
 800818c:	1a9b      	subs	r3, r3, r2
 800818e:	005b      	lsls	r3, r3, #1
 8008190:	3340      	adds	r3, #64	; 0x40
 8008192:	9300      	str	r3, [sp, #0]
 8008194:	462b      	mov	r3, r5
 8008196:	4622      	mov	r2, r4
 8008198:	f001 ffde 	bl	800a158 <map>
 800819c:	4603      	mov	r3, r0
 800819e:	b29a      	uxth	r2, r3
 80081a0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80081a4:	4619      	mov	r1, r3
 80081a6:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80081aa:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	005b      	lsls	r3, r3, #1
 80081b2:	440b      	add	r3, r1
 80081b4:	f823 2cd8 	strh.w	r2, [r3, #-216]
 80081b8:	e01b      	b.n	80081f2 <StartChartTask+0x16c2>
            }
            else if(X_Axis[i] == 0)
 80081ba:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80081be:	461a      	mov	r2, r3
 80081c0:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80081c4:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	005b      	lsls	r3, r3, #1
 80081cc:	4413      	add	r3, r2
 80081ce:	f833 3cd8 	ldrh.w	r3, [r3, #-216]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d10d      	bne.n	80081f2 <StartChartTask+0x16c2>
            {
               X_Axis[i] = 0xffff;
 80081d6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80081da:	461a      	mov	r2, r3
 80081dc:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80081e0:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	005b      	lsls	r3, r3, #1
 80081e8:	4413      	add	r3, r2
 80081ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80081ee:	f823 2cd8 	strh.w	r2, [r3, #-216]
         for(int i = 0; i < 800; i++)
 80081f2:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80081f6:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	3301      	adds	r3, #1
 80081fe:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008202:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8008206:	6013      	str	r3, [r2, #0]
 8008208:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 800820c:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8008216:	f6ff af3e 	blt.w	8008096 <StartChartTask+0x1566>
            }
         }
         osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 800821a:	4bca      	ldr	r3, [pc, #808]	; (8008544 <StartChartTask+0x1a14>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f04f 31ff 	mov.w	r1, #4294967295
 8008222:	4618      	mov	r0, r3
 8008224:	f00c fdda 	bl	8014ddc <osMutexAcquire>
         osMutexAcquire(E_PAPIERMutexHandle, osWaitForever);
 8008228:	4bc7      	ldr	r3, [pc, #796]	; (8008548 <StartChartTask+0x1a18>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f04f 31ff 	mov.w	r1, #4294967295
 8008230:	4618      	mov	r0, r3
 8008232:	f00c fdd3 	bl	8014ddc <osMutexAcquire>
         osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8008236:	4bc5      	ldr	r3, [pc, #788]	; (800854c <StartChartTask+0x1a1c>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f04f 31ff 	mov.w	r1, #4294967295
 800823e:	4618      	mov	r0, r3
 8008240:	f00c fdcc 	bl	8014ddc <osMutexAcquire>
         char Temp[10];
         uint16_t TempDifferencje = _Max - _Min;
 8008244:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008248:	f103 033a 	add.w	r3, r3, #58	; 0x3a
 800824c:	881a      	ldrh	r2, [r3, #0]
 800824e:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008252:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8008256:	881b      	ldrh	r3, [r3, #0]
 8008258:	1ad3      	subs	r3, r2, r3
 800825a:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 800825e:	f102 0212 	add.w	r2, r2, #18
 8008262:	8013      	strh	r3, [r2, #0]
         sprintf(Temp, "%d", (_Min + TempDifferencje / 4));
 8008264:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008268:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800826c:	881b      	ldrh	r3, [r3, #0]
 800826e:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008272:	f102 0212 	add.w	r2, r2, #18
 8008276:	8812      	ldrh	r2, [r2, #0]
 8008278:	0892      	lsrs	r2, r2, #2
 800827a:	b292      	uxth	r2, r2
 800827c:	441a      	add	r2, r3
 800827e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008282:	3b34      	subs	r3, #52	; 0x34
 8008284:	49b2      	ldr	r1, [pc, #712]	; (8008550 <StartChartTask+0x1a20>)
 8008286:	4618      	mov	r0, r3
 8008288:	f003 fd6a 	bl	800bd60 <sprintf_>
         GFX_DrawString(0, 218, Temp, BLACK, 1, E_PAPIER);
 800828c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008290:	3a34      	subs	r2, #52	; 0x34
 8008292:	2301      	movs	r3, #1
 8008294:	9301      	str	r3, [sp, #4]
 8008296:	2301      	movs	r3, #1
 8008298:	9300      	str	r3, [sp, #0]
 800829a:	2300      	movs	r3, #0
 800829c:	21da      	movs	r1, #218	; 0xda
 800829e:	2000      	movs	r0, #0
 80082a0:	f7f9 f808 	bl	80012b4 <GFX_DrawString>
         sprintf(Temp, "%d", (_Min + TempDifferencje / 2));
 80082a4:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80082a8:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80082ac:	881b      	ldrh	r3, [r3, #0]
 80082ae:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 80082b2:	f102 0212 	add.w	r2, r2, #18
 80082b6:	8812      	ldrh	r2, [r2, #0]
 80082b8:	0852      	lsrs	r2, r2, #1
 80082ba:	b292      	uxth	r2, r2
 80082bc:	441a      	add	r2, r3
 80082be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80082c2:	3b34      	subs	r3, #52	; 0x34
 80082c4:	49a2      	ldr	r1, [pc, #648]	; (8008550 <StartChartTask+0x1a20>)
 80082c6:	4618      	mov	r0, r3
 80082c8:	f003 fd4a 	bl	800bd60 <sprintf_>
         GFX_DrawString(0, 160, Temp, BLACK, 1, E_PAPIER);
 80082cc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80082d0:	3a34      	subs	r2, #52	; 0x34
 80082d2:	2301      	movs	r3, #1
 80082d4:	9301      	str	r3, [sp, #4]
 80082d6:	2301      	movs	r3, #1
 80082d8:	9300      	str	r3, [sp, #0]
 80082da:	2300      	movs	r3, #0
 80082dc:	21a0      	movs	r1, #160	; 0xa0
 80082de:	2000      	movs	r0, #0
 80082e0:	f7f8 ffe8 	bl	80012b4 <GFX_DrawString>
         sprintf(Temp, "%d", (_Max - TempDifferencje / 4));
 80082e4:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80082e8:	f103 033a 	add.w	r3, r3, #58	; 0x3a
 80082ec:	881b      	ldrh	r3, [r3, #0]
 80082ee:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 80082f2:	f102 0212 	add.w	r2, r2, #18
 80082f6:	8812      	ldrh	r2, [r2, #0]
 80082f8:	0892      	lsrs	r2, r2, #2
 80082fa:	b292      	uxth	r2, r2
 80082fc:	1a9a      	subs	r2, r3, r2
 80082fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008302:	3b34      	subs	r3, #52	; 0x34
 8008304:	4992      	ldr	r1, [pc, #584]	; (8008550 <StartChartTask+0x1a20>)
 8008306:	4618      	mov	r0, r3
 8008308:	f003 fd2a 	bl	800bd60 <sprintf_>
         GFX_DrawString(0, 103, Temp, BLACK, 1, E_PAPIER);
 800830c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008310:	3a34      	subs	r2, #52	; 0x34
 8008312:	2301      	movs	r3, #1
 8008314:	9301      	str	r3, [sp, #4]
 8008316:	2301      	movs	r3, #1
 8008318:	9300      	str	r3, [sp, #0]
 800831a:	2300      	movs	r3, #0
 800831c:	2167      	movs	r1, #103	; 0x67
 800831e:	2000      	movs	r0, #0
 8008320:	f7f8 ffc8 	bl	80012b4 <GFX_DrawString>
         sprintf(Temp, "%d", _Min);
 8008324:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008328:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800832c:	881a      	ldrh	r2, [r3, #0]
 800832e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008332:	3b34      	subs	r3, #52	; 0x34
 8008334:	4986      	ldr	r1, [pc, #536]	; (8008550 <StartChartTask+0x1a20>)
 8008336:	4618      	mov	r0, r3
 8008338:	f003 fd12 	bl	800bd60 <sprintf_>
         GFX_DrawString(0, 276, Temp, BLACK, 1, E_PAPIER);
 800833c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008340:	3a34      	subs	r2, #52	; 0x34
 8008342:	2301      	movs	r3, #1
 8008344:	9301      	str	r3, [sp, #4]
 8008346:	2301      	movs	r3, #1
 8008348:	9300      	str	r3, [sp, #0]
 800834a:	2300      	movs	r3, #0
 800834c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8008350:	2000      	movs	r0, #0
 8008352:	f7f8 ffaf 	bl	80012b4 <GFX_DrawString>
         sprintf(Temp, "%d", _Max);
 8008356:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 800835a:	f103 033a 	add.w	r3, r3, #58	; 0x3a
 800835e:	881a      	ldrh	r2, [r3, #0]
 8008360:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008364:	3b34      	subs	r3, #52	; 0x34
 8008366:	497a      	ldr	r1, [pc, #488]	; (8008550 <StartChartTask+0x1a20>)
 8008368:	4618      	mov	r0, r3
 800836a:	f003 fcf9 	bl	800bd60 <sprintf_>
         GFX_DrawString(0, 45, Temp, BLACK, 1, E_PAPIER);
 800836e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008372:	3a34      	subs	r2, #52	; 0x34
 8008374:	2301      	movs	r3, #1
 8008376:	9301      	str	r3, [sp, #4]
 8008378:	2301      	movs	r3, #1
 800837a:	9300      	str	r3, [sp, #0]
 800837c:	2300      	movs	r3, #0
 800837e:	212d      	movs	r1, #45	; 0x2d
 8008380:	2000      	movs	r0, #0
 8008382:	f7f8 ff97 	bl	80012b4 <GFX_DrawString>
         if(X_Axis[0] != 0xffff && X_Axis[1] != 0xffff)
 8008386:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800838a:	f833 3cd8 	ldrh.w	r3, [r3, #-216]
 800838e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008392:	4293      	cmp	r3, r2
 8008394:	d024      	beq.n	80083e0 <StartChartTask+0x18b0>
 8008396:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800839a:	f833 3cd6 	ldrh.w	r3, [r3, #-214]
 800839e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d01c      	beq.n	80083e0 <StartChartTask+0x18b0>
         {
            GFX_DrawLine(X_Axis[0], Y_Axis[0], X_Axis[1], Y_Axis[1], BLACK, E_PAPIER);
 80083a6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80083aa:	f833 3cd8 	ldrh.w	r3, [r3, #-216]
 80083ae:	4618      	mov	r0, r3
 80083b0:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80083b4:	f6a3 2398 	subw	r3, r3, #2712	; 0xa98
 80083b8:	881b      	ldrh	r3, [r3, #0]
 80083ba:	4619      	mov	r1, r3
 80083bc:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80083c0:	f833 3cd6 	ldrh.w	r3, [r3, #-214]
 80083c4:	461a      	mov	r2, r3
 80083c6:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80083ca:	f6a3 2398 	subw	r3, r3, #2712	; 0xa98
 80083ce:	885b      	ldrh	r3, [r3, #2]
 80083d0:	461c      	mov	r4, r3
 80083d2:	2301      	movs	r3, #1
 80083d4:	9301      	str	r3, [sp, #4]
 80083d6:	2300      	movs	r3, #0
 80083d8:	9300      	str	r3, [sp, #0]
 80083da:	4623      	mov	r3, r4
 80083dc:	f7f9 f88a 	bl	80014f4 <GFX_DrawLine>
         }
         for(int i = 1; i < 800; i++)
 80083e0:	2301      	movs	r3, #1
 80083e2:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 80083e6:	f102 0220 	add.w	r2, r2, #32
 80083ea:	6013      	str	r3, [r2, #0]
 80083ec:	e065      	b.n	80084ba <StartChartTask+0x198a>
         {
            if(X_Axis[i + 1] != 0xffff && X_Axis[i] != 0xffff)
 80083ee:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80083f2:	f103 0320 	add.w	r3, r3, #32
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	3301      	adds	r3, #1
 80083fa:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80083fe:	005b      	lsls	r3, r3, #1
 8008400:	4413      	add	r3, r2
 8008402:	f833 3cd8 	ldrh.w	r3, [r3, #-216]
 8008406:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800840a:	4293      	cmp	r3, r2
 800840c:	d04a      	beq.n	80084a4 <StartChartTask+0x1974>
 800840e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8008412:	461a      	mov	r2, r3
 8008414:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008418:	f103 0320 	add.w	r3, r3, #32
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	005b      	lsls	r3, r3, #1
 8008420:	4413      	add	r3, r2
 8008422:	f833 3cd8 	ldrh.w	r3, [r3, #-216]
 8008426:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800842a:	4293      	cmp	r3, r2
 800842c:	d03a      	beq.n	80084a4 <StartChartTask+0x1974>
            {
               GFX_DrawLine(X_Axis[i], Y_Axis[i], X_Axis[i + 1], Y_Axis[i + 1], BLACK, E_PAPIER);
 800842e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8008432:	461a      	mov	r2, r3
 8008434:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008438:	f103 0320 	add.w	r3, r3, #32
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	005b      	lsls	r3, r3, #1
 8008440:	4413      	add	r3, r2
 8008442:	f833 3cd8 	ldrh.w	r3, [r3, #-216]
 8008446:	4618      	mov	r0, r3
 8008448:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800844c:	f6a3 2398 	subw	r3, r3, #2712	; 0xa98
 8008450:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008454:	f102 0220 	add.w	r2, r2, #32
 8008458:	6812      	ldr	r2, [r2, #0]
 800845a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800845e:	4619      	mov	r1, r3
 8008460:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008464:	f103 0320 	add.w	r3, r3, #32
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	3301      	adds	r3, #1
 800846c:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8008470:	005b      	lsls	r3, r3, #1
 8008472:	4413      	add	r3, r2
 8008474:	f833 3cd8 	ldrh.w	r3, [r3, #-216]
 8008478:	461c      	mov	r4, r3
 800847a:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 800847e:	f103 0320 	add.w	r3, r3, #32
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	1c5a      	adds	r2, r3, #1
 8008486:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800848a:	f6a3 2398 	subw	r3, r3, #2712	; 0xa98
 800848e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008492:	461a      	mov	r2, r3
 8008494:	2301      	movs	r3, #1
 8008496:	9301      	str	r3, [sp, #4]
 8008498:	2300      	movs	r3, #0
 800849a:	9300      	str	r3, [sp, #0]
 800849c:	4613      	mov	r3, r2
 800849e:	4622      	mov	r2, r4
 80084a0:	f7f9 f828 	bl	80014f4 <GFX_DrawLine>
         for(int i = 1; i < 800; i++)
 80084a4:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80084a8:	f103 0320 	add.w	r3, r3, #32
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	3301      	adds	r3, #1
 80084b0:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 80084b4:	f102 0220 	add.w	r2, r2, #32
 80084b8:	6013      	str	r3, [r2, #0]
 80084ba:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80084be:	f103 0320 	add.w	r3, r3, #32
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80084c8:	db91      	blt.n	80083ee <StartChartTask+0x18be>
            }
         }
         e_papier_display();
 80084ca:	f7fc fa1d 	bl	8004908 <e_papier_display>
         osMutexAcquire(EncoderMutexHandle, osWaitForever);
 80084ce:	4b21      	ldr	r3, [pc, #132]	; (8008554 <StartChartTask+0x1a24>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f04f 31ff 	mov.w	r1, #4294967295
 80084d6:	4618      	mov	r0, r3
 80084d8:	f00c fc80 	bl	8014ddc <osMutexAcquire>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 80084dc:	e002      	b.n	80084e4 <StartChartTask+0x19b4>
         {
            osDelay(100);
 80084de:	2064      	movs	r0, #100	; 0x64
 80084e0:	f00c fa2e 	bl	8014940 <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 1)
 80084e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80084e8:	481b      	ldr	r0, [pc, #108]	; (8008558 <StartChartTask+0x1a28>)
 80084ea:	f005 fcd7 	bl	800de9c <HAL_GPIO_ReadPin>
 80084ee:	4603      	mov	r3, r0
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d0f4      	beq.n	80084de <StartChartTask+0x19ae>
         }
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 80084f4:	e002      	b.n	80084fc <StartChartTask+0x19cc>
         {
            osDelay(100);
 80084f6:	2064      	movs	r0, #100	; 0x64
 80084f8:	f00c fa22 	bl	8014940 <osDelay>
         while(HAL_GPIO_ReadPin(ENCODER_SWITCH_GPIO_Port, ENCODER_SWITCH_Pin) == 0)
 80084fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008500:	4815      	ldr	r0, [pc, #84]	; (8008558 <StartChartTask+0x1a28>)
 8008502:	f005 fccb 	bl	800de9c <HAL_GPIO_ReadPin>
 8008506:	4603      	mov	r3, r0
 8008508:	2b00      	cmp	r3, #0
 800850a:	d0f4      	beq.n	80084f6 <StartChartTask+0x19c6>
         }
         osMutexRelease(EncoderMutexHandle);
 800850c:	4b11      	ldr	r3, [pc, #68]	; (8008554 <StartChartTask+0x1a24>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4618      	mov	r0, r3
 8008512:	f00c fcae 	bl	8014e72 <osMutexRelease>
         osMutexRelease(SPI1MutexHandle);
 8008516:	4b0d      	ldr	r3, [pc, #52]	; (800854c <StartChartTask+0x1a1c>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4618      	mov	r0, r3
 800851c:	f00c fca9 	bl	8014e72 <osMutexRelease>
         osMutexRelease(E_PAPIERMutexHandle);
 8008520:	4b09      	ldr	r3, [pc, #36]	; (8008548 <StartChartTask+0x1a18>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4618      	mov	r0, r3
 8008526:	f00c fca4 	bl	8014e72 <osMutexRelease>
         osMutexRelease(ScreensDcMutexHandle);
 800852a:	4b06      	ldr	r3, [pc, #24]	; (8008544 <StartChartTask+0x1a14>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4618      	mov	r0, r3
 8008530:	f00c fc9f 	bl	8014e72 <osMutexRelease>
      }
      for(int i = 0; i < 800; i++)
 8008534:	2300      	movs	r3, #0
 8008536:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 800853a:	f102 021c 	add.w	r2, r2, #28
 800853e:	6013      	str	r3, [r2, #0]
 8008540:	e062      	b.n	8008608 <StartChartTask+0x1ad8>
 8008542:	bf00      	nop
 8008544:	20004034 	.word	0x20004034
 8008548:	20004040 	.word	0x20004040
 800854c:	2000403c 	.word	0x2000403c
 8008550:	0801f480 	.word	0x0801f480
 8008554:	20004050 	.word	0x20004050
 8008558:	48000400 	.word	0x48000400
      {
         ChartVariable.IntegerType[i]       = 0;
 800855c:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8008560:	f5a3 6350 	sub.w	r3, r3, #3328	; 0xd00
 8008564:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008568:	f102 021c 	add.w	r2, r2, #28
 800856c:	6812      	ldr	r2, [r2, #0]
 800856e:	2100      	movs	r1, #0
 8008570:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
         ChartVariable.FloatingPointType[i] = 0;
 8008574:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8008578:	f5a3 6250 	sub.w	r2, r3, #3328	; 0xd00
 800857c:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8008580:	f103 031c 	add.w	r3, r3, #28
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	4413      	add	r3, r2
 800858a:	f04f 0200 	mov.w	r2, #0
 800858e:	601a      	str	r2, [r3, #0]
         Y_Axis[i]                          = 0;
 8008590:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8008594:	f6a3 2398 	subw	r3, r3, #2712	; 0xa98
 8008598:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 800859c:	f102 021c 	add.w	r2, r2, #28
 80085a0:	6812      	ldr	r2, [r2, #0]
 80085a2:	2100      	movs	r1, #0
 80085a4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
         X_Axis[i]                          = 0;
 80085a8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80085ac:	461a      	mov	r2, r3
 80085ae:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80085b2:	f103 031c 	add.w	r3, r3, #28
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	005b      	lsls	r3, r3, #1
 80085ba:	4413      	add	r3, r2
 80085bc:	2200      	movs	r2, #0
 80085be:	f823 2cd8 	strh.w	r2, [r3, #-216]
         Hour[i]                            = 0;
 80085c2:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80085c6:	461a      	mov	r2, r3
 80085c8:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80085cc:	f103 031c 	add.w	r3, r3, #28
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4413      	add	r3, r2
 80085d4:	3b20      	subs	r3, #32
 80085d6:	2200      	movs	r2, #0
 80085d8:	701a      	strb	r2, [r3, #0]
         Minute[i]                          = 0;
 80085da:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80085de:	f5a3 7250 	sub.w	r2, r3, #832	; 0x340
 80085e2:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80085e6:	f103 031c 	add.w	r3, r3, #28
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4413      	add	r3, r2
 80085ee:	2200      	movs	r2, #0
 80085f0:	701a      	strb	r2, [r3, #0]
      for(int i = 0; i < 800; i++)
 80085f2:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80085f6:	f103 031c 	add.w	r3, r3, #28
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	3301      	adds	r3, #1
 80085fe:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8008602:	f102 021c 	add.w	r2, r2, #28
 8008606:	6013      	str	r3, [r2, #0]
 8008608:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 800860c:	f103 031c 	add.w	r3, r3, #28
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8008616:	dba1      	blt.n	800855c <StartChartTask+0x1a2c>
      }
      FramDataChartExistFlag = 0;
 8008618:	2300      	movs	r3, #0
 800861a:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 800861e:	f102 023f 	add.w	r2, r2, #63	; 0x3f
 8008622:	7013      	strb	r3, [r2, #0]
      osMutexAcquire(ScreensDcMutexHandle, osWaitForever);
 8008624:	4b16      	ldr	r3, [pc, #88]	; (8008680 <StartChartTask+0x1b50>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f04f 31ff 	mov.w	r1, #4294967295
 800862c:	4618      	mov	r0, r3
 800862e:	f00c fbd5 	bl	8014ddc <osMutexAcquire>
      osMutexAcquire(E_PAPIERMutexHandle, osWaitForever);
 8008632:	4b14      	ldr	r3, [pc, #80]	; (8008684 <StartChartTask+0x1b54>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f04f 31ff 	mov.w	r1, #4294967295
 800863a:	4618      	mov	r0, r3
 800863c:	f00c fbce 	bl	8014ddc <osMutexAcquire>
      osMutexAcquire(SPI1MutexHandle, osWaitForever);
 8008640:	4b11      	ldr	r3, [pc, #68]	; (8008688 <StartChartTask+0x1b58>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f04f 31ff 	mov.w	r1, #4294967295
 8008648:	4618      	mov	r0, r3
 800864a:	f00c fbc7 	bl	8014ddc <osMutexAcquire>
      e_papier_clear();
 800864e:	f7fc f9cd 	bl	80049ec <e_papier_clear>
      e_papier_display();
 8008652:	f7fc f959 	bl	8004908 <e_papier_display>
      osMutexRelease(SPI1MutexHandle);
 8008656:	4b0c      	ldr	r3, [pc, #48]	; (8008688 <StartChartTask+0x1b58>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4618      	mov	r0, r3
 800865c:	f00c fc09 	bl	8014e72 <osMutexRelease>
      osMutexRelease(E_PAPIERMutexHandle);
 8008660:	4b08      	ldr	r3, [pc, #32]	; (8008684 <StartChartTask+0x1b54>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4618      	mov	r0, r3
 8008666:	f00c fc04 	bl	8014e72 <osMutexRelease>
      osMutexRelease(ScreensDcMutexHandle);
 800866a:	4b05      	ldr	r3, [pc, #20]	; (8008680 <StartChartTask+0x1b50>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4618      	mov	r0, r3
 8008670:	f00c fbff 	bl	8014e72 <osMutexRelease>
      osDelay(1);
 8008674:	2001      	movs	r0, #1
 8008676:	f00c f963 	bl	8014940 <osDelay>
      osMessageQueueGet(ChartQueueHandle, &Cda, 0, osWaitForever);
 800867a:	f7fe bab9 	b.w	8006bf0 <StartChartTask+0xc0>
 800867e:	bf00      	nop
 8008680:	20004034 	.word	0x20004034
 8008684:	20004040 	.word	0x20004040
 8008688:	2000403c 	.word	0x2000403c

0800868c <StartRfpMessageTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartRfpMessageTask */
void StartRfpMessageTask(void *argument)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRfpMessageTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8008694:	4b20      	ldr	r3, [pc, #128]	; (8008718 <StartRfpMessageTask+0x8c>)
 8008696:	6818      	ldr	r0, [r3, #0]
 8008698:	f04f 33ff 	mov.w	r3, #4294967295
 800869c:	2202      	movs	r2, #2
 800869e:	2102      	movs	r1, #2
 80086a0:	f00c fab0 	bl	8014c04 <osEventFlagsWait>
   RfpMessage_TypeDef RfpMessage = { 0 };
 80086a4:	2300      	movs	r3, #0
 80086a6:	60fb      	str	r3, [r7, #12]
   /* Infinite loop */
   for(;;)
   {
      osMessageQueueGet(RfpMessageQueueHandle, &RfpMessage, 0, osWaitForever);
 80086a8:	4b1c      	ldr	r3, [pc, #112]	; (800871c <StartRfpMessageTask+0x90>)
 80086aa:	6818      	ldr	r0, [r3, #0]
 80086ac:	f107 010c 	add.w	r1, r7, #12
 80086b0:	f04f 33ff 	mov.w	r3, #4294967295
 80086b4:	2200      	movs	r2, #0
 80086b6:	f00c fced 	bl	8015094 <osMessageQueueGet>
      while(Rfp.State != RFP_STATE_IDLE)
 80086ba:	e002      	b.n	80086c2 <StartRfpMessageTask+0x36>
      {
         osDelay(100);
 80086bc:	2064      	movs	r0, #100	; 0x64
 80086be:	f00c f93f 	bl	8014940 <osDelay>
      while(Rfp.State != RFP_STATE_IDLE)
 80086c2:	4b17      	ldr	r3, [pc, #92]	; (8008720 <StartRfpMessageTask+0x94>)
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d1f8      	bne.n	80086bc <StartRfpMessageTask+0x30>
      }
      if(RfpMessage.AdditionalData == 0)
 80086ca:	89fb      	ldrh	r3, [r7, #14]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d108      	bne.n	80086e2 <StartRfpMessageTask+0x56>
      {
         RFP_SendData(RFP_ODWS, RfpMessage.MessageType, &RfpMessage.Data, 1);
 80086d0:	7b39      	ldrb	r1, [r7, #12]
 80086d2:	f107 030c 	add.w	r3, r7, #12
 80086d6:	1c5a      	adds	r2, r3, #1
 80086d8:	2301      	movs	r3, #1
 80086da:	2002      	movs	r0, #2
 80086dc:	f003 fc16 	bl	800bf0c <RFP_SendData>
 80086e0:	e011      	b.n	8008706 <StartRfpMessageTask+0x7a>
      }
      else
      {
         uint8_t Temp[3];
         Temp[0] = RfpMessage.Data;
 80086e2:	7b7b      	ldrb	r3, [r7, #13]
 80086e4:	723b      	strb	r3, [r7, #8]
         Temp[1] = ((RfpMessage.AdditionalData & 0xff) >> 8);
 80086e6:	2300      	movs	r3, #0
 80086e8:	727b      	strb	r3, [r7, #9]
         Temp[2] = (RfpMessage.AdditionalData & 0xff);
 80086ea:	89fb      	ldrh	r3, [r7, #14]
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	72bb      	strb	r3, [r7, #10]
         RFP_SendData(RFP_ODWS, RfpMessage.MessageType, Temp, 3);
 80086f0:	7b39      	ldrb	r1, [r7, #12]
 80086f2:	f107 0208 	add.w	r2, r7, #8
 80086f6:	2303      	movs	r3, #3
 80086f8:	2002      	movs	r0, #2
 80086fa:	f003 fc07 	bl	800bf0c <RFP_SendData>
      }
      while(Rfp.State != RFP_STATE_IDLE)
 80086fe:	e002      	b.n	8008706 <StartRfpMessageTask+0x7a>
      {
         osDelay(100);
 8008700:	2064      	movs	r0, #100	; 0x64
 8008702:	f00c f91d 	bl	8014940 <osDelay>
      while(Rfp.State != RFP_STATE_IDLE)
 8008706:	4b06      	ldr	r3, [pc, #24]	; (8008720 <StartRfpMessageTask+0x94>)
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	2b01      	cmp	r3, #1
 800870c:	d1f8      	bne.n	8008700 <StartRfpMessageTask+0x74>
      }
      osDelay(1);
 800870e:	2001      	movs	r0, #1
 8008710:	f00c f916 	bl	8014940 <osDelay>
      osMessageQueueGet(RfpMessageQueueHandle, &RfpMessage, 0, osWaitForever);
 8008714:	e7c8      	b.n	80086a8 <StartRfpMessageTask+0x1c>
 8008716:	bf00      	nop
 8008718:	20004054 	.word	0x20004054
 800871c:	20004020 	.word	0x20004020
 8008720:	20003f60 	.word	0x20003f60

08008724 <StartSunriseAndSunsetTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSunriseAndSunsetTask */
void StartSunriseAndSunsetTask(void *argument)
{
 8008724:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008728:	b08e      	sub	sp, #56	; 0x38
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSunriseAndSunsetTask */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 800872e:	4b3a      	ldr	r3, [pc, #232]	; (8008818 <StartSunriseAndSunsetTask+0xf4>)
 8008730:	6818      	ldr	r0, [r3, #0]
 8008732:	f04f 33ff 	mov.w	r3, #4294967295
 8008736:	2202      	movs	r2, #2
 8008738:	2102      	movs	r1, #2
 800873a:	f00c fa63 	bl	8014c04 <osEventFlagsWait>
   RTC_TimeTypeDef RtcTime = { 0 };
 800873e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008742:	2200      	movs	r2, #0
 8008744:	601a      	str	r2, [r3, #0]
 8008746:	605a      	str	r2, [r3, #4]
 8008748:	609a      	str	r2, [r3, #8]
 800874a:	60da      	str	r2, [r3, #12]
 800874c:	611a      	str	r2, [r3, #16]
   RTC_DateTypeDef RtcDate = { 0 };
 800874e:	2300      	movs	r3, #0
 8008750:	623b      	str	r3, [r7, #32]
   Sunrise_TypeDef Sunrise = { 0 };
 8008752:	f107 0308 	add.w	r3, r7, #8
 8008756:	2200      	movs	r2, #0
 8008758:	601a      	str	r2, [r3, #0]
 800875a:	605a      	str	r2, [r3, #4]
 800875c:	609a      	str	r2, [r3, #8]
 800875e:	60da      	str	r2, [r3, #12]
 8008760:	611a      	str	r2, [r3, #16]
 8008762:	615a      	str	r2, [r3, #20]
   /* Infinite loop */
   for(;;)
   {
      osEventFlagsWait(C3V1FlagsHandle, NEW_DAY_FLAG, osFlagsWaitAny, osWaitForever);
 8008764:	4b2c      	ldr	r3, [pc, #176]	; (8008818 <StartSunriseAndSunsetTask+0xf4>)
 8008766:	6818      	ldr	r0, [r3, #0]
 8008768:	f04f 33ff 	mov.w	r3, #4294967295
 800876c:	2200      	movs	r2, #0
 800876e:	2180      	movs	r1, #128	; 0x80
 8008770:	f00c fa48 	bl	8014c04 <osEventFlagsWait>
      osMutexAcquire(RTCMutexHandle, osWaitForever);
 8008774:	4b29      	ldr	r3, [pc, #164]	; (800881c <StartSunriseAndSunsetTask+0xf8>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f04f 31ff 	mov.w	r1, #4294967295
 800877c:	4618      	mov	r0, r3
 800877e:	f00c fb2d 	bl	8014ddc <osMutexAcquire>
      HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 8008782:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008786:	2200      	movs	r2, #0
 8008788:	4619      	mov	r1, r3
 800878a:	4825      	ldr	r0, [pc, #148]	; (8008820 <StartSunriseAndSunsetTask+0xfc>)
 800878c:	f007 faf4 	bl	800fd78 <HAL_RTC_GetTime>
      HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 8008790:	f107 0320 	add.w	r3, r7, #32
 8008794:	2200      	movs	r2, #0
 8008796:	4619      	mov	r1, r3
 8008798:	4821      	ldr	r0, [pc, #132]	; (8008820 <StartSunriseAndSunsetTask+0xfc>)
 800879a:	f007 fbd7 	bl	800ff4c <HAL_RTC_GetDate>
      osMutexRelease(RTCMutexHandle);
 800879e:	4b1f      	ldr	r3, [pc, #124]	; (800881c <StartSunriseAndSunsetTask+0xf8>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4618      	mov	r0, r3
 80087a4:	f00c fb65 	bl	8014e72 <osMutexRelease>
      Wschod(RtcDate.Year + 2000, RtcDate.Month, RtcDate.Date, &Sunrise.Sunrise, &Sunrise.Sunset, &Sunrise.Sunup);
 80087a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80087ac:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80087b0:	4618      	mov	r0, r3
 80087b2:	f7f7 fecf 	bl	8000554 <__aeabi_i2d>
 80087b6:	4604      	mov	r4, r0
 80087b8:	460d      	mov	r5, r1
 80087ba:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80087be:	4618      	mov	r0, r3
 80087c0:	f7f7 feb8 	bl	8000534 <__aeabi_ui2d>
 80087c4:	4680      	mov	r8, r0
 80087c6:	4689      	mov	r9, r1
 80087c8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80087cc:	4618      	mov	r0, r3
 80087ce:	f7f7 feb1 	bl	8000534 <__aeabi_ui2d>
 80087d2:	4682      	mov	sl, r0
 80087d4:	468b      	mov	fp, r1
 80087d6:	f107 0308 	add.w	r3, r7, #8
 80087da:	f103 0210 	add.w	r2, r3, #16
 80087de:	f107 0308 	add.w	r3, r7, #8
 80087e2:	f103 0108 	add.w	r1, r3, #8
 80087e6:	f107 0308 	add.w	r3, r7, #8
 80087ea:	4618      	mov	r0, r3
 80087ec:	ec4b ab12 	vmov	d2, sl, fp
 80087f0:	ec49 8b11 	vmov	d1, r8, r9
 80087f4:	ec45 4b10 	vmov	d0, r4, r5
 80087f8:	f001 f956 	bl	8009aa8 <Wschod>
      osMessageQueuePut(SunriseQueueHandle, &Sunrise, 0, osWaitForever);
 80087fc:	4b09      	ldr	r3, [pc, #36]	; (8008824 <StartSunriseAndSunsetTask+0x100>)
 80087fe:	6818      	ldr	r0, [r3, #0]
 8008800:	f107 0108 	add.w	r1, r7, #8
 8008804:	f04f 33ff 	mov.w	r3, #4294967295
 8008808:	2200      	movs	r2, #0
 800880a:	f00c fbe3 	bl	8014fd4 <osMessageQueuePut>
      osDelay(1);
 800880e:	2001      	movs	r0, #1
 8008810:	f00c f896 	bl	8014940 <osDelay>
      osEventFlagsWait(C3V1FlagsHandle, NEW_DAY_FLAG, osFlagsWaitAny, osWaitForever);
 8008814:	e7a6      	b.n	8008764 <StartSunriseAndSunsetTask+0x40>
 8008816:	bf00      	nop
 8008818:	20004054 	.word	0x20004054
 800881c:	2000404c 	.word	0x2000404c
 8008820:	20004164 	.word	0x20004164
 8008824:	20004028 	.word	0x20004028

08008828 <StartWS2812Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartWS2812Task */
void StartWS2812Task(void *argument)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWS2812Task */
   osEventFlagsWait(C3V1FlagsHandle, INITIALIZE_ALL_FLAG, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8008830:	4b08      	ldr	r3, [pc, #32]	; (8008854 <StartWS2812Task+0x2c>)
 8008832:	6818      	ldr	r0, [r3, #0]
 8008834:	f04f 33ff 	mov.w	r3, #4294967295
 8008838:	2202      	movs	r2, #2
 800883a:	2102      	movs	r1, #2
 800883c:	f00c f9e2 	bl	8014c04 <osEventFlagsWait>

   /* Infinite loop */
   for(;;)
   {
	   WS2812_SetPixel(10, 10, 10);
 8008840:	220a      	movs	r2, #10
 8008842:	210a      	movs	r1, #10
 8008844:	200a      	movs	r0, #10
 8008846:	f7fb f811 	bl	800386c <WS2812_SetPixel>
      osDelay(100);
 800884a:	2064      	movs	r0, #100	; 0x64
 800884c:	f00c f878 	bl	8014940 <osDelay>
	   WS2812_SetPixel(10, 10, 10);
 8008850:	e7f6      	b.n	8008840 <StartWS2812Task+0x18>
 8008852:	bf00      	nop
 8008854:	20004054 	.word	0x20004054

08008858 <MenuTimerCallback>:
  /* USER CODE END StartWS2812Task */
}

/* MenuTimerCallback function */
void MenuTimerCallback(void *argument)
{
 8008858:	b480      	push	{r7}
 800885a:	b083      	sub	sp, #12
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MenuTimerCallback */

  /* USER CODE END MenuTimerCallback */
}
 8008860:	bf00      	nop
 8008862:	370c      	adds	r7, #12
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr

0800886c <Memory_ClearBuffer>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
static void Memory_ClearBuffer(PageVariable_TypeDef *Pv)
{
 800886c:	b480      	push	{r7}
 800886e:	b085      	sub	sp, #20
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
   for(int i = 0; i < 9; i++)
 8008874:	2300      	movs	r3, #0
 8008876:	60fb      	str	r3, [r7, #12]
 8008878:	e08f      	b.n	800899a <Memory_ClearBuffer+0x12e>
   {
      Pv->Record[i].ExternalHumidity    = 0;
 800887a:	6879      	ldr	r1, [r7, #4]
 800887c:	68fa      	ldr	r2, [r7, #12]
 800887e:	4613      	mov	r3, r2
 8008880:	00db      	lsls	r3, r3, #3
 8008882:	1a9b      	subs	r3, r3, r2
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	440b      	add	r3, r1
 8008888:	3318      	adds	r3, #24
 800888a:	f04f 0200 	mov.w	r2, #0
 800888e:	601a      	str	r2, [r3, #0]
      Pv->Record[i].ExternalPM1         = 0;
 8008890:	6879      	ldr	r1, [r7, #4]
 8008892:	68fa      	ldr	r2, [r7, #12]
 8008894:	4613      	mov	r3, r2
 8008896:	00db      	lsls	r3, r3, #3
 8008898:	1a9b      	subs	r3, r3, r2
 800889a:	009b      	lsls	r3, r3, #2
 800889c:	440b      	add	r3, r1
 800889e:	330a      	adds	r3, #10
 80088a0:	2200      	movs	r2, #0
 80088a2:	801a      	strh	r2, [r3, #0]
      Pv->Record[i].ExternalPM10        = 0;
 80088a4:	6879      	ldr	r1, [r7, #4]
 80088a6:	68fa      	ldr	r2, [r7, #12]
 80088a8:	4613      	mov	r3, r2
 80088aa:	00db      	lsls	r3, r3, #3
 80088ac:	1a9b      	subs	r3, r3, r2
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	440b      	add	r3, r1
 80088b2:	330e      	adds	r3, #14
 80088b4:	2200      	movs	r2, #0
 80088b6:	801a      	strh	r2, [r3, #0]
      Pv->Record[i].ExternalPM25        = 0;
 80088b8:	6879      	ldr	r1, [r7, #4]
 80088ba:	68fa      	ldr	r2, [r7, #12]
 80088bc:	4613      	mov	r3, r2
 80088be:	00db      	lsls	r3, r3, #3
 80088c0:	1a9b      	subs	r3, r3, r2
 80088c2:	009b      	lsls	r3, r3, #2
 80088c4:	440b      	add	r3, r1
 80088c6:	330c      	adds	r3, #12
 80088c8:	2200      	movs	r2, #0
 80088ca:	801a      	strh	r2, [r3, #0]
      Pv->Record[i].ExternalTemperature = 0;
 80088cc:	6879      	ldr	r1, [r7, #4]
 80088ce:	68fa      	ldr	r2, [r7, #12]
 80088d0:	4613      	mov	r3, r2
 80088d2:	00db      	lsls	r3, r3, #3
 80088d4:	1a9b      	subs	r3, r3, r2
 80088d6:	009b      	lsls	r3, r3, #2
 80088d8:	440b      	add	r3, r1
 80088da:	3314      	adds	r3, #20
 80088dc:	f04f 0200 	mov.w	r2, #0
 80088e0:	601a      	str	r2, [r3, #0]
      Pv->Record[i].Hour                = 0;
 80088e2:	6879      	ldr	r1, [r7, #4]
 80088e4:	68fa      	ldr	r2, [r7, #12]
 80088e6:	4613      	mov	r3, r2
 80088e8:	00db      	lsls	r3, r3, #3
 80088ea:	1a9b      	subs	r3, r3, r2
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	440b      	add	r3, r1
 80088f0:	3303      	adds	r3, #3
 80088f2:	2200      	movs	r2, #0
 80088f4:	701a      	strb	r2, [r3, #0]
      Pv->Record[i].InternalPM1         = 0;
 80088f6:	6879      	ldr	r1, [r7, #4]
 80088f8:	68fa      	ldr	r2, [r7, #12]
 80088fa:	4613      	mov	r3, r2
 80088fc:	00db      	lsls	r3, r3, #3
 80088fe:	1a9b      	subs	r3, r3, r2
 8008900:	009b      	lsls	r3, r3, #2
 8008902:	440b      	add	r3, r1
 8008904:	3304      	adds	r3, #4
 8008906:	2200      	movs	r2, #0
 8008908:	801a      	strh	r2, [r3, #0]
      Pv->Record[i].InternalPM10        = 0;
 800890a:	6879      	ldr	r1, [r7, #4]
 800890c:	68fa      	ldr	r2, [r7, #12]
 800890e:	4613      	mov	r3, r2
 8008910:	00db      	lsls	r3, r3, #3
 8008912:	1a9b      	subs	r3, r3, r2
 8008914:	009b      	lsls	r3, r3, #2
 8008916:	440b      	add	r3, r1
 8008918:	3308      	adds	r3, #8
 800891a:	2200      	movs	r2, #0
 800891c:	801a      	strh	r2, [r3, #0]
      Pv->Record[i].InternalPM25        = 0;
 800891e:	6879      	ldr	r1, [r7, #4]
 8008920:	68fa      	ldr	r2, [r7, #12]
 8008922:	4613      	mov	r3, r2
 8008924:	00db      	lsls	r3, r3, #3
 8008926:	1a9b      	subs	r3, r3, r2
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	440b      	add	r3, r1
 800892c:	3306      	adds	r3, #6
 800892e:	2200      	movs	r2, #0
 8008930:	801a      	strh	r2, [r3, #0]
      Pv->Record[i].Minute              = 0;
 8008932:	6879      	ldr	r1, [r7, #4]
 8008934:	68fa      	ldr	r2, [r7, #12]
 8008936:	4613      	mov	r3, r2
 8008938:	00db      	lsls	r3, r3, #3
 800893a:	1a9b      	subs	r3, r3, r2
 800893c:	009b      	lsls	r3, r3, #2
 800893e:	440b      	add	r3, r1
 8008940:	3302      	adds	r3, #2
 8008942:	2200      	movs	r2, #0
 8008944:	701a      	strb	r2, [r3, #0]
      Pv->Record[i].Pressure            = 0;
 8008946:	6879      	ldr	r1, [r7, #4]
 8008948:	68fa      	ldr	r2, [r7, #12]
 800894a:	4613      	mov	r3, r2
 800894c:	00db      	lsls	r3, r3, #3
 800894e:	1a9b      	subs	r3, r3, r2
 8008950:	009b      	lsls	r3, r3, #2
 8008952:	440b      	add	r3, r1
 8008954:	3310      	adds	r3, #16
 8008956:	f04f 0200 	mov.w	r2, #0
 800895a:	601a      	str	r2, [r3, #0]
      Pv->Record[i].Reserved            = 0;
 800895c:	6879      	ldr	r1, [r7, #4]
 800895e:	68fa      	ldr	r2, [r7, #12]
 8008960:	4613      	mov	r3, r2
 8008962:	00db      	lsls	r3, r3, #3
 8008964:	1a9b      	subs	r3, r3, r2
 8008966:	009b      	lsls	r3, r3, #2
 8008968:	440b      	add	r3, r1
 800896a:	2200      	movs	r2, #0
 800896c:	701a      	strb	r2, [r3, #0]
      Pv->Record[i].Second              = 0;
 800896e:	6879      	ldr	r1, [r7, #4]
 8008970:	68fa      	ldr	r2, [r7, #12]
 8008972:	4613      	mov	r3, r2
 8008974:	00db      	lsls	r3, r3, #3
 8008976:	1a9b      	subs	r3, r3, r2
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	440b      	add	r3, r1
 800897c:	3301      	adds	r3, #1
 800897e:	2200      	movs	r2, #0
 8008980:	701a      	strb	r2, [r3, #0]
      Pv->Record[i].Reserved            = 0;
 8008982:	6879      	ldr	r1, [r7, #4]
 8008984:	68fa      	ldr	r2, [r7, #12]
 8008986:	4613      	mov	r3, r2
 8008988:	00db      	lsls	r3, r3, #3
 800898a:	1a9b      	subs	r3, r3, r2
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	440b      	add	r3, r1
 8008990:	2200      	movs	r2, #0
 8008992:	701a      	strb	r2, [r3, #0]
   for(int i = 0; i < 9; i++)
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	3301      	adds	r3, #1
 8008998:	60fb      	str	r3, [r7, #12]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2b08      	cmp	r3, #8
 800899e:	f77f af6c 	ble.w	800887a <Memory_ClearBuffer+0xe>
   }
   Pv->PageCRC = CRC_INITIAL_VALUE;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f04f 32ff 	mov.w	r2, #4294967295
 80089a8:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
}
 80089ac:	bf00      	nop
 80089ae:	3714      	adds	r7, #20
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr

080089b8 <RFP_DataFunction>:
static void RFP_DataFunction(uint8_t *Data, uint32_t DataLength, uint32_t DataStart)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b092      	sub	sp, #72	; 0x48
 80089bc:	af00      	add	r7, sp, #0
 80089be:	60f8      	str	r0, [r7, #12]
 80089c0:	60b9      	str	r1, [r7, #8]
 80089c2:	607a      	str	r2, [r7, #4]
   uint8_t *TempPtr;
   MV_TypeDef Mv = { 0 };
 80089c4:	f107 0314 	add.w	r3, r7, #20
 80089c8:	2230      	movs	r2, #48	; 0x30
 80089ca:	2100      	movs	r1, #0
 80089cc:	4618      	mov	r0, r3
 80089ce:	f00f ffef 	bl	80189b0 <memset>
   TempPtr       = &Mv.ExtHumidity;
 80089d2:	f107 0314 	add.w	r3, r7, #20
 80089d6:	3304      	adds	r3, #4
 80089d8:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr      = Data[DataStart];
 80089da:	68fa      	ldr	r2, [r7, #12]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	4413      	add	r3, r2
 80089e0:	781a      	ldrb	r2, [r3, #0]
 80089e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089e4:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 80089e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089e8:	3301      	adds	r3, #1
 80089ea:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 1];
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	3301      	adds	r3, #1
 80089f0:	68fa      	ldr	r2, [r7, #12]
 80089f2:	4413      	add	r3, r2
 80089f4:	781a      	ldrb	r2, [r3, #0]
 80089f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089f8:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 80089fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089fc:	3301      	adds	r3, #1
 80089fe:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 2];
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	3302      	adds	r3, #2
 8008a04:	68fa      	ldr	r2, [r7, #12]
 8008a06:	4413      	add	r3, r2
 8008a08:	781a      	ldrb	r2, [r3, #0]
 8008a0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a0c:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 8008a0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a10:	3301      	adds	r3, #1
 8008a12:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 3];
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	3303      	adds	r3, #3
 8008a18:	68fa      	ldr	r2, [r7, #12]
 8008a1a:	4413      	add	r3, r2
 8008a1c:	781a      	ldrb	r2, [r3, #0]
 8008a1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a20:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 8008a22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a24:	3301      	adds	r3, #1
 8008a26:	647b      	str	r3, [r7, #68]	; 0x44
   TempPtr  = &Mv.ExtTemperature;
 8008a28:	f107 0314 	add.w	r3, r7, #20
 8008a2c:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 5];
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	3305      	adds	r3, #5
 8008a32:	68fa      	ldr	r2, [r7, #12]
 8008a34:	4413      	add	r3, r2
 8008a36:	781a      	ldrb	r2, [r3, #0]
 8008a38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a3a:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 8008a3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a3e:	3301      	adds	r3, #1
 8008a40:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 6];
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	3306      	adds	r3, #6
 8008a46:	68fa      	ldr	r2, [r7, #12]
 8008a48:	4413      	add	r3, r2
 8008a4a:	781a      	ldrb	r2, [r3, #0]
 8008a4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a4e:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 8008a50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a52:	3301      	adds	r3, #1
 8008a54:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 7];
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	3307      	adds	r3, #7
 8008a5a:	68fa      	ldr	r2, [r7, #12]
 8008a5c:	4413      	add	r3, r2
 8008a5e:	781a      	ldrb	r2, [r3, #0]
 8008a60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a62:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 8008a64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a66:	3301      	adds	r3, #1
 8008a68:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 8];
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	3308      	adds	r3, #8
 8008a6e:	68fa      	ldr	r2, [r7, #12]
 8008a70:	4413      	add	r3, r2
 8008a72:	781a      	ldrb	r2, [r3, #0]
 8008a74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a76:	701a      	strb	r2, [r3, #0]
   TempPtr  = &Mv.BatteryVoltage;
 8008a78:	f107 0314 	add.w	r3, r7, #20
 8008a7c:	3328      	adds	r3, #40	; 0x28
 8008a7e:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 13];
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	330d      	adds	r3, #13
 8008a84:	68fa      	ldr	r2, [r7, #12]
 8008a86:	4413      	add	r3, r2
 8008a88:	781a      	ldrb	r2, [r3, #0]
 8008a8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a8c:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 8008a8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a90:	3301      	adds	r3, #1
 8008a92:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 14];
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	330e      	adds	r3, #14
 8008a98:	68fa      	ldr	r2, [r7, #12]
 8008a9a:	4413      	add	r3, r2
 8008a9c:	781a      	ldrb	r2, [r3, #0]
 8008a9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008aa0:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 8008aa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008aa4:	3301      	adds	r3, #1
 8008aa6:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr = Data[DataStart + 15];
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	330f      	adds	r3, #15
 8008aac:	68fa      	ldr	r2, [r7, #12]
 8008aae:	4413      	add	r3, r2
 8008ab0:	781a      	ldrb	r2, [r3, #0]
 8008ab2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ab4:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 8008ab6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ab8:	3301      	adds	r3, #1
 8008aba:	647b      	str	r3, [r7, #68]	; 0x44
   *TempPtr        = Data[DataStart + 16];
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	3310      	adds	r3, #16
 8008ac0:	68fa      	ldr	r2, [r7, #12]
 8008ac2:	4413      	add	r3, r2
 8008ac4:	781a      	ldrb	r2, [r3, #0]
 8008ac6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ac8:	701a      	strb	r2, [r3, #0]
   TempPtr         = NULL;
 8008aca:	2300      	movs	r3, #0
 8008acc:	647b      	str	r3, [r7, #68]	; 0x44
   Mv.ExtPM1       = (Data[22 + 3] | (Data[21 + 3] << 8));
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	3319      	adds	r3, #25
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	b21a      	sxth	r2, r3
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	3318      	adds	r3, #24
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	021b      	lsls	r3, r3, #8
 8008ade:	b21b      	sxth	r3, r3
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	b21b      	sxth	r3, r3
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	853b      	strh	r3, [r7, #40]	; 0x28
   Mv.ExtPM25      = (Data[28 + 3] | (Data[27 + 3] << 8));
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	331f      	adds	r3, #31
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	b21a      	sxth	r2, r3
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	331e      	adds	r3, #30
 8008af4:	781b      	ldrb	r3, [r3, #0]
 8008af6:	021b      	lsls	r3, r3, #8
 8008af8:	b21b      	sxth	r3, r3
 8008afa:	4313      	orrs	r3, r2
 8008afc:	b21b      	sxth	r3, r3
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	857b      	strh	r3, [r7, #42]	; 0x2a
   Mv.ExtPM10      = (Data[25 + 3] | (Data[24 + 3] << 8));
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	331c      	adds	r3, #28
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	b21a      	sxth	r2, r3
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	331b      	adds	r3, #27
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	021b      	lsls	r3, r3, #8
 8008b12:	b21b      	sxth	r3, r3
 8008b14:	4313      	orrs	r3, r2
 8008b16:	b21b      	sxth	r3, r3
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	85bb      	strh	r3, [r7, #44]	; 0x2c
   Mv.BatteryState = Data[DataStart + 18];
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	3312      	adds	r3, #18
 8008b20:	68fa      	ldr	r2, [r7, #12]
 8008b22:	4413      	add	r3, r2
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
   osMessageQueuePut(ExternalMeasurmentQueueHandle, &Mv, 0, osWaitForever);
 8008b2a:	4b06      	ldr	r3, [pc, #24]	; (8008b44 <RFP_DataFunction+0x18c>)
 8008b2c:	6818      	ldr	r0, [r3, #0]
 8008b2e:	f107 0114 	add.w	r1, r7, #20
 8008b32:	f04f 33ff 	mov.w	r3, #4294967295
 8008b36:	2200      	movs	r2, #0
 8008b38:	f00c fa4c 	bl	8014fd4 <osMessageQueuePut>
}
 8008b3c:	bf00      	nop
 8008b3e:	3748      	adds	r7, #72	; 0x48
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}
 8008b44:	20004024 	.word	0x20004024

08008b48 <rang>:
static double rang(double x)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b086      	sub	sp, #24
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	ed87 0b00 	vstr	d0, [r7]
   double A, b;
   b = x / 360;
 8008b52:	f04f 0200 	mov.w	r2, #0
 8008b56:	4b22      	ldr	r3, [pc, #136]	; (8008be0 <rang+0x98>)
 8008b58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b5c:	f7f7 fe8e 	bl	800087c <__aeabi_ddiv>
 8008b60:	4602      	mov	r2, r0
 8008b62:	460b      	mov	r3, r1
 8008b64:	e9c7 2302 	strd	r2, r3, [r7, #8]
   A = 360 * (b - (int)b);
 8008b68:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008b6c:	f7f8 f80c 	bl	8000b88 <__aeabi_d2iz>
 8008b70:	4603      	mov	r3, r0
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7f7 fcee 	bl	8000554 <__aeabi_i2d>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	460b      	mov	r3, r1
 8008b7c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008b80:	f7f7 fb9a 	bl	80002b8 <__aeabi_dsub>
 8008b84:	4602      	mov	r2, r0
 8008b86:	460b      	mov	r3, r1
 8008b88:	4610      	mov	r0, r2
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	f04f 0200 	mov.w	r2, #0
 8008b90:	4b13      	ldr	r3, [pc, #76]	; (8008be0 <rang+0x98>)
 8008b92:	f7f7 fd49 	bl	8000628 <__aeabi_dmul>
 8008b96:	4602      	mov	r2, r0
 8008b98:	460b      	mov	r3, r1
 8008b9a:	e9c7 2304 	strd	r2, r3, [r7, #16]
   if(A < 0)
 8008b9e:	f04f 0200 	mov.w	r2, #0
 8008ba2:	f04f 0300 	mov.w	r3, #0
 8008ba6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008baa:	f7f7 ffaf 	bl	8000b0c <__aeabi_dcmplt>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d00a      	beq.n	8008bca <rang+0x82>
      A = A + 360;
 8008bb4:	f04f 0200 	mov.w	r2, #0
 8008bb8:	4b09      	ldr	r3, [pc, #36]	; (8008be0 <rang+0x98>)
 8008bba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008bbe:	f7f7 fb7d 	bl	80002bc <__adddf3>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	e9c7 2304 	strd	r2, r3, [r7, #16]
   return A;
 8008bca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008bce:	ec43 2b17 	vmov	d7, r2, r3
}
 8008bd2:	eeb0 0a47 	vmov.f32	s0, s14
 8008bd6:	eef0 0a67 	vmov.f32	s1, s15
 8008bda:	3718      	adds	r7, #24
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}
 8008be0:	40768000 	.word	0x40768000
 8008be4:	00000000 	.word	0x00000000

08008be8 <faza>:
static double faza(double Rok, double Miesiac, double Dzien, double godzina, double min, double sec)
{
 8008be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bec:	b0a1      	sub	sp, #132	; 0x84
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 8008bf4:	ed87 1b08 	vstr	d1, [r7, #32]
 8008bf8:	ed87 2b06 	vstr	d2, [r7, #24]
 8008bfc:	ed87 3b04 	vstr	d3, [r7, #16]
 8008c00:	ed87 4b02 	vstr	d4, [r7, #8]
 8008c04:	ed87 5b00 	vstr	d5, [r7]
   if(Miesiac > 2)
 8008c08:	f04f 0200 	mov.w	r2, #0
 8008c0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008c10:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008c14:	f7f7 ff98 	bl	8000b48 <__aeabi_dcmpgt>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	2b00      	cmp	r3, #0
   {
      Miesiac = Miesiac;
      Rok     = Rok;
   }
   if(Miesiac <= 2)
 8008c1c:	f04f 0200 	mov.w	r2, #0
 8008c20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008c24:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008c28:	f7f7 ff7a 	bl	8000b20 <__aeabi_dcmple>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d015      	beq.n	8008c5e <faza+0x76>
   {
      Miesiac = Miesiac + 12;
 8008c32:	f04f 0200 	mov.w	r2, #0
 8008c36:	4bd6      	ldr	r3, [pc, #856]	; (8008f90 <faza+0x3a8>)
 8008c38:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008c3c:	f7f7 fb3e 	bl	80002bc <__adddf3>
 8008c40:	4602      	mov	r2, r0
 8008c42:	460b      	mov	r3, r1
 8008c44:	e9c7 2308 	strd	r2, r3, [r7, #32]
      Rok     = Rok - 1;
 8008c48:	f04f 0200 	mov.w	r2, #0
 8008c4c:	4bd1      	ldr	r3, [pc, #836]	; (8008f94 <faza+0x3ac>)
 8008c4e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008c52:	f7f7 fb31 	bl	80002b8 <__aeabi_dsub>
 8008c56:	4602      	mov	r2, r0
 8008c58:	460b      	mov	r3, r1
 8008c5a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   }
   double A, b, phi1, phi2, jdp, tzd, elm, ams, aml, asd;
   A   = (int)(Rok / 100);
 8008c5e:	f04f 0200 	mov.w	r2, #0
 8008c62:	4bcd      	ldr	r3, [pc, #820]	; (8008f98 <faza+0x3b0>)
 8008c64:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008c68:	f7f7 fe08 	bl	800087c <__aeabi_ddiv>
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	460b      	mov	r3, r1
 8008c70:	4610      	mov	r0, r2
 8008c72:	4619      	mov	r1, r3
 8008c74:	f7f7 ff88 	bl	8000b88 <__aeabi_d2iz>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f7f7 fc6a 	bl	8000554 <__aeabi_i2d>
 8008c80:	4602      	mov	r2, r0
 8008c82:	460b      	mov	r3, r1
 8008c84:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
   b   = 2 - A + (int)(A / 4);
 8008c88:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8008c8c:	f04f 0000 	mov.w	r0, #0
 8008c90:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008c94:	f7f7 fb10 	bl	80002b8 <__aeabi_dsub>
 8008c98:	4602      	mov	r2, r0
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	4690      	mov	r8, r2
 8008c9e:	4699      	mov	r9, r3
 8008ca0:	f04f 0200 	mov.w	r2, #0
 8008ca4:	4bbd      	ldr	r3, [pc, #756]	; (8008f9c <faza+0x3b4>)
 8008ca6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8008caa:	f7f7 fde7 	bl	800087c <__aeabi_ddiv>
 8008cae:	4602      	mov	r2, r0
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	4610      	mov	r0, r2
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	f7f7 ff67 	bl	8000b88 <__aeabi_d2iz>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f7f7 fc49 	bl	8000554 <__aeabi_i2d>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	460b      	mov	r3, r1
 8008cc6:	4640      	mov	r0, r8
 8008cc8:	4649      	mov	r1, r9
 8008cca:	f7f7 faf7 	bl	80002bc <__adddf3>
 8008cce:	4602      	mov	r2, r0
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
   jdp = (int)(365.25 * (Rok + 4716)) + (int)(30.6001 * (Miesiac + 1)) + Dzien + b + ((godzina + min / 60 + sec / 3600) / 24) - 1524.5;
 8008cd6:	a392      	add	r3, pc, #584	; (adr r3, 8008f20 <faza+0x338>)
 8008cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cdc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008ce0:	f7f7 faec 	bl	80002bc <__adddf3>
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	460b      	mov	r3, r1
 8008ce8:	4610      	mov	r0, r2
 8008cea:	4619      	mov	r1, r3
 8008cec:	a38e      	add	r3, pc, #568	; (adr r3, 8008f28 <faza+0x340>)
 8008cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf2:	f7f7 fc99 	bl	8000628 <__aeabi_dmul>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	460b      	mov	r3, r1
 8008cfa:	4610      	mov	r0, r2
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	f7f7 ff43 	bl	8000b88 <__aeabi_d2iz>
 8008d02:	4606      	mov	r6, r0
 8008d04:	f04f 0200 	mov.w	r2, #0
 8008d08:	4ba2      	ldr	r3, [pc, #648]	; (8008f94 <faza+0x3ac>)
 8008d0a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008d0e:	f7f7 fad5 	bl	80002bc <__adddf3>
 8008d12:	4602      	mov	r2, r0
 8008d14:	460b      	mov	r3, r1
 8008d16:	4610      	mov	r0, r2
 8008d18:	4619      	mov	r1, r3
 8008d1a:	a385      	add	r3, pc, #532	; (adr r3, 8008f30 <faza+0x348>)
 8008d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d20:	f7f7 fc82 	bl	8000628 <__aeabi_dmul>
 8008d24:	4602      	mov	r2, r0
 8008d26:	460b      	mov	r3, r1
 8008d28:	4610      	mov	r0, r2
 8008d2a:	4619      	mov	r1, r3
 8008d2c:	f7f7 ff2c 	bl	8000b88 <__aeabi_d2iz>
 8008d30:	4603      	mov	r3, r0
 8008d32:	4433      	add	r3, r6
 8008d34:	4618      	mov	r0, r3
 8008d36:	f7f7 fc0d 	bl	8000554 <__aeabi_i2d>
 8008d3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008d3e:	f7f7 fabd 	bl	80002bc <__adddf3>
 8008d42:	4602      	mov	r2, r0
 8008d44:	460b      	mov	r3, r1
 8008d46:	4610      	mov	r0, r2
 8008d48:	4619      	mov	r1, r3
 8008d4a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8008d4e:	f7f7 fab5 	bl	80002bc <__adddf3>
 8008d52:	4602      	mov	r2, r0
 8008d54:	460b      	mov	r3, r1
 8008d56:	4690      	mov	r8, r2
 8008d58:	4699      	mov	r9, r3
 8008d5a:	f04f 0200 	mov.w	r2, #0
 8008d5e:	4b90      	ldr	r3, [pc, #576]	; (8008fa0 <faza+0x3b8>)
 8008d60:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008d64:	f7f7 fd8a 	bl	800087c <__aeabi_ddiv>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	460b      	mov	r3, r1
 8008d6c:	4610      	mov	r0, r2
 8008d6e:	4619      	mov	r1, r3
 8008d70:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008d74:	f7f7 faa2 	bl	80002bc <__adddf3>
 8008d78:	4602      	mov	r2, r0
 8008d7a:	460b      	mov	r3, r1
 8008d7c:	4692      	mov	sl, r2
 8008d7e:	469b      	mov	fp, r3
 8008d80:	a36d      	add	r3, pc, #436	; (adr r3, 8008f38 <faza+0x350>)
 8008d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d8a:	f7f7 fd77 	bl	800087c <__aeabi_ddiv>
 8008d8e:	4602      	mov	r2, r0
 8008d90:	460b      	mov	r3, r1
 8008d92:	4650      	mov	r0, sl
 8008d94:	4659      	mov	r1, fp
 8008d96:	f7f7 fa91 	bl	80002bc <__adddf3>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	4610      	mov	r0, r2
 8008da0:	4619      	mov	r1, r3
 8008da2:	f04f 0200 	mov.w	r2, #0
 8008da6:	4b7f      	ldr	r3, [pc, #508]	; (8008fa4 <faza+0x3bc>)
 8008da8:	f7f7 fd68 	bl	800087c <__aeabi_ddiv>
 8008dac:	4602      	mov	r2, r0
 8008dae:	460b      	mov	r3, r1
 8008db0:	4640      	mov	r0, r8
 8008db2:	4649      	mov	r1, r9
 8008db4:	f7f7 fa82 	bl	80002bc <__adddf3>
 8008db8:	4602      	mov	r2, r0
 8008dba:	460b      	mov	r3, r1
 8008dbc:	4610      	mov	r0, r2
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	a35f      	add	r3, pc, #380	; (adr r3, 8008f40 <faza+0x358>)
 8008dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc6:	f7f7 fa77 	bl	80002b8 <__aeabi_dsub>
 8008dca:	4602      	mov	r2, r0
 8008dcc:	460b      	mov	r3, r1
 8008dce:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
   jdp = jdp;
   tzd = (jdp - 2451545) / 36525;
 8008dd2:	a35d      	add	r3, pc, #372	; (adr r3, 8008f48 <faza+0x360>)
 8008dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008ddc:	f7f7 fa6c 	bl	80002b8 <__aeabi_dsub>
 8008de0:	4602      	mov	r2, r0
 8008de2:	460b      	mov	r3, r1
 8008de4:	4610      	mov	r0, r2
 8008de6:	4619      	mov	r1, r3
 8008de8:	a359      	add	r3, pc, #356	; (adr r3, 8008f50 <faza+0x368>)
 8008dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dee:	f7f7 fd45 	bl	800087c <__aeabi_ddiv>
 8008df2:	4602      	mov	r2, r0
 8008df4:	460b      	mov	r3, r1
 8008df6:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
   elm = rang(297.8502042 + 445267.1115168 * tzd - (0.00163 * tzd * tzd) + tzd * tzd * tzd / 545868 - tzd * tzd * tzd * tzd / 113065000);
 8008dfa:	a357      	add	r3, pc, #348	; (adr r3, 8008f58 <faza+0x370>)
 8008dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e00:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008e04:	f7f7 fc10 	bl	8000628 <__aeabi_dmul>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	460b      	mov	r3, r1
 8008e0c:	4610      	mov	r0, r2
 8008e0e:	4619      	mov	r1, r3
 8008e10:	a353      	add	r3, pc, #332	; (adr r3, 8008f60 <faza+0x378>)
 8008e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e16:	f7f7 fa51 	bl	80002bc <__adddf3>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	4690      	mov	r8, r2
 8008e20:	4699      	mov	r9, r3
 8008e22:	a351      	add	r3, pc, #324	; (adr r3, 8008f68 <faza+0x380>)
 8008e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e28:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008e2c:	f7f7 fbfc 	bl	8000628 <__aeabi_dmul>
 8008e30:	4602      	mov	r2, r0
 8008e32:	460b      	mov	r3, r1
 8008e34:	4610      	mov	r0, r2
 8008e36:	4619      	mov	r1, r3
 8008e38:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008e3c:	f7f7 fbf4 	bl	8000628 <__aeabi_dmul>
 8008e40:	4602      	mov	r2, r0
 8008e42:	460b      	mov	r3, r1
 8008e44:	4640      	mov	r0, r8
 8008e46:	4649      	mov	r1, r9
 8008e48:	f7f7 fa36 	bl	80002b8 <__aeabi_dsub>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	460b      	mov	r3, r1
 8008e50:	4690      	mov	r8, r2
 8008e52:	4699      	mov	r9, r3
 8008e54:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008e58:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008e5c:	f7f7 fbe4 	bl	8000628 <__aeabi_dmul>
 8008e60:	4602      	mov	r2, r0
 8008e62:	460b      	mov	r3, r1
 8008e64:	4610      	mov	r0, r2
 8008e66:	4619      	mov	r1, r3
 8008e68:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008e6c:	f7f7 fbdc 	bl	8000628 <__aeabi_dmul>
 8008e70:	4602      	mov	r2, r0
 8008e72:	460b      	mov	r3, r1
 8008e74:	4610      	mov	r0, r2
 8008e76:	4619      	mov	r1, r3
 8008e78:	a33d      	add	r3, pc, #244	; (adr r3, 8008f70 <faza+0x388>)
 8008e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e7e:	f7f7 fcfd 	bl	800087c <__aeabi_ddiv>
 8008e82:	4602      	mov	r2, r0
 8008e84:	460b      	mov	r3, r1
 8008e86:	4640      	mov	r0, r8
 8008e88:	4649      	mov	r1, r9
 8008e8a:	f7f7 fa17 	bl	80002bc <__adddf3>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	460b      	mov	r3, r1
 8008e92:	4690      	mov	r8, r2
 8008e94:	4699      	mov	r9, r3
 8008e96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008e9a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008e9e:	f7f7 fbc3 	bl	8000628 <__aeabi_dmul>
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	4610      	mov	r0, r2
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008eae:	f7f7 fbbb 	bl	8000628 <__aeabi_dmul>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	4610      	mov	r0, r2
 8008eb8:	4619      	mov	r1, r3
 8008eba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008ebe:	f7f7 fbb3 	bl	8000628 <__aeabi_dmul>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	4610      	mov	r0, r2
 8008ec8:	4619      	mov	r1, r3
 8008eca:	a32b      	add	r3, pc, #172	; (adr r3, 8008f78 <faza+0x390>)
 8008ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed0:	f7f7 fcd4 	bl	800087c <__aeabi_ddiv>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	460b      	mov	r3, r1
 8008ed8:	4640      	mov	r0, r8
 8008eda:	4649      	mov	r1, r9
 8008edc:	f7f7 f9ec 	bl	80002b8 <__aeabi_dsub>
 8008ee0:	4602      	mov	r2, r0
 8008ee2:	460b      	mov	r3, r1
 8008ee4:	ec43 2b17 	vmov	d7, r2, r3
 8008ee8:	eeb0 0a47 	vmov.f32	s0, s14
 8008eec:	eef0 0a67 	vmov.f32	s1, s15
 8008ef0:	f7ff fe2a 	bl	8008b48 <rang>
 8008ef4:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
   ams = rang(357.5291092 + 35999.0502909 * tzd - 0.0001536 * tzd * tzd + tzd * tzd * tzd / 24490000);
 8008ef8:	a321      	add	r3, pc, #132	; (adr r3, 8008f80 <faza+0x398>)
 8008efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008efe:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008f02:	f7f7 fb91 	bl	8000628 <__aeabi_dmul>
 8008f06:	4602      	mov	r2, r0
 8008f08:	460b      	mov	r3, r1
 8008f0a:	4610      	mov	r0, r2
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	a31e      	add	r3, pc, #120	; (adr r3, 8008f88 <faza+0x3a0>)
 8008f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f14:	f7f7 f9d2 	bl	80002bc <__adddf3>
 8008f18:	e046      	b.n	8008fa8 <faza+0x3c0>
 8008f1a:	bf00      	nop
 8008f1c:	f3af 8000 	nop.w
 8008f20:	00000000 	.word	0x00000000
 8008f24:	40b26c00 	.word	0x40b26c00
 8008f28:	00000000 	.word	0x00000000
 8008f2c:	4076d400 	.word	0x4076d400
 8008f30:	27525461 	.word	0x27525461
 8008f34:	403e99a0 	.word	0x403e99a0
 8008f38:	00000000 	.word	0x00000000
 8008f3c:	40ac2000 	.word	0x40ac2000
 8008f40:	00000000 	.word	0x00000000
 8008f44:	4097d200 	.word	0x4097d200
 8008f48:	80000000 	.word	0x80000000
 8008f4c:	4142b42c 	.word	0x4142b42c
 8008f50:	00000000 	.word	0x00000000
 8008f54:	40e1d5a0 	.word	0x40e1d5a0
 8008f58:	723175c4 	.word	0x723175c4
 8008f5c:	411b2d4c 	.word	0x411b2d4c
 8008f60:	6fb81ec0 	.word	0x6fb81ec0
 8008f64:	40729d9a 	.word	0x40729d9a
 8008f68:	2c5197a2 	.word	0x2c5197a2
 8008f6c:	3f5ab4b7 	.word	0x3f5ab4b7
 8008f70:	00000000 	.word	0x00000000
 8008f74:	4120a898 	.word	0x4120a898
 8008f78:	a0000000 	.word	0xa0000000
 8008f7c:	419af4f0 	.word	0x419af4f0
 8008f80:	9bfba959 	.word	0x9bfba959
 8008f84:	40e193e1 	.word	0x40e193e1
 8008f88:	3b356034 	.word	0x3b356034
 8008f8c:	40765877 	.word	0x40765877
 8008f90:	40280000 	.word	0x40280000
 8008f94:	3ff00000 	.word	0x3ff00000
 8008f98:	40590000 	.word	0x40590000
 8008f9c:	40100000 	.word	0x40100000
 8008fa0:	404e0000 	.word	0x404e0000
 8008fa4:	40380000 	.word	0x40380000
 8008fa8:	4602      	mov	r2, r0
 8008faa:	460b      	mov	r3, r1
 8008fac:	4690      	mov	r8, r2
 8008fae:	4699      	mov	r9, r3
 8008fb0:	f20f 531c 	addw	r3, pc, #1308	; 0x51c
 8008fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008fbc:	f7f7 fb34 	bl	8000628 <__aeabi_dmul>
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	460b      	mov	r3, r1
 8008fc4:	4610      	mov	r0, r2
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008fcc:	f7f7 fb2c 	bl	8000628 <__aeabi_dmul>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	460b      	mov	r3, r1
 8008fd4:	4640      	mov	r0, r8
 8008fd6:	4649      	mov	r1, r9
 8008fd8:	f7f7 f96e 	bl	80002b8 <__aeabi_dsub>
 8008fdc:	4602      	mov	r2, r0
 8008fde:	460b      	mov	r3, r1
 8008fe0:	4690      	mov	r8, r2
 8008fe2:	4699      	mov	r9, r3
 8008fe4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008fe8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008fec:	f7f7 fb1c 	bl	8000628 <__aeabi_dmul>
 8008ff0:	4602      	mov	r2, r0
 8008ff2:	460b      	mov	r3, r1
 8008ff4:	4610      	mov	r0, r2
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008ffc:	f7f7 fb14 	bl	8000628 <__aeabi_dmul>
 8009000:	4602      	mov	r2, r0
 8009002:	460b      	mov	r3, r1
 8009004:	4610      	mov	r0, r2
 8009006:	4619      	mov	r1, r3
 8009008:	f20f 43cc 	addw	r3, pc, #1228	; 0x4cc
 800900c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009010:	f7f7 fc34 	bl	800087c <__aeabi_ddiv>
 8009014:	4602      	mov	r2, r0
 8009016:	460b      	mov	r3, r1
 8009018:	4640      	mov	r0, r8
 800901a:	4649      	mov	r1, r9
 800901c:	f7f7 f94e 	bl	80002bc <__adddf3>
 8009020:	4602      	mov	r2, r0
 8009022:	460b      	mov	r3, r1
 8009024:	ec43 2b17 	vmov	d7, r2, r3
 8009028:	eeb0 0a47 	vmov.f32	s0, s14
 800902c:	eef0 0a67 	vmov.f32	s1, s15
 8009030:	f7ff fd8a 	bl	8008b48 <rang>
 8009034:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48
   aml = rang(134.9634114 + 477198.8676313 * tzd - 0.008997 * tzd * tzd + tzd * tzd * tzd / 69699 - tzd * tzd * tzd * tzd / 14712000);
 8009038:	f20f 43a4 	addw	r3, pc, #1188	; 0x4a4
 800903c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009040:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009044:	f7f7 faf0 	bl	8000628 <__aeabi_dmul>
 8009048:	4602      	mov	r2, r0
 800904a:	460b      	mov	r3, r1
 800904c:	4610      	mov	r0, r2
 800904e:	4619      	mov	r1, r3
 8009050:	f20f 4394 	addw	r3, pc, #1172	; 0x494
 8009054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009058:	f7f7 f930 	bl	80002bc <__adddf3>
 800905c:	4602      	mov	r2, r0
 800905e:	460b      	mov	r3, r1
 8009060:	4690      	mov	r8, r2
 8009062:	4699      	mov	r9, r3
 8009064:	f20f 4388 	addw	r3, pc, #1160	; 0x488
 8009068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800906c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009070:	f7f7 fada 	bl	8000628 <__aeabi_dmul>
 8009074:	4602      	mov	r2, r0
 8009076:	460b      	mov	r3, r1
 8009078:	4610      	mov	r0, r2
 800907a:	4619      	mov	r1, r3
 800907c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009080:	f7f7 fad2 	bl	8000628 <__aeabi_dmul>
 8009084:	4602      	mov	r2, r0
 8009086:	460b      	mov	r3, r1
 8009088:	4640      	mov	r0, r8
 800908a:	4649      	mov	r1, r9
 800908c:	f7f7 f914 	bl	80002b8 <__aeabi_dsub>
 8009090:	4602      	mov	r2, r0
 8009092:	460b      	mov	r3, r1
 8009094:	4690      	mov	r8, r2
 8009096:	4699      	mov	r9, r3
 8009098:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800909c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80090a0:	f7f7 fac2 	bl	8000628 <__aeabi_dmul>
 80090a4:	4602      	mov	r2, r0
 80090a6:	460b      	mov	r3, r1
 80090a8:	4610      	mov	r0, r2
 80090aa:	4619      	mov	r1, r3
 80090ac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80090b0:	f7f7 faba 	bl	8000628 <__aeabi_dmul>
 80090b4:	4602      	mov	r2, r0
 80090b6:	460b      	mov	r3, r1
 80090b8:	4610      	mov	r0, r2
 80090ba:	4619      	mov	r1, r3
 80090bc:	f20f 4338 	addw	r3, pc, #1080	; 0x438
 80090c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c4:	f7f7 fbda 	bl	800087c <__aeabi_ddiv>
 80090c8:	4602      	mov	r2, r0
 80090ca:	460b      	mov	r3, r1
 80090cc:	4640      	mov	r0, r8
 80090ce:	4649      	mov	r1, r9
 80090d0:	f7f7 f8f4 	bl	80002bc <__adddf3>
 80090d4:	4602      	mov	r2, r0
 80090d6:	460b      	mov	r3, r1
 80090d8:	4690      	mov	r8, r2
 80090da:	4699      	mov	r9, r3
 80090dc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80090e0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80090e4:	f7f7 faa0 	bl	8000628 <__aeabi_dmul>
 80090e8:	4602      	mov	r2, r0
 80090ea:	460b      	mov	r3, r1
 80090ec:	4610      	mov	r0, r2
 80090ee:	4619      	mov	r1, r3
 80090f0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80090f4:	f7f7 fa98 	bl	8000628 <__aeabi_dmul>
 80090f8:	4602      	mov	r2, r0
 80090fa:	460b      	mov	r3, r1
 80090fc:	4610      	mov	r0, r2
 80090fe:	4619      	mov	r1, r3
 8009100:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009104:	f7f7 fa90 	bl	8000628 <__aeabi_dmul>
 8009108:	4602      	mov	r2, r0
 800910a:	460b      	mov	r3, r1
 800910c:	4610      	mov	r0, r2
 800910e:	4619      	mov	r1, r3
 8009110:	a3fb      	add	r3, pc, #1004	; (adr r3, 8009500 <faza+0x918>)
 8009112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009116:	f7f7 fbb1 	bl	800087c <__aeabi_ddiv>
 800911a:	4602      	mov	r2, r0
 800911c:	460b      	mov	r3, r1
 800911e:	4640      	mov	r0, r8
 8009120:	4649      	mov	r1, r9
 8009122:	f7f7 f8c9 	bl	80002b8 <__aeabi_dsub>
 8009126:	4602      	mov	r2, r0
 8009128:	460b      	mov	r3, r1
 800912a:	ec43 2b17 	vmov	d7, r2, r3
 800912e:	eeb0 0a47 	vmov.f32	s0, s14
 8009132:	eef0 0a67 	vmov.f32	s1, s15
 8009136:	f7ff fd07 	bl	8008b48 <rang>
 800913a:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
   asd = 180 - elm - (6.289 * sin((M_PI / 180) * ((aml)))) + (2.1 * sin((M_PI / 180) * ((ams)))) - (1.274 * sin((M_PI / 180) * (((2 * elm) - aml))))
 800913e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009142:	f04f 0000 	mov.w	r0, #0
 8009146:	49e0      	ldr	r1, [pc, #896]	; (80094c8 <faza+0x8e0>)
 8009148:	f7f7 f8b6 	bl	80002b8 <__aeabi_dsub>
 800914c:	4602      	mov	r2, r0
 800914e:	460b      	mov	r3, r1
 8009150:	4690      	mov	r8, r2
 8009152:	4699      	mov	r9, r3
 8009154:	a3c0      	add	r3, pc, #768	; (adr r3, 8009458 <faza+0x870>)
 8009156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800915a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800915e:	f7f7 fa63 	bl	8000628 <__aeabi_dmul>
 8009162:	4602      	mov	r2, r0
 8009164:	460b      	mov	r3, r1
 8009166:	ec43 2b17 	vmov	d7, r2, r3
 800916a:	eeb0 0a47 	vmov.f32	s0, s14
 800916e:	eef0 0a67 	vmov.f32	s1, s15
 8009172:	f014 f8d9 	bl	801d328 <sin>
 8009176:	ec51 0b10 	vmov	r0, r1, d0
 800917a:	a3b9      	add	r3, pc, #740	; (adr r3, 8009460 <faza+0x878>)
 800917c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009180:	f7f7 fa52 	bl	8000628 <__aeabi_dmul>
 8009184:	4602      	mov	r2, r0
 8009186:	460b      	mov	r3, r1
 8009188:	4640      	mov	r0, r8
 800918a:	4649      	mov	r1, r9
 800918c:	f7f7 f894 	bl	80002b8 <__aeabi_dsub>
 8009190:	4602      	mov	r2, r0
 8009192:	460b      	mov	r3, r1
 8009194:	4690      	mov	r8, r2
 8009196:	4699      	mov	r9, r3
 8009198:	a3af      	add	r3, pc, #700	; (adr r3, 8009458 <faza+0x870>)
 800919a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800919e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80091a2:	f7f7 fa41 	bl	8000628 <__aeabi_dmul>
 80091a6:	4602      	mov	r2, r0
 80091a8:	460b      	mov	r3, r1
 80091aa:	ec43 2b17 	vmov	d7, r2, r3
 80091ae:	eeb0 0a47 	vmov.f32	s0, s14
 80091b2:	eef0 0a67 	vmov.f32	s1, s15
 80091b6:	f014 f8b7 	bl	801d328 <sin>
 80091ba:	ec51 0b10 	vmov	r0, r1, d0
 80091be:	a3aa      	add	r3, pc, #680	; (adr r3, 8009468 <faza+0x880>)
 80091c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c4:	f7f7 fa30 	bl	8000628 <__aeabi_dmul>
 80091c8:	4602      	mov	r2, r0
 80091ca:	460b      	mov	r3, r1
 80091cc:	4640      	mov	r0, r8
 80091ce:	4649      	mov	r1, r9
 80091d0:	f7f7 f874 	bl	80002bc <__adddf3>
 80091d4:	4602      	mov	r2, r0
 80091d6:	460b      	mov	r3, r1
 80091d8:	4690      	mov	r8, r2
 80091da:	4699      	mov	r9, r3
 80091dc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80091e0:	4602      	mov	r2, r0
 80091e2:	460b      	mov	r3, r1
 80091e4:	f7f7 f86a 	bl	80002bc <__adddf3>
 80091e8:	4602      	mov	r2, r0
 80091ea:	460b      	mov	r3, r1
 80091ec:	4610      	mov	r0, r2
 80091ee:	4619      	mov	r1, r3
 80091f0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80091f4:	f7f7 f860 	bl	80002b8 <__aeabi_dsub>
 80091f8:	4602      	mov	r2, r0
 80091fa:	460b      	mov	r3, r1
 80091fc:	4610      	mov	r0, r2
 80091fe:	4619      	mov	r1, r3
 8009200:	a395      	add	r3, pc, #596	; (adr r3, 8009458 <faza+0x870>)
 8009202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009206:	f7f7 fa0f 	bl	8000628 <__aeabi_dmul>
 800920a:	4602      	mov	r2, r0
 800920c:	460b      	mov	r3, r1
 800920e:	ec43 2b17 	vmov	d7, r2, r3
 8009212:	eeb0 0a47 	vmov.f32	s0, s14
 8009216:	eef0 0a67 	vmov.f32	s1, s15
 800921a:	f014 f885 	bl	801d328 <sin>
 800921e:	ec51 0b10 	vmov	r0, r1, d0
 8009222:	a393      	add	r3, pc, #588	; (adr r3, 8009470 <faza+0x888>)
 8009224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009228:	f7f7 f9fe 	bl	8000628 <__aeabi_dmul>
 800922c:	4602      	mov	r2, r0
 800922e:	460b      	mov	r3, r1
 8009230:	4640      	mov	r0, r8
 8009232:	4649      	mov	r1, r9
 8009234:	f7f7 f840 	bl	80002b8 <__aeabi_dsub>
 8009238:	4602      	mov	r2, r0
 800923a:	460b      	mov	r3, r1
 800923c:	4690      	mov	r8, r2
 800923e:	4699      	mov	r9, r3
         - (0.658 * sin((M_PI / 180) * ((2 * elm)))) - (0.214 * sin((M_PI / 180) * ((2 * aml)))) - (0.11 * sin((M_PI / 180) * ((elm))));
 8009240:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009244:	4602      	mov	r2, r0
 8009246:	460b      	mov	r3, r1
 8009248:	f7f7 f838 	bl	80002bc <__adddf3>
 800924c:	4602      	mov	r2, r0
 800924e:	460b      	mov	r3, r1
 8009250:	4610      	mov	r0, r2
 8009252:	4619      	mov	r1, r3
 8009254:	a380      	add	r3, pc, #512	; (adr r3, 8009458 <faza+0x870>)
 8009256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925a:	f7f7 f9e5 	bl	8000628 <__aeabi_dmul>
 800925e:	4602      	mov	r2, r0
 8009260:	460b      	mov	r3, r1
 8009262:	ec43 2b17 	vmov	d7, r2, r3
 8009266:	eeb0 0a47 	vmov.f32	s0, s14
 800926a:	eef0 0a67 	vmov.f32	s1, s15
 800926e:	f014 f85b 	bl	801d328 <sin>
 8009272:	ec51 0b10 	vmov	r0, r1, d0
 8009276:	a380      	add	r3, pc, #512	; (adr r3, 8009478 <faza+0x890>)
 8009278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800927c:	f7f7 f9d4 	bl	8000628 <__aeabi_dmul>
 8009280:	4602      	mov	r2, r0
 8009282:	460b      	mov	r3, r1
 8009284:	4640      	mov	r0, r8
 8009286:	4649      	mov	r1, r9
 8009288:	f7f7 f816 	bl	80002b8 <__aeabi_dsub>
 800928c:	4602      	mov	r2, r0
 800928e:	460b      	mov	r3, r1
 8009290:	4690      	mov	r8, r2
 8009292:	4699      	mov	r9, r3
 8009294:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009298:	4602      	mov	r2, r0
 800929a:	460b      	mov	r3, r1
 800929c:	f7f7 f80e 	bl	80002bc <__adddf3>
 80092a0:	4602      	mov	r2, r0
 80092a2:	460b      	mov	r3, r1
 80092a4:	4610      	mov	r0, r2
 80092a6:	4619      	mov	r1, r3
 80092a8:	a36b      	add	r3, pc, #428	; (adr r3, 8009458 <faza+0x870>)
 80092aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ae:	f7f7 f9bb 	bl	8000628 <__aeabi_dmul>
 80092b2:	4602      	mov	r2, r0
 80092b4:	460b      	mov	r3, r1
 80092b6:	ec43 2b17 	vmov	d7, r2, r3
 80092ba:	eeb0 0a47 	vmov.f32	s0, s14
 80092be:	eef0 0a67 	vmov.f32	s1, s15
 80092c2:	f014 f831 	bl	801d328 <sin>
 80092c6:	ec51 0b10 	vmov	r0, r1, d0
 80092ca:	a36d      	add	r3, pc, #436	; (adr r3, 8009480 <faza+0x898>)
 80092cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d0:	f7f7 f9aa 	bl	8000628 <__aeabi_dmul>
 80092d4:	4602      	mov	r2, r0
 80092d6:	460b      	mov	r3, r1
 80092d8:	4640      	mov	r0, r8
 80092da:	4649      	mov	r1, r9
 80092dc:	f7f6 ffec 	bl	80002b8 <__aeabi_dsub>
 80092e0:	4602      	mov	r2, r0
 80092e2:	460b      	mov	r3, r1
 80092e4:	4690      	mov	r8, r2
 80092e6:	4699      	mov	r9, r3
 80092e8:	a35b      	add	r3, pc, #364	; (adr r3, 8009458 <faza+0x870>)
 80092ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80092f2:	f7f7 f999 	bl	8000628 <__aeabi_dmul>
 80092f6:	4602      	mov	r2, r0
 80092f8:	460b      	mov	r3, r1
 80092fa:	ec43 2b17 	vmov	d7, r2, r3
 80092fe:	eeb0 0a47 	vmov.f32	s0, s14
 8009302:	eef0 0a67 	vmov.f32	s1, s15
 8009306:	f014 f80f 	bl	801d328 <sin>
 800930a:	ec51 0b10 	vmov	r0, r1, d0
 800930e:	a35e      	add	r3, pc, #376	; (adr r3, 8009488 <faza+0x8a0>)
 8009310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009314:	f7f7 f988 	bl	8000628 <__aeabi_dmul>
 8009318:	4602      	mov	r2, r0
 800931a:	460b      	mov	r3, r1
   asd = 180 - elm - (6.289 * sin((M_PI / 180) * ((aml)))) + (2.1 * sin((M_PI / 180) * ((ams)))) - (1.274 * sin((M_PI / 180) * (((2 * elm) - aml))))
 800931c:	4640      	mov	r0, r8
 800931e:	4649      	mov	r1, r9
 8009320:	f7f6 ffca 	bl	80002b8 <__aeabi_dsub>
 8009324:	4602      	mov	r2, r0
 8009326:	460b      	mov	r3, r1
 8009328:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
   phi1 = (1 + cos((M_PI / 180) * (asd))) / 2;
 800932c:	a34a      	add	r3, pc, #296	; (adr r3, 8009458 <faza+0x870>)
 800932e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009332:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009336:	f7f7 f977 	bl	8000628 <__aeabi_dmul>
 800933a:	4602      	mov	r2, r0
 800933c:	460b      	mov	r3, r1
 800933e:	ec43 2b17 	vmov	d7, r2, r3
 8009342:	eeb0 0a47 	vmov.f32	s0, s14
 8009346:	eef0 0a67 	vmov.f32	s1, s15
 800934a:	f013 ff99 	bl	801d280 <cos>
 800934e:	ec51 0b10 	vmov	r0, r1, d0
 8009352:	f04f 0200 	mov.w	r2, #0
 8009356:	4b5d      	ldr	r3, [pc, #372]	; (80094cc <faza+0x8e4>)
 8009358:	f7f6 ffb0 	bl	80002bc <__adddf3>
 800935c:	4602      	mov	r2, r0
 800935e:	460b      	mov	r3, r1
 8009360:	4610      	mov	r0, r2
 8009362:	4619      	mov	r1, r3
 8009364:	f04f 0200 	mov.w	r2, #0
 8009368:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800936c:	f7f7 fa86 	bl	800087c <__aeabi_ddiv>
 8009370:	4602      	mov	r2, r0
 8009372:	460b      	mov	r3, r1
 8009374:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78

   tzd = (jdp + (0.5 / 24) - 2451545) / 36525;
 8009378:	a345      	add	r3, pc, #276	; (adr r3, 8009490 <faza+0x8a8>)
 800937a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800937e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009382:	f7f6 ff9b 	bl	80002bc <__adddf3>
 8009386:	4602      	mov	r2, r0
 8009388:	460b      	mov	r3, r1
 800938a:	4610      	mov	r0, r2
 800938c:	4619      	mov	r1, r3
 800938e:	a342      	add	r3, pc, #264	; (adr r3, 8009498 <faza+0x8b0>)
 8009390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009394:	f7f6 ff90 	bl	80002b8 <__aeabi_dsub>
 8009398:	4602      	mov	r2, r0
 800939a:	460b      	mov	r3, r1
 800939c:	4610      	mov	r0, r2
 800939e:	4619      	mov	r1, r3
 80093a0:	a33f      	add	r3, pc, #252	; (adr r3, 80094a0 <faza+0x8b8>)
 80093a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a6:	f7f7 fa69 	bl	800087c <__aeabi_ddiv>
 80093aa:	4602      	mov	r2, r0
 80093ac:	460b      	mov	r3, r1
 80093ae:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
   elm = rang(297.8502042 + 445267.1115168 * tzd - (0.00163 * tzd * tzd) + tzd * tzd * tzd / 545868 - tzd * tzd * tzd * tzd / 113065000);
 80093b2:	a33d      	add	r3, pc, #244	; (adr r3, 80094a8 <faza+0x8c0>)
 80093b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80093bc:	f7f7 f934 	bl	8000628 <__aeabi_dmul>
 80093c0:	4602      	mov	r2, r0
 80093c2:	460b      	mov	r3, r1
 80093c4:	4610      	mov	r0, r2
 80093c6:	4619      	mov	r1, r3
 80093c8:	a339      	add	r3, pc, #228	; (adr r3, 80094b0 <faza+0x8c8>)
 80093ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ce:	f7f6 ff75 	bl	80002bc <__adddf3>
 80093d2:	4602      	mov	r2, r0
 80093d4:	460b      	mov	r3, r1
 80093d6:	4690      	mov	r8, r2
 80093d8:	4699      	mov	r9, r3
 80093da:	a337      	add	r3, pc, #220	; (adr r3, 80094b8 <faza+0x8d0>)
 80093dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80093e4:	f7f7 f920 	bl	8000628 <__aeabi_dmul>
 80093e8:	4602      	mov	r2, r0
 80093ea:	460b      	mov	r3, r1
 80093ec:	4610      	mov	r0, r2
 80093ee:	4619      	mov	r1, r3
 80093f0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80093f4:	f7f7 f918 	bl	8000628 <__aeabi_dmul>
 80093f8:	4602      	mov	r2, r0
 80093fa:	460b      	mov	r3, r1
 80093fc:	4640      	mov	r0, r8
 80093fe:	4649      	mov	r1, r9
 8009400:	f7f6 ff5a 	bl	80002b8 <__aeabi_dsub>
 8009404:	4602      	mov	r2, r0
 8009406:	460b      	mov	r3, r1
 8009408:	4690      	mov	r8, r2
 800940a:	4699      	mov	r9, r3
 800940c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009410:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009414:	f7f7 f908 	bl	8000628 <__aeabi_dmul>
 8009418:	4602      	mov	r2, r0
 800941a:	460b      	mov	r3, r1
 800941c:	4610      	mov	r0, r2
 800941e:	4619      	mov	r1, r3
 8009420:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009424:	f7f7 f900 	bl	8000628 <__aeabi_dmul>
 8009428:	4602      	mov	r2, r0
 800942a:	460b      	mov	r3, r1
 800942c:	4610      	mov	r0, r2
 800942e:	4619      	mov	r1, r3
 8009430:	a323      	add	r3, pc, #140	; (adr r3, 80094c0 <faza+0x8d8>)
 8009432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009436:	f7f7 fa21 	bl	800087c <__aeabi_ddiv>
 800943a:	4602      	mov	r2, r0
 800943c:	460b      	mov	r3, r1
 800943e:	4640      	mov	r0, r8
 8009440:	4649      	mov	r1, r9
 8009442:	f7f6 ff3b 	bl	80002bc <__adddf3>
 8009446:	4602      	mov	r2, r0
 8009448:	460b      	mov	r3, r1
 800944a:	4690      	mov	r8, r2
 800944c:	4699      	mov	r9, r3
 800944e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009452:	e059      	b.n	8009508 <faza+0x920>
 8009454:	f3af 8000 	nop.w
 8009458:	a2529d39 	.word	0xa2529d39
 800945c:	3f91df46 	.word	0x3f91df46
 8009460:	9db22d0e 	.word	0x9db22d0e
 8009464:	401927ef 	.word	0x401927ef
 8009468:	cccccccd 	.word	0xcccccccd
 800946c:	4000cccc 	.word	0x4000cccc
 8009470:	d2f1a9fc 	.word	0xd2f1a9fc
 8009474:	3ff4624d 	.word	0x3ff4624d
 8009478:	04189375 	.word	0x04189375
 800947c:	3fe50e56 	.word	0x3fe50e56
 8009480:	1cac0831 	.word	0x1cac0831
 8009484:	3fcb645a 	.word	0x3fcb645a
 8009488:	c28f5c29 	.word	0xc28f5c29
 800948c:	3fbc28f5 	.word	0x3fbc28f5
 8009490:	55555555 	.word	0x55555555
 8009494:	3f955555 	.word	0x3f955555
 8009498:	80000000 	.word	0x80000000
 800949c:	4142b42c 	.word	0x4142b42c
 80094a0:	00000000 	.word	0x00000000
 80094a4:	40e1d5a0 	.word	0x40e1d5a0
 80094a8:	723175c4 	.word	0x723175c4
 80094ac:	411b2d4c 	.word	0x411b2d4c
 80094b0:	6fb81ec0 	.word	0x6fb81ec0
 80094b4:	40729d9a 	.word	0x40729d9a
 80094b8:	2c5197a2 	.word	0x2c5197a2
 80094bc:	3f5ab4b7 	.word	0x3f5ab4b7
 80094c0:	00000000 	.word	0x00000000
 80094c4:	4120a898 	.word	0x4120a898
 80094c8:	40668000 	.word	0x40668000
 80094cc:	3ff00000 	.word	0x3ff00000
 80094d0:	f40d8376 	.word	0xf40d8376
 80094d4:	3f2421f5 	.word	0x3f2421f5
 80094d8:	00000000 	.word	0x00000000
 80094dc:	41775b01 	.word	0x41775b01
 80094e0:	787456ea 	.word	0x787456ea
 80094e4:	411d203b 	.word	0x411d203b
 80094e8:	4424f2ff 	.word	0x4424f2ff
 80094ec:	4060ded4 	.word	0x4060ded4
 80094f0:	e618ce2d 	.word	0xe618ce2d
 80094f4:	3f826d04 	.word	0x3f826d04
 80094f8:	00000000 	.word	0x00000000
 80094fc:	40f10430 	.word	0x40f10430
 8009500:	00000000 	.word	0x00000000
 8009504:	416c0f98 	.word	0x416c0f98
 8009508:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800950c:	f7f7 f88c 	bl	8000628 <__aeabi_dmul>
 8009510:	4602      	mov	r2, r0
 8009512:	460b      	mov	r3, r1
 8009514:	4610      	mov	r0, r2
 8009516:	4619      	mov	r1, r3
 8009518:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800951c:	f7f7 f884 	bl	8000628 <__aeabi_dmul>
 8009520:	4602      	mov	r2, r0
 8009522:	460b      	mov	r3, r1
 8009524:	4610      	mov	r0, r2
 8009526:	4619      	mov	r1, r3
 8009528:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800952c:	f7f7 f87c 	bl	8000628 <__aeabi_dmul>
 8009530:	4602      	mov	r2, r0
 8009532:	460b      	mov	r3, r1
 8009534:	4610      	mov	r0, r2
 8009536:	4619      	mov	r1, r3
 8009538:	f20f 43b8 	addw	r3, pc, #1208	; 0x4b8
 800953c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009540:	f7f7 f99c 	bl	800087c <__aeabi_ddiv>
 8009544:	4602      	mov	r2, r0
 8009546:	460b      	mov	r3, r1
 8009548:	4640      	mov	r0, r8
 800954a:	4649      	mov	r1, r9
 800954c:	f7f6 feb4 	bl	80002b8 <__aeabi_dsub>
 8009550:	4602      	mov	r2, r0
 8009552:	460b      	mov	r3, r1
 8009554:	ec43 2b17 	vmov	d7, r2, r3
 8009558:	eeb0 0a47 	vmov.f32	s0, s14
 800955c:	eef0 0a67 	vmov.f32	s1, s15
 8009560:	f7ff faf2 	bl	8008b48 <rang>
 8009564:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
   ams = rang(357.5291092 + 35999.0502909 * tzd - 0.0001536 * tzd * tzd + tzd * tzd * tzd / 24490000);
 8009568:	f20f 4390 	addw	r3, pc, #1168	; 0x490
 800956c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009570:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009574:	f7f7 f858 	bl	8000628 <__aeabi_dmul>
 8009578:	4602      	mov	r2, r0
 800957a:	460b      	mov	r3, r1
 800957c:	4610      	mov	r0, r2
 800957e:	4619      	mov	r1, r3
 8009580:	f20f 4380 	addw	r3, pc, #1152	; 0x480
 8009584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009588:	f7f6 fe98 	bl	80002bc <__adddf3>
 800958c:	4602      	mov	r2, r0
 800958e:	460b      	mov	r3, r1
 8009590:	4690      	mov	r8, r2
 8009592:	4699      	mov	r9, r3
 8009594:	f20f 4374 	addw	r3, pc, #1140	; 0x474
 8009598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800959c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80095a0:	f7f7 f842 	bl	8000628 <__aeabi_dmul>
 80095a4:	4602      	mov	r2, r0
 80095a6:	460b      	mov	r3, r1
 80095a8:	4610      	mov	r0, r2
 80095aa:	4619      	mov	r1, r3
 80095ac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80095b0:	f7f7 f83a 	bl	8000628 <__aeabi_dmul>
 80095b4:	4602      	mov	r2, r0
 80095b6:	460b      	mov	r3, r1
 80095b8:	4640      	mov	r0, r8
 80095ba:	4649      	mov	r1, r9
 80095bc:	f7f6 fe7c 	bl	80002b8 <__aeabi_dsub>
 80095c0:	4602      	mov	r2, r0
 80095c2:	460b      	mov	r3, r1
 80095c4:	4690      	mov	r8, r2
 80095c6:	4699      	mov	r9, r3
 80095c8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80095cc:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80095d0:	f7f7 f82a 	bl	8000628 <__aeabi_dmul>
 80095d4:	4602      	mov	r2, r0
 80095d6:	460b      	mov	r3, r1
 80095d8:	4610      	mov	r0, r2
 80095da:	4619      	mov	r1, r3
 80095dc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80095e0:	f7f7 f822 	bl	8000628 <__aeabi_dmul>
 80095e4:	4602      	mov	r2, r0
 80095e6:	460b      	mov	r3, r1
 80095e8:	4610      	mov	r0, r2
 80095ea:	4619      	mov	r1, r3
 80095ec:	f20f 4324 	addw	r3, pc, #1060	; 0x424
 80095f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f4:	f7f7 f942 	bl	800087c <__aeabi_ddiv>
 80095f8:	4602      	mov	r2, r0
 80095fa:	460b      	mov	r3, r1
 80095fc:	4640      	mov	r0, r8
 80095fe:	4649      	mov	r1, r9
 8009600:	f7f6 fe5c 	bl	80002bc <__adddf3>
 8009604:	4602      	mov	r2, r0
 8009606:	460b      	mov	r3, r1
 8009608:	ec43 2b17 	vmov	d7, r2, r3
 800960c:	eeb0 0a47 	vmov.f32	s0, s14
 8009610:	eef0 0a67 	vmov.f32	s1, s15
 8009614:	f7ff fa98 	bl	8008b48 <rang>
 8009618:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48
   aml = rang(134.9634114 + 477198.8676313 * tzd - 0.008997 * tzd * tzd + tzd * tzd * tzd / 69699 - tzd * tzd * tzd * tzd / 14712000);
 800961c:	a3ff      	add	r3, pc, #1020	; (adr r3, 8009a1c <faza+0xe34>)
 800961e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009622:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009626:	f7f6 ffff 	bl	8000628 <__aeabi_dmul>
 800962a:	4602      	mov	r2, r0
 800962c:	460b      	mov	r3, r1
 800962e:	4610      	mov	r0, r2
 8009630:	4619      	mov	r1, r3
 8009632:	a3fc      	add	r3, pc, #1008	; (adr r3, 8009a24 <faza+0xe3c>)
 8009634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009638:	f7f6 fe40 	bl	80002bc <__adddf3>
 800963c:	4602      	mov	r2, r0
 800963e:	460b      	mov	r3, r1
 8009640:	4690      	mov	r8, r2
 8009642:	4699      	mov	r9, r3
 8009644:	a3f9      	add	r3, pc, #996	; (adr r3, 8009a2c <faza+0xe44>)
 8009646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800964a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800964e:	f7f6 ffeb 	bl	8000628 <__aeabi_dmul>
 8009652:	4602      	mov	r2, r0
 8009654:	460b      	mov	r3, r1
 8009656:	4610      	mov	r0, r2
 8009658:	4619      	mov	r1, r3
 800965a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800965e:	f7f6 ffe3 	bl	8000628 <__aeabi_dmul>
 8009662:	4602      	mov	r2, r0
 8009664:	460b      	mov	r3, r1
 8009666:	4640      	mov	r0, r8
 8009668:	4649      	mov	r1, r9
 800966a:	f7f6 fe25 	bl	80002b8 <__aeabi_dsub>
 800966e:	4602      	mov	r2, r0
 8009670:	460b      	mov	r3, r1
 8009672:	4690      	mov	r8, r2
 8009674:	4699      	mov	r9, r3
 8009676:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800967a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800967e:	f7f6 ffd3 	bl	8000628 <__aeabi_dmul>
 8009682:	4602      	mov	r2, r0
 8009684:	460b      	mov	r3, r1
 8009686:	4610      	mov	r0, r2
 8009688:	4619      	mov	r1, r3
 800968a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800968e:	f7f6 ffcb 	bl	8000628 <__aeabi_dmul>
 8009692:	4602      	mov	r2, r0
 8009694:	460b      	mov	r3, r1
 8009696:	4610      	mov	r0, r2
 8009698:	4619      	mov	r1, r3
 800969a:	a3e6      	add	r3, pc, #920	; (adr r3, 8009a34 <faza+0xe4c>)
 800969c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a0:	f7f7 f8ec 	bl	800087c <__aeabi_ddiv>
 80096a4:	4602      	mov	r2, r0
 80096a6:	460b      	mov	r3, r1
 80096a8:	4640      	mov	r0, r8
 80096aa:	4649      	mov	r1, r9
 80096ac:	f7f6 fe06 	bl	80002bc <__adddf3>
 80096b0:	4602      	mov	r2, r0
 80096b2:	460b      	mov	r3, r1
 80096b4:	4690      	mov	r8, r2
 80096b6:	4699      	mov	r9, r3
 80096b8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80096bc:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80096c0:	f7f6 ffb2 	bl	8000628 <__aeabi_dmul>
 80096c4:	4602      	mov	r2, r0
 80096c6:	460b      	mov	r3, r1
 80096c8:	4610      	mov	r0, r2
 80096ca:	4619      	mov	r1, r3
 80096cc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80096d0:	f7f6 ffaa 	bl	8000628 <__aeabi_dmul>
 80096d4:	4602      	mov	r2, r0
 80096d6:	460b      	mov	r3, r1
 80096d8:	4610      	mov	r0, r2
 80096da:	4619      	mov	r1, r3
 80096dc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80096e0:	f7f6 ffa2 	bl	8000628 <__aeabi_dmul>
 80096e4:	4602      	mov	r2, r0
 80096e6:	460b      	mov	r3, r1
 80096e8:	4610      	mov	r0, r2
 80096ea:	4619      	mov	r1, r3
 80096ec:	a3d3      	add	r3, pc, #844	; (adr r3, 8009a3c <faza+0xe54>)
 80096ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f2:	f7f7 f8c3 	bl	800087c <__aeabi_ddiv>
 80096f6:	4602      	mov	r2, r0
 80096f8:	460b      	mov	r3, r1
 80096fa:	4640      	mov	r0, r8
 80096fc:	4649      	mov	r1, r9
 80096fe:	f7f6 fddb 	bl	80002b8 <__aeabi_dsub>
 8009702:	4602      	mov	r2, r0
 8009704:	460b      	mov	r3, r1
 8009706:	ec43 2b17 	vmov	d7, r2, r3
 800970a:	eeb0 0a47 	vmov.f32	s0, s14
 800970e:	eef0 0a67 	vmov.f32	s1, s15
 8009712:	f7ff fa19 	bl	8008b48 <rang>
 8009716:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
   asd = 180 - elm - (6.289 * sin((M_PI / 180) * ((aml)))) + (2.1 * sin((M_PI / 180) * ((ams)))) - (1.274 * sin((M_PI / 180) * (((2 * elm) - aml))))
 800971a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800971e:	f04f 0000 	mov.w	r0, #0
 8009722:	49b1      	ldr	r1, [pc, #708]	; (80099e8 <faza+0xe00>)
 8009724:	f7f6 fdc8 	bl	80002b8 <__aeabi_dsub>
 8009728:	4602      	mov	r2, r0
 800972a:	460b      	mov	r3, r1
 800972c:	4690      	mov	r8, r2
 800972e:	4699      	mov	r9, r3
 8009730:	a39f      	add	r3, pc, #636	; (adr r3, 80099b0 <faza+0xdc8>)
 8009732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009736:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800973a:	f7f6 ff75 	bl	8000628 <__aeabi_dmul>
 800973e:	4602      	mov	r2, r0
 8009740:	460b      	mov	r3, r1
 8009742:	ec43 2b17 	vmov	d7, r2, r3
 8009746:	eeb0 0a47 	vmov.f32	s0, s14
 800974a:	eef0 0a67 	vmov.f32	s1, s15
 800974e:	f013 fdeb 	bl	801d328 <sin>
 8009752:	ec51 0b10 	vmov	r0, r1, d0
 8009756:	a398      	add	r3, pc, #608	; (adr r3, 80099b8 <faza+0xdd0>)
 8009758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800975c:	f7f6 ff64 	bl	8000628 <__aeabi_dmul>
 8009760:	4602      	mov	r2, r0
 8009762:	460b      	mov	r3, r1
 8009764:	4640      	mov	r0, r8
 8009766:	4649      	mov	r1, r9
 8009768:	f7f6 fda6 	bl	80002b8 <__aeabi_dsub>
 800976c:	4602      	mov	r2, r0
 800976e:	460b      	mov	r3, r1
 8009770:	4690      	mov	r8, r2
 8009772:	4699      	mov	r9, r3
 8009774:	a38e      	add	r3, pc, #568	; (adr r3, 80099b0 <faza+0xdc8>)
 8009776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800977a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800977e:	f7f6 ff53 	bl	8000628 <__aeabi_dmul>
 8009782:	4602      	mov	r2, r0
 8009784:	460b      	mov	r3, r1
 8009786:	ec43 2b17 	vmov	d7, r2, r3
 800978a:	eeb0 0a47 	vmov.f32	s0, s14
 800978e:	eef0 0a67 	vmov.f32	s1, s15
 8009792:	f013 fdc9 	bl	801d328 <sin>
 8009796:	ec51 0b10 	vmov	r0, r1, d0
 800979a:	a389      	add	r3, pc, #548	; (adr r3, 80099c0 <faza+0xdd8>)
 800979c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a0:	f7f6 ff42 	bl	8000628 <__aeabi_dmul>
 80097a4:	4602      	mov	r2, r0
 80097a6:	460b      	mov	r3, r1
 80097a8:	4640      	mov	r0, r8
 80097aa:	4649      	mov	r1, r9
 80097ac:	f7f6 fd86 	bl	80002bc <__adddf3>
 80097b0:	4602      	mov	r2, r0
 80097b2:	460b      	mov	r3, r1
 80097b4:	4690      	mov	r8, r2
 80097b6:	4699      	mov	r9, r3
 80097b8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80097bc:	4602      	mov	r2, r0
 80097be:	460b      	mov	r3, r1
 80097c0:	f7f6 fd7c 	bl	80002bc <__adddf3>
 80097c4:	4602      	mov	r2, r0
 80097c6:	460b      	mov	r3, r1
 80097c8:	4610      	mov	r0, r2
 80097ca:	4619      	mov	r1, r3
 80097cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80097d0:	f7f6 fd72 	bl	80002b8 <__aeabi_dsub>
 80097d4:	4602      	mov	r2, r0
 80097d6:	460b      	mov	r3, r1
 80097d8:	4610      	mov	r0, r2
 80097da:	4619      	mov	r1, r3
 80097dc:	a374      	add	r3, pc, #464	; (adr r3, 80099b0 <faza+0xdc8>)
 80097de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e2:	f7f6 ff21 	bl	8000628 <__aeabi_dmul>
 80097e6:	4602      	mov	r2, r0
 80097e8:	460b      	mov	r3, r1
 80097ea:	ec43 2b17 	vmov	d7, r2, r3
 80097ee:	eeb0 0a47 	vmov.f32	s0, s14
 80097f2:	eef0 0a67 	vmov.f32	s1, s15
 80097f6:	f013 fd97 	bl	801d328 <sin>
 80097fa:	ec51 0b10 	vmov	r0, r1, d0
 80097fe:	a372      	add	r3, pc, #456	; (adr r3, 80099c8 <faza+0xde0>)
 8009800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009804:	f7f6 ff10 	bl	8000628 <__aeabi_dmul>
 8009808:	4602      	mov	r2, r0
 800980a:	460b      	mov	r3, r1
 800980c:	4640      	mov	r0, r8
 800980e:	4649      	mov	r1, r9
 8009810:	f7f6 fd52 	bl	80002b8 <__aeabi_dsub>
 8009814:	4602      	mov	r2, r0
 8009816:	460b      	mov	r3, r1
 8009818:	4690      	mov	r8, r2
 800981a:	4699      	mov	r9, r3
         - (0.658 * sin((M_PI / 180) * ((2 * elm)))) - (0.214 * sin((M_PI / 180) * ((2 * aml)))) - (0.11 * sin((M_PI / 180) * ((elm))));
 800981c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009820:	4602      	mov	r2, r0
 8009822:	460b      	mov	r3, r1
 8009824:	f7f6 fd4a 	bl	80002bc <__adddf3>
 8009828:	4602      	mov	r2, r0
 800982a:	460b      	mov	r3, r1
 800982c:	4610      	mov	r0, r2
 800982e:	4619      	mov	r1, r3
 8009830:	a35f      	add	r3, pc, #380	; (adr r3, 80099b0 <faza+0xdc8>)
 8009832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009836:	f7f6 fef7 	bl	8000628 <__aeabi_dmul>
 800983a:	4602      	mov	r2, r0
 800983c:	460b      	mov	r3, r1
 800983e:	ec43 2b17 	vmov	d7, r2, r3
 8009842:	eeb0 0a47 	vmov.f32	s0, s14
 8009846:	eef0 0a67 	vmov.f32	s1, s15
 800984a:	f013 fd6d 	bl	801d328 <sin>
 800984e:	ec51 0b10 	vmov	r0, r1, d0
 8009852:	a35f      	add	r3, pc, #380	; (adr r3, 80099d0 <faza+0xde8>)
 8009854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009858:	f7f6 fee6 	bl	8000628 <__aeabi_dmul>
 800985c:	4602      	mov	r2, r0
 800985e:	460b      	mov	r3, r1
 8009860:	4640      	mov	r0, r8
 8009862:	4649      	mov	r1, r9
 8009864:	f7f6 fd28 	bl	80002b8 <__aeabi_dsub>
 8009868:	4602      	mov	r2, r0
 800986a:	460b      	mov	r3, r1
 800986c:	4690      	mov	r8, r2
 800986e:	4699      	mov	r9, r3
 8009870:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009874:	4602      	mov	r2, r0
 8009876:	460b      	mov	r3, r1
 8009878:	f7f6 fd20 	bl	80002bc <__adddf3>
 800987c:	4602      	mov	r2, r0
 800987e:	460b      	mov	r3, r1
 8009880:	4610      	mov	r0, r2
 8009882:	4619      	mov	r1, r3
 8009884:	a34a      	add	r3, pc, #296	; (adr r3, 80099b0 <faza+0xdc8>)
 8009886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800988a:	f7f6 fecd 	bl	8000628 <__aeabi_dmul>
 800988e:	4602      	mov	r2, r0
 8009890:	460b      	mov	r3, r1
 8009892:	ec43 2b17 	vmov	d7, r2, r3
 8009896:	eeb0 0a47 	vmov.f32	s0, s14
 800989a:	eef0 0a67 	vmov.f32	s1, s15
 800989e:	f013 fd43 	bl	801d328 <sin>
 80098a2:	ec51 0b10 	vmov	r0, r1, d0
 80098a6:	a34c      	add	r3, pc, #304	; (adr r3, 80099d8 <faza+0xdf0>)
 80098a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ac:	f7f6 febc 	bl	8000628 <__aeabi_dmul>
 80098b0:	4602      	mov	r2, r0
 80098b2:	460b      	mov	r3, r1
 80098b4:	4640      	mov	r0, r8
 80098b6:	4649      	mov	r1, r9
 80098b8:	f7f6 fcfe 	bl	80002b8 <__aeabi_dsub>
 80098bc:	4602      	mov	r2, r0
 80098be:	460b      	mov	r3, r1
 80098c0:	4690      	mov	r8, r2
 80098c2:	4699      	mov	r9, r3
 80098c4:	a33a      	add	r3, pc, #232	; (adr r3, 80099b0 <faza+0xdc8>)
 80098c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ca:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80098ce:	f7f6 feab 	bl	8000628 <__aeabi_dmul>
 80098d2:	4602      	mov	r2, r0
 80098d4:	460b      	mov	r3, r1
 80098d6:	ec43 2b17 	vmov	d7, r2, r3
 80098da:	eeb0 0a47 	vmov.f32	s0, s14
 80098de:	eef0 0a67 	vmov.f32	s1, s15
 80098e2:	f013 fd21 	bl	801d328 <sin>
 80098e6:	ec51 0b10 	vmov	r0, r1, d0
 80098ea:	a33d      	add	r3, pc, #244	; (adr r3, 80099e0 <faza+0xdf8>)
 80098ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f0:	f7f6 fe9a 	bl	8000628 <__aeabi_dmul>
 80098f4:	4602      	mov	r2, r0
 80098f6:	460b      	mov	r3, r1
   asd = 180 - elm - (6.289 * sin((M_PI / 180) * ((aml)))) + (2.1 * sin((M_PI / 180) * ((ams)))) - (1.274 * sin((M_PI / 180) * (((2 * elm) - aml))))
 80098f8:	4640      	mov	r0, r8
 80098fa:	4649      	mov	r1, r9
 80098fc:	f7f6 fcdc 	bl	80002b8 <__aeabi_dsub>
 8009900:	4602      	mov	r2, r0
 8009902:	460b      	mov	r3, r1
 8009904:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
   phi2 = (1 + cos((M_PI / 180) * (asd))) / 2;
 8009908:	a329      	add	r3, pc, #164	; (adr r3, 80099b0 <faza+0xdc8>)
 800990a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800990e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009912:	f7f6 fe89 	bl	8000628 <__aeabi_dmul>
 8009916:	4602      	mov	r2, r0
 8009918:	460b      	mov	r3, r1
 800991a:	ec43 2b17 	vmov	d7, r2, r3
 800991e:	eeb0 0a47 	vmov.f32	s0, s14
 8009922:	eef0 0a67 	vmov.f32	s1, s15
 8009926:	f013 fcab 	bl	801d280 <cos>
 800992a:	ec51 0b10 	vmov	r0, r1, d0
 800992e:	f04f 0200 	mov.w	r2, #0
 8009932:	4b2e      	ldr	r3, [pc, #184]	; (80099ec <faza+0xe04>)
 8009934:	f7f6 fcc2 	bl	80002bc <__adddf3>
 8009938:	4602      	mov	r2, r0
 800993a:	460b      	mov	r3, r1
 800993c:	4610      	mov	r0, r2
 800993e:	4619      	mov	r1, r3
 8009940:	f04f 0200 	mov.w	r2, #0
 8009944:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009948:	f7f6 ff98 	bl	800087c <__aeabi_ddiv>
 800994c:	4602      	mov	r2, r0
 800994e:	460b      	mov	r3, r1
 8009950:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

   if((phi2 - phi1) < 0)
 8009954:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8009958:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800995c:	f7f6 fcac 	bl	80002b8 <__aeabi_dsub>
 8009960:	4602      	mov	r2, r0
 8009962:	460b      	mov	r3, r1
 8009964:	4610      	mov	r0, r2
 8009966:	4619      	mov	r1, r3
 8009968:	f04f 0200 	mov.w	r2, #0
 800996c:	f04f 0300 	mov.w	r3, #0
 8009970:	f7f7 f8cc 	bl	8000b0c <__aeabi_dcmplt>
 8009974:	4603      	mov	r3, r0
 8009976:	2b00      	cmp	r3, #0
 8009978:	d005      	beq.n	8009986 <faza+0xd9e>
   {
      phi1 = -1 * phi1;
 800997a:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 800997c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800997e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8009982:	e9c7 451e 	strd	r4, r5, [r7, #120]	; 0x78
   }
   return (100 * phi1);
 8009986:	f04f 0200 	mov.w	r2, #0
 800998a:	4b19      	ldr	r3, [pc, #100]	; (80099f0 <faza+0xe08>)
 800998c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8009990:	f7f6 fe4a 	bl	8000628 <__aeabi_dmul>
 8009994:	4602      	mov	r2, r0
 8009996:	460b      	mov	r3, r1
 8009998:	ec43 2b17 	vmov	d7, r2, r3
}
 800999c:	eeb0 0a47 	vmov.f32	s0, s14
 80099a0:	eef0 0a67 	vmov.f32	s1, s15
 80099a4:	3784      	adds	r7, #132	; 0x84
 80099a6:	46bd      	mov	sp, r7
 80099a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099ac:	f3af 8000 	nop.w
 80099b0:	a2529d39 	.word	0xa2529d39
 80099b4:	3f91df46 	.word	0x3f91df46
 80099b8:	9db22d0e 	.word	0x9db22d0e
 80099bc:	401927ef 	.word	0x401927ef
 80099c0:	cccccccd 	.word	0xcccccccd
 80099c4:	4000cccc 	.word	0x4000cccc
 80099c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80099cc:	3ff4624d 	.word	0x3ff4624d
 80099d0:	04189375 	.word	0x04189375
 80099d4:	3fe50e56 	.word	0x3fe50e56
 80099d8:	1cac0831 	.word	0x1cac0831
 80099dc:	3fcb645a 	.word	0x3fcb645a
 80099e0:	c28f5c29 	.word	0xc28f5c29
 80099e4:	3fbc28f5 	.word	0x3fbc28f5
 80099e8:	40668000 	.word	0x40668000
 80099ec:	3ff00000 	.word	0x3ff00000
 80099f0:	40590000 	.word	0x40590000
 80099f4:	a0000000 	.word	0xa0000000
 80099f8:	419af4f0 	.word	0x419af4f0
 80099fc:	9bfba959 	.word	0x9bfba959
 8009a00:	40e193e1 	.word	0x40e193e1
 8009a04:	3b356034 	.word	0x3b356034
 8009a08:	40765877 	.word	0x40765877
 8009a0c:	f40d8376 	.word	0xf40d8376
 8009a10:	3f2421f5 	.word	0x3f2421f5
 8009a14:	00000000 	.word	0x00000000
 8009a18:	41775b01 	.word	0x41775b01
 8009a1c:	787456ea 	.word	0x787456ea
 8009a20:	411d203b 	.word	0x411d203b
 8009a24:	4424f2ff 	.word	0x4424f2ff
 8009a28:	4060ded4 	.word	0x4060ded4
 8009a2c:	e618ce2d 	.word	0xe618ce2d
 8009a30:	3f826d04 	.word	0x3f826d04
 8009a34:	00000000 	.word	0x00000000
 8009a38:	40f10430 	.word	0x40f10430
 8009a3c:	00000000 	.word	0x00000000
 8009a40:	416c0f98 	.word	0x416c0f98

08009a44 <modd>:
double modd(double x, double y)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b086      	sub	sp, #24
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	ed87 0b02 	vstr	d0, [r7, #8]
 8009a4e:	ed87 1b00 	vstr	d1, [r7]
   double il;

   il = (int32_t)(x / y);
 8009a52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009a5a:	f7f6 ff0f 	bl	800087c <__aeabi_ddiv>
 8009a5e:	4602      	mov	r2, r0
 8009a60:	460b      	mov	r3, r1
 8009a62:	4610      	mov	r0, r2
 8009a64:	4619      	mov	r1, r3
 8009a66:	f7f7 f88f 	bl	8000b88 <__aeabi_d2iz>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f7f6 fd71 	bl	8000554 <__aeabi_i2d>
 8009a72:	4602      	mov	r2, r0
 8009a74:	460b      	mov	r3, r1
 8009a76:	e9c7 2304 	strd	r2, r3, [r7, #16]
   return (x - (il * y));
 8009a7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a7e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009a82:	f7f6 fdd1 	bl	8000628 <__aeabi_dmul>
 8009a86:	4602      	mov	r2, r0
 8009a88:	460b      	mov	r3, r1
 8009a8a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009a8e:	f7f6 fc13 	bl	80002b8 <__aeabi_dsub>
 8009a92:	4602      	mov	r2, r0
 8009a94:	460b      	mov	r3, r1
 8009a96:	ec43 2b17 	vmov	d7, r2, r3
}
 8009a9a:	eeb0 0a47 	vmov.f32	s0, s14
 8009a9e:	eef0 0a67 	vmov.f32	s1, s15
 8009aa2:	3718      	adds	r7, #24
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <Wschod>:
void Wschod(double R, double M, double D, double *Wsch, double *Tran, double *Zach)
{
 8009aa8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009aac:	b0a2      	sub	sp, #136	; 0x88
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	ed87 0b08 	vstr	d0, [r7, #32]
 8009ab4:	ed87 1b06 	vstr	d1, [r7, #24]
 8009ab8:	ed87 2b04 	vstr	d2, [r7, #16]
 8009abc:	60f8      	str	r0, [r7, #12]
 8009abe:	60b9      	str	r1, [r7, #8]
 8009ac0:	607a      	str	r2, [r7, #4]
   double J, Cent, L, G, O, F, E, A, C, U, UD, P, Lat, Long, Req;
   Lat  = 52.291452;
 8009ac2:	a3f1      	add	r3, pc, #964	; (adr r3, 8009e88 <Wschod+0x3e0>)
 8009ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac8:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
   Long = 17.363596;
 8009acc:	a3f0      	add	r3, pc, #960	; (adr r3, 8009e90 <Wschod+0x3e8>)
 8009ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad2:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
   Req  = -0.833;
 8009ad6:	a3f0      	add	r3, pc, #960	; (adr r3, 8009e98 <Wschod+0x3f0>)
 8009ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009adc:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
   J    = 367 * R - (int32_t)(7 * (R + (int32_t)((M + 9) / 12)) / 4) + (int32_t)(275 * M / 9) + D - 730531.5;
 8009ae0:	a3ef      	add	r3, pc, #956	; (adr r3, 8009ea0 <Wschod+0x3f8>)
 8009ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009aea:	f7f6 fd9d 	bl	8000628 <__aeabi_dmul>
 8009aee:	4602      	mov	r2, r0
 8009af0:	460b      	mov	r3, r1
 8009af2:	4614      	mov	r4, r2
 8009af4:	461d      	mov	r5, r3
 8009af6:	f04f 0200 	mov.w	r2, #0
 8009afa:	4bdf      	ldr	r3, [pc, #892]	; (8009e78 <Wschod+0x3d0>)
 8009afc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009b00:	f7f6 fbdc 	bl	80002bc <__adddf3>
 8009b04:	4602      	mov	r2, r0
 8009b06:	460b      	mov	r3, r1
 8009b08:	4610      	mov	r0, r2
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	f04f 0200 	mov.w	r2, #0
 8009b10:	4bda      	ldr	r3, [pc, #872]	; (8009e7c <Wschod+0x3d4>)
 8009b12:	f7f6 feb3 	bl	800087c <__aeabi_ddiv>
 8009b16:	4602      	mov	r2, r0
 8009b18:	460b      	mov	r3, r1
 8009b1a:	4610      	mov	r0, r2
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	f7f7 f833 	bl	8000b88 <__aeabi_d2iz>
 8009b22:	4603      	mov	r3, r0
 8009b24:	4618      	mov	r0, r3
 8009b26:	f7f6 fd15 	bl	8000554 <__aeabi_i2d>
 8009b2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009b2e:	f7f6 fbc5 	bl	80002bc <__adddf3>
 8009b32:	4602      	mov	r2, r0
 8009b34:	460b      	mov	r3, r1
 8009b36:	4610      	mov	r0, r2
 8009b38:	4619      	mov	r1, r3
 8009b3a:	f04f 0200 	mov.w	r2, #0
 8009b3e:	4bd0      	ldr	r3, [pc, #832]	; (8009e80 <Wschod+0x3d8>)
 8009b40:	f7f6 fd72 	bl	8000628 <__aeabi_dmul>
 8009b44:	4602      	mov	r2, r0
 8009b46:	460b      	mov	r3, r1
 8009b48:	4610      	mov	r0, r2
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	f04f 0200 	mov.w	r2, #0
 8009b50:	4bcc      	ldr	r3, [pc, #816]	; (8009e84 <Wschod+0x3dc>)
 8009b52:	f7f6 fe93 	bl	800087c <__aeabi_ddiv>
 8009b56:	4602      	mov	r2, r0
 8009b58:	460b      	mov	r3, r1
 8009b5a:	4610      	mov	r0, r2
 8009b5c:	4619      	mov	r1, r3
 8009b5e:	f7f7 f813 	bl	8000b88 <__aeabi_d2iz>
 8009b62:	4603      	mov	r3, r0
 8009b64:	4618      	mov	r0, r3
 8009b66:	f7f6 fcf5 	bl	8000554 <__aeabi_i2d>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	460b      	mov	r3, r1
 8009b6e:	4620      	mov	r0, r4
 8009b70:	4629      	mov	r1, r5
 8009b72:	f7f6 fba1 	bl	80002b8 <__aeabi_dsub>
 8009b76:	4602      	mov	r2, r0
 8009b78:	460b      	mov	r3, r1
 8009b7a:	4614      	mov	r4, r2
 8009b7c:	461d      	mov	r5, r3
 8009b7e:	a3a0      	add	r3, pc, #640	; (adr r3, 8009e00 <Wschod+0x358>)
 8009b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b84:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009b88:	f7f6 fd4e 	bl	8000628 <__aeabi_dmul>
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	460b      	mov	r3, r1
 8009b90:	4610      	mov	r0, r2
 8009b92:	4619      	mov	r1, r3
 8009b94:	f04f 0200 	mov.w	r2, #0
 8009b98:	4bb7      	ldr	r3, [pc, #732]	; (8009e78 <Wschod+0x3d0>)
 8009b9a:	f7f6 fe6f 	bl	800087c <__aeabi_ddiv>
 8009b9e:	4602      	mov	r2, r0
 8009ba0:	460b      	mov	r3, r1
 8009ba2:	4610      	mov	r0, r2
 8009ba4:	4619      	mov	r1, r3
 8009ba6:	f7f6 ffef 	bl	8000b88 <__aeabi_d2iz>
 8009baa:	4603      	mov	r3, r0
 8009bac:	4618      	mov	r0, r3
 8009bae:	f7f6 fcd1 	bl	8000554 <__aeabi_i2d>
 8009bb2:	4602      	mov	r2, r0
 8009bb4:	460b      	mov	r3, r1
 8009bb6:	4620      	mov	r0, r4
 8009bb8:	4629      	mov	r1, r5
 8009bba:	f7f6 fb7f 	bl	80002bc <__adddf3>
 8009bbe:	4602      	mov	r2, r0
 8009bc0:	460b      	mov	r3, r1
 8009bc2:	4610      	mov	r0, r2
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009bca:	f7f6 fb77 	bl	80002bc <__adddf3>
 8009bce:	4602      	mov	r2, r0
 8009bd0:	460b      	mov	r3, r1
 8009bd2:	4610      	mov	r0, r2
 8009bd4:	4619      	mov	r1, r3
 8009bd6:	a38c      	add	r3, pc, #560	; (adr r3, 8009e08 <Wschod+0x360>)
 8009bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bdc:	f7f6 fb6c 	bl	80002b8 <__aeabi_dsub>
 8009be0:	4602      	mov	r2, r0
 8009be2:	460b      	mov	r3, r1
 8009be4:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
   Cent = J / 36525;
 8009be8:	a389      	add	r3, pc, #548	; (adr r3, 8009e10 <Wschod+0x368>)
 8009bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009bf2:	f7f6 fe43 	bl	800087c <__aeabi_ddiv>
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	460b      	mov	r3, r1
 8009bfa:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
   L    = modd((4.8949504201433 + 628.331969753199 * Cent), 6.28318530718);
 8009bfe:	a386      	add	r3, pc, #536	; (adr r3, 8009e18 <Wschod+0x370>)
 8009c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c04:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009c08:	f7f6 fd0e 	bl	8000628 <__aeabi_dmul>
 8009c0c:	4602      	mov	r2, r0
 8009c0e:	460b      	mov	r3, r1
 8009c10:	4610      	mov	r0, r2
 8009c12:	4619      	mov	r1, r3
 8009c14:	a382      	add	r3, pc, #520	; (adr r3, 8009e20 <Wschod+0x378>)
 8009c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c1a:	f7f6 fb4f 	bl	80002bc <__adddf3>
 8009c1e:	4602      	mov	r2, r0
 8009c20:	460b      	mov	r3, r1
 8009c22:	ec43 2b17 	vmov	d7, r2, r3
 8009c26:	ed9f 1b80 	vldr	d1, [pc, #512]	; 8009e28 <Wschod+0x380>
 8009c2a:	eeb0 0a47 	vmov.f32	s0, s14
 8009c2e:	eef0 0a67 	vmov.f32	s1, s15
 8009c32:	f7ff ff07 	bl	8009a44 <modd>
 8009c36:	ed87 0b16 	vstr	d0, [r7, #88]	; 0x58
   G    = modd((6.2400408 + 628.3019501 * Cent), 6.28318530718);
 8009c3a:	a37d      	add	r3, pc, #500	; (adr r3, 8009e30 <Wschod+0x388>)
 8009c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c40:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009c44:	f7f6 fcf0 	bl	8000628 <__aeabi_dmul>
 8009c48:	4602      	mov	r2, r0
 8009c4a:	460b      	mov	r3, r1
 8009c4c:	4610      	mov	r0, r2
 8009c4e:	4619      	mov	r1, r3
 8009c50:	a379      	add	r3, pc, #484	; (adr r3, 8009e38 <Wschod+0x390>)
 8009c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c56:	f7f6 fb31 	bl	80002bc <__adddf3>
 8009c5a:	4602      	mov	r2, r0
 8009c5c:	460b      	mov	r3, r1
 8009c5e:	ec43 2b17 	vmov	d7, r2, r3
 8009c62:	ed9f 1b71 	vldr	d1, [pc, #452]	; 8009e28 <Wschod+0x380>
 8009c66:	eeb0 0a47 	vmov.f32	s0, s14
 8009c6a:	eef0 0a67 	vmov.f32	s1, s15
 8009c6e:	f7ff fee9 	bl	8009a44 <modd>
 8009c72:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
   O    = 0.409093 - 0.0002269 * Cent;
 8009c76:	a372      	add	r3, pc, #456	; (adr r3, 8009e40 <Wschod+0x398>)
 8009c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c7c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009c80:	f7f6 fcd2 	bl	8000628 <__aeabi_dmul>
 8009c84:	4602      	mov	r2, r0
 8009c86:	460b      	mov	r3, r1
 8009c88:	a16f      	add	r1, pc, #444	; (adr r1, 8009e48 <Wschod+0x3a0>)
 8009c8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c8e:	f7f6 fb13 	bl	80002b8 <__aeabi_dsub>
 8009c92:	4602      	mov	r2, r0
 8009c94:	460b      	mov	r3, r1
 8009c96:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
   F    = 0.033423 * sin(G) + 0.00034907 * sin(2 * G);
 8009c9a:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 8009c9e:	f013 fb43 	bl	801d328 <sin>
 8009ca2:	ec51 0b10 	vmov	r0, r1, d0
 8009ca6:	a36a      	add	r3, pc, #424	; (adr r3, 8009e50 <Wschod+0x3a8>)
 8009ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cac:	f7f6 fcbc 	bl	8000628 <__aeabi_dmul>
 8009cb0:	4602      	mov	r2, r0
 8009cb2:	460b      	mov	r3, r1
 8009cb4:	4614      	mov	r4, r2
 8009cb6:	461d      	mov	r5, r3
 8009cb8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009cbc:	4602      	mov	r2, r0
 8009cbe:	460b      	mov	r3, r1
 8009cc0:	f7f6 fafc 	bl	80002bc <__adddf3>
 8009cc4:	4602      	mov	r2, r0
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	ec43 2b17 	vmov	d7, r2, r3
 8009ccc:	eeb0 0a47 	vmov.f32	s0, s14
 8009cd0:	eef0 0a67 	vmov.f32	s1, s15
 8009cd4:	f013 fb28 	bl	801d328 <sin>
 8009cd8:	ec51 0b10 	vmov	r0, r1, d0
 8009cdc:	a35e      	add	r3, pc, #376	; (adr r3, 8009e58 <Wschod+0x3b0>)
 8009cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce2:	f7f6 fca1 	bl	8000628 <__aeabi_dmul>
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	460b      	mov	r3, r1
 8009cea:	4620      	mov	r0, r4
 8009cec:	4629      	mov	r1, r5
 8009cee:	f7f6 fae5 	bl	80002bc <__adddf3>
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
   E    = 0.0430398 * sin(2 * (L + F)) - 0.00092502 * sin(4 * (L + F)) - F;
 8009cfa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009cfe:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009d02:	f7f6 fadb 	bl	80002bc <__adddf3>
 8009d06:	4602      	mov	r2, r0
 8009d08:	460b      	mov	r3, r1
 8009d0a:	4610      	mov	r0, r2
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	4602      	mov	r2, r0
 8009d10:	460b      	mov	r3, r1
 8009d12:	f7f6 fad3 	bl	80002bc <__adddf3>
 8009d16:	4602      	mov	r2, r0
 8009d18:	460b      	mov	r3, r1
 8009d1a:	ec43 2b17 	vmov	d7, r2, r3
 8009d1e:	eeb0 0a47 	vmov.f32	s0, s14
 8009d22:	eef0 0a67 	vmov.f32	s1, s15
 8009d26:	f013 faff 	bl	801d328 <sin>
 8009d2a:	ec51 0b10 	vmov	r0, r1, d0
 8009d2e:	a34c      	add	r3, pc, #304	; (adr r3, 8009e60 <Wschod+0x3b8>)
 8009d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d34:	f7f6 fc78 	bl	8000628 <__aeabi_dmul>
 8009d38:	4602      	mov	r2, r0
 8009d3a:	460b      	mov	r3, r1
 8009d3c:	4614      	mov	r4, r2
 8009d3e:	461d      	mov	r5, r3
 8009d40:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009d44:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009d48:	f7f6 fab8 	bl	80002bc <__adddf3>
 8009d4c:	4602      	mov	r2, r0
 8009d4e:	460b      	mov	r3, r1
 8009d50:	4610      	mov	r0, r2
 8009d52:	4619      	mov	r1, r3
 8009d54:	f04f 0200 	mov.w	r2, #0
 8009d58:	4b4a      	ldr	r3, [pc, #296]	; (8009e84 <Wschod+0x3dc>)
 8009d5a:	f7f6 fc65 	bl	8000628 <__aeabi_dmul>
 8009d5e:	4602      	mov	r2, r0
 8009d60:	460b      	mov	r3, r1
 8009d62:	ec43 2b17 	vmov	d7, r2, r3
 8009d66:	eeb0 0a47 	vmov.f32	s0, s14
 8009d6a:	eef0 0a67 	vmov.f32	s1, s15
 8009d6e:	f013 fadb 	bl	801d328 <sin>
 8009d72:	ec51 0b10 	vmov	r0, r1, d0
 8009d76:	a33c      	add	r3, pc, #240	; (adr r3, 8009e68 <Wschod+0x3c0>)
 8009d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d7c:	f7f6 fc54 	bl	8000628 <__aeabi_dmul>
 8009d80:	4602      	mov	r2, r0
 8009d82:	460b      	mov	r3, r1
 8009d84:	4620      	mov	r0, r4
 8009d86:	4629      	mov	r1, r5
 8009d88:	f7f6 fa96 	bl	80002b8 <__aeabi_dsub>
 8009d8c:	4602      	mov	r2, r0
 8009d8e:	460b      	mov	r3, r1
 8009d90:	4610      	mov	r0, r2
 8009d92:	4619      	mov	r1, r3
 8009d94:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009d98:	f7f6 fa8e 	bl	80002b8 <__aeabi_dsub>
 8009d9c:	4602      	mov	r2, r0
 8009d9e:	460b      	mov	r3, r1
 8009da0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
   A    = asin(sin(O) * sin(L + F));
 8009da4:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8009da8:	f013 fabe 	bl	801d328 <sin>
 8009dac:	ec55 4b10 	vmov	r4, r5, d0
 8009db0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009db4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009db8:	f7f6 fa80 	bl	80002bc <__adddf3>
 8009dbc:	4602      	mov	r2, r0
 8009dbe:	460b      	mov	r3, r1
 8009dc0:	ec43 2b17 	vmov	d7, r2, r3
 8009dc4:	eeb0 0a47 	vmov.f32	s0, s14
 8009dc8:	eef0 0a67 	vmov.f32	s1, s15
 8009dcc:	f013 faac 	bl	801d328 <sin>
 8009dd0:	ec53 2b10 	vmov	r2, r3, d0
 8009dd4:	4620      	mov	r0, r4
 8009dd6:	4629      	mov	r1, r5
 8009dd8:	f7f6 fc26 	bl	8000628 <__aeabi_dmul>
 8009ddc:	4602      	mov	r2, r0
 8009dde:	460b      	mov	r3, r1
 8009de0:	ec43 2b17 	vmov	d7, r2, r3
 8009de4:	eeb0 0a47 	vmov.f32	s0, s14
 8009de8:	eef0 0a67 	vmov.f32	s1, s15
 8009dec:	f013 fb28 	bl	801d440 <asin>
 8009df0:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
   C    = (sin(0.017453293 * Req) - sin(0.017453293 * Lat) * sin(A)) / (cos(0.017453293 * Lat) * cos(A));
 8009df4:	a31e      	add	r3, pc, #120	; (adr r3, 8009e70 <Wschod+0x3c8>)
 8009df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dfa:	e055      	b.n	8009ea8 <Wschod+0x400>
 8009dfc:	f3af 8000 	nop.w
 8009e00:	00000000 	.word	0x00000000
 8009e04:	40713000 	.word	0x40713000
 8009e08:	00000000 	.word	0x00000000
 8009e0c:	41264b47 	.word	0x41264b47
 8009e10:	00000000 	.word	0x00000000
 8009e14:	40e1d5a0 	.word	0x40e1d5a0
 8009e18:	dfc20a02 	.word	0xdfc20a02
 8009e1c:	4083a2a7 	.word	0x4083a2a7
 8009e20:	e2083a4d 	.word	0xe2083a4d
 8009e24:	4013946d 	.word	0x4013946d
 8009e28:	54442eea 	.word	0x54442eea
 8009e2c:	401921fb 	.word	0x401921fb
 8009e30:	64d06431 	.word	0x64d06431
 8009e34:	4083a26a 	.word	0x4083a26a
 8009e38:	4166d29d 	.word	0x4166d29d
 8009e3c:	4018f5cd 	.word	0x4018f5cd
 8009e40:	28af4bb3 	.word	0x28af4bb3
 8009e44:	3f2dbd80 	.word	0x3f2dbd80
 8009e48:	68017119 	.word	0x68017119
 8009e4c:	3fda2e94 	.word	0x3fda2e94
 8009e50:	c7de5083 	.word	0xc7de5083
 8009e54:	3fa11cd1 	.word	0x3fa11cd1
 8009e58:	3be86381 	.word	0x3be86381
 8009e5c:	3f36e06c 	.word	0x3f36e06c
 8009e60:	0ada4e96 	.word	0x0ada4e96
 8009e64:	3fa60950 	.word	0x3fa60950
 8009e68:	52f6720d 	.word	0x52f6720d
 8009e6c:	3f4e4fa1 	.word	0x3f4e4fa1
 8009e70:	aa91ed06 	.word	0xaa91ed06
 8009e74:	3f91df46 	.word	0x3f91df46
 8009e78:	40220000 	.word	0x40220000
 8009e7c:	40280000 	.word	0x40280000
 8009e80:	401c0000 	.word	0x401c0000
 8009e84:	40100000 	.word	0x40100000
 8009e88:	4c942d49 	.word	0x4c942d49
 8009e8c:	404a254e 	.word	0x404a254e
 8009e90:	a0a0f4d8 	.word	0xa0a0f4d8
 8009e94:	40315d14 	.word	0x40315d14
 8009e98:	9db22d0e 	.word	0x9db22d0e
 8009e9c:	bfeaa7ef 	.word	0xbfeaa7ef
 8009ea0:	00000000 	.word	0x00000000
 8009ea4:	4076f000 	.word	0x4076f000
 8009ea8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8009eac:	f7f6 fbbc 	bl	8000628 <__aeabi_dmul>
 8009eb0:	4602      	mov	r2, r0
 8009eb2:	460b      	mov	r3, r1
 8009eb4:	ec43 2b17 	vmov	d7, r2, r3
 8009eb8:	eeb0 0a47 	vmov.f32	s0, s14
 8009ebc:	eef0 0a67 	vmov.f32	s1, s15
 8009ec0:	f013 fa32 	bl	801d328 <sin>
 8009ec4:	ec55 4b10 	vmov	r4, r5, d0
 8009ec8:	a385      	add	r3, pc, #532	; (adr r3, 800a0e0 <Wschod+0x638>)
 8009eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ece:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009ed2:	f7f6 fba9 	bl	8000628 <__aeabi_dmul>
 8009ed6:	4602      	mov	r2, r0
 8009ed8:	460b      	mov	r3, r1
 8009eda:	ec43 2b17 	vmov	d7, r2, r3
 8009ede:	eeb0 0a47 	vmov.f32	s0, s14
 8009ee2:	eef0 0a67 	vmov.f32	s1, s15
 8009ee6:	f013 fa1f 	bl	801d328 <sin>
 8009eea:	ec59 8b10 	vmov	r8, r9, d0
 8009eee:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8009ef2:	f013 fa19 	bl	801d328 <sin>
 8009ef6:	ec53 2b10 	vmov	r2, r3, d0
 8009efa:	4640      	mov	r0, r8
 8009efc:	4649      	mov	r1, r9
 8009efe:	f7f6 fb93 	bl	8000628 <__aeabi_dmul>
 8009f02:	4602      	mov	r2, r0
 8009f04:	460b      	mov	r3, r1
 8009f06:	4620      	mov	r0, r4
 8009f08:	4629      	mov	r1, r5
 8009f0a:	f7f6 f9d5 	bl	80002b8 <__aeabi_dsub>
 8009f0e:	4602      	mov	r2, r0
 8009f10:	460b      	mov	r3, r1
 8009f12:	4614      	mov	r4, r2
 8009f14:	461d      	mov	r5, r3
 8009f16:	a372      	add	r3, pc, #456	; (adr r3, 800a0e0 <Wschod+0x638>)
 8009f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f1c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009f20:	f7f6 fb82 	bl	8000628 <__aeabi_dmul>
 8009f24:	4602      	mov	r2, r0
 8009f26:	460b      	mov	r3, r1
 8009f28:	ec43 2b17 	vmov	d7, r2, r3
 8009f2c:	eeb0 0a47 	vmov.f32	s0, s14
 8009f30:	eef0 0a67 	vmov.f32	s1, s15
 8009f34:	f013 f9a4 	bl	801d280 <cos>
 8009f38:	ec59 8b10 	vmov	r8, r9, d0
 8009f3c:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8009f40:	f013 f99e 	bl	801d280 <cos>
 8009f44:	ec53 2b10 	vmov	r2, r3, d0
 8009f48:	4640      	mov	r0, r8
 8009f4a:	4649      	mov	r1, r9
 8009f4c:	f7f6 fb6c 	bl	8000628 <__aeabi_dmul>
 8009f50:	4602      	mov	r2, r0
 8009f52:	460b      	mov	r3, r1
 8009f54:	4620      	mov	r0, r4
 8009f56:	4629      	mov	r1, r5
 8009f58:	f7f6 fc90 	bl	800087c <__aeabi_ddiv>
 8009f5c:	4602      	mov	r2, r0
 8009f5e:	460b      	mov	r3, r1
 8009f60:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

   *Wsch = (3.14159 - (E + 0.017453293 * Long + 1 * acos(C))) * 57.29577951 / 15;
 8009f64:	a35e      	add	r3, pc, #376	; (adr r3, 800a0e0 <Wschod+0x638>)
 8009f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f6a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8009f6e:	f7f6 fb5b 	bl	8000628 <__aeabi_dmul>
 8009f72:	4602      	mov	r2, r0
 8009f74:	460b      	mov	r3, r1
 8009f76:	4610      	mov	r0, r2
 8009f78:	4619      	mov	r1, r3
 8009f7a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009f7e:	f7f6 f99d 	bl	80002bc <__adddf3>
 8009f82:	4602      	mov	r2, r0
 8009f84:	460b      	mov	r3, r1
 8009f86:	4614      	mov	r4, r2
 8009f88:	461d      	mov	r5, r3
 8009f8a:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8009f8e:	f013 fa23 	bl	801d3d8 <acos>
 8009f92:	ec53 2b10 	vmov	r2, r3, d0
 8009f96:	4620      	mov	r0, r4
 8009f98:	4629      	mov	r1, r5
 8009f9a:	f7f6 f98f 	bl	80002bc <__adddf3>
 8009f9e:	4602      	mov	r2, r0
 8009fa0:	460b      	mov	r3, r1
 8009fa2:	a151      	add	r1, pc, #324	; (adr r1, 800a0e8 <Wschod+0x640>)
 8009fa4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fa8:	f7f6 f986 	bl	80002b8 <__aeabi_dsub>
 8009fac:	4602      	mov	r2, r0
 8009fae:	460b      	mov	r3, r1
 8009fb0:	4610      	mov	r0, r2
 8009fb2:	4619      	mov	r1, r3
 8009fb4:	a34e      	add	r3, pc, #312	; (adr r3, 800a0f0 <Wschod+0x648>)
 8009fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fba:	f7f6 fb35 	bl	8000628 <__aeabi_dmul>
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	460b      	mov	r3, r1
 8009fc2:	4610      	mov	r0, r2
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	f04f 0200 	mov.w	r2, #0
 8009fca:	4b4b      	ldr	r3, [pc, #300]	; (800a0f8 <Wschod+0x650>)
 8009fcc:	f7f6 fc56 	bl	800087c <__aeabi_ddiv>
 8009fd0:	4602      	mov	r2, r0
 8009fd2:	460b      	mov	r3, r1
 8009fd4:	68f9      	ldr	r1, [r7, #12]
 8009fd6:	e9c1 2300 	strd	r2, r3, [r1]
   *Tran = (3.14159 - (E + 0.017453293 * Long + 0 * acos(C))) * 57.29577951 / 15;
 8009fda:	a341      	add	r3, pc, #260	; (adr r3, 800a0e0 <Wschod+0x638>)
 8009fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8009fe4:	f7f6 fb20 	bl	8000628 <__aeabi_dmul>
 8009fe8:	4602      	mov	r2, r0
 8009fea:	460b      	mov	r3, r1
 8009fec:	4610      	mov	r0, r2
 8009fee:	4619      	mov	r1, r3
 8009ff0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009ff4:	f7f6 f962 	bl	80002bc <__adddf3>
 8009ff8:	4602      	mov	r2, r0
 8009ffa:	460b      	mov	r3, r1
 8009ffc:	4614      	mov	r4, r2
 8009ffe:	461d      	mov	r5, r3
 800a000:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 800a004:	f013 f9e8 	bl	801d3d8 <acos>
 800a008:	ec51 0b10 	vmov	r0, r1, d0
 800a00c:	f04f 0200 	mov.w	r2, #0
 800a010:	f04f 0300 	mov.w	r3, #0
 800a014:	f7f6 fb08 	bl	8000628 <__aeabi_dmul>
 800a018:	4602      	mov	r2, r0
 800a01a:	460b      	mov	r3, r1
 800a01c:	4620      	mov	r0, r4
 800a01e:	4629      	mov	r1, r5
 800a020:	f7f6 f94c 	bl	80002bc <__adddf3>
 800a024:	4602      	mov	r2, r0
 800a026:	460b      	mov	r3, r1
 800a028:	a12f      	add	r1, pc, #188	; (adr r1, 800a0e8 <Wschod+0x640>)
 800a02a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a02e:	f7f6 f943 	bl	80002b8 <__aeabi_dsub>
 800a032:	4602      	mov	r2, r0
 800a034:	460b      	mov	r3, r1
 800a036:	4610      	mov	r0, r2
 800a038:	4619      	mov	r1, r3
 800a03a:	a32d      	add	r3, pc, #180	; (adr r3, 800a0f0 <Wschod+0x648>)
 800a03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a040:	f7f6 faf2 	bl	8000628 <__aeabi_dmul>
 800a044:	4602      	mov	r2, r0
 800a046:	460b      	mov	r3, r1
 800a048:	4610      	mov	r0, r2
 800a04a:	4619      	mov	r1, r3
 800a04c:	f04f 0200 	mov.w	r2, #0
 800a050:	4b29      	ldr	r3, [pc, #164]	; (800a0f8 <Wschod+0x650>)
 800a052:	f7f6 fc13 	bl	800087c <__aeabi_ddiv>
 800a056:	4602      	mov	r2, r0
 800a058:	460b      	mov	r3, r1
 800a05a:	68b9      	ldr	r1, [r7, #8]
 800a05c:	e9c1 2300 	strd	r2, r3, [r1]
   *Zach = (3.14159 - (E + 0.017453293 * Long + -1 * acos(C))) * 57.29577951 / 15;
 800a060:	a31f      	add	r3, pc, #124	; (adr r3, 800a0e0 <Wschod+0x638>)
 800a062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a066:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800a06a:	f7f6 fadd 	bl	8000628 <__aeabi_dmul>
 800a06e:	4602      	mov	r2, r0
 800a070:	460b      	mov	r3, r1
 800a072:	4610      	mov	r0, r2
 800a074:	4619      	mov	r1, r3
 800a076:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a07a:	f7f6 f91f 	bl	80002bc <__adddf3>
 800a07e:	4602      	mov	r2, r0
 800a080:	460b      	mov	r3, r1
 800a082:	4614      	mov	r4, r2
 800a084:	461d      	mov	r5, r3
 800a086:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 800a08a:	f013 f9a5 	bl	801d3d8 <acos>
 800a08e:	ec53 2b10 	vmov	r2, r3, d0
 800a092:	4620      	mov	r0, r4
 800a094:	4629      	mov	r1, r5
 800a096:	f7f6 f90f 	bl	80002b8 <__aeabi_dsub>
 800a09a:	4602      	mov	r2, r0
 800a09c:	460b      	mov	r3, r1
 800a09e:	a112      	add	r1, pc, #72	; (adr r1, 800a0e8 <Wschod+0x640>)
 800a0a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0a4:	f7f6 f908 	bl	80002b8 <__aeabi_dsub>
 800a0a8:	4602      	mov	r2, r0
 800a0aa:	460b      	mov	r3, r1
 800a0ac:	4610      	mov	r0, r2
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	a30f      	add	r3, pc, #60	; (adr r3, 800a0f0 <Wschod+0x648>)
 800a0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b6:	f7f6 fab7 	bl	8000628 <__aeabi_dmul>
 800a0ba:	4602      	mov	r2, r0
 800a0bc:	460b      	mov	r3, r1
 800a0be:	4610      	mov	r0, r2
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	f04f 0200 	mov.w	r2, #0
 800a0c6:	4b0c      	ldr	r3, [pc, #48]	; (800a0f8 <Wschod+0x650>)
 800a0c8:	f7f6 fbd8 	bl	800087c <__aeabi_ddiv>
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	460b      	mov	r3, r1
 800a0d0:	6879      	ldr	r1, [r7, #4]
 800a0d2:	e9c1 2300 	strd	r2, r3, [r1]
}
 800a0d6:	bf00      	nop
 800a0d8:	3788      	adds	r7, #136	; 0x88
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a0e0:	aa91ed06 	.word	0xaa91ed06
 800a0e4:	3f91df46 	.word	0x3f91df46
 800a0e8:	f01b866e 	.word	0xf01b866e
 800a0ec:	400921f9 	.word	0x400921f9
 800a0f0:	1a5d2372 	.word	0x1a5d2372
 800a0f4:	404ca5dc 	.word	0x404ca5dc
 800a0f8:	402e0000 	.word	0x402e0000

0800a0fc <mapf>:
static float mapf(float val, float in_min, float in_max, float out_min, float out_max)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b087      	sub	sp, #28
 800a100:	af00      	add	r7, sp, #0
 800a102:	ed87 0a05 	vstr	s0, [r7, #20]
 800a106:	edc7 0a04 	vstr	s1, [r7, #16]
 800a10a:	ed87 1a03 	vstr	s2, [r7, #12]
 800a10e:	edc7 1a02 	vstr	s3, [r7, #8]
 800a112:	ed87 2a01 	vstr	s4, [r7, #4]
   return (val - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800a116:	ed97 7a05 	vldr	s14, [r7, #20]
 800a11a:	edd7 7a04 	vldr	s15, [r7, #16]
 800a11e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a122:	edd7 6a01 	vldr	s13, [r7, #4]
 800a126:	edd7 7a02 	vldr	s15, [r7, #8]
 800a12a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a12e:	ee67 6a27 	vmul.f32	s13, s14, s15
 800a132:	ed97 7a03 	vldr	s14, [r7, #12]
 800a136:	edd7 7a04 	vldr	s15, [r7, #16]
 800a13a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a13e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a142:	edd7 7a02 	vldr	s15, [r7, #8]
 800a146:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800a14a:	eeb0 0a67 	vmov.f32	s0, s15
 800a14e:	371c      	adds	r7, #28
 800a150:	46bd      	mov	sp, r7
 800a152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a156:	4770      	bx	lr

0800a158 <map>:
static uint32_t map(uint32_t val, uint32_t in_min, uint32_t in_max, uint32_t out_min, uint32_t out_max)
{
 800a158:	b480      	push	{r7}
 800a15a:	b085      	sub	sp, #20
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	60f8      	str	r0, [r7, #12]
 800a160:	60b9      	str	r1, [r7, #8]
 800a162:	607a      	str	r2, [r7, #4]
 800a164:	603b      	str	r3, [r7, #0]
   return (val - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800a166:	68fa      	ldr	r2, [r7, #12]
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	1ad3      	subs	r3, r2, r3
 800a16c:	69b9      	ldr	r1, [r7, #24]
 800a16e:	683a      	ldr	r2, [r7, #0]
 800a170:	1a8a      	subs	r2, r1, r2
 800a172:	fb03 f202 	mul.w	r2, r3, r2
 800a176:	6879      	ldr	r1, [r7, #4]
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	1acb      	subs	r3, r1, r3
 800a17c:	fbb2 f2f3 	udiv	r2, r2, r3
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	4413      	add	r3, r2
}
 800a184:	4618      	mov	r0, r3
 800a186:	3714      	adds	r7, #20
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr

0800a190 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b082      	sub	sp, #8
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	460b      	mov	r3, r1
 800a19a:	807b      	strh	r3, [r7, #2]
   if(huart->Instance == USART1)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4a08      	ldr	r2, [pc, #32]	; (800a1c4 <HAL_UARTEx_RxEventCallback+0x34>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d10a      	bne.n	800a1bc <HAL_UARTEx_RxEventCallback+0x2c>
   {
      Rfp.DataSize = Size;
 800a1a6:	887b      	ldrh	r3, [r7, #2]
 800a1a8:	4a07      	ldr	r2, [pc, #28]	; (800a1c8 <HAL_UARTEx_RxEventCallback+0x38>)
 800a1aa:	6093      	str	r3, [r2, #8]
      RFP_InterruptTask();
 800a1ac:	f001 fea0 	bl	800bef0 <RFP_InterruptTask>
      HAL_GPIO_TogglePin(SIGNAL_GPIO_Port, SIGNAL_Pin);
 800a1b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a1b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a1b8:	f003 fea0 	bl	800defc <HAL_GPIO_TogglePin>
   }
}
 800a1bc:	bf00      	nop
 800a1be:	3708      	adds	r7, #8
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}
 800a1c4:	40013800 	.word	0x40013800
 800a1c8:	20003f60 	.word	0x20003f60

0800a1cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b088      	sub	sp, #32
 800a1d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a1d2:	f107 030c 	add.w	r3, r7, #12
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	601a      	str	r2, [r3, #0]
 800a1da:	605a      	str	r2, [r3, #4]
 800a1dc:	609a      	str	r2, [r3, #8]
 800a1de:	60da      	str	r2, [r3, #12]
 800a1e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a1e2:	4b46      	ldr	r3, [pc, #280]	; (800a2fc <MX_GPIO_Init+0x130>)
 800a1e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1e6:	4a45      	ldr	r2, [pc, #276]	; (800a2fc <MX_GPIO_Init+0x130>)
 800a1e8:	f043 0304 	orr.w	r3, r3, #4
 800a1ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a1ee:	4b43      	ldr	r3, [pc, #268]	; (800a2fc <MX_GPIO_Init+0x130>)
 800a1f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1f2:	f003 0304 	and.w	r3, r3, #4
 800a1f6:	60bb      	str	r3, [r7, #8]
 800a1f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a1fa:	4b40      	ldr	r3, [pc, #256]	; (800a2fc <MX_GPIO_Init+0x130>)
 800a1fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1fe:	4a3f      	ldr	r2, [pc, #252]	; (800a2fc <MX_GPIO_Init+0x130>)
 800a200:	f043 0301 	orr.w	r3, r3, #1
 800a204:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a206:	4b3d      	ldr	r3, [pc, #244]	; (800a2fc <MX_GPIO_Init+0x130>)
 800a208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a20a:	f003 0301 	and.w	r3, r3, #1
 800a20e:	607b      	str	r3, [r7, #4]
 800a210:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a212:	4b3a      	ldr	r3, [pc, #232]	; (800a2fc <MX_GPIO_Init+0x130>)
 800a214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a216:	4a39      	ldr	r2, [pc, #228]	; (800a2fc <MX_GPIO_Init+0x130>)
 800a218:	f043 0302 	orr.w	r3, r3, #2
 800a21c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a21e:	4b37      	ldr	r3, [pc, #220]	; (800a2fc <MX_GPIO_Init+0x130>)
 800a220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a222:	f003 0302 	and.w	r3, r3, #2
 800a226:	603b      	str	r3, [r7, #0]
 800a228:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SSD1306_CS_GPIO_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 800a22a:	2201      	movs	r2, #1
 800a22c:	2110      	movs	r1, #16
 800a22e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a232:	f003 fe4b 	bl	800decc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCREENS_DC_Pin|EPAPIER_CS_Pin|EPAPIER_RST_Pin|SSD1306_RST_Pin
 800a236:	2201      	movs	r2, #1
 800a238:	f640 61c3 	movw	r1, #3779	; 0xec3
 800a23c:	4830      	ldr	r0, [pc, #192]	; (800a300 <MX_GPIO_Init+0x134>)
 800a23e:	f003 fe45 	bl	800decc <HAL_GPIO_WritePin>
                          |FRAM_CS_Pin|FRAM_WP_Pin|FLASH_CS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HEARTBEAT_Pin|BME280_CS_Pin|FRAM_HOLD_Pin, GPIO_PIN_RESET);
 800a242:	2200      	movs	r2, #0
 800a244:	f44f 5144 	mov.w	r1, #12544	; 0x3100
 800a248:	482d      	ldr	r0, [pc, #180]	; (800a300 <MX_GPIO_Init+0x134>)
 800a24a:	f003 fe3f 	bl	800decc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HC12_SET_Pin|SIGNAL_Pin, GPIO_PIN_RESET);
 800a24e:	2200      	movs	r2, #0
 800a250:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 800a254:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a258:	f003 fe38 	bl	800decc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SSD1306_CS_Pin|SIGNAL_Pin;
 800a25c:	f248 0310 	movw	r3, #32784	; 0x8010
 800a260:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a262:	2301      	movs	r3, #1
 800a264:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a266:	2300      	movs	r3, #0
 800a268:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a26a:	2303      	movs	r3, #3
 800a26c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a26e:	f107 030c 	add.w	r3, r7, #12
 800a272:	4619      	mov	r1, r3
 800a274:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a278:	f003 fc7e 	bl	800db78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SCREENS_DC_Pin|EPAPIER_CS_Pin|EPAPIER_RST_Pin|SSD1306_RST_Pin
 800a27c:	f641 63c3 	movw	r3, #7875	; 0x1ec3
 800a280:	60fb      	str	r3, [r7, #12]
                          |HEARTBEAT_Pin|FRAM_CS_Pin|FRAM_WP_Pin|FLASH_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a282:	2301      	movs	r3, #1
 800a284:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a286:	2300      	movs	r3, #0
 800a288:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a28a:	2303      	movs	r3, #3
 800a28c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a28e:	f107 030c 	add.w	r3, r7, #12
 800a292:	4619      	mov	r1, r3
 800a294:	481a      	ldr	r0, [pc, #104]	; (800a300 <MX_GPIO_Init+0x134>)
 800a296:	f003 fc6f 	bl	800db78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = EPAPIER_BUSY_Pin|ENCODER_SWITCH_Pin;
 800a29a:	f244 0304 	movw	r3, #16388	; 0x4004
 800a29e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a2a8:	f107 030c 	add.w	r3, r7, #12
 800a2ac:	4619      	mov	r1, r3
 800a2ae:	4814      	ldr	r0, [pc, #80]	; (800a300 <MX_GPIO_Init+0x134>)
 800a2b0:	f003 fc62 	bl	800db78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BME280_CS_Pin|FRAM_HOLD_Pin;
 800a2b4:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 800a2b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a2c6:	f107 030c 	add.w	r3, r7, #12
 800a2ca:	4619      	mov	r1, r3
 800a2cc:	480c      	ldr	r0, [pc, #48]	; (800a300 <MX_GPIO_Init+0x134>)
 800a2ce:	f003 fc53 	bl	800db78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HC12_SET_Pin;
 800a2d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a2d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a2d8:	2301      	movs	r3, #1
 800a2da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HC12_SET_GPIO_Port, &GPIO_InitStruct);
 800a2e4:	f107 030c 	add.w	r3, r7, #12
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a2ee:	f003 fc43 	bl	800db78 <HAL_GPIO_Init>

}
 800a2f2:	bf00      	nop
 800a2f4:	3720      	adds	r7, #32
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}
 800a2fa:	bf00      	nop
 800a2fc:	40021000 	.word	0x40021000
 800a300:	48000400 	.word	0x48000400

0800a304 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800a308:	4b0b      	ldr	r3, [pc, #44]	; (800a338 <MX_IWDG_Init+0x34>)
 800a30a:	4a0c      	ldr	r2, [pc, #48]	; (800a33c <MX_IWDG_Init+0x38>)
 800a30c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 800a30e:	4b0a      	ldr	r3, [pc, #40]	; (800a338 <MX_IWDG_Init+0x34>)
 800a310:	2206      	movs	r2, #6
 800a312:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 800a314:	4b08      	ldr	r3, [pc, #32]	; (800a338 <MX_IWDG_Init+0x34>)
 800a316:	f640 72ff 	movw	r2, #4095	; 0xfff
 800a31a:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 800a31c:	4b06      	ldr	r3, [pc, #24]	; (800a338 <MX_IWDG_Init+0x34>)
 800a31e:	f640 72ff 	movw	r2, #4095	; 0xfff
 800a322:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800a324:	4804      	ldr	r0, [pc, #16]	; (800a338 <MX_IWDG_Init+0x34>)
 800a326:	f003 fe03 	bl	800df30 <HAL_IWDG_Init>
 800a32a:	4603      	mov	r3, r0
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d001      	beq.n	800a334 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 800a330:	f000 f8cc 	bl	800a4cc <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800a334:	bf00      	nop
 800a336:	bd80      	pop	{r7, pc}
 800a338:	20004058 	.word	0x20004058
 800a33c:	40003000 	.word	0x40003000

0800a340 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a344:	f002 ffa5 	bl	800d292 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a348:	f000 f81e 	bl	800a388 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a34c:	f7ff ff3e 	bl	800a1cc <MX_GPIO_Init>
  MX_DMA_Init();
 800a350:	f7fa f966 	bl	8004620 <MX_DMA_Init>
  MX_RTC_Init();
 800a354:	f002 f890 	bl	800c478 <MX_RTC_Init>
  MX_SPI1_Init();
 800a358:	f002 f904 	bl	800c564 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800a35c:	f002 fe96 	bl	800d08c <MX_USART1_UART_Init>
  MX_TIM5_Init();
 800a360:	f002 fd2c 	bl	800cdbc <MX_TIM5_Init>
  MX_IWDG_Init();
 800a364:	f7ff ffce 	bl	800a304 <MX_IWDG_Init>
  MX_TIM16_Init();
 800a368:	f002 fd7e 	bl	800ce68 <MX_TIM16_Init>
  MX_TIM1_Init();
 800a36c:	f002 fc7a 	bl	800cc64 <MX_TIM1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800a370:	f000 f86c 	bl	800a44c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800a374:	f00a fa08 	bl	8014788 <osKernelInitialize>
  MX_FREERTOS_Init();
 800a378:	f7fa ff04 	bl	8005184 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800a37c:	f00a fa28 	bl	80147d0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   HAL_NVIC_SystemReset();
 800a380:	f003 f8b9 	bl	800d4f6 <HAL_NVIC_SystemReset>
   while(1)
 800a384:	e7fe      	b.n	800a384 <main+0x44>
	...

0800a388 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b098      	sub	sp, #96	; 0x60
 800a38c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a38e:	f107 0318 	add.w	r3, r7, #24
 800a392:	2248      	movs	r2, #72	; 0x48
 800a394:	2100      	movs	r1, #0
 800a396:	4618      	mov	r0, r3
 800a398:	f00e fb0a 	bl	80189b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a39c:	1d3b      	adds	r3, r7, #4
 800a39e:	2200      	movs	r2, #0
 800a3a0:	601a      	str	r2, [r3, #0]
 800a3a2:	605a      	str	r2, [r3, #4]
 800a3a4:	609a      	str	r2, [r3, #8]
 800a3a6:	60da      	str	r2, [r3, #12]
 800a3a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800a3aa:	2000      	movs	r0, #0
 800a3ac:	f003 fe50 	bl	800e050 <HAL_PWREx_ControlVoltageScaling>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d001      	beq.n	800a3ba <SystemClock_Config+0x32>
  {
    Error_Handler();
 800a3b6:	f000 f889 	bl	800a4cc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800a3ba:	f003 fe19 	bl	800dff0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800a3be:	4b22      	ldr	r3, [pc, #136]	; (800a448 <SystemClock_Config+0xc0>)
 800a3c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3c4:	4a20      	ldr	r2, [pc, #128]	; (800a448 <SystemClock_Config+0xc0>)
 800a3c6:	f023 0318 	bic.w	r3, r3, #24
 800a3ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 800a3ce:	231c      	movs	r3, #28
 800a3d0:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800a3da:	2301      	movs	r3, #1
 800a3dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800a3e2:	2360      	movs	r3, #96	; 0x60
 800a3e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a3e6:	2302      	movs	r3, #2
 800a3e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 60;
 800a3f2:	233c      	movs	r3, #60	; 0x3c
 800a3f4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a3f6:	2302      	movs	r3, #2
 800a3f8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800a3fa:	2302      	movs	r3, #2
 800a3fc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800a3fe:	2302      	movs	r3, #2
 800a400:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a402:	f107 0318 	add.w	r3, r7, #24
 800a406:	4618      	mov	r0, r3
 800a408:	f003 fec6 	bl	800e198 <HAL_RCC_OscConfig>
 800a40c:	4603      	mov	r3, r0
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d001      	beq.n	800a416 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800a412:	f000 f85b 	bl	800a4cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a416:	230f      	movs	r3, #15
 800a418:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a41a:	2303      	movs	r3, #3
 800a41c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a41e:	2300      	movs	r3, #0
 800a420:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800a422:	2300      	movs	r3, #0
 800a424:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a426:	2300      	movs	r3, #0
 800a428:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800a42a:	1d3b      	adds	r3, r7, #4
 800a42c:	2105      	movs	r1, #5
 800a42e:	4618      	mov	r0, r3
 800a430:	f004 fb2e 	bl	800ea90 <HAL_RCC_ClockConfig>
 800a434:	4603      	mov	r3, r0
 800a436:	2b00      	cmp	r3, #0
 800a438:	d001      	beq.n	800a43e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800a43a:	f000 f847 	bl	800a4cc <Error_Handler>
  }
}
 800a43e:	bf00      	nop
 800a440:	3760      	adds	r7, #96	; 0x60
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}
 800a446:	bf00      	nop
 800a448:	40021000 	.word	0x40021000

0800a44c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	af00      	add	r7, sp, #0
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800a450:	2200      	movs	r2, #0
 800a452:	2105      	movs	r1, #5
 800a454:	200b      	movs	r0, #11
 800a456:	f003 f824 	bl	800d4a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800a45a:	200b      	movs	r0, #11
 800a45c:	f003 f83d 	bl	800d4da <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800a460:	2200      	movs	r2, #0
 800a462:	2105      	movs	r1, #5
 800a464:	2025      	movs	r0, #37	; 0x25
 800a466:	f003 f81c 	bl	800d4a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800a46a:	2025      	movs	r0, #37	; 0x25
 800a46c:	f003 f835 	bl	800d4da <HAL_NVIC_EnableIRQ>
  /* TIM1_UP_TIM16_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 800a470:	2200      	movs	r2, #0
 800a472:	2105      	movs	r1, #5
 800a474:	2019      	movs	r0, #25
 800a476:	f003 f814 	bl	800d4a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800a47a:	2019      	movs	r0, #25
 800a47c:	f003 f82d 	bl	800d4da <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800a480:	2200      	movs	r2, #0
 800a482:	2105      	movs	r1, #5
 800a484:	200c      	movs	r0, #12
 800a486:	f003 f80c 	bl	800d4a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800a48a:	200c      	movs	r0, #12
 800a48c:	f003 f825 	bl	800d4da <HAL_NVIC_EnableIRQ>
}
 800a490:	bf00      	nop
 800a492:	bd80      	pop	{r7, pc}

0800a494 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b082      	sub	sp, #8
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM15) {
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	4a08      	ldr	r2, [pc, #32]	; (800a4c4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d102      	bne.n	800a4ac <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 800a4a6:	f002 ff0d 	bl	800d2c4 <HAL_IncTick>
  /* USER CODE BEGIN Callback 1 */
  else if (htim->Instance == TIM16) {
    HAL_IncTick();
  }
  /* USER CODE END Callback 1 */
}
 800a4aa:	e006      	b.n	800a4ba <HAL_TIM_PeriodElapsedCallback+0x26>
  else if (htim->Instance == TIM16) {
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	4a05      	ldr	r2, [pc, #20]	; (800a4c8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	d101      	bne.n	800a4ba <HAL_TIM_PeriodElapsedCallback+0x26>
    HAL_IncTick();
 800a4b6:	f002 ff05 	bl	800d2c4 <HAL_IncTick>
}
 800a4ba:	bf00      	nop
 800a4bc:	3708      	adds	r7, #8
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}
 800a4c2:	bf00      	nop
 800a4c4:	40014000 	.word	0x40014000
 800a4c8:	40014400 	.word	0x40014400

0800a4cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
   /* User can add his own implementation to report the HAL error return state */
   HAL_NVIC_SystemReset();
 800a4d0:	f003 f811 	bl	800d4f6 <HAL_NVIC_SystemReset>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800a4d4:	b672      	cpsid	i
}
 800a4d6:	bf00      	nop
   __disable_irq();
   while(1)
 800a4d8:	e7fe      	b.n	800a4d8 <Error_Handler+0xc>

0800a4da <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 800a4da:	b480      	push	{r7}
 800a4dc:	b085      	sub	sp, #20
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	60b9      	str	r1, [r7, #8]
 800a4e2:	607a      	str	r2, [r7, #4]
 800a4e4:	603b      	str	r3, [r7, #0]
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 800a4ea:	687a      	ldr	r2, [r7, #4]
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	429a      	cmp	r2, r3
 800a4f0:	d204      	bcs.n	800a4fc <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 800a4f2:	68ba      	ldr	r2, [r7, #8]
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	4413      	add	r3, r2
 800a4f8:	7bfa      	ldrb	r2, [r7, #15]
 800a4fa:	701a      	strb	r2, [r3, #0]
  }
}
 800a4fc:	bf00      	nop
 800a4fe:	3714      	adds	r7, #20
 800a500:	46bd      	mov	sp, r7
 800a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a506:	4770      	bx	lr

0800a508 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 800a508:	b480      	push	{r7}
 800a50a:	b085      	sub	sp, #20
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	60b9      	str	r1, [r7, #8]
 800a510:	607a      	str	r2, [r7, #4]
 800a512:	603b      	str	r3, [r7, #0]
 800a514:	4603      	mov	r3, r0
 800a516:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 800a518:	bf00      	nop
 800a51a:	3714      	adds	r7, #20
 800a51c:	46bd      	mov	sp, r7
 800a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a522:	4770      	bx	lr

0800a524 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 800a524:	b480      	push	{r7}
 800a526:	b085      	sub	sp, #20
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	60fb      	str	r3, [r7, #12]
 800a532:	e002      	b.n	800a53a <_strnlen_s+0x16>
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	3301      	adds	r3, #1
 800a538:	60fb      	str	r3, [r7, #12]
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	781b      	ldrb	r3, [r3, #0]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d004      	beq.n	800a54c <_strnlen_s+0x28>
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	1e5a      	subs	r2, r3, #1
 800a546:	603a      	str	r2, [r7, #0]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d1f3      	bne.n	800a534 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 800a54c:	68fa      	ldr	r2, [r7, #12]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	1ad3      	subs	r3, r2, r3
}
 800a552:	4618      	mov	r0, r3
 800a554:	3714      	adds	r7, #20
 800a556:	46bd      	mov	sp, r7
 800a558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55c:	4770      	bx	lr

0800a55e <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 800a55e:	b480      	push	{r7}
 800a560:	b083      	sub	sp, #12
 800a562:	af00      	add	r7, sp, #0
 800a564:	4603      	mov	r3, r0
 800a566:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 800a568:	79fb      	ldrb	r3, [r7, #7]
 800a56a:	2b2f      	cmp	r3, #47	; 0x2f
 800a56c:	d904      	bls.n	800a578 <_is_digit+0x1a>
 800a56e:	79fb      	ldrb	r3, [r7, #7]
 800a570:	2b39      	cmp	r3, #57	; 0x39
 800a572:	d801      	bhi.n	800a578 <_is_digit+0x1a>
 800a574:	2301      	movs	r3, #1
 800a576:	e000      	b.n	800a57a <_is_digit+0x1c>
 800a578:	2300      	movs	r3, #0
 800a57a:	f003 0301 	and.w	r3, r3, #1
 800a57e:	b2db      	uxtb	r3, r3
}
 800a580:	4618      	mov	r0, r3
 800a582:	370c      	adds	r7, #12
 800a584:	46bd      	mov	sp, r7
 800a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58a:	4770      	bx	lr

0800a58c <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b084      	sub	sp, #16
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 800a594:	2300      	movs	r3, #0
 800a596:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800a598:	e00e      	b.n	800a5b8 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800a59a:	68fa      	ldr	r2, [r7, #12]
 800a59c:	4613      	mov	r3, r2
 800a59e:	009b      	lsls	r3, r3, #2
 800a5a0:	4413      	add	r3, r2
 800a5a2:	005b      	lsls	r3, r3, #1
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	1c59      	adds	r1, r3, #1
 800a5ac:	687a      	ldr	r2, [r7, #4]
 800a5ae:	6011      	str	r1, [r2, #0]
 800a5b0:	781b      	ldrb	r3, [r3, #0]
 800a5b2:	4403      	add	r3, r0
 800a5b4:	3b30      	subs	r3, #48	; 0x30
 800a5b6:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	781b      	ldrb	r3, [r3, #0]
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f7ff ffcd 	bl	800a55e <_is_digit>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d1e7      	bne.n	800a59a <_atoi+0xe>
  }
  return i;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3710      	adds	r7, #16
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}

0800a5d4 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800a5d4:	b590      	push	{r4, r7, lr}
 800a5d6:	b087      	sub	sp, #28
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	60f8      	str	r0, [r7, #12]
 800a5dc:	60b9      	str	r1, [r7, #8]
 800a5de:	607a      	str	r2, [r7, #4]
 800a5e0:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800a5e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5e8:	f003 0302 	and.w	r3, r3, #2
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d125      	bne.n	800a63c <_out_rev+0x68>
 800a5f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5f2:	f003 0301 	and.w	r3, r3, #1
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d120      	bne.n	800a63c <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 800a5fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5fc:	617b      	str	r3, [r7, #20]
 800a5fe:	e00a      	b.n	800a616 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 800a600:	687a      	ldr	r2, [r7, #4]
 800a602:	1c53      	adds	r3, r2, #1
 800a604:	607b      	str	r3, [r7, #4]
 800a606:	68fc      	ldr	r4, [r7, #12]
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	68b9      	ldr	r1, [r7, #8]
 800a60c:	2020      	movs	r0, #32
 800a60e:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	3301      	adds	r3, #1
 800a614:	617b      	str	r3, [r7, #20]
 800a616:	697a      	ldr	r2, [r7, #20]
 800a618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a61a:	429a      	cmp	r2, r3
 800a61c:	d3f0      	bcc.n	800a600 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 800a61e:	e00d      	b.n	800a63c <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 800a620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a622:	3b01      	subs	r3, #1
 800a624:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a626:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a62a:	4413      	add	r3, r2
 800a62c:	7818      	ldrb	r0, [r3, #0]
 800a62e:	687a      	ldr	r2, [r7, #4]
 800a630:	1c53      	adds	r3, r2, #1
 800a632:	607b      	str	r3, [r7, #4]
 800a634:	68fc      	ldr	r4, [r7, #12]
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	68b9      	ldr	r1, [r7, #8]
 800a63a:	47a0      	blx	r4
  while (len) {
 800a63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d1ee      	bne.n	800a620 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 800a642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a644:	f003 0302 	and.w	r3, r3, #2
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d00e      	beq.n	800a66a <_out_rev+0x96>
    while (idx - start_idx < width) {
 800a64c:	e007      	b.n	800a65e <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 800a64e:	687a      	ldr	r2, [r7, #4]
 800a650:	1c53      	adds	r3, r2, #1
 800a652:	607b      	str	r3, [r7, #4]
 800a654:	68fc      	ldr	r4, [r7, #12]
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	68b9      	ldr	r1, [r7, #8]
 800a65a:	2020      	movs	r0, #32
 800a65c:	47a0      	blx	r4
    while (idx - start_idx < width) {
 800a65e:	687a      	ldr	r2, [r7, #4]
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	1ad3      	subs	r3, r2, r3
 800a664:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a666:	429a      	cmp	r2, r3
 800a668:	d8f1      	bhi.n	800a64e <_out_rev+0x7a>
    }
  }

  return idx;
 800a66a:	687b      	ldr	r3, [r7, #4]
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	371c      	adds	r7, #28
 800a670:	46bd      	mov	sp, r7
 800a672:	bd90      	pop	{r4, r7, pc}

0800a674 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b088      	sub	sp, #32
 800a678:	af04      	add	r7, sp, #16
 800a67a:	60f8      	str	r0, [r7, #12]
 800a67c:	60b9      	str	r1, [r7, #8]
 800a67e:	607a      	str	r2, [r7, #4]
 800a680:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 800a682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a684:	f003 0302 	and.w	r3, r3, #2
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d136      	bne.n	800a6fa <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800a68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d018      	beq.n	800a6c4 <_ntoa_format+0x50>
 800a692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a694:	f003 0301 	and.w	r3, r3, #1
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d013      	beq.n	800a6c4 <_ntoa_format+0x50>
 800a69c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d104      	bne.n	800a6ae <_ntoa_format+0x3a>
 800a6a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a6:	f003 030c 	and.w	r3, r3, #12
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d00a      	beq.n	800a6c4 <_ntoa_format+0x50>
      width--;
 800a6ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b0:	3b01      	subs	r3, #1
 800a6b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800a6b4:	e006      	b.n	800a6c4 <_ntoa_format+0x50>
      buf[len++] = '0';
 800a6b6:	69fb      	ldr	r3, [r7, #28]
 800a6b8:	1c5a      	adds	r2, r3, #1
 800a6ba:	61fa      	str	r2, [r7, #28]
 800a6bc:	69ba      	ldr	r2, [r7, #24]
 800a6be:	4413      	add	r3, r2
 800a6c0:	2230      	movs	r2, #48	; 0x30
 800a6c2:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800a6c4:	69fa      	ldr	r2, [r7, #28]
 800a6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	d20a      	bcs.n	800a6e2 <_ntoa_format+0x6e>
 800a6cc:	69fb      	ldr	r3, [r7, #28]
 800a6ce:	2b1f      	cmp	r3, #31
 800a6d0:	d9f1      	bls.n	800a6b6 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800a6d2:	e006      	b.n	800a6e2 <_ntoa_format+0x6e>
      buf[len++] = '0';
 800a6d4:	69fb      	ldr	r3, [r7, #28]
 800a6d6:	1c5a      	adds	r2, r3, #1
 800a6d8:	61fa      	str	r2, [r7, #28]
 800a6da:	69ba      	ldr	r2, [r7, #24]
 800a6dc:	4413      	add	r3, r2
 800a6de:	2230      	movs	r2, #48	; 0x30
 800a6e0:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800a6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e4:	f003 0301 	and.w	r3, r3, #1
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d006      	beq.n	800a6fa <_ntoa_format+0x86>
 800a6ec:	69fa      	ldr	r2, [r7, #28]
 800a6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	d202      	bcs.n	800a6fa <_ntoa_format+0x86>
 800a6f4:	69fb      	ldr	r3, [r7, #28]
 800a6f6:	2b1f      	cmp	r3, #31
 800a6f8:	d9ec      	bls.n	800a6d4 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 800a6fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6fc:	f003 0310 	and.w	r3, r3, #16
 800a700:	2b00      	cmp	r3, #0
 800a702:	d058      	beq.n	800a7b6 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 800a704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d116      	bne.n	800a73c <_ntoa_format+0xc8>
 800a70e:	69fb      	ldr	r3, [r7, #28]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d013      	beq.n	800a73c <_ntoa_format+0xc8>
 800a714:	69fa      	ldr	r2, [r7, #28]
 800a716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a718:	429a      	cmp	r2, r3
 800a71a:	d003      	beq.n	800a724 <_ntoa_format+0xb0>
 800a71c:	69fa      	ldr	r2, [r7, #28]
 800a71e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a720:	429a      	cmp	r2, r3
 800a722:	d10b      	bne.n	800a73c <_ntoa_format+0xc8>
      len--;
 800a724:	69fb      	ldr	r3, [r7, #28]
 800a726:	3b01      	subs	r3, #1
 800a728:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 800a72a:	69fb      	ldr	r3, [r7, #28]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d005      	beq.n	800a73c <_ntoa_format+0xc8>
 800a730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a732:	2b10      	cmp	r3, #16
 800a734:	d102      	bne.n	800a73c <_ntoa_format+0xc8>
        len--;
 800a736:	69fb      	ldr	r3, [r7, #28]
 800a738:	3b01      	subs	r3, #1
 800a73a:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800a73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a73e:	2b10      	cmp	r3, #16
 800a740:	d10f      	bne.n	800a762 <_ntoa_format+0xee>
 800a742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a744:	f003 0320 	and.w	r3, r3, #32
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d10a      	bne.n	800a762 <_ntoa_format+0xee>
 800a74c:	69fb      	ldr	r3, [r7, #28]
 800a74e:	2b1f      	cmp	r3, #31
 800a750:	d807      	bhi.n	800a762 <_ntoa_format+0xee>
      buf[len++] = 'x';
 800a752:	69fb      	ldr	r3, [r7, #28]
 800a754:	1c5a      	adds	r2, r3, #1
 800a756:	61fa      	str	r2, [r7, #28]
 800a758:	69ba      	ldr	r2, [r7, #24]
 800a75a:	4413      	add	r3, r2
 800a75c:	2278      	movs	r2, #120	; 0x78
 800a75e:	701a      	strb	r2, [r3, #0]
 800a760:	e01f      	b.n	800a7a2 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800a762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a764:	2b10      	cmp	r3, #16
 800a766:	d10f      	bne.n	800a788 <_ntoa_format+0x114>
 800a768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a76a:	f003 0320 	and.w	r3, r3, #32
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d00a      	beq.n	800a788 <_ntoa_format+0x114>
 800a772:	69fb      	ldr	r3, [r7, #28]
 800a774:	2b1f      	cmp	r3, #31
 800a776:	d807      	bhi.n	800a788 <_ntoa_format+0x114>
      buf[len++] = 'X';
 800a778:	69fb      	ldr	r3, [r7, #28]
 800a77a:	1c5a      	adds	r2, r3, #1
 800a77c:	61fa      	str	r2, [r7, #28]
 800a77e:	69ba      	ldr	r2, [r7, #24]
 800a780:	4413      	add	r3, r2
 800a782:	2258      	movs	r2, #88	; 0x58
 800a784:	701a      	strb	r2, [r3, #0]
 800a786:	e00c      	b.n	800a7a2 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800a788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78a:	2b02      	cmp	r3, #2
 800a78c:	d109      	bne.n	800a7a2 <_ntoa_format+0x12e>
 800a78e:	69fb      	ldr	r3, [r7, #28]
 800a790:	2b1f      	cmp	r3, #31
 800a792:	d806      	bhi.n	800a7a2 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 800a794:	69fb      	ldr	r3, [r7, #28]
 800a796:	1c5a      	adds	r2, r3, #1
 800a798:	61fa      	str	r2, [r7, #28]
 800a79a:	69ba      	ldr	r2, [r7, #24]
 800a79c:	4413      	add	r3, r2
 800a79e:	2262      	movs	r2, #98	; 0x62
 800a7a0:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800a7a2:	69fb      	ldr	r3, [r7, #28]
 800a7a4:	2b1f      	cmp	r3, #31
 800a7a6:	d806      	bhi.n	800a7b6 <_ntoa_format+0x142>
      buf[len++] = '0';
 800a7a8:	69fb      	ldr	r3, [r7, #28]
 800a7aa:	1c5a      	adds	r2, r3, #1
 800a7ac:	61fa      	str	r2, [r7, #28]
 800a7ae:	69ba      	ldr	r2, [r7, #24]
 800a7b0:	4413      	add	r3, r2
 800a7b2:	2230      	movs	r2, #48	; 0x30
 800a7b4:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800a7b6:	69fb      	ldr	r3, [r7, #28]
 800a7b8:	2b1f      	cmp	r3, #31
 800a7ba:	d824      	bhi.n	800a806 <_ntoa_format+0x192>
    if (negative) {
 800a7bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d007      	beq.n	800a7d4 <_ntoa_format+0x160>
      buf[len++] = '-';
 800a7c4:	69fb      	ldr	r3, [r7, #28]
 800a7c6:	1c5a      	adds	r2, r3, #1
 800a7c8:	61fa      	str	r2, [r7, #28]
 800a7ca:	69ba      	ldr	r2, [r7, #24]
 800a7cc:	4413      	add	r3, r2
 800a7ce:	222d      	movs	r2, #45	; 0x2d
 800a7d0:	701a      	strb	r2, [r3, #0]
 800a7d2:	e018      	b.n	800a806 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 800a7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d6:	f003 0304 	and.w	r3, r3, #4
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d007      	beq.n	800a7ee <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800a7de:	69fb      	ldr	r3, [r7, #28]
 800a7e0:	1c5a      	adds	r2, r3, #1
 800a7e2:	61fa      	str	r2, [r7, #28]
 800a7e4:	69ba      	ldr	r2, [r7, #24]
 800a7e6:	4413      	add	r3, r2
 800a7e8:	222b      	movs	r2, #43	; 0x2b
 800a7ea:	701a      	strb	r2, [r3, #0]
 800a7ec:	e00b      	b.n	800a806 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 800a7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f0:	f003 0308 	and.w	r3, r3, #8
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d006      	beq.n	800a806 <_ntoa_format+0x192>
      buf[len++] = ' ';
 800a7f8:	69fb      	ldr	r3, [r7, #28]
 800a7fa:	1c5a      	adds	r2, r3, #1
 800a7fc:	61fa      	str	r2, [r7, #28]
 800a7fe:	69ba      	ldr	r2, [r7, #24]
 800a800:	4413      	add	r3, r2
 800a802:	2220      	movs	r2, #32
 800a804:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800a806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a808:	9303      	str	r3, [sp, #12]
 800a80a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a80c:	9302      	str	r3, [sp, #8]
 800a80e:	69fb      	ldr	r3, [r7, #28]
 800a810:	9301      	str	r3, [sp, #4]
 800a812:	69bb      	ldr	r3, [r7, #24]
 800a814:	9300      	str	r3, [sp, #0]
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	687a      	ldr	r2, [r7, #4]
 800a81a:	68b9      	ldr	r1, [r7, #8]
 800a81c:	68f8      	ldr	r0, [r7, #12]
 800a81e:	f7ff fed9 	bl	800a5d4 <_out_rev>
 800a822:	4603      	mov	r3, r0
}
 800a824:	4618      	mov	r0, r3
 800a826:	3710      	adds	r7, #16
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b096      	sub	sp, #88	; 0x58
 800a830:	af08      	add	r7, sp, #32
 800a832:	60f8      	str	r0, [r7, #12]
 800a834:	60b9      	str	r1, [r7, #8]
 800a836:	607a      	str	r2, [r7, #4]
 800a838:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800a83a:	2300      	movs	r3, #0
 800a83c:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800a83e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a840:	2b00      	cmp	r3, #0
 800a842:	d103      	bne.n	800a84c <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 800a844:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a846:	f023 0310 	bic.w	r3, r3, #16
 800a84a:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800a84c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a84e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a852:	2b00      	cmp	r3, #0
 800a854:	d002      	beq.n	800a85c <_ntoa_long+0x30>
 800a856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d032      	beq.n	800a8c2 <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 800a85c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a85e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a860:	fbb3 f2f2 	udiv	r2, r3, r2
 800a864:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a866:	fb01 f202 	mul.w	r2, r1, r2
 800a86a:	1a9b      	subs	r3, r3, r2
 800a86c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800a870:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a874:	2b09      	cmp	r3, #9
 800a876:	d804      	bhi.n	800a882 <_ntoa_long+0x56>
 800a878:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a87c:	3330      	adds	r3, #48	; 0x30
 800a87e:	b2da      	uxtb	r2, r3
 800a880:	e00d      	b.n	800a89e <_ntoa_long+0x72>
 800a882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a884:	f003 0320 	and.w	r3, r3, #32
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d001      	beq.n	800a890 <_ntoa_long+0x64>
 800a88c:	2241      	movs	r2, #65	; 0x41
 800a88e:	e000      	b.n	800a892 <_ntoa_long+0x66>
 800a890:	2261      	movs	r2, #97	; 0x61
 800a892:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a896:	4413      	add	r3, r2
 800a898:	b2db      	uxtb	r3, r3
 800a89a:	3b0a      	subs	r3, #10
 800a89c:	b2da      	uxtb	r2, r3
 800a89e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8a0:	1c59      	adds	r1, r3, #1
 800a8a2:	6379      	str	r1, [r7, #52]	; 0x34
 800a8a4:	3338      	adds	r3, #56	; 0x38
 800a8a6:	443b      	add	r3, r7
 800a8a8:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800a8ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a8ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8b4:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800a8b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d002      	beq.n	800a8c2 <_ntoa_long+0x96>
 800a8bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8be:	2b1f      	cmp	r3, #31
 800a8c0:	d9cc      	bls.n	800a85c <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800a8c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a8c4:	9306      	str	r3, [sp, #24]
 800a8c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8c8:	9305      	str	r3, [sp, #20]
 800a8ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8cc:	9304      	str	r3, [sp, #16]
 800a8ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8d0:	9303      	str	r3, [sp, #12]
 800a8d2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a8d6:	9302      	str	r3, [sp, #8]
 800a8d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8da:	9301      	str	r3, [sp, #4]
 800a8dc:	f107 0310 	add.w	r3, r7, #16
 800a8e0:	9300      	str	r3, [sp, #0]
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	687a      	ldr	r2, [r7, #4]
 800a8e6:	68b9      	ldr	r1, [r7, #8]
 800a8e8:	68f8      	ldr	r0, [r7, #12]
 800a8ea:	f7ff fec3 	bl	800a674 <_ntoa_format>
 800a8ee:	4603      	mov	r3, r0
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3738      	adds	r7, #56	; 0x38
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}

0800a8f8 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b096      	sub	sp, #88	; 0x58
 800a8fc:	af08      	add	r7, sp, #32
 800a8fe:	60f8      	str	r0, [r7, #12]
 800a900:	60b9      	str	r1, [r7, #8]
 800a902:	607a      	str	r2, [r7, #4]
 800a904:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800a906:	2300      	movs	r3, #0
 800a908:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800a90a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a90e:	4313      	orrs	r3, r2
 800a910:	d103      	bne.n	800a91a <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 800a912:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a914:	f023 0310 	bic.w	r3, r3, #16
 800a918:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800a91a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a91c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a920:	2b00      	cmp	r3, #0
 800a922:	d003      	beq.n	800a92c <_ntoa_long_long+0x34>
 800a924:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a928:	4313      	orrs	r3, r2
 800a92a:	d037      	beq.n	800a99c <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 800a92c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a930:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a934:	f7f6 fa10 	bl	8000d58 <__aeabi_uldivmod>
 800a938:	4613      	mov	r3, r2
 800a93a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800a93e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a942:	2b09      	cmp	r3, #9
 800a944:	d804      	bhi.n	800a950 <_ntoa_long_long+0x58>
 800a946:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a94a:	3330      	adds	r3, #48	; 0x30
 800a94c:	b2da      	uxtb	r2, r3
 800a94e:	e00d      	b.n	800a96c <_ntoa_long_long+0x74>
 800a950:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a952:	f003 0320 	and.w	r3, r3, #32
 800a956:	2b00      	cmp	r3, #0
 800a958:	d001      	beq.n	800a95e <_ntoa_long_long+0x66>
 800a95a:	2241      	movs	r2, #65	; 0x41
 800a95c:	e000      	b.n	800a960 <_ntoa_long_long+0x68>
 800a95e:	2261      	movs	r2, #97	; 0x61
 800a960:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a964:	4413      	add	r3, r2
 800a966:	b2db      	uxtb	r3, r3
 800a968:	3b0a      	subs	r3, #10
 800a96a:	b2da      	uxtb	r2, r3
 800a96c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a96e:	1c59      	adds	r1, r3, #1
 800a970:	6379      	str	r1, [r7, #52]	; 0x34
 800a972:	3338      	adds	r3, #56	; 0x38
 800a974:	443b      	add	r3, r7
 800a976:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800a97a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a97e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a982:	f7f6 f9e9 	bl	8000d58 <__aeabi_uldivmod>
 800a986:	4602      	mov	r2, r0
 800a988:	460b      	mov	r3, r1
 800a98a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800a98e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a992:	4313      	orrs	r3, r2
 800a994:	d002      	beq.n	800a99c <_ntoa_long_long+0xa4>
 800a996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a998:	2b1f      	cmp	r3, #31
 800a99a:	d9c7      	bls.n	800a92c <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800a99c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a99e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a9a0:	9206      	str	r2, [sp, #24]
 800a9a2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a9a4:	9205      	str	r2, [sp, #20]
 800a9a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a9a8:	9204      	str	r2, [sp, #16]
 800a9aa:	9303      	str	r3, [sp, #12]
 800a9ac:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800a9b0:	9302      	str	r3, [sp, #8]
 800a9b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9b4:	9301      	str	r3, [sp, #4]
 800a9b6:	f107 0310 	add.w	r3, r7, #16
 800a9ba:	9300      	str	r3, [sp, #0]
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	687a      	ldr	r2, [r7, #4]
 800a9c0:	68b9      	ldr	r1, [r7, #8]
 800a9c2:	68f8      	ldr	r0, [r7, #12]
 800a9c4:	f7ff fe56 	bl	800a674 <_ntoa_format>
 800a9c8:	4603      	mov	r3, r0
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3738      	adds	r7, #56	; 0x38
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}
 800a9d2:	0000      	movs	r0, r0
 800a9d4:	0000      	movs	r0, r0
	...

0800a9d8 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800a9d8:	b590      	push	{r4, r7, lr}
 800a9da:	b09d      	sub	sp, #116	; 0x74
 800a9dc:	af04      	add	r7, sp, #16
 800a9de:	6178      	str	r0, [r7, #20]
 800a9e0:	6139      	str	r1, [r7, #16]
 800a9e2:	60fa      	str	r2, [r7, #12]
 800a9e4:	60bb      	str	r3, [r7, #8]
 800a9e6:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 800a9ee:	f04f 0200 	mov.w	r2, #0
 800a9f2:	f04f 0300 	mov.w	r3, #0
 800a9f6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 800a9fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aa02:	f7f6 f879 	bl	8000af8 <__aeabi_dcmpeq>
 800aa06:	4603      	mov	r3, r0
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d10f      	bne.n	800aa2c <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 800aa0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa0e:	9303      	str	r3, [sp, #12]
 800aa10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa12:	9302      	str	r3, [sp, #8]
 800aa14:	2303      	movs	r3, #3
 800aa16:	9301      	str	r3, [sp, #4]
 800aa18:	4ba7      	ldr	r3, [pc, #668]	; (800acb8 <_ftoa+0x2e0>)
 800aa1a:	9300      	str	r3, [sp, #0]
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	68fa      	ldr	r2, [r7, #12]
 800aa20:	6939      	ldr	r1, [r7, #16]
 800aa22:	6978      	ldr	r0, [r7, #20]
 800aa24:	f7ff fdd6 	bl	800a5d4 <_out_rev>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	e222      	b.n	800ae72 <_ftoa+0x49a>
  if (value < -DBL_MAX)
 800aa2c:	f04f 32ff 	mov.w	r2, #4294967295
 800aa30:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800aa34:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aa38:	f7f6 f868 	bl	8000b0c <__aeabi_dcmplt>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d00f      	beq.n	800aa62 <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 800aa42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa44:	9303      	str	r3, [sp, #12]
 800aa46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa48:	9302      	str	r3, [sp, #8]
 800aa4a:	2304      	movs	r3, #4
 800aa4c:	9301      	str	r3, [sp, #4]
 800aa4e:	4b9b      	ldr	r3, [pc, #620]	; (800acbc <_ftoa+0x2e4>)
 800aa50:	9300      	str	r3, [sp, #0]
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	68fa      	ldr	r2, [r7, #12]
 800aa56:	6939      	ldr	r1, [r7, #16]
 800aa58:	6978      	ldr	r0, [r7, #20]
 800aa5a:	f7ff fdbb 	bl	800a5d4 <_out_rev>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	e207      	b.n	800ae72 <_ftoa+0x49a>
  if (value > DBL_MAX)
 800aa62:	f04f 32ff 	mov.w	r2, #4294967295
 800aa66:	4b96      	ldr	r3, [pc, #600]	; (800acc0 <_ftoa+0x2e8>)
 800aa68:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aa6c:	f7f6 f86c 	bl	8000b48 <__aeabi_dcmpgt>
 800aa70:	4603      	mov	r3, r0
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d01d      	beq.n	800aab2 <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 800aa76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa78:	f003 0304 	and.w	r3, r3, #4
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d001      	beq.n	800aa84 <_ftoa+0xac>
 800aa80:	4b90      	ldr	r3, [pc, #576]	; (800acc4 <_ftoa+0x2ec>)
 800aa82:	e000      	b.n	800aa86 <_ftoa+0xae>
 800aa84:	4b90      	ldr	r3, [pc, #576]	; (800acc8 <_ftoa+0x2f0>)
 800aa86:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800aa88:	f002 0204 	and.w	r2, r2, #4
 800aa8c:	2a00      	cmp	r2, #0
 800aa8e:	d001      	beq.n	800aa94 <_ftoa+0xbc>
 800aa90:	2204      	movs	r2, #4
 800aa92:	e000      	b.n	800aa96 <_ftoa+0xbe>
 800aa94:	2203      	movs	r2, #3
 800aa96:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800aa98:	9103      	str	r1, [sp, #12]
 800aa9a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800aa9c:	9102      	str	r1, [sp, #8]
 800aa9e:	9201      	str	r2, [sp, #4]
 800aaa0:	9300      	str	r3, [sp, #0]
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	68fa      	ldr	r2, [r7, #12]
 800aaa6:	6939      	ldr	r1, [r7, #16]
 800aaa8:	6978      	ldr	r0, [r7, #20]
 800aaaa:	f7ff fd93 	bl	800a5d4 <_out_rev>
 800aaae:	4603      	mov	r3, r0
 800aab0:	e1df      	b.n	800ae72 <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800aab2:	a37d      	add	r3, pc, #500	; (adr r3, 800aca8 <_ftoa+0x2d0>)
 800aab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aabc:	f7f6 f844 	bl	8000b48 <__aeabi_dcmpgt>
 800aac0:	4603      	mov	r3, r0
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d109      	bne.n	800aada <_ftoa+0x102>
 800aac6:	a37a      	add	r3, pc, #488	; (adr r3, 800acb0 <_ftoa+0x2d8>)
 800aac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aacc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aad0:	f7f6 f81c 	bl	8000b0c <__aeabi_dcmplt>
 800aad4:	4603      	mov	r3, r0
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d00f      	beq.n	800aafa <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800aada:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aadc:	9302      	str	r3, [sp, #8]
 800aade:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aae0:	9301      	str	r3, [sp, #4]
 800aae2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aae4:	9300      	str	r3, [sp, #0]
 800aae6:	ed97 0b00 	vldr	d0, [r7]
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	68fa      	ldr	r2, [r7, #12]
 800aaee:	6939      	ldr	r1, [r7, #16]
 800aaf0:	6978      	ldr	r0, [r7, #20]
 800aaf2:	f000 f9c9 	bl	800ae88 <_etoa>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	e1bb      	b.n	800ae72 <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 800aafa:	2300      	movs	r3, #0
 800aafc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 800ab00:	f04f 0200 	mov.w	r2, #0
 800ab04:	f04f 0300 	mov.w	r3, #0
 800ab08:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ab0c:	f7f5 fffe 	bl	8000b0c <__aeabi_dcmplt>
 800ab10:	4603      	mov	r3, r0
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d00e      	beq.n	800ab34 <_ftoa+0x15c>
    negative = true;
 800ab16:	2301      	movs	r3, #1
 800ab18:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 800ab1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab20:	f04f 0000 	mov.w	r0, #0
 800ab24:	f04f 0100 	mov.w	r1, #0
 800ab28:	f7f5 fbc6 	bl	80002b8 <__aeabi_dsub>
 800ab2c:	4602      	mov	r2, r0
 800ab2e:	460b      	mov	r3, r1
 800ab30:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 800ab34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d10d      	bne.n	800ab5a <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800ab3e:	2306      	movs	r3, #6
 800ab40:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800ab42:	e00a      	b.n	800ab5a <_ftoa+0x182>
    buf[len++] = '0';
 800ab44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab46:	1c5a      	adds	r2, r3, #1
 800ab48:	65fa      	str	r2, [r7, #92]	; 0x5c
 800ab4a:	3360      	adds	r3, #96	; 0x60
 800ab4c:	443b      	add	r3, r7
 800ab4e:	2230      	movs	r2, #48	; 0x30
 800ab50:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 800ab54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ab56:	3b01      	subs	r3, #1
 800ab58:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800ab5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab5c:	2b1f      	cmp	r3, #31
 800ab5e:	d802      	bhi.n	800ab66 <_ftoa+0x18e>
 800ab60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ab62:	2b09      	cmp	r3, #9
 800ab64:	d8ee      	bhi.n	800ab44 <_ftoa+0x16c>
  }

  int whole = (int)value;
 800ab66:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ab6a:	f7f6 f80d 	bl	8000b88 <__aeabi_d2iz>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 800ab72:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ab74:	f7f5 fcee 	bl	8000554 <__aeabi_i2d>
 800ab78:	4602      	mov	r2, r0
 800ab7a:	460b      	mov	r3, r1
 800ab7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ab80:	f7f5 fb9a 	bl	80002b8 <__aeabi_dsub>
 800ab84:	4602      	mov	r2, r0
 800ab86:	460b      	mov	r3, r1
 800ab88:	4610      	mov	r0, r2
 800ab8a:	4619      	mov	r1, r3
 800ab8c:	4a4f      	ldr	r2, [pc, #316]	; (800accc <_ftoa+0x2f4>)
 800ab8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ab90:	00db      	lsls	r3, r3, #3
 800ab92:	4413      	add	r3, r2
 800ab94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab98:	f7f5 fd46 	bl	8000628 <__aeabi_dmul>
 800ab9c:	4602      	mov	r2, r0
 800ab9e:	460b      	mov	r3, r1
 800aba0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 800aba4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800aba8:	f7f6 f816 	bl	8000bd8 <__aeabi_d2uiz>
 800abac:	4603      	mov	r3, r0
 800abae:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 800abb0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800abb2:	f7f5 fcbf 	bl	8000534 <__aeabi_ui2d>
 800abb6:	4602      	mov	r2, r0
 800abb8:	460b      	mov	r3, r1
 800abba:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800abbe:	f7f5 fb7b 	bl	80002b8 <__aeabi_dsub>
 800abc2:	4602      	mov	r2, r0
 800abc4:	460b      	mov	r3, r1
 800abc6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 800abca:	f04f 0200 	mov.w	r2, #0
 800abce:	4b40      	ldr	r3, [pc, #256]	; (800acd0 <_ftoa+0x2f8>)
 800abd0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800abd4:	f7f5 ffb8 	bl	8000b48 <__aeabi_dcmpgt>
 800abd8:	4603      	mov	r3, r0
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d016      	beq.n	800ac0c <_ftoa+0x234>
    ++frac;
 800abde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800abe0:	3301      	adds	r3, #1
 800abe2:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 800abe4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800abe6:	f7f5 fca5 	bl	8000534 <__aeabi_ui2d>
 800abea:	4a38      	ldr	r2, [pc, #224]	; (800accc <_ftoa+0x2f4>)
 800abec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800abee:	00db      	lsls	r3, r3, #3
 800abf0:	4413      	add	r3, r2
 800abf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf6:	f7f5 ff9d 	bl	8000b34 <__aeabi_dcmpge>
 800abfa:	4603      	mov	r3, r0
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d01a      	beq.n	800ac36 <_ftoa+0x25e>
      frac = 0;
 800ac00:	2300      	movs	r3, #0
 800ac02:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 800ac04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac06:	3301      	adds	r3, #1
 800ac08:	657b      	str	r3, [r7, #84]	; 0x54
 800ac0a:	e014      	b.n	800ac36 <_ftoa+0x25e>
    }
  }
  else if (diff < 0.5) {
 800ac0c:	f04f 0200 	mov.w	r2, #0
 800ac10:	4b2f      	ldr	r3, [pc, #188]	; (800acd0 <_ftoa+0x2f8>)
 800ac12:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800ac16:	f7f5 ff79 	bl	8000b0c <__aeabi_dcmplt>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d10a      	bne.n	800ac36 <_ftoa+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 800ac20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d004      	beq.n	800ac30 <_ftoa+0x258>
 800ac26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac28:	f003 0301 	and.w	r3, r3, #1
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d002      	beq.n	800ac36 <_ftoa+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 800ac30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac32:	3301      	adds	r3, #1
 800ac34:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 800ac36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d14b      	bne.n	800acd4 <_ftoa+0x2fc>
    diff = value - (double)whole;
 800ac3c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ac3e:	f7f5 fc89 	bl	8000554 <__aeabi_i2d>
 800ac42:	4602      	mov	r2, r0
 800ac44:	460b      	mov	r3, r1
 800ac46:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac4a:	f7f5 fb35 	bl	80002b8 <__aeabi_dsub>
 800ac4e:	4602      	mov	r2, r0
 800ac50:	460b      	mov	r3, r1
 800ac52:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 800ac56:	2301      	movs	r3, #1
 800ac58:	461c      	mov	r4, r3
 800ac5a:	f04f 0200 	mov.w	r2, #0
 800ac5e:	4b1c      	ldr	r3, [pc, #112]	; (800acd0 <_ftoa+0x2f8>)
 800ac60:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800ac64:	f7f5 ff52 	bl	8000b0c <__aeabi_dcmplt>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d101      	bne.n	800ac72 <_ftoa+0x29a>
 800ac6e:	2300      	movs	r3, #0
 800ac70:	461c      	mov	r4, r3
 800ac72:	b2e3      	uxtb	r3, r4
 800ac74:	f083 0301 	eor.w	r3, r3, #1
 800ac78:	b2db      	uxtb	r3, r3
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d109      	bne.n	800ac92 <_ftoa+0x2ba>
 800ac7e:	f04f 0200 	mov.w	r2, #0
 800ac82:	4b13      	ldr	r3, [pc, #76]	; (800acd0 <_ftoa+0x2f8>)
 800ac84:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800ac88:	f7f5 ff5e 	bl	8000b48 <__aeabi_dcmpgt>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d064      	beq.n	800ad5c <_ftoa+0x384>
 800ac92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac94:	f003 0301 	and.w	r3, r3, #1
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	f000 8081 	beq.w	800ada0 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 800ac9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aca0:	3301      	adds	r3, #1
 800aca2:	657b      	str	r3, [r7, #84]	; 0x54
 800aca4:	e07c      	b.n	800ada0 <_ftoa+0x3c8>
 800aca6:	bf00      	nop
 800aca8:	00000000 	.word	0x00000000
 800acac:	41cdcd65 	.word	0x41cdcd65
 800acb0:	00000000 	.word	0x00000000
 800acb4:	c1cdcd65 	.word	0xc1cdcd65
 800acb8:	0801f48c 	.word	0x0801f48c
 800acbc:	0801f490 	.word	0x0801f490
 800acc0:	7fefffff 	.word	0x7fefffff
 800acc4:	0801f498 	.word	0x0801f498
 800acc8:	0801f4a0 	.word	0x0801f4a0
 800accc:	080242d8 	.word	0x080242d8
 800acd0:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 800acd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800acd6:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800acd8:	e01f      	b.n	800ad1a <_ftoa+0x342>
      --count;
 800acda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acdc:	3b01      	subs	r3, #1
 800acde:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 800ace0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ace2:	4b66      	ldr	r3, [pc, #408]	; (800ae7c <_ftoa+0x4a4>)
 800ace4:	fba3 2301 	umull	r2, r3, r3, r1
 800ace8:	08da      	lsrs	r2, r3, #3
 800acea:	4613      	mov	r3, r2
 800acec:	009b      	lsls	r3, r3, #2
 800acee:	4413      	add	r3, r2
 800acf0:	005b      	lsls	r3, r3, #1
 800acf2:	1aca      	subs	r2, r1, r3
 800acf4:	b2d2      	uxtb	r2, r2
 800acf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800acf8:	1c59      	adds	r1, r3, #1
 800acfa:	65f9      	str	r1, [r7, #92]	; 0x5c
 800acfc:	3230      	adds	r2, #48	; 0x30
 800acfe:	b2d2      	uxtb	r2, r2
 800ad00:	3360      	adds	r3, #96	; 0x60
 800ad02:	443b      	add	r3, r7
 800ad04:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 800ad08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad0a:	4a5c      	ldr	r2, [pc, #368]	; (800ae7c <_ftoa+0x4a4>)
 800ad0c:	fba2 2303 	umull	r2, r3, r2, r3
 800ad10:	08db      	lsrs	r3, r3, #3
 800ad12:	653b      	str	r3, [r7, #80]	; 0x50
 800ad14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d003      	beq.n	800ad22 <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800ad1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad1c:	2b1f      	cmp	r3, #31
 800ad1e:	d9dc      	bls.n	800acda <_ftoa+0x302>
 800ad20:	e009      	b.n	800ad36 <_ftoa+0x35e>
        break;
 800ad22:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800ad24:	e007      	b.n	800ad36 <_ftoa+0x35e>
      buf[len++] = '0';
 800ad26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad28:	1c5a      	adds	r2, r3, #1
 800ad2a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800ad2c:	3360      	adds	r3, #96	; 0x60
 800ad2e:	443b      	add	r3, r7
 800ad30:	2230      	movs	r2, #48	; 0x30
 800ad32:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800ad36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad38:	2b1f      	cmp	r3, #31
 800ad3a:	d804      	bhi.n	800ad46 <_ftoa+0x36e>
 800ad3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad3e:	1e5a      	subs	r2, r3, #1
 800ad40:	64fa      	str	r2, [r7, #76]	; 0x4c
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d1ef      	bne.n	800ad26 <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800ad46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad48:	2b1f      	cmp	r3, #31
 800ad4a:	d829      	bhi.n	800ada0 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 800ad4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad4e:	1c5a      	adds	r2, r3, #1
 800ad50:	65fa      	str	r2, [r7, #92]	; 0x5c
 800ad52:	3360      	adds	r3, #96	; 0x60
 800ad54:	443b      	add	r3, r7
 800ad56:	222e      	movs	r2, #46	; 0x2e
 800ad58:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800ad5c:	e020      	b.n	800ada0 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 800ad5e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ad60:	4b47      	ldr	r3, [pc, #284]	; (800ae80 <_ftoa+0x4a8>)
 800ad62:	fb83 1302 	smull	r1, r3, r3, r2
 800ad66:	1099      	asrs	r1, r3, #2
 800ad68:	17d3      	asrs	r3, r2, #31
 800ad6a:	1ac9      	subs	r1, r1, r3
 800ad6c:	460b      	mov	r3, r1
 800ad6e:	009b      	lsls	r3, r3, #2
 800ad70:	440b      	add	r3, r1
 800ad72:	005b      	lsls	r3, r3, #1
 800ad74:	1ad1      	subs	r1, r2, r3
 800ad76:	b2ca      	uxtb	r2, r1
 800ad78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad7a:	1c59      	adds	r1, r3, #1
 800ad7c:	65f9      	str	r1, [r7, #92]	; 0x5c
 800ad7e:	3230      	adds	r2, #48	; 0x30
 800ad80:	b2d2      	uxtb	r2, r2
 800ad82:	3360      	adds	r3, #96	; 0x60
 800ad84:	443b      	add	r3, r7
 800ad86:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 800ad8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad8c:	4a3c      	ldr	r2, [pc, #240]	; (800ae80 <_ftoa+0x4a8>)
 800ad8e:	fb82 1203 	smull	r1, r2, r2, r3
 800ad92:	1092      	asrs	r2, r2, #2
 800ad94:	17db      	asrs	r3, r3, #31
 800ad96:	1ad3      	subs	r3, r2, r3
 800ad98:	657b      	str	r3, [r7, #84]	; 0x54
 800ad9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d003      	beq.n	800ada8 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800ada0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ada2:	2b1f      	cmp	r3, #31
 800ada4:	d9db      	bls.n	800ad5e <_ftoa+0x386>
 800ada6:	e000      	b.n	800adaa <_ftoa+0x3d2>
      break;
 800ada8:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800adaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800adac:	f003 0302 	and.w	r3, r3, #2
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d123      	bne.n	800adfc <_ftoa+0x424>
 800adb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800adb6:	f003 0301 	and.w	r3, r3, #1
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d01e      	beq.n	800adfc <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800adbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d014      	beq.n	800adee <_ftoa+0x416>
 800adc4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d104      	bne.n	800add6 <_ftoa+0x3fe>
 800adcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800adce:	f003 030c 	and.w	r3, r3, #12
 800add2:	2b00      	cmp	r3, #0
 800add4:	d00b      	beq.n	800adee <_ftoa+0x416>
      width--;
 800add6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800add8:	3b01      	subs	r3, #1
 800adda:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800addc:	e007      	b.n	800adee <_ftoa+0x416>
      buf[len++] = '0';
 800adde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ade0:	1c5a      	adds	r2, r3, #1
 800ade2:	65fa      	str	r2, [r7, #92]	; 0x5c
 800ade4:	3360      	adds	r3, #96	; 0x60
 800ade6:	443b      	add	r3, r7
 800ade8:	2230      	movs	r2, #48	; 0x30
 800adea:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800adee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800adf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800adf2:	429a      	cmp	r2, r3
 800adf4:	d202      	bcs.n	800adfc <_ftoa+0x424>
 800adf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800adf8:	2b1f      	cmp	r3, #31
 800adfa:	d9f0      	bls.n	800adde <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800adfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800adfe:	2b1f      	cmp	r3, #31
 800ae00:	d827      	bhi.n	800ae52 <_ftoa+0x47a>
    if (negative) {
 800ae02:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d008      	beq.n	800ae1c <_ftoa+0x444>
      buf[len++] = '-';
 800ae0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae0c:	1c5a      	adds	r2, r3, #1
 800ae0e:	65fa      	str	r2, [r7, #92]	; 0x5c
 800ae10:	3360      	adds	r3, #96	; 0x60
 800ae12:	443b      	add	r3, r7
 800ae14:	222d      	movs	r2, #45	; 0x2d
 800ae16:	f803 2c48 	strb.w	r2, [r3, #-72]
 800ae1a:	e01a      	b.n	800ae52 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 800ae1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae1e:	f003 0304 	and.w	r3, r3, #4
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d008      	beq.n	800ae38 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800ae26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae28:	1c5a      	adds	r2, r3, #1
 800ae2a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800ae2c:	3360      	adds	r3, #96	; 0x60
 800ae2e:	443b      	add	r3, r7
 800ae30:	222b      	movs	r2, #43	; 0x2b
 800ae32:	f803 2c48 	strb.w	r2, [r3, #-72]
 800ae36:	e00c      	b.n	800ae52 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 800ae38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae3a:	f003 0308 	and.w	r3, r3, #8
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d007      	beq.n	800ae52 <_ftoa+0x47a>
      buf[len++] = ' ';
 800ae42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae44:	1c5a      	adds	r2, r3, #1
 800ae46:	65fa      	str	r2, [r7, #92]	; 0x5c
 800ae48:	3360      	adds	r3, #96	; 0x60
 800ae4a:	443b      	add	r3, r7
 800ae4c:	2220      	movs	r2, #32
 800ae4e:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800ae52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae54:	9303      	str	r3, [sp, #12]
 800ae56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ae58:	9302      	str	r3, [sp, #8]
 800ae5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae5c:	9301      	str	r3, [sp, #4]
 800ae5e:	f107 0318 	add.w	r3, r7, #24
 800ae62:	9300      	str	r3, [sp, #0]
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	68fa      	ldr	r2, [r7, #12]
 800ae68:	6939      	ldr	r1, [r7, #16]
 800ae6a:	6978      	ldr	r0, [r7, #20]
 800ae6c:	f7ff fbb2 	bl	800a5d4 <_out_rev>
 800ae70:	4603      	mov	r3, r0
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	3764      	adds	r7, #100	; 0x64
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd90      	pop	{r4, r7, pc}
 800ae7a:	bf00      	nop
 800ae7c:	cccccccd 	.word	0xcccccccd
 800ae80:	66666667 	.word	0x66666667
 800ae84:	00000000 	.word	0x00000000

0800ae88 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800ae88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae8c:	b09f      	sub	sp, #124	; 0x7c
 800ae8e:	af06      	add	r7, sp, #24
 800ae90:	6278      	str	r0, [r7, #36]	; 0x24
 800ae92:	6239      	str	r1, [r7, #32]
 800ae94:	61fa      	str	r2, [r7, #28]
 800ae96:	61bb      	str	r3, [r7, #24]
 800ae98:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 800ae9c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800aea0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800aea4:	f7f5 fe28 	bl	8000af8 <__aeabi_dcmpeq>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d014      	beq.n	800aed8 <_etoa+0x50>
 800aeae:	f04f 32ff 	mov.w	r2, #4294967295
 800aeb2:	4bc1      	ldr	r3, [pc, #772]	; (800b1b8 <_etoa+0x330>)
 800aeb4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800aeb8:	f7f5 fe46 	bl	8000b48 <__aeabi_dcmpgt>
 800aebc:	4603      	mov	r3, r0
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d10a      	bne.n	800aed8 <_etoa+0x50>
 800aec2:	f04f 32ff 	mov.w	r2, #4294967295
 800aec6:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800aeca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800aece:	f7f5 fe1d 	bl	8000b0c <__aeabi_dcmplt>
 800aed2:	4603      	mov	r3, r0
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d012      	beq.n	800aefe <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800aed8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800aedc:	9302      	str	r3, [sp, #8]
 800aede:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aee2:	9301      	str	r3, [sp, #4]
 800aee4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aee8:	9300      	str	r3, [sp, #0]
 800aeea:	ed97 0b04 	vldr	d0, [r7, #16]
 800aeee:	69bb      	ldr	r3, [r7, #24]
 800aef0:	69fa      	ldr	r2, [r7, #28]
 800aef2:	6a39      	ldr	r1, [r7, #32]
 800aef4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aef6:	f7ff fd6f 	bl	800a9d8 <_ftoa>
 800aefa:	4603      	mov	r3, r0
 800aefc:	e23f      	b.n	800b37e <_etoa+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 800aefe:	2301      	movs	r3, #1
 800af00:	461e      	mov	r6, r3
 800af02:	f04f 0200 	mov.w	r2, #0
 800af06:	f04f 0300 	mov.w	r3, #0
 800af0a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800af0e:	f7f5 fdfd 	bl	8000b0c <__aeabi_dcmplt>
 800af12:	4603      	mov	r3, r0
 800af14:	2b00      	cmp	r3, #0
 800af16:	d101      	bne.n	800af1c <_etoa+0x94>
 800af18:	2300      	movs	r3, #0
 800af1a:	461e      	mov	r6, r3
 800af1c:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 800af20:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800af24:	2b00      	cmp	r3, #0
 800af26:	d009      	beq.n	800af3c <_etoa+0xb4>
    value = -value;
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	603b      	str	r3, [r7, #0]
 800af2c:	697b      	ldr	r3, [r7, #20]
 800af2e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800af32:	607b      	str	r3, [r7, #4]
 800af34:	ed97 7b00 	vldr	d7, [r7]
 800af38:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 800af3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800af40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af44:	2b00      	cmp	r3, #0
 800af46:	d102      	bne.n	800af4e <_etoa+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800af48:	2306      	movs	r3, #6
 800af4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 800af4e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800af52:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 800af56:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800af5a:	f04f 0200 	mov.w	r2, #0
 800af5e:	f04f 0300 	mov.w	r3, #0
 800af62:	0d0a      	lsrs	r2, r1, #20
 800af64:	2300      	movs	r3, #0
 800af66:	4613      	mov	r3, r2
 800af68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800af6c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800af70:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 800af72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800af76:	4690      	mov	r8, r2
 800af78:	f3c3 0913 	ubfx	r9, r3, #0, #20
 800af7c:	4644      	mov	r4, r8
 800af7e:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 800af82:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800af86:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800af8a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800af8c:	f7f5 fae2 	bl	8000554 <__aeabi_i2d>
 800af90:	a37d      	add	r3, pc, #500	; (adr r3, 800b188 <_etoa+0x300>)
 800af92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af96:	f7f5 fb47 	bl	8000628 <__aeabi_dmul>
 800af9a:	4602      	mov	r2, r0
 800af9c:	460b      	mov	r3, r1
 800af9e:	4610      	mov	r0, r2
 800afa0:	4619      	mov	r1, r3
 800afa2:	a37b      	add	r3, pc, #492	; (adr r3, 800b190 <_etoa+0x308>)
 800afa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa8:	f7f5 f988 	bl	80002bc <__adddf3>
 800afac:	4602      	mov	r2, r0
 800afae:	460b      	mov	r3, r1
 800afb0:	4614      	mov	r4, r2
 800afb2:	461d      	mov	r5, r3
 800afb4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800afb8:	f04f 0200 	mov.w	r2, #0
 800afbc:	4b7f      	ldr	r3, [pc, #508]	; (800b1bc <_etoa+0x334>)
 800afbe:	f7f5 f97b 	bl	80002b8 <__aeabi_dsub>
 800afc2:	4602      	mov	r2, r0
 800afc4:	460b      	mov	r3, r1
 800afc6:	4610      	mov	r0, r2
 800afc8:	4619      	mov	r1, r3
 800afca:	a373      	add	r3, pc, #460	; (adr r3, 800b198 <_etoa+0x310>)
 800afcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd0:	f7f5 fb2a 	bl	8000628 <__aeabi_dmul>
 800afd4:	4602      	mov	r2, r0
 800afd6:	460b      	mov	r3, r1
 800afd8:	4620      	mov	r0, r4
 800afda:	4629      	mov	r1, r5
 800afdc:	f7f5 f96e 	bl	80002bc <__adddf3>
 800afe0:	4602      	mov	r2, r0
 800afe2:	460b      	mov	r3, r1
 800afe4:	4610      	mov	r0, r2
 800afe6:	4619      	mov	r1, r3
 800afe8:	f7f5 fdce 	bl	8000b88 <__aeabi_d2iz>
 800afec:	4603      	mov	r3, r0
 800afee:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 800aff0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800aff2:	f7f5 faaf 	bl	8000554 <__aeabi_i2d>
 800aff6:	a36a      	add	r3, pc, #424	; (adr r3, 800b1a0 <_etoa+0x318>)
 800aff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800affc:	f7f5 fb14 	bl	8000628 <__aeabi_dmul>
 800b000:	4602      	mov	r2, r0
 800b002:	460b      	mov	r3, r1
 800b004:	4610      	mov	r0, r2
 800b006:	4619      	mov	r1, r3
 800b008:	f04f 0200 	mov.w	r2, #0
 800b00c:	4b6c      	ldr	r3, [pc, #432]	; (800b1c0 <_etoa+0x338>)
 800b00e:	f7f5 f955 	bl	80002bc <__adddf3>
 800b012:	4602      	mov	r2, r0
 800b014:	460b      	mov	r3, r1
 800b016:	4610      	mov	r0, r2
 800b018:	4619      	mov	r1, r3
 800b01a:	f7f5 fdb5 	bl	8000b88 <__aeabi_d2iz>
 800b01e:	4603      	mov	r3, r0
 800b020:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 800b022:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800b024:	f7f5 fa96 	bl	8000554 <__aeabi_i2d>
 800b028:	a35f      	add	r3, pc, #380	; (adr r3, 800b1a8 <_etoa+0x320>)
 800b02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b02e:	f7f5 fafb 	bl	8000628 <__aeabi_dmul>
 800b032:	4602      	mov	r2, r0
 800b034:	460b      	mov	r3, r1
 800b036:	4614      	mov	r4, r2
 800b038:	461d      	mov	r5, r3
 800b03a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b03c:	f7f5 fa8a 	bl	8000554 <__aeabi_i2d>
 800b040:	a35b      	add	r3, pc, #364	; (adr r3, 800b1b0 <_etoa+0x328>)
 800b042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b046:	f7f5 faef 	bl	8000628 <__aeabi_dmul>
 800b04a:	4602      	mov	r2, r0
 800b04c:	460b      	mov	r3, r1
 800b04e:	4620      	mov	r0, r4
 800b050:	4629      	mov	r1, r5
 800b052:	f7f5 f931 	bl	80002b8 <__aeabi_dsub>
 800b056:	4602      	mov	r2, r0
 800b058:	460b      	mov	r3, r1
 800b05a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 800b05e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b062:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800b066:	f7f5 fadf 	bl	8000628 <__aeabi_dmul>
 800b06a:	4602      	mov	r2, r0
 800b06c:	460b      	mov	r3, r1
 800b06e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 800b072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b074:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800b078:	17da      	asrs	r2, r3, #31
 800b07a:	469a      	mov	sl, r3
 800b07c:	4693      	mov	fp, r2
 800b07e:	f04f 0200 	mov.w	r2, #0
 800b082:	f04f 0300 	mov.w	r3, #0
 800b086:	ea4f 530a 	mov.w	r3, sl, lsl #20
 800b08a:	2200      	movs	r2, #0
 800b08c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 800b090:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800b094:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800b098:	4602      	mov	r2, r0
 800b09a:	460b      	mov	r3, r1
 800b09c:	f7f5 f90e 	bl	80002bc <__adddf3>
 800b0a0:	4602      	mov	r2, r0
 800b0a2:	460b      	mov	r3, r1
 800b0a4:	4690      	mov	r8, r2
 800b0a6:	4699      	mov	r9, r3
 800b0a8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b0ac:	f04f 0000 	mov.w	r0, #0
 800b0b0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800b0b4:	f7f5 f900 	bl	80002b8 <__aeabi_dsub>
 800b0b8:	4602      	mov	r2, r0
 800b0ba:	460b      	mov	r3, r1
 800b0bc:	4692      	mov	sl, r2
 800b0be:	469b      	mov	fp, r3
 800b0c0:	f04f 0200 	mov.w	r2, #0
 800b0c4:	4b3f      	ldr	r3, [pc, #252]	; (800b1c4 <_etoa+0x33c>)
 800b0c6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800b0ca:	f7f5 fbd7 	bl	800087c <__aeabi_ddiv>
 800b0ce:	4602      	mov	r2, r0
 800b0d0:	460b      	mov	r3, r1
 800b0d2:	4610      	mov	r0, r2
 800b0d4:	4619      	mov	r1, r3
 800b0d6:	f04f 0200 	mov.w	r2, #0
 800b0da:	4b3b      	ldr	r3, [pc, #236]	; (800b1c8 <_etoa+0x340>)
 800b0dc:	f7f5 f8ee 	bl	80002bc <__adddf3>
 800b0e0:	4602      	mov	r2, r0
 800b0e2:	460b      	mov	r3, r1
 800b0e4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800b0e8:	f7f5 fbc8 	bl	800087c <__aeabi_ddiv>
 800b0ec:	4602      	mov	r2, r0
 800b0ee:	460b      	mov	r3, r1
 800b0f0:	4610      	mov	r0, r2
 800b0f2:	4619      	mov	r1, r3
 800b0f4:	f04f 0200 	mov.w	r2, #0
 800b0f8:	4b34      	ldr	r3, [pc, #208]	; (800b1cc <_etoa+0x344>)
 800b0fa:	f7f5 f8df 	bl	80002bc <__adddf3>
 800b0fe:	4602      	mov	r2, r0
 800b100:	460b      	mov	r3, r1
 800b102:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800b106:	f7f5 fbb9 	bl	800087c <__aeabi_ddiv>
 800b10a:	4602      	mov	r2, r0
 800b10c:	460b      	mov	r3, r1
 800b10e:	4650      	mov	r0, sl
 800b110:	4659      	mov	r1, fp
 800b112:	f7f5 f8d3 	bl	80002bc <__adddf3>
 800b116:	4602      	mov	r2, r0
 800b118:	460b      	mov	r3, r1
 800b11a:	4640      	mov	r0, r8
 800b11c:	4649      	mov	r1, r9
 800b11e:	f7f5 fbad 	bl	800087c <__aeabi_ddiv>
 800b122:	4602      	mov	r2, r0
 800b124:	460b      	mov	r3, r1
 800b126:	4610      	mov	r0, r2
 800b128:	4619      	mov	r1, r3
 800b12a:	f04f 0200 	mov.w	r2, #0
 800b12e:	4b28      	ldr	r3, [pc, #160]	; (800b1d0 <_etoa+0x348>)
 800b130:	f7f5 f8c4 	bl	80002bc <__adddf3>
 800b134:	4602      	mov	r2, r0
 800b136:	460b      	mov	r3, r1
 800b138:	4620      	mov	r0, r4
 800b13a:	4629      	mov	r1, r5
 800b13c:	f7f5 fa74 	bl	8000628 <__aeabi_dmul>
 800b140:	4602      	mov	r2, r0
 800b142:	460b      	mov	r3, r1
 800b144:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 800b148:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b14c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b150:	f7f5 fcdc 	bl	8000b0c <__aeabi_dcmplt>
 800b154:	4603      	mov	r3, r0
 800b156:	2b00      	cmp	r3, #0
 800b158:	d00d      	beq.n	800b176 <_etoa+0x2ee>
    expval--;
 800b15a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b15c:	3b01      	subs	r3, #1
 800b15e:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 800b160:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800b164:	f04f 0200 	mov.w	r2, #0
 800b168:	4b17      	ldr	r3, [pc, #92]	; (800b1c8 <_etoa+0x340>)
 800b16a:	f7f5 fb87 	bl	800087c <__aeabi_ddiv>
 800b16e:	4602      	mov	r2, r0
 800b170:	460b      	mov	r3, r1
 800b172:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 800b176:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b178:	2b63      	cmp	r3, #99	; 0x63
 800b17a:	dc2b      	bgt.n	800b1d4 <_etoa+0x34c>
 800b17c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b17e:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800b182:	db27      	blt.n	800b1d4 <_etoa+0x34c>
 800b184:	2304      	movs	r3, #4
 800b186:	e026      	b.n	800b1d6 <_etoa+0x34e>
 800b188:	509f79fb 	.word	0x509f79fb
 800b18c:	3fd34413 	.word	0x3fd34413
 800b190:	8b60c8b3 	.word	0x8b60c8b3
 800b194:	3fc68a28 	.word	0x3fc68a28
 800b198:	636f4361 	.word	0x636f4361
 800b19c:	3fd287a7 	.word	0x3fd287a7
 800b1a0:	0979a371 	.word	0x0979a371
 800b1a4:	400a934f 	.word	0x400a934f
 800b1a8:	bbb55516 	.word	0xbbb55516
 800b1ac:	40026bb1 	.word	0x40026bb1
 800b1b0:	fefa39ef 	.word	0xfefa39ef
 800b1b4:	3fe62e42 	.word	0x3fe62e42
 800b1b8:	7fefffff 	.word	0x7fefffff
 800b1bc:	3ff80000 	.word	0x3ff80000
 800b1c0:	3fe00000 	.word	0x3fe00000
 800b1c4:	402c0000 	.word	0x402c0000
 800b1c8:	40240000 	.word	0x40240000
 800b1cc:	40180000 	.word	0x40180000
 800b1d0:	3ff00000 	.word	0x3ff00000
 800b1d4:	2305      	movs	r3, #5
 800b1d6:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 800b1d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b1dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d03d      	beq.n	800b260 <_etoa+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 800b1e4:	a368      	add	r3, pc, #416	; (adr r3, 800b388 <_etoa+0x500>)
 800b1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b1ee:	f7f5 fca1 	bl	8000b34 <__aeabi_dcmpge>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d024      	beq.n	800b242 <_etoa+0x3ba>
 800b1f8:	a365      	add	r3, pc, #404	; (adr r3, 800b390 <_etoa+0x508>)
 800b1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1fe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b202:	f7f5 fc83 	bl	8000b0c <__aeabi_dcmplt>
 800b206:	4603      	mov	r3, r0
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d01a      	beq.n	800b242 <_etoa+0x3ba>
      if ((int)prec > expval) {
 800b20c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b210:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b212:	429a      	cmp	r2, r3
 800b214:	da07      	bge.n	800b226 <_etoa+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 800b216:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b21a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b21c:	1ad3      	subs	r3, r2, r3
 800b21e:	3b01      	subs	r3, #1
 800b220:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b224:	e002      	b.n	800b22c <_etoa+0x3a4>
      }
      else {
        prec = 0;
 800b226:	2300      	movs	r3, #0
 800b228:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 800b22c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b230:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b234:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 800b238:	2300      	movs	r3, #0
 800b23a:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 800b23c:	2300      	movs	r3, #0
 800b23e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b240:	e00e      	b.n	800b260 <_etoa+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 800b242:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b246:	2b00      	cmp	r3, #0
 800b248:	d00a      	beq.n	800b260 <_etoa+0x3d8>
 800b24a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b24e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b252:	2b00      	cmp	r3, #0
 800b254:	d004      	beq.n	800b260 <_etoa+0x3d8>
        --prec;
 800b256:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b25a:	3b01      	subs	r3, #1
 800b25c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 800b260:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b264:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 800b266:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800b26a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b26c:	429a      	cmp	r2, r3
 800b26e:	d904      	bls.n	800b27a <_etoa+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 800b270:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b272:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b274:	1ad3      	subs	r3, r2, r3
 800b276:	657b      	str	r3, [r7, #84]	; 0x54
 800b278:	e001      	b.n	800b27e <_etoa+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 800b27a:	2300      	movs	r3, #0
 800b27c:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 800b27e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b282:	f003 0302 	and.w	r3, r3, #2
 800b286:	2b00      	cmp	r3, #0
 800b288:	d004      	beq.n	800b294 <_etoa+0x40c>
 800b28a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d001      	beq.n	800b294 <_etoa+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 800b290:	2300      	movs	r3, #0
 800b292:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 800b294:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b296:	2b00      	cmp	r3, #0
 800b298:	d009      	beq.n	800b2ae <_etoa+0x426>
    value /= conv.F;
 800b29a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b29e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b2a2:	f7f5 faeb 	bl	800087c <__aeabi_ddiv>
 800b2a6:	4602      	mov	r2, r0
 800b2a8:	460b      	mov	r3, r1
 800b2aa:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 800b2ae:	69fb      	ldr	r3, [r7, #28]
 800b2b0:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 800b2b2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d006      	beq.n	800b2c8 <_etoa+0x440>
 800b2ba:	693b      	ldr	r3, [r7, #16]
 800b2bc:	60bb      	str	r3, [r7, #8]
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b2c4:	60fb      	str	r3, [r7, #12]
 800b2c6:	e003      	b.n	800b2d0 <_etoa+0x448>
 800b2c8:	ed97 7b04 	vldr	d7, [r7, #16]
 800b2cc:	ed87 7b02 	vstr	d7, [r7, #8]
 800b2d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b2d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b2d8:	9302      	str	r3, [sp, #8]
 800b2da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b2dc:	9301      	str	r3, [sp, #4]
 800b2de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b2e2:	9300      	str	r3, [sp, #0]
 800b2e4:	ed97 0b02 	vldr	d0, [r7, #8]
 800b2e8:	69bb      	ldr	r3, [r7, #24]
 800b2ea:	69fa      	ldr	r2, [r7, #28]
 800b2ec:	6a39      	ldr	r1, [r7, #32]
 800b2ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b2f0:	f7ff fb72 	bl	800a9d8 <_ftoa>
 800b2f4:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 800b2f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d03f      	beq.n	800b37c <_etoa+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 800b2fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b300:	f003 0320 	and.w	r3, r3, #32
 800b304:	2b00      	cmp	r3, #0
 800b306:	d001      	beq.n	800b30c <_etoa+0x484>
 800b308:	2045      	movs	r0, #69	; 0x45
 800b30a:	e000      	b.n	800b30e <_etoa+0x486>
 800b30c:	2065      	movs	r0, #101	; 0x65
 800b30e:	69fa      	ldr	r2, [r7, #28]
 800b310:	1c53      	adds	r3, r2, #1
 800b312:	61fb      	str	r3, [r7, #28]
 800b314:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800b316:	69bb      	ldr	r3, [r7, #24]
 800b318:	6a39      	ldr	r1, [r7, #32]
 800b31a:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 800b31c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b31e:	2b00      	cmp	r3, #0
 800b320:	bfb8      	it	lt
 800b322:	425b      	neglt	r3, r3
 800b324:	4618      	mov	r0, r3
 800b326:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b328:	0fdb      	lsrs	r3, r3, #31
 800b32a:	b2db      	uxtb	r3, r3
 800b32c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b32e:	3a01      	subs	r2, #1
 800b330:	2105      	movs	r1, #5
 800b332:	9105      	str	r1, [sp, #20]
 800b334:	9204      	str	r2, [sp, #16]
 800b336:	2200      	movs	r2, #0
 800b338:	9203      	str	r2, [sp, #12]
 800b33a:	220a      	movs	r2, #10
 800b33c:	9202      	str	r2, [sp, #8]
 800b33e:	9301      	str	r3, [sp, #4]
 800b340:	9000      	str	r0, [sp, #0]
 800b342:	69bb      	ldr	r3, [r7, #24]
 800b344:	69fa      	ldr	r2, [r7, #28]
 800b346:	6a39      	ldr	r1, [r7, #32]
 800b348:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b34a:	f7ff fa6f 	bl	800a82c <_ntoa_long>
 800b34e:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 800b350:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b354:	f003 0302 	and.w	r3, r3, #2
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d00f      	beq.n	800b37c <_etoa+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 800b35c:	e007      	b.n	800b36e <_etoa+0x4e6>
 800b35e:	69fa      	ldr	r2, [r7, #28]
 800b360:	1c53      	adds	r3, r2, #1
 800b362:	61fb      	str	r3, [r7, #28]
 800b364:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800b366:	69bb      	ldr	r3, [r7, #24]
 800b368:	6a39      	ldr	r1, [r7, #32]
 800b36a:	2020      	movs	r0, #32
 800b36c:	47a0      	blx	r4
 800b36e:	69fa      	ldr	r2, [r7, #28]
 800b370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b372:	1ad3      	subs	r3, r2, r3
 800b374:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800b378:	429a      	cmp	r2, r3
 800b37a:	d8f0      	bhi.n	800b35e <_etoa+0x4d6>
    }
  }
  return idx;
 800b37c:	69fb      	ldr	r3, [r7, #28]
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3764      	adds	r7, #100	; 0x64
 800b382:	46bd      	mov	sp, r7
 800b384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b388:	eb1c432d 	.word	0xeb1c432d
 800b38c:	3f1a36e2 	.word	0x3f1a36e2
 800b390:	00000000 	.word	0x00000000
 800b394:	412e8480 	.word	0x412e8480

0800b398 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 800b398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b39c:	b0a3      	sub	sp, #140	; 0x8c
 800b39e:	af0a      	add	r7, sp, #40	; 0x28
 800b3a0:	6178      	str	r0, [r7, #20]
 800b3a2:	6139      	str	r1, [r7, #16]
 800b3a4:	60fa      	str	r2, [r7, #12]
 800b3a6:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	f040 84be 	bne.w	800bd30 <_vsnprintf+0x998>
    // use null output function
    out = _out_null;
 800b3b4:	4ba3      	ldr	r3, [pc, #652]	; (800b644 <_vsnprintf+0x2ac>)
 800b3b6:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 800b3b8:	f000 bcba 	b.w	800bd30 <_vsnprintf+0x998>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	781b      	ldrb	r3, [r3, #0]
 800b3c0:	2b25      	cmp	r3, #37	; 0x25
 800b3c2:	d00d      	beq.n	800b3e0 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	7818      	ldrb	r0, [r3, #0]
 800b3c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b3ca:	1c53      	adds	r3, r2, #1
 800b3cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b3ce:	697c      	ldr	r4, [r7, #20]
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	6939      	ldr	r1, [r7, #16]
 800b3d4:	47a0      	blx	r4
      format++;
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	3301      	adds	r3, #1
 800b3da:	60bb      	str	r3, [r7, #8]
      continue;
 800b3dc:	f000 bca8 	b.w	800bd30 <_vsnprintf+0x998>
    }
    else {
      // yes, evaluate it
      format++;
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	3301      	adds	r3, #1
 800b3e4:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	781b      	ldrb	r3, [r3, #0]
 800b3ee:	3b20      	subs	r3, #32
 800b3f0:	2b10      	cmp	r3, #16
 800b3f2:	d857      	bhi.n	800b4a4 <_vsnprintf+0x10c>
 800b3f4:	a201      	add	r2, pc, #4	; (adr r2, 800b3fc <_vsnprintf+0x64>)
 800b3f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3fa:	bf00      	nop
 800b3fc:	0800b47d 	.word	0x0800b47d
 800b400:	0800b4a5 	.word	0x0800b4a5
 800b404:	0800b4a5 	.word	0x0800b4a5
 800b408:	0800b491 	.word	0x0800b491
 800b40c:	0800b4a5 	.word	0x0800b4a5
 800b410:	0800b4a5 	.word	0x0800b4a5
 800b414:	0800b4a5 	.word	0x0800b4a5
 800b418:	0800b4a5 	.word	0x0800b4a5
 800b41c:	0800b4a5 	.word	0x0800b4a5
 800b420:	0800b4a5 	.word	0x0800b4a5
 800b424:	0800b4a5 	.word	0x0800b4a5
 800b428:	0800b469 	.word	0x0800b469
 800b42c:	0800b4a5 	.word	0x0800b4a5
 800b430:	0800b455 	.word	0x0800b455
 800b434:	0800b4a5 	.word	0x0800b4a5
 800b438:	0800b4a5 	.word	0x0800b4a5
 800b43c:	0800b441 	.word	0x0800b441
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 800b440:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b442:	f043 0301 	orr.w	r3, r3, #1
 800b446:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	3301      	adds	r3, #1
 800b44c:	60bb      	str	r3, [r7, #8]
 800b44e:	2301      	movs	r3, #1
 800b450:	653b      	str	r3, [r7, #80]	; 0x50
 800b452:	e02a      	b.n	800b4aa <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 800b454:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b456:	f043 0302 	orr.w	r3, r3, #2
 800b45a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	3301      	adds	r3, #1
 800b460:	60bb      	str	r3, [r7, #8]
 800b462:	2301      	movs	r3, #1
 800b464:	653b      	str	r3, [r7, #80]	; 0x50
 800b466:	e020      	b.n	800b4aa <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 800b468:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b46a:	f043 0304 	orr.w	r3, r3, #4
 800b46e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	3301      	adds	r3, #1
 800b474:	60bb      	str	r3, [r7, #8]
 800b476:	2301      	movs	r3, #1
 800b478:	653b      	str	r3, [r7, #80]	; 0x50
 800b47a:	e016      	b.n	800b4aa <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 800b47c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b47e:	f043 0308 	orr.w	r3, r3, #8
 800b482:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	3301      	adds	r3, #1
 800b488:	60bb      	str	r3, [r7, #8]
 800b48a:	2301      	movs	r3, #1
 800b48c:	653b      	str	r3, [r7, #80]	; 0x50
 800b48e:	e00c      	b.n	800b4aa <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 800b490:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b492:	f043 0310 	orr.w	r3, r3, #16
 800b496:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	3301      	adds	r3, #1
 800b49c:	60bb      	str	r3, [r7, #8]
 800b49e:	2301      	movs	r3, #1
 800b4a0:	653b      	str	r3, [r7, #80]	; 0x50
 800b4a2:	e002      	b.n	800b4aa <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	653b      	str	r3, [r7, #80]	; 0x50
 800b4a8:	bf00      	nop
      }
    } while (n);
 800b4aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d19c      	bne.n	800b3ea <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	781b      	ldrb	r3, [r3, #0]
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f7ff f850 	bl	800a55e <_is_digit>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d006      	beq.n	800b4d2 <_vsnprintf+0x13a>
      width = _atoi(&format);
 800b4c4:	f107 0308 	add.w	r3, r7, #8
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f7ff f85f 	bl	800a58c <_atoi>
 800b4ce:	65b8      	str	r0, [r7, #88]	; 0x58
 800b4d0:	e01a      	b.n	800b508 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 800b4d2:	68bb      	ldr	r3, [r7, #8]
 800b4d4:	781b      	ldrb	r3, [r3, #0]
 800b4d6:	2b2a      	cmp	r3, #42	; 0x2a
 800b4d8:	d116      	bne.n	800b508 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 800b4da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b4de:	1d1a      	adds	r2, r3, #4
 800b4e0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 800b4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	da07      	bge.n	800b4fe <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 800b4ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b4f0:	f043 0302 	orr.w	r3, r3, #2
 800b4f4:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 800b4f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4f8:	425b      	negs	r3, r3
 800b4fa:	65bb      	str	r3, [r7, #88]	; 0x58
 800b4fc:	e001      	b.n	800b502 <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 800b4fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b500:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	3301      	adds	r3, #1
 800b506:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 800b508:	2300      	movs	r3, #0
 800b50a:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	781b      	ldrb	r3, [r3, #0]
 800b510:	2b2e      	cmp	r3, #46	; 0x2e
 800b512:	d127      	bne.n	800b564 <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 800b514:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b516:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b51a:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	3301      	adds	r3, #1
 800b520:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	781b      	ldrb	r3, [r3, #0]
 800b526:	4618      	mov	r0, r3
 800b528:	f7ff f819 	bl	800a55e <_is_digit>
 800b52c:	4603      	mov	r3, r0
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d006      	beq.n	800b540 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 800b532:	f107 0308 	add.w	r3, r7, #8
 800b536:	4618      	mov	r0, r3
 800b538:	f7ff f828 	bl	800a58c <_atoi>
 800b53c:	6578      	str	r0, [r7, #84]	; 0x54
 800b53e:	e011      	b.n	800b564 <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	781b      	ldrb	r3, [r3, #0]
 800b544:	2b2a      	cmp	r3, #42	; 0x2a
 800b546:	d10d      	bne.n	800b564 <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 800b548:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b54c:	1d1a      	adds	r2, r3, #4
 800b54e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 800b556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b558:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b55c:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	3301      	adds	r3, #1
 800b562:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	781b      	ldrb	r3, [r3, #0]
 800b568:	3b68      	subs	r3, #104	; 0x68
 800b56a:	2b12      	cmp	r3, #18
 800b56c:	d866      	bhi.n	800b63c <_vsnprintf+0x2a4>
 800b56e:	a201      	add	r2, pc, #4	; (adr r2, 800b574 <_vsnprintf+0x1dc>)
 800b570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b574:	0800b5e7 	.word	0x0800b5e7
 800b578:	0800b63d 	.word	0x0800b63d
 800b57c:	0800b61d 	.word	0x0800b61d
 800b580:	0800b63d 	.word	0x0800b63d
 800b584:	0800b5c1 	.word	0x0800b5c1
 800b588:	0800b63d 	.word	0x0800b63d
 800b58c:	0800b63d 	.word	0x0800b63d
 800b590:	0800b63d 	.word	0x0800b63d
 800b594:	0800b63d 	.word	0x0800b63d
 800b598:	0800b63d 	.word	0x0800b63d
 800b59c:	0800b63d 	.word	0x0800b63d
 800b5a0:	0800b63d 	.word	0x0800b63d
 800b5a4:	0800b60d 	.word	0x0800b60d
 800b5a8:	0800b63d 	.word	0x0800b63d
 800b5ac:	0800b63d 	.word	0x0800b63d
 800b5b0:	0800b63d 	.word	0x0800b63d
 800b5b4:	0800b63d 	.word	0x0800b63d
 800b5b8:	0800b63d 	.word	0x0800b63d
 800b5bc:	0800b62d 	.word	0x0800b62d
      case 'l' :
        flags |= FLAGS_LONG;
 800b5c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b5c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b5c6:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	3301      	adds	r3, #1
 800b5cc:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	781b      	ldrb	r3, [r3, #0]
 800b5d2:	2b6c      	cmp	r3, #108	; 0x6c
 800b5d4:	d134      	bne.n	800b640 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 800b5d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b5d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b5dc:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 800b5de:	68bb      	ldr	r3, [r7, #8]
 800b5e0:	3301      	adds	r3, #1
 800b5e2:	60bb      	str	r3, [r7, #8]
        }
        break;
 800b5e4:	e02c      	b.n	800b640 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 800b5e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b5e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5ec:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	3301      	adds	r3, #1
 800b5f2:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	781b      	ldrb	r3, [r3, #0]
 800b5f8:	2b68      	cmp	r3, #104	; 0x68
 800b5fa:	d125      	bne.n	800b648 <_vsnprintf+0x2b0>
          flags |= FLAGS_CHAR;
 800b5fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b5fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b602:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	3301      	adds	r3, #1
 800b608:	60bb      	str	r3, [r7, #8]
        }
        break;
 800b60a:	e01d      	b.n	800b648 <_vsnprintf+0x2b0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800b60c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b60e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b612:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	3301      	adds	r3, #1
 800b618:	60bb      	str	r3, [r7, #8]
        break;
 800b61a:	e016      	b.n	800b64a <_vsnprintf+0x2b2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800b61c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b61e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b622:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	3301      	adds	r3, #1
 800b628:	60bb      	str	r3, [r7, #8]
        break;
 800b62a:	e00e      	b.n	800b64a <_vsnprintf+0x2b2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800b62c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b62e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b632:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	3301      	adds	r3, #1
 800b638:	60bb      	str	r3, [r7, #8]
        break;
 800b63a:	e006      	b.n	800b64a <_vsnprintf+0x2b2>
      default :
        break;
 800b63c:	bf00      	nop
 800b63e:	e004      	b.n	800b64a <_vsnprintf+0x2b2>
        break;
 800b640:	bf00      	nop
 800b642:	e002      	b.n	800b64a <_vsnprintf+0x2b2>
 800b644:	0800a509 	.word	0x0800a509
        break;
 800b648:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	781b      	ldrb	r3, [r3, #0]
 800b64e:	3b25      	subs	r3, #37	; 0x25
 800b650:	2b53      	cmp	r3, #83	; 0x53
 800b652:	f200 8360 	bhi.w	800bd16 <_vsnprintf+0x97e>
 800b656:	a201      	add	r2, pc, #4	; (adr r2, 800b65c <_vsnprintf+0x2c4>)
 800b658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b65c:	0800bcff 	.word	0x0800bcff
 800b660:	0800bd17 	.word	0x0800bd17
 800b664:	0800bd17 	.word	0x0800bd17
 800b668:	0800bd17 	.word	0x0800bd17
 800b66c:	0800bd17 	.word	0x0800bd17
 800b670:	0800bd17 	.word	0x0800bd17
 800b674:	0800bd17 	.word	0x0800bd17
 800b678:	0800bd17 	.word	0x0800bd17
 800b67c:	0800bd17 	.word	0x0800bd17
 800b680:	0800bd17 	.word	0x0800bd17
 800b684:	0800bd17 	.word	0x0800bd17
 800b688:	0800bd17 	.word	0x0800bd17
 800b68c:	0800bd17 	.word	0x0800bd17
 800b690:	0800bd17 	.word	0x0800bd17
 800b694:	0800bd17 	.word	0x0800bd17
 800b698:	0800bd17 	.word	0x0800bd17
 800b69c:	0800bd17 	.word	0x0800bd17
 800b6a0:	0800bd17 	.word	0x0800bd17
 800b6a4:	0800bd17 	.word	0x0800bd17
 800b6a8:	0800bd17 	.word	0x0800bd17
 800b6ac:	0800bd17 	.word	0x0800bd17
 800b6b0:	0800bd17 	.word	0x0800bd17
 800b6b4:	0800bd17 	.word	0x0800bd17
 800b6b8:	0800bd17 	.word	0x0800bd17
 800b6bc:	0800bd17 	.word	0x0800bd17
 800b6c0:	0800bd17 	.word	0x0800bd17
 800b6c4:	0800bd17 	.word	0x0800bd17
 800b6c8:	0800bd17 	.word	0x0800bd17
 800b6cc:	0800bd17 	.word	0x0800bd17
 800b6d0:	0800bd17 	.word	0x0800bd17
 800b6d4:	0800bd17 	.word	0x0800bd17
 800b6d8:	0800bd17 	.word	0x0800bd17
 800b6dc:	0800bab3 	.word	0x0800bab3
 800b6e0:	0800ba63 	.word	0x0800ba63
 800b6e4:	0800bab3 	.word	0x0800bab3
 800b6e8:	0800bd17 	.word	0x0800bd17
 800b6ec:	0800bd17 	.word	0x0800bd17
 800b6f0:	0800bd17 	.word	0x0800bd17
 800b6f4:	0800bd17 	.word	0x0800bd17
 800b6f8:	0800bd17 	.word	0x0800bd17
 800b6fc:	0800bd17 	.word	0x0800bd17
 800b700:	0800bd17 	.word	0x0800bd17
 800b704:	0800bd17 	.word	0x0800bd17
 800b708:	0800bd17 	.word	0x0800bd17
 800b70c:	0800bd17 	.word	0x0800bd17
 800b710:	0800bd17 	.word	0x0800bd17
 800b714:	0800bd17 	.word	0x0800bd17
 800b718:	0800bd17 	.word	0x0800bd17
 800b71c:	0800bd17 	.word	0x0800bd17
 800b720:	0800bd17 	.word	0x0800bd17
 800b724:	0800bd17 	.word	0x0800bd17
 800b728:	0800b7ad 	.word	0x0800b7ad
 800b72c:	0800bd17 	.word	0x0800bd17
 800b730:	0800bd17 	.word	0x0800bd17
 800b734:	0800bd17 	.word	0x0800bd17
 800b738:	0800bd17 	.word	0x0800bd17
 800b73c:	0800bd17 	.word	0x0800bd17
 800b740:	0800bd17 	.word	0x0800bd17
 800b744:	0800bd17 	.word	0x0800bd17
 800b748:	0800bd17 	.word	0x0800bd17
 800b74c:	0800bd17 	.word	0x0800bd17
 800b750:	0800b7ad 	.word	0x0800b7ad
 800b754:	0800bb23 	.word	0x0800bb23
 800b758:	0800b7ad 	.word	0x0800b7ad
 800b75c:	0800bab3 	.word	0x0800bab3
 800b760:	0800ba63 	.word	0x0800ba63
 800b764:	0800bab3 	.word	0x0800bab3
 800b768:	0800bd17 	.word	0x0800bd17
 800b76c:	0800b7ad 	.word	0x0800b7ad
 800b770:	0800bd17 	.word	0x0800bd17
 800b774:	0800bd17 	.word	0x0800bd17
 800b778:	0800bd17 	.word	0x0800bd17
 800b77c:	0800bd17 	.word	0x0800bd17
 800b780:	0800bd17 	.word	0x0800bd17
 800b784:	0800b7ad 	.word	0x0800b7ad
 800b788:	0800bc63 	.word	0x0800bc63
 800b78c:	0800bd17 	.word	0x0800bd17
 800b790:	0800bd17 	.word	0x0800bd17
 800b794:	0800bb9b 	.word	0x0800bb9b
 800b798:	0800bd17 	.word	0x0800bd17
 800b79c:	0800b7ad 	.word	0x0800b7ad
 800b7a0:	0800bd17 	.word	0x0800bd17
 800b7a4:	0800bd17 	.word	0x0800bd17
 800b7a8:	0800b7ad 	.word	0x0800b7ad
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	781b      	ldrb	r3, [r3, #0]
 800b7b0:	2b78      	cmp	r3, #120	; 0x78
 800b7b2:	d003      	beq.n	800b7bc <_vsnprintf+0x424>
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	781b      	ldrb	r3, [r3, #0]
 800b7b8:	2b58      	cmp	r3, #88	; 0x58
 800b7ba:	d102      	bne.n	800b7c2 <_vsnprintf+0x42a>
          base = 16U;
 800b7bc:	2310      	movs	r3, #16
 800b7be:	64bb      	str	r3, [r7, #72]	; 0x48
 800b7c0:	e013      	b.n	800b7ea <_vsnprintf+0x452>
        }
        else if (*format == 'o') {
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	781b      	ldrb	r3, [r3, #0]
 800b7c6:	2b6f      	cmp	r3, #111	; 0x6f
 800b7c8:	d102      	bne.n	800b7d0 <_vsnprintf+0x438>
          base =  8U;
 800b7ca:	2308      	movs	r3, #8
 800b7cc:	64bb      	str	r3, [r7, #72]	; 0x48
 800b7ce:	e00c      	b.n	800b7ea <_vsnprintf+0x452>
        }
        else if (*format == 'b') {
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	781b      	ldrb	r3, [r3, #0]
 800b7d4:	2b62      	cmp	r3, #98	; 0x62
 800b7d6:	d102      	bne.n	800b7de <_vsnprintf+0x446>
          base =  2U;
 800b7d8:	2302      	movs	r3, #2
 800b7da:	64bb      	str	r3, [r7, #72]	; 0x48
 800b7dc:	e005      	b.n	800b7ea <_vsnprintf+0x452>
        }
        else {
          base = 10U;
 800b7de:	230a      	movs	r3, #10
 800b7e0:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800b7e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b7e4:	f023 0310 	bic.w	r3, r3, #16
 800b7e8:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	781b      	ldrb	r3, [r3, #0]
 800b7ee:	2b58      	cmp	r3, #88	; 0x58
 800b7f0:	d103      	bne.n	800b7fa <_vsnprintf+0x462>
          flags |= FLAGS_UPPERCASE;
 800b7f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b7f4:	f043 0320 	orr.w	r3, r3, #32
 800b7f8:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	781b      	ldrb	r3, [r3, #0]
 800b7fe:	2b69      	cmp	r3, #105	; 0x69
 800b800:	d007      	beq.n	800b812 <_vsnprintf+0x47a>
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	781b      	ldrb	r3, [r3, #0]
 800b806:	2b64      	cmp	r3, #100	; 0x64
 800b808:	d003      	beq.n	800b812 <_vsnprintf+0x47a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800b80a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b80c:	f023 030c 	bic.w	r3, r3, #12
 800b810:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 800b812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d003      	beq.n	800b824 <_vsnprintf+0x48c>
          flags &= ~FLAGS_ZEROPAD;
 800b81c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b81e:	f023 0301 	bic.w	r3, r3, #1
 800b822:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	781b      	ldrb	r3, [r3, #0]
 800b828:	2b69      	cmp	r3, #105	; 0x69
 800b82a:	d004      	beq.n	800b836 <_vsnprintf+0x49e>
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	781b      	ldrb	r3, [r3, #0]
 800b830:	2b64      	cmp	r3, #100	; 0x64
 800b832:	f040 8098 	bne.w	800b966 <_vsnprintf+0x5ce>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 800b836:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b838:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d031      	beq.n	800b8a4 <_vsnprintf+0x50c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 800b840:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b844:	3307      	adds	r3, #7
 800b846:	f023 0307 	bic.w	r3, r3, #7
 800b84a:	f103 0208 	add.w	r2, r3, #8
 800b84e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800b852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b856:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800b85a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	da06      	bge.n	800b870 <_vsnprintf+0x4d8>
 800b862:	2100      	movs	r1, #0
 800b864:	f1d2 0800 	rsbs	r8, r2, #0
 800b868:	eb61 0903 	sbc.w	r9, r1, r3
 800b86c:	4642      	mov	r2, r8
 800b86e:	464b      	mov	r3, r9
 800b870:	69f9      	ldr	r1, [r7, #28]
 800b872:	0fc9      	lsrs	r1, r1, #31
 800b874:	b2c9      	uxtb	r1, r1
 800b876:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b878:	2400      	movs	r4, #0
 800b87a:	4682      	mov	sl, r0
 800b87c:	46a3      	mov	fp, r4
 800b87e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800b880:	9008      	str	r0, [sp, #32]
 800b882:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b884:	9007      	str	r0, [sp, #28]
 800b886:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b888:	9006      	str	r0, [sp, #24]
 800b88a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800b88e:	9102      	str	r1, [sp, #8]
 800b890:	e9cd 2300 	strd	r2, r3, [sp]
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b898:	6939      	ldr	r1, [r7, #16]
 800b89a:	6978      	ldr	r0, [r7, #20]
 800b89c:	f7ff f82c 	bl	800a8f8 <_ntoa_long_long>
 800b8a0:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 800b8a2:	e0da      	b.n	800ba5a <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800b8a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b8a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d020      	beq.n	800b8f0 <_vsnprintf+0x558>
            const long value = va_arg(va, long);
 800b8ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b8b2:	1d1a      	adds	r2, r3, #4
 800b8b4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800b8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	bfb8      	it	lt
 800b8c2:	425b      	neglt	r3, r3
 800b8c4:	4619      	mov	r1, r3
 800b8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c8:	0fdb      	lsrs	r3, r3, #31
 800b8ca:	b2db      	uxtb	r3, r3
 800b8cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b8ce:	9205      	str	r2, [sp, #20]
 800b8d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b8d2:	9204      	str	r2, [sp, #16]
 800b8d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b8d6:	9203      	str	r2, [sp, #12]
 800b8d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b8da:	9202      	str	r2, [sp, #8]
 800b8dc:	9301      	str	r3, [sp, #4]
 800b8de:	9100      	str	r1, [sp, #0]
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b8e4:	6939      	ldr	r1, [r7, #16]
 800b8e6:	6978      	ldr	r0, [r7, #20]
 800b8e8:	f7fe ffa0 	bl	800a82c <_ntoa_long>
 800b8ec:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 800b8ee:	e0b4      	b.n	800ba5a <_vsnprintf+0x6c2>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800b8f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b8f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d007      	beq.n	800b90a <_vsnprintf+0x572>
 800b8fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b8fe:	1d1a      	adds	r2, r3, #4
 800b900:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	b2db      	uxtb	r3, r3
 800b908:	e012      	b.n	800b930 <_vsnprintf+0x598>
 800b90a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b90c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b910:	2b00      	cmp	r3, #0
 800b912:	d007      	beq.n	800b924 <_vsnprintf+0x58c>
 800b914:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b918:	1d1a      	adds	r2, r3, #4
 800b91a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	b21b      	sxth	r3, r3
 800b922:	e005      	b.n	800b930 <_vsnprintf+0x598>
 800b924:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b928:	1d1a      	adds	r2, r3, #4
 800b92a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800b932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b934:	2b00      	cmp	r3, #0
 800b936:	bfb8      	it	lt
 800b938:	425b      	neglt	r3, r3
 800b93a:	4619      	mov	r1, r3
 800b93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b93e:	0fdb      	lsrs	r3, r3, #31
 800b940:	b2db      	uxtb	r3, r3
 800b942:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b944:	9205      	str	r2, [sp, #20]
 800b946:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b948:	9204      	str	r2, [sp, #16]
 800b94a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b94c:	9203      	str	r2, [sp, #12]
 800b94e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b950:	9202      	str	r2, [sp, #8]
 800b952:	9301      	str	r3, [sp, #4]
 800b954:	9100      	str	r1, [sp, #0]
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b95a:	6939      	ldr	r1, [r7, #16]
 800b95c:	6978      	ldr	r0, [r7, #20]
 800b95e:	f7fe ff65 	bl	800a82c <_ntoa_long>
 800b962:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 800b964:	e079      	b.n	800ba5a <_vsnprintf+0x6c2>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 800b966:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b968:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d022      	beq.n	800b9b6 <_vsnprintf+0x61e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 800b970:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b974:	3307      	adds	r3, #7
 800b976:	f023 0307 	bic.w	r3, r3, #7
 800b97a:	f103 0208 	add.w	r2, r3, #8
 800b97e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800b982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b986:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b988:	2000      	movs	r0, #0
 800b98a:	460d      	mov	r5, r1
 800b98c:	4606      	mov	r6, r0
 800b98e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800b990:	9108      	str	r1, [sp, #32]
 800b992:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b994:	9107      	str	r1, [sp, #28]
 800b996:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b998:	9106      	str	r1, [sp, #24]
 800b99a:	e9cd 5604 	strd	r5, r6, [sp, #16]
 800b99e:	2100      	movs	r1, #0
 800b9a0:	9102      	str	r1, [sp, #8]
 800b9a2:	e9cd 2300 	strd	r2, r3, [sp]
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b9aa:	6939      	ldr	r1, [r7, #16]
 800b9ac:	6978      	ldr	r0, [r7, #20]
 800b9ae:	f7fe ffa3 	bl	800a8f8 <_ntoa_long_long>
 800b9b2:	64f8      	str	r0, [r7, #76]	; 0x4c
 800b9b4:	e051      	b.n	800ba5a <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800b9b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b9b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d018      	beq.n	800b9f2 <_vsnprintf+0x65a>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 800b9c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b9c4:	1d1a      	adds	r2, r3, #4
 800b9c6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b9ce:	9205      	str	r2, [sp, #20]
 800b9d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b9d2:	9204      	str	r2, [sp, #16]
 800b9d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b9d6:	9203      	str	r2, [sp, #12]
 800b9d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b9da:	9202      	str	r2, [sp, #8]
 800b9dc:	2200      	movs	r2, #0
 800b9de:	9201      	str	r2, [sp, #4]
 800b9e0:	9300      	str	r3, [sp, #0]
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b9e6:	6939      	ldr	r1, [r7, #16]
 800b9e8:	6978      	ldr	r0, [r7, #20]
 800b9ea:	f7fe ff1f 	bl	800a82c <_ntoa_long>
 800b9ee:	64f8      	str	r0, [r7, #76]	; 0x4c
 800b9f0:	e033      	b.n	800ba5a <_vsnprintf+0x6c2>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800b9f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b9f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d007      	beq.n	800ba0c <_vsnprintf+0x674>
 800b9fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ba00:	1d1a      	adds	r2, r3, #4
 800ba02:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	b2db      	uxtb	r3, r3
 800ba0a:	e012      	b.n	800ba32 <_vsnprintf+0x69a>
 800ba0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d007      	beq.n	800ba26 <_vsnprintf+0x68e>
 800ba16:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ba1a:	1d1a      	adds	r2, r3, #4
 800ba1c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	b29b      	uxth	r3, r3
 800ba24:	e005      	b.n	800ba32 <_vsnprintf+0x69a>
 800ba26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ba2a:	1d1a      	adds	r2, r3, #4
 800ba2c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800ba34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba36:	9305      	str	r3, [sp, #20]
 800ba38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ba3a:	9304      	str	r3, [sp, #16]
 800ba3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba3e:	9303      	str	r3, [sp, #12]
 800ba40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba42:	9302      	str	r3, [sp, #8]
 800ba44:	2300      	movs	r3, #0
 800ba46:	9301      	str	r3, [sp, #4]
 800ba48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba4a:	9300      	str	r3, [sp, #0]
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ba50:	6939      	ldr	r1, [r7, #16]
 800ba52:	6978      	ldr	r0, [r7, #20]
 800ba54:	f7fe feea 	bl	800a82c <_ntoa_long>
 800ba58:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	3301      	adds	r3, #1
 800ba5e:	60bb      	str	r3, [r7, #8]
        break;
 800ba60:	e166      	b.n	800bd30 <_vsnprintf+0x998>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 800ba62:	68bb      	ldr	r3, [r7, #8]
 800ba64:	781b      	ldrb	r3, [r3, #0]
 800ba66:	2b46      	cmp	r3, #70	; 0x46
 800ba68:	d103      	bne.n	800ba72 <_vsnprintf+0x6da>
 800ba6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba6c:	f043 0320 	orr.w	r3, r3, #32
 800ba70:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800ba72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ba76:	3307      	adds	r3, #7
 800ba78:	f023 0307 	bic.w	r3, r3, #7
 800ba7c:	f103 0208 	add.w	r2, r3, #8
 800ba80:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800ba84:	ed93 7b00 	vldr	d7, [r3]
 800ba88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba8a:	9302      	str	r3, [sp, #8]
 800ba8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ba8e:	9301      	str	r3, [sp, #4]
 800ba90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba92:	9300      	str	r3, [sp, #0]
 800ba94:	eeb0 0a47 	vmov.f32	s0, s14
 800ba98:	eef0 0a67 	vmov.f32	s1, s15
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800baa0:	6939      	ldr	r1, [r7, #16]
 800baa2:	6978      	ldr	r0, [r7, #20]
 800baa4:	f7fe ff98 	bl	800a9d8 <_ftoa>
 800baa8:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	3301      	adds	r3, #1
 800baae:	60bb      	str	r3, [r7, #8]
        break;
 800bab0:	e13e      	b.n	800bd30 <_vsnprintf+0x998>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	781b      	ldrb	r3, [r3, #0]
 800bab6:	2b67      	cmp	r3, #103	; 0x67
 800bab8:	d003      	beq.n	800bac2 <_vsnprintf+0x72a>
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	781b      	ldrb	r3, [r3, #0]
 800babe:	2b47      	cmp	r3, #71	; 0x47
 800bac0:	d103      	bne.n	800baca <_vsnprintf+0x732>
 800bac2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bac4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800bac8:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	781b      	ldrb	r3, [r3, #0]
 800bace:	2b45      	cmp	r3, #69	; 0x45
 800bad0:	d003      	beq.n	800bada <_vsnprintf+0x742>
 800bad2:	68bb      	ldr	r3, [r7, #8]
 800bad4:	781b      	ldrb	r3, [r3, #0]
 800bad6:	2b47      	cmp	r3, #71	; 0x47
 800bad8:	d103      	bne.n	800bae2 <_vsnprintf+0x74a>
 800bada:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800badc:	f043 0320 	orr.w	r3, r3, #32
 800bae0:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800bae2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bae6:	3307      	adds	r3, #7
 800bae8:	f023 0307 	bic.w	r3, r3, #7
 800baec:	f103 0208 	add.w	r2, r3, #8
 800baf0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800baf4:	ed93 7b00 	vldr	d7, [r3]
 800baf8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bafa:	9302      	str	r3, [sp, #8]
 800bafc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bafe:	9301      	str	r3, [sp, #4]
 800bb00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb02:	9300      	str	r3, [sp, #0]
 800bb04:	eeb0 0a47 	vmov.f32	s0, s14
 800bb08:	eef0 0a67 	vmov.f32	s1, s15
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bb10:	6939      	ldr	r1, [r7, #16]
 800bb12:	6978      	ldr	r0, [r7, #20]
 800bb14:	f7ff f9b8 	bl	800ae88 <_etoa>
 800bb18:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 800bb1a:	68bb      	ldr	r3, [r7, #8]
 800bb1c:	3301      	adds	r3, #1
 800bb1e:	60bb      	str	r3, [r7, #8]
        break;
 800bb20:	e106      	b.n	800bd30 <_vsnprintf+0x998>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 800bb22:	2301      	movs	r3, #1
 800bb24:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 800bb26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb28:	f003 0302 	and.w	r3, r3, #2
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d10e      	bne.n	800bb4e <_vsnprintf+0x7b6>
          while (l++ < width) {
 800bb30:	e007      	b.n	800bb42 <_vsnprintf+0x7aa>
            out(' ', buffer, idx++, maxlen);
 800bb32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bb34:	1c53      	adds	r3, r2, #1
 800bb36:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bb38:	697c      	ldr	r4, [r7, #20]
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	6939      	ldr	r1, [r7, #16]
 800bb3e:	2020      	movs	r0, #32
 800bb40:	47a0      	blx	r4
          while (l++ < width) {
 800bb42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb44:	1c5a      	adds	r2, r3, #1
 800bb46:	647a      	str	r2, [r7, #68]	; 0x44
 800bb48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bb4a:	429a      	cmp	r2, r3
 800bb4c:	d8f1      	bhi.n	800bb32 <_vsnprintf+0x79a>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 800bb4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bb52:	1d1a      	adds	r2, r3, #4
 800bb54:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	b2d8      	uxtb	r0, r3
 800bb5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bb5e:	1c53      	adds	r3, r2, #1
 800bb60:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bb62:	697c      	ldr	r4, [r7, #20]
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	6939      	ldr	r1, [r7, #16]
 800bb68:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 800bb6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb6c:	f003 0302 	and.w	r3, r3, #2
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d00e      	beq.n	800bb92 <_vsnprintf+0x7fa>
          while (l++ < width) {
 800bb74:	e007      	b.n	800bb86 <_vsnprintf+0x7ee>
            out(' ', buffer, idx++, maxlen);
 800bb76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bb78:	1c53      	adds	r3, r2, #1
 800bb7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bb7c:	697c      	ldr	r4, [r7, #20]
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	6939      	ldr	r1, [r7, #16]
 800bb82:	2020      	movs	r0, #32
 800bb84:	47a0      	blx	r4
          while (l++ < width) {
 800bb86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb88:	1c5a      	adds	r2, r3, #1
 800bb8a:	647a      	str	r2, [r7, #68]	; 0x44
 800bb8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bb8e:	429a      	cmp	r2, r3
 800bb90:	d8f1      	bhi.n	800bb76 <_vsnprintf+0x7de>
          }
        }
        format++;
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	3301      	adds	r3, #1
 800bb96:	60bb      	str	r3, [r7, #8]
        break;
 800bb98:	e0ca      	b.n	800bd30 <_vsnprintf+0x998>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 800bb9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bb9e:	1d1a      	adds	r2, r3, #4
 800bba0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 800bba8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d001      	beq.n	800bbb2 <_vsnprintf+0x81a>
 800bbae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bbb0:	e001      	b.n	800bbb6 <_vsnprintf+0x81e>
 800bbb2:	f04f 33ff 	mov.w	r3, #4294967295
 800bbb6:	4619      	mov	r1, r3
 800bbb8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800bbba:	f7fe fcb3 	bl	800a524 <_strnlen_s>
 800bbbe:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 800bbc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bbc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d005      	beq.n	800bbd6 <_vsnprintf+0x83e>
          l = (l < precision ? l : precision);
 800bbca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bbcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	bf28      	it	cs
 800bbd2:	4613      	movcs	r3, r2
 800bbd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 800bbd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bbd8:	f003 0302 	and.w	r3, r3, #2
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d11a      	bne.n	800bc16 <_vsnprintf+0x87e>
          while (l++ < width) {
 800bbe0:	e007      	b.n	800bbf2 <_vsnprintf+0x85a>
            out(' ', buffer, idx++, maxlen);
 800bbe2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bbe4:	1c53      	adds	r3, r2, #1
 800bbe6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bbe8:	697c      	ldr	r4, [r7, #20]
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	6939      	ldr	r1, [r7, #16]
 800bbee:	2020      	movs	r0, #32
 800bbf0:	47a0      	blx	r4
          while (l++ < width) {
 800bbf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbf4:	1c5a      	adds	r2, r3, #1
 800bbf6:	63fa      	str	r2, [r7, #60]	; 0x3c
 800bbf8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	d8f1      	bhi.n	800bbe2 <_vsnprintf+0x84a>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800bbfe:	e00a      	b.n	800bc16 <_vsnprintf+0x87e>
          out(*(p++), buffer, idx++, maxlen);
 800bc00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc02:	1c5a      	adds	r2, r3, #1
 800bc04:	643a      	str	r2, [r7, #64]	; 0x40
 800bc06:	7818      	ldrb	r0, [r3, #0]
 800bc08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bc0a:	1c53      	adds	r3, r2, #1
 800bc0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bc0e:	697c      	ldr	r4, [r7, #20]
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	6939      	ldr	r1, [r7, #16]
 800bc14:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800bc16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc18:	781b      	ldrb	r3, [r3, #0]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d009      	beq.n	800bc32 <_vsnprintf+0x89a>
 800bc1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d0eb      	beq.n	800bc00 <_vsnprintf+0x868>
 800bc28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc2a:	1e5a      	subs	r2, r3, #1
 800bc2c:	657a      	str	r2, [r7, #84]	; 0x54
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d1e6      	bne.n	800bc00 <_vsnprintf+0x868>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 800bc32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc34:	f003 0302 	and.w	r3, r3, #2
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d00e      	beq.n	800bc5a <_vsnprintf+0x8c2>
          while (l++ < width) {
 800bc3c:	e007      	b.n	800bc4e <_vsnprintf+0x8b6>
            out(' ', buffer, idx++, maxlen);
 800bc3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bc40:	1c53      	adds	r3, r2, #1
 800bc42:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bc44:	697c      	ldr	r4, [r7, #20]
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	6939      	ldr	r1, [r7, #16]
 800bc4a:	2020      	movs	r0, #32
 800bc4c:	47a0      	blx	r4
          while (l++ < width) {
 800bc4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc50:	1c5a      	adds	r2, r3, #1
 800bc52:	63fa      	str	r2, [r7, #60]	; 0x3c
 800bc54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bc56:	429a      	cmp	r2, r3
 800bc58:	d8f1      	bhi.n	800bc3e <_vsnprintf+0x8a6>
          }
        }
        format++;
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	3301      	adds	r3, #1
 800bc5e:	60bb      	str	r3, [r7, #8]
        break;
 800bc60:	e066      	b.n	800bd30 <_vsnprintf+0x998>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 800bc62:	2308      	movs	r3, #8
 800bc64:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 800bc66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc68:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 800bc6c:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 800bc6e:	2300      	movs	r3, #0
 800bc70:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 800bc74:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d023      	beq.n	800bcc4 <_vsnprintf+0x92c>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 800bc7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bc80:	1d1a      	adds	r2, r3, #4
 800bc82:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	461a      	mov	r2, r3
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	603a      	str	r2, [r7, #0]
 800bc8e:	607b      	str	r3, [r7, #4]
 800bc90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc92:	9308      	str	r3, [sp, #32]
 800bc94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bc96:	9307      	str	r3, [sp, #28]
 800bc98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc9a:	9306      	str	r3, [sp, #24]
 800bc9c:	f04f 0210 	mov.w	r2, #16
 800bca0:	f04f 0300 	mov.w	r3, #0
 800bca4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bca8:	2300      	movs	r3, #0
 800bcaa:	9302      	str	r3, [sp, #8]
 800bcac:	e9d7 3400 	ldrd	r3, r4, [r7]
 800bcb0:	e9cd 3400 	strd	r3, r4, [sp]
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bcb8:	6939      	ldr	r1, [r7, #16]
 800bcba:	6978      	ldr	r0, [r7, #20]
 800bcbc:	f7fe fe1c 	bl	800a8f8 <_ntoa_long_long>
 800bcc0:	64f8      	str	r0, [r7, #76]	; 0x4c
 800bcc2:	e018      	b.n	800bcf6 <_vsnprintf+0x95e>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 800bcc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bcc8:	1d1a      	adds	r2, r3, #4
 800bcca:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	461a      	mov	r2, r3
 800bcd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bcd4:	9305      	str	r3, [sp, #20]
 800bcd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bcd8:	9304      	str	r3, [sp, #16]
 800bcda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bcdc:	9303      	str	r3, [sp, #12]
 800bcde:	2310      	movs	r3, #16
 800bce0:	9302      	str	r3, [sp, #8]
 800bce2:	2300      	movs	r3, #0
 800bce4:	9301      	str	r3, [sp, #4]
 800bce6:	9200      	str	r2, [sp, #0]
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bcec:	6939      	ldr	r1, [r7, #16]
 800bcee:	6978      	ldr	r0, [r7, #20]
 800bcf0:	f7fe fd9c 	bl	800a82c <_ntoa_long>
 800bcf4:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	3301      	adds	r3, #1
 800bcfa:	60bb      	str	r3, [r7, #8]
        break;
 800bcfc:	e018      	b.n	800bd30 <_vsnprintf+0x998>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 800bcfe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bd00:	1c53      	adds	r3, r2, #1
 800bd02:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bd04:	697c      	ldr	r4, [r7, #20]
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	6939      	ldr	r1, [r7, #16]
 800bd0a:	2025      	movs	r0, #37	; 0x25
 800bd0c:	47a0      	blx	r4
        format++;
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	3301      	adds	r3, #1
 800bd12:	60bb      	str	r3, [r7, #8]
        break;
 800bd14:	e00c      	b.n	800bd30 <_vsnprintf+0x998>

      default :
        out(*format, buffer, idx++, maxlen);
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	7818      	ldrb	r0, [r3, #0]
 800bd1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bd1c:	1c53      	adds	r3, r2, #1
 800bd1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bd20:	697c      	ldr	r4, [r7, #20]
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	6939      	ldr	r1, [r7, #16]
 800bd26:	47a0      	blx	r4
        format++;
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	3301      	adds	r3, #1
 800bd2c:	60bb      	str	r3, [r7, #8]
        break;
 800bd2e:	bf00      	nop
  while (*format)
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	781b      	ldrb	r3, [r3, #0]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	f47f ab41 	bne.w	800b3bc <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800bd3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	429a      	cmp	r2, r3
 800bd40:	d302      	bcc.n	800bd48 <_vsnprintf+0x9b0>
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	1e5a      	subs	r2, r3, #1
 800bd46:	e000      	b.n	800bd4a <_vsnprintf+0x9b2>
 800bd48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bd4a:	697c      	ldr	r4, [r7, #20]
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	6939      	ldr	r1, [r7, #16]
 800bd50:	2000      	movs	r0, #0
 800bd52:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 800bd54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	3764      	adds	r7, #100	; 0x64
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bd60 <sprintf_>:
  return ret;
}


int sprintf_(char* buffer, const char* format, ...)
{
 800bd60:	b40e      	push	{r1, r2, r3}
 800bd62:	b580      	push	{r7, lr}
 800bd64:	b087      	sub	sp, #28
 800bd66:	af02      	add	r7, sp, #8
 800bd68:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 800bd6a:	f107 0320 	add.w	r3, r7, #32
 800bd6e:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	9300      	str	r3, [sp, #0]
 800bd74:	69fb      	ldr	r3, [r7, #28]
 800bd76:	f04f 32ff 	mov.w	r2, #4294967295
 800bd7a:	6879      	ldr	r1, [r7, #4]
 800bd7c:	4805      	ldr	r0, [pc, #20]	; (800bd94 <sprintf_+0x34>)
 800bd7e:	f7ff fb0b 	bl	800b398 <_vsnprintf>
 800bd82:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 800bd84:	68fb      	ldr	r3, [r7, #12]
}
 800bd86:	4618      	mov	r0, r3
 800bd88:	3714      	adds	r7, #20
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bd90:	b003      	add	sp, #12
 800bd92:	4770      	bx	lr
 800bd94:	0800a4db 	.word	0x0800a4db

0800bd98 <RFP_Handle>:
        { RFP_WaitForResponseFunction }, { RFP_ParseResponseFunction } };
RFPCommandFunctions_TypeDef RfpCommandFunction[RFP_COMMAND_CNT];
RFPDataFunctions_TypeDef RfpDataFunctions;
RFPMessageFunctions_TypeDef RfpMessageFunction[RFP_MESSAGE_CNT];
void RFP_Handle(void)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	af00      	add	r7, sp, #0
   RFP_ChangeState();
 800bd9c:	f000 f856 	bl	800be4c <RFP_ChangeState>
   if(RfpFunction[Rfp->State].RfpFunction != NULL)
 800bda0:	4b09      	ldr	r3, [pc, #36]	; (800bdc8 <RFP_Handle+0x30>)
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	781b      	ldrb	r3, [r3, #0]
 800bda6:	461a      	mov	r2, r3
 800bda8:	4b08      	ldr	r3, [pc, #32]	; (800bdcc <RFP_Handle+0x34>)
 800bdaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d007      	beq.n	800bdc2 <RFP_Handle+0x2a>
   {
      RfpFunction[Rfp->State].RfpFunction();
 800bdb2:	4b05      	ldr	r3, [pc, #20]	; (800bdc8 <RFP_Handle+0x30>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	781b      	ldrb	r3, [r3, #0]
 800bdb8:	461a      	mov	r2, r3
 800bdba:	4b04      	ldr	r3, [pc, #16]	; (800bdcc <RFP_Handle+0x34>)
 800bdbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdc0:	4798      	blx	r3
   }
}
 800bdc2:	bf00      	nop
 800bdc4:	bd80      	pop	{r7, pc}
 800bdc6:	bf00      	nop
 800bdc8:	20004130 	.word	0x20004130
 800bdcc:	20000078 	.word	0x20000078

0800bdd0 <RFP_Init>:
void RFP_Init(RFP_TypeDef *RadioProtocol, RFPDeviceID_TypeDef Device)
{
 800bdd0:	b480      	push	{r7}
 800bdd2:	b085      	sub	sp, #20
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
 800bdd8:	460b      	mov	r3, r1
 800bdda:	70fb      	strb	r3, [r7, #3]
   Rfp             = RadioProtocol;
 800bddc:	4a17      	ldr	r2, [pc, #92]	; (800be3c <RFP_Init+0x6c>)
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6013      	str	r3, [r2, #0]
   Rfp->Initialize = RFP_INITIALIZE;
 800bde2:	4b16      	ldr	r3, [pc, #88]	; (800be3c <RFP_Init+0x6c>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	2201      	movs	r2, #1
 800bde8:	70da      	strb	r2, [r3, #3]
   Rfp->DeviceType = Device;
 800bdea:	4b14      	ldr	r3, [pc, #80]	; (800be3c <RFP_Init+0x6c>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	78fa      	ldrb	r2, [r7, #3]
 800bdf0:	715a      	strb	r2, [r3, #5]
   for(int i = 0; i < RFP_COMMAND_CNT; i++)
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	60fb      	str	r3, [r7, #12]
 800bdf6:	e007      	b.n	800be08 <RFP_Init+0x38>
   {
      RfpCommandFunction[i].RfpCommandFunction = NULL;
 800bdf8:	4a11      	ldr	r2, [pc, #68]	; (800be40 <RFP_Init+0x70>)
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	2100      	movs	r1, #0
 800bdfe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   for(int i = 0; i < RFP_COMMAND_CNT; i++)
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	3301      	adds	r3, #1
 800be06:	60fb      	str	r3, [r7, #12]
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	2b05      	cmp	r3, #5
 800be0c:	ddf4      	ble.n	800bdf8 <RFP_Init+0x28>
   }
   for(int i = 0; i < RFP_MESSAGE_CNT; i++)
 800be0e:	2300      	movs	r3, #0
 800be10:	60bb      	str	r3, [r7, #8]
 800be12:	e007      	b.n	800be24 <RFP_Init+0x54>
   {
      RfpMessageFunction[i].RfpMessageFunction = NULL;
 800be14:	4a0b      	ldr	r2, [pc, #44]	; (800be44 <RFP_Init+0x74>)
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	2100      	movs	r1, #0
 800be1a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   for(int i = 0; i < RFP_MESSAGE_CNT; i++)
 800be1e:	68bb      	ldr	r3, [r7, #8]
 800be20:	3301      	adds	r3, #1
 800be22:	60bb      	str	r3, [r7, #8]
 800be24:	68bb      	ldr	r3, [r7, #8]
 800be26:	2b04      	cmp	r3, #4
 800be28:	ddf4      	ble.n	800be14 <RFP_Init+0x44>
   }
   RfpDataFunctions.RfpDataFunction = NULL;
 800be2a:	4b07      	ldr	r3, [pc, #28]	; (800be48 <RFP_Init+0x78>)
 800be2c:	2200      	movs	r2, #0
 800be2e:	601a      	str	r2, [r3, #0]
}
 800be30:	bf00      	nop
 800be32:	3714      	adds	r7, #20
 800be34:	46bd      	mov	sp, r7
 800be36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3a:	4770      	bx	lr
 800be3c:	20004130 	.word	0x20004130
 800be40:	20004134 	.word	0x20004134
 800be44:	20004150 	.word	0x20004150
 800be48:	2000414c 	.word	0x2000414c

0800be4c <RFP_ChangeState>:
static void RFP_ChangeState(void)
{
 800be4c:	b480      	push	{r7}
 800be4e:	b083      	sub	sp, #12
 800be50:	af00      	add	r7, sp, #0
   for(int i = 0; i < RFP_TRANSITION_TABLE_SIZE; i++)
 800be52:	2300      	movs	r3, #0
 800be54:	607b      	str	r3, [r7, #4]
 800be56:	e02b      	b.n	800beb0 <RFP_ChangeState+0x64>
   {
      if(Rfp->State == RfpTransitionTable[i].Source && Rfp->NewEvent == RfpTransitionTable[i].Event)
 800be58:	4b1b      	ldr	r3, [pc, #108]	; (800bec8 <RFP_ChangeState+0x7c>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	7819      	ldrb	r1, [r3, #0]
 800be5e:	481b      	ldr	r0, [pc, #108]	; (800becc <RFP_ChangeState+0x80>)
 800be60:	687a      	ldr	r2, [r7, #4]
 800be62:	4613      	mov	r3, r2
 800be64:	005b      	lsls	r3, r3, #1
 800be66:	4413      	add	r3, r2
 800be68:	4403      	add	r3, r0
 800be6a:	781b      	ldrb	r3, [r3, #0]
 800be6c:	4299      	cmp	r1, r3
 800be6e:	d11c      	bne.n	800beaa <RFP_ChangeState+0x5e>
 800be70:	4b15      	ldr	r3, [pc, #84]	; (800bec8 <RFP_ChangeState+0x7c>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	7859      	ldrb	r1, [r3, #1]
 800be76:	4815      	ldr	r0, [pc, #84]	; (800becc <RFP_ChangeState+0x80>)
 800be78:	687a      	ldr	r2, [r7, #4]
 800be7a:	4613      	mov	r3, r2
 800be7c:	005b      	lsls	r3, r3, #1
 800be7e:	4413      	add	r3, r2
 800be80:	4403      	add	r3, r0
 800be82:	3302      	adds	r3, #2
 800be84:	781b      	ldrb	r3, [r3, #0]
 800be86:	4299      	cmp	r1, r3
 800be88:	d10f      	bne.n	800beaa <RFP_ChangeState+0x5e>
      {
         Rfp->State    = RfpTransitionTable[i].Destination;
 800be8a:	4b0f      	ldr	r3, [pc, #60]	; (800bec8 <RFP_ChangeState+0x7c>)
 800be8c:	6819      	ldr	r1, [r3, #0]
 800be8e:	480f      	ldr	r0, [pc, #60]	; (800becc <RFP_ChangeState+0x80>)
 800be90:	687a      	ldr	r2, [r7, #4]
 800be92:	4613      	mov	r3, r2
 800be94:	005b      	lsls	r3, r3, #1
 800be96:	4413      	add	r3, r2
 800be98:	4403      	add	r3, r0
 800be9a:	3301      	adds	r3, #1
 800be9c:	781b      	ldrb	r3, [r3, #0]
 800be9e:	700b      	strb	r3, [r1, #0]
         Rfp->NewEvent = RFP_EVENT_NOTHING;
 800bea0:	4b09      	ldr	r3, [pc, #36]	; (800bec8 <RFP_ChangeState+0x7c>)
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	2200      	movs	r2, #0
 800bea6:	705a      	strb	r2, [r3, #1]
         return;
 800bea8:	e009      	b.n	800bebe <RFP_ChangeState+0x72>
   for(int i = 0; i < RFP_TRANSITION_TABLE_SIZE; i++)
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	3301      	adds	r3, #1
 800beae:	607b      	str	r3, [r7, #4]
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2b0b      	cmp	r3, #11
 800beb4:	d9d0      	bls.n	800be58 <RFP_ChangeState+0xc>
      }
   }
   Rfp->NewEvent = RFP_EVENT_NOTHING;
 800beb6:	4b04      	ldr	r3, [pc, #16]	; (800bec8 <RFP_ChangeState+0x7c>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	2200      	movs	r2, #0
 800bebc:	705a      	strb	r2, [r3, #1]
}
 800bebe:	370c      	adds	r7, #12
 800bec0:	46bd      	mov	sp, r7
 800bec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec6:	4770      	bx	lr
 800bec8:	20004130 	.word	0x20004130
 800becc:	20000054 	.word	0x20000054

0800bed0 <RFP_RegisterDataFunction>:
void RFP_RegisterCommandFunction(RFPCommands_TypeDef Command, void (*Callback)(uint8_t *, uint32_t, uint32_t))
{
   RfpCommandFunction[Command - 1].RfpCommandFunction = Callback;
}
void RFP_RegisterDataFunction(void (*Callback)(uint8_t *, uint32_t, uint32_t))
{
 800bed0:	b480      	push	{r7}
 800bed2:	b083      	sub	sp, #12
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
   RfpDataFunctions.RfpDataFunction = Callback;
 800bed8:	4a04      	ldr	r2, [pc, #16]	; (800beec <RFP_RegisterDataFunction+0x1c>)
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6013      	str	r3, [r2, #0]
}
 800bede:	bf00      	nop
 800bee0:	370c      	adds	r7, #12
 800bee2:	46bd      	mov	sp, r7
 800bee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee8:	4770      	bx	lr
 800beea:	bf00      	nop
 800beec:	2000414c 	.word	0x2000414c

0800bef0 <RFP_InterruptTask>:
void RFP_RegisterMessageFunction(RFPMessage_TypeDef Message, void (*Callback)(uint8_t *, uint32_t, uint32_t))
{
   RfpMessageFunction[Message - 1].RfpMessageFunction = Callback;
}
void RFP_InterruptTask(void)
{
 800bef0:	b480      	push	{r7}
 800bef2:	af00      	add	r7, sp, #0
   Rfp->NewDataFlag = RFP_NEW_DATA_FLAG_SET;
 800bef4:	4b04      	ldr	r3, [pc, #16]	; (800bf08 <RFP_InterruptTask+0x18>)
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	2201      	movs	r2, #1
 800befa:	711a      	strb	r2, [r3, #4]
}
 800befc:	bf00      	nop
 800befe:	46bd      	mov	sp, r7
 800bf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf04:	4770      	bx	lr
 800bf06:	bf00      	nop
 800bf08:	20004130 	.word	0x20004130

0800bf0c <RFP_SendData>:
void RFP_SendData(RFPDeviceID_TypeDef Destination, RFPMessageType_TypeDef Type, uint8_t *Data, uint32_t Length)
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b086      	sub	sp, #24
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	60ba      	str	r2, [r7, #8]
 800bf14:	607b      	str	r3, [r7, #4]
 800bf16:	4603      	mov	r3, r0
 800bf18:	73fb      	strb	r3, [r7, #15]
 800bf1a:	460b      	mov	r3, r1
 800bf1c:	73bb      	strb	r3, [r7, #14]
   RfpDataTransmit[0] = Destination;
 800bf1e:	4a27      	ldr	r2, [pc, #156]	; (800bfbc <RFP_SendData+0xb0>)
 800bf20:	7bfb      	ldrb	r3, [r7, #15]
 800bf22:	7013      	strb	r3, [r2, #0]
   RfpDataTransmit[1] = Rfp->DeviceType;
 800bf24:	4b26      	ldr	r3, [pc, #152]	; (800bfc0 <RFP_SendData+0xb4>)
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	795a      	ldrb	r2, [r3, #5]
 800bf2a:	4b24      	ldr	r3, [pc, #144]	; (800bfbc <RFP_SendData+0xb0>)
 800bf2c:	705a      	strb	r2, [r3, #1]
   RfpDataTransmit[2] = Type;
 800bf2e:	4a23      	ldr	r2, [pc, #140]	; (800bfbc <RFP_SendData+0xb0>)
 800bf30:	7bbb      	ldrb	r3, [r7, #14]
 800bf32:	7093      	strb	r3, [r2, #2]
   for(int i = 0; i < Length; i++)
 800bf34:	2300      	movs	r3, #0
 800bf36:	617b      	str	r3, [r7, #20]
 800bf38:	e00a      	b.n	800bf50 <RFP_SendData+0x44>
   {
      RfpDataTransmit[i + 3] = Data[i];
 800bf3a:	697b      	ldr	r3, [r7, #20]
 800bf3c:	68ba      	ldr	r2, [r7, #8]
 800bf3e:	441a      	add	r2, r3
 800bf40:	697b      	ldr	r3, [r7, #20]
 800bf42:	3303      	adds	r3, #3
 800bf44:	7811      	ldrb	r1, [r2, #0]
 800bf46:	4a1d      	ldr	r2, [pc, #116]	; (800bfbc <RFP_SendData+0xb0>)
 800bf48:	54d1      	strb	r1, [r2, r3]
   for(int i = 0; i < Length; i++)
 800bf4a:	697b      	ldr	r3, [r7, #20]
 800bf4c:	3301      	adds	r3, #1
 800bf4e:	617b      	str	r3, [r7, #20]
 800bf50:	697b      	ldr	r3, [r7, #20]
 800bf52:	687a      	ldr	r2, [r7, #4]
 800bf54:	429a      	cmp	r2, r3
 800bf56:	d8f0      	bhi.n	800bf3a <RFP_SendData+0x2e>
   }
   uint32_t crc                    = Crc(CRC_INITIAL_VALUE, 3 + Length, RfpDataTransmit);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	3303      	adds	r3, #3
 800bf5c:	4a17      	ldr	r2, [pc, #92]	; (800bfbc <RFP_SendData+0xb0>)
 800bf5e:	4619      	mov	r1, r3
 800bf60:	f04f 30ff 	mov.w	r0, #4294967295
 800bf64:	f7f8 fab2 	bl	80044cc <Crc>
 800bf68:	6138      	str	r0, [r7, #16]
   RfpDataTransmit[3 + Length]     = ((crc >> 24) & 0xff);
 800bf6a:	693b      	ldr	r3, [r7, #16]
 800bf6c:	0e1a      	lsrs	r2, r3, #24
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	3303      	adds	r3, #3
 800bf72:	b2d1      	uxtb	r1, r2
 800bf74:	4a11      	ldr	r2, [pc, #68]	; (800bfbc <RFP_SendData+0xb0>)
 800bf76:	54d1      	strb	r1, [r2, r3]
   RfpDataTransmit[3 + Length + 1] = ((crc >> 16) & 0xff);
 800bf78:	693b      	ldr	r3, [r7, #16]
 800bf7a:	0c1a      	lsrs	r2, r3, #16
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	3304      	adds	r3, #4
 800bf80:	b2d1      	uxtb	r1, r2
 800bf82:	4a0e      	ldr	r2, [pc, #56]	; (800bfbc <RFP_SendData+0xb0>)
 800bf84:	54d1      	strb	r1, [r2, r3]
   RfpDataTransmit[3 + Length + 2] = ((crc >> 8) & 0xff);
 800bf86:	693b      	ldr	r3, [r7, #16]
 800bf88:	0a1a      	lsrs	r2, r3, #8
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	3305      	adds	r3, #5
 800bf8e:	b2d1      	uxtb	r1, r2
 800bf90:	4a0a      	ldr	r2, [pc, #40]	; (800bfbc <RFP_SendData+0xb0>)
 800bf92:	54d1      	strb	r1, [r2, r3]
   RfpDataTransmit[3 + Length + 3] = (crc & 0xff);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	3306      	adds	r3, #6
 800bf98:	693a      	ldr	r2, [r7, #16]
 800bf9a:	b2d1      	uxtb	r1, r2
 800bf9c:	4a07      	ldr	r2, [pc, #28]	; (800bfbc <RFP_SendData+0xb0>)
 800bf9e:	54d1      	strb	r1, [r2, r3]
   Rfp->SendFlag                   = RFP_SEND_FLAG_SET;
 800bfa0:	4b07      	ldr	r3, [pc, #28]	; (800bfc0 <RFP_SendData+0xb4>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	2201      	movs	r2, #1
 800bfa6:	745a      	strb	r2, [r3, #17]
   Rfp->DataSizeTransmit           = 3 + Length + 4;
 800bfa8:	4b05      	ldr	r3, [pc, #20]	; (800bfc0 <RFP_SendData+0xb4>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	687a      	ldr	r2, [r7, #4]
 800bfae:	3207      	adds	r2, #7
 800bfb0:	60da      	str	r2, [r3, #12]
}
 800bfb2:	bf00      	nop
 800bfb4:	3718      	adds	r7, #24
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}
 800bfba:	bf00      	nop
 800bfbc:	200040cc 	.word	0x200040cc
 800bfc0:	20004130 	.word	0x20004130

0800bfc4 <RFP_SendResponseFunction>:
static void RFP_SendResponseFunction(RFPMessageType_TypeDef Response)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b084      	sub	sp, #16
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	4603      	mov	r3, r0
 800bfcc:	71fb      	strb	r3, [r7, #7]
   osDelay(200);
 800bfce:	20c8      	movs	r0, #200	; 0xc8
 800bfd0:	f008 fcb6 	bl	8014940 <osDelay>
   RfpDataTransmit[0] = Rfp->SourceMessage;
 800bfd4:	4b18      	ldr	r3, [pc, #96]	; (800c038 <RFP_SendResponseFunction+0x74>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	7c1a      	ldrb	r2, [r3, #16]
 800bfda:	4b18      	ldr	r3, [pc, #96]	; (800c03c <RFP_SendResponseFunction+0x78>)
 800bfdc:	701a      	strb	r2, [r3, #0]
   RfpDataTransmit[1] = Rfp->DeviceType;
 800bfde:	4b16      	ldr	r3, [pc, #88]	; (800c038 <RFP_SendResponseFunction+0x74>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	795a      	ldrb	r2, [r3, #5]
 800bfe4:	4b15      	ldr	r3, [pc, #84]	; (800c03c <RFP_SendResponseFunction+0x78>)
 800bfe6:	705a      	strb	r2, [r3, #1]
   RfpDataTransmit[2] = RFP_MESSAGE;
 800bfe8:	4b14      	ldr	r3, [pc, #80]	; (800c03c <RFP_SendResponseFunction+0x78>)
 800bfea:	2203      	movs	r2, #3
 800bfec:	709a      	strb	r2, [r3, #2]
   RfpDataTransmit[3] = Response;
 800bfee:	4a13      	ldr	r2, [pc, #76]	; (800c03c <RFP_SendResponseFunction+0x78>)
 800bff0:	79fb      	ldrb	r3, [r7, #7]
 800bff2:	70d3      	strb	r3, [r2, #3]
   uint32_t crc       = Crc(CRC_INITIAL_VALUE, 4, RfpDataTransmit);
 800bff4:	4a11      	ldr	r2, [pc, #68]	; (800c03c <RFP_SendResponseFunction+0x78>)
 800bff6:	2104      	movs	r1, #4
 800bff8:	f04f 30ff 	mov.w	r0, #4294967295
 800bffc:	f7f8 fa66 	bl	80044cc <Crc>
 800c000:	60f8      	str	r0, [r7, #12]
   RfpDataTransmit[4] = ((crc >> 24) & 0xff);
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	0e1b      	lsrs	r3, r3, #24
 800c006:	b2da      	uxtb	r2, r3
 800c008:	4b0c      	ldr	r3, [pc, #48]	; (800c03c <RFP_SendResponseFunction+0x78>)
 800c00a:	711a      	strb	r2, [r3, #4]
   RfpDataTransmit[5] = ((crc >> 16) & 0xff);
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	0c1b      	lsrs	r3, r3, #16
 800c010:	b2da      	uxtb	r2, r3
 800c012:	4b0a      	ldr	r3, [pc, #40]	; (800c03c <RFP_SendResponseFunction+0x78>)
 800c014:	715a      	strb	r2, [r3, #5]
   RfpDataTransmit[6] = ((crc >> 8) & 0xff);
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	0a1b      	lsrs	r3, r3, #8
 800c01a:	b2da      	uxtb	r2, r3
 800c01c:	4b07      	ldr	r3, [pc, #28]	; (800c03c <RFP_SendResponseFunction+0x78>)
 800c01e:	719a      	strb	r2, [r3, #6]
   RfpDataTransmit[7] = (crc & 0xff);
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	b2da      	uxtb	r2, r3
 800c024:	4b05      	ldr	r3, [pc, #20]	; (800c03c <RFP_SendResponseFunction+0x78>)
 800c026:	71da      	strb	r2, [r3, #7]
   HC12_TransmitData(RfpDataTransmit, 8);
 800c028:	2108      	movs	r1, #8
 800c02a:	4804      	ldr	r0, [pc, #16]	; (800c03c <RFP_SendResponseFunction+0x78>)
 800c02c:	f7f5 fd90 	bl	8001b50 <HC12_TransmitData>
}
 800c030:	bf00      	nop
 800c032:	3710      	adds	r7, #16
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}
 800c038:	20004130 	.word	0x20004130
 800c03c:	200040cc 	.word	0x200040cc

0800c040 <RFP_InitializeFunction>:
static void RFP_InitializeFunction(void)
{
 800c040:	b580      	push	{r7, lr}
 800c042:	af00      	add	r7, sp, #0
   Rfp->NewEvent = RFP_EVENT_END_INITIALIZE;
 800c044:	4b08      	ldr	r3, [pc, #32]	; (800c068 <RFP_InitializeFunction+0x28>)
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	2202      	movs	r2, #2
 800c04a:	705a      	strb	r2, [r3, #1]
   HC12_ExitCommandMode();
 800c04c:	f7f5 fd75 	bl	8001b3a <HC12_ExitCommandMode>
   HC12_Init(Rfp, RfpDataRecive);
 800c050:	4b05      	ldr	r3, [pc, #20]	; (800c068 <RFP_InitializeFunction+0x28>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	4905      	ldr	r1, [pc, #20]	; (800c06c <RFP_InitializeFunction+0x2c>)
 800c056:	4618      	mov	r0, r3
 800c058:	f7f5 fda4 	bl	8001ba4 <HC12_Init>
   HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800c05c:	2164      	movs	r1, #100	; 0x64
 800c05e:	4803      	ldr	r0, [pc, #12]	; (800c06c <RFP_InitializeFunction+0x2c>)
 800c060:	f7f5 fd8e 	bl	8001b80 <HC12_ReciveToIdleDMA>
}
 800c064:	bf00      	nop
 800c066:	bd80      	pop	{r7, pc}
 800c068:	20004130 	.word	0x20004130
 800c06c:	20004068 	.word	0x20004068

0800c070 <RFP_IdleFunction>:
static void RFP_IdleFunction(void)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	af00      	add	r7, sp, #0
   if(Rfp->NewDataFlag == RFP_NEW_DATA_FLAG_SET)
 800c074:	4b10      	ldr	r3, [pc, #64]	; (800c0b8 <RFP_IdleFunction+0x48>)
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	791b      	ldrb	r3, [r3, #4]
 800c07a:	b2db      	uxtb	r3, r3
 800c07c:	2b01      	cmp	r3, #1
 800c07e:	d108      	bne.n	800c092 <RFP_IdleFunction+0x22>
   {
      Rfp->NewDataFlag = RFP_NEW_DATA_FLAG_RESET;
 800c080:	4b0d      	ldr	r3, [pc, #52]	; (800c0b8 <RFP_IdleFunction+0x48>)
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	2200      	movs	r2, #0
 800c086:	711a      	strb	r2, [r3, #4]
      Rfp->NewEvent    = RFP_EVENT_NEW_DATA;
 800c088:	4b0b      	ldr	r3, [pc, #44]	; (800c0b8 <RFP_IdleFunction+0x48>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	2201      	movs	r2, #1
 800c08e:	705a      	strb	r2, [r3, #1]
   {
      Rfp->SendFlag = RFP_SEND_FLAG_RESET;
      Rfp->NewEvent = RFP_EVENT_SEND;
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
   }
}
 800c090:	e010      	b.n	800c0b4 <RFP_IdleFunction+0x44>
   else if(Rfp->SendFlag == RFP_SEND_FLAG_SET)
 800c092:	4b09      	ldr	r3, [pc, #36]	; (800c0b8 <RFP_IdleFunction+0x48>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	7c5b      	ldrb	r3, [r3, #17]
 800c098:	2b01      	cmp	r3, #1
 800c09a:	d10b      	bne.n	800c0b4 <RFP_IdleFunction+0x44>
      Rfp->SendFlag = RFP_SEND_FLAG_RESET;
 800c09c:	4b06      	ldr	r3, [pc, #24]	; (800c0b8 <RFP_IdleFunction+0x48>)
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	745a      	strb	r2, [r3, #17]
      Rfp->NewEvent = RFP_EVENT_SEND;
 800c0a4:	4b04      	ldr	r3, [pc, #16]	; (800c0b8 <RFP_IdleFunction+0x48>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	2206      	movs	r2, #6
 800c0aa:	705a      	strb	r2, [r3, #1]
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800c0ac:	2164      	movs	r1, #100	; 0x64
 800c0ae:	4803      	ldr	r0, [pc, #12]	; (800c0bc <RFP_IdleFunction+0x4c>)
 800c0b0:	f7f5 fd66 	bl	8001b80 <HC12_ReciveToIdleDMA>
}
 800c0b4:	bf00      	nop
 800c0b6:	bd80      	pop	{r7, pc}
 800c0b8:	20004130 	.word	0x20004130
 800c0bc:	20004068 	.word	0x20004068

0800c0c0 <RFP_ParseFunction>:
static void RFP_ParseFunction(void)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b082      	sub	sp, #8
 800c0c4:	af00      	add	r7, sp, #0
   uint32_t MessageCRC = 0;
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	607b      	str	r3, [r7, #4]
   Rfp->SourceMessage  = RfpDataRecive[1];
 800c0ca:	4b3a      	ldr	r3, [pc, #232]	; (800c1b4 <RFP_ParseFunction+0xf4>)
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	4a3a      	ldr	r2, [pc, #232]	; (800c1b8 <RFP_ParseFunction+0xf8>)
 800c0d0:	7852      	ldrb	r2, [r2, #1]
 800c0d2:	741a      	strb	r2, [r3, #16]
   if(RfpDataRecive[0] != Rfp->DeviceType)
 800c0d4:	4b38      	ldr	r3, [pc, #224]	; (800c1b8 <RFP_ParseFunction+0xf8>)
 800c0d6:	781a      	ldrb	r2, [r3, #0]
 800c0d8:	4b36      	ldr	r3, [pc, #216]	; (800c1b4 <RFP_ParseFunction+0xf4>)
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	795b      	ldrb	r3, [r3, #5]
 800c0de:	429a      	cmp	r2, r3
 800c0e0:	d00b      	beq.n	800c0fa <RFP_ParseFunction+0x3a>
   {
      Rfp->NewEvent = RFP_EVENT_ERROR;
 800c0e2:	4b34      	ldr	r3, [pc, #208]	; (800c1b4 <RFP_ParseFunction+0xf4>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	2203      	movs	r2, #3
 800c0e8:	705a      	strb	r2, [r3, #1]
      RFP_SendResponseFunction(RFP_ERROR);
 800c0ea:	2001      	movs	r0, #1
 800c0ec:	f7ff ff6a 	bl	800bfc4 <RFP_SendResponseFunction>
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800c0f0:	2164      	movs	r1, #100	; 0x64
 800c0f2:	4831      	ldr	r0, [pc, #196]	; (800c1b8 <RFP_ParseFunction+0xf8>)
 800c0f4:	f7f5 fd44 	bl	8001b80 <HC12_ReciveToIdleDMA>
               HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
            }
         }
      }
   }
}
 800c0f8:	e057      	b.n	800c1aa <RFP_ParseFunction+0xea>
      if(Rfp->DataSize != 0)
 800c0fa:	4b2e      	ldr	r3, [pc, #184]	; (800c1b4 <RFP_ParseFunction+0xf4>)
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	689b      	ldr	r3, [r3, #8]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d052      	beq.n	800c1aa <RFP_ParseFunction+0xea>
         MessageCRC = (((uint32_t)RfpDataRecive[Rfp->DataSize - 4] << 24) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 3] << 16)
 800c104:	4b2b      	ldr	r3, [pc, #172]	; (800c1b4 <RFP_ParseFunction+0xf4>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	689b      	ldr	r3, [r3, #8]
 800c10a:	3b04      	subs	r3, #4
 800c10c:	4a2a      	ldr	r2, [pc, #168]	; (800c1b8 <RFP_ParseFunction+0xf8>)
 800c10e:	5cd3      	ldrb	r3, [r2, r3]
 800c110:	061a      	lsls	r2, r3, #24
 800c112:	4b28      	ldr	r3, [pc, #160]	; (800c1b4 <RFP_ParseFunction+0xf4>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	689b      	ldr	r3, [r3, #8]
 800c118:	3b03      	subs	r3, #3
 800c11a:	4927      	ldr	r1, [pc, #156]	; (800c1b8 <RFP_ParseFunction+0xf8>)
 800c11c:	5ccb      	ldrb	r3, [r1, r3]
 800c11e:	041b      	lsls	r3, r3, #16
 800c120:	431a      	orrs	r2, r3
                       | ((uint32_t)RfpDataRecive[Rfp->DataSize - 2] << 8) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 1]));
 800c122:	4b24      	ldr	r3, [pc, #144]	; (800c1b4 <RFP_ParseFunction+0xf4>)
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	689b      	ldr	r3, [r3, #8]
 800c128:	3b02      	subs	r3, #2
 800c12a:	4923      	ldr	r1, [pc, #140]	; (800c1b8 <RFP_ParseFunction+0xf8>)
 800c12c:	5ccb      	ldrb	r3, [r1, r3]
 800c12e:	021b      	lsls	r3, r3, #8
 800c130:	4313      	orrs	r3, r2
 800c132:	4a20      	ldr	r2, [pc, #128]	; (800c1b4 <RFP_ParseFunction+0xf4>)
 800c134:	6812      	ldr	r2, [r2, #0]
 800c136:	6892      	ldr	r2, [r2, #8]
 800c138:	3a01      	subs	r2, #1
 800c13a:	491f      	ldr	r1, [pc, #124]	; (800c1b8 <RFP_ParseFunction+0xf8>)
 800c13c:	5c8a      	ldrb	r2, [r1, r2]
         MessageCRC = (((uint32_t)RfpDataRecive[Rfp->DataSize - 4] << 24) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 3] << 16)
 800c13e:	4313      	orrs	r3, r2
 800c140:	607b      	str	r3, [r7, #4]
         if(MessageCRC == Crc(CRC_INITIAL_VALUE, Rfp->DataSize - 4, RfpDataRecive))
 800c142:	4b1c      	ldr	r3, [pc, #112]	; (800c1b4 <RFP_ParseFunction+0xf4>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	689b      	ldr	r3, [r3, #8]
 800c148:	3b04      	subs	r3, #4
 800c14a:	4a1b      	ldr	r2, [pc, #108]	; (800c1b8 <RFP_ParseFunction+0xf8>)
 800c14c:	4619      	mov	r1, r3
 800c14e:	f04f 30ff 	mov.w	r0, #4294967295
 800c152:	f7f8 f9bb 	bl	80044cc <Crc>
 800c156:	4602      	mov	r2, r0
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	4293      	cmp	r3, r2
 800c15c:	d107      	bne.n	800c16e <RFP_ParseFunction+0xae>
            Rfp->NewEvent = RFP_EVENT_DATA_OK;
 800c15e:	4b15      	ldr	r3, [pc, #84]	; (800c1b4 <RFP_ParseFunction+0xf4>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	2204      	movs	r2, #4
 800c164:	705a      	strb	r2, [r3, #1]
            RFP_SendResponseFunction(RFP_OK);
 800c166:	2004      	movs	r0, #4
 800c168:	f7ff ff2c 	bl	800bfc4 <RFP_SendResponseFunction>
}
 800c16c:	e01d      	b.n	800c1aa <RFP_ParseFunction+0xea>
            if(RepareMessage(MessageCRC, RfpDataRecive, Rfp->DataSize) == CRC_OK)
 800c16e:	4b11      	ldr	r3, [pc, #68]	; (800c1b4 <RFP_ParseFunction+0xf4>)
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	689b      	ldr	r3, [r3, #8]
 800c174:	461a      	mov	r2, r3
 800c176:	4910      	ldr	r1, [pc, #64]	; (800c1b8 <RFP_ParseFunction+0xf8>)
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	f7f8 fa01 	bl	8004580 <RepareMessage>
 800c17e:	4603      	mov	r3, r0
 800c180:	2b01      	cmp	r3, #1
 800c182:	d107      	bne.n	800c194 <RFP_ParseFunction+0xd4>
               Rfp->NewEvent = RFP_EVENT_DATA_OK;
 800c184:	4b0b      	ldr	r3, [pc, #44]	; (800c1b4 <RFP_ParseFunction+0xf4>)
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	2204      	movs	r2, #4
 800c18a:	705a      	strb	r2, [r3, #1]
               RFP_SendResponseFunction(RFP_OK);
 800c18c:	2004      	movs	r0, #4
 800c18e:	f7ff ff19 	bl	800bfc4 <RFP_SendResponseFunction>
}
 800c192:	e00a      	b.n	800c1aa <RFP_ParseFunction+0xea>
               Rfp->NewEvent = RFP_EVENT_ERROR;
 800c194:	4b07      	ldr	r3, [pc, #28]	; (800c1b4 <RFP_ParseFunction+0xf4>)
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	2203      	movs	r2, #3
 800c19a:	705a      	strb	r2, [r3, #1]
               RFP_SendResponseFunction(RFP_CRC_ERROR);
 800c19c:	2002      	movs	r0, #2
 800c19e:	f7ff ff11 	bl	800bfc4 <RFP_SendResponseFunction>
               HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800c1a2:	2164      	movs	r1, #100	; 0x64
 800c1a4:	4804      	ldr	r0, [pc, #16]	; (800c1b8 <RFP_ParseFunction+0xf8>)
 800c1a6:	f7f5 fceb 	bl	8001b80 <HC12_ReciveToIdleDMA>
}
 800c1aa:	bf00      	nop
 800c1ac:	3708      	adds	r7, #8
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}
 800c1b2:	bf00      	nop
 800c1b4:	20004130 	.word	0x20004130
 800c1b8:	20004068 	.word	0x20004068

0800c1bc <RFP_RunningFunction>:
static void RFP_RunningFunction(void)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	af00      	add	r7, sp, #0
   switch(RfpDataRecive[2])
 800c1c0:	4b27      	ldr	r3, [pc, #156]	; (800c260 <RFP_RunningFunction+0xa4>)
 800c1c2:	789b      	ldrb	r3, [r3, #2]
 800c1c4:	2b03      	cmp	r3, #3
 800c1c6:	d028      	beq.n	800c21a <RFP_RunningFunction+0x5e>
 800c1c8:	2b03      	cmp	r3, #3
 800c1ca:	dc3b      	bgt.n	800c244 <RFP_RunningFunction+0x88>
 800c1cc:	2b01      	cmp	r3, #1
 800c1ce:	d002      	beq.n	800c1d6 <RFP_RunningFunction+0x1a>
 800c1d0:	2b02      	cmp	r3, #2
 800c1d2:	d015      	beq.n	800c200 <RFP_RunningFunction+0x44>
         }
         break;
      }
      default:
      {
         break;
 800c1d4:	e036      	b.n	800c244 <RFP_RunningFunction+0x88>
         if(RfpCommandFunction[RfpDataRecive[3] - 1].RfpCommandFunction != NULL)
 800c1d6:	4b22      	ldr	r3, [pc, #136]	; (800c260 <RFP_RunningFunction+0xa4>)
 800c1d8:	78db      	ldrb	r3, [r3, #3]
 800c1da:	3b01      	subs	r3, #1
 800c1dc:	4a21      	ldr	r2, [pc, #132]	; (800c264 <RFP_RunningFunction+0xa8>)
 800c1de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d030      	beq.n	800c248 <RFP_RunningFunction+0x8c>
            RfpCommandFunction[RfpDataRecive[3] - 1].RfpCommandFunction(RfpDataRecive, Rfp->DataSize, 4);
 800c1e6:	4b1e      	ldr	r3, [pc, #120]	; (800c260 <RFP_RunningFunction+0xa4>)
 800c1e8:	78db      	ldrb	r3, [r3, #3]
 800c1ea:	3b01      	subs	r3, #1
 800c1ec:	4a1d      	ldr	r2, [pc, #116]	; (800c264 <RFP_RunningFunction+0xa8>)
 800c1ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1f2:	4a1d      	ldr	r2, [pc, #116]	; (800c268 <RFP_RunningFunction+0xac>)
 800c1f4:	6812      	ldr	r2, [r2, #0]
 800c1f6:	6891      	ldr	r1, [r2, #8]
 800c1f8:	2204      	movs	r2, #4
 800c1fa:	4819      	ldr	r0, [pc, #100]	; (800c260 <RFP_RunningFunction+0xa4>)
 800c1fc:	4798      	blx	r3
         break;
 800c1fe:	e023      	b.n	800c248 <RFP_RunningFunction+0x8c>
         if(RfpDataFunctions.RfpDataFunction != NULL)
 800c200:	4b1a      	ldr	r3, [pc, #104]	; (800c26c <RFP_RunningFunction+0xb0>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d021      	beq.n	800c24c <RFP_RunningFunction+0x90>
            RfpDataFunctions.RfpDataFunction(RfpDataRecive, Rfp->DataSize, 4);
 800c208:	4b18      	ldr	r3, [pc, #96]	; (800c26c <RFP_RunningFunction+0xb0>)
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	4a16      	ldr	r2, [pc, #88]	; (800c268 <RFP_RunningFunction+0xac>)
 800c20e:	6812      	ldr	r2, [r2, #0]
 800c210:	6891      	ldr	r1, [r2, #8]
 800c212:	2204      	movs	r2, #4
 800c214:	4812      	ldr	r0, [pc, #72]	; (800c260 <RFP_RunningFunction+0xa4>)
 800c216:	4798      	blx	r3
         break;
 800c218:	e018      	b.n	800c24c <RFP_RunningFunction+0x90>
         if(RfpMessageFunction[RfpDataRecive[3] - 1].RfpMessageFunction != NULL)
 800c21a:	4b11      	ldr	r3, [pc, #68]	; (800c260 <RFP_RunningFunction+0xa4>)
 800c21c:	78db      	ldrb	r3, [r3, #3]
 800c21e:	3b01      	subs	r3, #1
 800c220:	4a13      	ldr	r2, [pc, #76]	; (800c270 <RFP_RunningFunction+0xb4>)
 800c222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d012      	beq.n	800c250 <RFP_RunningFunction+0x94>
            RfpMessageFunction[RfpDataRecive[3] - 1].RfpMessageFunction(RfpDataRecive, Rfp->DataSize, 4);
 800c22a:	4b0d      	ldr	r3, [pc, #52]	; (800c260 <RFP_RunningFunction+0xa4>)
 800c22c:	78db      	ldrb	r3, [r3, #3]
 800c22e:	3b01      	subs	r3, #1
 800c230:	4a0f      	ldr	r2, [pc, #60]	; (800c270 <RFP_RunningFunction+0xb4>)
 800c232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c236:	4a0c      	ldr	r2, [pc, #48]	; (800c268 <RFP_RunningFunction+0xac>)
 800c238:	6812      	ldr	r2, [r2, #0]
 800c23a:	6891      	ldr	r1, [r2, #8]
 800c23c:	2204      	movs	r2, #4
 800c23e:	4808      	ldr	r0, [pc, #32]	; (800c260 <RFP_RunningFunction+0xa4>)
 800c240:	4798      	blx	r3
         break;
 800c242:	e005      	b.n	800c250 <RFP_RunningFunction+0x94>
         break;
 800c244:	bf00      	nop
 800c246:	e004      	b.n	800c252 <RFP_RunningFunction+0x96>
         break;
 800c248:	bf00      	nop
 800c24a:	e002      	b.n	800c252 <RFP_RunningFunction+0x96>
         break;
 800c24c:	bf00      	nop
 800c24e:	e000      	b.n	800c252 <RFP_RunningFunction+0x96>
         break;
 800c250:	bf00      	nop
      }
   }
   HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800c252:	2164      	movs	r1, #100	; 0x64
 800c254:	4802      	ldr	r0, [pc, #8]	; (800c260 <RFP_RunningFunction+0xa4>)
 800c256:	f7f5 fc93 	bl	8001b80 <HC12_ReciveToIdleDMA>
}
 800c25a:	bf00      	nop
 800c25c:	bd80      	pop	{r7, pc}
 800c25e:	bf00      	nop
 800c260:	20004068 	.word	0x20004068
 800c264:	20004134 	.word	0x20004134
 800c268:	20004130 	.word	0x20004130
 800c26c:	2000414c 	.word	0x2000414c
 800c270:	20004150 	.word	0x20004150

0800c274 <RFP_SendFunction>:
static void RFP_SendFunction(void)
{
 800c274:	b598      	push	{r3, r4, r7, lr}
 800c276:	af00      	add	r7, sp, #0
   if(Rfp->Cnt < 5)
 800c278:	4b16      	ldr	r3, [pc, #88]	; (800c2d4 <RFP_SendFunction+0x60>)
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	695b      	ldr	r3, [r3, #20]
 800c27e:	2b04      	cmp	r3, #4
 800c280:	d819      	bhi.n	800c2b6 <RFP_SendFunction+0x42>
   {
      osDelay(200);
 800c282:	20c8      	movs	r0, #200	; 0xc8
 800c284:	f008 fb5c 	bl	8014940 <osDelay>
      HC12_TransmitData(RfpDataTransmit, Rfp->DataSizeTransmit);
 800c288:	4b12      	ldr	r3, [pc, #72]	; (800c2d4 <RFP_SendFunction+0x60>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	68db      	ldr	r3, [r3, #12]
 800c28e:	4619      	mov	r1, r3
 800c290:	4811      	ldr	r0, [pc, #68]	; (800c2d8 <RFP_SendFunction+0x64>)
 800c292:	f7f5 fc5d 	bl	8001b50 <HC12_TransmitData>
      Rfp->Cnt++;
 800c296:	4b0f      	ldr	r3, [pc, #60]	; (800c2d4 <RFP_SendFunction+0x60>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	695a      	ldr	r2, [r3, #20]
 800c29c:	3201      	adds	r2, #1
 800c29e:	615a      	str	r2, [r3, #20]
      Rfp->NewEvent = RFP_EVENT_WAIT_FOR_RESPONSE;
 800c2a0:	4b0c      	ldr	r3, [pc, #48]	; (800c2d4 <RFP_SendFunction+0x60>)
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	2205      	movs	r2, #5
 800c2a6:	705a      	strb	r2, [r3, #1]
      Rfp->LastTick = HAL_GetTick();
 800c2a8:	4b0a      	ldr	r3, [pc, #40]	; (800c2d4 <RFP_SendFunction+0x60>)
 800c2aa:	681c      	ldr	r4, [r3, #0]
 800c2ac:	f001 f81e 	bl	800d2ec <HAL_GetTick>
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	61a3      	str	r3, [r4, #24]
   {
      Rfp->Cnt      = 0;
      Rfp->NewEvent = RFP_EVENT_ERROR;
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
   }
}
 800c2b4:	e00b      	b.n	800c2ce <RFP_SendFunction+0x5a>
      Rfp->Cnt      = 0;
 800c2b6:	4b07      	ldr	r3, [pc, #28]	; (800c2d4 <RFP_SendFunction+0x60>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	615a      	str	r2, [r3, #20]
      Rfp->NewEvent = RFP_EVENT_ERROR;
 800c2be:	4b05      	ldr	r3, [pc, #20]	; (800c2d4 <RFP_SendFunction+0x60>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	2203      	movs	r2, #3
 800c2c4:	705a      	strb	r2, [r3, #1]
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800c2c6:	2164      	movs	r1, #100	; 0x64
 800c2c8:	4804      	ldr	r0, [pc, #16]	; (800c2dc <RFP_SendFunction+0x68>)
 800c2ca:	f7f5 fc59 	bl	8001b80 <HC12_ReciveToIdleDMA>
}
 800c2ce:	bf00      	nop
 800c2d0:	bd98      	pop	{r3, r4, r7, pc}
 800c2d2:	bf00      	nop
 800c2d4:	20004130 	.word	0x20004130
 800c2d8:	200040cc 	.word	0x200040cc
 800c2dc:	20004068 	.word	0x20004068

0800c2e0 <RFP_WaitForResponseFunction>:
static void RFP_WaitForResponseFunction(void)
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	af00      	add	r7, sp, #0
   if(HAL_GetTick() - Rfp->LastTick > 2000)
 800c2e4:	f001 f802 	bl	800d2ec <HAL_GetTick>
 800c2e8:	4602      	mov	r2, r0
 800c2ea:	4b0e      	ldr	r3, [pc, #56]	; (800c324 <RFP_WaitForResponseFunction+0x44>)
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	699b      	ldr	r3, [r3, #24]
 800c2f0:	1ad3      	subs	r3, r2, r3
 800c2f2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c2f6:	d904      	bls.n	800c302 <RFP_WaitForResponseFunction+0x22>
   {
      Rfp->NewEvent = RFP_EVENT_ERROR;
 800c2f8:	4b0a      	ldr	r3, [pc, #40]	; (800c324 <RFP_WaitForResponseFunction+0x44>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	2203      	movs	r2, #3
 800c2fe:	705a      	strb	r2, [r3, #1]
   else if(Rfp->NewDataFlag == RFP_NEW_DATA_FLAG_SET)
   {
      Rfp->NewDataFlag = RFP_NEW_DATA_FLAG_RESET;
      Rfp->NewEvent    = RFP_EVENT_NEW_DATA;
   }
}
 800c300:	e00d      	b.n	800c31e <RFP_WaitForResponseFunction+0x3e>
   else if(Rfp->NewDataFlag == RFP_NEW_DATA_FLAG_SET)
 800c302:	4b08      	ldr	r3, [pc, #32]	; (800c324 <RFP_WaitForResponseFunction+0x44>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	791b      	ldrb	r3, [r3, #4]
 800c308:	b2db      	uxtb	r3, r3
 800c30a:	2b01      	cmp	r3, #1
 800c30c:	d107      	bne.n	800c31e <RFP_WaitForResponseFunction+0x3e>
      Rfp->NewDataFlag = RFP_NEW_DATA_FLAG_RESET;
 800c30e:	4b05      	ldr	r3, [pc, #20]	; (800c324 <RFP_WaitForResponseFunction+0x44>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	2200      	movs	r2, #0
 800c314:	711a      	strb	r2, [r3, #4]
      Rfp->NewEvent    = RFP_EVENT_NEW_DATA;
 800c316:	4b03      	ldr	r3, [pc, #12]	; (800c324 <RFP_WaitForResponseFunction+0x44>)
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	2201      	movs	r2, #1
 800c31c:	705a      	strb	r2, [r3, #1]
}
 800c31e:	bf00      	nop
 800c320:	bd80      	pop	{r7, pc}
 800c322:	bf00      	nop
 800c324:	20004130 	.word	0x20004130

0800c328 <RFP_ParseResponseFunction>:
static void RFP_ParseResponseFunction(void)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b082      	sub	sp, #8
 800c32c:	af00      	add	r7, sp, #0
   uint32_t MessageCRC = (((uint32_t)RfpDataRecive[Rfp->DataSize - 4] << 24) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 3] << 16)
 800c32e:	4b50      	ldr	r3, [pc, #320]	; (800c470 <RFP_ParseResponseFunction+0x148>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	689b      	ldr	r3, [r3, #8]
 800c334:	3b04      	subs	r3, #4
 800c336:	4a4f      	ldr	r2, [pc, #316]	; (800c474 <RFP_ParseResponseFunction+0x14c>)
 800c338:	5cd3      	ldrb	r3, [r2, r3]
 800c33a:	061a      	lsls	r2, r3, #24
 800c33c:	4b4c      	ldr	r3, [pc, #304]	; (800c470 <RFP_ParseResponseFunction+0x148>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	689b      	ldr	r3, [r3, #8]
 800c342:	3b03      	subs	r3, #3
 800c344:	494b      	ldr	r1, [pc, #300]	; (800c474 <RFP_ParseResponseFunction+0x14c>)
 800c346:	5ccb      	ldrb	r3, [r1, r3]
 800c348:	041b      	lsls	r3, r3, #16
 800c34a:	431a      	orrs	r2, r3
                          | ((uint32_t)RfpDataRecive[Rfp->DataSize - 2] << 8) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 1]));
 800c34c:	4b48      	ldr	r3, [pc, #288]	; (800c470 <RFP_ParseResponseFunction+0x148>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	689b      	ldr	r3, [r3, #8]
 800c352:	3b02      	subs	r3, #2
 800c354:	4947      	ldr	r1, [pc, #284]	; (800c474 <RFP_ParseResponseFunction+0x14c>)
 800c356:	5ccb      	ldrb	r3, [r1, r3]
 800c358:	021b      	lsls	r3, r3, #8
 800c35a:	4313      	orrs	r3, r2
 800c35c:	4a44      	ldr	r2, [pc, #272]	; (800c470 <RFP_ParseResponseFunction+0x148>)
 800c35e:	6812      	ldr	r2, [r2, #0]
 800c360:	6892      	ldr	r2, [r2, #8]
 800c362:	3a01      	subs	r2, #1
 800c364:	4943      	ldr	r1, [pc, #268]	; (800c474 <RFP_ParseResponseFunction+0x14c>)
 800c366:	5c8a      	ldrb	r2, [r1, r2]
   uint32_t MessageCRC = (((uint32_t)RfpDataRecive[Rfp->DataSize - 4] << 24) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 3] << 16)
 800c368:	4313      	orrs	r3, r2
 800c36a:	607b      	str	r3, [r7, #4]
   if(MessageCRC == Crc(CRC_INITIAL_VALUE, Rfp->DataSize - 4, RfpDataRecive))
 800c36c:	4b40      	ldr	r3, [pc, #256]	; (800c470 <RFP_ParseResponseFunction+0x148>)
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	689b      	ldr	r3, [r3, #8]
 800c372:	3b04      	subs	r3, #4
 800c374:	4a3f      	ldr	r2, [pc, #252]	; (800c474 <RFP_ParseResponseFunction+0x14c>)
 800c376:	4619      	mov	r1, r3
 800c378:	f04f 30ff 	mov.w	r0, #4294967295
 800c37c:	f7f8 f8a6 	bl	80044cc <Crc>
 800c380:	4602      	mov	r2, r0
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	4293      	cmp	r3, r2
 800c386:	d12d      	bne.n	800c3e4 <RFP_ParseResponseFunction+0xbc>
   {
      if(RfpDataRecive[0] == Rfp->DeviceType && RfpDataRecive[2] == RFP_MESSAGE)
 800c388:	4b3a      	ldr	r3, [pc, #232]	; (800c474 <RFP_ParseResponseFunction+0x14c>)
 800c38a:	781a      	ldrb	r2, [r3, #0]
 800c38c:	4b38      	ldr	r3, [pc, #224]	; (800c470 <RFP_ParseResponseFunction+0x148>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	795b      	ldrb	r3, [r3, #5]
 800c392:	429a      	cmp	r2, r3
 800c394:	d11d      	bne.n	800c3d2 <RFP_ParseResponseFunction+0xaa>
 800c396:	4b37      	ldr	r3, [pc, #220]	; (800c474 <RFP_ParseResponseFunction+0x14c>)
 800c398:	789b      	ldrb	r3, [r3, #2]
 800c39a:	2b03      	cmp	r3, #3
 800c39c:	d119      	bne.n	800c3d2 <RFP_ParseResponseFunction+0xaa>
      {
         if(RfpDataRecive[3] == RFP_OK)
 800c39e:	4b35      	ldr	r3, [pc, #212]	; (800c474 <RFP_ParseResponseFunction+0x14c>)
 800c3a0:	78db      	ldrb	r3, [r3, #3]
 800c3a2:	2b04      	cmp	r3, #4
 800c3a4:	d10c      	bne.n	800c3c0 <RFP_ParseResponseFunction+0x98>
         {
            Rfp->NewEvent = RFP_EVENT_DATA_OK;
 800c3a6:	4b32      	ldr	r3, [pc, #200]	; (800c470 <RFP_ParseResponseFunction+0x148>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	2204      	movs	r2, #4
 800c3ac:	705a      	strb	r2, [r3, #1]
            Rfp->Cnt      = 0;
 800c3ae:	4b30      	ldr	r3, [pc, #192]	; (800c470 <RFP_ParseResponseFunction+0x148>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	615a      	str	r2, [r3, #20]
            HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800c3b6:	2164      	movs	r1, #100	; 0x64
 800c3b8:	482e      	ldr	r0, [pc, #184]	; (800c474 <RFP_ParseResponseFunction+0x14c>)
 800c3ba:	f7f5 fbe1 	bl	8001b80 <HC12_ReciveToIdleDMA>
         if(RfpDataRecive[3] == RFP_OK)
 800c3be:	e053      	b.n	800c468 <RFP_ParseResponseFunction+0x140>
         }
         else
         {
            Rfp->NewEvent = RFP_EVENT_ERROR;
 800c3c0:	4b2b      	ldr	r3, [pc, #172]	; (800c470 <RFP_ParseResponseFunction+0x148>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	2203      	movs	r2, #3
 800c3c6:	705a      	strb	r2, [r3, #1]
            HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800c3c8:	2164      	movs	r1, #100	; 0x64
 800c3ca:	482a      	ldr	r0, [pc, #168]	; (800c474 <RFP_ParseResponseFunction+0x14c>)
 800c3cc:	f7f5 fbd8 	bl	8001b80 <HC12_ReciveToIdleDMA>
         if(RfpDataRecive[3] == RFP_OK)
 800c3d0:	e04a      	b.n	800c468 <RFP_ParseResponseFunction+0x140>
         }
      }
      else
      {
         Rfp->NewEvent = RFP_EVENT_ERROR;
 800c3d2:	4b27      	ldr	r3, [pc, #156]	; (800c470 <RFP_ParseResponseFunction+0x148>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	2203      	movs	r2, #3
 800c3d8:	705a      	strb	r2, [r3, #1]
         HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800c3da:	2164      	movs	r1, #100	; 0x64
 800c3dc:	4825      	ldr	r0, [pc, #148]	; (800c474 <RFP_ParseResponseFunction+0x14c>)
 800c3de:	f7f5 fbcf 	bl	8001b80 <HC12_ReciveToIdleDMA>
   else
   {
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
      Rfp->NewEvent = RFP_EVENT_ERROR;
   }
}
 800c3e2:	e041      	b.n	800c468 <RFP_ParseResponseFunction+0x140>
   else if(RepareMessage(MessageCRC, RfpDataRecive, Rfp->DataSize) == CRC_OK)
 800c3e4:	4b22      	ldr	r3, [pc, #136]	; (800c470 <RFP_ParseResponseFunction+0x148>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	689b      	ldr	r3, [r3, #8]
 800c3ea:	461a      	mov	r2, r3
 800c3ec:	4921      	ldr	r1, [pc, #132]	; (800c474 <RFP_ParseResponseFunction+0x14c>)
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	f7f8 f8c6 	bl	8004580 <RepareMessage>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	2b01      	cmp	r3, #1
 800c3f8:	d12d      	bne.n	800c456 <RFP_ParseResponseFunction+0x12e>
      if(RfpDataRecive[0] == Rfp->DeviceType && RfpDataRecive[2] == RFP_MESSAGE)
 800c3fa:	4b1e      	ldr	r3, [pc, #120]	; (800c474 <RFP_ParseResponseFunction+0x14c>)
 800c3fc:	781a      	ldrb	r2, [r3, #0]
 800c3fe:	4b1c      	ldr	r3, [pc, #112]	; (800c470 <RFP_ParseResponseFunction+0x148>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	795b      	ldrb	r3, [r3, #5]
 800c404:	429a      	cmp	r2, r3
 800c406:	d11d      	bne.n	800c444 <RFP_ParseResponseFunction+0x11c>
 800c408:	4b1a      	ldr	r3, [pc, #104]	; (800c474 <RFP_ParseResponseFunction+0x14c>)
 800c40a:	789b      	ldrb	r3, [r3, #2]
 800c40c:	2b03      	cmp	r3, #3
 800c40e:	d119      	bne.n	800c444 <RFP_ParseResponseFunction+0x11c>
         if(RfpDataRecive[3] == RFP_OK)
 800c410:	4b18      	ldr	r3, [pc, #96]	; (800c474 <RFP_ParseResponseFunction+0x14c>)
 800c412:	78db      	ldrb	r3, [r3, #3]
 800c414:	2b04      	cmp	r3, #4
 800c416:	d10c      	bne.n	800c432 <RFP_ParseResponseFunction+0x10a>
            Rfp->NewEvent = RFP_EVENT_DATA_OK;
 800c418:	4b15      	ldr	r3, [pc, #84]	; (800c470 <RFP_ParseResponseFunction+0x148>)
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	2204      	movs	r2, #4
 800c41e:	705a      	strb	r2, [r3, #1]
            Rfp->Cnt      = 0;
 800c420:	4b13      	ldr	r3, [pc, #76]	; (800c470 <RFP_ParseResponseFunction+0x148>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	2200      	movs	r2, #0
 800c426:	615a      	str	r2, [r3, #20]
            HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800c428:	2164      	movs	r1, #100	; 0x64
 800c42a:	4812      	ldr	r0, [pc, #72]	; (800c474 <RFP_ParseResponseFunction+0x14c>)
 800c42c:	f7f5 fba8 	bl	8001b80 <HC12_ReciveToIdleDMA>
         if(RfpDataRecive[3] == RFP_OK)
 800c430:	e01a      	b.n	800c468 <RFP_ParseResponseFunction+0x140>
            Rfp->NewEvent = RFP_EVENT_ERROR;
 800c432:	4b0f      	ldr	r3, [pc, #60]	; (800c470 <RFP_ParseResponseFunction+0x148>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	2203      	movs	r2, #3
 800c438:	705a      	strb	r2, [r3, #1]
            HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800c43a:	2164      	movs	r1, #100	; 0x64
 800c43c:	480d      	ldr	r0, [pc, #52]	; (800c474 <RFP_ParseResponseFunction+0x14c>)
 800c43e:	f7f5 fb9f 	bl	8001b80 <HC12_ReciveToIdleDMA>
         if(RfpDataRecive[3] == RFP_OK)
 800c442:	e011      	b.n	800c468 <RFP_ParseResponseFunction+0x140>
         Rfp->NewEvent = RFP_EVENT_ERROR;
 800c444:	4b0a      	ldr	r3, [pc, #40]	; (800c470 <RFP_ParseResponseFunction+0x148>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	2203      	movs	r2, #3
 800c44a:	705a      	strb	r2, [r3, #1]
         HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800c44c:	2164      	movs	r1, #100	; 0x64
 800c44e:	4809      	ldr	r0, [pc, #36]	; (800c474 <RFP_ParseResponseFunction+0x14c>)
 800c450:	f7f5 fb96 	bl	8001b80 <HC12_ReciveToIdleDMA>
}
 800c454:	e008      	b.n	800c468 <RFP_ParseResponseFunction+0x140>
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800c456:	2164      	movs	r1, #100	; 0x64
 800c458:	4806      	ldr	r0, [pc, #24]	; (800c474 <RFP_ParseResponseFunction+0x14c>)
 800c45a:	f7f5 fb91 	bl	8001b80 <HC12_ReciveToIdleDMA>
      Rfp->NewEvent = RFP_EVENT_ERROR;
 800c45e:	4b04      	ldr	r3, [pc, #16]	; (800c470 <RFP_ParseResponseFunction+0x148>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	2203      	movs	r2, #3
 800c464:	705a      	strb	r2, [r3, #1]
}
 800c466:	e7ff      	b.n	800c468 <RFP_ParseResponseFunction+0x140>
 800c468:	bf00      	nop
 800c46a:	3708      	adds	r7, #8
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}
 800c470:	20004130 	.word	0x20004130
 800c474:	20004068 	.word	0x20004068

0800c478 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b086      	sub	sp, #24
 800c47c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800c47e:	1d3b      	adds	r3, r7, #4
 800c480:	2200      	movs	r2, #0
 800c482:	601a      	str	r2, [r3, #0]
 800c484:	605a      	str	r2, [r3, #4]
 800c486:	609a      	str	r2, [r3, #8]
 800c488:	60da      	str	r2, [r3, #12]
 800c48a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800c48c:	2300      	movs	r3, #0
 800c48e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800c490:	4b13      	ldr	r3, [pc, #76]	; (800c4e0 <MX_RTC_Init+0x68>)
 800c492:	4a14      	ldr	r2, [pc, #80]	; (800c4e4 <MX_RTC_Init+0x6c>)
 800c494:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800c496:	4b12      	ldr	r3, [pc, #72]	; (800c4e0 <MX_RTC_Init+0x68>)
 800c498:	2200      	movs	r2, #0
 800c49a:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 800c49c:	4b10      	ldr	r3, [pc, #64]	; (800c4e0 <MX_RTC_Init+0x68>)
 800c49e:	227f      	movs	r2, #127	; 0x7f
 800c4a0:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800c4a2:	4b0f      	ldr	r3, [pc, #60]	; (800c4e0 <MX_RTC_Init+0x68>)
 800c4a4:	22ff      	movs	r2, #255	; 0xff
 800c4a6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800c4a8:	4b0d      	ldr	r3, [pc, #52]	; (800c4e0 <MX_RTC_Init+0x68>)
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800c4ae:	4b0c      	ldr	r3, [pc, #48]	; (800c4e0 <MX_RTC_Init+0x68>)
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800c4b4:	4b0a      	ldr	r3, [pc, #40]	; (800c4e0 <MX_RTC_Init+0x68>)
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800c4ba:	4b09      	ldr	r3, [pc, #36]	; (800c4e0 <MX_RTC_Init+0x68>)
 800c4bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c4c0:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 800c4c2:	4b07      	ldr	r3, [pc, #28]	; (800c4e0 <MX_RTC_Init+0x68>)
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800c4c8:	4805      	ldr	r0, [pc, #20]	; (800c4e0 <MX_RTC_Init+0x68>)
 800c4ca:	f003 fb25 	bl	800fb18 <HAL_RTC_Init>
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d001      	beq.n	800c4d8 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 800c4d4:	f7fd fffa 	bl	800a4cc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800c4d8:	3718      	adds	r7, #24
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}
 800c4de:	bf00      	nop
 800c4e0:	20004164 	.word	0x20004164
 800c4e4:	40002800 	.word	0x40002800

0800c4e8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b0aa      	sub	sp, #168	; 0xa8
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c4f0:	f107 0310 	add.w	r3, r7, #16
 800c4f4:	2298      	movs	r2, #152	; 0x98
 800c4f6:	2100      	movs	r1, #0
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	f00c fa59 	bl	80189b0 <memset>
  if(rtcHandle->Instance==RTC)
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	4a16      	ldr	r2, [pc, #88]	; (800c55c <HAL_RTC_MspInit+0x74>)
 800c504:	4293      	cmp	r3, r2
 800c506:	d124      	bne.n	800c552 <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800c508:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c50c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800c50e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c512:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c516:	f107 0310 	add.w	r3, r7, #16
 800c51a:	4618      	mov	r0, r3
 800c51c:	f002 fda8 	bl	800f070 <HAL_RCCEx_PeriphCLKConfig>
 800c520:	4603      	mov	r3, r0
 800c522:	2b00      	cmp	r3, #0
 800c524:	d001      	beq.n	800c52a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800c526:	f7fd ffd1 	bl	800a4cc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800c52a:	4b0d      	ldr	r3, [pc, #52]	; (800c560 <HAL_RTC_MspInit+0x78>)
 800c52c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c530:	4a0b      	ldr	r2, [pc, #44]	; (800c560 <HAL_RTC_MspInit+0x78>)
 800c532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c536:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800c53a:	4b09      	ldr	r3, [pc, #36]	; (800c560 <HAL_RTC_MspInit+0x78>)
 800c53c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c53e:	4a08      	ldr	r2, [pc, #32]	; (800c560 <HAL_RTC_MspInit+0x78>)
 800c540:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c544:	6593      	str	r3, [r2, #88]	; 0x58
 800c546:	4b06      	ldr	r3, [pc, #24]	; (800c560 <HAL_RTC_MspInit+0x78>)
 800c548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c54a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c54e:	60fb      	str	r3, [r7, #12]
 800c550:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800c552:	bf00      	nop
 800c554:	37a8      	adds	r7, #168	; 0xa8
 800c556:	46bd      	mov	sp, r7
 800c558:	bd80      	pop	{r7, pc}
 800c55a:	bf00      	nop
 800c55c:	40002800 	.word	0x40002800
 800c560:	40021000 	.word	0x40021000

0800c564 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800c568:	4b1b      	ldr	r3, [pc, #108]	; (800c5d8 <MX_SPI1_Init+0x74>)
 800c56a:	4a1c      	ldr	r2, [pc, #112]	; (800c5dc <MX_SPI1_Init+0x78>)
 800c56c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800c56e:	4b1a      	ldr	r3, [pc, #104]	; (800c5d8 <MX_SPI1_Init+0x74>)
 800c570:	f44f 7282 	mov.w	r2, #260	; 0x104
 800c574:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800c576:	4b18      	ldr	r3, [pc, #96]	; (800c5d8 <MX_SPI1_Init+0x74>)
 800c578:	2200      	movs	r2, #0
 800c57a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800c57c:	4b16      	ldr	r3, [pc, #88]	; (800c5d8 <MX_SPI1_Init+0x74>)
 800c57e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800c582:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800c584:	4b14      	ldr	r3, [pc, #80]	; (800c5d8 <MX_SPI1_Init+0x74>)
 800c586:	2200      	movs	r2, #0
 800c588:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800c58a:	4b13      	ldr	r3, [pc, #76]	; (800c5d8 <MX_SPI1_Init+0x74>)
 800c58c:	2200      	movs	r2, #0
 800c58e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800c590:	4b11      	ldr	r3, [pc, #68]	; (800c5d8 <MX_SPI1_Init+0x74>)
 800c592:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c596:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800c598:	4b0f      	ldr	r3, [pc, #60]	; (800c5d8 <MX_SPI1_Init+0x74>)
 800c59a:	2238      	movs	r2, #56	; 0x38
 800c59c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800c59e:	4b0e      	ldr	r3, [pc, #56]	; (800c5d8 <MX_SPI1_Init+0x74>)
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800c5a4:	4b0c      	ldr	r3, [pc, #48]	; (800c5d8 <MX_SPI1_Init+0x74>)
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c5aa:	4b0b      	ldr	r3, [pc, #44]	; (800c5d8 <MX_SPI1_Init+0x74>)
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800c5b0:	4b09      	ldr	r3, [pc, #36]	; (800c5d8 <MX_SPI1_Init+0x74>)
 800c5b2:	2207      	movs	r2, #7
 800c5b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800c5b6:	4b08      	ldr	r3, [pc, #32]	; (800c5d8 <MX_SPI1_Init+0x74>)
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800c5bc:	4b06      	ldr	r3, [pc, #24]	; (800c5d8 <MX_SPI1_Init+0x74>)
 800c5be:	2208      	movs	r2, #8
 800c5c0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800c5c2:	4805      	ldr	r0, [pc, #20]	; (800c5d8 <MX_SPI1_Init+0x74>)
 800c5c4:	f003 fde4 	bl	8010190 <HAL_SPI_Init>
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d001      	beq.n	800c5d2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800c5ce:	f7fd ff7d 	bl	800a4cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800c5d2:	bf00      	nop
 800c5d4:	bd80      	pop	{r7, pc}
 800c5d6:	bf00      	nop
 800c5d8:	20004198 	.word	0x20004198
 800c5dc:	40013000 	.word	0x40013000

0800c5e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b08a      	sub	sp, #40	; 0x28
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c5e8:	f107 0314 	add.w	r3, r7, #20
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	601a      	str	r2, [r3, #0]
 800c5f0:	605a      	str	r2, [r3, #4]
 800c5f2:	609a      	str	r2, [r3, #8]
 800c5f4:	60da      	str	r2, [r3, #12]
 800c5f6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	4a17      	ldr	r2, [pc, #92]	; (800c65c <HAL_SPI_MspInit+0x7c>)
 800c5fe:	4293      	cmp	r3, r2
 800c600:	d128      	bne.n	800c654 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800c602:	4b17      	ldr	r3, [pc, #92]	; (800c660 <HAL_SPI_MspInit+0x80>)
 800c604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c606:	4a16      	ldr	r2, [pc, #88]	; (800c660 <HAL_SPI_MspInit+0x80>)
 800c608:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c60c:	6613      	str	r3, [r2, #96]	; 0x60
 800c60e:	4b14      	ldr	r3, [pc, #80]	; (800c660 <HAL_SPI_MspInit+0x80>)
 800c610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c612:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c616:	613b      	str	r3, [r7, #16]
 800c618:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c61a:	4b11      	ldr	r3, [pc, #68]	; (800c660 <HAL_SPI_MspInit+0x80>)
 800c61c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c61e:	4a10      	ldr	r2, [pc, #64]	; (800c660 <HAL_SPI_MspInit+0x80>)
 800c620:	f043 0301 	orr.w	r3, r3, #1
 800c624:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c626:	4b0e      	ldr	r3, [pc, #56]	; (800c660 <HAL_SPI_MspInit+0x80>)
 800c628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c62a:	f003 0301 	and.w	r3, r3, #1
 800c62e:	60fb      	str	r3, [r7, #12]
 800c630:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800c632:	23e0      	movs	r3, #224	; 0xe0
 800c634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c636:	2302      	movs	r3, #2
 800c638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c63a:	2300      	movs	r3, #0
 800c63c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c63e:	2303      	movs	r3, #3
 800c640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800c642:	2305      	movs	r3, #5
 800c644:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c646:	f107 0314 	add.w	r3, r7, #20
 800c64a:	4619      	mov	r1, r3
 800c64c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c650:	f001 fa92 	bl	800db78 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800c654:	bf00      	nop
 800c656:	3728      	adds	r7, #40	; 0x28
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}
 800c65c:	40013000 	.word	0x40013000
 800c660:	40021000 	.word	0x40021000

0800c664 <ssd1306_command>:
#include "string.h"
#include "cmsis_os.h"
SPI_HandleTypeDef *ssd1306_spi;
static uint8_t buffer[(SSD1306_LCDWIDTH * SSD1306_LCDHEIGHT) / 8];
static void ssd1306_command(uint8_t command)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b082      	sub	sp, #8
 800c668:	af00      	add	r7, sp, #0
 800c66a:	4603      	mov	r3, r0
 800c66c:	71fb      	strb	r3, [r7, #7]
   HAL_GPIO_WritePin(ssd1306_dc_GPIO_Port, ssd1306_dc_Pin, GPIO_PIN_RESET);
 800c66e:	2200      	movs	r2, #0
 800c670:	2101      	movs	r1, #1
 800c672:	480d      	ldr	r0, [pc, #52]	; (800c6a8 <ssd1306_command+0x44>)
 800c674:	f001 fc2a 	bl	800decc <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_RESET);
 800c678:	2200      	movs	r2, #0
 800c67a:	2110      	movs	r1, #16
 800c67c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c680:	f001 fc24 	bl	800decc <HAL_GPIO_WritePin>
   HAL_SPI_Transmit(ssd1306_spi, &command, 1, 10);
 800c684:	4b09      	ldr	r3, [pc, #36]	; (800c6ac <ssd1306_command+0x48>)
 800c686:	6818      	ldr	r0, [r3, #0]
 800c688:	1df9      	adds	r1, r7, #7
 800c68a:	230a      	movs	r3, #10
 800c68c:	2201      	movs	r2, #1
 800c68e:	f003 fe22 	bl	80102d6 <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_SET);
 800c692:	2201      	movs	r2, #1
 800c694:	2110      	movs	r1, #16
 800c696:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c69a:	f001 fc17 	bl	800decc <HAL_GPIO_WritePin>
}
 800c69e:	bf00      	nop
 800c6a0:	3708      	adds	r7, #8
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	bd80      	pop	{r7, pc}
 800c6a6:	bf00      	nop
 800c6a8:	48000400 	.word	0x48000400
 800c6ac:	200041fc 	.word	0x200041fc

0800c6b0 <ssd1306_set_pixel>:
//    HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_RESET);
//    HAL_SPI_Transmit(ssd1306_spi, &data, 1, 10);
//    HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_SET);
// }
void ssd1306_set_pixel(uint8_t x, uint8_t y, uint8_t color)
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b083      	sub	sp, #12
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	71fb      	strb	r3, [r7, #7]
 800c6ba:	460b      	mov	r3, r1
 800c6bc:	71bb      	strb	r3, [r7, #6]
 800c6be:	4613      	mov	r3, r2
 800c6c0:	717b      	strb	r3, [r7, #5]
   if((x < 0) || (x >= SSD1306_LCDWIDTH) || (y < 0) || (y >= SSD1306_LCDHEIGHT))
 800c6c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	db43      	blt.n	800c752 <ssd1306_set_pixel+0xa2>
 800c6ca:	79bb      	ldrb	r3, [r7, #6]
 800c6cc:	2b3f      	cmp	r3, #63	; 0x3f
 800c6ce:	d840      	bhi.n	800c752 <ssd1306_set_pixel+0xa2>
   {
      return;
   }
   if(color != 0 && color != 1)
 800c6d0:	797b      	ldrb	r3, [r7, #5]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d002      	beq.n	800c6dc <ssd1306_set_pixel+0x2c>
 800c6d6:	797b      	ldrb	r3, [r7, #5]
 800c6d8:	2b01      	cmp	r3, #1
 800c6da:	d13c      	bne.n	800c756 <ssd1306_set_pixel+0xa6>
   {
      return;
   }
   if(color == 0)
 800c6dc:	797b      	ldrb	r3, [r7, #5]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d11c      	bne.n	800c71c <ssd1306_set_pixel+0x6c>
   {
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y & 7));
 800c6e2:	79fa      	ldrb	r2, [r7, #7]
 800c6e4:	79bb      	ldrb	r3, [r7, #6]
 800c6e6:	08db      	lsrs	r3, r3, #3
 800c6e8:	b2d8      	uxtb	r0, r3
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	01db      	lsls	r3, r3, #7
 800c6ee:	4413      	add	r3, r2
 800c6f0:	4a1c      	ldr	r2, [pc, #112]	; (800c764 <ssd1306_set_pixel+0xb4>)
 800c6f2:	5cd3      	ldrb	r3, [r2, r3]
 800c6f4:	b25a      	sxtb	r2, r3
 800c6f6:	79bb      	ldrb	r3, [r7, #6]
 800c6f8:	f003 0307 	and.w	r3, r3, #7
 800c6fc:	2101      	movs	r1, #1
 800c6fe:	fa01 f303 	lsl.w	r3, r1, r3
 800c702:	b25b      	sxtb	r3, r3
 800c704:	43db      	mvns	r3, r3
 800c706:	b25b      	sxtb	r3, r3
 800c708:	4013      	ands	r3, r2
 800c70a:	b259      	sxtb	r1, r3
 800c70c:	79fa      	ldrb	r2, [r7, #7]
 800c70e:	4603      	mov	r3, r0
 800c710:	01db      	lsls	r3, r3, #7
 800c712:	4413      	add	r3, r2
 800c714:	b2c9      	uxtb	r1, r1
 800c716:	4a13      	ldr	r2, [pc, #76]	; (800c764 <ssd1306_set_pixel+0xb4>)
 800c718:	54d1      	strb	r1, [r2, r3]
 800c71a:	e01d      	b.n	800c758 <ssd1306_set_pixel+0xa8>
   }
   else
   {
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= (1 << (y & 7));
 800c71c:	79fa      	ldrb	r2, [r7, #7]
 800c71e:	79bb      	ldrb	r3, [r7, #6]
 800c720:	08db      	lsrs	r3, r3, #3
 800c722:	b2d8      	uxtb	r0, r3
 800c724:	4603      	mov	r3, r0
 800c726:	01db      	lsls	r3, r3, #7
 800c728:	4413      	add	r3, r2
 800c72a:	4a0e      	ldr	r2, [pc, #56]	; (800c764 <ssd1306_set_pixel+0xb4>)
 800c72c:	5cd3      	ldrb	r3, [r2, r3]
 800c72e:	b25a      	sxtb	r2, r3
 800c730:	79bb      	ldrb	r3, [r7, #6]
 800c732:	f003 0307 	and.w	r3, r3, #7
 800c736:	2101      	movs	r1, #1
 800c738:	fa01 f303 	lsl.w	r3, r1, r3
 800c73c:	b25b      	sxtb	r3, r3
 800c73e:	4313      	orrs	r3, r2
 800c740:	b259      	sxtb	r1, r3
 800c742:	79fa      	ldrb	r2, [r7, #7]
 800c744:	4603      	mov	r3, r0
 800c746:	01db      	lsls	r3, r3, #7
 800c748:	4413      	add	r3, r2
 800c74a:	b2c9      	uxtb	r1, r1
 800c74c:	4a05      	ldr	r2, [pc, #20]	; (800c764 <ssd1306_set_pixel+0xb4>)
 800c74e:	54d1      	strb	r1, [r2, r3]
 800c750:	e002      	b.n	800c758 <ssd1306_set_pixel+0xa8>
      return;
 800c752:	bf00      	nop
 800c754:	e000      	b.n	800c758 <ssd1306_set_pixel+0xa8>
      return;
 800c756:	bf00      	nop
   }
}
 800c758:	370c      	adds	r7, #12
 800c75a:	46bd      	mov	sp, r7
 800c75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c760:	4770      	bx	lr
 800c762:	bf00      	nop
 800c764:	20004200 	.word	0x20004200

0800c768 <ssd1306_display>:
void ssd1306_display()
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	af00      	add	r7, sp, #0
   ssd1306_command(0x22);
 800c76c:	2022      	movs	r0, #34	; 0x22
 800c76e:	f7ff ff79 	bl	800c664 <ssd1306_command>
   ssd1306_command(0x00);
 800c772:	2000      	movs	r0, #0
 800c774:	f7ff ff76 	bl	800c664 <ssd1306_command>
   ssd1306_command(0x07);
 800c778:	2007      	movs	r0, #7
 800c77a:	f7ff ff73 	bl	800c664 <ssd1306_command>
   HAL_GPIO_WritePin(ssd1306_dc_GPIO_Port, ssd1306_dc_Pin, GPIO_PIN_SET);
 800c77e:	2201      	movs	r2, #1
 800c780:	2101      	movs	r1, #1
 800c782:	480c      	ldr	r0, [pc, #48]	; (800c7b4 <ssd1306_display+0x4c>)
 800c784:	f001 fba2 	bl	800decc <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_RESET);
 800c788:	2200      	movs	r2, #0
 800c78a:	2110      	movs	r1, #16
 800c78c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c790:	f001 fb9c 	bl	800decc <HAL_GPIO_WritePin>
   HAL_SPI_Transmit(ssd1306_spi, (uint8_t *)&buffer, (SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8), 100);
 800c794:	4b08      	ldr	r3, [pc, #32]	; (800c7b8 <ssd1306_display+0x50>)
 800c796:	6818      	ldr	r0, [r3, #0]
 800c798:	2364      	movs	r3, #100	; 0x64
 800c79a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c79e:	4907      	ldr	r1, [pc, #28]	; (800c7bc <ssd1306_display+0x54>)
 800c7a0:	f003 fd99 	bl	80102d6 <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_SET);
 800c7a4:	2201      	movs	r2, #1
 800c7a6:	2110      	movs	r1, #16
 800c7a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c7ac:	f001 fb8e 	bl	800decc <HAL_GPIO_WritePin>
}
 800c7b0:	bf00      	nop
 800c7b2:	bd80      	pop	{r7, pc}
 800c7b4:	48000400 	.word	0x48000400
 800c7b8:	200041fc 	.word	0x200041fc
 800c7bc:	20004200 	.word	0x20004200

0800c7c0 <ssd1306_clear>:
void ssd1306_clear()
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	af00      	add	r7, sp, #0
   memset(buffer, 0x00, (SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8));
 800c7c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c7c8:	2100      	movs	r1, #0
 800c7ca:	4802      	ldr	r0, [pc, #8]	; (800c7d4 <ssd1306_clear+0x14>)
 800c7cc:	f00c f8f0 	bl	80189b0 <memset>
}
 800c7d0:	bf00      	nop
 800c7d2:	bd80      	pop	{r7, pc}
 800c7d4:	20004200 	.word	0x20004200

0800c7d8 <ssd1306_init>:
void ssd1306_init(SPI_HandleTypeDef *spi)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b082      	sub	sp, #8
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(ssd1306_res_GPIO_Port, ssd1306_res_Pin, GPIO_PIN_RESET);
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c7e6:	4833      	ldr	r0, [pc, #204]	; (800c8b4 <ssd1306_init+0xdc>)
 800c7e8:	f001 fb70 	bl	800decc <HAL_GPIO_WritePin>
   osDelay(150);
 800c7ec:	2096      	movs	r0, #150	; 0x96
 800c7ee:	f008 f8a7 	bl	8014940 <osDelay>
   HAL_GPIO_WritePin(ssd1306_res_GPIO_Port, ssd1306_res_Pin, GPIO_PIN_SET);
 800c7f2:	2201      	movs	r2, #1
 800c7f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c7f8:	482e      	ldr	r0, [pc, #184]	; (800c8b4 <ssd1306_init+0xdc>)
 800c7fa:	f001 fb67 	bl	800decc <HAL_GPIO_WritePin>
   osDelay(100);
 800c7fe:	2064      	movs	r0, #100	; 0x64
 800c800:	f008 f89e 	bl	8014940 <osDelay>
   ssd1306_spi = spi;
 800c804:	4a2c      	ldr	r2, [pc, #176]	; (800c8b8 <ssd1306_init+0xe0>)
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	6013      	str	r3, [r2, #0]
   ssd1306_command(0xAE); // Display Off
 800c80a:	20ae      	movs	r0, #174	; 0xae
 800c80c:	f7ff ff2a 	bl	800c664 <ssd1306_command>

   ssd1306_command(0x00);
 800c810:	2000      	movs	r0, #0
 800c812:	f7ff ff27 	bl	800c664 <ssd1306_command>
   ssd1306_command(0x10);
 800c816:	2010      	movs	r0, #16
 800c818:	f7ff ff24 	bl	800c664 <ssd1306_command>
   ssd1306_command(0x40);
 800c81c:	2040      	movs	r0, #64	; 0x40
 800c81e:	f7ff ff21 	bl	800c664 <ssd1306_command>
   ssd1306_command(0x20); // Set addressing mode
 800c822:	2020      	movs	r0, #32
 800c824:	f7ff ff1e 	bl	800c664 <ssd1306_command>
   ssd1306_command(0x00); // Horizontal Addressing Mode
 800c828:	2000      	movs	r0, #0
 800c82a:	f7ff ff1b 	bl	800c664 <ssd1306_command>

   ssd1306_command(0x81); // Set Contrast Control
 800c82e:	2081      	movs	r0, #129	; 0x81
 800c830:	f7ff ff18 	bl	800c664 <ssd1306_command>
   ssd1306_command(0xff);
 800c834:	20ff      	movs	r0, #255	; 0xff
 800c836:	f7ff ff15 	bl	800c664 <ssd1306_command>
   ssd1306_command(0xA0 | (0x01 & 1));
 800c83a:	20a1      	movs	r0, #161	; 0xa1
 800c83c:	f7ff ff12 	bl	800c664 <ssd1306_command>
   ssd1306_command(0xC0 | (0x08 & (1 << 3)));
 800c840:	20c8      	movs	r0, #200	; 0xc8
 800c842:	f7ff ff0f 	bl	800c664 <ssd1306_command>

   ssd1306_command(0xA6); // Set Normal Display
 800c846:	20a6      	movs	r0, #166	; 0xa6
 800c848:	f7ff ff0c 	bl	800c664 <ssd1306_command>

   ssd1306_command(0xA8); // Select Multiplex Ratio
 800c84c:	20a8      	movs	r0, #168	; 0xa8
 800c84e:	f7ff ff09 	bl	800c664 <ssd1306_command>
   ssd1306_command(0x3F); // Default => 0x3F (1/64 Duty)	0x1F(1/32 Duty)
 800c852:	203f      	movs	r0, #63	; 0x3f
 800c854:	f7ff ff06 	bl	800c664 <ssd1306_command>

   ssd1306_command(0xD3); // Setting Display Offset
 800c858:	20d3      	movs	r0, #211	; 0xd3
 800c85a:	f7ff ff03 	bl	800c664 <ssd1306_command>
   ssd1306_command(0x00); // 00H Reset
 800c85e:	2000      	movs	r0, #0
 800c860:	f7ff ff00 	bl	800c664 <ssd1306_command>

   ssd1306_command(0xD5); // SET DISPLAY CLOCK
 800c864:	20d5      	movs	r0, #213	; 0xd5
 800c866:	f7ff fefd 	bl	800c664 <ssd1306_command>
   ssd1306_command(0x80); // 105HZ
 800c86a:	2080      	movs	r0, #128	; 0x80
 800c86c:	f7ff fefa 	bl	800c664 <ssd1306_command>

   ssd1306_command(0xD9); // Set Pre-Charge period
 800c870:	20d9      	movs	r0, #217	; 0xd9
 800c872:	f7ff fef7 	bl	800c664 <ssd1306_command>
   ssd1306_command(0x22);
 800c876:	2022      	movs	r0, #34	; 0x22
 800c878:	f7ff fef4 	bl	800c664 <ssd1306_command>

   ssd1306_command(0xDA); // Set COM Hardware Configuration
 800c87c:	20da      	movs	r0, #218	; 0xda
 800c87e:	f7ff fef1 	bl	800c664 <ssd1306_command>
   ssd1306_command(0x12); // Alternative COM Pin---See IC Spec page 34
 800c882:	2012      	movs	r0, #18
 800c884:	f7ff feee 	bl	800c664 <ssd1306_command>
                          // (0x02)=> A4=0;Sequential COM pin configuration;A5=0;Disable COM Left/Right remap

   ssd1306_command(0xDB); // Set Deselect Vcomh level
 800c888:	20db      	movs	r0, #219	; 0xdb
 800c88a:	f7ff feeb 	bl	800c664 <ssd1306_command>
   ssd1306_command(0x40);
 800c88e:	2040      	movs	r0, #64	; 0x40
 800c890:	f7ff fee8 	bl	800c664 <ssd1306_command>

   ssd1306_command(0x8D); // Set Charge Pump
 800c894:	208d      	movs	r0, #141	; 0x8d
 800c896:	f7ff fee5 	bl	800c664 <ssd1306_command>
   // ssd1306_command(0x10);  // Disable Charge Pump
   ssd1306_command(0x14); // Endable Charge Pump
 800c89a:	2014      	movs	r0, #20
 800c89c:	f7ff fee2 	bl	800c664 <ssd1306_command>

   ssd1306_command(0xA4); // Entire Display ON
 800c8a0:	20a4      	movs	r0, #164	; 0xa4
 800c8a2:	f7ff fedf 	bl	800c664 <ssd1306_command>
   ssd1306_command(SSD1306_DISPLAYON);
 800c8a6:	20af      	movs	r0, #175	; 0xaf
 800c8a8:	f7ff fedc 	bl	800c664 <ssd1306_command>
}
 800c8ac:	bf00      	nop
 800c8ae:	3708      	adds	r7, #8
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	bd80      	pop	{r7, pc}
 800c8b4:	48000400 	.word	0x48000400
 800c8b8:	200041fc 	.word	0x200041fc

0800c8bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b082      	sub	sp, #8
 800c8c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c8c2:	4b11      	ldr	r3, [pc, #68]	; (800c908 <HAL_MspInit+0x4c>)
 800c8c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c8c6:	4a10      	ldr	r2, [pc, #64]	; (800c908 <HAL_MspInit+0x4c>)
 800c8c8:	f043 0301 	orr.w	r3, r3, #1
 800c8cc:	6613      	str	r3, [r2, #96]	; 0x60
 800c8ce:	4b0e      	ldr	r3, [pc, #56]	; (800c908 <HAL_MspInit+0x4c>)
 800c8d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c8d2:	f003 0301 	and.w	r3, r3, #1
 800c8d6:	607b      	str	r3, [r7, #4]
 800c8d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c8da:	4b0b      	ldr	r3, [pc, #44]	; (800c908 <HAL_MspInit+0x4c>)
 800c8dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8de:	4a0a      	ldr	r2, [pc, #40]	; (800c908 <HAL_MspInit+0x4c>)
 800c8e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c8e4:	6593      	str	r3, [r2, #88]	; 0x58
 800c8e6:	4b08      	ldr	r3, [pc, #32]	; (800c908 <HAL_MspInit+0x4c>)
 800c8e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c8ee:	603b      	str	r3, [r7, #0]
 800c8f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	210f      	movs	r1, #15
 800c8f6:	f06f 0001 	mvn.w	r0, #1
 800c8fa:	f000 fdd2 	bl	800d4a2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c8fe:	bf00      	nop
 800c900:	3708      	adds	r7, #8
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}
 800c906:	bf00      	nop
 800c908:	40021000 	.word	0x40021000

0800c90c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b08c      	sub	sp, #48	; 0x30
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800c914:	2300      	movs	r3, #0
 800c916:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM15 clock */
  __HAL_RCC_TIM15_CLK_ENABLE();
 800c91a:	4b2e      	ldr	r3, [pc, #184]	; (800c9d4 <HAL_InitTick+0xc8>)
 800c91c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c91e:	4a2d      	ldr	r2, [pc, #180]	; (800c9d4 <HAL_InitTick+0xc8>)
 800c920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c924:	6613      	str	r3, [r2, #96]	; 0x60
 800c926:	4b2b      	ldr	r3, [pc, #172]	; (800c9d4 <HAL_InitTick+0xc8>)
 800c928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c92a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c92e:	60bb      	str	r3, [r7, #8]
 800c930:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800c932:	f107 020c 	add.w	r2, r7, #12
 800c936:	f107 0310 	add.w	r3, r7, #16
 800c93a:	4611      	mov	r1, r2
 800c93c:	4618      	mov	r0, r3
 800c93e:	f002 faa5 	bl	800ee8c <HAL_RCC_GetClockConfig>

  /* Compute TIM15 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800c942:	f002 fa8d 	bl	800ee60 <HAL_RCC_GetPCLK2Freq>
 800c946:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM15 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800c948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c94a:	4a23      	ldr	r2, [pc, #140]	; (800c9d8 <HAL_InitTick+0xcc>)
 800c94c:	fba2 2303 	umull	r2, r3, r2, r3
 800c950:	0c9b      	lsrs	r3, r3, #18
 800c952:	3b01      	subs	r3, #1
 800c954:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM15 */
  htim15.Instance = TIM15;
 800c956:	4b21      	ldr	r3, [pc, #132]	; (800c9dc <HAL_InitTick+0xd0>)
 800c958:	4a21      	ldr	r2, [pc, #132]	; (800c9e0 <HAL_InitTick+0xd4>)
 800c95a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM15CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim15.Init.Period = (1000000U / 1000U) - 1U;
 800c95c:	4b1f      	ldr	r3, [pc, #124]	; (800c9dc <HAL_InitTick+0xd0>)
 800c95e:	f240 32e7 	movw	r2, #999	; 0x3e7
 800c962:	60da      	str	r2, [r3, #12]
  htim15.Init.Prescaler = uwPrescalerValue;
 800c964:	4a1d      	ldr	r2, [pc, #116]	; (800c9dc <HAL_InitTick+0xd0>)
 800c966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c968:	6053      	str	r3, [r2, #4]
  htim15.Init.ClockDivision = 0;
 800c96a:	4b1c      	ldr	r3, [pc, #112]	; (800c9dc <HAL_InitTick+0xd0>)
 800c96c:	2200      	movs	r2, #0
 800c96e:	611a      	str	r2, [r3, #16]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c970:	4b1a      	ldr	r3, [pc, #104]	; (800c9dc <HAL_InitTick+0xd0>)
 800c972:	2200      	movs	r2, #0
 800c974:	609a      	str	r2, [r3, #8]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c976:	4b19      	ldr	r3, [pc, #100]	; (800c9dc <HAL_InitTick+0xd0>)
 800c978:	2200      	movs	r2, #0
 800c97a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim15);
 800c97c:	4817      	ldr	r0, [pc, #92]	; (800c9dc <HAL_InitTick+0xd0>)
 800c97e:	f004 fb17 	bl	8010fb0 <HAL_TIM_Base_Init>
 800c982:	4603      	mov	r3, r0
 800c984:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800c988:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d11b      	bne.n	800c9c8 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim15);
 800c990:	4812      	ldr	r0, [pc, #72]	; (800c9dc <HAL_InitTick+0xd0>)
 800c992:	f004 fb65 	bl	8011060 <HAL_TIM_Base_Start_IT>
 800c996:	4603      	mov	r3, r0
 800c998:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800c99c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d111      	bne.n	800c9c8 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM15 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800c9a4:	2018      	movs	r0, #24
 800c9a6:	f000 fd98 	bl	800d4da <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2b0f      	cmp	r3, #15
 800c9ae:	d808      	bhi.n	800c9c2 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, TickPriority, 0U);
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	6879      	ldr	r1, [r7, #4]
 800c9b4:	2018      	movs	r0, #24
 800c9b6:	f000 fd74 	bl	800d4a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800c9ba:	4a0a      	ldr	r2, [pc, #40]	; (800c9e4 <HAL_InitTick+0xd8>)
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	6013      	str	r3, [r2, #0]
 800c9c0:	e002      	b.n	800c9c8 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 800c9c2:	2301      	movs	r3, #1
 800c9c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800c9c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	3730      	adds	r7, #48	; 0x30
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	bd80      	pop	{r7, pc}
 800c9d4:	40021000 	.word	0x40021000
 800c9d8:	431bde83 	.word	0x431bde83
 800c9dc:	20004600 	.word	0x20004600
 800c9e0:	40014000 	.word	0x40014000
 800c9e4:	20000098 	.word	0x20000098

0800c9e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
   HAL_NVIC_SystemReset();
 800c9ec:	f000 fd83 	bl	800d4f6 <HAL_NVIC_SystemReset>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while(1)
   {
      HAL_NVIC_SystemReset();
 800c9f0:	f000 fd81 	bl	800d4f6 <HAL_NVIC_SystemReset>
 800c9f4:	e7fc      	b.n	800c9f0 <NMI_Handler+0x8>

0800c9f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c9f6:	b580      	push	{r7, lr}
 800c9f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 800c9fa:	f000 fd7c 	bl	800d4f6 <HAL_NVIC_SystemReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_NVIC_SystemReset();
 800c9fe:	f000 fd7a 	bl	800d4f6 <HAL_NVIC_SystemReset>
 800ca02:	e7fc      	b.n	800c9fe <HardFault_Handler+0x8>

0800ca04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ca04:	b480      	push	{r7}
 800ca06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ca08:	e7fe      	b.n	800ca08 <MemManage_Handler+0x4>

0800ca0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ca0a:	b480      	push	{r7}
 800ca0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ca0e:	e7fe      	b.n	800ca0e <BusFault_Handler+0x4>

0800ca10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ca10:	b480      	push	{r7}
 800ca12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ca14:	e7fe      	b.n	800ca14 <UsageFault_Handler+0x4>

0800ca16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ca16:	b480      	push	{r7}
 800ca18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ca1a:	bf00      	nop
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca22:	4770      	bx	lr

0800ca24 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800ca28:	4802      	ldr	r0, [pc, #8]	; (800ca34 <DMA1_Channel1_IRQHandler+0x10>)
 800ca2a:	f000 ff47 	bl	800d8bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800ca2e:	bf00      	nop
 800ca30:	bd80      	pop	{r7, pc}
 800ca32:	bf00      	nop
 800ca34:	20004824 	.word	0x20004824

0800ca38 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800ca3c:	4802      	ldr	r0, [pc, #8]	; (800ca48 <DMA1_Channel2_IRQHandler+0x10>)
 800ca3e:	f000 ff3d 	bl	800d8bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800ca42:	bf00      	nop
 800ca44:	bd80      	pop	{r7, pc}
 800ca46:	bf00      	nop
 800ca48:	20004734 	.word	0x20004734

0800ca4c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800ca50:	4803      	ldr	r0, [pc, #12]	; (800ca60 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 800ca52:	f005 f823 	bl	8011a9c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 800ca56:	4803      	ldr	r0, [pc, #12]	; (800ca64 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 800ca58:	f005 f820 	bl	8011a9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800ca5c:	bf00      	nop
 800ca5e:	bd80      	pop	{r7, pc}
 800ca60:	20004650 	.word	0x20004650
 800ca64:	20004600 	.word	0x20004600

0800ca68 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800ca6c:	4803      	ldr	r0, [pc, #12]	; (800ca7c <TIM1_UP_TIM16_IRQHandler+0x14>)
 800ca6e:	f005 f815 	bl	8011a9c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800ca72:	4803      	ldr	r0, [pc, #12]	; (800ca80 <TIM1_UP_TIM16_IRQHandler+0x18>)
 800ca74:	f005 f812 	bl	8011a9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800ca78:	bf00      	nop
 800ca7a:	bd80      	pop	{r7, pc}
 800ca7c:	20004650 	.word	0x20004650
 800ca80:	200046e8 	.word	0x200046e8

0800ca84 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800ca88:	4802      	ldr	r0, [pc, #8]	; (800ca94 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800ca8a:	f005 f807 	bl	8011a9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800ca8e:	bf00      	nop
 800ca90:	bd80      	pop	{r7, pc}
 800ca92:	bf00      	nop
 800ca94:	20004650 	.word	0x20004650

0800ca98 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800ca9c:	4802      	ldr	r0, [pc, #8]	; (800caa8 <USART1_IRQHandler+0x10>)
 800ca9e:	f006 fa41 	bl	8012f24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800caa2:	bf00      	nop
 800caa4:	bd80      	pop	{r7, pc}
 800caa6:	bf00      	nop
 800caa8:	20004794 	.word	0x20004794

0800caac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800caac:	b480      	push	{r7}
 800caae:	af00      	add	r7, sp, #0
  return 1;
 800cab0:	2301      	movs	r3, #1
}
 800cab2:	4618      	mov	r0, r3
 800cab4:	46bd      	mov	sp, r7
 800cab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caba:	4770      	bx	lr

0800cabc <_kill>:

int _kill(int pid, int sig)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b082      	sub	sp, #8
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
 800cac4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800cac6:	f00b ff3b 	bl	8018940 <__errno>
 800caca:	4603      	mov	r3, r0
 800cacc:	2216      	movs	r2, #22
 800cace:	601a      	str	r2, [r3, #0]
  return -1;
 800cad0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cad4:	4618      	mov	r0, r3
 800cad6:	3708      	adds	r7, #8
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}

0800cadc <_exit>:

void _exit (int status)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b082      	sub	sp, #8
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800cae4:	f04f 31ff 	mov.w	r1, #4294967295
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f7ff ffe7 	bl	800cabc <_kill>
  while (1) {}    /* Make sure we hang here */
 800caee:	e7fe      	b.n	800caee <_exit+0x12>

0800caf0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b086      	sub	sp, #24
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	60f8      	str	r0, [r7, #12]
 800caf8:	60b9      	str	r1, [r7, #8]
 800cafa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cafc:	2300      	movs	r3, #0
 800cafe:	617b      	str	r3, [r7, #20]
 800cb00:	e00a      	b.n	800cb18 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800cb02:	f3af 8000 	nop.w
 800cb06:	4601      	mov	r1, r0
 800cb08:	68bb      	ldr	r3, [r7, #8]
 800cb0a:	1c5a      	adds	r2, r3, #1
 800cb0c:	60ba      	str	r2, [r7, #8]
 800cb0e:	b2ca      	uxtb	r2, r1
 800cb10:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cb12:	697b      	ldr	r3, [r7, #20]
 800cb14:	3301      	adds	r3, #1
 800cb16:	617b      	str	r3, [r7, #20]
 800cb18:	697a      	ldr	r2, [r7, #20]
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	429a      	cmp	r2, r3
 800cb1e:	dbf0      	blt.n	800cb02 <_read+0x12>
  }

  return len;
 800cb20:	687b      	ldr	r3, [r7, #4]
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	3718      	adds	r7, #24
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}

0800cb2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800cb2a:	b580      	push	{r7, lr}
 800cb2c:	b086      	sub	sp, #24
 800cb2e:	af00      	add	r7, sp, #0
 800cb30:	60f8      	str	r0, [r7, #12]
 800cb32:	60b9      	str	r1, [r7, #8]
 800cb34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cb36:	2300      	movs	r3, #0
 800cb38:	617b      	str	r3, [r7, #20]
 800cb3a:	e009      	b.n	800cb50 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800cb3c:	68bb      	ldr	r3, [r7, #8]
 800cb3e:	1c5a      	adds	r2, r3, #1
 800cb40:	60ba      	str	r2, [r7, #8]
 800cb42:	781b      	ldrb	r3, [r3, #0]
 800cb44:	4618      	mov	r0, r3
 800cb46:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cb4a:	697b      	ldr	r3, [r7, #20]
 800cb4c:	3301      	adds	r3, #1
 800cb4e:	617b      	str	r3, [r7, #20]
 800cb50:	697a      	ldr	r2, [r7, #20]
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	429a      	cmp	r2, r3
 800cb56:	dbf1      	blt.n	800cb3c <_write+0x12>
  }
  return len;
 800cb58:	687b      	ldr	r3, [r7, #4]
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	3718      	adds	r7, #24
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}

0800cb62 <_close>:

int _close(int file)
{
 800cb62:	b480      	push	{r7}
 800cb64:	b083      	sub	sp, #12
 800cb66:	af00      	add	r7, sp, #0
 800cb68:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800cb6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	370c      	adds	r7, #12
 800cb72:	46bd      	mov	sp, r7
 800cb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb78:	4770      	bx	lr

0800cb7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800cb7a:	b480      	push	{r7}
 800cb7c:	b083      	sub	sp, #12
 800cb7e:	af00      	add	r7, sp, #0
 800cb80:	6078      	str	r0, [r7, #4]
 800cb82:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800cb8a:	605a      	str	r2, [r3, #4]
  return 0;
 800cb8c:	2300      	movs	r3, #0
}
 800cb8e:	4618      	mov	r0, r3
 800cb90:	370c      	adds	r7, #12
 800cb92:	46bd      	mov	sp, r7
 800cb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb98:	4770      	bx	lr

0800cb9a <_isatty>:

int _isatty(int file)
{
 800cb9a:	b480      	push	{r7}
 800cb9c:	b083      	sub	sp, #12
 800cb9e:	af00      	add	r7, sp, #0
 800cba0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800cba2:	2301      	movs	r3, #1
}
 800cba4:	4618      	mov	r0, r3
 800cba6:	370c      	adds	r7, #12
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbae:	4770      	bx	lr

0800cbb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800cbb0:	b480      	push	{r7}
 800cbb2:	b085      	sub	sp, #20
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	60f8      	str	r0, [r7, #12]
 800cbb8:	60b9      	str	r1, [r7, #8]
 800cbba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800cbbc:	2300      	movs	r3, #0
}
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	3714      	adds	r7, #20
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc8:	4770      	bx	lr
	...

0800cbcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b086      	sub	sp, #24
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800cbd4:	4a14      	ldr	r2, [pc, #80]	; (800cc28 <_sbrk+0x5c>)
 800cbd6:	4b15      	ldr	r3, [pc, #84]	; (800cc2c <_sbrk+0x60>)
 800cbd8:	1ad3      	subs	r3, r2, r3
 800cbda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800cbdc:	697b      	ldr	r3, [r7, #20]
 800cbde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800cbe0:	4b13      	ldr	r3, [pc, #76]	; (800cc30 <_sbrk+0x64>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d102      	bne.n	800cbee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800cbe8:	4b11      	ldr	r3, [pc, #68]	; (800cc30 <_sbrk+0x64>)
 800cbea:	4a12      	ldr	r2, [pc, #72]	; (800cc34 <_sbrk+0x68>)
 800cbec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800cbee:	4b10      	ldr	r3, [pc, #64]	; (800cc30 <_sbrk+0x64>)
 800cbf0:	681a      	ldr	r2, [r3, #0]
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	4413      	add	r3, r2
 800cbf6:	693a      	ldr	r2, [r7, #16]
 800cbf8:	429a      	cmp	r2, r3
 800cbfa:	d207      	bcs.n	800cc0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800cbfc:	f00b fea0 	bl	8018940 <__errno>
 800cc00:	4603      	mov	r3, r0
 800cc02:	220c      	movs	r2, #12
 800cc04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800cc06:	f04f 33ff 	mov.w	r3, #4294967295
 800cc0a:	e009      	b.n	800cc20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800cc0c:	4b08      	ldr	r3, [pc, #32]	; (800cc30 <_sbrk+0x64>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800cc12:	4b07      	ldr	r3, [pc, #28]	; (800cc30 <_sbrk+0x64>)
 800cc14:	681a      	ldr	r2, [r3, #0]
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	4413      	add	r3, r2
 800cc1a:	4a05      	ldr	r2, [pc, #20]	; (800cc30 <_sbrk+0x64>)
 800cc1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800cc1e:	68fb      	ldr	r3, [r7, #12]
}
 800cc20:	4618      	mov	r0, r3
 800cc22:	3718      	adds	r7, #24
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}
 800cc28:	20050000 	.word	0x20050000
 800cc2c:	00000c00 	.word	0x00000c00
 800cc30:	2000464c 	.word	0x2000464c
 800cc34:	200372a8 	.word	0x200372a8

0800cc38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800cc38:	b480      	push	{r7}
 800cc3a:	af00      	add	r7, sp, #0
#if defined(USER_VECT_TAB_ADDRESS)
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 800cc3c:	4b08      	ldr	r3, [pc, #32]	; (800cc60 <SystemInit+0x28>)
 800cc3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800cc42:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800cc44:	4b06      	ldr	r3, [pc, #24]	; (800cc60 <SystemInit+0x28>)
 800cc46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc4a:	4a05      	ldr	r2, [pc, #20]	; (800cc60 <SystemInit+0x28>)
 800cc4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cc50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800cc54:	bf00      	nop
 800cc56:	46bd      	mov	sp, r7
 800cc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5c:	4770      	bx	lr
 800cc5e:	bf00      	nop
 800cc60:	e000ed00 	.word	0xe000ed00

0800cc64 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b09a      	sub	sp, #104	; 0x68
 800cc68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800cc6a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800cc6e:	2200      	movs	r2, #0
 800cc70:	601a      	str	r2, [r3, #0]
 800cc72:	605a      	str	r2, [r3, #4]
 800cc74:	609a      	str	r2, [r3, #8]
 800cc76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800cc78:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	601a      	str	r2, [r3, #0]
 800cc80:	605a      	str	r2, [r3, #4]
 800cc82:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800cc84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cc88:	2200      	movs	r2, #0
 800cc8a:	601a      	str	r2, [r3, #0]
 800cc8c:	605a      	str	r2, [r3, #4]
 800cc8e:	609a      	str	r2, [r3, #8]
 800cc90:	60da      	str	r2, [r3, #12]
 800cc92:	611a      	str	r2, [r3, #16]
 800cc94:	615a      	str	r2, [r3, #20]
 800cc96:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800cc98:	1d3b      	adds	r3, r7, #4
 800cc9a:	222c      	movs	r2, #44	; 0x2c
 800cc9c:	2100      	movs	r1, #0
 800cc9e:	4618      	mov	r0, r3
 800cca0:	f00b fe86 	bl	80189b0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800cca4:	4b43      	ldr	r3, [pc, #268]	; (800cdb4 <MX_TIM1_Init+0x150>)
 800cca6:	4a44      	ldr	r2, [pc, #272]	; (800cdb8 <MX_TIM1_Init+0x154>)
 800cca8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800ccaa:	4b42      	ldr	r3, [pc, #264]	; (800cdb4 <MX_TIM1_Init+0x150>)
 800ccac:	2200      	movs	r2, #0
 800ccae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ccb0:	4b40      	ldr	r3, [pc, #256]	; (800cdb4 <MX_TIM1_Init+0x150>)
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 149;
 800ccb6:	4b3f      	ldr	r3, [pc, #252]	; (800cdb4 <MX_TIM1_Init+0x150>)
 800ccb8:	2295      	movs	r2, #149	; 0x95
 800ccba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ccbc:	4b3d      	ldr	r3, [pc, #244]	; (800cdb4 <MX_TIM1_Init+0x150>)
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800ccc2:	4b3c      	ldr	r3, [pc, #240]	; (800cdb4 <MX_TIM1_Init+0x150>)
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ccc8:	4b3a      	ldr	r3, [pc, #232]	; (800cdb4 <MX_TIM1_Init+0x150>)
 800ccca:	2200      	movs	r2, #0
 800cccc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800ccce:	4839      	ldr	r0, [pc, #228]	; (800cdb4 <MX_TIM1_Init+0x150>)
 800ccd0:	f004 f96e 	bl	8010fb0 <HAL_TIM_Base_Init>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d001      	beq.n	800ccde <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800ccda:	f7fd fbf7 	bl	800a4cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ccde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cce2:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800cce4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800cce8:	4619      	mov	r1, r3
 800ccea:	4832      	ldr	r0, [pc, #200]	; (800cdb4 <MX_TIM1_Init+0x150>)
 800ccec:	f005 f90a 	bl	8011f04 <HAL_TIM_ConfigClockSource>
 800ccf0:	4603      	mov	r3, r0
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d001      	beq.n	800ccfa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800ccf6:	f7fd fbe9 	bl	800a4cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800ccfa:	482e      	ldr	r0, [pc, #184]	; (800cdb4 <MX_TIM1_Init+0x150>)
 800ccfc:	f004 fa20 	bl	8011140 <HAL_TIM_PWM_Init>
 800cd00:	4603      	mov	r3, r0
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d001      	beq.n	800cd0a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800cd06:	f7fd fbe1 	bl	800a4cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cd12:	2300      	movs	r3, #0
 800cd14:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800cd16:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800cd1a:	4619      	mov	r1, r3
 800cd1c:	4825      	ldr	r0, [pc, #148]	; (800cdb4 <MX_TIM1_Init+0x150>)
 800cd1e:	f005 fef7 	bl	8012b10 <HAL_TIMEx_MasterConfigSynchronization>
 800cd22:	4603      	mov	r3, r0
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d001      	beq.n	800cd2c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 800cd28:	f7fd fbd0 	bl	800a4cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800cd2c:	2360      	movs	r3, #96	; 0x60
 800cd2e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800cd30:	2300      	movs	r3, #0
 800cd32:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800cd34:	2300      	movs	r3, #0
 800cd36:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800cd38:	2300      	movs	r3, #0
 800cd3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 800cd40:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cd44:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800cd46:	2300      	movs	r3, #0
 800cd48:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800cd4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cd4e:	2200      	movs	r2, #0
 800cd50:	4619      	mov	r1, r3
 800cd52:	4818      	ldr	r0, [pc, #96]	; (800cdb4 <MX_TIM1_Init+0x150>)
 800cd54:	f004 ffc2 	bl	8011cdc <HAL_TIM_PWM_ConfigChannel>
 800cd58:	4603      	mov	r3, r0
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d001      	beq.n	800cd62 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800cd5e:	f7fd fbb5 	bl	800a4cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800cd62:	2300      	movs	r3, #0
 800cd64:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800cd66:	2300      	movs	r3, #0
 800cd68:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800cd6e:	2300      	movs	r3, #0
 800cd70:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800cd72:	2300      	movs	r3, #0
 800cd74:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800cd76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cd7a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800cd80:	2300      	movs	r3, #0
 800cd82:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800cd84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cd88:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800cd92:	1d3b      	adds	r3, r7, #4
 800cd94:	4619      	mov	r1, r3
 800cd96:	4807      	ldr	r0, [pc, #28]	; (800cdb4 <MX_TIM1_Init+0x150>)
 800cd98:	f005 ff42 	bl	8012c20 <HAL_TIMEx_ConfigBreakDeadTime>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d001      	beq.n	800cda6 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800cda2:	f7fd fb93 	bl	800a4cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800cda6:	4803      	ldr	r0, [pc, #12]	; (800cdb4 <MX_TIM1_Init+0x150>)
 800cda8:	f000 f938 	bl	800d01c <HAL_TIM_MspPostInit>

}
 800cdac:	bf00      	nop
 800cdae:	3768      	adds	r7, #104	; 0x68
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	bd80      	pop	{r7, pc}
 800cdb4:	20004650 	.word	0x20004650
 800cdb8:	40012c00 	.word	0x40012c00

0800cdbc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b08c      	sub	sp, #48	; 0x30
 800cdc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800cdc2:	f107 030c 	add.w	r3, r7, #12
 800cdc6:	2224      	movs	r2, #36	; 0x24
 800cdc8:	2100      	movs	r1, #0
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f00b fdf0 	bl	80189b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800cdd0:	463b      	mov	r3, r7
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	601a      	str	r2, [r3, #0]
 800cdd6:	605a      	str	r2, [r3, #4]
 800cdd8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800cdda:	4b21      	ldr	r3, [pc, #132]	; (800ce60 <MX_TIM5_Init+0xa4>)
 800cddc:	4a21      	ldr	r2, [pc, #132]	; (800ce64 <MX_TIM5_Init+0xa8>)
 800cdde:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800cde0:	4b1f      	ldr	r3, [pc, #124]	; (800ce60 <MX_TIM5_Init+0xa4>)
 800cde2:	2200      	movs	r2, #0
 800cde4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cde6:	4b1e      	ldr	r3, [pc, #120]	; (800ce60 <MX_TIM5_Init+0xa4>)
 800cde8:	2200      	movs	r2, #0
 800cdea:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800cdec:	4b1c      	ldr	r3, [pc, #112]	; (800ce60 <MX_TIM5_Init+0xa4>)
 800cdee:	f04f 32ff 	mov.w	r2, #4294967295
 800cdf2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800cdf4:	4b1a      	ldr	r3, [pc, #104]	; (800ce60 <MX_TIM5_Init+0xa4>)
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800cdfa:	4b19      	ldr	r3, [pc, #100]	; (800ce60 <MX_TIM5_Init+0xa4>)
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800ce00:	2303      	movs	r3, #3
 800ce02:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800ce04:	2300      	movs	r3, #0
 800ce06:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800ce08:	2301      	movs	r3, #1
 800ce0a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800ce10:	230f      	movs	r3, #15
 800ce12:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800ce14:	2300      	movs	r3, #0
 800ce16:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800ce18:	2301      	movs	r3, #1
 800ce1a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 800ce20:	230f      	movs	r3, #15
 800ce22:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800ce24:	f107 030c 	add.w	r3, r7, #12
 800ce28:	4619      	mov	r1, r3
 800ce2a:	480d      	ldr	r0, [pc, #52]	; (800ce60 <MX_TIM5_Init+0xa4>)
 800ce2c:	f004 fd02 	bl	8011834 <HAL_TIM_Encoder_Init>
 800ce30:	4603      	mov	r3, r0
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d001      	beq.n	800ce3a <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800ce36:	f7fd fb49 	bl	800a4cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800ce42:	463b      	mov	r3, r7
 800ce44:	4619      	mov	r1, r3
 800ce46:	4806      	ldr	r0, [pc, #24]	; (800ce60 <MX_TIM5_Init+0xa4>)
 800ce48:	f005 fe62 	bl	8012b10 <HAL_TIMEx_MasterConfigSynchronization>
 800ce4c:	4603      	mov	r3, r0
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d001      	beq.n	800ce56 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 800ce52:	f7fd fb3b 	bl	800a4cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800ce56:	bf00      	nop
 800ce58:	3730      	adds	r7, #48	; 0x30
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	bd80      	pop	{r7, pc}
 800ce5e:	bf00      	nop
 800ce60:	2000469c 	.word	0x2000469c
 800ce64:	40000c00 	.word	0x40000c00

0800ce68 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800ce6c:	4b0f      	ldr	r3, [pc, #60]	; (800ceac <MX_TIM16_Init+0x44>)
 800ce6e:	4a10      	ldr	r2, [pc, #64]	; (800ceb0 <MX_TIM16_Init+0x48>)
 800ce70:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 119;
 800ce72:	4b0e      	ldr	r3, [pc, #56]	; (800ceac <MX_TIM16_Init+0x44>)
 800ce74:	2277      	movs	r2, #119	; 0x77
 800ce76:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ce78:	4b0c      	ldr	r3, [pc, #48]	; (800ceac <MX_TIM16_Init+0x44>)
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 800ce7e:	4b0b      	ldr	r3, [pc, #44]	; (800ceac <MX_TIM16_Init+0x44>)
 800ce80:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ce84:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ce86:	4b09      	ldr	r3, [pc, #36]	; (800ceac <MX_TIM16_Init+0x44>)
 800ce88:	2200      	movs	r2, #0
 800ce8a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800ce8c:	4b07      	ldr	r3, [pc, #28]	; (800ceac <MX_TIM16_Init+0x44>)
 800ce8e:	2200      	movs	r2, #0
 800ce90:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ce92:	4b06      	ldr	r3, [pc, #24]	; (800ceac <MX_TIM16_Init+0x44>)
 800ce94:	2200      	movs	r2, #0
 800ce96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800ce98:	4804      	ldr	r0, [pc, #16]	; (800ceac <MX_TIM16_Init+0x44>)
 800ce9a:	f004 f889 	bl	8010fb0 <HAL_TIM_Base_Init>
 800ce9e:	4603      	mov	r3, r0
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d001      	beq.n	800cea8 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800cea4:	f7fd fb12 	bl	800a4cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800cea8:	bf00      	nop
 800ceaa:	bd80      	pop	{r7, pc}
 800ceac:	200046e8 	.word	0x200046e8
 800ceb0:	40014400 	.word	0x40014400

0800ceb4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b084      	sub	sp, #16
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	4a30      	ldr	r2, [pc, #192]	; (800cf84 <HAL_TIM_Base_MspInit+0xd0>)
 800cec2:	4293      	cmp	r3, r2
 800cec4:	d148      	bne.n	800cf58 <HAL_TIM_Base_MspInit+0xa4>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800cec6:	4b30      	ldr	r3, [pc, #192]	; (800cf88 <HAL_TIM_Base_MspInit+0xd4>)
 800cec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ceca:	4a2f      	ldr	r2, [pc, #188]	; (800cf88 <HAL_TIM_Base_MspInit+0xd4>)
 800cecc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ced0:	6613      	str	r3, [r2, #96]	; 0x60
 800ced2:	4b2d      	ldr	r3, [pc, #180]	; (800cf88 <HAL_TIM_Base_MspInit+0xd4>)
 800ced4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ced6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ceda:	60fb      	str	r3, [r7, #12]
 800cedc:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 800cede:	4b2b      	ldr	r3, [pc, #172]	; (800cf8c <HAL_TIM_Base_MspInit+0xd8>)
 800cee0:	4a2b      	ldr	r2, [pc, #172]	; (800cf90 <HAL_TIM_Base_MspInit+0xdc>)
 800cee2:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 800cee4:	4b29      	ldr	r3, [pc, #164]	; (800cf8c <HAL_TIM_Base_MspInit+0xd8>)
 800cee6:	222b      	movs	r2, #43	; 0x2b
 800cee8:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ceea:	4b28      	ldr	r3, [pc, #160]	; (800cf8c <HAL_TIM_Base_MspInit+0xd8>)
 800ceec:	2210      	movs	r2, #16
 800ceee:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800cef0:	4b26      	ldr	r3, [pc, #152]	; (800cf8c <HAL_TIM_Base_MspInit+0xd8>)
 800cef2:	2200      	movs	r2, #0
 800cef4:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800cef6:	4b25      	ldr	r3, [pc, #148]	; (800cf8c <HAL_TIM_Base_MspInit+0xd8>)
 800cef8:	2280      	movs	r2, #128	; 0x80
 800cefa:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800cefc:	4b23      	ldr	r3, [pc, #140]	; (800cf8c <HAL_TIM_Base_MspInit+0xd8>)
 800cefe:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cf02:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800cf04:	4b21      	ldr	r3, [pc, #132]	; (800cf8c <HAL_TIM_Base_MspInit+0xd8>)
 800cf06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cf0a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 800cf0c:	4b1f      	ldr	r3, [pc, #124]	; (800cf8c <HAL_TIM_Base_MspInit+0xd8>)
 800cf0e:	2200      	movs	r2, #0
 800cf10:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800cf12:	4b1e      	ldr	r3, [pc, #120]	; (800cf8c <HAL_TIM_Base_MspInit+0xd8>)
 800cf14:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800cf18:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800cf1a:	481c      	ldr	r0, [pc, #112]	; (800cf8c <HAL_TIM_Base_MspInit+0xd8>)
 800cf1c:	f000 faf0 	bl	800d500 <HAL_DMA_Init>
 800cf20:	4603      	mov	r3, r0
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d001      	beq.n	800cf2a <HAL_TIM_Base_MspInit+0x76>
    {
      Error_Handler();
 800cf26:	f7fd fad1 	bl	800a4cc <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	4a17      	ldr	r2, [pc, #92]	; (800cf8c <HAL_TIM_Base_MspInit+0xd8>)
 800cf2e:	625a      	str	r2, [r3, #36]	; 0x24
 800cf30:	4a16      	ldr	r2, [pc, #88]	; (800cf8c <HAL_TIM_Base_MspInit+0xd8>)
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 15, 0);
 800cf36:	2200      	movs	r2, #0
 800cf38:	210f      	movs	r1, #15
 800cf3a:	2018      	movs	r0, #24
 800cf3c:	f000 fab1 	bl	800d4a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800cf40:	2018      	movs	r0, #24
 800cf42:	f000 faca 	bl	800d4da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 5, 0);
 800cf46:	2200      	movs	r2, #0
 800cf48:	2105      	movs	r1, #5
 800cf4a:	201a      	movs	r0, #26
 800cf4c:	f000 faa9 	bl	800d4a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800cf50:	201a      	movs	r0, #26
 800cf52:	f000 fac2 	bl	800d4da <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800cf56:	e010      	b.n	800cf7a <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM16)
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	4a0d      	ldr	r2, [pc, #52]	; (800cf94 <HAL_TIM_Base_MspInit+0xe0>)
 800cf5e:	4293      	cmp	r3, r2
 800cf60:	d10b      	bne.n	800cf7a <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800cf62:	4b09      	ldr	r3, [pc, #36]	; (800cf88 <HAL_TIM_Base_MspInit+0xd4>)
 800cf64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf66:	4a08      	ldr	r2, [pc, #32]	; (800cf88 <HAL_TIM_Base_MspInit+0xd4>)
 800cf68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cf6c:	6613      	str	r3, [r2, #96]	; 0x60
 800cf6e:	4b06      	ldr	r3, [pc, #24]	; (800cf88 <HAL_TIM_Base_MspInit+0xd4>)
 800cf70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf76:	60bb      	str	r3, [r7, #8]
 800cf78:	68bb      	ldr	r3, [r7, #8]
}
 800cf7a:	bf00      	nop
 800cf7c:	3710      	adds	r7, #16
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd80      	pop	{r7, pc}
 800cf82:	bf00      	nop
 800cf84:	40012c00 	.word	0x40012c00
 800cf88:	40021000 	.word	0x40021000
 800cf8c:	20004734 	.word	0x20004734
 800cf90:	4002001c 	.word	0x4002001c
 800cf94:	40014400 	.word	0x40014400

0800cf98 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b08a      	sub	sp, #40	; 0x28
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cfa0:	f107 0314 	add.w	r3, r7, #20
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	601a      	str	r2, [r3, #0]
 800cfa8:	605a      	str	r2, [r3, #4]
 800cfaa:	609a      	str	r2, [r3, #8]
 800cfac:	60da      	str	r2, [r3, #12]
 800cfae:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM5)
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	4a17      	ldr	r2, [pc, #92]	; (800d014 <HAL_TIM_Encoder_MspInit+0x7c>)
 800cfb6:	4293      	cmp	r3, r2
 800cfb8:	d128      	bne.n	800d00c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800cfba:	4b17      	ldr	r3, [pc, #92]	; (800d018 <HAL_TIM_Encoder_MspInit+0x80>)
 800cfbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cfbe:	4a16      	ldr	r2, [pc, #88]	; (800d018 <HAL_TIM_Encoder_MspInit+0x80>)
 800cfc0:	f043 0308 	orr.w	r3, r3, #8
 800cfc4:	6593      	str	r3, [r2, #88]	; 0x58
 800cfc6:	4b14      	ldr	r3, [pc, #80]	; (800d018 <HAL_TIM_Encoder_MspInit+0x80>)
 800cfc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cfca:	f003 0308 	and.w	r3, r3, #8
 800cfce:	613b      	str	r3, [r7, #16]
 800cfd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cfd2:	4b11      	ldr	r3, [pc, #68]	; (800d018 <HAL_TIM_Encoder_MspInit+0x80>)
 800cfd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfd6:	4a10      	ldr	r2, [pc, #64]	; (800d018 <HAL_TIM_Encoder_MspInit+0x80>)
 800cfd8:	f043 0301 	orr.w	r3, r3, #1
 800cfdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cfde:	4b0e      	ldr	r3, [pc, #56]	; (800d018 <HAL_TIM_Encoder_MspInit+0x80>)
 800cfe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfe2:	f003 0301 	and.w	r3, r3, #1
 800cfe6:	60fb      	str	r3, [r7, #12]
 800cfe8:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800cfea:	2303      	movs	r3, #3
 800cfec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cfee:	2302      	movs	r3, #2
 800cff0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cff2:	2300      	movs	r3, #0
 800cff4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cff6:	2300      	movs	r3, #0
 800cff8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800cffa:	2302      	movs	r3, #2
 800cffc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cffe:	f107 0314 	add.w	r3, r7, #20
 800d002:	4619      	mov	r1, r3
 800d004:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d008:	f000 fdb6 	bl	800db78 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800d00c:	bf00      	nop
 800d00e:	3728      	adds	r7, #40	; 0x28
 800d010:	46bd      	mov	sp, r7
 800d012:	bd80      	pop	{r7, pc}
 800d014:	40000c00 	.word	0x40000c00
 800d018:	40021000 	.word	0x40021000

0800d01c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b088      	sub	sp, #32
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d024:	f107 030c 	add.w	r3, r7, #12
 800d028:	2200      	movs	r2, #0
 800d02a:	601a      	str	r2, [r3, #0]
 800d02c:	605a      	str	r2, [r3, #4]
 800d02e:	609a      	str	r2, [r3, #8]
 800d030:	60da      	str	r2, [r3, #12]
 800d032:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	4a12      	ldr	r2, [pc, #72]	; (800d084 <HAL_TIM_MspPostInit+0x68>)
 800d03a:	4293      	cmp	r3, r2
 800d03c:	d11d      	bne.n	800d07a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d03e:	4b12      	ldr	r3, [pc, #72]	; (800d088 <HAL_TIM_MspPostInit+0x6c>)
 800d040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d042:	4a11      	ldr	r2, [pc, #68]	; (800d088 <HAL_TIM_MspPostInit+0x6c>)
 800d044:	f043 0301 	orr.w	r3, r3, #1
 800d048:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d04a:	4b0f      	ldr	r3, [pc, #60]	; (800d088 <HAL_TIM_MspPostInit+0x6c>)
 800d04c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d04e:	f003 0301 	and.w	r3, r3, #1
 800d052:	60bb      	str	r3, [r7, #8]
 800d054:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800d056:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d05a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d05c:	2302      	movs	r3, #2
 800d05e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d060:	2300      	movs	r3, #0
 800d062:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d064:	2300      	movs	r3, #0
 800d066:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800d068:	2301      	movs	r3, #1
 800d06a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d06c:	f107 030c 	add.w	r3, r7, #12
 800d070:	4619      	mov	r1, r3
 800d072:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d076:	f000 fd7f 	bl	800db78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800d07a:	bf00      	nop
 800d07c:	3720      	adds	r7, #32
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}
 800d082:	bf00      	nop
 800d084:	40012c00 	.word	0x40012c00
 800d088:	40021000 	.word	0x40021000

0800d08c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800d090:	4b24      	ldr	r3, [pc, #144]	; (800d124 <MX_USART1_UART_Init+0x98>)
 800d092:	4a25      	ldr	r2, [pc, #148]	; (800d128 <MX_USART1_UART_Init+0x9c>)
 800d094:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2400;
 800d096:	4b23      	ldr	r3, [pc, #140]	; (800d124 <MX_USART1_UART_Init+0x98>)
 800d098:	f44f 6216 	mov.w	r2, #2400	; 0x960
 800d09c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d09e:	4b21      	ldr	r3, [pc, #132]	; (800d124 <MX_USART1_UART_Init+0x98>)
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800d0a4:	4b1f      	ldr	r3, [pc, #124]	; (800d124 <MX_USART1_UART_Init+0x98>)
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800d0aa:	4b1e      	ldr	r3, [pc, #120]	; (800d124 <MX_USART1_UART_Init+0x98>)
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d0b0:	4b1c      	ldr	r3, [pc, #112]	; (800d124 <MX_USART1_UART_Init+0x98>)
 800d0b2:	220c      	movs	r2, #12
 800d0b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d0b6:	4b1b      	ldr	r3, [pc, #108]	; (800d124 <MX_USART1_UART_Init+0x98>)
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800d0bc:	4b19      	ldr	r3, [pc, #100]	; (800d124 <MX_USART1_UART_Init+0x98>)
 800d0be:	2200      	movs	r2, #0
 800d0c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800d0c2:	4b18      	ldr	r3, [pc, #96]	; (800d124 <MX_USART1_UART_Init+0x98>)
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800d0c8:	4b16      	ldr	r3, [pc, #88]	; (800d124 <MX_USART1_UART_Init+0x98>)
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800d0ce:	4b15      	ldr	r3, [pc, #84]	; (800d124 <MX_USART1_UART_Init+0x98>)
 800d0d0:	2210      	movs	r2, #16
 800d0d2:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800d0d4:	4b13      	ldr	r3, [pc, #76]	; (800d124 <MX_USART1_UART_Init+0x98>)
 800d0d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d0da:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800d0dc:	4811      	ldr	r0, [pc, #68]	; (800d124 <MX_USART1_UART_Init+0x98>)
 800d0de:	f005 fe3b 	bl	8012d58 <HAL_UART_Init>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d001      	beq.n	800d0ec <MX_USART1_UART_Init+0x60>
  {
    Error_Handler();
 800d0e8:	f7fd f9f0 	bl	800a4cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800d0ec:	2100      	movs	r1, #0
 800d0ee:	480d      	ldr	r0, [pc, #52]	; (800d124 <MX_USART1_UART_Init+0x98>)
 800d0f0:	f007 f9e0 	bl	80144b4 <HAL_UARTEx_SetTxFifoThreshold>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d001      	beq.n	800d0fe <MX_USART1_UART_Init+0x72>
  {
    Error_Handler();
 800d0fa:	f7fd f9e7 	bl	800a4cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800d0fe:	2100      	movs	r1, #0
 800d100:	4808      	ldr	r0, [pc, #32]	; (800d124 <MX_USART1_UART_Init+0x98>)
 800d102:	f007 fa15 	bl	8014530 <HAL_UARTEx_SetRxFifoThreshold>
 800d106:	4603      	mov	r3, r0
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d001      	beq.n	800d110 <MX_USART1_UART_Init+0x84>
  {
    Error_Handler();
 800d10c:	f7fd f9de 	bl	800a4cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800d110:	4804      	ldr	r0, [pc, #16]	; (800d124 <MX_USART1_UART_Init+0x98>)
 800d112:	f007 f996 	bl	8014442 <HAL_UARTEx_DisableFifoMode>
 800d116:	4603      	mov	r3, r0
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d001      	beq.n	800d120 <MX_USART1_UART_Init+0x94>
  {
    Error_Handler();
 800d11c:	f7fd f9d6 	bl	800a4cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800d120:	bf00      	nop
 800d122:	bd80      	pop	{r7, pc}
 800d124:	20004794 	.word	0x20004794
 800d128:	40013800 	.word	0x40013800

0800d12c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b0b0      	sub	sp, #192	; 0xc0
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d134:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800d138:	2200      	movs	r2, #0
 800d13a:	601a      	str	r2, [r3, #0]
 800d13c:	605a      	str	r2, [r3, #4]
 800d13e:	609a      	str	r2, [r3, #8]
 800d140:	60da      	str	r2, [r3, #12]
 800d142:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d144:	f107 0314 	add.w	r3, r7, #20
 800d148:	2298      	movs	r2, #152	; 0x98
 800d14a:	2100      	movs	r1, #0
 800d14c:	4618      	mov	r0, r3
 800d14e:	f00b fc2f 	bl	80189b0 <memset>
  if(uartHandle->Instance==USART1)
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	4a36      	ldr	r2, [pc, #216]	; (800d230 <HAL_UART_MspInit+0x104>)
 800d158:	4293      	cmp	r3, r2
 800d15a:	d165      	bne.n	800d228 <HAL_UART_MspInit+0xfc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800d15c:	2301      	movs	r3, #1
 800d15e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800d160:	2300      	movs	r3, #0
 800d162:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d164:	f107 0314 	add.w	r3, r7, #20
 800d168:	4618      	mov	r0, r3
 800d16a:	f001 ff81 	bl	800f070 <HAL_RCCEx_PeriphCLKConfig>
 800d16e:	4603      	mov	r3, r0
 800d170:	2b00      	cmp	r3, #0
 800d172:	d001      	beq.n	800d178 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800d174:	f7fd f9aa 	bl	800a4cc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800d178:	4b2e      	ldr	r3, [pc, #184]	; (800d234 <HAL_UART_MspInit+0x108>)
 800d17a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d17c:	4a2d      	ldr	r2, [pc, #180]	; (800d234 <HAL_UART_MspInit+0x108>)
 800d17e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d182:	6613      	str	r3, [r2, #96]	; 0x60
 800d184:	4b2b      	ldr	r3, [pc, #172]	; (800d234 <HAL_UART_MspInit+0x108>)
 800d186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d188:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d18c:	613b      	str	r3, [r7, #16]
 800d18e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d190:	4b28      	ldr	r3, [pc, #160]	; (800d234 <HAL_UART_MspInit+0x108>)
 800d192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d194:	4a27      	ldr	r2, [pc, #156]	; (800d234 <HAL_UART_MspInit+0x108>)
 800d196:	f043 0301 	orr.w	r3, r3, #1
 800d19a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d19c:	4b25      	ldr	r3, [pc, #148]	; (800d234 <HAL_UART_MspInit+0x108>)
 800d19e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d1a0:	f003 0301 	and.w	r3, r3, #1
 800d1a4:	60fb      	str	r3, [r7, #12]
 800d1a6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800d1a8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800d1ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d1b0:	2302      	movs	r3, #2
 800d1b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d1bc:	2303      	movs	r3, #3
 800d1be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800d1c2:	2307      	movs	r3, #7
 800d1c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d1c8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800d1cc:	4619      	mov	r1, r3
 800d1ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d1d2:	f000 fcd1 	bl	800db78 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 800d1d6:	4b18      	ldr	r3, [pc, #96]	; (800d238 <HAL_UART_MspInit+0x10c>)
 800d1d8:	4a18      	ldr	r2, [pc, #96]	; (800d23c <HAL_UART_MspInit+0x110>)
 800d1da:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800d1dc:	4b16      	ldr	r3, [pc, #88]	; (800d238 <HAL_UART_MspInit+0x10c>)
 800d1de:	2219      	movs	r2, #25
 800d1e0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d1e2:	4b15      	ldr	r3, [pc, #84]	; (800d238 <HAL_UART_MspInit+0x10c>)
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800d1e8:	4b13      	ldr	r3, [pc, #76]	; (800d238 <HAL_UART_MspInit+0x10c>)
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800d1ee:	4b12      	ldr	r3, [pc, #72]	; (800d238 <HAL_UART_MspInit+0x10c>)
 800d1f0:	2280      	movs	r2, #128	; 0x80
 800d1f2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d1f4:	4b10      	ldr	r3, [pc, #64]	; (800d238 <HAL_UART_MspInit+0x10c>)
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d1fa:	4b0f      	ldr	r3, [pc, #60]	; (800d238 <HAL_UART_MspInit+0x10c>)
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800d200:	4b0d      	ldr	r3, [pc, #52]	; (800d238 <HAL_UART_MspInit+0x10c>)
 800d202:	2200      	movs	r2, #0
 800d204:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800d206:	4b0c      	ldr	r3, [pc, #48]	; (800d238 <HAL_UART_MspInit+0x10c>)
 800d208:	2200      	movs	r2, #0
 800d20a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800d20c:	480a      	ldr	r0, [pc, #40]	; (800d238 <HAL_UART_MspInit+0x10c>)
 800d20e:	f000 f977 	bl	800d500 <HAL_DMA_Init>
 800d212:	4603      	mov	r3, r0
 800d214:	2b00      	cmp	r3, #0
 800d216:	d001      	beq.n	800d21c <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 800d218:	f7fd f958 	bl	800a4cc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	4a06      	ldr	r2, [pc, #24]	; (800d238 <HAL_UART_MspInit+0x10c>)
 800d220:	67da      	str	r2, [r3, #124]	; 0x7c
 800d222:	4a05      	ldr	r2, [pc, #20]	; (800d238 <HAL_UART_MspInit+0x10c>)
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800d228:	bf00      	nop
 800d22a:	37c0      	adds	r7, #192	; 0xc0
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bd80      	pop	{r7, pc}
 800d230:	40013800 	.word	0x40013800
 800d234:	40021000 	.word	0x40021000
 800d238:	20004824 	.word	0x20004824
 800d23c:	40020008 	.word	0x40020008

0800d240 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800d240:	f8df d034 	ldr.w	sp, [pc, #52]	; 800d278 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800d244:	f7ff fcf8 	bl	800cc38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800d248:	480c      	ldr	r0, [pc, #48]	; (800d27c <LoopForever+0x6>)
  ldr r1, =_edata
 800d24a:	490d      	ldr	r1, [pc, #52]	; (800d280 <LoopForever+0xa>)
  ldr r2, =_sidata
 800d24c:	4a0d      	ldr	r2, [pc, #52]	; (800d284 <LoopForever+0xe>)
  movs r3, #0
 800d24e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800d250:	e002      	b.n	800d258 <LoopCopyDataInit>

0800d252 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800d252:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800d254:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800d256:	3304      	adds	r3, #4

0800d258 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800d258:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800d25a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800d25c:	d3f9      	bcc.n	800d252 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800d25e:	4a0a      	ldr	r2, [pc, #40]	; (800d288 <LoopForever+0x12>)
  ldr r4, =_ebss
 800d260:	4c0a      	ldr	r4, [pc, #40]	; (800d28c <LoopForever+0x16>)
  movs r3, #0
 800d262:	2300      	movs	r3, #0
  b LoopFillZerobss
 800d264:	e001      	b.n	800d26a <LoopFillZerobss>

0800d266 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800d266:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800d268:	3204      	adds	r2, #4

0800d26a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800d26a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800d26c:	d3fb      	bcc.n	800d266 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800d26e:	f00b fb6d 	bl	801894c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800d272:	f7fd f865 	bl	800a340 <main>

0800d276 <LoopForever>:

LoopForever:
    b LoopForever
 800d276:	e7fe      	b.n	800d276 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800d278:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800d27c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800d280:	20000278 	.word	0x20000278
  ldr r2, =_sidata
 800d284:	08024a28 	.word	0x08024a28
  ldr r2, =_sbss
 800d288:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 800d28c:	200372a8 	.word	0x200372a8

0800d290 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800d290:	e7fe      	b.n	800d290 <ADC1_2_IRQHandler>

0800d292 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800d292:	b580      	push	{r7, lr}
 800d294:	b082      	sub	sp, #8
 800d296:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800d298:	2300      	movs	r3, #0
 800d29a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800d29c:	2003      	movs	r0, #3
 800d29e:	f000 f8f5 	bl	800d48c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800d2a2:	200f      	movs	r0, #15
 800d2a4:	f7ff fb32 	bl	800c90c <HAL_InitTick>
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d002      	beq.n	800d2b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800d2ae:	2301      	movs	r3, #1
 800d2b0:	71fb      	strb	r3, [r7, #7]
 800d2b2:	e001      	b.n	800d2b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800d2b4:	f7ff fb02 	bl	800c8bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800d2b8:	79fb      	ldrb	r3, [r7, #7]
}
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	3708      	adds	r7, #8
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	bd80      	pop	{r7, pc}
	...

0800d2c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800d2c4:	b480      	push	{r7}
 800d2c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800d2c8:	4b06      	ldr	r3, [pc, #24]	; (800d2e4 <HAL_IncTick+0x20>)
 800d2ca:	781b      	ldrb	r3, [r3, #0]
 800d2cc:	461a      	mov	r2, r3
 800d2ce:	4b06      	ldr	r3, [pc, #24]	; (800d2e8 <HAL_IncTick+0x24>)
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	4413      	add	r3, r2
 800d2d4:	4a04      	ldr	r2, [pc, #16]	; (800d2e8 <HAL_IncTick+0x24>)
 800d2d6:	6013      	str	r3, [r2, #0]
}
 800d2d8:	bf00      	nop
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e0:	4770      	bx	lr
 800d2e2:	bf00      	nop
 800d2e4:	2000009c 	.word	0x2000009c
 800d2e8:	20004884 	.word	0x20004884

0800d2ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800d2ec:	b480      	push	{r7}
 800d2ee:	af00      	add	r7, sp, #0
  return uwTick;
 800d2f0:	4b03      	ldr	r3, [pc, #12]	; (800d300 <HAL_GetTick+0x14>)
 800d2f2:	681b      	ldr	r3, [r3, #0]
}
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fc:	4770      	bx	lr
 800d2fe:	bf00      	nop
 800d300:	20004884 	.word	0x20004884

0800d304 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800d304:	b480      	push	{r7}
 800d306:	b085      	sub	sp, #20
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	f003 0307 	and.w	r3, r3, #7
 800d312:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800d314:	4b0c      	ldr	r3, [pc, #48]	; (800d348 <__NVIC_SetPriorityGrouping+0x44>)
 800d316:	68db      	ldr	r3, [r3, #12]
 800d318:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800d31a:	68ba      	ldr	r2, [r7, #8]
 800d31c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800d320:	4013      	ands	r3, r2
 800d322:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800d32c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800d330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d334:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800d336:	4a04      	ldr	r2, [pc, #16]	; (800d348 <__NVIC_SetPriorityGrouping+0x44>)
 800d338:	68bb      	ldr	r3, [r7, #8]
 800d33a:	60d3      	str	r3, [r2, #12]
}
 800d33c:	bf00      	nop
 800d33e:	3714      	adds	r7, #20
 800d340:	46bd      	mov	sp, r7
 800d342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d346:	4770      	bx	lr
 800d348:	e000ed00 	.word	0xe000ed00

0800d34c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800d34c:	b480      	push	{r7}
 800d34e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800d350:	4b04      	ldr	r3, [pc, #16]	; (800d364 <__NVIC_GetPriorityGrouping+0x18>)
 800d352:	68db      	ldr	r3, [r3, #12]
 800d354:	0a1b      	lsrs	r3, r3, #8
 800d356:	f003 0307 	and.w	r3, r3, #7
}
 800d35a:	4618      	mov	r0, r3
 800d35c:	46bd      	mov	sp, r7
 800d35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d362:	4770      	bx	lr
 800d364:	e000ed00 	.word	0xe000ed00

0800d368 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d368:	b480      	push	{r7}
 800d36a:	b083      	sub	sp, #12
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	4603      	mov	r3, r0
 800d370:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d376:	2b00      	cmp	r3, #0
 800d378:	db0b      	blt.n	800d392 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d37a:	79fb      	ldrb	r3, [r7, #7]
 800d37c:	f003 021f 	and.w	r2, r3, #31
 800d380:	4907      	ldr	r1, [pc, #28]	; (800d3a0 <__NVIC_EnableIRQ+0x38>)
 800d382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d386:	095b      	lsrs	r3, r3, #5
 800d388:	2001      	movs	r0, #1
 800d38a:	fa00 f202 	lsl.w	r2, r0, r2
 800d38e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800d392:	bf00      	nop
 800d394:	370c      	adds	r7, #12
 800d396:	46bd      	mov	sp, r7
 800d398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39c:	4770      	bx	lr
 800d39e:	bf00      	nop
 800d3a0:	e000e100 	.word	0xe000e100

0800d3a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	b083      	sub	sp, #12
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	6039      	str	r1, [r7, #0]
 800d3ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d3b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	db0a      	blt.n	800d3ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	b2da      	uxtb	r2, r3
 800d3bc:	490c      	ldr	r1, [pc, #48]	; (800d3f0 <__NVIC_SetPriority+0x4c>)
 800d3be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d3c2:	0112      	lsls	r2, r2, #4
 800d3c4:	b2d2      	uxtb	r2, r2
 800d3c6:	440b      	add	r3, r1
 800d3c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800d3cc:	e00a      	b.n	800d3e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	b2da      	uxtb	r2, r3
 800d3d2:	4908      	ldr	r1, [pc, #32]	; (800d3f4 <__NVIC_SetPriority+0x50>)
 800d3d4:	79fb      	ldrb	r3, [r7, #7]
 800d3d6:	f003 030f 	and.w	r3, r3, #15
 800d3da:	3b04      	subs	r3, #4
 800d3dc:	0112      	lsls	r2, r2, #4
 800d3de:	b2d2      	uxtb	r2, r2
 800d3e0:	440b      	add	r3, r1
 800d3e2:	761a      	strb	r2, [r3, #24]
}
 800d3e4:	bf00      	nop
 800d3e6:	370c      	adds	r7, #12
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ee:	4770      	bx	lr
 800d3f0:	e000e100 	.word	0xe000e100
 800d3f4:	e000ed00 	.word	0xe000ed00

0800d3f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800d3f8:	b480      	push	{r7}
 800d3fa:	b089      	sub	sp, #36	; 0x24
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	60f8      	str	r0, [r7, #12]
 800d400:	60b9      	str	r1, [r7, #8]
 800d402:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	f003 0307 	and.w	r3, r3, #7
 800d40a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800d40c:	69fb      	ldr	r3, [r7, #28]
 800d40e:	f1c3 0307 	rsb	r3, r3, #7
 800d412:	2b04      	cmp	r3, #4
 800d414:	bf28      	it	cs
 800d416:	2304      	movcs	r3, #4
 800d418:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d41a:	69fb      	ldr	r3, [r7, #28]
 800d41c:	3304      	adds	r3, #4
 800d41e:	2b06      	cmp	r3, #6
 800d420:	d902      	bls.n	800d428 <NVIC_EncodePriority+0x30>
 800d422:	69fb      	ldr	r3, [r7, #28]
 800d424:	3b03      	subs	r3, #3
 800d426:	e000      	b.n	800d42a <NVIC_EncodePriority+0x32>
 800d428:	2300      	movs	r3, #0
 800d42a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d42c:	f04f 32ff 	mov.w	r2, #4294967295
 800d430:	69bb      	ldr	r3, [r7, #24]
 800d432:	fa02 f303 	lsl.w	r3, r2, r3
 800d436:	43da      	mvns	r2, r3
 800d438:	68bb      	ldr	r3, [r7, #8]
 800d43a:	401a      	ands	r2, r3
 800d43c:	697b      	ldr	r3, [r7, #20]
 800d43e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800d440:	f04f 31ff 	mov.w	r1, #4294967295
 800d444:	697b      	ldr	r3, [r7, #20]
 800d446:	fa01 f303 	lsl.w	r3, r1, r3
 800d44a:	43d9      	mvns	r1, r3
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d450:	4313      	orrs	r3, r2
         );
}
 800d452:	4618      	mov	r0, r3
 800d454:	3724      	adds	r7, #36	; 0x24
 800d456:	46bd      	mov	sp, r7
 800d458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45c:	4770      	bx	lr
	...

0800d460 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800d460:	b480      	push	{r7}
 800d462:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800d464:	f3bf 8f4f 	dsb	sy
}
 800d468:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800d46a:	4b06      	ldr	r3, [pc, #24]	; (800d484 <__NVIC_SystemReset+0x24>)
 800d46c:	68db      	ldr	r3, [r3, #12]
 800d46e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800d472:	4904      	ldr	r1, [pc, #16]	; (800d484 <__NVIC_SystemReset+0x24>)
 800d474:	4b04      	ldr	r3, [pc, #16]	; (800d488 <__NVIC_SystemReset+0x28>)
 800d476:	4313      	orrs	r3, r2
 800d478:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800d47a:	f3bf 8f4f 	dsb	sy
}
 800d47e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800d480:	bf00      	nop
 800d482:	e7fd      	b.n	800d480 <__NVIC_SystemReset+0x20>
 800d484:	e000ed00 	.word	0xe000ed00
 800d488:	05fa0004 	.word	0x05fa0004

0800d48c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b082      	sub	sp, #8
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800d494:	6878      	ldr	r0, [r7, #4]
 800d496:	f7ff ff35 	bl	800d304 <__NVIC_SetPriorityGrouping>
}
 800d49a:	bf00      	nop
 800d49c:	3708      	adds	r7, #8
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bd80      	pop	{r7, pc}

0800d4a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800d4a2:	b580      	push	{r7, lr}
 800d4a4:	b086      	sub	sp, #24
 800d4a6:	af00      	add	r7, sp, #0
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	60b9      	str	r1, [r7, #8]
 800d4ac:	607a      	str	r2, [r7, #4]
 800d4ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800d4b4:	f7ff ff4a 	bl	800d34c <__NVIC_GetPriorityGrouping>
 800d4b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800d4ba:	687a      	ldr	r2, [r7, #4]
 800d4bc:	68b9      	ldr	r1, [r7, #8]
 800d4be:	6978      	ldr	r0, [r7, #20]
 800d4c0:	f7ff ff9a 	bl	800d3f8 <NVIC_EncodePriority>
 800d4c4:	4602      	mov	r2, r0
 800d4c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d4ca:	4611      	mov	r1, r2
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	f7ff ff69 	bl	800d3a4 <__NVIC_SetPriority>
}
 800d4d2:	bf00      	nop
 800d4d4:	3718      	adds	r7, #24
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	bd80      	pop	{r7, pc}

0800d4da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d4da:	b580      	push	{r7, lr}
 800d4dc:	b082      	sub	sp, #8
 800d4de:	af00      	add	r7, sp, #0
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800d4e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f7ff ff3d 	bl	800d368 <__NVIC_EnableIRQ>
}
 800d4ee:	bf00      	nop
 800d4f0:	3708      	adds	r7, #8
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	bd80      	pop	{r7, pc}

0800d4f6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800d4f6:	b580      	push	{r7, lr}
 800d4f8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800d4fa:	f7ff ffb1 	bl	800d460 <__NVIC_SystemReset>
	...

0800d500 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800d500:	b580      	push	{r7, lr}
 800d502:	b084      	sub	sp, #16
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d101      	bne.n	800d512 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800d50e:	2301      	movs	r3, #1
 800d510:	e08d      	b.n	800d62e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	461a      	mov	r2, r3
 800d518:	4b47      	ldr	r3, [pc, #284]	; (800d638 <HAL_DMA_Init+0x138>)
 800d51a:	429a      	cmp	r2, r3
 800d51c:	d80f      	bhi.n	800d53e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	461a      	mov	r2, r3
 800d524:	4b45      	ldr	r3, [pc, #276]	; (800d63c <HAL_DMA_Init+0x13c>)
 800d526:	4413      	add	r3, r2
 800d528:	4a45      	ldr	r2, [pc, #276]	; (800d640 <HAL_DMA_Init+0x140>)
 800d52a:	fba2 2303 	umull	r2, r3, r2, r3
 800d52e:	091b      	lsrs	r3, r3, #4
 800d530:	009a      	lsls	r2, r3, #2
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	4a42      	ldr	r2, [pc, #264]	; (800d644 <HAL_DMA_Init+0x144>)
 800d53a:	641a      	str	r2, [r3, #64]	; 0x40
 800d53c:	e00e      	b.n	800d55c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	461a      	mov	r2, r3
 800d544:	4b40      	ldr	r3, [pc, #256]	; (800d648 <HAL_DMA_Init+0x148>)
 800d546:	4413      	add	r3, r2
 800d548:	4a3d      	ldr	r2, [pc, #244]	; (800d640 <HAL_DMA_Init+0x140>)
 800d54a:	fba2 2303 	umull	r2, r3, r2, r3
 800d54e:	091b      	lsrs	r3, r3, #4
 800d550:	009a      	lsls	r2, r3, #2
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	4a3c      	ldr	r2, [pc, #240]	; (800d64c <HAL_DMA_Init+0x14c>)
 800d55a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2202      	movs	r2, #2
 800d560:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800d572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d576:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800d580:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	691b      	ldr	r3, [r3, #16]
 800d586:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800d58c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	699b      	ldr	r3, [r3, #24]
 800d592:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800d598:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	6a1b      	ldr	r3, [r3, #32]
 800d59e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800d5a0:	68fa      	ldr	r2, [r7, #12]
 800d5a2:	4313      	orrs	r3, r2
 800d5a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	68fa      	ldr	r2, [r7, #12]
 800d5ac:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800d5ae:	6878      	ldr	r0, [r7, #4]
 800d5b0:	f000 fa80 	bl	800dab4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	689b      	ldr	r3, [r3, #8]
 800d5b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d5bc:	d102      	bne.n	800d5c4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	685a      	ldr	r2, [r3, #4]
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d5cc:	b2d2      	uxtb	r2, r2
 800d5ce:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d5d4:	687a      	ldr	r2, [r7, #4]
 800d5d6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800d5d8:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	685b      	ldr	r3, [r3, #4]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d010      	beq.n	800d604 <HAL_DMA_Init+0x104>
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	685b      	ldr	r3, [r3, #4]
 800d5e6:	2b04      	cmp	r3, #4
 800d5e8:	d80c      	bhi.n	800d604 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800d5ea:	6878      	ldr	r0, [r7, #4]
 800d5ec:	f000 faa0 	bl	800db30 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d5fc:	687a      	ldr	r2, [r7, #4]
 800d5fe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800d600:	605a      	str	r2, [r3, #4]
 800d602:	e008      	b.n	800d616 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2200      	movs	r2, #0
 800d608:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	2200      	movs	r2, #0
 800d60e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	2200      	movs	r2, #0
 800d614:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	2200      	movs	r2, #0
 800d61a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	2201      	movs	r2, #1
 800d620:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2200      	movs	r2, #0
 800d628:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800d62c:	2300      	movs	r3, #0
}
 800d62e:	4618      	mov	r0, r3
 800d630:	3710      	adds	r7, #16
 800d632:	46bd      	mov	sp, r7
 800d634:	bd80      	pop	{r7, pc}
 800d636:	bf00      	nop
 800d638:	40020407 	.word	0x40020407
 800d63c:	bffdfff8 	.word	0xbffdfff8
 800d640:	cccccccd 	.word	0xcccccccd
 800d644:	40020000 	.word	0x40020000
 800d648:	bffdfbf8 	.word	0xbffdfbf8
 800d64c:	40020400 	.word	0x40020400

0800d650 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b086      	sub	sp, #24
 800d654:	af00      	add	r7, sp, #0
 800d656:	60f8      	str	r0, [r7, #12]
 800d658:	60b9      	str	r1, [r7, #8]
 800d65a:	607a      	str	r2, [r7, #4]
 800d65c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d65e:	2300      	movs	r3, #0
 800d660:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d668:	2b01      	cmp	r3, #1
 800d66a:	d101      	bne.n	800d670 <HAL_DMA_Start_IT+0x20>
 800d66c:	2302      	movs	r3, #2
 800d66e:	e066      	b.n	800d73e <HAL_DMA_Start_IT+0xee>
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	2201      	movs	r2, #1
 800d674:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800d67e:	b2db      	uxtb	r3, r3
 800d680:	2b01      	cmp	r3, #1
 800d682:	d155      	bne.n	800d730 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	2202      	movs	r2, #2
 800d688:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	2200      	movs	r2, #0
 800d690:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	681a      	ldr	r2, [r3, #0]
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	f022 0201 	bic.w	r2, r2, #1
 800d6a0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	687a      	ldr	r2, [r7, #4]
 800d6a6:	68b9      	ldr	r1, [r7, #8]
 800d6a8:	68f8      	ldr	r0, [r7, #12]
 800d6aa:	f000 f9c4 	bl	800da36 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d008      	beq.n	800d6c8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	681a      	ldr	r2, [r3, #0]
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	f042 020e 	orr.w	r2, r2, #14
 800d6c4:	601a      	str	r2, [r3, #0]
 800d6c6:	e00f      	b.n	800d6e8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	681a      	ldr	r2, [r3, #0]
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	f022 0204 	bic.w	r2, r2, #4
 800d6d6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	681a      	ldr	r2, [r3, #0]
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	f042 020a 	orr.w	r2, r2, #10
 800d6e6:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d007      	beq.n	800d706 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d6fa:	681a      	ldr	r2, [r3, #0]
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d700:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d704:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d007      	beq.n	800d71e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d712:	681a      	ldr	r2, [r3, #0]
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d718:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d71c:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	681a      	ldr	r2, [r3, #0]
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	f042 0201 	orr.w	r2, r2, #1
 800d72c:	601a      	str	r2, [r3, #0]
 800d72e:	e005      	b.n	800d73c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	2200      	movs	r2, #0
 800d734:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800d738:	2302      	movs	r3, #2
 800d73a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800d73c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d73e:	4618      	mov	r0, r3
 800d740:	3718      	adds	r7, #24
 800d742:	46bd      	mov	sp, r7
 800d744:	bd80      	pop	{r7, pc}

0800d746 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800d746:	b480      	push	{r7}
 800d748:	b085      	sub	sp, #20
 800d74a:	af00      	add	r7, sp, #0
 800d74c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d74e:	2300      	movs	r3, #0
 800d750:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800d758:	b2db      	uxtb	r3, r3
 800d75a:	2b02      	cmp	r3, #2
 800d75c:	d008      	beq.n	800d770 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	2204      	movs	r2, #4
 800d762:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2200      	movs	r2, #0
 800d768:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800d76c:	2301      	movs	r3, #1
 800d76e:	e040      	b.n	800d7f2 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	681a      	ldr	r2, [r3, #0]
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	f022 020e 	bic.w	r2, r2, #14
 800d77e:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d784:	681a      	ldr	r2, [r3, #0]
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d78a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d78e:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	681a      	ldr	r2, [r3, #0]
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	f022 0201 	bic.w	r2, r2, #1
 800d79e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7a4:	f003 021c 	and.w	r2, r3, #28
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7ac:	2101      	movs	r1, #1
 800d7ae:	fa01 f202 	lsl.w	r2, r1, r2
 800d7b2:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7b8:	687a      	ldr	r2, [r7, #4]
 800d7ba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800d7bc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d00c      	beq.n	800d7e0 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7ca:	681a      	ldr	r2, [r3, #0]
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d7d4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d7da:	687a      	ldr	r2, [r7, #4]
 800d7dc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800d7de:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2201      	movs	r2, #1
 800d7e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800d7f0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	3714      	adds	r7, #20
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fc:	4770      	bx	lr

0800d7fe <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800d7fe:	b580      	push	{r7, lr}
 800d800:	b084      	sub	sp, #16
 800d802:	af00      	add	r7, sp, #0
 800d804:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d806:	2300      	movs	r3, #0
 800d808:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800d810:	b2db      	uxtb	r3, r3
 800d812:	2b02      	cmp	r3, #2
 800d814:	d005      	beq.n	800d822 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	2204      	movs	r2, #4
 800d81a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800d81c:	2301      	movs	r3, #1
 800d81e:	73fb      	strb	r3, [r7, #15]
 800d820:	e047      	b.n	800d8b2 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	681a      	ldr	r2, [r3, #0]
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	f022 020e 	bic.w	r2, r2, #14
 800d830:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	681a      	ldr	r2, [r3, #0]
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	f022 0201 	bic.w	r2, r2, #1
 800d840:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d846:	681a      	ldr	r2, [r3, #0]
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d84c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d850:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d856:	f003 021c 	and.w	r2, r3, #28
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d85e:	2101      	movs	r1, #1
 800d860:	fa01 f202 	lsl.w	r2, r1, r2
 800d864:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d86a:	687a      	ldr	r2, [r7, #4]
 800d86c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800d86e:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d874:	2b00      	cmp	r3, #0
 800d876:	d00c      	beq.n	800d892 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d87c:	681a      	ldr	r2, [r3, #0]
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d882:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d886:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d88c:	687a      	ldr	r2, [r7, #4]
 800d88e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800d890:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	2201      	movs	r2, #1
 800d896:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	2200      	movs	r2, #0
 800d89e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d003      	beq.n	800d8b2 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8ae:	6878      	ldr	r0, [r7, #4]
 800d8b0:	4798      	blx	r3
    }
  }
  return status;
 800d8b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	3710      	adds	r7, #16
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}

0800d8bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b084      	sub	sp, #16
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8d8:	f003 031c 	and.w	r3, r3, #28
 800d8dc:	2204      	movs	r2, #4
 800d8de:	409a      	lsls	r2, r3
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	4013      	ands	r3, r2
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d026      	beq.n	800d936 <HAL_DMA_IRQHandler+0x7a>
 800d8e8:	68bb      	ldr	r3, [r7, #8]
 800d8ea:	f003 0304 	and.w	r3, r3, #4
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d021      	beq.n	800d936 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	f003 0320 	and.w	r3, r3, #32
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d107      	bne.n	800d910 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	681a      	ldr	r2, [r3, #0]
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	f022 0204 	bic.w	r2, r2, #4
 800d90e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d914:	f003 021c 	and.w	r2, r3, #28
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d91c:	2104      	movs	r1, #4
 800d91e:	fa01 f202 	lsl.w	r2, r1, r2
 800d922:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d071      	beq.n	800da10 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d930:	6878      	ldr	r0, [r7, #4]
 800d932:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800d934:	e06c      	b.n	800da10 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d93a:	f003 031c 	and.w	r3, r3, #28
 800d93e:	2202      	movs	r2, #2
 800d940:	409a      	lsls	r2, r3
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	4013      	ands	r3, r2
 800d946:	2b00      	cmp	r3, #0
 800d948:	d02e      	beq.n	800d9a8 <HAL_DMA_IRQHandler+0xec>
 800d94a:	68bb      	ldr	r3, [r7, #8]
 800d94c:	f003 0302 	and.w	r3, r3, #2
 800d950:	2b00      	cmp	r3, #0
 800d952:	d029      	beq.n	800d9a8 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	f003 0320 	and.w	r3, r3, #32
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d10b      	bne.n	800d97a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	681a      	ldr	r2, [r3, #0]
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	f022 020a 	bic.w	r2, r2, #10
 800d970:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	2201      	movs	r2, #1
 800d976:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d97e:	f003 021c 	and.w	r2, r3, #28
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d986:	2102      	movs	r1, #2
 800d988:	fa01 f202 	lsl.w	r2, r1, r2
 800d98c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	2200      	movs	r2, #0
 800d992:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d038      	beq.n	800da10 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9a2:	6878      	ldr	r0, [r7, #4]
 800d9a4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800d9a6:	e033      	b.n	800da10 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9ac:	f003 031c 	and.w	r3, r3, #28
 800d9b0:	2208      	movs	r2, #8
 800d9b2:	409a      	lsls	r2, r3
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	4013      	ands	r3, r2
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d02a      	beq.n	800da12 <HAL_DMA_IRQHandler+0x156>
 800d9bc:	68bb      	ldr	r3, [r7, #8]
 800d9be:	f003 0308 	and.w	r3, r3, #8
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d025      	beq.n	800da12 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	681a      	ldr	r2, [r3, #0]
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	f022 020e 	bic.w	r2, r2, #14
 800d9d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9da:	f003 021c 	and.w	r2, r3, #28
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9e2:	2101      	movs	r1, #1
 800d9e4:	fa01 f202 	lsl.w	r2, r1, r2
 800d9e8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	2201      	movs	r2, #1
 800d9ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	2201      	movs	r2, #1
 800d9f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da04:	2b00      	cmp	r3, #0
 800da06:	d004      	beq.n	800da12 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da0c:	6878      	ldr	r0, [r7, #4]
 800da0e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800da10:	bf00      	nop
 800da12:	bf00      	nop
}
 800da14:	3710      	adds	r7, #16
 800da16:	46bd      	mov	sp, r7
 800da18:	bd80      	pop	{r7, pc}

0800da1a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800da1a:	b480      	push	{r7}
 800da1c:	b083      	sub	sp, #12
 800da1e:	af00      	add	r7, sp, #0
 800da20:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800da28:	b2db      	uxtb	r3, r3
}
 800da2a:	4618      	mov	r0, r3
 800da2c:	370c      	adds	r7, #12
 800da2e:	46bd      	mov	sp, r7
 800da30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da34:	4770      	bx	lr

0800da36 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800da36:	b480      	push	{r7}
 800da38:	b085      	sub	sp, #20
 800da3a:	af00      	add	r7, sp, #0
 800da3c:	60f8      	str	r0, [r7, #12]
 800da3e:	60b9      	str	r1, [r7, #8]
 800da40:	607a      	str	r2, [r7, #4]
 800da42:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da48:	68fa      	ldr	r2, [r7, #12]
 800da4a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800da4c:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da52:	2b00      	cmp	r3, #0
 800da54:	d004      	beq.n	800da60 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da5a:	68fa      	ldr	r2, [r7, #12]
 800da5c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800da5e:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da64:	f003 021c 	and.w	r2, r3, #28
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da6c:	2101      	movs	r1, #1
 800da6e:	fa01 f202 	lsl.w	r2, r1, r2
 800da72:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	683a      	ldr	r2, [r7, #0]
 800da7a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	689b      	ldr	r3, [r3, #8]
 800da80:	2b10      	cmp	r3, #16
 800da82:	d108      	bne.n	800da96 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	687a      	ldr	r2, [r7, #4]
 800da8a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	68ba      	ldr	r2, [r7, #8]
 800da92:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800da94:	e007      	b.n	800daa6 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	68ba      	ldr	r2, [r7, #8]
 800da9c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	687a      	ldr	r2, [r7, #4]
 800daa4:	60da      	str	r2, [r3, #12]
}
 800daa6:	bf00      	nop
 800daa8:	3714      	adds	r7, #20
 800daaa:	46bd      	mov	sp, r7
 800daac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab0:	4770      	bx	lr
	...

0800dab4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800dab4:	b480      	push	{r7}
 800dab6:	b085      	sub	sp, #20
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	461a      	mov	r2, r3
 800dac2:	4b17      	ldr	r3, [pc, #92]	; (800db20 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800dac4:	429a      	cmp	r2, r3
 800dac6:	d80a      	bhi.n	800dade <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dacc:	089b      	lsrs	r3, r3, #2
 800dace:	009b      	lsls	r3, r3, #2
 800dad0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800dad4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800dad8:	687a      	ldr	r2, [r7, #4]
 800dada:	6493      	str	r3, [r2, #72]	; 0x48
 800dadc:	e007      	b.n	800daee <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dae2:	089b      	lsrs	r3, r3, #2
 800dae4:	009a      	lsls	r2, r3, #2
 800dae6:	4b0f      	ldr	r3, [pc, #60]	; (800db24 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800dae8:	4413      	add	r3, r2
 800daea:	687a      	ldr	r2, [r7, #4]
 800daec:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	b2db      	uxtb	r3, r3
 800daf4:	3b08      	subs	r3, #8
 800daf6:	4a0c      	ldr	r2, [pc, #48]	; (800db28 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800daf8:	fba2 2303 	umull	r2, r3, r2, r3
 800dafc:	091b      	lsrs	r3, r3, #4
 800dafe:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	4a0a      	ldr	r2, [pc, #40]	; (800db2c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800db04:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	f003 031f 	and.w	r3, r3, #31
 800db0c:	2201      	movs	r2, #1
 800db0e:	409a      	lsls	r2, r3
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	651a      	str	r2, [r3, #80]	; 0x50
}
 800db14:	bf00      	nop
 800db16:	3714      	adds	r7, #20
 800db18:	46bd      	mov	sp, r7
 800db1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1e:	4770      	bx	lr
 800db20:	40020407 	.word	0x40020407
 800db24:	4002081c 	.word	0x4002081c
 800db28:	cccccccd 	.word	0xcccccccd
 800db2c:	40020880 	.word	0x40020880

0800db30 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800db30:	b480      	push	{r7}
 800db32:	b085      	sub	sp, #20
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	685b      	ldr	r3, [r3, #4]
 800db3c:	b2db      	uxtb	r3, r3
 800db3e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800db40:	68fa      	ldr	r2, [r7, #12]
 800db42:	4b0b      	ldr	r3, [pc, #44]	; (800db70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800db44:	4413      	add	r3, r2
 800db46:	009b      	lsls	r3, r3, #2
 800db48:	461a      	mov	r2, r3
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	4a08      	ldr	r2, [pc, #32]	; (800db74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800db52:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	3b01      	subs	r3, #1
 800db58:	f003 0303 	and.w	r3, r3, #3
 800db5c:	2201      	movs	r2, #1
 800db5e:	409a      	lsls	r2, r3
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800db64:	bf00      	nop
 800db66:	3714      	adds	r7, #20
 800db68:	46bd      	mov	sp, r7
 800db6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6e:	4770      	bx	lr
 800db70:	1000823f 	.word	0x1000823f
 800db74:	40020940 	.word	0x40020940

0800db78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800db78:	b480      	push	{r7}
 800db7a:	b087      	sub	sp, #28
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
 800db80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800db82:	2300      	movs	r3, #0
 800db84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800db86:	e166      	b.n	800de56 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	681a      	ldr	r2, [r3, #0]
 800db8c:	2101      	movs	r1, #1
 800db8e:	697b      	ldr	r3, [r7, #20]
 800db90:	fa01 f303 	lsl.w	r3, r1, r3
 800db94:	4013      	ands	r3, r2
 800db96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	f000 8158 	beq.w	800de50 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800dba0:	683b      	ldr	r3, [r7, #0]
 800dba2:	685b      	ldr	r3, [r3, #4]
 800dba4:	f003 0303 	and.w	r3, r3, #3
 800dba8:	2b01      	cmp	r3, #1
 800dbaa:	d005      	beq.n	800dbb8 <HAL_GPIO_Init+0x40>
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	685b      	ldr	r3, [r3, #4]
 800dbb0:	f003 0303 	and.w	r3, r3, #3
 800dbb4:	2b02      	cmp	r3, #2
 800dbb6:	d130      	bne.n	800dc1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	689b      	ldr	r3, [r3, #8]
 800dbbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800dbbe:	697b      	ldr	r3, [r7, #20]
 800dbc0:	005b      	lsls	r3, r3, #1
 800dbc2:	2203      	movs	r2, #3
 800dbc4:	fa02 f303 	lsl.w	r3, r2, r3
 800dbc8:	43db      	mvns	r3, r3
 800dbca:	693a      	ldr	r2, [r7, #16]
 800dbcc:	4013      	ands	r3, r2
 800dbce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800dbd0:	683b      	ldr	r3, [r7, #0]
 800dbd2:	68da      	ldr	r2, [r3, #12]
 800dbd4:	697b      	ldr	r3, [r7, #20]
 800dbd6:	005b      	lsls	r3, r3, #1
 800dbd8:	fa02 f303 	lsl.w	r3, r2, r3
 800dbdc:	693a      	ldr	r2, [r7, #16]
 800dbde:	4313      	orrs	r3, r2
 800dbe0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	693a      	ldr	r2, [r7, #16]
 800dbe6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	685b      	ldr	r3, [r3, #4]
 800dbec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800dbee:	2201      	movs	r2, #1
 800dbf0:	697b      	ldr	r3, [r7, #20]
 800dbf2:	fa02 f303 	lsl.w	r3, r2, r3
 800dbf6:	43db      	mvns	r3, r3
 800dbf8:	693a      	ldr	r2, [r7, #16]
 800dbfa:	4013      	ands	r3, r2
 800dbfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	685b      	ldr	r3, [r3, #4]
 800dc02:	091b      	lsrs	r3, r3, #4
 800dc04:	f003 0201 	and.w	r2, r3, #1
 800dc08:	697b      	ldr	r3, [r7, #20]
 800dc0a:	fa02 f303 	lsl.w	r3, r2, r3
 800dc0e:	693a      	ldr	r2, [r7, #16]
 800dc10:	4313      	orrs	r3, r2
 800dc12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	693a      	ldr	r2, [r7, #16]
 800dc18:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800dc1a:	683b      	ldr	r3, [r7, #0]
 800dc1c:	685b      	ldr	r3, [r3, #4]
 800dc1e:	f003 0303 	and.w	r3, r3, #3
 800dc22:	2b03      	cmp	r3, #3
 800dc24:	d017      	beq.n	800dc56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	68db      	ldr	r3, [r3, #12]
 800dc2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800dc2c:	697b      	ldr	r3, [r7, #20]
 800dc2e:	005b      	lsls	r3, r3, #1
 800dc30:	2203      	movs	r2, #3
 800dc32:	fa02 f303 	lsl.w	r3, r2, r3
 800dc36:	43db      	mvns	r3, r3
 800dc38:	693a      	ldr	r2, [r7, #16]
 800dc3a:	4013      	ands	r3, r2
 800dc3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	689a      	ldr	r2, [r3, #8]
 800dc42:	697b      	ldr	r3, [r7, #20]
 800dc44:	005b      	lsls	r3, r3, #1
 800dc46:	fa02 f303 	lsl.w	r3, r2, r3
 800dc4a:	693a      	ldr	r2, [r7, #16]
 800dc4c:	4313      	orrs	r3, r2
 800dc4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	693a      	ldr	r2, [r7, #16]
 800dc54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800dc56:	683b      	ldr	r3, [r7, #0]
 800dc58:	685b      	ldr	r3, [r3, #4]
 800dc5a:	f003 0303 	and.w	r3, r3, #3
 800dc5e:	2b02      	cmp	r3, #2
 800dc60:	d123      	bne.n	800dcaa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800dc62:	697b      	ldr	r3, [r7, #20]
 800dc64:	08da      	lsrs	r2, r3, #3
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	3208      	adds	r2, #8
 800dc6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800dc70:	697b      	ldr	r3, [r7, #20]
 800dc72:	f003 0307 	and.w	r3, r3, #7
 800dc76:	009b      	lsls	r3, r3, #2
 800dc78:	220f      	movs	r2, #15
 800dc7a:	fa02 f303 	lsl.w	r3, r2, r3
 800dc7e:	43db      	mvns	r3, r3
 800dc80:	693a      	ldr	r2, [r7, #16]
 800dc82:	4013      	ands	r3, r2
 800dc84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800dc86:	683b      	ldr	r3, [r7, #0]
 800dc88:	691a      	ldr	r2, [r3, #16]
 800dc8a:	697b      	ldr	r3, [r7, #20]
 800dc8c:	f003 0307 	and.w	r3, r3, #7
 800dc90:	009b      	lsls	r3, r3, #2
 800dc92:	fa02 f303 	lsl.w	r3, r2, r3
 800dc96:	693a      	ldr	r2, [r7, #16]
 800dc98:	4313      	orrs	r3, r2
 800dc9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800dc9c:	697b      	ldr	r3, [r7, #20]
 800dc9e:	08da      	lsrs	r2, r3, #3
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	3208      	adds	r2, #8
 800dca4:	6939      	ldr	r1, [r7, #16]
 800dca6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800dcb0:	697b      	ldr	r3, [r7, #20]
 800dcb2:	005b      	lsls	r3, r3, #1
 800dcb4:	2203      	movs	r2, #3
 800dcb6:	fa02 f303 	lsl.w	r3, r2, r3
 800dcba:	43db      	mvns	r3, r3
 800dcbc:	693a      	ldr	r2, [r7, #16]
 800dcbe:	4013      	ands	r3, r2
 800dcc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800dcc2:	683b      	ldr	r3, [r7, #0]
 800dcc4:	685b      	ldr	r3, [r3, #4]
 800dcc6:	f003 0203 	and.w	r2, r3, #3
 800dcca:	697b      	ldr	r3, [r7, #20]
 800dccc:	005b      	lsls	r3, r3, #1
 800dcce:	fa02 f303 	lsl.w	r3, r2, r3
 800dcd2:	693a      	ldr	r2, [r7, #16]
 800dcd4:	4313      	orrs	r3, r2
 800dcd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	693a      	ldr	r2, [r7, #16]
 800dcdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	685b      	ldr	r3, [r3, #4]
 800dce2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	f000 80b2 	beq.w	800de50 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800dcec:	4b61      	ldr	r3, [pc, #388]	; (800de74 <HAL_GPIO_Init+0x2fc>)
 800dcee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dcf0:	4a60      	ldr	r2, [pc, #384]	; (800de74 <HAL_GPIO_Init+0x2fc>)
 800dcf2:	f043 0301 	orr.w	r3, r3, #1
 800dcf6:	6613      	str	r3, [r2, #96]	; 0x60
 800dcf8:	4b5e      	ldr	r3, [pc, #376]	; (800de74 <HAL_GPIO_Init+0x2fc>)
 800dcfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dcfc:	f003 0301 	and.w	r3, r3, #1
 800dd00:	60bb      	str	r3, [r7, #8]
 800dd02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800dd04:	4a5c      	ldr	r2, [pc, #368]	; (800de78 <HAL_GPIO_Init+0x300>)
 800dd06:	697b      	ldr	r3, [r7, #20]
 800dd08:	089b      	lsrs	r3, r3, #2
 800dd0a:	3302      	adds	r3, #2
 800dd0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	f003 0303 	and.w	r3, r3, #3
 800dd18:	009b      	lsls	r3, r3, #2
 800dd1a:	220f      	movs	r2, #15
 800dd1c:	fa02 f303 	lsl.w	r3, r2, r3
 800dd20:	43db      	mvns	r3, r3
 800dd22:	693a      	ldr	r2, [r7, #16]
 800dd24:	4013      	ands	r3, r2
 800dd26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800dd2e:	d02b      	beq.n	800dd88 <HAL_GPIO_Init+0x210>
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	4a52      	ldr	r2, [pc, #328]	; (800de7c <HAL_GPIO_Init+0x304>)
 800dd34:	4293      	cmp	r3, r2
 800dd36:	d025      	beq.n	800dd84 <HAL_GPIO_Init+0x20c>
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	4a51      	ldr	r2, [pc, #324]	; (800de80 <HAL_GPIO_Init+0x308>)
 800dd3c:	4293      	cmp	r3, r2
 800dd3e:	d01f      	beq.n	800dd80 <HAL_GPIO_Init+0x208>
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	4a50      	ldr	r2, [pc, #320]	; (800de84 <HAL_GPIO_Init+0x30c>)
 800dd44:	4293      	cmp	r3, r2
 800dd46:	d019      	beq.n	800dd7c <HAL_GPIO_Init+0x204>
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	4a4f      	ldr	r2, [pc, #316]	; (800de88 <HAL_GPIO_Init+0x310>)
 800dd4c:	4293      	cmp	r3, r2
 800dd4e:	d013      	beq.n	800dd78 <HAL_GPIO_Init+0x200>
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	4a4e      	ldr	r2, [pc, #312]	; (800de8c <HAL_GPIO_Init+0x314>)
 800dd54:	4293      	cmp	r3, r2
 800dd56:	d00d      	beq.n	800dd74 <HAL_GPIO_Init+0x1fc>
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	4a4d      	ldr	r2, [pc, #308]	; (800de90 <HAL_GPIO_Init+0x318>)
 800dd5c:	4293      	cmp	r3, r2
 800dd5e:	d007      	beq.n	800dd70 <HAL_GPIO_Init+0x1f8>
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	4a4c      	ldr	r2, [pc, #304]	; (800de94 <HAL_GPIO_Init+0x31c>)
 800dd64:	4293      	cmp	r3, r2
 800dd66:	d101      	bne.n	800dd6c <HAL_GPIO_Init+0x1f4>
 800dd68:	2307      	movs	r3, #7
 800dd6a:	e00e      	b.n	800dd8a <HAL_GPIO_Init+0x212>
 800dd6c:	2308      	movs	r3, #8
 800dd6e:	e00c      	b.n	800dd8a <HAL_GPIO_Init+0x212>
 800dd70:	2306      	movs	r3, #6
 800dd72:	e00a      	b.n	800dd8a <HAL_GPIO_Init+0x212>
 800dd74:	2305      	movs	r3, #5
 800dd76:	e008      	b.n	800dd8a <HAL_GPIO_Init+0x212>
 800dd78:	2304      	movs	r3, #4
 800dd7a:	e006      	b.n	800dd8a <HAL_GPIO_Init+0x212>
 800dd7c:	2303      	movs	r3, #3
 800dd7e:	e004      	b.n	800dd8a <HAL_GPIO_Init+0x212>
 800dd80:	2302      	movs	r3, #2
 800dd82:	e002      	b.n	800dd8a <HAL_GPIO_Init+0x212>
 800dd84:	2301      	movs	r3, #1
 800dd86:	e000      	b.n	800dd8a <HAL_GPIO_Init+0x212>
 800dd88:	2300      	movs	r3, #0
 800dd8a:	697a      	ldr	r2, [r7, #20]
 800dd8c:	f002 0203 	and.w	r2, r2, #3
 800dd90:	0092      	lsls	r2, r2, #2
 800dd92:	4093      	lsls	r3, r2
 800dd94:	693a      	ldr	r2, [r7, #16]
 800dd96:	4313      	orrs	r3, r2
 800dd98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800dd9a:	4937      	ldr	r1, [pc, #220]	; (800de78 <HAL_GPIO_Init+0x300>)
 800dd9c:	697b      	ldr	r3, [r7, #20]
 800dd9e:	089b      	lsrs	r3, r3, #2
 800dda0:	3302      	adds	r3, #2
 800dda2:	693a      	ldr	r2, [r7, #16]
 800dda4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800dda8:	4b3b      	ldr	r3, [pc, #236]	; (800de98 <HAL_GPIO_Init+0x320>)
 800ddaa:	689b      	ldr	r3, [r3, #8]
 800ddac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	43db      	mvns	r3, r3
 800ddb2:	693a      	ldr	r2, [r7, #16]
 800ddb4:	4013      	ands	r3, r2
 800ddb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800ddb8:	683b      	ldr	r3, [r7, #0]
 800ddba:	685b      	ldr	r3, [r3, #4]
 800ddbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d003      	beq.n	800ddcc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800ddc4:	693a      	ldr	r2, [r7, #16]
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	4313      	orrs	r3, r2
 800ddca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800ddcc:	4a32      	ldr	r2, [pc, #200]	; (800de98 <HAL_GPIO_Init+0x320>)
 800ddce:	693b      	ldr	r3, [r7, #16]
 800ddd0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800ddd2:	4b31      	ldr	r3, [pc, #196]	; (800de98 <HAL_GPIO_Init+0x320>)
 800ddd4:	68db      	ldr	r3, [r3, #12]
 800ddd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	43db      	mvns	r3, r3
 800dddc:	693a      	ldr	r2, [r7, #16]
 800ddde:	4013      	ands	r3, r2
 800dde0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800dde2:	683b      	ldr	r3, [r7, #0]
 800dde4:	685b      	ldr	r3, [r3, #4]
 800dde6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d003      	beq.n	800ddf6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800ddee:	693a      	ldr	r2, [r7, #16]
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	4313      	orrs	r3, r2
 800ddf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800ddf6:	4a28      	ldr	r2, [pc, #160]	; (800de98 <HAL_GPIO_Init+0x320>)
 800ddf8:	693b      	ldr	r3, [r7, #16]
 800ddfa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800ddfc:	4b26      	ldr	r3, [pc, #152]	; (800de98 <HAL_GPIO_Init+0x320>)
 800ddfe:	685b      	ldr	r3, [r3, #4]
 800de00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	43db      	mvns	r3, r3
 800de06:	693a      	ldr	r2, [r7, #16]
 800de08:	4013      	ands	r3, r2
 800de0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	685b      	ldr	r3, [r3, #4]
 800de10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800de14:	2b00      	cmp	r3, #0
 800de16:	d003      	beq.n	800de20 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800de18:	693a      	ldr	r2, [r7, #16]
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	4313      	orrs	r3, r2
 800de1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800de20:	4a1d      	ldr	r2, [pc, #116]	; (800de98 <HAL_GPIO_Init+0x320>)
 800de22:	693b      	ldr	r3, [r7, #16]
 800de24:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800de26:	4b1c      	ldr	r3, [pc, #112]	; (800de98 <HAL_GPIO_Init+0x320>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	43db      	mvns	r3, r3
 800de30:	693a      	ldr	r2, [r7, #16]
 800de32:	4013      	ands	r3, r2
 800de34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800de36:	683b      	ldr	r3, [r7, #0]
 800de38:	685b      	ldr	r3, [r3, #4]
 800de3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d003      	beq.n	800de4a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800de42:	693a      	ldr	r2, [r7, #16]
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	4313      	orrs	r3, r2
 800de48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800de4a:	4a13      	ldr	r2, [pc, #76]	; (800de98 <HAL_GPIO_Init+0x320>)
 800de4c:	693b      	ldr	r3, [r7, #16]
 800de4e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800de50:	697b      	ldr	r3, [r7, #20]
 800de52:	3301      	adds	r3, #1
 800de54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800de56:	683b      	ldr	r3, [r7, #0]
 800de58:	681a      	ldr	r2, [r3, #0]
 800de5a:	697b      	ldr	r3, [r7, #20]
 800de5c:	fa22 f303 	lsr.w	r3, r2, r3
 800de60:	2b00      	cmp	r3, #0
 800de62:	f47f ae91 	bne.w	800db88 <HAL_GPIO_Init+0x10>
  }
}
 800de66:	bf00      	nop
 800de68:	bf00      	nop
 800de6a:	371c      	adds	r7, #28
 800de6c:	46bd      	mov	sp, r7
 800de6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de72:	4770      	bx	lr
 800de74:	40021000 	.word	0x40021000
 800de78:	40010000 	.word	0x40010000
 800de7c:	48000400 	.word	0x48000400
 800de80:	48000800 	.word	0x48000800
 800de84:	48000c00 	.word	0x48000c00
 800de88:	48001000 	.word	0x48001000
 800de8c:	48001400 	.word	0x48001400
 800de90:	48001800 	.word	0x48001800
 800de94:	48001c00 	.word	0x48001c00
 800de98:	40010400 	.word	0x40010400

0800de9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800de9c:	b480      	push	{r7}
 800de9e:	b085      	sub	sp, #20
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
 800dea4:	460b      	mov	r3, r1
 800dea6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	691a      	ldr	r2, [r3, #16]
 800deac:	887b      	ldrh	r3, [r7, #2]
 800deae:	4013      	ands	r3, r2
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d002      	beq.n	800deba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800deb4:	2301      	movs	r3, #1
 800deb6:	73fb      	strb	r3, [r7, #15]
 800deb8:	e001      	b.n	800debe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800deba:	2300      	movs	r3, #0
 800debc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800debe:	7bfb      	ldrb	r3, [r7, #15]
}
 800dec0:	4618      	mov	r0, r3
 800dec2:	3714      	adds	r7, #20
 800dec4:	46bd      	mov	sp, r7
 800dec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deca:	4770      	bx	lr

0800decc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800decc:	b480      	push	{r7}
 800dece:	b083      	sub	sp, #12
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
 800ded4:	460b      	mov	r3, r1
 800ded6:	807b      	strh	r3, [r7, #2]
 800ded8:	4613      	mov	r3, r2
 800deda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800dedc:	787b      	ldrb	r3, [r7, #1]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d003      	beq.n	800deea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800dee2:	887a      	ldrh	r2, [r7, #2]
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800dee8:	e002      	b.n	800def0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800deea:	887a      	ldrh	r2, [r7, #2]
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	629a      	str	r2, [r3, #40]	; 0x28
}
 800def0:	bf00      	nop
 800def2:	370c      	adds	r7, #12
 800def4:	46bd      	mov	sp, r7
 800def6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defa:	4770      	bx	lr

0800defc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800defc:	b480      	push	{r7}
 800defe:	b085      	sub	sp, #20
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
 800df04:	460b      	mov	r3, r1
 800df06:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	695b      	ldr	r3, [r3, #20]
 800df0c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800df0e:	887a      	ldrh	r2, [r7, #2]
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	4013      	ands	r3, r2
 800df14:	041a      	lsls	r2, r3, #16
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	43d9      	mvns	r1, r3
 800df1a:	887b      	ldrh	r3, [r7, #2]
 800df1c:	400b      	ands	r3, r1
 800df1e:	431a      	orrs	r2, r3
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	619a      	str	r2, [r3, #24]
}
 800df24:	bf00      	nop
 800df26:	3714      	adds	r7, #20
 800df28:	46bd      	mov	sp, r7
 800df2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2e:	4770      	bx	lr

0800df30 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800df30:	b580      	push	{r7, lr}
 800df32:	b084      	sub	sp, #16
 800df34:	af00      	add	r7, sp, #0
 800df36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d101      	bne.n	800df42 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800df3e:	2301      	movs	r3, #1
 800df40:	e041      	b.n	800dfc6 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800df4a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	f245 5255 	movw	r2, #21845	; 0x5555
 800df54:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	687a      	ldr	r2, [r7, #4]
 800df5c:	6852      	ldr	r2, [r2, #4]
 800df5e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	687a      	ldr	r2, [r7, #4]
 800df66:	6892      	ldr	r2, [r2, #8]
 800df68:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800df6a:	f7ff f9bf 	bl	800d2ec <HAL_GetTick>
 800df6e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800df70:	e00f      	b.n	800df92 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800df72:	f7ff f9bb 	bl	800d2ec <HAL_GetTick>
 800df76:	4602      	mov	r2, r0
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	1ad3      	subs	r3, r2, r3
 800df7c:	2b31      	cmp	r3, #49	; 0x31
 800df7e:	d908      	bls.n	800df92 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	68db      	ldr	r3, [r3, #12]
 800df86:	f003 0307 	and.w	r3, r3, #7
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d001      	beq.n	800df92 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800df8e:	2303      	movs	r3, #3
 800df90:	e019      	b.n	800dfc6 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	68db      	ldr	r3, [r3, #12]
 800df98:	f003 0307 	and.w	r3, r3, #7
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d1e8      	bne.n	800df72 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	691a      	ldr	r2, [r3, #16]
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	68db      	ldr	r3, [r3, #12]
 800dfaa:	429a      	cmp	r2, r3
 800dfac:	d005      	beq.n	800dfba <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	687a      	ldr	r2, [r7, #4]
 800dfb4:	68d2      	ldr	r2, [r2, #12]
 800dfb6:	611a      	str	r2, [r3, #16]
 800dfb8:	e004      	b.n	800dfc4 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800dfc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800dfc4:	2300      	movs	r3, #0
}
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	3710      	adds	r7, #16
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	bd80      	pop	{r7, pc}

0800dfce <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800dfce:	b480      	push	{r7}
 800dfd0:	b083      	sub	sp, #12
 800dfd2:	af00      	add	r7, sp, #0
 800dfd4:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800dfde:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800dfe0:	2300      	movs	r3, #0
}
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	370c      	adds	r7, #12
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfec:	4770      	bx	lr
	...

0800dff0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800dff0:	b480      	push	{r7}
 800dff2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800dff4:	4b05      	ldr	r3, [pc, #20]	; (800e00c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	4a04      	ldr	r2, [pc, #16]	; (800e00c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800dffa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dffe:	6013      	str	r3, [r2, #0]
}
 800e000:	bf00      	nop
 800e002:	46bd      	mov	sp, r7
 800e004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e008:	4770      	bx	lr
 800e00a:	bf00      	nop
 800e00c:	40007000 	.word	0x40007000

0800e010 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800e010:	b480      	push	{r7}
 800e012:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800e014:	4b0d      	ldr	r3, [pc, #52]	; (800e04c <HAL_PWREx_GetVoltageRange+0x3c>)
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e01c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e020:	d102      	bne.n	800e028 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800e022:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e026:	e00b      	b.n	800e040 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800e028:	4b08      	ldr	r3, [pc, #32]	; (800e04c <HAL_PWREx_GetVoltageRange+0x3c>)
 800e02a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e02e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e032:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e036:	d102      	bne.n	800e03e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800e038:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e03c:	e000      	b.n	800e040 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800e03e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800e040:	4618      	mov	r0, r3
 800e042:	46bd      	mov	sp, r7
 800e044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e048:	4770      	bx	lr
 800e04a:	bf00      	nop
 800e04c:	40007000 	.word	0x40007000

0800e050 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800e050:	b480      	push	{r7}
 800e052:	b085      	sub	sp, #20
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d141      	bne.n	800e0e2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800e05e:	4b4b      	ldr	r3, [pc, #300]	; (800e18c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e066:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e06a:	d131      	bne.n	800e0d0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800e06c:	4b47      	ldr	r3, [pc, #284]	; (800e18c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800e06e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e072:	4a46      	ldr	r2, [pc, #280]	; (800e18c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800e074:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e078:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800e07c:	4b43      	ldr	r3, [pc, #268]	; (800e18c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800e084:	4a41      	ldr	r2, [pc, #260]	; (800e18c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800e086:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e08a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800e08c:	4b40      	ldr	r3, [pc, #256]	; (800e190 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	2232      	movs	r2, #50	; 0x32
 800e092:	fb02 f303 	mul.w	r3, r2, r3
 800e096:	4a3f      	ldr	r2, [pc, #252]	; (800e194 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800e098:	fba2 2303 	umull	r2, r3, r2, r3
 800e09c:	0c9b      	lsrs	r3, r3, #18
 800e09e:	3301      	adds	r3, #1
 800e0a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800e0a2:	e002      	b.n	800e0aa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	3b01      	subs	r3, #1
 800e0a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800e0aa:	4b38      	ldr	r3, [pc, #224]	; (800e18c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800e0ac:	695b      	ldr	r3, [r3, #20]
 800e0ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e0b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e0b6:	d102      	bne.n	800e0be <HAL_PWREx_ControlVoltageScaling+0x6e>
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d1f2      	bne.n	800e0a4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800e0be:	4b33      	ldr	r3, [pc, #204]	; (800e18c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800e0c0:	695b      	ldr	r3, [r3, #20]
 800e0c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e0c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e0ca:	d158      	bne.n	800e17e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800e0cc:	2303      	movs	r3, #3
 800e0ce:	e057      	b.n	800e180 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800e0d0:	4b2e      	ldr	r3, [pc, #184]	; (800e18c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800e0d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e0d6:	4a2d      	ldr	r2, [pc, #180]	; (800e18c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800e0d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e0dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800e0e0:	e04d      	b.n	800e17e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e0e8:	d141      	bne.n	800e16e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800e0ea:	4b28      	ldr	r3, [pc, #160]	; (800e18c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e0f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e0f6:	d131      	bne.n	800e15c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800e0f8:	4b24      	ldr	r3, [pc, #144]	; (800e18c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800e0fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e0fe:	4a23      	ldr	r2, [pc, #140]	; (800e18c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800e100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e104:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800e108:	4b20      	ldr	r3, [pc, #128]	; (800e18c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800e110:	4a1e      	ldr	r2, [pc, #120]	; (800e18c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800e112:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e116:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800e118:	4b1d      	ldr	r3, [pc, #116]	; (800e190 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	2232      	movs	r2, #50	; 0x32
 800e11e:	fb02 f303 	mul.w	r3, r2, r3
 800e122:	4a1c      	ldr	r2, [pc, #112]	; (800e194 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800e124:	fba2 2303 	umull	r2, r3, r2, r3
 800e128:	0c9b      	lsrs	r3, r3, #18
 800e12a:	3301      	adds	r3, #1
 800e12c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800e12e:	e002      	b.n	800e136 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	3b01      	subs	r3, #1
 800e134:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800e136:	4b15      	ldr	r3, [pc, #84]	; (800e18c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800e138:	695b      	ldr	r3, [r3, #20]
 800e13a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e13e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e142:	d102      	bne.n	800e14a <HAL_PWREx_ControlVoltageScaling+0xfa>
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d1f2      	bne.n	800e130 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800e14a:	4b10      	ldr	r3, [pc, #64]	; (800e18c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800e14c:	695b      	ldr	r3, [r3, #20]
 800e14e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e156:	d112      	bne.n	800e17e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800e158:	2303      	movs	r3, #3
 800e15a:	e011      	b.n	800e180 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800e15c:	4b0b      	ldr	r3, [pc, #44]	; (800e18c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800e15e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e162:	4a0a      	ldr	r2, [pc, #40]	; (800e18c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800e164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e168:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800e16c:	e007      	b.n	800e17e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800e16e:	4b07      	ldr	r3, [pc, #28]	; (800e18c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800e176:	4a05      	ldr	r2, [pc, #20]	; (800e18c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800e178:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e17c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800e17e:	2300      	movs	r3, #0
}
 800e180:	4618      	mov	r0, r3
 800e182:	3714      	adds	r7, #20
 800e184:	46bd      	mov	sp, r7
 800e186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18a:	4770      	bx	lr
 800e18c:	40007000 	.word	0x40007000
 800e190:	20000094 	.word	0x20000094
 800e194:	431bde83 	.word	0x431bde83

0800e198 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b08a      	sub	sp, #40	; 0x28
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d102      	bne.n	800e1ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800e1a6:	2301      	movs	r3, #1
 800e1a8:	f000 bc68 	b.w	800ea7c <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e1ac:	4b97      	ldr	r3, [pc, #604]	; (800e40c <HAL_RCC_OscConfig+0x274>)
 800e1ae:	689b      	ldr	r3, [r3, #8]
 800e1b0:	f003 030c 	and.w	r3, r3, #12
 800e1b4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800e1b6:	4b95      	ldr	r3, [pc, #596]	; (800e40c <HAL_RCC_OscConfig+0x274>)
 800e1b8:	68db      	ldr	r3, [r3, #12]
 800e1ba:	f003 0303 	and.w	r3, r3, #3
 800e1be:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	f003 0310 	and.w	r3, r3, #16
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	f000 80e6 	beq.w	800e39a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800e1ce:	6a3b      	ldr	r3, [r7, #32]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d007      	beq.n	800e1e4 <HAL_RCC_OscConfig+0x4c>
 800e1d4:	6a3b      	ldr	r3, [r7, #32]
 800e1d6:	2b0c      	cmp	r3, #12
 800e1d8:	f040 808d 	bne.w	800e2f6 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800e1dc:	69fb      	ldr	r3, [r7, #28]
 800e1de:	2b01      	cmp	r3, #1
 800e1e0:	f040 8089 	bne.w	800e2f6 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800e1e4:	4b89      	ldr	r3, [pc, #548]	; (800e40c <HAL_RCC_OscConfig+0x274>)
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	f003 0302 	and.w	r3, r3, #2
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d006      	beq.n	800e1fe <HAL_RCC_OscConfig+0x66>
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	69db      	ldr	r3, [r3, #28]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d102      	bne.n	800e1fe <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 800e1f8:	2301      	movs	r3, #1
 800e1fa:	f000 bc3f 	b.w	800ea7c <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e202:	4b82      	ldr	r3, [pc, #520]	; (800e40c <HAL_RCC_OscConfig+0x274>)
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	f003 0308 	and.w	r3, r3, #8
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d004      	beq.n	800e218 <HAL_RCC_OscConfig+0x80>
 800e20e:	4b7f      	ldr	r3, [pc, #508]	; (800e40c <HAL_RCC_OscConfig+0x274>)
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e216:	e005      	b.n	800e224 <HAL_RCC_OscConfig+0x8c>
 800e218:	4b7c      	ldr	r3, [pc, #496]	; (800e40c <HAL_RCC_OscConfig+0x274>)
 800e21a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e21e:	091b      	lsrs	r3, r3, #4
 800e220:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e224:	4293      	cmp	r3, r2
 800e226:	d224      	bcs.n	800e272 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e22c:	4618      	mov	r0, r3
 800e22e:	f000 fe5f 	bl	800eef0 <RCC_SetFlashLatencyFromMSIRange>
 800e232:	4603      	mov	r3, r0
 800e234:	2b00      	cmp	r3, #0
 800e236:	d002      	beq.n	800e23e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 800e238:	2301      	movs	r3, #1
 800e23a:	f000 bc1f 	b.w	800ea7c <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e23e:	4b73      	ldr	r3, [pc, #460]	; (800e40c <HAL_RCC_OscConfig+0x274>)
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	4a72      	ldr	r2, [pc, #456]	; (800e40c <HAL_RCC_OscConfig+0x274>)
 800e244:	f043 0308 	orr.w	r3, r3, #8
 800e248:	6013      	str	r3, [r2, #0]
 800e24a:	4b70      	ldr	r3, [pc, #448]	; (800e40c <HAL_RCC_OscConfig+0x274>)
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e256:	496d      	ldr	r1, [pc, #436]	; (800e40c <HAL_RCC_OscConfig+0x274>)
 800e258:	4313      	orrs	r3, r2
 800e25a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e25c:	4b6b      	ldr	r3, [pc, #428]	; (800e40c <HAL_RCC_OscConfig+0x274>)
 800e25e:	685b      	ldr	r3, [r3, #4]
 800e260:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	6a1b      	ldr	r3, [r3, #32]
 800e268:	021b      	lsls	r3, r3, #8
 800e26a:	4968      	ldr	r1, [pc, #416]	; (800e40c <HAL_RCC_OscConfig+0x274>)
 800e26c:	4313      	orrs	r3, r2
 800e26e:	604b      	str	r3, [r1, #4]
 800e270:	e025      	b.n	800e2be <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e272:	4b66      	ldr	r3, [pc, #408]	; (800e40c <HAL_RCC_OscConfig+0x274>)
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	4a65      	ldr	r2, [pc, #404]	; (800e40c <HAL_RCC_OscConfig+0x274>)
 800e278:	f043 0308 	orr.w	r3, r3, #8
 800e27c:	6013      	str	r3, [r2, #0]
 800e27e:	4b63      	ldr	r3, [pc, #396]	; (800e40c <HAL_RCC_OscConfig+0x274>)
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e28a:	4960      	ldr	r1, [pc, #384]	; (800e40c <HAL_RCC_OscConfig+0x274>)
 800e28c:	4313      	orrs	r3, r2
 800e28e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e290:	4b5e      	ldr	r3, [pc, #376]	; (800e40c <HAL_RCC_OscConfig+0x274>)
 800e292:	685b      	ldr	r3, [r3, #4]
 800e294:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	6a1b      	ldr	r3, [r3, #32]
 800e29c:	021b      	lsls	r3, r3, #8
 800e29e:	495b      	ldr	r1, [pc, #364]	; (800e40c <HAL_RCC_OscConfig+0x274>)
 800e2a0:	4313      	orrs	r3, r2
 800e2a2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800e2a4:	6a3b      	ldr	r3, [r7, #32]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d109      	bne.n	800e2be <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	f000 fe1e 	bl	800eef0 <RCC_SetFlashLatencyFromMSIRange>
 800e2b4:	4603      	mov	r3, r0
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d001      	beq.n	800e2be <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800e2ba:	2301      	movs	r3, #1
 800e2bc:	e3de      	b.n	800ea7c <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800e2be:	f000 fd21 	bl	800ed04 <HAL_RCC_GetSysClockFreq>
 800e2c2:	4602      	mov	r2, r0
 800e2c4:	4b51      	ldr	r3, [pc, #324]	; (800e40c <HAL_RCC_OscConfig+0x274>)
 800e2c6:	689b      	ldr	r3, [r3, #8]
 800e2c8:	091b      	lsrs	r3, r3, #4
 800e2ca:	f003 030f 	and.w	r3, r3, #15
 800e2ce:	4950      	ldr	r1, [pc, #320]	; (800e410 <HAL_RCC_OscConfig+0x278>)
 800e2d0:	5ccb      	ldrb	r3, [r1, r3]
 800e2d2:	f003 031f 	and.w	r3, r3, #31
 800e2d6:	fa22 f303 	lsr.w	r3, r2, r3
 800e2da:	4a4e      	ldr	r2, [pc, #312]	; (800e414 <HAL_RCC_OscConfig+0x27c>)
 800e2dc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800e2de:	4b4e      	ldr	r3, [pc, #312]	; (800e418 <HAL_RCC_OscConfig+0x280>)
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	f7fe fb12 	bl	800c90c <HAL_InitTick>
 800e2e8:	4603      	mov	r3, r0
 800e2ea:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 800e2ec:	7dfb      	ldrb	r3, [r7, #23]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d052      	beq.n	800e398 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800e2f2:	7dfb      	ldrb	r3, [r7, #23]
 800e2f4:	e3c2      	b.n	800ea7c <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	69db      	ldr	r3, [r3, #28]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d032      	beq.n	800e364 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800e2fe:	4b43      	ldr	r3, [pc, #268]	; (800e40c <HAL_RCC_OscConfig+0x274>)
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	4a42      	ldr	r2, [pc, #264]	; (800e40c <HAL_RCC_OscConfig+0x274>)
 800e304:	f043 0301 	orr.w	r3, r3, #1
 800e308:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800e30a:	f7fe ffef 	bl	800d2ec <HAL_GetTick>
 800e30e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800e310:	e008      	b.n	800e324 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800e312:	f7fe ffeb 	bl	800d2ec <HAL_GetTick>
 800e316:	4602      	mov	r2, r0
 800e318:	69bb      	ldr	r3, [r7, #24]
 800e31a:	1ad3      	subs	r3, r2, r3
 800e31c:	2b02      	cmp	r3, #2
 800e31e:	d901      	bls.n	800e324 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 800e320:	2303      	movs	r3, #3
 800e322:	e3ab      	b.n	800ea7c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800e324:	4b39      	ldr	r3, [pc, #228]	; (800e40c <HAL_RCC_OscConfig+0x274>)
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	f003 0302 	and.w	r3, r3, #2
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d0f0      	beq.n	800e312 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e330:	4b36      	ldr	r3, [pc, #216]	; (800e40c <HAL_RCC_OscConfig+0x274>)
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	4a35      	ldr	r2, [pc, #212]	; (800e40c <HAL_RCC_OscConfig+0x274>)
 800e336:	f043 0308 	orr.w	r3, r3, #8
 800e33a:	6013      	str	r3, [r2, #0]
 800e33c:	4b33      	ldr	r3, [pc, #204]	; (800e40c <HAL_RCC_OscConfig+0x274>)
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e348:	4930      	ldr	r1, [pc, #192]	; (800e40c <HAL_RCC_OscConfig+0x274>)
 800e34a:	4313      	orrs	r3, r2
 800e34c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e34e:	4b2f      	ldr	r3, [pc, #188]	; (800e40c <HAL_RCC_OscConfig+0x274>)
 800e350:	685b      	ldr	r3, [r3, #4]
 800e352:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	6a1b      	ldr	r3, [r3, #32]
 800e35a:	021b      	lsls	r3, r3, #8
 800e35c:	492b      	ldr	r1, [pc, #172]	; (800e40c <HAL_RCC_OscConfig+0x274>)
 800e35e:	4313      	orrs	r3, r2
 800e360:	604b      	str	r3, [r1, #4]
 800e362:	e01a      	b.n	800e39a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800e364:	4b29      	ldr	r3, [pc, #164]	; (800e40c <HAL_RCC_OscConfig+0x274>)
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	4a28      	ldr	r2, [pc, #160]	; (800e40c <HAL_RCC_OscConfig+0x274>)
 800e36a:	f023 0301 	bic.w	r3, r3, #1
 800e36e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800e370:	f7fe ffbc 	bl	800d2ec <HAL_GetTick>
 800e374:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800e376:	e008      	b.n	800e38a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800e378:	f7fe ffb8 	bl	800d2ec <HAL_GetTick>
 800e37c:	4602      	mov	r2, r0
 800e37e:	69bb      	ldr	r3, [r7, #24]
 800e380:	1ad3      	subs	r3, r2, r3
 800e382:	2b02      	cmp	r3, #2
 800e384:	d901      	bls.n	800e38a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800e386:	2303      	movs	r3, #3
 800e388:	e378      	b.n	800ea7c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800e38a:	4b20      	ldr	r3, [pc, #128]	; (800e40c <HAL_RCC_OscConfig+0x274>)
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	f003 0302 	and.w	r3, r3, #2
 800e392:	2b00      	cmp	r3, #0
 800e394:	d1f0      	bne.n	800e378 <HAL_RCC_OscConfig+0x1e0>
 800e396:	e000      	b.n	800e39a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800e398:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	f003 0301 	and.w	r3, r3, #1
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d073      	beq.n	800e48e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800e3a6:	6a3b      	ldr	r3, [r7, #32]
 800e3a8:	2b08      	cmp	r3, #8
 800e3aa:	d005      	beq.n	800e3b8 <HAL_RCC_OscConfig+0x220>
 800e3ac:	6a3b      	ldr	r3, [r7, #32]
 800e3ae:	2b0c      	cmp	r3, #12
 800e3b0:	d10e      	bne.n	800e3d0 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800e3b2:	69fb      	ldr	r3, [r7, #28]
 800e3b4:	2b03      	cmp	r3, #3
 800e3b6:	d10b      	bne.n	800e3d0 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e3b8:	4b14      	ldr	r3, [pc, #80]	; (800e40c <HAL_RCC_OscConfig+0x274>)
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d063      	beq.n	800e48c <HAL_RCC_OscConfig+0x2f4>
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	685b      	ldr	r3, [r3, #4]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d15f      	bne.n	800e48c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800e3cc:	2301      	movs	r3, #1
 800e3ce:	e355      	b.n	800ea7c <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	685b      	ldr	r3, [r3, #4]
 800e3d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e3d8:	d106      	bne.n	800e3e8 <HAL_RCC_OscConfig+0x250>
 800e3da:	4b0c      	ldr	r3, [pc, #48]	; (800e40c <HAL_RCC_OscConfig+0x274>)
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	4a0b      	ldr	r2, [pc, #44]	; (800e40c <HAL_RCC_OscConfig+0x274>)
 800e3e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e3e4:	6013      	str	r3, [r2, #0]
 800e3e6:	e025      	b.n	800e434 <HAL_RCC_OscConfig+0x29c>
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	685b      	ldr	r3, [r3, #4]
 800e3ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e3f0:	d114      	bne.n	800e41c <HAL_RCC_OscConfig+0x284>
 800e3f2:	4b06      	ldr	r3, [pc, #24]	; (800e40c <HAL_RCC_OscConfig+0x274>)
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	4a05      	ldr	r2, [pc, #20]	; (800e40c <HAL_RCC_OscConfig+0x274>)
 800e3f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e3fc:	6013      	str	r3, [r2, #0]
 800e3fe:	4b03      	ldr	r3, [pc, #12]	; (800e40c <HAL_RCC_OscConfig+0x274>)
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	4a02      	ldr	r2, [pc, #8]	; (800e40c <HAL_RCC_OscConfig+0x274>)
 800e404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e408:	6013      	str	r3, [r2, #0]
 800e40a:	e013      	b.n	800e434 <HAL_RCC_OscConfig+0x29c>
 800e40c:	40021000 	.word	0x40021000
 800e410:	08024328 	.word	0x08024328
 800e414:	20000094 	.word	0x20000094
 800e418:	20000098 	.word	0x20000098
 800e41c:	4b8f      	ldr	r3, [pc, #572]	; (800e65c <HAL_RCC_OscConfig+0x4c4>)
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	4a8e      	ldr	r2, [pc, #568]	; (800e65c <HAL_RCC_OscConfig+0x4c4>)
 800e422:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e426:	6013      	str	r3, [r2, #0]
 800e428:	4b8c      	ldr	r3, [pc, #560]	; (800e65c <HAL_RCC_OscConfig+0x4c4>)
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	4a8b      	ldr	r2, [pc, #556]	; (800e65c <HAL_RCC_OscConfig+0x4c4>)
 800e42e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e432:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	685b      	ldr	r3, [r3, #4]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d013      	beq.n	800e464 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e43c:	f7fe ff56 	bl	800d2ec <HAL_GetTick>
 800e440:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800e442:	e008      	b.n	800e456 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e444:	f7fe ff52 	bl	800d2ec <HAL_GetTick>
 800e448:	4602      	mov	r2, r0
 800e44a:	69bb      	ldr	r3, [r7, #24]
 800e44c:	1ad3      	subs	r3, r2, r3
 800e44e:	2b64      	cmp	r3, #100	; 0x64
 800e450:	d901      	bls.n	800e456 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800e452:	2303      	movs	r3, #3
 800e454:	e312      	b.n	800ea7c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800e456:	4b81      	ldr	r3, [pc, #516]	; (800e65c <HAL_RCC_OscConfig+0x4c4>)
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d0f0      	beq.n	800e444 <HAL_RCC_OscConfig+0x2ac>
 800e462:	e014      	b.n	800e48e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e464:	f7fe ff42 	bl	800d2ec <HAL_GetTick>
 800e468:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800e46a:	e008      	b.n	800e47e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e46c:	f7fe ff3e 	bl	800d2ec <HAL_GetTick>
 800e470:	4602      	mov	r2, r0
 800e472:	69bb      	ldr	r3, [r7, #24]
 800e474:	1ad3      	subs	r3, r2, r3
 800e476:	2b64      	cmp	r3, #100	; 0x64
 800e478:	d901      	bls.n	800e47e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800e47a:	2303      	movs	r3, #3
 800e47c:	e2fe      	b.n	800ea7c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800e47e:	4b77      	ldr	r3, [pc, #476]	; (800e65c <HAL_RCC_OscConfig+0x4c4>)
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e486:	2b00      	cmp	r3, #0
 800e488:	d1f0      	bne.n	800e46c <HAL_RCC_OscConfig+0x2d4>
 800e48a:	e000      	b.n	800e48e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e48c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	f003 0302 	and.w	r3, r3, #2
 800e496:	2b00      	cmp	r3, #0
 800e498:	d060      	beq.n	800e55c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800e49a:	6a3b      	ldr	r3, [r7, #32]
 800e49c:	2b04      	cmp	r3, #4
 800e49e:	d005      	beq.n	800e4ac <HAL_RCC_OscConfig+0x314>
 800e4a0:	6a3b      	ldr	r3, [r7, #32]
 800e4a2:	2b0c      	cmp	r3, #12
 800e4a4:	d119      	bne.n	800e4da <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800e4a6:	69fb      	ldr	r3, [r7, #28]
 800e4a8:	2b02      	cmp	r3, #2
 800e4aa:	d116      	bne.n	800e4da <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e4ac:	4b6b      	ldr	r3, [pc, #428]	; (800e65c <HAL_RCC_OscConfig+0x4c4>)
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d005      	beq.n	800e4c4 <HAL_RCC_OscConfig+0x32c>
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	68db      	ldr	r3, [r3, #12]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d101      	bne.n	800e4c4 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 800e4c0:	2301      	movs	r3, #1
 800e4c2:	e2db      	b.n	800ea7c <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e4c4:	4b65      	ldr	r3, [pc, #404]	; (800e65c <HAL_RCC_OscConfig+0x4c4>)
 800e4c6:	685b      	ldr	r3, [r3, #4]
 800e4c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	691b      	ldr	r3, [r3, #16]
 800e4d0:	061b      	lsls	r3, r3, #24
 800e4d2:	4962      	ldr	r1, [pc, #392]	; (800e65c <HAL_RCC_OscConfig+0x4c4>)
 800e4d4:	4313      	orrs	r3, r2
 800e4d6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e4d8:	e040      	b.n	800e55c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	68db      	ldr	r3, [r3, #12]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d023      	beq.n	800e52a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e4e2:	4b5e      	ldr	r3, [pc, #376]	; (800e65c <HAL_RCC_OscConfig+0x4c4>)
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	4a5d      	ldr	r2, [pc, #372]	; (800e65c <HAL_RCC_OscConfig+0x4c4>)
 800e4e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e4ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e4ee:	f7fe fefd 	bl	800d2ec <HAL_GetTick>
 800e4f2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800e4f4:	e008      	b.n	800e508 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e4f6:	f7fe fef9 	bl	800d2ec <HAL_GetTick>
 800e4fa:	4602      	mov	r2, r0
 800e4fc:	69bb      	ldr	r3, [r7, #24]
 800e4fe:	1ad3      	subs	r3, r2, r3
 800e500:	2b02      	cmp	r3, #2
 800e502:	d901      	bls.n	800e508 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800e504:	2303      	movs	r3, #3
 800e506:	e2b9      	b.n	800ea7c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800e508:	4b54      	ldr	r3, [pc, #336]	; (800e65c <HAL_RCC_OscConfig+0x4c4>)
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e510:	2b00      	cmp	r3, #0
 800e512:	d0f0      	beq.n	800e4f6 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e514:	4b51      	ldr	r3, [pc, #324]	; (800e65c <HAL_RCC_OscConfig+0x4c4>)
 800e516:	685b      	ldr	r3, [r3, #4]
 800e518:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	691b      	ldr	r3, [r3, #16]
 800e520:	061b      	lsls	r3, r3, #24
 800e522:	494e      	ldr	r1, [pc, #312]	; (800e65c <HAL_RCC_OscConfig+0x4c4>)
 800e524:	4313      	orrs	r3, r2
 800e526:	604b      	str	r3, [r1, #4]
 800e528:	e018      	b.n	800e55c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e52a:	4b4c      	ldr	r3, [pc, #304]	; (800e65c <HAL_RCC_OscConfig+0x4c4>)
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	4a4b      	ldr	r2, [pc, #300]	; (800e65c <HAL_RCC_OscConfig+0x4c4>)
 800e530:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e534:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e536:	f7fe fed9 	bl	800d2ec <HAL_GetTick>
 800e53a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800e53c:	e008      	b.n	800e550 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e53e:	f7fe fed5 	bl	800d2ec <HAL_GetTick>
 800e542:	4602      	mov	r2, r0
 800e544:	69bb      	ldr	r3, [r7, #24]
 800e546:	1ad3      	subs	r3, r2, r3
 800e548:	2b02      	cmp	r3, #2
 800e54a:	d901      	bls.n	800e550 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 800e54c:	2303      	movs	r3, #3
 800e54e:	e295      	b.n	800ea7c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800e550:	4b42      	ldr	r3, [pc, #264]	; (800e65c <HAL_RCC_OscConfig+0x4c4>)
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d1f0      	bne.n	800e53e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	f003 0308 	and.w	r3, r3, #8
 800e564:	2b00      	cmp	r3, #0
 800e566:	f000 8082 	beq.w	800e66e <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	695b      	ldr	r3, [r3, #20]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d05f      	beq.n	800e632 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 800e572:	4b3a      	ldr	r3, [pc, #232]	; (800e65c <HAL_RCC_OscConfig+0x4c4>)
 800e574:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e578:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	699a      	ldr	r2, [r3, #24]
 800e57e:	693b      	ldr	r3, [r7, #16]
 800e580:	f003 0310 	and.w	r3, r3, #16
 800e584:	429a      	cmp	r2, r3
 800e586:	d037      	beq.n	800e5f8 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800e588:	693b      	ldr	r3, [r7, #16]
 800e58a:	f003 0302 	and.w	r3, r3, #2
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d006      	beq.n	800e5a0 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800e592:	693b      	ldr	r3, [r7, #16]
 800e594:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d101      	bne.n	800e5a0 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 800e59c:	2301      	movs	r3, #1
 800e59e:	e26d      	b.n	800ea7c <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800e5a0:	693b      	ldr	r3, [r7, #16]
 800e5a2:	f003 0301 	and.w	r3, r3, #1
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d01b      	beq.n	800e5e2 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 800e5aa:	4b2c      	ldr	r3, [pc, #176]	; (800e65c <HAL_RCC_OscConfig+0x4c4>)
 800e5ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e5b0:	4a2a      	ldr	r2, [pc, #168]	; (800e65c <HAL_RCC_OscConfig+0x4c4>)
 800e5b2:	f023 0301 	bic.w	r3, r3, #1
 800e5b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800e5ba:	f7fe fe97 	bl	800d2ec <HAL_GetTick>
 800e5be:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800e5c0:	e008      	b.n	800e5d4 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e5c2:	f7fe fe93 	bl	800d2ec <HAL_GetTick>
 800e5c6:	4602      	mov	r2, r0
 800e5c8:	69bb      	ldr	r3, [r7, #24]
 800e5ca:	1ad3      	subs	r3, r2, r3
 800e5cc:	2b11      	cmp	r3, #17
 800e5ce:	d901      	bls.n	800e5d4 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 800e5d0:	2303      	movs	r3, #3
 800e5d2:	e253      	b.n	800ea7c <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800e5d4:	4b21      	ldr	r3, [pc, #132]	; (800e65c <HAL_RCC_OscConfig+0x4c4>)
 800e5d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e5da:	f003 0302 	and.w	r3, r3, #2
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d1ef      	bne.n	800e5c2 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800e5e2:	4b1e      	ldr	r3, [pc, #120]	; (800e65c <HAL_RCC_OscConfig+0x4c4>)
 800e5e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e5e8:	f023 0210 	bic.w	r2, r3, #16
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	699b      	ldr	r3, [r3, #24]
 800e5f0:	491a      	ldr	r1, [pc, #104]	; (800e65c <HAL_RCC_OscConfig+0x4c4>)
 800e5f2:	4313      	orrs	r3, r2
 800e5f4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e5f8:	4b18      	ldr	r3, [pc, #96]	; (800e65c <HAL_RCC_OscConfig+0x4c4>)
 800e5fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e5fe:	4a17      	ldr	r2, [pc, #92]	; (800e65c <HAL_RCC_OscConfig+0x4c4>)
 800e600:	f043 0301 	orr.w	r3, r3, #1
 800e604:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e608:	f7fe fe70 	bl	800d2ec <HAL_GetTick>
 800e60c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800e60e:	e008      	b.n	800e622 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e610:	f7fe fe6c 	bl	800d2ec <HAL_GetTick>
 800e614:	4602      	mov	r2, r0
 800e616:	69bb      	ldr	r3, [r7, #24]
 800e618:	1ad3      	subs	r3, r2, r3
 800e61a:	2b11      	cmp	r3, #17
 800e61c:	d901      	bls.n	800e622 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800e61e:	2303      	movs	r3, #3
 800e620:	e22c      	b.n	800ea7c <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800e622:	4b0e      	ldr	r3, [pc, #56]	; (800e65c <HAL_RCC_OscConfig+0x4c4>)
 800e624:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e628:	f003 0302 	and.w	r3, r3, #2
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d0ef      	beq.n	800e610 <HAL_RCC_OscConfig+0x478>
 800e630:	e01d      	b.n	800e66e <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e632:	4b0a      	ldr	r3, [pc, #40]	; (800e65c <HAL_RCC_OscConfig+0x4c4>)
 800e634:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e638:	4a08      	ldr	r2, [pc, #32]	; (800e65c <HAL_RCC_OscConfig+0x4c4>)
 800e63a:	f023 0301 	bic.w	r3, r3, #1
 800e63e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e642:	f7fe fe53 	bl	800d2ec <HAL_GetTick>
 800e646:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800e648:	e00a      	b.n	800e660 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e64a:	f7fe fe4f 	bl	800d2ec <HAL_GetTick>
 800e64e:	4602      	mov	r2, r0
 800e650:	69bb      	ldr	r3, [r7, #24]
 800e652:	1ad3      	subs	r3, r2, r3
 800e654:	2b11      	cmp	r3, #17
 800e656:	d903      	bls.n	800e660 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 800e658:	2303      	movs	r3, #3
 800e65a:	e20f      	b.n	800ea7c <HAL_RCC_OscConfig+0x8e4>
 800e65c:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800e660:	4b83      	ldr	r3, [pc, #524]	; (800e870 <HAL_RCC_OscConfig+0x6d8>)
 800e662:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e666:	f003 0302 	and.w	r3, r3, #2
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d1ed      	bne.n	800e64a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	f003 0304 	and.w	r3, r3, #4
 800e676:	2b00      	cmp	r3, #0
 800e678:	f000 80bd 	beq.w	800e7f6 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e67c:	2300      	movs	r3, #0
 800e67e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800e682:	4b7b      	ldr	r3, [pc, #492]	; (800e870 <HAL_RCC_OscConfig+0x6d8>)
 800e684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d10e      	bne.n	800e6ac <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e68e:	4b78      	ldr	r3, [pc, #480]	; (800e870 <HAL_RCC_OscConfig+0x6d8>)
 800e690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e692:	4a77      	ldr	r2, [pc, #476]	; (800e870 <HAL_RCC_OscConfig+0x6d8>)
 800e694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e698:	6593      	str	r3, [r2, #88]	; 0x58
 800e69a:	4b75      	ldr	r3, [pc, #468]	; (800e870 <HAL_RCC_OscConfig+0x6d8>)
 800e69c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e69e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e6a2:	60fb      	str	r3, [r7, #12]
 800e6a4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800e6a6:	2301      	movs	r3, #1
 800e6a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e6ac:	4b71      	ldr	r3, [pc, #452]	; (800e874 <HAL_RCC_OscConfig+0x6dc>)
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d118      	bne.n	800e6ea <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e6b8:	4b6e      	ldr	r3, [pc, #440]	; (800e874 <HAL_RCC_OscConfig+0x6dc>)
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	4a6d      	ldr	r2, [pc, #436]	; (800e874 <HAL_RCC_OscConfig+0x6dc>)
 800e6be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e6c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e6c4:	f7fe fe12 	bl	800d2ec <HAL_GetTick>
 800e6c8:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e6ca:	e008      	b.n	800e6de <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e6cc:	f7fe fe0e 	bl	800d2ec <HAL_GetTick>
 800e6d0:	4602      	mov	r2, r0
 800e6d2:	69bb      	ldr	r3, [r7, #24]
 800e6d4:	1ad3      	subs	r3, r2, r3
 800e6d6:	2b02      	cmp	r3, #2
 800e6d8:	d901      	bls.n	800e6de <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 800e6da:	2303      	movs	r3, #3
 800e6dc:	e1ce      	b.n	800ea7c <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e6de:	4b65      	ldr	r3, [pc, #404]	; (800e874 <HAL_RCC_OscConfig+0x6dc>)
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d0f0      	beq.n	800e6cc <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	689b      	ldr	r3, [r3, #8]
 800e6ee:	f003 0301 	and.w	r3, r3, #1
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d02c      	beq.n	800e750 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800e6f6:	4b5e      	ldr	r3, [pc, #376]	; (800e870 <HAL_RCC_OscConfig+0x6d8>)
 800e6f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e6fc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	689b      	ldr	r3, [r3, #8]
 800e704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e708:	4959      	ldr	r1, [pc, #356]	; (800e870 <HAL_RCC_OscConfig+0x6d8>)
 800e70a:	4313      	orrs	r3, r2
 800e70c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	689b      	ldr	r3, [r3, #8]
 800e714:	f003 0304 	and.w	r3, r3, #4
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d010      	beq.n	800e73e <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800e71c:	4b54      	ldr	r3, [pc, #336]	; (800e870 <HAL_RCC_OscConfig+0x6d8>)
 800e71e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e722:	4a53      	ldr	r2, [pc, #332]	; (800e870 <HAL_RCC_OscConfig+0x6d8>)
 800e724:	f043 0304 	orr.w	r3, r3, #4
 800e728:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800e72c:	4b50      	ldr	r3, [pc, #320]	; (800e870 <HAL_RCC_OscConfig+0x6d8>)
 800e72e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e732:	4a4f      	ldr	r2, [pc, #316]	; (800e870 <HAL_RCC_OscConfig+0x6d8>)
 800e734:	f043 0301 	orr.w	r3, r3, #1
 800e738:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800e73c:	e018      	b.n	800e770 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800e73e:	4b4c      	ldr	r3, [pc, #304]	; (800e870 <HAL_RCC_OscConfig+0x6d8>)
 800e740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e744:	4a4a      	ldr	r2, [pc, #296]	; (800e870 <HAL_RCC_OscConfig+0x6d8>)
 800e746:	f043 0301 	orr.w	r3, r3, #1
 800e74a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800e74e:	e00f      	b.n	800e770 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800e750:	4b47      	ldr	r3, [pc, #284]	; (800e870 <HAL_RCC_OscConfig+0x6d8>)
 800e752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e756:	4a46      	ldr	r2, [pc, #280]	; (800e870 <HAL_RCC_OscConfig+0x6d8>)
 800e758:	f023 0301 	bic.w	r3, r3, #1
 800e75c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800e760:	4b43      	ldr	r3, [pc, #268]	; (800e870 <HAL_RCC_OscConfig+0x6d8>)
 800e762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e766:	4a42      	ldr	r2, [pc, #264]	; (800e870 <HAL_RCC_OscConfig+0x6d8>)
 800e768:	f023 0304 	bic.w	r3, r3, #4
 800e76c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	689b      	ldr	r3, [r3, #8]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d016      	beq.n	800e7a6 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e778:	f7fe fdb8 	bl	800d2ec <HAL_GetTick>
 800e77c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e77e:	e00a      	b.n	800e796 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e780:	f7fe fdb4 	bl	800d2ec <HAL_GetTick>
 800e784:	4602      	mov	r2, r0
 800e786:	69bb      	ldr	r3, [r7, #24]
 800e788:	1ad3      	subs	r3, r2, r3
 800e78a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e78e:	4293      	cmp	r3, r2
 800e790:	d901      	bls.n	800e796 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 800e792:	2303      	movs	r3, #3
 800e794:	e172      	b.n	800ea7c <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e796:	4b36      	ldr	r3, [pc, #216]	; (800e870 <HAL_RCC_OscConfig+0x6d8>)
 800e798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e79c:	f003 0302 	and.w	r3, r3, #2
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d0ed      	beq.n	800e780 <HAL_RCC_OscConfig+0x5e8>
 800e7a4:	e01d      	b.n	800e7e2 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e7a6:	f7fe fda1 	bl	800d2ec <HAL_GetTick>
 800e7aa:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800e7ac:	e00a      	b.n	800e7c4 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e7ae:	f7fe fd9d 	bl	800d2ec <HAL_GetTick>
 800e7b2:	4602      	mov	r2, r0
 800e7b4:	69bb      	ldr	r3, [r7, #24]
 800e7b6:	1ad3      	subs	r3, r2, r3
 800e7b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800e7bc:	4293      	cmp	r3, r2
 800e7be:	d901      	bls.n	800e7c4 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 800e7c0:	2303      	movs	r3, #3
 800e7c2:	e15b      	b.n	800ea7c <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800e7c4:	4b2a      	ldr	r3, [pc, #168]	; (800e870 <HAL_RCC_OscConfig+0x6d8>)
 800e7c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e7ca:	f003 0302 	and.w	r3, r3, #2
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d1ed      	bne.n	800e7ae <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800e7d2:	4b27      	ldr	r3, [pc, #156]	; (800e870 <HAL_RCC_OscConfig+0x6d8>)
 800e7d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e7d8:	4a25      	ldr	r2, [pc, #148]	; (800e870 <HAL_RCC_OscConfig+0x6d8>)
 800e7da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e7de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800e7e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e7e6:	2b01      	cmp	r3, #1
 800e7e8:	d105      	bne.n	800e7f6 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e7ea:	4b21      	ldr	r3, [pc, #132]	; (800e870 <HAL_RCC_OscConfig+0x6d8>)
 800e7ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e7ee:	4a20      	ldr	r2, [pc, #128]	; (800e870 <HAL_RCC_OscConfig+0x6d8>)
 800e7f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e7f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	f003 0320 	and.w	r3, r3, #32
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d041      	beq.n	800e886 <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e806:	2b00      	cmp	r3, #0
 800e808:	d01c      	beq.n	800e844 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800e80a:	4b19      	ldr	r3, [pc, #100]	; (800e870 <HAL_RCC_OscConfig+0x6d8>)
 800e80c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e810:	4a17      	ldr	r2, [pc, #92]	; (800e870 <HAL_RCC_OscConfig+0x6d8>)
 800e812:	f043 0301 	orr.w	r3, r3, #1
 800e816:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e81a:	f7fe fd67 	bl	800d2ec <HAL_GetTick>
 800e81e:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800e820:	e008      	b.n	800e834 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e822:	f7fe fd63 	bl	800d2ec <HAL_GetTick>
 800e826:	4602      	mov	r2, r0
 800e828:	69bb      	ldr	r3, [r7, #24]
 800e82a:	1ad3      	subs	r3, r2, r3
 800e82c:	2b02      	cmp	r3, #2
 800e82e:	d901      	bls.n	800e834 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 800e830:	2303      	movs	r3, #3
 800e832:	e123      	b.n	800ea7c <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800e834:	4b0e      	ldr	r3, [pc, #56]	; (800e870 <HAL_RCC_OscConfig+0x6d8>)
 800e836:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e83a:	f003 0302 	and.w	r3, r3, #2
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d0ef      	beq.n	800e822 <HAL_RCC_OscConfig+0x68a>
 800e842:	e020      	b.n	800e886 <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800e844:	4b0a      	ldr	r3, [pc, #40]	; (800e870 <HAL_RCC_OscConfig+0x6d8>)
 800e846:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e84a:	4a09      	ldr	r2, [pc, #36]	; (800e870 <HAL_RCC_OscConfig+0x6d8>)
 800e84c:	f023 0301 	bic.w	r3, r3, #1
 800e850:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e854:	f7fe fd4a 	bl	800d2ec <HAL_GetTick>
 800e858:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800e85a:	e00d      	b.n	800e878 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e85c:	f7fe fd46 	bl	800d2ec <HAL_GetTick>
 800e860:	4602      	mov	r2, r0
 800e862:	69bb      	ldr	r3, [r7, #24]
 800e864:	1ad3      	subs	r3, r2, r3
 800e866:	2b02      	cmp	r3, #2
 800e868:	d906      	bls.n	800e878 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 800e86a:	2303      	movs	r3, #3
 800e86c:	e106      	b.n	800ea7c <HAL_RCC_OscConfig+0x8e4>
 800e86e:	bf00      	nop
 800e870:	40021000 	.word	0x40021000
 800e874:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800e878:	4b82      	ldr	r3, [pc, #520]	; (800ea84 <HAL_RCC_OscConfig+0x8ec>)
 800e87a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e87e:	f003 0302 	and.w	r3, r3, #2
 800e882:	2b00      	cmp	r3, #0
 800e884:	d1ea      	bne.n	800e85c <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	f000 80f5 	beq.w	800ea7a <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e894:	2b02      	cmp	r3, #2
 800e896:	f040 80cb 	bne.w	800ea30 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800e89a:	4b7a      	ldr	r3, [pc, #488]	; (800ea84 <HAL_RCC_OscConfig+0x8ec>)
 800e89c:	68db      	ldr	r3, [r3, #12]
 800e89e:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800e8a0:	69fb      	ldr	r3, [r7, #28]
 800e8a2:	f003 0203 	and.w	r2, r3, #3
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8aa:	429a      	cmp	r2, r3
 800e8ac:	d12c      	bne.n	800e908 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800e8ae:	69fb      	ldr	r3, [r7, #28]
 800e8b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8b8:	3b01      	subs	r3, #1
 800e8ba:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800e8bc:	429a      	cmp	r2, r3
 800e8be:	d123      	bne.n	800e908 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800e8c0:	69fb      	ldr	r3, [r7, #28]
 800e8c2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8ca:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800e8cc:	429a      	cmp	r2, r3
 800e8ce:	d11b      	bne.n	800e908 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800e8d0:	69fb      	ldr	r3, [r7, #28]
 800e8d2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8da:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800e8dc:	429a      	cmp	r2, r3
 800e8de:	d113      	bne.n	800e908 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800e8e0:	69fb      	ldr	r3, [r7, #28]
 800e8e2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8ea:	085b      	lsrs	r3, r3, #1
 800e8ec:	3b01      	subs	r3, #1
 800e8ee:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800e8f0:	429a      	cmp	r2, r3
 800e8f2:	d109      	bne.n	800e908 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800e8f4:	69fb      	ldr	r3, [r7, #28]
 800e8f6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8fe:	085b      	lsrs	r3, r3, #1
 800e900:	3b01      	subs	r3, #1
 800e902:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800e904:	429a      	cmp	r2, r3
 800e906:	d06d      	beq.n	800e9e4 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800e908:	6a3b      	ldr	r3, [r7, #32]
 800e90a:	2b0c      	cmp	r3, #12
 800e90c:	d068      	beq.n	800e9e0 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800e90e:	4b5d      	ldr	r3, [pc, #372]	; (800ea84 <HAL_RCC_OscConfig+0x8ec>)
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e916:	2b00      	cmp	r3, #0
 800e918:	d105      	bne.n	800e926 <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800e91a:	4b5a      	ldr	r3, [pc, #360]	; (800ea84 <HAL_RCC_OscConfig+0x8ec>)
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e922:	2b00      	cmp	r3, #0
 800e924:	d001      	beq.n	800e92a <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 800e926:	2301      	movs	r3, #1
 800e928:	e0a8      	b.n	800ea7c <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800e92a:	4b56      	ldr	r3, [pc, #344]	; (800ea84 <HAL_RCC_OscConfig+0x8ec>)
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	4a55      	ldr	r2, [pc, #340]	; (800ea84 <HAL_RCC_OscConfig+0x8ec>)
 800e930:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e934:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800e936:	f7fe fcd9 	bl	800d2ec <HAL_GetTick>
 800e93a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e93c:	e008      	b.n	800e950 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e93e:	f7fe fcd5 	bl	800d2ec <HAL_GetTick>
 800e942:	4602      	mov	r2, r0
 800e944:	69bb      	ldr	r3, [r7, #24]
 800e946:	1ad3      	subs	r3, r2, r3
 800e948:	2b02      	cmp	r3, #2
 800e94a:	d901      	bls.n	800e950 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 800e94c:	2303      	movs	r3, #3
 800e94e:	e095      	b.n	800ea7c <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e950:	4b4c      	ldr	r3, [pc, #304]	; (800ea84 <HAL_RCC_OscConfig+0x8ec>)
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d1f0      	bne.n	800e93e <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e95c:	4b49      	ldr	r3, [pc, #292]	; (800ea84 <HAL_RCC_OscConfig+0x8ec>)
 800e95e:	68da      	ldr	r2, [r3, #12]
 800e960:	4b49      	ldr	r3, [pc, #292]	; (800ea88 <HAL_RCC_OscConfig+0x8f0>)
 800e962:	4013      	ands	r3, r2
 800e964:	687a      	ldr	r2, [r7, #4]
 800e966:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800e968:	687a      	ldr	r2, [r7, #4]
 800e96a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e96c:	3a01      	subs	r2, #1
 800e96e:	0112      	lsls	r2, r2, #4
 800e970:	4311      	orrs	r1, r2
 800e972:	687a      	ldr	r2, [r7, #4]
 800e974:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e976:	0212      	lsls	r2, r2, #8
 800e978:	4311      	orrs	r1, r2
 800e97a:	687a      	ldr	r2, [r7, #4]
 800e97c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800e97e:	0852      	lsrs	r2, r2, #1
 800e980:	3a01      	subs	r2, #1
 800e982:	0552      	lsls	r2, r2, #21
 800e984:	4311      	orrs	r1, r2
 800e986:	687a      	ldr	r2, [r7, #4]
 800e988:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800e98a:	0852      	lsrs	r2, r2, #1
 800e98c:	3a01      	subs	r2, #1
 800e98e:	0652      	lsls	r2, r2, #25
 800e990:	4311      	orrs	r1, r2
 800e992:	687a      	ldr	r2, [r7, #4]
 800e994:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800e996:	06d2      	lsls	r2, r2, #27
 800e998:	430a      	orrs	r2, r1
 800e99a:	493a      	ldr	r1, [pc, #232]	; (800ea84 <HAL_RCC_OscConfig+0x8ec>)
 800e99c:	4313      	orrs	r3, r2
 800e99e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800e9a0:	4b38      	ldr	r3, [pc, #224]	; (800ea84 <HAL_RCC_OscConfig+0x8ec>)
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	4a37      	ldr	r2, [pc, #220]	; (800ea84 <HAL_RCC_OscConfig+0x8ec>)
 800e9a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e9aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800e9ac:	4b35      	ldr	r3, [pc, #212]	; (800ea84 <HAL_RCC_OscConfig+0x8ec>)
 800e9ae:	68db      	ldr	r3, [r3, #12]
 800e9b0:	4a34      	ldr	r2, [pc, #208]	; (800ea84 <HAL_RCC_OscConfig+0x8ec>)
 800e9b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e9b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800e9b8:	f7fe fc98 	bl	800d2ec <HAL_GetTick>
 800e9bc:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e9be:	e008      	b.n	800e9d2 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e9c0:	f7fe fc94 	bl	800d2ec <HAL_GetTick>
 800e9c4:	4602      	mov	r2, r0
 800e9c6:	69bb      	ldr	r3, [r7, #24]
 800e9c8:	1ad3      	subs	r3, r2, r3
 800e9ca:	2b02      	cmp	r3, #2
 800e9cc:	d901      	bls.n	800e9d2 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 800e9ce:	2303      	movs	r3, #3
 800e9d0:	e054      	b.n	800ea7c <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e9d2:	4b2c      	ldr	r3, [pc, #176]	; (800ea84 <HAL_RCC_OscConfig+0x8ec>)
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d0f0      	beq.n	800e9c0 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800e9de:	e04c      	b.n	800ea7a <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800e9e0:	2301      	movs	r3, #1
 800e9e2:	e04b      	b.n	800ea7c <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e9e4:	4b27      	ldr	r3, [pc, #156]	; (800ea84 <HAL_RCC_OscConfig+0x8ec>)
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d144      	bne.n	800ea7a <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800e9f0:	4b24      	ldr	r3, [pc, #144]	; (800ea84 <HAL_RCC_OscConfig+0x8ec>)
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	4a23      	ldr	r2, [pc, #140]	; (800ea84 <HAL_RCC_OscConfig+0x8ec>)
 800e9f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e9fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800e9fc:	4b21      	ldr	r3, [pc, #132]	; (800ea84 <HAL_RCC_OscConfig+0x8ec>)
 800e9fe:	68db      	ldr	r3, [r3, #12]
 800ea00:	4a20      	ldr	r2, [pc, #128]	; (800ea84 <HAL_RCC_OscConfig+0x8ec>)
 800ea02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ea06:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ea08:	f7fe fc70 	bl	800d2ec <HAL_GetTick>
 800ea0c:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ea0e:	e008      	b.n	800ea22 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ea10:	f7fe fc6c 	bl	800d2ec <HAL_GetTick>
 800ea14:	4602      	mov	r2, r0
 800ea16:	69bb      	ldr	r3, [r7, #24]
 800ea18:	1ad3      	subs	r3, r2, r3
 800ea1a:	2b02      	cmp	r3, #2
 800ea1c:	d901      	bls.n	800ea22 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 800ea1e:	2303      	movs	r3, #3
 800ea20:	e02c      	b.n	800ea7c <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ea22:	4b18      	ldr	r3, [pc, #96]	; (800ea84 <HAL_RCC_OscConfig+0x8ec>)
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d0f0      	beq.n	800ea10 <HAL_RCC_OscConfig+0x878>
 800ea2e:	e024      	b.n	800ea7a <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800ea30:	6a3b      	ldr	r3, [r7, #32]
 800ea32:	2b0c      	cmp	r3, #12
 800ea34:	d01f      	beq.n	800ea76 <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ea36:	4b13      	ldr	r3, [pc, #76]	; (800ea84 <HAL_RCC_OscConfig+0x8ec>)
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	4a12      	ldr	r2, [pc, #72]	; (800ea84 <HAL_RCC_OscConfig+0x8ec>)
 800ea3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ea40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ea42:	f7fe fc53 	bl	800d2ec <HAL_GetTick>
 800ea46:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ea48:	e008      	b.n	800ea5c <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ea4a:	f7fe fc4f 	bl	800d2ec <HAL_GetTick>
 800ea4e:	4602      	mov	r2, r0
 800ea50:	69bb      	ldr	r3, [r7, #24]
 800ea52:	1ad3      	subs	r3, r2, r3
 800ea54:	2b02      	cmp	r3, #2
 800ea56:	d901      	bls.n	800ea5c <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 800ea58:	2303      	movs	r3, #3
 800ea5a:	e00f      	b.n	800ea7c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ea5c:	4b09      	ldr	r3, [pc, #36]	; (800ea84 <HAL_RCC_OscConfig+0x8ec>)
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d1f0      	bne.n	800ea4a <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800ea68:	4b06      	ldr	r3, [pc, #24]	; (800ea84 <HAL_RCC_OscConfig+0x8ec>)
 800ea6a:	68da      	ldr	r2, [r3, #12]
 800ea6c:	4905      	ldr	r1, [pc, #20]	; (800ea84 <HAL_RCC_OscConfig+0x8ec>)
 800ea6e:	4b07      	ldr	r3, [pc, #28]	; (800ea8c <HAL_RCC_OscConfig+0x8f4>)
 800ea70:	4013      	ands	r3, r2
 800ea72:	60cb      	str	r3, [r1, #12]
 800ea74:	e001      	b.n	800ea7a <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800ea76:	2301      	movs	r3, #1
 800ea78:	e000      	b.n	800ea7c <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 800ea7a:	2300      	movs	r3, #0
}
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	3728      	adds	r7, #40	; 0x28
 800ea80:	46bd      	mov	sp, r7
 800ea82:	bd80      	pop	{r7, pc}
 800ea84:	40021000 	.word	0x40021000
 800ea88:	019d800c 	.word	0x019d800c
 800ea8c:	feeefffc 	.word	0xfeeefffc

0800ea90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b086      	sub	sp, #24
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	6078      	str	r0, [r7, #4]
 800ea98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d101      	bne.n	800eaa8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800eaa4:	2301      	movs	r3, #1
 800eaa6:	e11d      	b.n	800ece4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800eaa8:	4b90      	ldr	r3, [pc, #576]	; (800ecec <HAL_RCC_ClockConfig+0x25c>)
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	f003 030f 	and.w	r3, r3, #15
 800eab0:	683a      	ldr	r2, [r7, #0]
 800eab2:	429a      	cmp	r2, r3
 800eab4:	d910      	bls.n	800ead8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800eab6:	4b8d      	ldr	r3, [pc, #564]	; (800ecec <HAL_RCC_ClockConfig+0x25c>)
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	f023 020f 	bic.w	r2, r3, #15
 800eabe:	498b      	ldr	r1, [pc, #556]	; (800ecec <HAL_RCC_ClockConfig+0x25c>)
 800eac0:	683b      	ldr	r3, [r7, #0]
 800eac2:	4313      	orrs	r3, r2
 800eac4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800eac6:	4b89      	ldr	r3, [pc, #548]	; (800ecec <HAL_RCC_ClockConfig+0x25c>)
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	f003 030f 	and.w	r3, r3, #15
 800eace:	683a      	ldr	r2, [r7, #0]
 800ead0:	429a      	cmp	r2, r3
 800ead2:	d001      	beq.n	800ead8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800ead4:	2301      	movs	r3, #1
 800ead6:	e105      	b.n	800ece4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	f003 0302 	and.w	r3, r3, #2
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d010      	beq.n	800eb06 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	689a      	ldr	r2, [r3, #8]
 800eae8:	4b81      	ldr	r3, [pc, #516]	; (800ecf0 <HAL_RCC_ClockConfig+0x260>)
 800eaea:	689b      	ldr	r3, [r3, #8]
 800eaec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800eaf0:	429a      	cmp	r2, r3
 800eaf2:	d908      	bls.n	800eb06 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800eaf4:	4b7e      	ldr	r3, [pc, #504]	; (800ecf0 <HAL_RCC_ClockConfig+0x260>)
 800eaf6:	689b      	ldr	r3, [r3, #8]
 800eaf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	689b      	ldr	r3, [r3, #8]
 800eb00:	497b      	ldr	r1, [pc, #492]	; (800ecf0 <HAL_RCC_ClockConfig+0x260>)
 800eb02:	4313      	orrs	r3, r2
 800eb04:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	f003 0301 	and.w	r3, r3, #1
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d079      	beq.n	800ec06 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	685b      	ldr	r3, [r3, #4]
 800eb16:	2b03      	cmp	r3, #3
 800eb18:	d11e      	bne.n	800eb58 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800eb1a:	4b75      	ldr	r3, [pc, #468]	; (800ecf0 <HAL_RCC_ClockConfig+0x260>)
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d101      	bne.n	800eb2a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800eb26:	2301      	movs	r3, #1
 800eb28:	e0dc      	b.n	800ece4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800eb2a:	f000 fa3b 	bl	800efa4 <RCC_GetSysClockFreqFromPLLSource>
 800eb2e:	4603      	mov	r3, r0
 800eb30:	4a70      	ldr	r2, [pc, #448]	; (800ecf4 <HAL_RCC_ClockConfig+0x264>)
 800eb32:	4293      	cmp	r3, r2
 800eb34:	d946      	bls.n	800ebc4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800eb36:	4b6e      	ldr	r3, [pc, #440]	; (800ecf0 <HAL_RCC_ClockConfig+0x260>)
 800eb38:	689b      	ldr	r3, [r3, #8]
 800eb3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d140      	bne.n	800ebc4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800eb42:	4b6b      	ldr	r3, [pc, #428]	; (800ecf0 <HAL_RCC_ClockConfig+0x260>)
 800eb44:	689b      	ldr	r3, [r3, #8]
 800eb46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800eb4a:	4a69      	ldr	r2, [pc, #420]	; (800ecf0 <HAL_RCC_ClockConfig+0x260>)
 800eb4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb50:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800eb52:	2380      	movs	r3, #128	; 0x80
 800eb54:	617b      	str	r3, [r7, #20]
 800eb56:	e035      	b.n	800ebc4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	685b      	ldr	r3, [r3, #4]
 800eb5c:	2b02      	cmp	r3, #2
 800eb5e:	d107      	bne.n	800eb70 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800eb60:	4b63      	ldr	r3, [pc, #396]	; (800ecf0 <HAL_RCC_ClockConfig+0x260>)
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d115      	bne.n	800eb98 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800eb6c:	2301      	movs	r3, #1
 800eb6e:	e0b9      	b.n	800ece4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	685b      	ldr	r3, [r3, #4]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d107      	bne.n	800eb88 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800eb78:	4b5d      	ldr	r3, [pc, #372]	; (800ecf0 <HAL_RCC_ClockConfig+0x260>)
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	f003 0302 	and.w	r3, r3, #2
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d109      	bne.n	800eb98 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800eb84:	2301      	movs	r3, #1
 800eb86:	e0ad      	b.n	800ece4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800eb88:	4b59      	ldr	r3, [pc, #356]	; (800ecf0 <HAL_RCC_ClockConfig+0x260>)
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d101      	bne.n	800eb98 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800eb94:	2301      	movs	r3, #1
 800eb96:	e0a5      	b.n	800ece4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800eb98:	f000 f8b4 	bl	800ed04 <HAL_RCC_GetSysClockFreq>
 800eb9c:	4603      	mov	r3, r0
 800eb9e:	4a55      	ldr	r2, [pc, #340]	; (800ecf4 <HAL_RCC_ClockConfig+0x264>)
 800eba0:	4293      	cmp	r3, r2
 800eba2:	d90f      	bls.n	800ebc4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800eba4:	4b52      	ldr	r3, [pc, #328]	; (800ecf0 <HAL_RCC_ClockConfig+0x260>)
 800eba6:	689b      	ldr	r3, [r3, #8]
 800eba8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d109      	bne.n	800ebc4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800ebb0:	4b4f      	ldr	r3, [pc, #316]	; (800ecf0 <HAL_RCC_ClockConfig+0x260>)
 800ebb2:	689b      	ldr	r3, [r3, #8]
 800ebb4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ebb8:	4a4d      	ldr	r2, [pc, #308]	; (800ecf0 <HAL_RCC_ClockConfig+0x260>)
 800ebba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ebbe:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800ebc0:	2380      	movs	r3, #128	; 0x80
 800ebc2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ebc4:	4b4a      	ldr	r3, [pc, #296]	; (800ecf0 <HAL_RCC_ClockConfig+0x260>)
 800ebc6:	689b      	ldr	r3, [r3, #8]
 800ebc8:	f023 0203 	bic.w	r2, r3, #3
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	685b      	ldr	r3, [r3, #4]
 800ebd0:	4947      	ldr	r1, [pc, #284]	; (800ecf0 <HAL_RCC_ClockConfig+0x260>)
 800ebd2:	4313      	orrs	r3, r2
 800ebd4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ebd6:	f7fe fb89 	bl	800d2ec <HAL_GetTick>
 800ebda:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ebdc:	e00a      	b.n	800ebf4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ebde:	f7fe fb85 	bl	800d2ec <HAL_GetTick>
 800ebe2:	4602      	mov	r2, r0
 800ebe4:	693b      	ldr	r3, [r7, #16]
 800ebe6:	1ad3      	subs	r3, r2, r3
 800ebe8:	f241 3288 	movw	r2, #5000	; 0x1388
 800ebec:	4293      	cmp	r3, r2
 800ebee:	d901      	bls.n	800ebf4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800ebf0:	2303      	movs	r3, #3
 800ebf2:	e077      	b.n	800ece4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ebf4:	4b3e      	ldr	r3, [pc, #248]	; (800ecf0 <HAL_RCC_ClockConfig+0x260>)
 800ebf6:	689b      	ldr	r3, [r3, #8]
 800ebf8:	f003 020c 	and.w	r2, r3, #12
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	685b      	ldr	r3, [r3, #4]
 800ec00:	009b      	lsls	r3, r3, #2
 800ec02:	429a      	cmp	r2, r3
 800ec04:	d1eb      	bne.n	800ebde <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800ec06:	697b      	ldr	r3, [r7, #20]
 800ec08:	2b80      	cmp	r3, #128	; 0x80
 800ec0a:	d105      	bne.n	800ec18 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800ec0c:	4b38      	ldr	r3, [pc, #224]	; (800ecf0 <HAL_RCC_ClockConfig+0x260>)
 800ec0e:	689b      	ldr	r3, [r3, #8]
 800ec10:	4a37      	ldr	r2, [pc, #220]	; (800ecf0 <HAL_RCC_ClockConfig+0x260>)
 800ec12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ec16:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	f003 0302 	and.w	r3, r3, #2
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d010      	beq.n	800ec46 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	689a      	ldr	r2, [r3, #8]
 800ec28:	4b31      	ldr	r3, [pc, #196]	; (800ecf0 <HAL_RCC_ClockConfig+0x260>)
 800ec2a:	689b      	ldr	r3, [r3, #8]
 800ec2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ec30:	429a      	cmp	r2, r3
 800ec32:	d208      	bcs.n	800ec46 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ec34:	4b2e      	ldr	r3, [pc, #184]	; (800ecf0 <HAL_RCC_ClockConfig+0x260>)
 800ec36:	689b      	ldr	r3, [r3, #8]
 800ec38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	689b      	ldr	r3, [r3, #8]
 800ec40:	492b      	ldr	r1, [pc, #172]	; (800ecf0 <HAL_RCC_ClockConfig+0x260>)
 800ec42:	4313      	orrs	r3, r2
 800ec44:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ec46:	4b29      	ldr	r3, [pc, #164]	; (800ecec <HAL_RCC_ClockConfig+0x25c>)
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	f003 030f 	and.w	r3, r3, #15
 800ec4e:	683a      	ldr	r2, [r7, #0]
 800ec50:	429a      	cmp	r2, r3
 800ec52:	d210      	bcs.n	800ec76 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ec54:	4b25      	ldr	r3, [pc, #148]	; (800ecec <HAL_RCC_ClockConfig+0x25c>)
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	f023 020f 	bic.w	r2, r3, #15
 800ec5c:	4923      	ldr	r1, [pc, #140]	; (800ecec <HAL_RCC_ClockConfig+0x25c>)
 800ec5e:	683b      	ldr	r3, [r7, #0]
 800ec60:	4313      	orrs	r3, r2
 800ec62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ec64:	4b21      	ldr	r3, [pc, #132]	; (800ecec <HAL_RCC_ClockConfig+0x25c>)
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	f003 030f 	and.w	r3, r3, #15
 800ec6c:	683a      	ldr	r2, [r7, #0]
 800ec6e:	429a      	cmp	r2, r3
 800ec70:	d001      	beq.n	800ec76 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800ec72:	2301      	movs	r3, #1
 800ec74:	e036      	b.n	800ece4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	f003 0304 	and.w	r3, r3, #4
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d008      	beq.n	800ec94 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ec82:	4b1b      	ldr	r3, [pc, #108]	; (800ecf0 <HAL_RCC_ClockConfig+0x260>)
 800ec84:	689b      	ldr	r3, [r3, #8]
 800ec86:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	68db      	ldr	r3, [r3, #12]
 800ec8e:	4918      	ldr	r1, [pc, #96]	; (800ecf0 <HAL_RCC_ClockConfig+0x260>)
 800ec90:	4313      	orrs	r3, r2
 800ec92:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	f003 0308 	and.w	r3, r3, #8
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d009      	beq.n	800ecb4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800eca0:	4b13      	ldr	r3, [pc, #76]	; (800ecf0 <HAL_RCC_ClockConfig+0x260>)
 800eca2:	689b      	ldr	r3, [r3, #8]
 800eca4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	691b      	ldr	r3, [r3, #16]
 800ecac:	00db      	lsls	r3, r3, #3
 800ecae:	4910      	ldr	r1, [pc, #64]	; (800ecf0 <HAL_RCC_ClockConfig+0x260>)
 800ecb0:	4313      	orrs	r3, r2
 800ecb2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800ecb4:	f000 f826 	bl	800ed04 <HAL_RCC_GetSysClockFreq>
 800ecb8:	4602      	mov	r2, r0
 800ecba:	4b0d      	ldr	r3, [pc, #52]	; (800ecf0 <HAL_RCC_ClockConfig+0x260>)
 800ecbc:	689b      	ldr	r3, [r3, #8]
 800ecbe:	091b      	lsrs	r3, r3, #4
 800ecc0:	f003 030f 	and.w	r3, r3, #15
 800ecc4:	490c      	ldr	r1, [pc, #48]	; (800ecf8 <HAL_RCC_ClockConfig+0x268>)
 800ecc6:	5ccb      	ldrb	r3, [r1, r3]
 800ecc8:	f003 031f 	and.w	r3, r3, #31
 800eccc:	fa22 f303 	lsr.w	r3, r2, r3
 800ecd0:	4a0a      	ldr	r2, [pc, #40]	; (800ecfc <HAL_RCC_ClockConfig+0x26c>)
 800ecd2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800ecd4:	4b0a      	ldr	r3, [pc, #40]	; (800ed00 <HAL_RCC_ClockConfig+0x270>)
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	4618      	mov	r0, r3
 800ecda:	f7fd fe17 	bl	800c90c <HAL_InitTick>
 800ecde:	4603      	mov	r3, r0
 800ece0:	73fb      	strb	r3, [r7, #15]

  return status;
 800ece2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ece4:	4618      	mov	r0, r3
 800ece6:	3718      	adds	r7, #24
 800ece8:	46bd      	mov	sp, r7
 800ecea:	bd80      	pop	{r7, pc}
 800ecec:	40022000 	.word	0x40022000
 800ecf0:	40021000 	.word	0x40021000
 800ecf4:	04c4b400 	.word	0x04c4b400
 800ecf8:	08024328 	.word	0x08024328
 800ecfc:	20000094 	.word	0x20000094
 800ed00:	20000098 	.word	0x20000098

0800ed04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ed04:	b480      	push	{r7}
 800ed06:	b089      	sub	sp, #36	; 0x24
 800ed08:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	61fb      	str	r3, [r7, #28]
 800ed0e:	2300      	movs	r3, #0
 800ed10:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ed12:	4b3e      	ldr	r3, [pc, #248]	; (800ee0c <HAL_RCC_GetSysClockFreq+0x108>)
 800ed14:	689b      	ldr	r3, [r3, #8]
 800ed16:	f003 030c 	and.w	r3, r3, #12
 800ed1a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ed1c:	4b3b      	ldr	r3, [pc, #236]	; (800ee0c <HAL_RCC_GetSysClockFreq+0x108>)
 800ed1e:	68db      	ldr	r3, [r3, #12]
 800ed20:	f003 0303 	and.w	r3, r3, #3
 800ed24:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800ed26:	693b      	ldr	r3, [r7, #16]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d005      	beq.n	800ed38 <HAL_RCC_GetSysClockFreq+0x34>
 800ed2c:	693b      	ldr	r3, [r7, #16]
 800ed2e:	2b0c      	cmp	r3, #12
 800ed30:	d121      	bne.n	800ed76 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	2b01      	cmp	r3, #1
 800ed36:	d11e      	bne.n	800ed76 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800ed38:	4b34      	ldr	r3, [pc, #208]	; (800ee0c <HAL_RCC_GetSysClockFreq+0x108>)
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	f003 0308 	and.w	r3, r3, #8
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d107      	bne.n	800ed54 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800ed44:	4b31      	ldr	r3, [pc, #196]	; (800ee0c <HAL_RCC_GetSysClockFreq+0x108>)
 800ed46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ed4a:	0a1b      	lsrs	r3, r3, #8
 800ed4c:	f003 030f 	and.w	r3, r3, #15
 800ed50:	61fb      	str	r3, [r7, #28]
 800ed52:	e005      	b.n	800ed60 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800ed54:	4b2d      	ldr	r3, [pc, #180]	; (800ee0c <HAL_RCC_GetSysClockFreq+0x108>)
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	091b      	lsrs	r3, r3, #4
 800ed5a:	f003 030f 	and.w	r3, r3, #15
 800ed5e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800ed60:	4a2b      	ldr	r2, [pc, #172]	; (800ee10 <HAL_RCC_GetSysClockFreq+0x10c>)
 800ed62:	69fb      	ldr	r3, [r7, #28]
 800ed64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed68:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800ed6a:	693b      	ldr	r3, [r7, #16]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d10d      	bne.n	800ed8c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800ed70:	69fb      	ldr	r3, [r7, #28]
 800ed72:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800ed74:	e00a      	b.n	800ed8c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800ed76:	693b      	ldr	r3, [r7, #16]
 800ed78:	2b04      	cmp	r3, #4
 800ed7a:	d102      	bne.n	800ed82 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ed7c:	4b25      	ldr	r3, [pc, #148]	; (800ee14 <HAL_RCC_GetSysClockFreq+0x110>)
 800ed7e:	61bb      	str	r3, [r7, #24]
 800ed80:	e004      	b.n	800ed8c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800ed82:	693b      	ldr	r3, [r7, #16]
 800ed84:	2b08      	cmp	r3, #8
 800ed86:	d101      	bne.n	800ed8c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ed88:	4b23      	ldr	r3, [pc, #140]	; (800ee18 <HAL_RCC_GetSysClockFreq+0x114>)
 800ed8a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800ed8c:	693b      	ldr	r3, [r7, #16]
 800ed8e:	2b0c      	cmp	r3, #12
 800ed90:	d134      	bne.n	800edfc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ed92:	4b1e      	ldr	r3, [pc, #120]	; (800ee0c <HAL_RCC_GetSysClockFreq+0x108>)
 800ed94:	68db      	ldr	r3, [r3, #12]
 800ed96:	f003 0303 	and.w	r3, r3, #3
 800ed9a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800ed9c:	68bb      	ldr	r3, [r7, #8]
 800ed9e:	2b02      	cmp	r3, #2
 800eda0:	d003      	beq.n	800edaa <HAL_RCC_GetSysClockFreq+0xa6>
 800eda2:	68bb      	ldr	r3, [r7, #8]
 800eda4:	2b03      	cmp	r3, #3
 800eda6:	d003      	beq.n	800edb0 <HAL_RCC_GetSysClockFreq+0xac>
 800eda8:	e005      	b.n	800edb6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800edaa:	4b1a      	ldr	r3, [pc, #104]	; (800ee14 <HAL_RCC_GetSysClockFreq+0x110>)
 800edac:	617b      	str	r3, [r7, #20]
      break;
 800edae:	e005      	b.n	800edbc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800edb0:	4b19      	ldr	r3, [pc, #100]	; (800ee18 <HAL_RCC_GetSysClockFreq+0x114>)
 800edb2:	617b      	str	r3, [r7, #20]
      break;
 800edb4:	e002      	b.n	800edbc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800edb6:	69fb      	ldr	r3, [r7, #28]
 800edb8:	617b      	str	r3, [r7, #20]
      break;
 800edba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800edbc:	4b13      	ldr	r3, [pc, #76]	; (800ee0c <HAL_RCC_GetSysClockFreq+0x108>)
 800edbe:	68db      	ldr	r3, [r3, #12]
 800edc0:	091b      	lsrs	r3, r3, #4
 800edc2:	f003 030f 	and.w	r3, r3, #15
 800edc6:	3301      	adds	r3, #1
 800edc8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800edca:	4b10      	ldr	r3, [pc, #64]	; (800ee0c <HAL_RCC_GetSysClockFreq+0x108>)
 800edcc:	68db      	ldr	r3, [r3, #12]
 800edce:	0a1b      	lsrs	r3, r3, #8
 800edd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800edd4:	697a      	ldr	r2, [r7, #20]
 800edd6:	fb03 f202 	mul.w	r2, r3, r2
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	fbb2 f3f3 	udiv	r3, r2, r3
 800ede0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ede2:	4b0a      	ldr	r3, [pc, #40]	; (800ee0c <HAL_RCC_GetSysClockFreq+0x108>)
 800ede4:	68db      	ldr	r3, [r3, #12]
 800ede6:	0e5b      	lsrs	r3, r3, #25
 800ede8:	f003 0303 	and.w	r3, r3, #3
 800edec:	3301      	adds	r3, #1
 800edee:	005b      	lsls	r3, r3, #1
 800edf0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800edf2:	697a      	ldr	r2, [r7, #20]
 800edf4:	683b      	ldr	r3, [r7, #0]
 800edf6:	fbb2 f3f3 	udiv	r3, r2, r3
 800edfa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800edfc:	69bb      	ldr	r3, [r7, #24]
}
 800edfe:	4618      	mov	r0, r3
 800ee00:	3724      	adds	r7, #36	; 0x24
 800ee02:	46bd      	mov	sp, r7
 800ee04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee08:	4770      	bx	lr
 800ee0a:	bf00      	nop
 800ee0c:	40021000 	.word	0x40021000
 800ee10:	08024340 	.word	0x08024340
 800ee14:	00f42400 	.word	0x00f42400
 800ee18:	007a1200 	.word	0x007a1200

0800ee1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ee1c:	b480      	push	{r7}
 800ee1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ee20:	4b03      	ldr	r3, [pc, #12]	; (800ee30 <HAL_RCC_GetHCLKFreq+0x14>)
 800ee22:	681b      	ldr	r3, [r3, #0]
}
 800ee24:	4618      	mov	r0, r3
 800ee26:	46bd      	mov	sp, r7
 800ee28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee2c:	4770      	bx	lr
 800ee2e:	bf00      	nop
 800ee30:	20000094 	.word	0x20000094

0800ee34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800ee38:	f7ff fff0 	bl	800ee1c <HAL_RCC_GetHCLKFreq>
 800ee3c:	4602      	mov	r2, r0
 800ee3e:	4b06      	ldr	r3, [pc, #24]	; (800ee58 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ee40:	689b      	ldr	r3, [r3, #8]
 800ee42:	0a1b      	lsrs	r3, r3, #8
 800ee44:	f003 0307 	and.w	r3, r3, #7
 800ee48:	4904      	ldr	r1, [pc, #16]	; (800ee5c <HAL_RCC_GetPCLK1Freq+0x28>)
 800ee4a:	5ccb      	ldrb	r3, [r1, r3]
 800ee4c:	f003 031f 	and.w	r3, r3, #31
 800ee50:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ee54:	4618      	mov	r0, r3
 800ee56:	bd80      	pop	{r7, pc}
 800ee58:	40021000 	.word	0x40021000
 800ee5c:	08024338 	.word	0x08024338

0800ee60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800ee64:	f7ff ffda 	bl	800ee1c <HAL_RCC_GetHCLKFreq>
 800ee68:	4602      	mov	r2, r0
 800ee6a:	4b06      	ldr	r3, [pc, #24]	; (800ee84 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ee6c:	689b      	ldr	r3, [r3, #8]
 800ee6e:	0adb      	lsrs	r3, r3, #11
 800ee70:	f003 0307 	and.w	r3, r3, #7
 800ee74:	4904      	ldr	r1, [pc, #16]	; (800ee88 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ee76:	5ccb      	ldrb	r3, [r1, r3]
 800ee78:	f003 031f 	and.w	r3, r3, #31
 800ee7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ee80:	4618      	mov	r0, r3
 800ee82:	bd80      	pop	{r7, pc}
 800ee84:	40021000 	.word	0x40021000
 800ee88:	08024338 	.word	0x08024338

0800ee8c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ee8c:	b480      	push	{r7}
 800ee8e:	b083      	sub	sp, #12
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	6078      	str	r0, [r7, #4]
 800ee94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	220f      	movs	r2, #15
 800ee9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800ee9c:	4b12      	ldr	r3, [pc, #72]	; (800eee8 <HAL_RCC_GetClockConfig+0x5c>)
 800ee9e:	689b      	ldr	r3, [r3, #8]
 800eea0:	f003 0203 	and.w	r2, r3, #3
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800eea8:	4b0f      	ldr	r3, [pc, #60]	; (800eee8 <HAL_RCC_GetClockConfig+0x5c>)
 800eeaa:	689b      	ldr	r3, [r3, #8]
 800eeac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800eeb4:	4b0c      	ldr	r3, [pc, #48]	; (800eee8 <HAL_RCC_GetClockConfig+0x5c>)
 800eeb6:	689b      	ldr	r3, [r3, #8]
 800eeb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800eec0:	4b09      	ldr	r3, [pc, #36]	; (800eee8 <HAL_RCC_GetClockConfig+0x5c>)
 800eec2:	689b      	ldr	r3, [r3, #8]
 800eec4:	08db      	lsrs	r3, r3, #3
 800eec6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800eece:	4b07      	ldr	r3, [pc, #28]	; (800eeec <HAL_RCC_GetClockConfig+0x60>)
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	f003 020f 	and.w	r2, r3, #15
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	601a      	str	r2, [r3, #0]
}
 800eeda:	bf00      	nop
 800eedc:	370c      	adds	r7, #12
 800eede:	46bd      	mov	sp, r7
 800eee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee4:	4770      	bx	lr
 800eee6:	bf00      	nop
 800eee8:	40021000 	.word	0x40021000
 800eeec:	40022000 	.word	0x40022000

0800eef0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800eef0:	b580      	push	{r7, lr}
 800eef2:	b086      	sub	sp, #24
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800eef8:	2300      	movs	r3, #0
 800eefa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800eefc:	4b27      	ldr	r3, [pc, #156]	; (800ef9c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800eefe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d003      	beq.n	800ef10 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800ef08:	f7ff f882 	bl	800e010 <HAL_PWREx_GetVoltageRange>
 800ef0c:	6178      	str	r0, [r7, #20]
 800ef0e:	e014      	b.n	800ef3a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800ef10:	4b22      	ldr	r3, [pc, #136]	; (800ef9c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800ef12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef14:	4a21      	ldr	r2, [pc, #132]	; (800ef9c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800ef16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ef1a:	6593      	str	r3, [r2, #88]	; 0x58
 800ef1c:	4b1f      	ldr	r3, [pc, #124]	; (800ef9c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800ef1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ef24:	60fb      	str	r3, [r7, #12]
 800ef26:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800ef28:	f7ff f872 	bl	800e010 <HAL_PWREx_GetVoltageRange>
 800ef2c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800ef2e:	4b1b      	ldr	r3, [pc, #108]	; (800ef9c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800ef30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef32:	4a1a      	ldr	r2, [pc, #104]	; (800ef9c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800ef34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ef38:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ef3a:	697b      	ldr	r3, [r7, #20]
 800ef3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ef40:	d10b      	bne.n	800ef5a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	2b80      	cmp	r3, #128	; 0x80
 800ef46:	d913      	bls.n	800ef70 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	2ba0      	cmp	r3, #160	; 0xa0
 800ef4c:	d902      	bls.n	800ef54 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800ef4e:	2302      	movs	r3, #2
 800ef50:	613b      	str	r3, [r7, #16]
 800ef52:	e00d      	b.n	800ef70 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800ef54:	2301      	movs	r3, #1
 800ef56:	613b      	str	r3, [r7, #16]
 800ef58:	e00a      	b.n	800ef70 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	2b7f      	cmp	r3, #127	; 0x7f
 800ef5e:	d902      	bls.n	800ef66 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800ef60:	2302      	movs	r3, #2
 800ef62:	613b      	str	r3, [r7, #16]
 800ef64:	e004      	b.n	800ef70 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	2b70      	cmp	r3, #112	; 0x70
 800ef6a:	d101      	bne.n	800ef70 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800ef6c:	2301      	movs	r3, #1
 800ef6e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800ef70:	4b0b      	ldr	r3, [pc, #44]	; (800efa0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	f023 020f 	bic.w	r2, r3, #15
 800ef78:	4909      	ldr	r1, [pc, #36]	; (800efa0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800ef7a:	693b      	ldr	r3, [r7, #16]
 800ef7c:	4313      	orrs	r3, r2
 800ef7e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800ef80:	4b07      	ldr	r3, [pc, #28]	; (800efa0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	f003 030f 	and.w	r3, r3, #15
 800ef88:	693a      	ldr	r2, [r7, #16]
 800ef8a:	429a      	cmp	r2, r3
 800ef8c:	d001      	beq.n	800ef92 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800ef8e:	2301      	movs	r3, #1
 800ef90:	e000      	b.n	800ef94 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800ef92:	2300      	movs	r3, #0
}
 800ef94:	4618      	mov	r0, r3
 800ef96:	3718      	adds	r7, #24
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	bd80      	pop	{r7, pc}
 800ef9c:	40021000 	.word	0x40021000
 800efa0:	40022000 	.word	0x40022000

0800efa4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800efa4:	b480      	push	{r7}
 800efa6:	b087      	sub	sp, #28
 800efa8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800efaa:	4b2d      	ldr	r3, [pc, #180]	; (800f060 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800efac:	68db      	ldr	r3, [r3, #12]
 800efae:	f003 0303 	and.w	r3, r3, #3
 800efb2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	2b03      	cmp	r3, #3
 800efb8:	d00b      	beq.n	800efd2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	2b03      	cmp	r3, #3
 800efbe:	d825      	bhi.n	800f00c <RCC_GetSysClockFreqFromPLLSource+0x68>
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	2b01      	cmp	r3, #1
 800efc4:	d008      	beq.n	800efd8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	2b02      	cmp	r3, #2
 800efca:	d11f      	bne.n	800f00c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800efcc:	4b25      	ldr	r3, [pc, #148]	; (800f064 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800efce:	613b      	str	r3, [r7, #16]
    break;
 800efd0:	e01f      	b.n	800f012 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800efd2:	4b25      	ldr	r3, [pc, #148]	; (800f068 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800efd4:	613b      	str	r3, [r7, #16]
    break;
 800efd6:	e01c      	b.n	800f012 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800efd8:	4b21      	ldr	r3, [pc, #132]	; (800f060 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	f003 0308 	and.w	r3, r3, #8
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d107      	bne.n	800eff4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800efe4:	4b1e      	ldr	r3, [pc, #120]	; (800f060 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800efe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800efea:	0a1b      	lsrs	r3, r3, #8
 800efec:	f003 030f 	and.w	r3, r3, #15
 800eff0:	617b      	str	r3, [r7, #20]
 800eff2:	e005      	b.n	800f000 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800eff4:	4b1a      	ldr	r3, [pc, #104]	; (800f060 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	091b      	lsrs	r3, r3, #4
 800effa:	f003 030f 	and.w	r3, r3, #15
 800effe:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800f000:	4a1a      	ldr	r2, [pc, #104]	; (800f06c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800f002:	697b      	ldr	r3, [r7, #20]
 800f004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f008:	613b      	str	r3, [r7, #16]
    break;
 800f00a:	e002      	b.n	800f012 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800f00c:	2300      	movs	r3, #0
 800f00e:	613b      	str	r3, [r7, #16]
    break;
 800f010:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800f012:	4b13      	ldr	r3, [pc, #76]	; (800f060 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800f014:	68db      	ldr	r3, [r3, #12]
 800f016:	091b      	lsrs	r3, r3, #4
 800f018:	f003 030f 	and.w	r3, r3, #15
 800f01c:	3301      	adds	r3, #1
 800f01e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800f020:	4b0f      	ldr	r3, [pc, #60]	; (800f060 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800f022:	68db      	ldr	r3, [r3, #12]
 800f024:	0a1b      	lsrs	r3, r3, #8
 800f026:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f02a:	693a      	ldr	r2, [r7, #16]
 800f02c:	fb03 f202 	mul.w	r2, r3, r2
 800f030:	68bb      	ldr	r3, [r7, #8]
 800f032:	fbb2 f3f3 	udiv	r3, r2, r3
 800f036:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800f038:	4b09      	ldr	r3, [pc, #36]	; (800f060 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800f03a:	68db      	ldr	r3, [r3, #12]
 800f03c:	0e5b      	lsrs	r3, r3, #25
 800f03e:	f003 0303 	and.w	r3, r3, #3
 800f042:	3301      	adds	r3, #1
 800f044:	005b      	lsls	r3, r3, #1
 800f046:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800f048:	693a      	ldr	r2, [r7, #16]
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f050:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800f052:	683b      	ldr	r3, [r7, #0]
}
 800f054:	4618      	mov	r0, r3
 800f056:	371c      	adds	r7, #28
 800f058:	46bd      	mov	sp, r7
 800f05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f05e:	4770      	bx	lr
 800f060:	40021000 	.word	0x40021000
 800f064:	00f42400 	.word	0x00f42400
 800f068:	007a1200 	.word	0x007a1200
 800f06c:	08024340 	.word	0x08024340

0800f070 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b086      	sub	sp, #24
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800f078:	2300      	movs	r3, #0
 800f07a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800f07c:	2300      	movs	r3, #0
 800f07e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d040      	beq.n	800f10e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f090:	2b80      	cmp	r3, #128	; 0x80
 800f092:	d02a      	beq.n	800f0ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800f094:	2b80      	cmp	r3, #128	; 0x80
 800f096:	d825      	bhi.n	800f0e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800f098:	2b60      	cmp	r3, #96	; 0x60
 800f09a:	d026      	beq.n	800f0ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800f09c:	2b60      	cmp	r3, #96	; 0x60
 800f09e:	d821      	bhi.n	800f0e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800f0a0:	2b40      	cmp	r3, #64	; 0x40
 800f0a2:	d006      	beq.n	800f0b2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 800f0a4:	2b40      	cmp	r3, #64	; 0x40
 800f0a6:	d81d      	bhi.n	800f0e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d009      	beq.n	800f0c0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800f0ac:	2b20      	cmp	r3, #32
 800f0ae:	d010      	beq.n	800f0d2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 800f0b0:	e018      	b.n	800f0e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800f0b2:	4b89      	ldr	r3, [pc, #548]	; (800f2d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800f0b4:	68db      	ldr	r3, [r3, #12]
 800f0b6:	4a88      	ldr	r2, [pc, #544]	; (800f2d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800f0b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f0bc:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800f0be:	e015      	b.n	800f0ec <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	3304      	adds	r3, #4
 800f0c4:	2100      	movs	r1, #0
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	f000 fb3e 	bl	800f748 <RCCEx_PLLSAI1_Config>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800f0d0:	e00c      	b.n	800f0ec <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	3320      	adds	r3, #32
 800f0d6:	2100      	movs	r1, #0
 800f0d8:	4618      	mov	r0, r3
 800f0da:	f000 fc29 	bl	800f930 <RCCEx_PLLSAI2_Config>
 800f0de:	4603      	mov	r3, r0
 800f0e0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800f0e2:	e003      	b.n	800f0ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f0e4:	2301      	movs	r3, #1
 800f0e6:	74fb      	strb	r3, [r7, #19]
      break;
 800f0e8:	e000      	b.n	800f0ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800f0ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f0ec:	7cfb      	ldrb	r3, [r7, #19]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d10b      	bne.n	800f10a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800f0f2:	4b79      	ldr	r3, [pc, #484]	; (800f2d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800f0f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f0f8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f100:	4975      	ldr	r1, [pc, #468]	; (800f2d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800f102:	4313      	orrs	r3, r2
 800f104:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800f108:	e001      	b.n	800f10e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f10a:	7cfb      	ldrb	r3, [r7, #19]
 800f10c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f116:	2b00      	cmp	r3, #0
 800f118:	d047      	beq.n	800f1aa <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f11e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f122:	d030      	beq.n	800f186 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800f124:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f128:	d82a      	bhi.n	800f180 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800f12a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f12e:	d02a      	beq.n	800f186 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800f130:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f134:	d824      	bhi.n	800f180 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800f136:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f13a:	d008      	beq.n	800f14e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800f13c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f140:	d81e      	bhi.n	800f180 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800f142:	2b00      	cmp	r3, #0
 800f144:	d00a      	beq.n	800f15c <HAL_RCCEx_PeriphCLKConfig+0xec>
 800f146:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f14a:	d010      	beq.n	800f16e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800f14c:	e018      	b.n	800f180 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800f14e:	4b62      	ldr	r3, [pc, #392]	; (800f2d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800f150:	68db      	ldr	r3, [r3, #12]
 800f152:	4a61      	ldr	r2, [pc, #388]	; (800f2d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800f154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f158:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800f15a:	e015      	b.n	800f188 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	3304      	adds	r3, #4
 800f160:	2100      	movs	r1, #0
 800f162:	4618      	mov	r0, r3
 800f164:	f000 faf0 	bl	800f748 <RCCEx_PLLSAI1_Config>
 800f168:	4603      	mov	r3, r0
 800f16a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800f16c:	e00c      	b.n	800f188 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	3320      	adds	r3, #32
 800f172:	2100      	movs	r1, #0
 800f174:	4618      	mov	r0, r3
 800f176:	f000 fbdb 	bl	800f930 <RCCEx_PLLSAI2_Config>
 800f17a:	4603      	mov	r3, r0
 800f17c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800f17e:	e003      	b.n	800f188 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f180:	2301      	movs	r3, #1
 800f182:	74fb      	strb	r3, [r7, #19]
      break;
 800f184:	e000      	b.n	800f188 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800f186:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f188:	7cfb      	ldrb	r3, [r7, #19]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d10b      	bne.n	800f1a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800f18e:	4b52      	ldr	r3, [pc, #328]	; (800f2d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800f190:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f194:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f19c:	494e      	ldr	r1, [pc, #312]	; (800f2d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800f19e:	4313      	orrs	r3, r2
 800f1a0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800f1a4:	e001      	b.n	800f1aa <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f1a6:	7cfb      	ldrb	r3, [r7, #19]
 800f1a8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	f000 809f 	beq.w	800f2f6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800f1bc:	4b46      	ldr	r3, [pc, #280]	; (800f2d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800f1be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f1c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d101      	bne.n	800f1cc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800f1c8:	2301      	movs	r3, #1
 800f1ca:	e000      	b.n	800f1ce <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d00d      	beq.n	800f1ee <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f1d2:	4b41      	ldr	r3, [pc, #260]	; (800f2d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800f1d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f1d6:	4a40      	ldr	r2, [pc, #256]	; (800f2d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800f1d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f1dc:	6593      	str	r3, [r2, #88]	; 0x58
 800f1de:	4b3e      	ldr	r3, [pc, #248]	; (800f2d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800f1e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f1e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f1e6:	60bb      	str	r3, [r7, #8]
 800f1e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f1ea:	2301      	movs	r3, #1
 800f1ec:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f1ee:	4b3b      	ldr	r3, [pc, #236]	; (800f2dc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	4a3a      	ldr	r2, [pc, #232]	; (800f2dc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800f1f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f1f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800f1fa:	f7fe f877 	bl	800d2ec <HAL_GetTick>
 800f1fe:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800f200:	e009      	b.n	800f216 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f202:	f7fe f873 	bl	800d2ec <HAL_GetTick>
 800f206:	4602      	mov	r2, r0
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	1ad3      	subs	r3, r2, r3
 800f20c:	2b02      	cmp	r3, #2
 800f20e:	d902      	bls.n	800f216 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800f210:	2303      	movs	r3, #3
 800f212:	74fb      	strb	r3, [r7, #19]
        break;
 800f214:	e005      	b.n	800f222 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800f216:	4b31      	ldr	r3, [pc, #196]	; (800f2dc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d0ef      	beq.n	800f202 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800f222:	7cfb      	ldrb	r3, [r7, #19]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d15b      	bne.n	800f2e0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800f228:	4b2b      	ldr	r3, [pc, #172]	; (800f2d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800f22a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f22e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f232:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800f234:	697b      	ldr	r3, [r7, #20]
 800f236:	2b00      	cmp	r3, #0
 800f238:	d01f      	beq.n	800f27a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f240:	697a      	ldr	r2, [r7, #20]
 800f242:	429a      	cmp	r2, r3
 800f244:	d019      	beq.n	800f27a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800f246:	4b24      	ldr	r3, [pc, #144]	; (800f2d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800f248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f24c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f250:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800f252:	4b21      	ldr	r3, [pc, #132]	; (800f2d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800f254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f258:	4a1f      	ldr	r2, [pc, #124]	; (800f2d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800f25a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f25e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800f262:	4b1d      	ldr	r3, [pc, #116]	; (800f2d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800f264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f268:	4a1b      	ldr	r2, [pc, #108]	; (800f2d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800f26a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f26e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800f272:	4a19      	ldr	r2, [pc, #100]	; (800f2d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800f274:	697b      	ldr	r3, [r7, #20]
 800f276:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800f27a:	697b      	ldr	r3, [r7, #20]
 800f27c:	f003 0301 	and.w	r3, r3, #1
 800f280:	2b00      	cmp	r3, #0
 800f282:	d016      	beq.n	800f2b2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f284:	f7fe f832 	bl	800d2ec <HAL_GetTick>
 800f288:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800f28a:	e00b      	b.n	800f2a4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f28c:	f7fe f82e 	bl	800d2ec <HAL_GetTick>
 800f290:	4602      	mov	r2, r0
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	1ad3      	subs	r3, r2, r3
 800f296:	f241 3288 	movw	r2, #5000	; 0x1388
 800f29a:	4293      	cmp	r3, r2
 800f29c:	d902      	bls.n	800f2a4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800f29e:	2303      	movs	r3, #3
 800f2a0:	74fb      	strb	r3, [r7, #19]
            break;
 800f2a2:	e006      	b.n	800f2b2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800f2a4:	4b0c      	ldr	r3, [pc, #48]	; (800f2d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800f2a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f2aa:	f003 0302 	and.w	r3, r3, #2
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d0ec      	beq.n	800f28c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800f2b2:	7cfb      	ldrb	r3, [r7, #19]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d10c      	bne.n	800f2d2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f2b8:	4b07      	ldr	r3, [pc, #28]	; (800f2d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800f2ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f2be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f2c8:	4903      	ldr	r1, [pc, #12]	; (800f2d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800f2ca:	4313      	orrs	r3, r2
 800f2cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800f2d0:	e008      	b.n	800f2e4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800f2d2:	7cfb      	ldrb	r3, [r7, #19]
 800f2d4:	74bb      	strb	r3, [r7, #18]
 800f2d6:	e005      	b.n	800f2e4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800f2d8:	40021000 	.word	0x40021000
 800f2dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f2e0:	7cfb      	ldrb	r3, [r7, #19]
 800f2e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800f2e4:	7c7b      	ldrb	r3, [r7, #17]
 800f2e6:	2b01      	cmp	r3, #1
 800f2e8:	d105      	bne.n	800f2f6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f2ea:	4ba0      	ldr	r3, [pc, #640]	; (800f56c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800f2ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f2ee:	4a9f      	ldr	r2, [pc, #636]	; (800f56c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800f2f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f2f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	f003 0301 	and.w	r3, r3, #1
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d00a      	beq.n	800f318 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800f302:	4b9a      	ldr	r3, [pc, #616]	; (800f56c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800f304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f308:	f023 0203 	bic.w	r2, r3, #3
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f310:	4996      	ldr	r1, [pc, #600]	; (800f56c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800f312:	4313      	orrs	r3, r2
 800f314:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	f003 0302 	and.w	r3, r3, #2
 800f320:	2b00      	cmp	r3, #0
 800f322:	d00a      	beq.n	800f33a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800f324:	4b91      	ldr	r3, [pc, #580]	; (800f56c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800f326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f32a:	f023 020c 	bic.w	r2, r3, #12
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f332:	498e      	ldr	r1, [pc, #568]	; (800f56c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800f334:	4313      	orrs	r3, r2
 800f336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	f003 0304 	and.w	r3, r3, #4
 800f342:	2b00      	cmp	r3, #0
 800f344:	d00a      	beq.n	800f35c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800f346:	4b89      	ldr	r3, [pc, #548]	; (800f56c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800f348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f34c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f354:	4985      	ldr	r1, [pc, #532]	; (800f56c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800f356:	4313      	orrs	r3, r2
 800f358:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	f003 0308 	and.w	r3, r3, #8
 800f364:	2b00      	cmp	r3, #0
 800f366:	d00a      	beq.n	800f37e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800f368:	4b80      	ldr	r3, [pc, #512]	; (800f56c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800f36a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f36e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f376:	497d      	ldr	r1, [pc, #500]	; (800f56c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800f378:	4313      	orrs	r3, r2
 800f37a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	f003 0310 	and.w	r3, r3, #16
 800f386:	2b00      	cmp	r3, #0
 800f388:	d00a      	beq.n	800f3a0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800f38a:	4b78      	ldr	r3, [pc, #480]	; (800f56c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800f38c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f390:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f398:	4974      	ldr	r1, [pc, #464]	; (800f56c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800f39a:	4313      	orrs	r3, r2
 800f39c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	f003 0320 	and.w	r3, r3, #32
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d00a      	beq.n	800f3c2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800f3ac:	4b6f      	ldr	r3, [pc, #444]	; (800f56c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800f3ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f3b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f3ba:	496c      	ldr	r1, [pc, #432]	; (800f56c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800f3bc:	4313      	orrs	r3, r2
 800f3be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d00a      	beq.n	800f3e4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f3ce:	4b67      	ldr	r3, [pc, #412]	; (800f56c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800f3d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f3d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f3dc:	4963      	ldr	r1, [pc, #396]	; (800f56c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800f3de:	4313      	orrs	r3, r2
 800f3e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d00a      	beq.n	800f406 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800f3f0:	4b5e      	ldr	r3, [pc, #376]	; (800f56c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800f3f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f3f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f3fe:	495b      	ldr	r1, [pc, #364]	; (800f56c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800f400:	4313      	orrs	r3, r2
 800f402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d00a      	beq.n	800f428 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800f412:	4b56      	ldr	r3, [pc, #344]	; (800f56c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800f414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f418:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f420:	4952      	ldr	r1, [pc, #328]	; (800f56c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800f422:	4313      	orrs	r3, r2
 800f424:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f430:	2b00      	cmp	r3, #0
 800f432:	d00a      	beq.n	800f44a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800f434:	4b4d      	ldr	r3, [pc, #308]	; (800f56c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800f436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f43a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f442:	494a      	ldr	r1, [pc, #296]	; (800f56c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800f444:	4313      	orrs	r3, r2
 800f446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f452:	2b00      	cmp	r3, #0
 800f454:	d00a      	beq.n	800f46c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800f456:	4b45      	ldr	r3, [pc, #276]	; (800f56c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800f458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f45c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f464:	4941      	ldr	r1, [pc, #260]	; (800f56c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800f466:	4313      	orrs	r3, r2
 800f468:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f474:	2b00      	cmp	r3, #0
 800f476:	d00a      	beq.n	800f48e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800f478:	4b3c      	ldr	r3, [pc, #240]	; (800f56c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800f47a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f47e:	f023 0203 	bic.w	r2, r3, #3
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f486:	4939      	ldr	r1, [pc, #228]	; (800f56c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800f488:	4313      	orrs	r3, r2
 800f48a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f496:	2b00      	cmp	r3, #0
 800f498:	d028      	beq.n	800f4ec <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f49a:	4b34      	ldr	r3, [pc, #208]	; (800f56c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800f49c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f4a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f4a8:	4930      	ldr	r1, [pc, #192]	; (800f56c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800f4aa:	4313      	orrs	r3, r2
 800f4ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f4b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f4b8:	d106      	bne.n	800f4c8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800f4ba:	4b2c      	ldr	r3, [pc, #176]	; (800f56c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800f4bc:	68db      	ldr	r3, [r3, #12]
 800f4be:	4a2b      	ldr	r2, [pc, #172]	; (800f56c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800f4c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f4c4:	60d3      	str	r3, [r2, #12]
 800f4c6:	e011      	b.n	800f4ec <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f4cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f4d0:	d10c      	bne.n	800f4ec <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	3304      	adds	r3, #4
 800f4d6:	2101      	movs	r1, #1
 800f4d8:	4618      	mov	r0, r3
 800f4da:	f000 f935 	bl	800f748 <RCCEx_PLLSAI1_Config>
 800f4de:	4603      	mov	r3, r0
 800f4e0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800f4e2:	7cfb      	ldrb	r3, [r7, #19]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d001      	beq.n	800f4ec <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800f4e8:	7cfb      	ldrb	r3, [r7, #19]
 800f4ea:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d04d      	beq.n	800f594 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f4fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f500:	d108      	bne.n	800f514 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800f502:	4b1a      	ldr	r3, [pc, #104]	; (800f56c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800f504:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f508:	4a18      	ldr	r2, [pc, #96]	; (800f56c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800f50a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f50e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800f512:	e012      	b.n	800f53a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800f514:	4b15      	ldr	r3, [pc, #84]	; (800f56c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800f516:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f51a:	4a14      	ldr	r2, [pc, #80]	; (800f56c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800f51c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f520:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800f524:	4b11      	ldr	r3, [pc, #68]	; (800f56c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800f526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f52a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f532:	490e      	ldr	r1, [pc, #56]	; (800f56c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800f534:	4313      	orrs	r3, r2
 800f536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f53e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f542:	d106      	bne.n	800f552 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800f544:	4b09      	ldr	r3, [pc, #36]	; (800f56c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800f546:	68db      	ldr	r3, [r3, #12]
 800f548:	4a08      	ldr	r2, [pc, #32]	; (800f56c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800f54a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f54e:	60d3      	str	r3, [r2, #12]
 800f550:	e020      	b.n	800f594 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f556:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f55a:	d109      	bne.n	800f570 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800f55c:	4b03      	ldr	r3, [pc, #12]	; (800f56c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800f55e:	68db      	ldr	r3, [r3, #12]
 800f560:	4a02      	ldr	r2, [pc, #8]	; (800f56c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800f562:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f566:	60d3      	str	r3, [r2, #12]
 800f568:	e014      	b.n	800f594 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800f56a:	bf00      	nop
 800f56c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f574:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f578:	d10c      	bne.n	800f594 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	3304      	adds	r3, #4
 800f57e:	2101      	movs	r1, #1
 800f580:	4618      	mov	r0, r3
 800f582:	f000 f8e1 	bl	800f748 <RCCEx_PLLSAI1_Config>
 800f586:	4603      	mov	r3, r0
 800f588:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800f58a:	7cfb      	ldrb	r3, [r7, #19]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d001      	beq.n	800f594 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800f590:	7cfb      	ldrb	r3, [r7, #19]
 800f592:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d028      	beq.n	800f5f2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800f5a0:	4b68      	ldr	r3, [pc, #416]	; (800f744 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800f5a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f5a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f5ae:	4965      	ldr	r1, [pc, #404]	; (800f744 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800f5b0:	4313      	orrs	r3, r2
 800f5b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f5ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f5be:	d106      	bne.n	800f5ce <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800f5c0:	4b60      	ldr	r3, [pc, #384]	; (800f744 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800f5c2:	68db      	ldr	r3, [r3, #12]
 800f5c4:	4a5f      	ldr	r2, [pc, #380]	; (800f744 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800f5c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f5ca:	60d3      	str	r3, [r2, #12]
 800f5cc:	e011      	b.n	800f5f2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f5d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f5d6:	d10c      	bne.n	800f5f2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	3304      	adds	r3, #4
 800f5dc:	2101      	movs	r1, #1
 800f5de:	4618      	mov	r0, r3
 800f5e0:	f000 f8b2 	bl	800f748 <RCCEx_PLLSAI1_Config>
 800f5e4:	4603      	mov	r3, r0
 800f5e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800f5e8:	7cfb      	ldrb	r3, [r7, #19]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d001      	beq.n	800f5f2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800f5ee:	7cfb      	ldrb	r3, [r7, #19]
 800f5f0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d01e      	beq.n	800f63c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800f5fe:	4b51      	ldr	r3, [pc, #324]	; (800f744 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800f600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f604:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f60e:	494d      	ldr	r1, [pc, #308]	; (800f744 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800f610:	4313      	orrs	r3, r2
 800f612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f61c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f620:	d10c      	bne.n	800f63c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	3304      	adds	r3, #4
 800f626:	2102      	movs	r1, #2
 800f628:	4618      	mov	r0, r3
 800f62a:	f000 f88d 	bl	800f748 <RCCEx_PLLSAI1_Config>
 800f62e:	4603      	mov	r3, r0
 800f630:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800f632:	7cfb      	ldrb	r3, [r7, #19]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d001      	beq.n	800f63c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800f638:	7cfb      	ldrb	r3, [r7, #19]
 800f63a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f644:	2b00      	cmp	r3, #0
 800f646:	d00b      	beq.n	800f660 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800f648:	4b3e      	ldr	r3, [pc, #248]	; (800f744 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800f64a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f64e:	f023 0204 	bic.w	r2, r3, #4
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f658:	493a      	ldr	r1, [pc, #232]	; (800f744 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800f65a:	4313      	orrs	r3, r2
 800f65c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d00b      	beq.n	800f684 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800f66c:	4b35      	ldr	r3, [pc, #212]	; (800f744 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800f66e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f672:	f023 0218 	bic.w	r2, r3, #24
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f67c:	4931      	ldr	r1, [pc, #196]	; (800f744 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800f67e:	4313      	orrs	r3, r2
 800f680:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d035      	beq.n	800f6fc <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800f690:	4b2c      	ldr	r3, [pc, #176]	; (800f744 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	4a2b      	ldr	r2, [pc, #172]	; (800f744 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800f696:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f69a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f69c:	f7fd fe26 	bl	800d2ec <HAL_GetTick>
 800f6a0:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800f6a2:	e009      	b.n	800f6b8 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800f6a4:	f7fd fe22 	bl	800d2ec <HAL_GetTick>
 800f6a8:	4602      	mov	r2, r0
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	1ad3      	subs	r3, r2, r3
 800f6ae:	2b02      	cmp	r3, #2
 800f6b0:	d902      	bls.n	800f6b8 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 800f6b2:	2303      	movs	r3, #3
 800f6b4:	74fb      	strb	r3, [r7, #19]
        break;
 800f6b6:	e005      	b.n	800f6c4 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800f6b8:	4b22      	ldr	r3, [pc, #136]	; (800f744 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d1ef      	bne.n	800f6a4 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 800f6c4:	7cfb      	ldrb	r3, [r7, #19]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d113      	bne.n	800f6f2 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800f6ca:	4b1e      	ldr	r3, [pc, #120]	; (800f744 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800f6cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f6d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f6da:	491a      	ldr	r1, [pc, #104]	; (800f744 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800f6dc:	4313      	orrs	r3, r2
 800f6de:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	3320      	adds	r3, #32
 800f6e6:	2102      	movs	r1, #2
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	f000 f921 	bl	800f930 <RCCEx_PLLSAI2_Config>
 800f6ee:	4603      	mov	r3, r0
 800f6f0:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800f6f2:	7cfb      	ldrb	r3, [r7, #19]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d001      	beq.n	800f6fc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 800f6f8:	7cfb      	ldrb	r3, [r7, #19]
 800f6fa:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f704:	2b00      	cmp	r3, #0
 800f706:	d017      	beq.n	800f738 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800f708:	4b0e      	ldr	r3, [pc, #56]	; (800f744 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800f70a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f70e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f718:	490a      	ldr	r1, [pc, #40]	; (800f744 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800f71a:	4313      	orrs	r3, r2
 800f71c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f726:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f72a:	d105      	bne.n	800f738 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800f72c:	4b05      	ldr	r3, [pc, #20]	; (800f744 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800f72e:	68db      	ldr	r3, [r3, #12]
 800f730:	4a04      	ldr	r2, [pc, #16]	; (800f744 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800f732:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f736:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800f738:	7cbb      	ldrb	r3, [r7, #18]
}
 800f73a:	4618      	mov	r0, r3
 800f73c:	3718      	adds	r7, #24
 800f73e:	46bd      	mov	sp, r7
 800f740:	bd80      	pop	{r7, pc}
 800f742:	bf00      	nop
 800f744:	40021000 	.word	0x40021000

0800f748 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	b084      	sub	sp, #16
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
 800f750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f752:	2300      	movs	r3, #0
 800f754:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800f756:	4b72      	ldr	r3, [pc, #456]	; (800f920 <RCCEx_PLLSAI1_Config+0x1d8>)
 800f758:	68db      	ldr	r3, [r3, #12]
 800f75a:	f003 0303 	and.w	r3, r3, #3
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d00e      	beq.n	800f780 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800f762:	4b6f      	ldr	r3, [pc, #444]	; (800f920 <RCCEx_PLLSAI1_Config+0x1d8>)
 800f764:	68db      	ldr	r3, [r3, #12]
 800f766:	f003 0203 	and.w	r2, r3, #3
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	429a      	cmp	r2, r3
 800f770:	d103      	bne.n	800f77a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	681b      	ldr	r3, [r3, #0]
       ||
 800f776:	2b00      	cmp	r3, #0
 800f778:	d142      	bne.n	800f800 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800f77a:	2301      	movs	r3, #1
 800f77c:	73fb      	strb	r3, [r7, #15]
 800f77e:	e03f      	b.n	800f800 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	2b03      	cmp	r3, #3
 800f786:	d018      	beq.n	800f7ba <RCCEx_PLLSAI1_Config+0x72>
 800f788:	2b03      	cmp	r3, #3
 800f78a:	d825      	bhi.n	800f7d8 <RCCEx_PLLSAI1_Config+0x90>
 800f78c:	2b01      	cmp	r3, #1
 800f78e:	d002      	beq.n	800f796 <RCCEx_PLLSAI1_Config+0x4e>
 800f790:	2b02      	cmp	r3, #2
 800f792:	d009      	beq.n	800f7a8 <RCCEx_PLLSAI1_Config+0x60>
 800f794:	e020      	b.n	800f7d8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800f796:	4b62      	ldr	r3, [pc, #392]	; (800f920 <RCCEx_PLLSAI1_Config+0x1d8>)
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	f003 0302 	and.w	r3, r3, #2
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d11d      	bne.n	800f7de <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800f7a2:	2301      	movs	r3, #1
 800f7a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f7a6:	e01a      	b.n	800f7de <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800f7a8:	4b5d      	ldr	r3, [pc, #372]	; (800f920 <RCCEx_PLLSAI1_Config+0x1d8>)
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d116      	bne.n	800f7e2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800f7b4:	2301      	movs	r3, #1
 800f7b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f7b8:	e013      	b.n	800f7e2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800f7ba:	4b59      	ldr	r3, [pc, #356]	; (800f920 <RCCEx_PLLSAI1_Config+0x1d8>)
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d10f      	bne.n	800f7e6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800f7c6:	4b56      	ldr	r3, [pc, #344]	; (800f920 <RCCEx_PLLSAI1_Config+0x1d8>)
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d109      	bne.n	800f7e6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800f7d2:	2301      	movs	r3, #1
 800f7d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f7d6:	e006      	b.n	800f7e6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800f7d8:	2301      	movs	r3, #1
 800f7da:	73fb      	strb	r3, [r7, #15]
      break;
 800f7dc:	e004      	b.n	800f7e8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800f7de:	bf00      	nop
 800f7e0:	e002      	b.n	800f7e8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800f7e2:	bf00      	nop
 800f7e4:	e000      	b.n	800f7e8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800f7e6:	bf00      	nop
    }

    if(status == HAL_OK)
 800f7e8:	7bfb      	ldrb	r3, [r7, #15]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d108      	bne.n	800f800 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800f7ee:	4b4c      	ldr	r3, [pc, #304]	; (800f920 <RCCEx_PLLSAI1_Config+0x1d8>)
 800f7f0:	68db      	ldr	r3, [r3, #12]
 800f7f2:	f023 0203 	bic.w	r2, r3, #3
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	4949      	ldr	r1, [pc, #292]	; (800f920 <RCCEx_PLLSAI1_Config+0x1d8>)
 800f7fc:	4313      	orrs	r3, r2
 800f7fe:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800f800:	7bfb      	ldrb	r3, [r7, #15]
 800f802:	2b00      	cmp	r3, #0
 800f804:	f040 8086 	bne.w	800f914 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800f808:	4b45      	ldr	r3, [pc, #276]	; (800f920 <RCCEx_PLLSAI1_Config+0x1d8>)
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	4a44      	ldr	r2, [pc, #272]	; (800f920 <RCCEx_PLLSAI1_Config+0x1d8>)
 800f80e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f812:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f814:	f7fd fd6a 	bl	800d2ec <HAL_GetTick>
 800f818:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800f81a:	e009      	b.n	800f830 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800f81c:	f7fd fd66 	bl	800d2ec <HAL_GetTick>
 800f820:	4602      	mov	r2, r0
 800f822:	68bb      	ldr	r3, [r7, #8]
 800f824:	1ad3      	subs	r3, r2, r3
 800f826:	2b02      	cmp	r3, #2
 800f828:	d902      	bls.n	800f830 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800f82a:	2303      	movs	r3, #3
 800f82c:	73fb      	strb	r3, [r7, #15]
        break;
 800f82e:	e005      	b.n	800f83c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800f830:	4b3b      	ldr	r3, [pc, #236]	; (800f920 <RCCEx_PLLSAI1_Config+0x1d8>)
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d1ef      	bne.n	800f81c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800f83c:	7bfb      	ldrb	r3, [r7, #15]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d168      	bne.n	800f914 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800f842:	683b      	ldr	r3, [r7, #0]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d113      	bne.n	800f870 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800f848:	4b35      	ldr	r3, [pc, #212]	; (800f920 <RCCEx_PLLSAI1_Config+0x1d8>)
 800f84a:	691a      	ldr	r2, [r3, #16]
 800f84c:	4b35      	ldr	r3, [pc, #212]	; (800f924 <RCCEx_PLLSAI1_Config+0x1dc>)
 800f84e:	4013      	ands	r3, r2
 800f850:	687a      	ldr	r2, [r7, #4]
 800f852:	6892      	ldr	r2, [r2, #8]
 800f854:	0211      	lsls	r1, r2, #8
 800f856:	687a      	ldr	r2, [r7, #4]
 800f858:	68d2      	ldr	r2, [r2, #12]
 800f85a:	06d2      	lsls	r2, r2, #27
 800f85c:	4311      	orrs	r1, r2
 800f85e:	687a      	ldr	r2, [r7, #4]
 800f860:	6852      	ldr	r2, [r2, #4]
 800f862:	3a01      	subs	r2, #1
 800f864:	0112      	lsls	r2, r2, #4
 800f866:	430a      	orrs	r2, r1
 800f868:	492d      	ldr	r1, [pc, #180]	; (800f920 <RCCEx_PLLSAI1_Config+0x1d8>)
 800f86a:	4313      	orrs	r3, r2
 800f86c:	610b      	str	r3, [r1, #16]
 800f86e:	e02d      	b.n	800f8cc <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800f870:	683b      	ldr	r3, [r7, #0]
 800f872:	2b01      	cmp	r3, #1
 800f874:	d115      	bne.n	800f8a2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800f876:	4b2a      	ldr	r3, [pc, #168]	; (800f920 <RCCEx_PLLSAI1_Config+0x1d8>)
 800f878:	691a      	ldr	r2, [r3, #16]
 800f87a:	4b2b      	ldr	r3, [pc, #172]	; (800f928 <RCCEx_PLLSAI1_Config+0x1e0>)
 800f87c:	4013      	ands	r3, r2
 800f87e:	687a      	ldr	r2, [r7, #4]
 800f880:	6892      	ldr	r2, [r2, #8]
 800f882:	0211      	lsls	r1, r2, #8
 800f884:	687a      	ldr	r2, [r7, #4]
 800f886:	6912      	ldr	r2, [r2, #16]
 800f888:	0852      	lsrs	r2, r2, #1
 800f88a:	3a01      	subs	r2, #1
 800f88c:	0552      	lsls	r2, r2, #21
 800f88e:	4311      	orrs	r1, r2
 800f890:	687a      	ldr	r2, [r7, #4]
 800f892:	6852      	ldr	r2, [r2, #4]
 800f894:	3a01      	subs	r2, #1
 800f896:	0112      	lsls	r2, r2, #4
 800f898:	430a      	orrs	r2, r1
 800f89a:	4921      	ldr	r1, [pc, #132]	; (800f920 <RCCEx_PLLSAI1_Config+0x1d8>)
 800f89c:	4313      	orrs	r3, r2
 800f89e:	610b      	str	r3, [r1, #16]
 800f8a0:	e014      	b.n	800f8cc <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800f8a2:	4b1f      	ldr	r3, [pc, #124]	; (800f920 <RCCEx_PLLSAI1_Config+0x1d8>)
 800f8a4:	691a      	ldr	r2, [r3, #16]
 800f8a6:	4b21      	ldr	r3, [pc, #132]	; (800f92c <RCCEx_PLLSAI1_Config+0x1e4>)
 800f8a8:	4013      	ands	r3, r2
 800f8aa:	687a      	ldr	r2, [r7, #4]
 800f8ac:	6892      	ldr	r2, [r2, #8]
 800f8ae:	0211      	lsls	r1, r2, #8
 800f8b0:	687a      	ldr	r2, [r7, #4]
 800f8b2:	6952      	ldr	r2, [r2, #20]
 800f8b4:	0852      	lsrs	r2, r2, #1
 800f8b6:	3a01      	subs	r2, #1
 800f8b8:	0652      	lsls	r2, r2, #25
 800f8ba:	4311      	orrs	r1, r2
 800f8bc:	687a      	ldr	r2, [r7, #4]
 800f8be:	6852      	ldr	r2, [r2, #4]
 800f8c0:	3a01      	subs	r2, #1
 800f8c2:	0112      	lsls	r2, r2, #4
 800f8c4:	430a      	orrs	r2, r1
 800f8c6:	4916      	ldr	r1, [pc, #88]	; (800f920 <RCCEx_PLLSAI1_Config+0x1d8>)
 800f8c8:	4313      	orrs	r3, r2
 800f8ca:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800f8cc:	4b14      	ldr	r3, [pc, #80]	; (800f920 <RCCEx_PLLSAI1_Config+0x1d8>)
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	4a13      	ldr	r2, [pc, #76]	; (800f920 <RCCEx_PLLSAI1_Config+0x1d8>)
 800f8d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f8d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f8d8:	f7fd fd08 	bl	800d2ec <HAL_GetTick>
 800f8dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800f8de:	e009      	b.n	800f8f4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800f8e0:	f7fd fd04 	bl	800d2ec <HAL_GetTick>
 800f8e4:	4602      	mov	r2, r0
 800f8e6:	68bb      	ldr	r3, [r7, #8]
 800f8e8:	1ad3      	subs	r3, r2, r3
 800f8ea:	2b02      	cmp	r3, #2
 800f8ec:	d902      	bls.n	800f8f4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800f8ee:	2303      	movs	r3, #3
 800f8f0:	73fb      	strb	r3, [r7, #15]
          break;
 800f8f2:	e005      	b.n	800f900 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800f8f4:	4b0a      	ldr	r3, [pc, #40]	; (800f920 <RCCEx_PLLSAI1_Config+0x1d8>)
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d0ef      	beq.n	800f8e0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800f900:	7bfb      	ldrb	r3, [r7, #15]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d106      	bne.n	800f914 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800f906:	4b06      	ldr	r3, [pc, #24]	; (800f920 <RCCEx_PLLSAI1_Config+0x1d8>)
 800f908:	691a      	ldr	r2, [r3, #16]
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	699b      	ldr	r3, [r3, #24]
 800f90e:	4904      	ldr	r1, [pc, #16]	; (800f920 <RCCEx_PLLSAI1_Config+0x1d8>)
 800f910:	4313      	orrs	r3, r2
 800f912:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800f914:	7bfb      	ldrb	r3, [r7, #15]
}
 800f916:	4618      	mov	r0, r3
 800f918:	3710      	adds	r7, #16
 800f91a:	46bd      	mov	sp, r7
 800f91c:	bd80      	pop	{r7, pc}
 800f91e:	bf00      	nop
 800f920:	40021000 	.word	0x40021000
 800f924:	07ff800f 	.word	0x07ff800f
 800f928:	ff9f800f 	.word	0xff9f800f
 800f92c:	f9ff800f 	.word	0xf9ff800f

0800f930 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800f930:	b580      	push	{r7, lr}
 800f932:	b084      	sub	sp, #16
 800f934:	af00      	add	r7, sp, #0
 800f936:	6078      	str	r0, [r7, #4]
 800f938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f93a:	2300      	movs	r3, #0
 800f93c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800f93e:	4b72      	ldr	r3, [pc, #456]	; (800fb08 <RCCEx_PLLSAI2_Config+0x1d8>)
 800f940:	68db      	ldr	r3, [r3, #12]
 800f942:	f003 0303 	and.w	r3, r3, #3
 800f946:	2b00      	cmp	r3, #0
 800f948:	d00e      	beq.n	800f968 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800f94a:	4b6f      	ldr	r3, [pc, #444]	; (800fb08 <RCCEx_PLLSAI2_Config+0x1d8>)
 800f94c:	68db      	ldr	r3, [r3, #12]
 800f94e:	f003 0203 	and.w	r2, r3, #3
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	429a      	cmp	r2, r3
 800f958:	d103      	bne.n	800f962 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	681b      	ldr	r3, [r3, #0]
       ||
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d142      	bne.n	800f9e8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800f962:	2301      	movs	r3, #1
 800f964:	73fb      	strb	r3, [r7, #15]
 800f966:	e03f      	b.n	800f9e8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	2b03      	cmp	r3, #3
 800f96e:	d018      	beq.n	800f9a2 <RCCEx_PLLSAI2_Config+0x72>
 800f970:	2b03      	cmp	r3, #3
 800f972:	d825      	bhi.n	800f9c0 <RCCEx_PLLSAI2_Config+0x90>
 800f974:	2b01      	cmp	r3, #1
 800f976:	d002      	beq.n	800f97e <RCCEx_PLLSAI2_Config+0x4e>
 800f978:	2b02      	cmp	r3, #2
 800f97a:	d009      	beq.n	800f990 <RCCEx_PLLSAI2_Config+0x60>
 800f97c:	e020      	b.n	800f9c0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800f97e:	4b62      	ldr	r3, [pc, #392]	; (800fb08 <RCCEx_PLLSAI2_Config+0x1d8>)
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	f003 0302 	and.w	r3, r3, #2
 800f986:	2b00      	cmp	r3, #0
 800f988:	d11d      	bne.n	800f9c6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800f98a:	2301      	movs	r3, #1
 800f98c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f98e:	e01a      	b.n	800f9c6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800f990:	4b5d      	ldr	r3, [pc, #372]	; (800fb08 <RCCEx_PLLSAI2_Config+0x1d8>)
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d116      	bne.n	800f9ca <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800f99c:	2301      	movs	r3, #1
 800f99e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f9a0:	e013      	b.n	800f9ca <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800f9a2:	4b59      	ldr	r3, [pc, #356]	; (800fb08 <RCCEx_PLLSAI2_Config+0x1d8>)
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d10f      	bne.n	800f9ce <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800f9ae:	4b56      	ldr	r3, [pc, #344]	; (800fb08 <RCCEx_PLLSAI2_Config+0x1d8>)
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d109      	bne.n	800f9ce <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800f9ba:	2301      	movs	r3, #1
 800f9bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f9be:	e006      	b.n	800f9ce <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800f9c0:	2301      	movs	r3, #1
 800f9c2:	73fb      	strb	r3, [r7, #15]
      break;
 800f9c4:	e004      	b.n	800f9d0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800f9c6:	bf00      	nop
 800f9c8:	e002      	b.n	800f9d0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800f9ca:	bf00      	nop
 800f9cc:	e000      	b.n	800f9d0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800f9ce:	bf00      	nop
    }

    if(status == HAL_OK)
 800f9d0:	7bfb      	ldrb	r3, [r7, #15]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d108      	bne.n	800f9e8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800f9d6:	4b4c      	ldr	r3, [pc, #304]	; (800fb08 <RCCEx_PLLSAI2_Config+0x1d8>)
 800f9d8:	68db      	ldr	r3, [r3, #12]
 800f9da:	f023 0203 	bic.w	r2, r3, #3
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	4949      	ldr	r1, [pc, #292]	; (800fb08 <RCCEx_PLLSAI2_Config+0x1d8>)
 800f9e4:	4313      	orrs	r3, r2
 800f9e6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800f9e8:	7bfb      	ldrb	r3, [r7, #15]
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	f040 8086 	bne.w	800fafc <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800f9f0:	4b45      	ldr	r3, [pc, #276]	; (800fb08 <RCCEx_PLLSAI2_Config+0x1d8>)
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	4a44      	ldr	r2, [pc, #272]	; (800fb08 <RCCEx_PLLSAI2_Config+0x1d8>)
 800f9f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f9fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f9fc:	f7fd fc76 	bl	800d2ec <HAL_GetTick>
 800fa00:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800fa02:	e009      	b.n	800fa18 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800fa04:	f7fd fc72 	bl	800d2ec <HAL_GetTick>
 800fa08:	4602      	mov	r2, r0
 800fa0a:	68bb      	ldr	r3, [r7, #8]
 800fa0c:	1ad3      	subs	r3, r2, r3
 800fa0e:	2b02      	cmp	r3, #2
 800fa10:	d902      	bls.n	800fa18 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800fa12:	2303      	movs	r3, #3
 800fa14:	73fb      	strb	r3, [r7, #15]
        break;
 800fa16:	e005      	b.n	800fa24 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800fa18:	4b3b      	ldr	r3, [pc, #236]	; (800fb08 <RCCEx_PLLSAI2_Config+0x1d8>)
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d1ef      	bne.n	800fa04 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800fa24:	7bfb      	ldrb	r3, [r7, #15]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d168      	bne.n	800fafc <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800fa2a:	683b      	ldr	r3, [r7, #0]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d113      	bne.n	800fa58 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800fa30:	4b35      	ldr	r3, [pc, #212]	; (800fb08 <RCCEx_PLLSAI2_Config+0x1d8>)
 800fa32:	695a      	ldr	r2, [r3, #20]
 800fa34:	4b35      	ldr	r3, [pc, #212]	; (800fb0c <RCCEx_PLLSAI2_Config+0x1dc>)
 800fa36:	4013      	ands	r3, r2
 800fa38:	687a      	ldr	r2, [r7, #4]
 800fa3a:	6892      	ldr	r2, [r2, #8]
 800fa3c:	0211      	lsls	r1, r2, #8
 800fa3e:	687a      	ldr	r2, [r7, #4]
 800fa40:	68d2      	ldr	r2, [r2, #12]
 800fa42:	06d2      	lsls	r2, r2, #27
 800fa44:	4311      	orrs	r1, r2
 800fa46:	687a      	ldr	r2, [r7, #4]
 800fa48:	6852      	ldr	r2, [r2, #4]
 800fa4a:	3a01      	subs	r2, #1
 800fa4c:	0112      	lsls	r2, r2, #4
 800fa4e:	430a      	orrs	r2, r1
 800fa50:	492d      	ldr	r1, [pc, #180]	; (800fb08 <RCCEx_PLLSAI2_Config+0x1d8>)
 800fa52:	4313      	orrs	r3, r2
 800fa54:	614b      	str	r3, [r1, #20]
 800fa56:	e02d      	b.n	800fab4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800fa58:	683b      	ldr	r3, [r7, #0]
 800fa5a:	2b01      	cmp	r3, #1
 800fa5c:	d115      	bne.n	800fa8a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800fa5e:	4b2a      	ldr	r3, [pc, #168]	; (800fb08 <RCCEx_PLLSAI2_Config+0x1d8>)
 800fa60:	695a      	ldr	r2, [r3, #20]
 800fa62:	4b2b      	ldr	r3, [pc, #172]	; (800fb10 <RCCEx_PLLSAI2_Config+0x1e0>)
 800fa64:	4013      	ands	r3, r2
 800fa66:	687a      	ldr	r2, [r7, #4]
 800fa68:	6892      	ldr	r2, [r2, #8]
 800fa6a:	0211      	lsls	r1, r2, #8
 800fa6c:	687a      	ldr	r2, [r7, #4]
 800fa6e:	6912      	ldr	r2, [r2, #16]
 800fa70:	0852      	lsrs	r2, r2, #1
 800fa72:	3a01      	subs	r2, #1
 800fa74:	0552      	lsls	r2, r2, #21
 800fa76:	4311      	orrs	r1, r2
 800fa78:	687a      	ldr	r2, [r7, #4]
 800fa7a:	6852      	ldr	r2, [r2, #4]
 800fa7c:	3a01      	subs	r2, #1
 800fa7e:	0112      	lsls	r2, r2, #4
 800fa80:	430a      	orrs	r2, r1
 800fa82:	4921      	ldr	r1, [pc, #132]	; (800fb08 <RCCEx_PLLSAI2_Config+0x1d8>)
 800fa84:	4313      	orrs	r3, r2
 800fa86:	614b      	str	r3, [r1, #20]
 800fa88:	e014      	b.n	800fab4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800fa8a:	4b1f      	ldr	r3, [pc, #124]	; (800fb08 <RCCEx_PLLSAI2_Config+0x1d8>)
 800fa8c:	695a      	ldr	r2, [r3, #20]
 800fa8e:	4b21      	ldr	r3, [pc, #132]	; (800fb14 <RCCEx_PLLSAI2_Config+0x1e4>)
 800fa90:	4013      	ands	r3, r2
 800fa92:	687a      	ldr	r2, [r7, #4]
 800fa94:	6892      	ldr	r2, [r2, #8]
 800fa96:	0211      	lsls	r1, r2, #8
 800fa98:	687a      	ldr	r2, [r7, #4]
 800fa9a:	6952      	ldr	r2, [r2, #20]
 800fa9c:	0852      	lsrs	r2, r2, #1
 800fa9e:	3a01      	subs	r2, #1
 800faa0:	0652      	lsls	r2, r2, #25
 800faa2:	4311      	orrs	r1, r2
 800faa4:	687a      	ldr	r2, [r7, #4]
 800faa6:	6852      	ldr	r2, [r2, #4]
 800faa8:	3a01      	subs	r2, #1
 800faaa:	0112      	lsls	r2, r2, #4
 800faac:	430a      	orrs	r2, r1
 800faae:	4916      	ldr	r1, [pc, #88]	; (800fb08 <RCCEx_PLLSAI2_Config+0x1d8>)
 800fab0:	4313      	orrs	r3, r2
 800fab2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800fab4:	4b14      	ldr	r3, [pc, #80]	; (800fb08 <RCCEx_PLLSAI2_Config+0x1d8>)
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	4a13      	ldr	r2, [pc, #76]	; (800fb08 <RCCEx_PLLSAI2_Config+0x1d8>)
 800faba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fabe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fac0:	f7fd fc14 	bl	800d2ec <HAL_GetTick>
 800fac4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800fac6:	e009      	b.n	800fadc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800fac8:	f7fd fc10 	bl	800d2ec <HAL_GetTick>
 800facc:	4602      	mov	r2, r0
 800face:	68bb      	ldr	r3, [r7, #8]
 800fad0:	1ad3      	subs	r3, r2, r3
 800fad2:	2b02      	cmp	r3, #2
 800fad4:	d902      	bls.n	800fadc <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800fad6:	2303      	movs	r3, #3
 800fad8:	73fb      	strb	r3, [r7, #15]
          break;
 800fada:	e005      	b.n	800fae8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800fadc:	4b0a      	ldr	r3, [pc, #40]	; (800fb08 <RCCEx_PLLSAI2_Config+0x1d8>)
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d0ef      	beq.n	800fac8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800fae8:	7bfb      	ldrb	r3, [r7, #15]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d106      	bne.n	800fafc <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800faee:	4b06      	ldr	r3, [pc, #24]	; (800fb08 <RCCEx_PLLSAI2_Config+0x1d8>)
 800faf0:	695a      	ldr	r2, [r3, #20]
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	699b      	ldr	r3, [r3, #24]
 800faf6:	4904      	ldr	r1, [pc, #16]	; (800fb08 <RCCEx_PLLSAI2_Config+0x1d8>)
 800faf8:	4313      	orrs	r3, r2
 800fafa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800fafc:	7bfb      	ldrb	r3, [r7, #15]
}
 800fafe:	4618      	mov	r0, r3
 800fb00:	3710      	adds	r7, #16
 800fb02:	46bd      	mov	sp, r7
 800fb04:	bd80      	pop	{r7, pc}
 800fb06:	bf00      	nop
 800fb08:	40021000 	.word	0x40021000
 800fb0c:	07ff800f 	.word	0x07ff800f
 800fb10:	ff9f800f 	.word	0xff9f800f
 800fb14:	f9ff800f 	.word	0xf9ff800f

0800fb18 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b084      	sub	sp, #16
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800fb20:	2301      	movs	r3, #1
 800fb22:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d07f      	beq.n	800fc2a <HAL_RTC_Init+0x112>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fb30:	b2db      	uxtb	r3, r3
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d106      	bne.n	800fb44 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	2200      	movs	r2, #0
 800fb3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800fb3e:	6878      	ldr	r0, [r7, #4]
 800fb40:	f7fc fcd2 	bl	800c4e8 <HAL_RTC_MspInit>
    }
#endif /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800fb4a:	605a      	str	r2, [r3, #4]
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	2202      	movs	r2, #2
 800fb50:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	22ca      	movs	r2, #202	; 0xca
 800fb5a:	625a      	str	r2, [r3, #36]	; 0x24
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	2253      	movs	r2, #83	; 0x53
 800fb62:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800fb64:	6878      	ldr	r0, [r7, #4]
 800fb66:	f000 fa65 	bl	8010034 <RTC_EnterInitMode>
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800fb6e:	7bfb      	ldrb	r3, [r7, #15]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d15a      	bne.n	800fc2a <HAL_RTC_Init+0x112>
    {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	699b      	ldr	r3, [r3, #24]
 800fb7a:	687a      	ldr	r2, [r7, #4]
 800fb7c:	6812      	ldr	r2, [r2, #0]
 800fb7e:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800fb82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fb86:	6193      	str	r3, [r2, #24]
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	6999      	ldr	r1, [r3, #24]
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	689a      	ldr	r2, [r3, #8]
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	695b      	ldr	r3, [r3, #20]
 800fb96:	431a      	orrs	r2, r3
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	69db      	ldr	r3, [r3, #28]
 800fb9c:	431a      	orrs	r2, r3
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	430a      	orrs	r2, r1
 800fba4:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	687a      	ldr	r2, [r7, #4]
 800fbac:	6912      	ldr	r2, [r2, #16]
 800fbae:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	6919      	ldr	r1, [r3, #16]
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	68db      	ldr	r3, [r3, #12]
 800fbba:	041a      	lsls	r2, r3, #16
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	430a      	orrs	r2, r1
 800fbc2:	611a      	str	r2, [r3, #16]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800fbc4:	4b1b      	ldr	r3, [pc, #108]	; (800fc34 <HAL_RTC_Init+0x11c>)
 800fbc6:	68db      	ldr	r3, [r3, #12]
 800fbc8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbd4:	430b      	orrs	r3, r1
 800fbd6:	4917      	ldr	r1, [pc, #92]	; (800fc34 <HAL_RTC_Init+0x11c>)
 800fbd8:	4313      	orrs	r3, r2
 800fbda:	60cb      	str	r3, [r1, #12]
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800fbdc:	6878      	ldr	r0, [r7, #4]
 800fbde:	f000 fa5f 	bl	80100a0 <RTC_ExitInitMode>
 800fbe2:	4603      	mov	r3, r0
 800fbe4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800fbe6:	7bfb      	ldrb	r3, [r7, #15]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d11e      	bne.n	800fc2a <HAL_RTC_Init+0x112>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	699a      	ldr	r2, [r3, #24]
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800fbfa:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	6999      	ldr	r1, [r3, #24]
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	6a1b      	ldr	r3, [r3, #32]
 800fc0a:	431a      	orrs	r2, r3
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	699b      	ldr	r3, [r3, #24]
 800fc10:	431a      	orrs	r2, r3
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	430a      	orrs	r2, r1
 800fc18:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	22ff      	movs	r2, #255	; 0xff
 800fc20:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	2201      	movs	r2, #1
 800fc26:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      }
    }
  }

  return status;
 800fc2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	3710      	adds	r7, #16
 800fc30:	46bd      	mov	sp, r7
 800fc32:	bd80      	pop	{r7, pc}
 800fc34:	40002800 	.word	0x40002800

0800fc38 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800fc38:	b590      	push	{r4, r7, lr}
 800fc3a:	b087      	sub	sp, #28
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	60f8      	str	r0, [r7, #12]
 800fc40:	60b9      	str	r1, [r7, #8]
 800fc42:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fc4a:	2b01      	cmp	r3, #1
 800fc4c:	d101      	bne.n	800fc52 <HAL_RTC_SetTime+0x1a>
 800fc4e:	2302      	movs	r3, #2
 800fc50:	e08b      	b.n	800fd6a <HAL_RTC_SetTime+0x132>
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	2201      	movs	r2, #1
 800fc56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  hrtc->State = HAL_RTC_STATE_BUSY;
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	2202      	movs	r2, #2
 800fc5e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	22ca      	movs	r2, #202	; 0xca
 800fc68:	625a      	str	r2, [r3, #36]	; 0x24
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	2253      	movs	r2, #83	; 0x53
 800fc70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800fc72:	68f8      	ldr	r0, [r7, #12]
 800fc74:	f000 f9de 	bl	8010034 <RTC_EnterInitMode>
 800fc78:	4603      	mov	r3, r0
 800fc7a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800fc7c:	7cfb      	ldrb	r3, [r7, #19]
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d15e      	bne.n	800fd40 <HAL_RTC_SetTime+0x108>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800fc82:	4b3c      	ldr	r3, [pc, #240]	; (800fd74 <HAL_RTC_SetTime+0x13c>)
 800fc84:	68db      	ldr	r3, [r3, #12]
 800fc86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fc8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fc8e:	d057      	beq.n	800fd40 <HAL_RTC_SetTime+0x108>
    {
      if (Format == RTC_FORMAT_BIN)
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d125      	bne.n	800fce2 <HAL_RTC_SetTime+0xaa>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800fc96:	4b37      	ldr	r3, [pc, #220]	; (800fd74 <HAL_RTC_SetTime+0x13c>)
 800fc98:	699b      	ldr	r3, [r3, #24]
 800fc9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d102      	bne.n	800fca8 <HAL_RTC_SetTime+0x70>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800fca2:	68bb      	ldr	r3, [r7, #8]
 800fca4:	2200      	movs	r2, #0
 800fca6:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800fca8:	68bb      	ldr	r3, [r7, #8]
 800fcaa:	781b      	ldrb	r3, [r3, #0]
 800fcac:	4618      	mov	r0, r3
 800fcae:	f000 fa35 	bl	801011c <RTC_ByteToBcd2>
 800fcb2:	4603      	mov	r3, r0
 800fcb4:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800fcb6:	68bb      	ldr	r3, [r7, #8]
 800fcb8:	785b      	ldrb	r3, [r3, #1]
 800fcba:	4618      	mov	r0, r3
 800fcbc:	f000 fa2e 	bl	801011c <RTC_ByteToBcd2>
 800fcc0:	4603      	mov	r3, r0
 800fcc2:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800fcc4:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800fcc6:	68bb      	ldr	r3, [r7, #8]
 800fcc8:	789b      	ldrb	r3, [r3, #2]
 800fcca:	4618      	mov	r0, r3
 800fccc:	f000 fa26 	bl	801011c <RTC_ByteToBcd2>
 800fcd0:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800fcd2:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800fcd6:	68bb      	ldr	r3, [r7, #8]
 800fcd8:	78db      	ldrb	r3, [r3, #3]
 800fcda:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800fcdc:	4313      	orrs	r3, r2
 800fcde:	617b      	str	r3, [r7, #20]
 800fce0:	e017      	b.n	800fd12 <HAL_RTC_SetTime+0xda>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800fce2:	4b24      	ldr	r3, [pc, #144]	; (800fd74 <HAL_RTC_SetTime+0x13c>)
 800fce4:	699b      	ldr	r3, [r3, #24]
 800fce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d102      	bne.n	800fcf4 <HAL_RTC_SetTime+0xbc>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800fcee:	68bb      	ldr	r3, [r7, #8]
 800fcf0:	2200      	movs	r2, #0
 800fcf2:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800fcf4:	68bb      	ldr	r3, [r7, #8]
 800fcf6:	781b      	ldrb	r3, [r3, #0]
 800fcf8:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800fcfa:	68bb      	ldr	r3, [r7, #8]
 800fcfc:	785b      	ldrb	r3, [r3, #1]
 800fcfe:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800fd00:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800fd02:	68ba      	ldr	r2, [r7, #8]
 800fd04:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800fd06:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800fd08:	68bb      	ldr	r3, [r7, #8]
 800fd0a:	78db      	ldrb	r3, [r3, #3]
 800fd0c:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800fd0e:	4313      	orrs	r3, r2
 800fd10:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800fd12:	4a18      	ldr	r2, [pc, #96]	; (800fd74 <HAL_RTC_SetTime+0x13c>)
 800fd14:	697b      	ldr	r3, [r7, #20]
 800fd16:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800fd1a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800fd1e:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800fd20:	4b14      	ldr	r3, [pc, #80]	; (800fd74 <HAL_RTC_SetTime+0x13c>)
 800fd22:	699b      	ldr	r3, [r3, #24]
 800fd24:	4a13      	ldr	r2, [pc, #76]	; (800fd74 <HAL_RTC_SetTime+0x13c>)
 800fd26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fd2a:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 800fd2c:	4b11      	ldr	r3, [pc, #68]	; (800fd74 <HAL_RTC_SetTime+0x13c>)
 800fd2e:	699a      	ldr	r2, [r3, #24]
 800fd30:	68bb      	ldr	r3, [r7, #8]
 800fd32:	68d9      	ldr	r1, [r3, #12]
 800fd34:	68bb      	ldr	r3, [r7, #8]
 800fd36:	691b      	ldr	r3, [r3, #16]
 800fd38:	430b      	orrs	r3, r1
 800fd3a:	490e      	ldr	r1, [pc, #56]	; (800fd74 <HAL_RTC_SetTime+0x13c>)
 800fd3c:	4313      	orrs	r3, r2
 800fd3e:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 800fd40:	68f8      	ldr	r0, [r7, #12]
 800fd42:	f000 f9ad 	bl	80100a0 <RTC_ExitInitMode>
 800fd46:	4603      	mov	r3, r0
 800fd48:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	22ff      	movs	r2, #255	; 0xff
 800fd50:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800fd52:	7cfb      	ldrb	r3, [r7, #19]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d103      	bne.n	800fd60 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	2201      	movs	r2, #1
 800fd5c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	2200      	movs	r2, #0
 800fd64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800fd68:	7cfb      	ldrb	r3, [r7, #19]
}
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	371c      	adds	r7, #28
 800fd6e:	46bd      	mov	sp, r7
 800fd70:	bd90      	pop	{r4, r7, pc}
 800fd72:	bf00      	nop
 800fd74:	40002800 	.word	0x40002800

0800fd78 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b086      	sub	sp, #24
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	60f8      	str	r0, [r7, #12]
 800fd80:	60b9      	str	r1, [r7, #8]
 800fd82:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 800fd84:	4b2c      	ldr	r3, [pc, #176]	; (800fe38 <HAL_RTC_GetTime+0xc0>)
 800fd86:	689a      	ldr	r2, [r3, #8]
 800fd88:	68bb      	ldr	r3, [r7, #8]
 800fd8a:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800fd8c:	4b2a      	ldr	r3, [pc, #168]	; (800fe38 <HAL_RTC_GetTime+0xc0>)
 800fd8e:	68db      	ldr	r3, [r3, #12]
 800fd90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fd94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fd98:	d049      	beq.n	800fe2e <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 800fd9a:	4b27      	ldr	r3, [pc, #156]	; (800fe38 <HAL_RTC_GetTime+0xc0>)
 800fd9c:	691b      	ldr	r3, [r3, #16]
 800fd9e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800fda2:	68bb      	ldr	r3, [r7, #8]
 800fda4:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 800fda6:	4b24      	ldr	r3, [pc, #144]	; (800fe38 <HAL_RTC_GetTime+0xc0>)
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800fdae:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800fdb2:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800fdb4:	697b      	ldr	r3, [r7, #20]
 800fdb6:	0c1b      	lsrs	r3, r3, #16
 800fdb8:	b2db      	uxtb	r3, r3
 800fdba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fdbe:	b2da      	uxtb	r2, r3
 800fdc0:	68bb      	ldr	r3, [r7, #8]
 800fdc2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800fdc4:	697b      	ldr	r3, [r7, #20]
 800fdc6:	0a1b      	lsrs	r3, r3, #8
 800fdc8:	b2db      	uxtb	r3, r3
 800fdca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fdce:	b2da      	uxtb	r2, r3
 800fdd0:	68bb      	ldr	r3, [r7, #8]
 800fdd2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800fdd4:	697b      	ldr	r3, [r7, #20]
 800fdd6:	b2db      	uxtb	r3, r3
 800fdd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fddc:	b2da      	uxtb	r2, r3
 800fdde:	68bb      	ldr	r3, [r7, #8]
 800fde0:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800fde2:	697b      	ldr	r3, [r7, #20]
 800fde4:	0d9b      	lsrs	r3, r3, #22
 800fde6:	b2db      	uxtb	r3, r3
 800fde8:	f003 0301 	and.w	r3, r3, #1
 800fdec:	b2da      	uxtb	r2, r3
 800fdee:	68bb      	ldr	r3, [r7, #8]
 800fdf0:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d11a      	bne.n	800fe2e <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800fdf8:	68bb      	ldr	r3, [r7, #8]
 800fdfa:	781b      	ldrb	r3, [r3, #0]
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	f000 f9ad 	bl	801015c <RTC_Bcd2ToByte>
 800fe02:	4603      	mov	r3, r0
 800fe04:	461a      	mov	r2, r3
 800fe06:	68bb      	ldr	r3, [r7, #8]
 800fe08:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800fe0a:	68bb      	ldr	r3, [r7, #8]
 800fe0c:	785b      	ldrb	r3, [r3, #1]
 800fe0e:	4618      	mov	r0, r3
 800fe10:	f000 f9a4 	bl	801015c <RTC_Bcd2ToByte>
 800fe14:	4603      	mov	r3, r0
 800fe16:	461a      	mov	r2, r3
 800fe18:	68bb      	ldr	r3, [r7, #8]
 800fe1a:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800fe1c:	68bb      	ldr	r3, [r7, #8]
 800fe1e:	789b      	ldrb	r3, [r3, #2]
 800fe20:	4618      	mov	r0, r3
 800fe22:	f000 f99b 	bl	801015c <RTC_Bcd2ToByte>
 800fe26:	4603      	mov	r3, r0
 800fe28:	461a      	mov	r2, r3
 800fe2a:	68bb      	ldr	r3, [r7, #8]
 800fe2c:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 800fe2e:	2300      	movs	r3, #0
}
 800fe30:	4618      	mov	r0, r3
 800fe32:	3718      	adds	r7, #24
 800fe34:	46bd      	mov	sp, r7
 800fe36:	bd80      	pop	{r7, pc}
 800fe38:	40002800 	.word	0x40002800

0800fe3c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800fe3c:	b590      	push	{r4, r7, lr}
 800fe3e:	b087      	sub	sp, #28
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	60f8      	str	r0, [r7, #12]
 800fe44:	60b9      	str	r1, [r7, #8]
 800fe46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fe4e:	2b01      	cmp	r3, #1
 800fe50:	d101      	bne.n	800fe56 <HAL_RTC_SetDate+0x1a>
 800fe52:	2302      	movs	r3, #2
 800fe54:	e074      	b.n	800ff40 <HAL_RTC_SetDate+0x104>
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	2201      	movs	r2, #1
 800fe5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  hrtc->State = HAL_RTC_STATE_BUSY;
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	2202      	movs	r2, #2
 800fe62:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d10e      	bne.n	800fe8a <HAL_RTC_SetDate+0x4e>
 800fe6c:	68bb      	ldr	r3, [r7, #8]
 800fe6e:	785b      	ldrb	r3, [r3, #1]
 800fe70:	f003 0310 	and.w	r3, r3, #16
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d008      	beq.n	800fe8a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800fe78:	68bb      	ldr	r3, [r7, #8]
 800fe7a:	785b      	ldrb	r3, [r3, #1]
 800fe7c:	f023 0310 	bic.w	r3, r3, #16
 800fe80:	b2db      	uxtb	r3, r3
 800fe82:	330a      	adds	r3, #10
 800fe84:	b2da      	uxtb	r2, r3
 800fe86:	68bb      	ldr	r3, [r7, #8]
 800fe88:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d11c      	bne.n	800feca <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800fe90:	68bb      	ldr	r3, [r7, #8]
 800fe92:	78db      	ldrb	r3, [r3, #3]
 800fe94:	4618      	mov	r0, r3
 800fe96:	f000 f941 	bl	801011c <RTC_ByteToBcd2>
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800fe9e:	68bb      	ldr	r3, [r7, #8]
 800fea0:	785b      	ldrb	r3, [r3, #1]
 800fea2:	4618      	mov	r0, r3
 800fea4:	f000 f93a 	bl	801011c <RTC_ByteToBcd2>
 800fea8:	4603      	mov	r3, r0
 800feaa:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800feac:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800feae:	68bb      	ldr	r3, [r7, #8]
 800feb0:	789b      	ldrb	r3, [r3, #2]
 800feb2:	4618      	mov	r0, r3
 800feb4:	f000 f932 	bl	801011c <RTC_ByteToBcd2>
 800feb8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800feba:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800febe:	68bb      	ldr	r3, [r7, #8]
 800fec0:	781b      	ldrb	r3, [r3, #0]
 800fec2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800fec4:	4313      	orrs	r3, r2
 800fec6:	617b      	str	r3, [r7, #20]
 800fec8:	e00e      	b.n	800fee8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800feca:	68bb      	ldr	r3, [r7, #8]
 800fecc:	78db      	ldrb	r3, [r3, #3]
 800fece:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800fed0:	68bb      	ldr	r3, [r7, #8]
 800fed2:	785b      	ldrb	r3, [r3, #1]
 800fed4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800fed6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800fed8:	68ba      	ldr	r2, [r7, #8]
 800feda:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800fedc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800fede:	68bb      	ldr	r3, [r7, #8]
 800fee0:	781b      	ldrb	r3, [r3, #0]
 800fee2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800fee4:	4313      	orrs	r3, r2
 800fee6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	22ca      	movs	r2, #202	; 0xca
 800feee:	625a      	str	r2, [r3, #36]	; 0x24
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	2253      	movs	r2, #83	; 0x53
 800fef6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800fef8:	68f8      	ldr	r0, [r7, #12]
 800fefa:	f000 f89b 	bl	8010034 <RTC_EnterInitMode>
 800fefe:	4603      	mov	r3, r0
 800ff00:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800ff02:	7cfb      	ldrb	r3, [r7, #19]
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d10b      	bne.n	800ff20 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800ff08:	4a0f      	ldr	r2, [pc, #60]	; (800ff48 <HAL_RTC_SetDate+0x10c>)
 800ff0a:	697b      	ldr	r3, [r7, #20]
 800ff0c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ff10:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ff14:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ff16:	68f8      	ldr	r0, [r7, #12]
 800ff18:	f000 f8c2 	bl	80100a0 <RTC_ExitInitMode>
 800ff1c:	4603      	mov	r3, r0
 800ff1e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	22ff      	movs	r2, #255	; 0xff
 800ff26:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800ff28:	7cfb      	ldrb	r3, [r7, #19]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d103      	bne.n	800ff36 <HAL_RTC_SetDate+0xfa>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	2201      	movs	r2, #1
 800ff32:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	2200      	movs	r2, #0
 800ff3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800ff3e:	7cfb      	ldrb	r3, [r7, #19]
}
 800ff40:	4618      	mov	r0, r3
 800ff42:	371c      	adds	r7, #28
 800ff44:	46bd      	mov	sp, r7
 800ff46:	bd90      	pop	{r4, r7, pc}
 800ff48:	40002800 	.word	0x40002800

0800ff4c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b086      	sub	sp, #24
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	60f8      	str	r0, [r7, #12]
 800ff54:	60b9      	str	r1, [r7, #8]
 800ff56:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 800ff58:	4b22      	ldr	r3, [pc, #136]	; (800ffe4 <HAL_RTC_GetDate+0x98>)
 800ff5a:	685b      	ldr	r3, [r3, #4]
 800ff5c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ff60:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ff64:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800ff66:	697b      	ldr	r3, [r7, #20]
 800ff68:	0c1b      	lsrs	r3, r3, #16
 800ff6a:	b2da      	uxtb	r2, r3
 800ff6c:	68bb      	ldr	r3, [r7, #8]
 800ff6e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800ff70:	697b      	ldr	r3, [r7, #20]
 800ff72:	0a1b      	lsrs	r3, r3, #8
 800ff74:	b2db      	uxtb	r3, r3
 800ff76:	f003 031f 	and.w	r3, r3, #31
 800ff7a:	b2da      	uxtb	r2, r3
 800ff7c:	68bb      	ldr	r3, [r7, #8]
 800ff7e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800ff80:	697b      	ldr	r3, [r7, #20]
 800ff82:	b2db      	uxtb	r3, r3
 800ff84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ff88:	b2da      	uxtb	r2, r3
 800ff8a:	68bb      	ldr	r3, [r7, #8]
 800ff8c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800ff8e:	697b      	ldr	r3, [r7, #20]
 800ff90:	0b5b      	lsrs	r3, r3, #13
 800ff92:	b2db      	uxtb	r3, r3
 800ff94:	f003 0307 	and.w	r3, r3, #7
 800ff98:	b2da      	uxtb	r2, r3
 800ff9a:	68bb      	ldr	r3, [r7, #8]
 800ff9c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d11a      	bne.n	800ffda <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800ffa4:	68bb      	ldr	r3, [r7, #8]
 800ffa6:	78db      	ldrb	r3, [r3, #3]
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	f000 f8d7 	bl	801015c <RTC_Bcd2ToByte>
 800ffae:	4603      	mov	r3, r0
 800ffb0:	461a      	mov	r2, r3
 800ffb2:	68bb      	ldr	r3, [r7, #8]
 800ffb4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800ffb6:	68bb      	ldr	r3, [r7, #8]
 800ffb8:	785b      	ldrb	r3, [r3, #1]
 800ffba:	4618      	mov	r0, r3
 800ffbc:	f000 f8ce 	bl	801015c <RTC_Bcd2ToByte>
 800ffc0:	4603      	mov	r3, r0
 800ffc2:	461a      	mov	r2, r3
 800ffc4:	68bb      	ldr	r3, [r7, #8]
 800ffc6:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800ffc8:	68bb      	ldr	r3, [r7, #8]
 800ffca:	789b      	ldrb	r3, [r3, #2]
 800ffcc:	4618      	mov	r0, r3
 800ffce:	f000 f8c5 	bl	801015c <RTC_Bcd2ToByte>
 800ffd2:	4603      	mov	r3, r0
 800ffd4:	461a      	mov	r2, r3
 800ffd6:	68bb      	ldr	r3, [r7, #8]
 800ffd8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800ffda:	2300      	movs	r3, #0
}
 800ffdc:	4618      	mov	r0, r3
 800ffde:	3718      	adds	r7, #24
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	bd80      	pop	{r7, pc}
 800ffe4:	40002800 	.word	0x40002800

0800ffe8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800ffe8:	b580      	push	{r7, lr}
 800ffea:	b084      	sub	sp, #16
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	68da      	ldr	r2, [r3, #12]
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800fffe:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
#endif

  tickstart = HAL_GetTick();
 8010000:	f7fd f974 	bl	800d2ec <HAL_GetTick>
 8010004:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8010006:	e009      	b.n	801001c <HAL_RTC_WaitForSynchro+0x34>
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8010008:	f7fd f970 	bl	800d2ec <HAL_GetTick>
 801000c:	4602      	mov	r2, r0
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	1ad3      	subs	r3, r2, r3
 8010012:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010016:	d901      	bls.n	801001c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8010018:	2303      	movs	r3, #3
 801001a:	e007      	b.n	801002c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	68db      	ldr	r3, [r3, #12]
 8010022:	f003 0320 	and.w	r3, r3, #32
 8010026:	2b00      	cmp	r3, #0
 8010028:	d0ee      	beq.n	8010008 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 801002a:	2300      	movs	r3, #0
}
 801002c:	4618      	mov	r0, r3
 801002e:	3710      	adds	r7, #16
 8010030:	46bd      	mov	sp, r7
 8010032:	bd80      	pop	{r7, pc}

08010034 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8010034:	b580      	push	{r7, lr}
 8010036:	b084      	sub	sp, #16
 8010038:	af00      	add	r7, sp, #0
 801003a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801003c:	2300      	movs	r3, #0
 801003e:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	68db      	ldr	r3, [r3, #12]
 8010046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801004a:	2b00      	cmp	r3, #0
 801004c:	d123      	bne.n	8010096 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	68da      	ldr	r2, [r3, #12]
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801005c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 801005e:	f7fd f945 	bl	800d2ec <HAL_GetTick>
 8010062:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8010064:	e00d      	b.n	8010082 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8010066:	f7fd f941 	bl	800d2ec <HAL_GetTick>
 801006a:	4602      	mov	r2, r0
 801006c:	68bb      	ldr	r3, [r7, #8]
 801006e:	1ad3      	subs	r3, r2, r3
 8010070:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010074:	d905      	bls.n	8010082 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8010076:	2303      	movs	r3, #3
 8010078:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	2203      	movs	r2, #3
 801007e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	68db      	ldr	r3, [r3, #12]
 8010088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801008c:	2b00      	cmp	r3, #0
 801008e:	d102      	bne.n	8010096 <RTC_EnterInitMode+0x62>
 8010090:	7bfb      	ldrb	r3, [r7, #15]
 8010092:	2b03      	cmp	r3, #3
 8010094:	d1e7      	bne.n	8010066 <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8010096:	7bfb      	ldrb	r3, [r7, #15]
}
 8010098:	4618      	mov	r0, r3
 801009a:	3710      	adds	r7, #16
 801009c:	46bd      	mov	sp, r7
 801009e:	bd80      	pop	{r7, pc}

080100a0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80100a0:	b580      	push	{r7, lr}
 80100a2:	b084      	sub	sp, #16
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80100a8:	2300      	movs	r3, #0
 80100aa:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80100ac:	4b1a      	ldr	r3, [pc, #104]	; (8010118 <RTC_ExitInitMode+0x78>)
 80100ae:	68db      	ldr	r3, [r3, #12]
 80100b0:	4a19      	ldr	r2, [pc, #100]	; (8010118 <RTC_ExitInitMode+0x78>)
 80100b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80100b6:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80100b8:	4b17      	ldr	r3, [pc, #92]	; (8010118 <RTC_ExitInitMode+0x78>)
 80100ba:	699b      	ldr	r3, [r3, #24]
 80100bc:	f003 0320 	and.w	r3, r3, #32
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d10c      	bne.n	80100de <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80100c4:	6878      	ldr	r0, [r7, #4]
 80100c6:	f7ff ff8f 	bl	800ffe8 <HAL_RTC_WaitForSynchro>
 80100ca:	4603      	mov	r3, r0
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d01e      	beq.n	801010e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	2203      	movs	r2, #3
 80100d4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 80100d8:	2303      	movs	r3, #3
 80100da:	73fb      	strb	r3, [r7, #15]
 80100dc:	e017      	b.n	801010e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80100de:	4b0e      	ldr	r3, [pc, #56]	; (8010118 <RTC_ExitInitMode+0x78>)
 80100e0:	699b      	ldr	r3, [r3, #24]
 80100e2:	4a0d      	ldr	r2, [pc, #52]	; (8010118 <RTC_ExitInitMode+0x78>)
 80100e4:	f023 0320 	bic.w	r3, r3, #32
 80100e8:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80100ea:	6878      	ldr	r0, [r7, #4]
 80100ec:	f7ff ff7c 	bl	800ffe8 <HAL_RTC_WaitForSynchro>
 80100f0:	4603      	mov	r3, r0
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d005      	beq.n	8010102 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	2203      	movs	r2, #3
 80100fa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 80100fe:	2303      	movs	r3, #3
 8010100:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8010102:	4b05      	ldr	r3, [pc, #20]	; (8010118 <RTC_ExitInitMode+0x78>)
 8010104:	699b      	ldr	r3, [r3, #24]
 8010106:	4a04      	ldr	r2, [pc, #16]	; (8010118 <RTC_ExitInitMode+0x78>)
 8010108:	f043 0320 	orr.w	r3, r3, #32
 801010c:	6193      	str	r3, [r2, #24]
  }

  return status;
 801010e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010110:	4618      	mov	r0, r3
 8010112:	3710      	adds	r7, #16
 8010114:	46bd      	mov	sp, r7
 8010116:	bd80      	pop	{r7, pc}
 8010118:	40002800 	.word	0x40002800

0801011c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 801011c:	b480      	push	{r7}
 801011e:	b085      	sub	sp, #20
 8010120:	af00      	add	r7, sp, #0
 8010122:	4603      	mov	r3, r0
 8010124:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8010126:	2300      	movs	r3, #0
 8010128:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 801012a:	79fb      	ldrb	r3, [r7, #7]
 801012c:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 801012e:	e005      	b.n	801013c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	3301      	adds	r3, #1
 8010134:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8010136:	7afb      	ldrb	r3, [r7, #11]
 8010138:	3b0a      	subs	r3, #10
 801013a:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 801013c:	7afb      	ldrb	r3, [r7, #11]
 801013e:	2b09      	cmp	r3, #9
 8010140:	d8f6      	bhi.n	8010130 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	b2db      	uxtb	r3, r3
 8010146:	011b      	lsls	r3, r3, #4
 8010148:	b2da      	uxtb	r2, r3
 801014a:	7afb      	ldrb	r3, [r7, #11]
 801014c:	4313      	orrs	r3, r2
 801014e:	b2db      	uxtb	r3, r3
}
 8010150:	4618      	mov	r0, r3
 8010152:	3714      	adds	r7, #20
 8010154:	46bd      	mov	sp, r7
 8010156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801015a:	4770      	bx	lr

0801015c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 801015c:	b480      	push	{r7}
 801015e:	b085      	sub	sp, #20
 8010160:	af00      	add	r7, sp, #0
 8010162:	4603      	mov	r3, r0
 8010164:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8010166:	79fb      	ldrb	r3, [r7, #7]
 8010168:	091b      	lsrs	r3, r3, #4
 801016a:	b2db      	uxtb	r3, r3
 801016c:	461a      	mov	r2, r3
 801016e:	0092      	lsls	r2, r2, #2
 8010170:	4413      	add	r3, r2
 8010172:	005b      	lsls	r3, r3, #1
 8010174:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8010176:	79fb      	ldrb	r3, [r7, #7]
 8010178:	f003 030f 	and.w	r3, r3, #15
 801017c:	b2da      	uxtb	r2, r3
 801017e:	7bfb      	ldrb	r3, [r7, #15]
 8010180:	4413      	add	r3, r2
 8010182:	b2db      	uxtb	r3, r3
}
 8010184:	4618      	mov	r0, r3
 8010186:	3714      	adds	r7, #20
 8010188:	46bd      	mov	sp, r7
 801018a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018e:	4770      	bx	lr

08010190 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010190:	b580      	push	{r7, lr}
 8010192:	b084      	sub	sp, #16
 8010194:	af00      	add	r7, sp, #0
 8010196:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d101      	bne.n	80101a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801019e:	2301      	movs	r3, #1
 80101a0:	e095      	b.n	80102ce <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d108      	bne.n	80101bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	685b      	ldr	r3, [r3, #4]
 80101ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80101b2:	d009      	beq.n	80101c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	2200      	movs	r2, #0
 80101b8:	61da      	str	r2, [r3, #28]
 80101ba:	e005      	b.n	80101c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	2200      	movs	r2, #0
 80101c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	2200      	movs	r2, #0
 80101c6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	2200      	movs	r2, #0
 80101cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80101d4:	b2db      	uxtb	r3, r3
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d106      	bne.n	80101e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	2200      	movs	r2, #0
 80101de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80101e2:	6878      	ldr	r0, [r7, #4]
 80101e4:	f7fc f9fc 	bl	800c5e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	2202      	movs	r2, #2
 80101ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	681a      	ldr	r2, [r3, #0]
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80101fe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	68db      	ldr	r3, [r3, #12]
 8010204:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8010208:	d902      	bls.n	8010210 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 801020a:	2300      	movs	r3, #0
 801020c:	60fb      	str	r3, [r7, #12]
 801020e:	e002      	b.n	8010216 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8010210:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010214:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	68db      	ldr	r3, [r3, #12]
 801021a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 801021e:	d007      	beq.n	8010230 <HAL_SPI_Init+0xa0>
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	68db      	ldr	r3, [r3, #12]
 8010224:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8010228:	d002      	beq.n	8010230 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	2200      	movs	r2, #0
 801022e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	685b      	ldr	r3, [r3, #4]
 8010234:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	689b      	ldr	r3, [r3, #8]
 801023c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8010240:	431a      	orrs	r2, r3
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	691b      	ldr	r3, [r3, #16]
 8010246:	f003 0302 	and.w	r3, r3, #2
 801024a:	431a      	orrs	r2, r3
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	695b      	ldr	r3, [r3, #20]
 8010250:	f003 0301 	and.w	r3, r3, #1
 8010254:	431a      	orrs	r2, r3
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	699b      	ldr	r3, [r3, #24]
 801025a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801025e:	431a      	orrs	r2, r3
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	69db      	ldr	r3, [r3, #28]
 8010264:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010268:	431a      	orrs	r2, r3
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	6a1b      	ldr	r3, [r3, #32]
 801026e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010272:	ea42 0103 	orr.w	r1, r2, r3
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801027a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	430a      	orrs	r2, r1
 8010284:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	699b      	ldr	r3, [r3, #24]
 801028a:	0c1b      	lsrs	r3, r3, #16
 801028c:	f003 0204 	and.w	r2, r3, #4
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010294:	f003 0310 	and.w	r3, r3, #16
 8010298:	431a      	orrs	r2, r3
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801029e:	f003 0308 	and.w	r3, r3, #8
 80102a2:	431a      	orrs	r2, r3
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	68db      	ldr	r3, [r3, #12]
 80102a8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80102ac:	ea42 0103 	orr.w	r1, r2, r3
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	430a      	orrs	r2, r1
 80102bc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	2200      	movs	r2, #0
 80102c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	2201      	movs	r2, #1
 80102c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80102cc:	2300      	movs	r3, #0
}
 80102ce:	4618      	mov	r0, r3
 80102d0:	3710      	adds	r7, #16
 80102d2:	46bd      	mov	sp, r7
 80102d4:	bd80      	pop	{r7, pc}

080102d6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80102d6:	b580      	push	{r7, lr}
 80102d8:	b088      	sub	sp, #32
 80102da:	af00      	add	r7, sp, #0
 80102dc:	60f8      	str	r0, [r7, #12]
 80102de:	60b9      	str	r1, [r7, #8]
 80102e0:	603b      	str	r3, [r7, #0]
 80102e2:	4613      	mov	r3, r2
 80102e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80102e6:	2300      	movs	r3, #0
 80102e8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80102f0:	2b01      	cmp	r3, #1
 80102f2:	d101      	bne.n	80102f8 <HAL_SPI_Transmit+0x22>
 80102f4:	2302      	movs	r3, #2
 80102f6:	e158      	b.n	80105aa <HAL_SPI_Transmit+0x2d4>
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	2201      	movs	r2, #1
 80102fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010300:	f7fc fff4 	bl	800d2ec <HAL_GetTick>
 8010304:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8010306:	88fb      	ldrh	r3, [r7, #6]
 8010308:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8010310:	b2db      	uxtb	r3, r3
 8010312:	2b01      	cmp	r3, #1
 8010314:	d002      	beq.n	801031c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8010316:	2302      	movs	r3, #2
 8010318:	77fb      	strb	r3, [r7, #31]
    goto error;
 801031a:	e13d      	b.n	8010598 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 801031c:	68bb      	ldr	r3, [r7, #8]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d002      	beq.n	8010328 <HAL_SPI_Transmit+0x52>
 8010322:	88fb      	ldrh	r3, [r7, #6]
 8010324:	2b00      	cmp	r3, #0
 8010326:	d102      	bne.n	801032e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8010328:	2301      	movs	r3, #1
 801032a:	77fb      	strb	r3, [r7, #31]
    goto error;
 801032c:	e134      	b.n	8010598 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	2203      	movs	r2, #3
 8010332:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	2200      	movs	r2, #0
 801033a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	68ba      	ldr	r2, [r7, #8]
 8010340:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	88fa      	ldrh	r2, [r7, #6]
 8010346:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	88fa      	ldrh	r2, [r7, #6]
 801034c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	2200      	movs	r2, #0
 8010352:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	2200      	movs	r2, #0
 8010358:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	2200      	movs	r2, #0
 8010360:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	2200      	movs	r2, #0
 8010368:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	2200      	movs	r2, #0
 801036e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	689b      	ldr	r3, [r3, #8]
 8010374:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010378:	d10f      	bne.n	801039a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	681a      	ldr	r2, [r3, #0]
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010388:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	681a      	ldr	r2, [r3, #0]
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010398:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80103a4:	2b40      	cmp	r3, #64	; 0x40
 80103a6:	d007      	beq.n	80103b8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	681a      	ldr	r2, [r3, #0]
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80103b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	68db      	ldr	r3, [r3, #12]
 80103bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80103c0:	d94b      	bls.n	801045a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	685b      	ldr	r3, [r3, #4]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d002      	beq.n	80103d0 <HAL_SPI_Transmit+0xfa>
 80103ca:	8afb      	ldrh	r3, [r7, #22]
 80103cc:	2b01      	cmp	r3, #1
 80103ce:	d13e      	bne.n	801044e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103d4:	881a      	ldrh	r2, [r3, #0]
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103e0:	1c9a      	adds	r2, r3, #2
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80103ea:	b29b      	uxth	r3, r3
 80103ec:	3b01      	subs	r3, #1
 80103ee:	b29a      	uxth	r2, r3
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80103f4:	e02b      	b.n	801044e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	689b      	ldr	r3, [r3, #8]
 80103fc:	f003 0302 	and.w	r3, r3, #2
 8010400:	2b02      	cmp	r3, #2
 8010402:	d112      	bne.n	801042a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010408:	881a      	ldrh	r2, [r3, #0]
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010414:	1c9a      	adds	r2, r3, #2
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801041e:	b29b      	uxth	r3, r3
 8010420:	3b01      	subs	r3, #1
 8010422:	b29a      	uxth	r2, r3
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	87da      	strh	r2, [r3, #62]	; 0x3e
 8010428:	e011      	b.n	801044e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801042a:	f7fc ff5f 	bl	800d2ec <HAL_GetTick>
 801042e:	4602      	mov	r2, r0
 8010430:	69bb      	ldr	r3, [r7, #24]
 8010432:	1ad3      	subs	r3, r2, r3
 8010434:	683a      	ldr	r2, [r7, #0]
 8010436:	429a      	cmp	r2, r3
 8010438:	d803      	bhi.n	8010442 <HAL_SPI_Transmit+0x16c>
 801043a:	683b      	ldr	r3, [r7, #0]
 801043c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010440:	d102      	bne.n	8010448 <HAL_SPI_Transmit+0x172>
 8010442:	683b      	ldr	r3, [r7, #0]
 8010444:	2b00      	cmp	r3, #0
 8010446:	d102      	bne.n	801044e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8010448:	2303      	movs	r3, #3
 801044a:	77fb      	strb	r3, [r7, #31]
          goto error;
 801044c:	e0a4      	b.n	8010598 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010452:	b29b      	uxth	r3, r3
 8010454:	2b00      	cmp	r3, #0
 8010456:	d1ce      	bne.n	80103f6 <HAL_SPI_Transmit+0x120>
 8010458:	e07c      	b.n	8010554 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	685b      	ldr	r3, [r3, #4]
 801045e:	2b00      	cmp	r3, #0
 8010460:	d002      	beq.n	8010468 <HAL_SPI_Transmit+0x192>
 8010462:	8afb      	ldrh	r3, [r7, #22]
 8010464:	2b01      	cmp	r3, #1
 8010466:	d170      	bne.n	801054a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801046c:	b29b      	uxth	r3, r3
 801046e:	2b01      	cmp	r3, #1
 8010470:	d912      	bls.n	8010498 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010476:	881a      	ldrh	r2, [r3, #0]
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010482:	1c9a      	adds	r2, r3, #2
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801048c:	b29b      	uxth	r3, r3
 801048e:	3b02      	subs	r3, #2
 8010490:	b29a      	uxth	r2, r3
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	87da      	strh	r2, [r3, #62]	; 0x3e
 8010496:	e058      	b.n	801054a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	330c      	adds	r3, #12
 80104a2:	7812      	ldrb	r2, [r2, #0]
 80104a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104aa:	1c5a      	adds	r2, r3, #1
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80104b4:	b29b      	uxth	r3, r3
 80104b6:	3b01      	subs	r3, #1
 80104b8:	b29a      	uxth	r2, r3
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80104be:	e044      	b.n	801054a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	689b      	ldr	r3, [r3, #8]
 80104c6:	f003 0302 	and.w	r3, r3, #2
 80104ca:	2b02      	cmp	r3, #2
 80104cc:	d12b      	bne.n	8010526 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80104d2:	b29b      	uxth	r3, r3
 80104d4:	2b01      	cmp	r3, #1
 80104d6:	d912      	bls.n	80104fe <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104dc:	881a      	ldrh	r2, [r3, #0]
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104e8:	1c9a      	adds	r2, r3, #2
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80104f2:	b29b      	uxth	r3, r3
 80104f4:	3b02      	subs	r3, #2
 80104f6:	b29a      	uxth	r2, r3
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80104fc:	e025      	b.n	801054a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	330c      	adds	r3, #12
 8010508:	7812      	ldrb	r2, [r2, #0]
 801050a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010510:	1c5a      	adds	r2, r3, #1
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801051a:	b29b      	uxth	r3, r3
 801051c:	3b01      	subs	r3, #1
 801051e:	b29a      	uxth	r2, r3
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	87da      	strh	r2, [r3, #62]	; 0x3e
 8010524:	e011      	b.n	801054a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010526:	f7fc fee1 	bl	800d2ec <HAL_GetTick>
 801052a:	4602      	mov	r2, r0
 801052c:	69bb      	ldr	r3, [r7, #24]
 801052e:	1ad3      	subs	r3, r2, r3
 8010530:	683a      	ldr	r2, [r7, #0]
 8010532:	429a      	cmp	r2, r3
 8010534:	d803      	bhi.n	801053e <HAL_SPI_Transmit+0x268>
 8010536:	683b      	ldr	r3, [r7, #0]
 8010538:	f1b3 3fff 	cmp.w	r3, #4294967295
 801053c:	d102      	bne.n	8010544 <HAL_SPI_Transmit+0x26e>
 801053e:	683b      	ldr	r3, [r7, #0]
 8010540:	2b00      	cmp	r3, #0
 8010542:	d102      	bne.n	801054a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8010544:	2303      	movs	r3, #3
 8010546:	77fb      	strb	r3, [r7, #31]
          goto error;
 8010548:	e026      	b.n	8010598 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801054e:	b29b      	uxth	r3, r3
 8010550:	2b00      	cmp	r3, #0
 8010552:	d1b5      	bne.n	80104c0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010554:	69ba      	ldr	r2, [r7, #24]
 8010556:	6839      	ldr	r1, [r7, #0]
 8010558:	68f8      	ldr	r0, [r7, #12]
 801055a:	f000 fce3 	bl	8010f24 <SPI_EndRxTxTransaction>
 801055e:	4603      	mov	r3, r0
 8010560:	2b00      	cmp	r3, #0
 8010562:	d002      	beq.n	801056a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	2220      	movs	r2, #32
 8010568:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	689b      	ldr	r3, [r3, #8]
 801056e:	2b00      	cmp	r3, #0
 8010570:	d10a      	bne.n	8010588 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010572:	2300      	movs	r3, #0
 8010574:	613b      	str	r3, [r7, #16]
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	68db      	ldr	r3, [r3, #12]
 801057c:	613b      	str	r3, [r7, #16]
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	689b      	ldr	r3, [r3, #8]
 8010584:	613b      	str	r3, [r7, #16]
 8010586:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801058c:	2b00      	cmp	r3, #0
 801058e:	d002      	beq.n	8010596 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8010590:	2301      	movs	r3, #1
 8010592:	77fb      	strb	r3, [r7, #31]
 8010594:	e000      	b.n	8010598 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8010596:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	2201      	movs	r2, #1
 801059c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	2200      	movs	r2, #0
 80105a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80105a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80105aa:	4618      	mov	r0, r3
 80105ac:	3720      	adds	r7, #32
 80105ae:	46bd      	mov	sp, r7
 80105b0:	bd80      	pop	{r7, pc}

080105b2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80105b2:	b580      	push	{r7, lr}
 80105b4:	b088      	sub	sp, #32
 80105b6:	af02      	add	r7, sp, #8
 80105b8:	60f8      	str	r0, [r7, #12]
 80105ba:	60b9      	str	r1, [r7, #8]
 80105bc:	603b      	str	r3, [r7, #0]
 80105be:	4613      	mov	r3, r2
 80105c0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80105c2:	2300      	movs	r3, #0
 80105c4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	685b      	ldr	r3, [r3, #4]
 80105ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80105ce:	d112      	bne.n	80105f6 <HAL_SPI_Receive+0x44>
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	689b      	ldr	r3, [r3, #8]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d10e      	bne.n	80105f6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	2204      	movs	r2, #4
 80105dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80105e0:	88fa      	ldrh	r2, [r7, #6]
 80105e2:	683b      	ldr	r3, [r7, #0]
 80105e4:	9300      	str	r3, [sp, #0]
 80105e6:	4613      	mov	r3, r2
 80105e8:	68ba      	ldr	r2, [r7, #8]
 80105ea:	68b9      	ldr	r1, [r7, #8]
 80105ec:	68f8      	ldr	r0, [r7, #12]
 80105ee:	f000 f910 	bl	8010812 <HAL_SPI_TransmitReceive>
 80105f2:	4603      	mov	r3, r0
 80105f4:	e109      	b.n	801080a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80105fc:	2b01      	cmp	r3, #1
 80105fe:	d101      	bne.n	8010604 <HAL_SPI_Receive+0x52>
 8010600:	2302      	movs	r3, #2
 8010602:	e102      	b.n	801080a <HAL_SPI_Receive+0x258>
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	2201      	movs	r2, #1
 8010608:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801060c:	f7fc fe6e 	bl	800d2ec <HAL_GetTick>
 8010610:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8010618:	b2db      	uxtb	r3, r3
 801061a:	2b01      	cmp	r3, #1
 801061c:	d002      	beq.n	8010624 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801061e:	2302      	movs	r3, #2
 8010620:	75fb      	strb	r3, [r7, #23]
    goto error;
 8010622:	e0e9      	b.n	80107f8 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8010624:	68bb      	ldr	r3, [r7, #8]
 8010626:	2b00      	cmp	r3, #0
 8010628:	d002      	beq.n	8010630 <HAL_SPI_Receive+0x7e>
 801062a:	88fb      	ldrh	r3, [r7, #6]
 801062c:	2b00      	cmp	r3, #0
 801062e:	d102      	bne.n	8010636 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8010630:	2301      	movs	r3, #1
 8010632:	75fb      	strb	r3, [r7, #23]
    goto error;
 8010634:	e0e0      	b.n	80107f8 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	2204      	movs	r2, #4
 801063a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	2200      	movs	r2, #0
 8010642:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	68ba      	ldr	r2, [r7, #8]
 8010648:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	88fa      	ldrh	r2, [r7, #6]
 801064e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	88fa      	ldrh	r2, [r7, #6]
 8010656:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	2200      	movs	r2, #0
 801065e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	2200      	movs	r2, #0
 8010664:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	2200      	movs	r2, #0
 801066a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	2200      	movs	r2, #0
 8010670:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	2200      	movs	r2, #0
 8010676:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	68db      	ldr	r3, [r3, #12]
 801067c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8010680:	d908      	bls.n	8010694 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	685a      	ldr	r2, [r3, #4]
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8010690:	605a      	str	r2, [r3, #4]
 8010692:	e007      	b.n	80106a4 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	685a      	ldr	r2, [r3, #4]
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80106a2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	689b      	ldr	r3, [r3, #8]
 80106a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80106ac:	d10f      	bne.n	80106ce <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	681a      	ldr	r2, [r3, #0]
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80106bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	681a      	ldr	r2, [r3, #0]
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80106cc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80106d8:	2b40      	cmp	r3, #64	; 0x40
 80106da:	d007      	beq.n	80106ec <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	681a      	ldr	r2, [r3, #0]
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80106ea:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	68db      	ldr	r3, [r3, #12]
 80106f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80106f4:	d867      	bhi.n	80107c6 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80106f6:	e030      	b.n	801075a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	689b      	ldr	r3, [r3, #8]
 80106fe:	f003 0301 	and.w	r3, r3, #1
 8010702:	2b01      	cmp	r3, #1
 8010704:	d117      	bne.n	8010736 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	f103 020c 	add.w	r2, r3, #12
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010712:	7812      	ldrb	r2, [r2, #0]
 8010714:	b2d2      	uxtb	r2, r2
 8010716:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801071c:	1c5a      	adds	r2, r3, #1
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8010728:	b29b      	uxth	r3, r3
 801072a:	3b01      	subs	r3, #1
 801072c:	b29a      	uxth	r2, r3
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8010734:	e011      	b.n	801075a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010736:	f7fc fdd9 	bl	800d2ec <HAL_GetTick>
 801073a:	4602      	mov	r2, r0
 801073c:	693b      	ldr	r3, [r7, #16]
 801073e:	1ad3      	subs	r3, r2, r3
 8010740:	683a      	ldr	r2, [r7, #0]
 8010742:	429a      	cmp	r2, r3
 8010744:	d803      	bhi.n	801074e <HAL_SPI_Receive+0x19c>
 8010746:	683b      	ldr	r3, [r7, #0]
 8010748:	f1b3 3fff 	cmp.w	r3, #4294967295
 801074c:	d102      	bne.n	8010754 <HAL_SPI_Receive+0x1a2>
 801074e:	683b      	ldr	r3, [r7, #0]
 8010750:	2b00      	cmp	r3, #0
 8010752:	d102      	bne.n	801075a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8010754:	2303      	movs	r3, #3
 8010756:	75fb      	strb	r3, [r7, #23]
          goto error;
 8010758:	e04e      	b.n	80107f8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8010760:	b29b      	uxth	r3, r3
 8010762:	2b00      	cmp	r3, #0
 8010764:	d1c8      	bne.n	80106f8 <HAL_SPI_Receive+0x146>
 8010766:	e034      	b.n	80107d2 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	689b      	ldr	r3, [r3, #8]
 801076e:	f003 0301 	and.w	r3, r3, #1
 8010772:	2b01      	cmp	r3, #1
 8010774:	d115      	bne.n	80107a2 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	68da      	ldr	r2, [r3, #12]
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010780:	b292      	uxth	r2, r2
 8010782:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010788:	1c9a      	adds	r2, r3, #2
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8010794:	b29b      	uxth	r3, r3
 8010796:	3b01      	subs	r3, #1
 8010798:	b29a      	uxth	r2, r3
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80107a0:	e011      	b.n	80107c6 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80107a2:	f7fc fda3 	bl	800d2ec <HAL_GetTick>
 80107a6:	4602      	mov	r2, r0
 80107a8:	693b      	ldr	r3, [r7, #16]
 80107aa:	1ad3      	subs	r3, r2, r3
 80107ac:	683a      	ldr	r2, [r7, #0]
 80107ae:	429a      	cmp	r2, r3
 80107b0:	d803      	bhi.n	80107ba <HAL_SPI_Receive+0x208>
 80107b2:	683b      	ldr	r3, [r7, #0]
 80107b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107b8:	d102      	bne.n	80107c0 <HAL_SPI_Receive+0x20e>
 80107ba:	683b      	ldr	r3, [r7, #0]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d102      	bne.n	80107c6 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80107c0:	2303      	movs	r3, #3
 80107c2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80107c4:	e018      	b.n	80107f8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80107cc:	b29b      	uxth	r3, r3
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d1ca      	bne.n	8010768 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80107d2:	693a      	ldr	r2, [r7, #16]
 80107d4:	6839      	ldr	r1, [r7, #0]
 80107d6:	68f8      	ldr	r0, [r7, #12]
 80107d8:	f000 fb4c 	bl	8010e74 <SPI_EndRxTransaction>
 80107dc:	4603      	mov	r3, r0
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d002      	beq.n	80107e8 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	2220      	movs	r2, #32
 80107e6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d002      	beq.n	80107f6 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80107f0:	2301      	movs	r3, #1
 80107f2:	75fb      	strb	r3, [r7, #23]
 80107f4:	e000      	b.n	80107f8 <HAL_SPI_Receive+0x246>
  }

error :
 80107f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	2201      	movs	r2, #1
 80107fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	2200      	movs	r2, #0
 8010804:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8010808:	7dfb      	ldrb	r3, [r7, #23]
}
 801080a:	4618      	mov	r0, r3
 801080c:	3718      	adds	r7, #24
 801080e:	46bd      	mov	sp, r7
 8010810:	bd80      	pop	{r7, pc}

08010812 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8010812:	b580      	push	{r7, lr}
 8010814:	b08a      	sub	sp, #40	; 0x28
 8010816:	af00      	add	r7, sp, #0
 8010818:	60f8      	str	r0, [r7, #12]
 801081a:	60b9      	str	r1, [r7, #8]
 801081c:	607a      	str	r2, [r7, #4]
 801081e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8010820:	2301      	movs	r3, #1
 8010822:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8010824:	2300      	movs	r3, #0
 8010826:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8010830:	2b01      	cmp	r3, #1
 8010832:	d101      	bne.n	8010838 <HAL_SPI_TransmitReceive+0x26>
 8010834:	2302      	movs	r3, #2
 8010836:	e1fb      	b.n	8010c30 <HAL_SPI_TransmitReceive+0x41e>
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	2201      	movs	r2, #1
 801083c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010840:	f7fc fd54 	bl	800d2ec <HAL_GetTick>
 8010844:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801084c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	685b      	ldr	r3, [r3, #4]
 8010852:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8010854:	887b      	ldrh	r3, [r7, #2]
 8010856:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8010858:	887b      	ldrh	r3, [r7, #2]
 801085a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801085c:	7efb      	ldrb	r3, [r7, #27]
 801085e:	2b01      	cmp	r3, #1
 8010860:	d00e      	beq.n	8010880 <HAL_SPI_TransmitReceive+0x6e>
 8010862:	697b      	ldr	r3, [r7, #20]
 8010864:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010868:	d106      	bne.n	8010878 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	689b      	ldr	r3, [r3, #8]
 801086e:	2b00      	cmp	r3, #0
 8010870:	d102      	bne.n	8010878 <HAL_SPI_TransmitReceive+0x66>
 8010872:	7efb      	ldrb	r3, [r7, #27]
 8010874:	2b04      	cmp	r3, #4
 8010876:	d003      	beq.n	8010880 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8010878:	2302      	movs	r3, #2
 801087a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801087e:	e1cd      	b.n	8010c1c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8010880:	68bb      	ldr	r3, [r7, #8]
 8010882:	2b00      	cmp	r3, #0
 8010884:	d005      	beq.n	8010892 <HAL_SPI_TransmitReceive+0x80>
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	2b00      	cmp	r3, #0
 801088a:	d002      	beq.n	8010892 <HAL_SPI_TransmitReceive+0x80>
 801088c:	887b      	ldrh	r3, [r7, #2]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d103      	bne.n	801089a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8010892:	2301      	movs	r3, #1
 8010894:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8010898:	e1c0      	b.n	8010c1c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80108a0:	b2db      	uxtb	r3, r3
 80108a2:	2b04      	cmp	r3, #4
 80108a4:	d003      	beq.n	80108ae <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	2205      	movs	r2, #5
 80108aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	2200      	movs	r2, #0
 80108b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	687a      	ldr	r2, [r7, #4]
 80108b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	887a      	ldrh	r2, [r7, #2]
 80108be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	887a      	ldrh	r2, [r7, #2]
 80108c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	68ba      	ldr	r2, [r7, #8]
 80108ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	887a      	ldrh	r2, [r7, #2]
 80108d4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	887a      	ldrh	r2, [r7, #2]
 80108da:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	2200      	movs	r2, #0
 80108e0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	2200      	movs	r2, #0
 80108e6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	68db      	ldr	r3, [r3, #12]
 80108ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80108f0:	d802      	bhi.n	80108f8 <HAL_SPI_TransmitReceive+0xe6>
 80108f2:	8a3b      	ldrh	r3, [r7, #16]
 80108f4:	2b01      	cmp	r3, #1
 80108f6:	d908      	bls.n	801090a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	685a      	ldr	r2, [r3, #4]
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8010906:	605a      	str	r2, [r3, #4]
 8010908:	e007      	b.n	801091a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	685a      	ldr	r2, [r3, #4]
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8010918:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010924:	2b40      	cmp	r3, #64	; 0x40
 8010926:	d007      	beq.n	8010938 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	681a      	ldr	r2, [r3, #0]
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010936:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	68db      	ldr	r3, [r3, #12]
 801093c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8010940:	d97c      	bls.n	8010a3c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	685b      	ldr	r3, [r3, #4]
 8010946:	2b00      	cmp	r3, #0
 8010948:	d002      	beq.n	8010950 <HAL_SPI_TransmitReceive+0x13e>
 801094a:	8a7b      	ldrh	r3, [r7, #18]
 801094c:	2b01      	cmp	r3, #1
 801094e:	d169      	bne.n	8010a24 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010954:	881a      	ldrh	r2, [r3, #0]
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010960:	1c9a      	adds	r2, r3, #2
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801096a:	b29b      	uxth	r3, r3
 801096c:	3b01      	subs	r3, #1
 801096e:	b29a      	uxth	r2, r3
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010974:	e056      	b.n	8010a24 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	689b      	ldr	r3, [r3, #8]
 801097c:	f003 0302 	and.w	r3, r3, #2
 8010980:	2b02      	cmp	r3, #2
 8010982:	d11b      	bne.n	80109bc <HAL_SPI_TransmitReceive+0x1aa>
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010988:	b29b      	uxth	r3, r3
 801098a:	2b00      	cmp	r3, #0
 801098c:	d016      	beq.n	80109bc <HAL_SPI_TransmitReceive+0x1aa>
 801098e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010990:	2b01      	cmp	r3, #1
 8010992:	d113      	bne.n	80109bc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010998:	881a      	ldrh	r2, [r3, #0]
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109a4:	1c9a      	adds	r2, r3, #2
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80109ae:	b29b      	uxth	r3, r3
 80109b0:	3b01      	subs	r3, #1
 80109b2:	b29a      	uxth	r2, r3
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80109b8:	2300      	movs	r3, #0
 80109ba:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	689b      	ldr	r3, [r3, #8]
 80109c2:	f003 0301 	and.w	r3, r3, #1
 80109c6:	2b01      	cmp	r3, #1
 80109c8:	d11c      	bne.n	8010a04 <HAL_SPI_TransmitReceive+0x1f2>
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80109d0:	b29b      	uxth	r3, r3
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d016      	beq.n	8010a04 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	68da      	ldr	r2, [r3, #12]
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109e0:	b292      	uxth	r2, r2
 80109e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109e8:	1c9a      	adds	r2, r3, #2
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80109f4:	b29b      	uxth	r3, r3
 80109f6:	3b01      	subs	r3, #1
 80109f8:	b29a      	uxth	r2, r3
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8010a00:	2301      	movs	r3, #1
 8010a02:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8010a04:	f7fc fc72 	bl	800d2ec <HAL_GetTick>
 8010a08:	4602      	mov	r2, r0
 8010a0a:	69fb      	ldr	r3, [r7, #28]
 8010a0c:	1ad3      	subs	r3, r2, r3
 8010a0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a10:	429a      	cmp	r2, r3
 8010a12:	d807      	bhi.n	8010a24 <HAL_SPI_TransmitReceive+0x212>
 8010a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a1a:	d003      	beq.n	8010a24 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8010a1c:	2303      	movs	r3, #3
 8010a1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8010a22:	e0fb      	b.n	8010c1c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010a28:	b29b      	uxth	r3, r3
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d1a3      	bne.n	8010976 <HAL_SPI_TransmitReceive+0x164>
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8010a34:	b29b      	uxth	r3, r3
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d19d      	bne.n	8010976 <HAL_SPI_TransmitReceive+0x164>
 8010a3a:	e0df      	b.n	8010bfc <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	685b      	ldr	r3, [r3, #4]
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d003      	beq.n	8010a4c <HAL_SPI_TransmitReceive+0x23a>
 8010a44:	8a7b      	ldrh	r3, [r7, #18]
 8010a46:	2b01      	cmp	r3, #1
 8010a48:	f040 80cb 	bne.w	8010be2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010a50:	b29b      	uxth	r3, r3
 8010a52:	2b01      	cmp	r3, #1
 8010a54:	d912      	bls.n	8010a7c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a5a:	881a      	ldrh	r2, [r3, #0]
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a66:	1c9a      	adds	r2, r3, #2
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010a70:	b29b      	uxth	r3, r3
 8010a72:	3b02      	subs	r3, #2
 8010a74:	b29a      	uxth	r2, r3
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	87da      	strh	r2, [r3, #62]	; 0x3e
 8010a7a:	e0b2      	b.n	8010be2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	330c      	adds	r3, #12
 8010a86:	7812      	ldrb	r2, [r2, #0]
 8010a88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a8e:	1c5a      	adds	r2, r3, #1
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010a98:	b29b      	uxth	r3, r3
 8010a9a:	3b01      	subs	r3, #1
 8010a9c:	b29a      	uxth	r2, r3
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010aa2:	e09e      	b.n	8010be2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	689b      	ldr	r3, [r3, #8]
 8010aaa:	f003 0302 	and.w	r3, r3, #2
 8010aae:	2b02      	cmp	r3, #2
 8010ab0:	d134      	bne.n	8010b1c <HAL_SPI_TransmitReceive+0x30a>
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010ab6:	b29b      	uxth	r3, r3
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d02f      	beq.n	8010b1c <HAL_SPI_TransmitReceive+0x30a>
 8010abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010abe:	2b01      	cmp	r3, #1
 8010ac0:	d12c      	bne.n	8010b1c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010ac6:	b29b      	uxth	r3, r3
 8010ac8:	2b01      	cmp	r3, #1
 8010aca:	d912      	bls.n	8010af2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ad0:	881a      	ldrh	r2, [r3, #0]
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010adc:	1c9a      	adds	r2, r3, #2
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010ae6:	b29b      	uxth	r3, r3
 8010ae8:	3b02      	subs	r3, #2
 8010aea:	b29a      	uxth	r2, r3
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	87da      	strh	r2, [r3, #62]	; 0x3e
 8010af0:	e012      	b.n	8010b18 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	330c      	adds	r3, #12
 8010afc:	7812      	ldrb	r2, [r2, #0]
 8010afe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b04:	1c5a      	adds	r2, r3, #1
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010b0e:	b29b      	uxth	r3, r3
 8010b10:	3b01      	subs	r3, #1
 8010b12:	b29a      	uxth	r2, r3
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8010b18:	2300      	movs	r3, #0
 8010b1a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	689b      	ldr	r3, [r3, #8]
 8010b22:	f003 0301 	and.w	r3, r3, #1
 8010b26:	2b01      	cmp	r3, #1
 8010b28:	d148      	bne.n	8010bbc <HAL_SPI_TransmitReceive+0x3aa>
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8010b30:	b29b      	uxth	r3, r3
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d042      	beq.n	8010bbc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8010b3c:	b29b      	uxth	r3, r3
 8010b3e:	2b01      	cmp	r3, #1
 8010b40:	d923      	bls.n	8010b8a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	68da      	ldr	r2, [r3, #12]
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b4c:	b292      	uxth	r2, r2
 8010b4e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b54:	1c9a      	adds	r2, r3, #2
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8010b60:	b29b      	uxth	r3, r3
 8010b62:	3b02      	subs	r3, #2
 8010b64:	b29a      	uxth	r2, r3
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8010b72:	b29b      	uxth	r3, r3
 8010b74:	2b01      	cmp	r3, #1
 8010b76:	d81f      	bhi.n	8010bb8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	685a      	ldr	r2, [r3, #4]
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8010b86:	605a      	str	r2, [r3, #4]
 8010b88:	e016      	b.n	8010bb8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	f103 020c 	add.w	r2, r3, #12
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b96:	7812      	ldrb	r2, [r2, #0]
 8010b98:	b2d2      	uxtb	r2, r2
 8010b9a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ba0:	1c5a      	adds	r2, r3, #1
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8010bac:	b29b      	uxth	r3, r3
 8010bae:	3b01      	subs	r3, #1
 8010bb0:	b29a      	uxth	r2, r3
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8010bb8:	2301      	movs	r3, #1
 8010bba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8010bbc:	f7fc fb96 	bl	800d2ec <HAL_GetTick>
 8010bc0:	4602      	mov	r2, r0
 8010bc2:	69fb      	ldr	r3, [r7, #28]
 8010bc4:	1ad3      	subs	r3, r2, r3
 8010bc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010bc8:	429a      	cmp	r2, r3
 8010bca:	d803      	bhi.n	8010bd4 <HAL_SPI_TransmitReceive+0x3c2>
 8010bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bd2:	d102      	bne.n	8010bda <HAL_SPI_TransmitReceive+0x3c8>
 8010bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d103      	bne.n	8010be2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8010bda:	2303      	movs	r3, #3
 8010bdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8010be0:	e01c      	b.n	8010c1c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010be6:	b29b      	uxth	r3, r3
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	f47f af5b 	bne.w	8010aa4 <HAL_SPI_TransmitReceive+0x292>
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8010bf4:	b29b      	uxth	r3, r3
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	f47f af54 	bne.w	8010aa4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010bfc:	69fa      	ldr	r2, [r7, #28]
 8010bfe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010c00:	68f8      	ldr	r0, [r7, #12]
 8010c02:	f000 f98f 	bl	8010f24 <SPI_EndRxTxTransaction>
 8010c06:	4603      	mov	r3, r0
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d006      	beq.n	8010c1a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8010c0c:	2301      	movs	r3, #1
 8010c0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	2220      	movs	r2, #32
 8010c16:	661a      	str	r2, [r3, #96]	; 0x60
 8010c18:	e000      	b.n	8010c1c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8010c1a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	2201      	movs	r2, #1
 8010c20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	2200      	movs	r2, #0
 8010c28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8010c2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8010c30:	4618      	mov	r0, r3
 8010c32:	3728      	adds	r7, #40	; 0x28
 8010c34:	46bd      	mov	sp, r7
 8010c36:	bd80      	pop	{r7, pc}

08010c38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b088      	sub	sp, #32
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	60f8      	str	r0, [r7, #12]
 8010c40:	60b9      	str	r1, [r7, #8]
 8010c42:	603b      	str	r3, [r7, #0]
 8010c44:	4613      	mov	r3, r2
 8010c46:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8010c48:	f7fc fb50 	bl	800d2ec <HAL_GetTick>
 8010c4c:	4602      	mov	r2, r0
 8010c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c50:	1a9b      	subs	r3, r3, r2
 8010c52:	683a      	ldr	r2, [r7, #0]
 8010c54:	4413      	add	r3, r2
 8010c56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8010c58:	f7fc fb48 	bl	800d2ec <HAL_GetTick>
 8010c5c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8010c5e:	4b39      	ldr	r3, [pc, #228]	; (8010d44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	015b      	lsls	r3, r3, #5
 8010c64:	0d1b      	lsrs	r3, r3, #20
 8010c66:	69fa      	ldr	r2, [r7, #28]
 8010c68:	fb02 f303 	mul.w	r3, r2, r3
 8010c6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010c6e:	e054      	b.n	8010d1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8010c70:	683b      	ldr	r3, [r7, #0]
 8010c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c76:	d050      	beq.n	8010d1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8010c78:	f7fc fb38 	bl	800d2ec <HAL_GetTick>
 8010c7c:	4602      	mov	r2, r0
 8010c7e:	69bb      	ldr	r3, [r7, #24]
 8010c80:	1ad3      	subs	r3, r2, r3
 8010c82:	69fa      	ldr	r2, [r7, #28]
 8010c84:	429a      	cmp	r2, r3
 8010c86:	d902      	bls.n	8010c8e <SPI_WaitFlagStateUntilTimeout+0x56>
 8010c88:	69fb      	ldr	r3, [r7, #28]
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d13d      	bne.n	8010d0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	685a      	ldr	r2, [r3, #4]
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8010c9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	685b      	ldr	r3, [r3, #4]
 8010ca2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010ca6:	d111      	bne.n	8010ccc <SPI_WaitFlagStateUntilTimeout+0x94>
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	689b      	ldr	r3, [r3, #8]
 8010cac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010cb0:	d004      	beq.n	8010cbc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	689b      	ldr	r3, [r3, #8]
 8010cb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010cba:	d107      	bne.n	8010ccc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	681a      	ldr	r2, [r3, #0]
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010cca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010cd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010cd4:	d10f      	bne.n	8010cf6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	681a      	ldr	r2, [r3, #0]
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010ce4:	601a      	str	r2, [r3, #0]
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	681a      	ldr	r2, [r3, #0]
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010cf4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	2201      	movs	r2, #1
 8010cfa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	2200      	movs	r2, #0
 8010d02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8010d06:	2303      	movs	r3, #3
 8010d08:	e017      	b.n	8010d3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8010d0a:	697b      	ldr	r3, [r7, #20]
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d101      	bne.n	8010d14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8010d10:	2300      	movs	r3, #0
 8010d12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8010d14:	697b      	ldr	r3, [r7, #20]
 8010d16:	3b01      	subs	r3, #1
 8010d18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	689a      	ldr	r2, [r3, #8]
 8010d20:	68bb      	ldr	r3, [r7, #8]
 8010d22:	4013      	ands	r3, r2
 8010d24:	68ba      	ldr	r2, [r7, #8]
 8010d26:	429a      	cmp	r2, r3
 8010d28:	bf0c      	ite	eq
 8010d2a:	2301      	moveq	r3, #1
 8010d2c:	2300      	movne	r3, #0
 8010d2e:	b2db      	uxtb	r3, r3
 8010d30:	461a      	mov	r2, r3
 8010d32:	79fb      	ldrb	r3, [r7, #7]
 8010d34:	429a      	cmp	r2, r3
 8010d36:	d19b      	bne.n	8010c70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8010d38:	2300      	movs	r3, #0
}
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	3720      	adds	r7, #32
 8010d3e:	46bd      	mov	sp, r7
 8010d40:	bd80      	pop	{r7, pc}
 8010d42:	bf00      	nop
 8010d44:	20000094 	.word	0x20000094

08010d48 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8010d48:	b580      	push	{r7, lr}
 8010d4a:	b08a      	sub	sp, #40	; 0x28
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	60f8      	str	r0, [r7, #12]
 8010d50:	60b9      	str	r1, [r7, #8]
 8010d52:	607a      	str	r2, [r7, #4]
 8010d54:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8010d56:	2300      	movs	r3, #0
 8010d58:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8010d5a:	f7fc fac7 	bl	800d2ec <HAL_GetTick>
 8010d5e:	4602      	mov	r2, r0
 8010d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d62:	1a9b      	subs	r3, r3, r2
 8010d64:	683a      	ldr	r2, [r7, #0]
 8010d66:	4413      	add	r3, r2
 8010d68:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8010d6a:	f7fc fabf 	bl	800d2ec <HAL_GetTick>
 8010d6e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	330c      	adds	r3, #12
 8010d76:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8010d78:	4b3d      	ldr	r3, [pc, #244]	; (8010e70 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8010d7a:	681a      	ldr	r2, [r3, #0]
 8010d7c:	4613      	mov	r3, r2
 8010d7e:	009b      	lsls	r3, r3, #2
 8010d80:	4413      	add	r3, r2
 8010d82:	00da      	lsls	r2, r3, #3
 8010d84:	1ad3      	subs	r3, r2, r3
 8010d86:	0d1b      	lsrs	r3, r3, #20
 8010d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d8a:	fb02 f303 	mul.w	r3, r2, r3
 8010d8e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8010d90:	e060      	b.n	8010e54 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8010d92:	68bb      	ldr	r3, [r7, #8]
 8010d94:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8010d98:	d107      	bne.n	8010daa <SPI_WaitFifoStateUntilTimeout+0x62>
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d104      	bne.n	8010daa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8010da0:	69fb      	ldr	r3, [r7, #28]
 8010da2:	781b      	ldrb	r3, [r3, #0]
 8010da4:	b2db      	uxtb	r3, r3
 8010da6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8010da8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8010daa:	683b      	ldr	r3, [r7, #0]
 8010dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010db0:	d050      	beq.n	8010e54 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8010db2:	f7fc fa9b 	bl	800d2ec <HAL_GetTick>
 8010db6:	4602      	mov	r2, r0
 8010db8:	6a3b      	ldr	r3, [r7, #32]
 8010dba:	1ad3      	subs	r3, r2, r3
 8010dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010dbe:	429a      	cmp	r2, r3
 8010dc0:	d902      	bls.n	8010dc8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8010dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d13d      	bne.n	8010e44 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	685a      	ldr	r2, [r3, #4]
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8010dd6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	685b      	ldr	r3, [r3, #4]
 8010ddc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010de0:	d111      	bne.n	8010e06 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	689b      	ldr	r3, [r3, #8]
 8010de6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010dea:	d004      	beq.n	8010df6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	689b      	ldr	r3, [r3, #8]
 8010df0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010df4:	d107      	bne.n	8010e06 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	681a      	ldr	r2, [r3, #0]
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010e04:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010e0e:	d10f      	bne.n	8010e30 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	681a      	ldr	r2, [r3, #0]
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010e1e:	601a      	str	r2, [r3, #0]
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	681a      	ldr	r2, [r3, #0]
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010e2e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	2201      	movs	r2, #1
 8010e34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	2200      	movs	r2, #0
 8010e3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8010e40:	2303      	movs	r3, #3
 8010e42:	e010      	b.n	8010e66 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8010e44:	69bb      	ldr	r3, [r7, #24]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d101      	bne.n	8010e4e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8010e4a:	2300      	movs	r3, #0
 8010e4c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8010e4e:	69bb      	ldr	r3, [r7, #24]
 8010e50:	3b01      	subs	r3, #1
 8010e52:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	689a      	ldr	r2, [r3, #8]
 8010e5a:	68bb      	ldr	r3, [r7, #8]
 8010e5c:	4013      	ands	r3, r2
 8010e5e:	687a      	ldr	r2, [r7, #4]
 8010e60:	429a      	cmp	r2, r3
 8010e62:	d196      	bne.n	8010d92 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8010e64:	2300      	movs	r3, #0
}
 8010e66:	4618      	mov	r0, r3
 8010e68:	3728      	adds	r7, #40	; 0x28
 8010e6a:	46bd      	mov	sp, r7
 8010e6c:	bd80      	pop	{r7, pc}
 8010e6e:	bf00      	nop
 8010e70:	20000094 	.word	0x20000094

08010e74 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8010e74:	b580      	push	{r7, lr}
 8010e76:	b086      	sub	sp, #24
 8010e78:	af02      	add	r7, sp, #8
 8010e7a:	60f8      	str	r0, [r7, #12]
 8010e7c:	60b9      	str	r1, [r7, #8]
 8010e7e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	685b      	ldr	r3, [r3, #4]
 8010e84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010e88:	d111      	bne.n	8010eae <SPI_EndRxTransaction+0x3a>
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	689b      	ldr	r3, [r3, #8]
 8010e8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010e92:	d004      	beq.n	8010e9e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	689b      	ldr	r3, [r3, #8]
 8010e98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010e9c:	d107      	bne.n	8010eae <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	681a      	ldr	r2, [r3, #0]
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010eac:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	9300      	str	r3, [sp, #0]
 8010eb2:	68bb      	ldr	r3, [r7, #8]
 8010eb4:	2200      	movs	r2, #0
 8010eb6:	2180      	movs	r1, #128	; 0x80
 8010eb8:	68f8      	ldr	r0, [r7, #12]
 8010eba:	f7ff febd 	bl	8010c38 <SPI_WaitFlagStateUntilTimeout>
 8010ebe:	4603      	mov	r3, r0
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d007      	beq.n	8010ed4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010ec8:	f043 0220 	orr.w	r2, r3, #32
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8010ed0:	2303      	movs	r3, #3
 8010ed2:	e023      	b.n	8010f1c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	685b      	ldr	r3, [r3, #4]
 8010ed8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010edc:	d11d      	bne.n	8010f1a <SPI_EndRxTransaction+0xa6>
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	689b      	ldr	r3, [r3, #8]
 8010ee2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010ee6:	d004      	beq.n	8010ef2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	689b      	ldr	r3, [r3, #8]
 8010eec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010ef0:	d113      	bne.n	8010f1a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	9300      	str	r3, [sp, #0]
 8010ef6:	68bb      	ldr	r3, [r7, #8]
 8010ef8:	2200      	movs	r2, #0
 8010efa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8010efe:	68f8      	ldr	r0, [r7, #12]
 8010f00:	f7ff ff22 	bl	8010d48 <SPI_WaitFifoStateUntilTimeout>
 8010f04:	4603      	mov	r3, r0
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d007      	beq.n	8010f1a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010f0e:	f043 0220 	orr.w	r2, r3, #32
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8010f16:	2303      	movs	r3, #3
 8010f18:	e000      	b.n	8010f1c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8010f1a:	2300      	movs	r3, #0
}
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	3710      	adds	r7, #16
 8010f20:	46bd      	mov	sp, r7
 8010f22:	bd80      	pop	{r7, pc}

08010f24 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8010f24:	b580      	push	{r7, lr}
 8010f26:	b086      	sub	sp, #24
 8010f28:	af02      	add	r7, sp, #8
 8010f2a:	60f8      	str	r0, [r7, #12]
 8010f2c:	60b9      	str	r1, [r7, #8]
 8010f2e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	9300      	str	r3, [sp, #0]
 8010f34:	68bb      	ldr	r3, [r7, #8]
 8010f36:	2200      	movs	r2, #0
 8010f38:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8010f3c:	68f8      	ldr	r0, [r7, #12]
 8010f3e:	f7ff ff03 	bl	8010d48 <SPI_WaitFifoStateUntilTimeout>
 8010f42:	4603      	mov	r3, r0
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d007      	beq.n	8010f58 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010f4c:	f043 0220 	orr.w	r2, r3, #32
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8010f54:	2303      	movs	r3, #3
 8010f56:	e027      	b.n	8010fa8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	9300      	str	r3, [sp, #0]
 8010f5c:	68bb      	ldr	r3, [r7, #8]
 8010f5e:	2200      	movs	r2, #0
 8010f60:	2180      	movs	r1, #128	; 0x80
 8010f62:	68f8      	ldr	r0, [r7, #12]
 8010f64:	f7ff fe68 	bl	8010c38 <SPI_WaitFlagStateUntilTimeout>
 8010f68:	4603      	mov	r3, r0
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d007      	beq.n	8010f7e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010f72:	f043 0220 	orr.w	r2, r3, #32
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8010f7a:	2303      	movs	r3, #3
 8010f7c:	e014      	b.n	8010fa8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	9300      	str	r3, [sp, #0]
 8010f82:	68bb      	ldr	r3, [r7, #8]
 8010f84:	2200      	movs	r2, #0
 8010f86:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8010f8a:	68f8      	ldr	r0, [r7, #12]
 8010f8c:	f7ff fedc 	bl	8010d48 <SPI_WaitFifoStateUntilTimeout>
 8010f90:	4603      	mov	r3, r0
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d007      	beq.n	8010fa6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010f9a:	f043 0220 	orr.w	r2, r3, #32
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8010fa2:	2303      	movs	r3, #3
 8010fa4:	e000      	b.n	8010fa8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8010fa6:	2300      	movs	r3, #0
}
 8010fa8:	4618      	mov	r0, r3
 8010faa:	3710      	adds	r7, #16
 8010fac:	46bd      	mov	sp, r7
 8010fae:	bd80      	pop	{r7, pc}

08010fb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010fb0:	b580      	push	{r7, lr}
 8010fb2:	b082      	sub	sp, #8
 8010fb4:	af00      	add	r7, sp, #0
 8010fb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d101      	bne.n	8010fc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010fbe:	2301      	movs	r3, #1
 8010fc0:	e049      	b.n	8011056 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010fc8:	b2db      	uxtb	r3, r3
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d106      	bne.n	8010fdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	2200      	movs	r2, #0
 8010fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010fd6:	6878      	ldr	r0, [r7, #4]
 8010fd8:	f7fb ff6c 	bl	800ceb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	2202      	movs	r2, #2
 8010fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	681a      	ldr	r2, [r3, #0]
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	3304      	adds	r3, #4
 8010fec:	4619      	mov	r1, r3
 8010fee:	4610      	mov	r0, r2
 8010ff0:	f001 f95e 	bl	80122b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	2201      	movs	r2, #1
 8010ff8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	2201      	movs	r2, #1
 8011000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	2201      	movs	r2, #1
 8011008:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	2201      	movs	r2, #1
 8011010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	2201      	movs	r2, #1
 8011018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	2201      	movs	r2, #1
 8011020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	2201      	movs	r2, #1
 8011028:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	2201      	movs	r2, #1
 8011030:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	2201      	movs	r2, #1
 8011038:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	2201      	movs	r2, #1
 8011040:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	2201      	movs	r2, #1
 8011048:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	2201      	movs	r2, #1
 8011050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011054:	2300      	movs	r3, #0
}
 8011056:	4618      	mov	r0, r3
 8011058:	3708      	adds	r7, #8
 801105a:	46bd      	mov	sp, r7
 801105c:	bd80      	pop	{r7, pc}
	...

08011060 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8011060:	b480      	push	{r7}
 8011062:	b085      	sub	sp, #20
 8011064:	af00      	add	r7, sp, #0
 8011066:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801106e:	b2db      	uxtb	r3, r3
 8011070:	2b01      	cmp	r3, #1
 8011072:	d001      	beq.n	8011078 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8011074:	2301      	movs	r3, #1
 8011076:	e04f      	b.n	8011118 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	2202      	movs	r2, #2
 801107c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	68da      	ldr	r2, [r3, #12]
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	f042 0201 	orr.w	r2, r2, #1
 801108e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	4a23      	ldr	r2, [pc, #140]	; (8011124 <HAL_TIM_Base_Start_IT+0xc4>)
 8011096:	4293      	cmp	r3, r2
 8011098:	d01d      	beq.n	80110d6 <HAL_TIM_Base_Start_IT+0x76>
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80110a2:	d018      	beq.n	80110d6 <HAL_TIM_Base_Start_IT+0x76>
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	4a1f      	ldr	r2, [pc, #124]	; (8011128 <HAL_TIM_Base_Start_IT+0xc8>)
 80110aa:	4293      	cmp	r3, r2
 80110ac:	d013      	beq.n	80110d6 <HAL_TIM_Base_Start_IT+0x76>
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	4a1e      	ldr	r2, [pc, #120]	; (801112c <HAL_TIM_Base_Start_IT+0xcc>)
 80110b4:	4293      	cmp	r3, r2
 80110b6:	d00e      	beq.n	80110d6 <HAL_TIM_Base_Start_IT+0x76>
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	4a1c      	ldr	r2, [pc, #112]	; (8011130 <HAL_TIM_Base_Start_IT+0xd0>)
 80110be:	4293      	cmp	r3, r2
 80110c0:	d009      	beq.n	80110d6 <HAL_TIM_Base_Start_IT+0x76>
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	4a1b      	ldr	r2, [pc, #108]	; (8011134 <HAL_TIM_Base_Start_IT+0xd4>)
 80110c8:	4293      	cmp	r3, r2
 80110ca:	d004      	beq.n	80110d6 <HAL_TIM_Base_Start_IT+0x76>
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	4a19      	ldr	r2, [pc, #100]	; (8011138 <HAL_TIM_Base_Start_IT+0xd8>)
 80110d2:	4293      	cmp	r3, r2
 80110d4:	d115      	bne.n	8011102 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	689a      	ldr	r2, [r3, #8]
 80110dc:	4b17      	ldr	r3, [pc, #92]	; (801113c <HAL_TIM_Base_Start_IT+0xdc>)
 80110de:	4013      	ands	r3, r2
 80110e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	2b06      	cmp	r3, #6
 80110e6:	d015      	beq.n	8011114 <HAL_TIM_Base_Start_IT+0xb4>
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80110ee:	d011      	beq.n	8011114 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	681a      	ldr	r2, [r3, #0]
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	f042 0201 	orr.w	r2, r2, #1
 80110fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011100:	e008      	b.n	8011114 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	681a      	ldr	r2, [r3, #0]
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	f042 0201 	orr.w	r2, r2, #1
 8011110:	601a      	str	r2, [r3, #0]
 8011112:	e000      	b.n	8011116 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011114:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8011116:	2300      	movs	r3, #0
}
 8011118:	4618      	mov	r0, r3
 801111a:	3714      	adds	r7, #20
 801111c:	46bd      	mov	sp, r7
 801111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011122:	4770      	bx	lr
 8011124:	40012c00 	.word	0x40012c00
 8011128:	40000400 	.word	0x40000400
 801112c:	40000800 	.word	0x40000800
 8011130:	40000c00 	.word	0x40000c00
 8011134:	40013400 	.word	0x40013400
 8011138:	40014000 	.word	0x40014000
 801113c:	00010007 	.word	0x00010007

08011140 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8011140:	b580      	push	{r7, lr}
 8011142:	b082      	sub	sp, #8
 8011144:	af00      	add	r7, sp, #0
 8011146:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	2b00      	cmp	r3, #0
 801114c:	d101      	bne.n	8011152 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801114e:	2301      	movs	r3, #1
 8011150:	e049      	b.n	80111e6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011158:	b2db      	uxtb	r3, r3
 801115a:	2b00      	cmp	r3, #0
 801115c:	d106      	bne.n	801116c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	2200      	movs	r2, #0
 8011162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8011166:	6878      	ldr	r0, [r7, #4]
 8011168:	f000 f841 	bl	80111ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	2202      	movs	r2, #2
 8011170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	681a      	ldr	r2, [r3, #0]
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	3304      	adds	r3, #4
 801117c:	4619      	mov	r1, r3
 801117e:	4610      	mov	r0, r2
 8011180:	f001 f896 	bl	80122b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	2201      	movs	r2, #1
 8011188:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	2201      	movs	r2, #1
 8011190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	2201      	movs	r2, #1
 8011198:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	2201      	movs	r2, #1
 80111a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	2201      	movs	r2, #1
 80111a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	2201      	movs	r2, #1
 80111b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	2201      	movs	r2, #1
 80111b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	2201      	movs	r2, #1
 80111c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	2201      	movs	r2, #1
 80111c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	2201      	movs	r2, #1
 80111d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	2201      	movs	r2, #1
 80111d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	2201      	movs	r2, #1
 80111e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80111e4:	2300      	movs	r3, #0
}
 80111e6:	4618      	mov	r0, r3
 80111e8:	3708      	adds	r7, #8
 80111ea:	46bd      	mov	sp, r7
 80111ec:	bd80      	pop	{r7, pc}

080111ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80111ee:	b480      	push	{r7}
 80111f0:	b083      	sub	sp, #12
 80111f2:	af00      	add	r7, sp, #0
 80111f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80111f6:	bf00      	nop
 80111f8:	370c      	adds	r7, #12
 80111fa:	46bd      	mov	sp, r7
 80111fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011200:	4770      	bx	lr
	...

08011204 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8011204:	b580      	push	{r7, lr}
 8011206:	b086      	sub	sp, #24
 8011208:	af00      	add	r7, sp, #0
 801120a:	60f8      	str	r0, [r7, #12]
 801120c:	60b9      	str	r1, [r7, #8]
 801120e:	607a      	str	r2, [r7, #4]
 8011210:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8011212:	2300      	movs	r3, #0
 8011214:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8011216:	68bb      	ldr	r3, [r7, #8]
 8011218:	2b00      	cmp	r3, #0
 801121a:	d109      	bne.n	8011230 <HAL_TIM_PWM_Start_DMA+0x2c>
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011222:	b2db      	uxtb	r3, r3
 8011224:	2b02      	cmp	r3, #2
 8011226:	bf0c      	ite	eq
 8011228:	2301      	moveq	r3, #1
 801122a:	2300      	movne	r3, #0
 801122c:	b2db      	uxtb	r3, r3
 801122e:	e03c      	b.n	80112aa <HAL_TIM_PWM_Start_DMA+0xa6>
 8011230:	68bb      	ldr	r3, [r7, #8]
 8011232:	2b04      	cmp	r3, #4
 8011234:	d109      	bne.n	801124a <HAL_TIM_PWM_Start_DMA+0x46>
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801123c:	b2db      	uxtb	r3, r3
 801123e:	2b02      	cmp	r3, #2
 8011240:	bf0c      	ite	eq
 8011242:	2301      	moveq	r3, #1
 8011244:	2300      	movne	r3, #0
 8011246:	b2db      	uxtb	r3, r3
 8011248:	e02f      	b.n	80112aa <HAL_TIM_PWM_Start_DMA+0xa6>
 801124a:	68bb      	ldr	r3, [r7, #8]
 801124c:	2b08      	cmp	r3, #8
 801124e:	d109      	bne.n	8011264 <HAL_TIM_PWM_Start_DMA+0x60>
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011256:	b2db      	uxtb	r3, r3
 8011258:	2b02      	cmp	r3, #2
 801125a:	bf0c      	ite	eq
 801125c:	2301      	moveq	r3, #1
 801125e:	2300      	movne	r3, #0
 8011260:	b2db      	uxtb	r3, r3
 8011262:	e022      	b.n	80112aa <HAL_TIM_PWM_Start_DMA+0xa6>
 8011264:	68bb      	ldr	r3, [r7, #8]
 8011266:	2b0c      	cmp	r3, #12
 8011268:	d109      	bne.n	801127e <HAL_TIM_PWM_Start_DMA+0x7a>
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011270:	b2db      	uxtb	r3, r3
 8011272:	2b02      	cmp	r3, #2
 8011274:	bf0c      	ite	eq
 8011276:	2301      	moveq	r3, #1
 8011278:	2300      	movne	r3, #0
 801127a:	b2db      	uxtb	r3, r3
 801127c:	e015      	b.n	80112aa <HAL_TIM_PWM_Start_DMA+0xa6>
 801127e:	68bb      	ldr	r3, [r7, #8]
 8011280:	2b10      	cmp	r3, #16
 8011282:	d109      	bne.n	8011298 <HAL_TIM_PWM_Start_DMA+0x94>
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801128a:	b2db      	uxtb	r3, r3
 801128c:	2b02      	cmp	r3, #2
 801128e:	bf0c      	ite	eq
 8011290:	2301      	moveq	r3, #1
 8011292:	2300      	movne	r3, #0
 8011294:	b2db      	uxtb	r3, r3
 8011296:	e008      	b.n	80112aa <HAL_TIM_PWM_Start_DMA+0xa6>
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801129e:	b2db      	uxtb	r3, r3
 80112a0:	2b02      	cmp	r3, #2
 80112a2:	bf0c      	ite	eq
 80112a4:	2301      	moveq	r3, #1
 80112a6:	2300      	movne	r3, #0
 80112a8:	b2db      	uxtb	r3, r3
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d001      	beq.n	80112b2 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 80112ae:	2302      	movs	r3, #2
 80112b0:	e1ab      	b.n	801160a <HAL_TIM_PWM_Start_DMA+0x406>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80112b2:	68bb      	ldr	r3, [r7, #8]
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d109      	bne.n	80112cc <HAL_TIM_PWM_Start_DMA+0xc8>
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80112be:	b2db      	uxtb	r3, r3
 80112c0:	2b01      	cmp	r3, #1
 80112c2:	bf0c      	ite	eq
 80112c4:	2301      	moveq	r3, #1
 80112c6:	2300      	movne	r3, #0
 80112c8:	b2db      	uxtb	r3, r3
 80112ca:	e03c      	b.n	8011346 <HAL_TIM_PWM_Start_DMA+0x142>
 80112cc:	68bb      	ldr	r3, [r7, #8]
 80112ce:	2b04      	cmp	r3, #4
 80112d0:	d109      	bne.n	80112e6 <HAL_TIM_PWM_Start_DMA+0xe2>
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80112d8:	b2db      	uxtb	r3, r3
 80112da:	2b01      	cmp	r3, #1
 80112dc:	bf0c      	ite	eq
 80112de:	2301      	moveq	r3, #1
 80112e0:	2300      	movne	r3, #0
 80112e2:	b2db      	uxtb	r3, r3
 80112e4:	e02f      	b.n	8011346 <HAL_TIM_PWM_Start_DMA+0x142>
 80112e6:	68bb      	ldr	r3, [r7, #8]
 80112e8:	2b08      	cmp	r3, #8
 80112ea:	d109      	bne.n	8011300 <HAL_TIM_PWM_Start_DMA+0xfc>
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80112f2:	b2db      	uxtb	r3, r3
 80112f4:	2b01      	cmp	r3, #1
 80112f6:	bf0c      	ite	eq
 80112f8:	2301      	moveq	r3, #1
 80112fa:	2300      	movne	r3, #0
 80112fc:	b2db      	uxtb	r3, r3
 80112fe:	e022      	b.n	8011346 <HAL_TIM_PWM_Start_DMA+0x142>
 8011300:	68bb      	ldr	r3, [r7, #8]
 8011302:	2b0c      	cmp	r3, #12
 8011304:	d109      	bne.n	801131a <HAL_TIM_PWM_Start_DMA+0x116>
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801130c:	b2db      	uxtb	r3, r3
 801130e:	2b01      	cmp	r3, #1
 8011310:	bf0c      	ite	eq
 8011312:	2301      	moveq	r3, #1
 8011314:	2300      	movne	r3, #0
 8011316:	b2db      	uxtb	r3, r3
 8011318:	e015      	b.n	8011346 <HAL_TIM_PWM_Start_DMA+0x142>
 801131a:	68bb      	ldr	r3, [r7, #8]
 801131c:	2b10      	cmp	r3, #16
 801131e:	d109      	bne.n	8011334 <HAL_TIM_PWM_Start_DMA+0x130>
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011326:	b2db      	uxtb	r3, r3
 8011328:	2b01      	cmp	r3, #1
 801132a:	bf0c      	ite	eq
 801132c:	2301      	moveq	r3, #1
 801132e:	2300      	movne	r3, #0
 8011330:	b2db      	uxtb	r3, r3
 8011332:	e008      	b.n	8011346 <HAL_TIM_PWM_Start_DMA+0x142>
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801133a:	b2db      	uxtb	r3, r3
 801133c:	2b01      	cmp	r3, #1
 801133e:	bf0c      	ite	eq
 8011340:	2301      	moveq	r3, #1
 8011342:	2300      	movne	r3, #0
 8011344:	b2db      	uxtb	r3, r3
 8011346:	2b00      	cmp	r3, #0
 8011348:	d034      	beq.n	80113b4 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	2b00      	cmp	r3, #0
 801134e:	d002      	beq.n	8011356 <HAL_TIM_PWM_Start_DMA+0x152>
 8011350:	887b      	ldrh	r3, [r7, #2]
 8011352:	2b00      	cmp	r3, #0
 8011354:	d101      	bne.n	801135a <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8011356:	2301      	movs	r3, #1
 8011358:	e157      	b.n	801160a <HAL_TIM_PWM_Start_DMA+0x406>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801135a:	68bb      	ldr	r3, [r7, #8]
 801135c:	2b00      	cmp	r3, #0
 801135e:	d104      	bne.n	801136a <HAL_TIM_PWM_Start_DMA+0x166>
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	2202      	movs	r2, #2
 8011364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011368:	e026      	b.n	80113b8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 801136a:	68bb      	ldr	r3, [r7, #8]
 801136c:	2b04      	cmp	r3, #4
 801136e:	d104      	bne.n	801137a <HAL_TIM_PWM_Start_DMA+0x176>
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	2202      	movs	r2, #2
 8011374:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011378:	e01e      	b.n	80113b8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 801137a:	68bb      	ldr	r3, [r7, #8]
 801137c:	2b08      	cmp	r3, #8
 801137e:	d104      	bne.n	801138a <HAL_TIM_PWM_Start_DMA+0x186>
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	2202      	movs	r2, #2
 8011384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011388:	e016      	b.n	80113b8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 801138a:	68bb      	ldr	r3, [r7, #8]
 801138c:	2b0c      	cmp	r3, #12
 801138e:	d104      	bne.n	801139a <HAL_TIM_PWM_Start_DMA+0x196>
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	2202      	movs	r2, #2
 8011394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8011398:	e00e      	b.n	80113b8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 801139a:	68bb      	ldr	r3, [r7, #8]
 801139c:	2b10      	cmp	r3, #16
 801139e:	d104      	bne.n	80113aa <HAL_TIM_PWM_Start_DMA+0x1a6>
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	2202      	movs	r2, #2
 80113a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80113a8:	e006      	b.n	80113b8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	2202      	movs	r2, #2
 80113ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80113b2:	e001      	b.n	80113b8 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 80113b4:	2301      	movs	r3, #1
 80113b6:	e128      	b.n	801160a <HAL_TIM_PWM_Start_DMA+0x406>
  }

  switch (Channel)
 80113b8:	68bb      	ldr	r3, [r7, #8]
 80113ba:	2b0c      	cmp	r3, #12
 80113bc:	f200 80ae 	bhi.w	801151c <HAL_TIM_PWM_Start_DMA+0x318>
 80113c0:	a201      	add	r2, pc, #4	; (adr r2, 80113c8 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 80113c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113c6:	bf00      	nop
 80113c8:	080113fd 	.word	0x080113fd
 80113cc:	0801151d 	.word	0x0801151d
 80113d0:	0801151d 	.word	0x0801151d
 80113d4:	0801151d 	.word	0x0801151d
 80113d8:	08011445 	.word	0x08011445
 80113dc:	0801151d 	.word	0x0801151d
 80113e0:	0801151d 	.word	0x0801151d
 80113e4:	0801151d 	.word	0x0801151d
 80113e8:	0801148d 	.word	0x0801148d
 80113ec:	0801151d 	.word	0x0801151d
 80113f0:	0801151d 	.word	0x0801151d
 80113f4:	0801151d 	.word	0x0801151d
 80113f8:	080114d5 	.word	0x080114d5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011400:	4a84      	ldr	r2, [pc, #528]	; (8011614 <HAL_TIM_PWM_Start_DMA+0x410>)
 8011402:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011408:	4a83      	ldr	r2, [pc, #524]	; (8011618 <HAL_TIM_PWM_Start_DMA+0x414>)
 801140a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011410:	4a82      	ldr	r2, [pc, #520]	; (801161c <HAL_TIM_PWM_Start_DMA+0x418>)
 8011412:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8011418:	6879      	ldr	r1, [r7, #4]
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	3334      	adds	r3, #52	; 0x34
 8011420:	461a      	mov	r2, r3
 8011422:	887b      	ldrh	r3, [r7, #2]
 8011424:	f7fc f914 	bl	800d650 <HAL_DMA_Start_IT>
 8011428:	4603      	mov	r3, r0
 801142a:	2b00      	cmp	r3, #0
 801142c:	d001      	beq.n	8011432 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 801142e:	2301      	movs	r3, #1
 8011430:	e0eb      	b.n	801160a <HAL_TIM_PWM_Start_DMA+0x406>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	68da      	ldr	r2, [r3, #12]
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011440:	60da      	str	r2, [r3, #12]
      break;
 8011442:	e06e      	b.n	8011522 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011448:	4a72      	ldr	r2, [pc, #456]	; (8011614 <HAL_TIM_PWM_Start_DMA+0x410>)
 801144a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011450:	4a71      	ldr	r2, [pc, #452]	; (8011618 <HAL_TIM_PWM_Start_DMA+0x414>)
 8011452:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011458:	4a70      	ldr	r2, [pc, #448]	; (801161c <HAL_TIM_PWM_Start_DMA+0x418>)
 801145a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8011460:	6879      	ldr	r1, [r7, #4]
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	3338      	adds	r3, #56	; 0x38
 8011468:	461a      	mov	r2, r3
 801146a:	887b      	ldrh	r3, [r7, #2]
 801146c:	f7fc f8f0 	bl	800d650 <HAL_DMA_Start_IT>
 8011470:	4603      	mov	r3, r0
 8011472:	2b00      	cmp	r3, #0
 8011474:	d001      	beq.n	801147a <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8011476:	2301      	movs	r3, #1
 8011478:	e0c7      	b.n	801160a <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	68da      	ldr	r2, [r3, #12]
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011488:	60da      	str	r2, [r3, #12]
      break;
 801148a:	e04a      	b.n	8011522 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011490:	4a60      	ldr	r2, [pc, #384]	; (8011614 <HAL_TIM_PWM_Start_DMA+0x410>)
 8011492:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011498:	4a5f      	ldr	r2, [pc, #380]	; (8011618 <HAL_TIM_PWM_Start_DMA+0x414>)
 801149a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114a0:	4a5e      	ldr	r2, [pc, #376]	; (801161c <HAL_TIM_PWM_Start_DMA+0x418>)
 80114a2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80114a8:	6879      	ldr	r1, [r7, #4]
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	333c      	adds	r3, #60	; 0x3c
 80114b0:	461a      	mov	r2, r3
 80114b2:	887b      	ldrh	r3, [r7, #2]
 80114b4:	f7fc f8cc 	bl	800d650 <HAL_DMA_Start_IT>
 80114b8:	4603      	mov	r3, r0
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d001      	beq.n	80114c2 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80114be:	2301      	movs	r3, #1
 80114c0:	e0a3      	b.n	801160a <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	68da      	ldr	r2, [r3, #12]
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80114d0:	60da      	str	r2, [r3, #12]
      break;
 80114d2:	e026      	b.n	8011522 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114d8:	4a4e      	ldr	r2, [pc, #312]	; (8011614 <HAL_TIM_PWM_Start_DMA+0x410>)
 80114da:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114e0:	4a4d      	ldr	r2, [pc, #308]	; (8011618 <HAL_TIM_PWM_Start_DMA+0x414>)
 80114e2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114e8:	4a4c      	ldr	r2, [pc, #304]	; (801161c <HAL_TIM_PWM_Start_DMA+0x418>)
 80114ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80114f0:	6879      	ldr	r1, [r7, #4]
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	3340      	adds	r3, #64	; 0x40
 80114f8:	461a      	mov	r2, r3
 80114fa:	887b      	ldrh	r3, [r7, #2]
 80114fc:	f7fc f8a8 	bl	800d650 <HAL_DMA_Start_IT>
 8011500:	4603      	mov	r3, r0
 8011502:	2b00      	cmp	r3, #0
 8011504:	d001      	beq.n	801150a <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8011506:	2301      	movs	r3, #1
 8011508:	e07f      	b.n	801160a <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	68da      	ldr	r2, [r3, #12]
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011518:	60da      	str	r2, [r3, #12]
      break;
 801151a:	e002      	b.n	8011522 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 801151c:	2301      	movs	r3, #1
 801151e:	75fb      	strb	r3, [r7, #23]
      break;
 8011520:	bf00      	nop
  }

  if (status == HAL_OK)
 8011522:	7dfb      	ldrb	r3, [r7, #23]
 8011524:	2b00      	cmp	r3, #0
 8011526:	d16f      	bne.n	8011608 <HAL_TIM_PWM_Start_DMA+0x404>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	2201      	movs	r2, #1
 801152e:	68b9      	ldr	r1, [r7, #8]
 8011530:	4618      	mov	r0, r3
 8011532:	f001 fac7 	bl	8012ac4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	4a39      	ldr	r2, [pc, #228]	; (8011620 <HAL_TIM_PWM_Start_DMA+0x41c>)
 801153c:	4293      	cmp	r3, r2
 801153e:	d013      	beq.n	8011568 <HAL_TIM_PWM_Start_DMA+0x364>
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	4a37      	ldr	r2, [pc, #220]	; (8011624 <HAL_TIM_PWM_Start_DMA+0x420>)
 8011546:	4293      	cmp	r3, r2
 8011548:	d00e      	beq.n	8011568 <HAL_TIM_PWM_Start_DMA+0x364>
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	4a36      	ldr	r2, [pc, #216]	; (8011628 <HAL_TIM_PWM_Start_DMA+0x424>)
 8011550:	4293      	cmp	r3, r2
 8011552:	d009      	beq.n	8011568 <HAL_TIM_PWM_Start_DMA+0x364>
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	4a34      	ldr	r2, [pc, #208]	; (801162c <HAL_TIM_PWM_Start_DMA+0x428>)
 801155a:	4293      	cmp	r3, r2
 801155c:	d004      	beq.n	8011568 <HAL_TIM_PWM_Start_DMA+0x364>
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	4a33      	ldr	r2, [pc, #204]	; (8011630 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8011564:	4293      	cmp	r3, r2
 8011566:	d101      	bne.n	801156c <HAL_TIM_PWM_Start_DMA+0x368>
 8011568:	2301      	movs	r3, #1
 801156a:	e000      	b.n	801156e <HAL_TIM_PWM_Start_DMA+0x36a>
 801156c:	2300      	movs	r3, #0
 801156e:	2b00      	cmp	r3, #0
 8011570:	d007      	beq.n	8011582 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8011580:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	4a26      	ldr	r2, [pc, #152]	; (8011620 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8011588:	4293      	cmp	r3, r2
 801158a:	d01d      	beq.n	80115c8 <HAL_TIM_PWM_Start_DMA+0x3c4>
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011594:	d018      	beq.n	80115c8 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	4a26      	ldr	r2, [pc, #152]	; (8011634 <HAL_TIM_PWM_Start_DMA+0x430>)
 801159c:	4293      	cmp	r3, r2
 801159e:	d013      	beq.n	80115c8 <HAL_TIM_PWM_Start_DMA+0x3c4>
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	4a24      	ldr	r2, [pc, #144]	; (8011638 <HAL_TIM_PWM_Start_DMA+0x434>)
 80115a6:	4293      	cmp	r3, r2
 80115a8:	d00e      	beq.n	80115c8 <HAL_TIM_PWM_Start_DMA+0x3c4>
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	4a23      	ldr	r2, [pc, #140]	; (801163c <HAL_TIM_PWM_Start_DMA+0x438>)
 80115b0:	4293      	cmp	r3, r2
 80115b2:	d009      	beq.n	80115c8 <HAL_TIM_PWM_Start_DMA+0x3c4>
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	4a1a      	ldr	r2, [pc, #104]	; (8011624 <HAL_TIM_PWM_Start_DMA+0x420>)
 80115ba:	4293      	cmp	r3, r2
 80115bc:	d004      	beq.n	80115c8 <HAL_TIM_PWM_Start_DMA+0x3c4>
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	4a19      	ldr	r2, [pc, #100]	; (8011628 <HAL_TIM_PWM_Start_DMA+0x424>)
 80115c4:	4293      	cmp	r3, r2
 80115c6:	d115      	bne.n	80115f4 <HAL_TIM_PWM_Start_DMA+0x3f0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	689a      	ldr	r2, [r3, #8]
 80115ce:	4b1c      	ldr	r3, [pc, #112]	; (8011640 <HAL_TIM_PWM_Start_DMA+0x43c>)
 80115d0:	4013      	ands	r3, r2
 80115d2:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80115d4:	693b      	ldr	r3, [r7, #16]
 80115d6:	2b06      	cmp	r3, #6
 80115d8:	d015      	beq.n	8011606 <HAL_TIM_PWM_Start_DMA+0x402>
 80115da:	693b      	ldr	r3, [r7, #16]
 80115dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80115e0:	d011      	beq.n	8011606 <HAL_TIM_PWM_Start_DMA+0x402>
      {
        __HAL_TIM_ENABLE(htim);
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	681a      	ldr	r2, [r3, #0]
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	f042 0201 	orr.w	r2, r2, #1
 80115f0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80115f2:	e008      	b.n	8011606 <HAL_TIM_PWM_Start_DMA+0x402>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	681a      	ldr	r2, [r3, #0]
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	f042 0201 	orr.w	r2, r2, #1
 8011602:	601a      	str	r2, [r3, #0]
 8011604:	e000      	b.n	8011608 <HAL_TIM_PWM_Start_DMA+0x404>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011606:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8011608:	7dfb      	ldrb	r3, [r7, #23]
}
 801160a:	4618      	mov	r0, r3
 801160c:	3718      	adds	r7, #24
 801160e:	46bd      	mov	sp, r7
 8011610:	bd80      	pop	{r7, pc}
 8011612:	bf00      	nop
 8011614:	080121a1 	.word	0x080121a1
 8011618:	08012249 	.word	0x08012249
 801161c:	0801210f 	.word	0x0801210f
 8011620:	40012c00 	.word	0x40012c00
 8011624:	40013400 	.word	0x40013400
 8011628:	40014000 	.word	0x40014000
 801162c:	40014400 	.word	0x40014400
 8011630:	40014800 	.word	0x40014800
 8011634:	40000400 	.word	0x40000400
 8011638:	40000800 	.word	0x40000800
 801163c:	40000c00 	.word	0x40000c00
 8011640:	00010007 	.word	0x00010007

08011644 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011644:	b580      	push	{r7, lr}
 8011646:	b084      	sub	sp, #16
 8011648:	af00      	add	r7, sp, #0
 801164a:	6078      	str	r0, [r7, #4]
 801164c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801164e:	2300      	movs	r3, #0
 8011650:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8011652:	683b      	ldr	r3, [r7, #0]
 8011654:	2b0c      	cmp	r3, #12
 8011656:	d855      	bhi.n	8011704 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8011658:	a201      	add	r2, pc, #4	; (adr r2, 8011660 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 801165a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801165e:	bf00      	nop
 8011660:	08011695 	.word	0x08011695
 8011664:	08011705 	.word	0x08011705
 8011668:	08011705 	.word	0x08011705
 801166c:	08011705 	.word	0x08011705
 8011670:	080116b1 	.word	0x080116b1
 8011674:	08011705 	.word	0x08011705
 8011678:	08011705 	.word	0x08011705
 801167c:	08011705 	.word	0x08011705
 8011680:	080116cd 	.word	0x080116cd
 8011684:	08011705 	.word	0x08011705
 8011688:	08011705 	.word	0x08011705
 801168c:	08011705 	.word	0x08011705
 8011690:	080116e9 	.word	0x080116e9
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	68da      	ldr	r2, [r3, #12]
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80116a2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116a8:	4618      	mov	r0, r3
 80116aa:	f7fc f8a8 	bl	800d7fe <HAL_DMA_Abort_IT>
      break;
 80116ae:	e02c      	b.n	801170a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	68da      	ldr	r2, [r3, #12]
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80116be:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80116c4:	4618      	mov	r0, r3
 80116c6:	f7fc f89a 	bl	800d7fe <HAL_DMA_Abort_IT>
      break;
 80116ca:	e01e      	b.n	801170a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	68da      	ldr	r2, [r3, #12]
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80116da:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116e0:	4618      	mov	r0, r3
 80116e2:	f7fc f88c 	bl	800d7fe <HAL_DMA_Abort_IT>
      break;
 80116e6:	e010      	b.n	801170a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	68da      	ldr	r2, [r3, #12]
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80116f6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116fc:	4618      	mov	r0, r3
 80116fe:	f7fc f87e 	bl	800d7fe <HAL_DMA_Abort_IT>
      break;
 8011702:	e002      	b.n	801170a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8011704:	2301      	movs	r3, #1
 8011706:	73fb      	strb	r3, [r7, #15]
      break;
 8011708:	bf00      	nop
  }

  if (status == HAL_OK)
 801170a:	7bfb      	ldrb	r3, [r7, #15]
 801170c:	2b00      	cmp	r3, #0
 801170e:	f040 8081 	bne.w	8011814 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	2200      	movs	r2, #0
 8011718:	6839      	ldr	r1, [r7, #0]
 801171a:	4618      	mov	r0, r3
 801171c:	f001 f9d2 	bl	8012ac4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	4a3e      	ldr	r2, [pc, #248]	; (8011820 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8011726:	4293      	cmp	r3, r2
 8011728:	d013      	beq.n	8011752 <HAL_TIM_PWM_Stop_DMA+0x10e>
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	4a3d      	ldr	r2, [pc, #244]	; (8011824 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 8011730:	4293      	cmp	r3, r2
 8011732:	d00e      	beq.n	8011752 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	4a3b      	ldr	r2, [pc, #236]	; (8011828 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 801173a:	4293      	cmp	r3, r2
 801173c:	d009      	beq.n	8011752 <HAL_TIM_PWM_Stop_DMA+0x10e>
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	4a3a      	ldr	r2, [pc, #232]	; (801182c <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8011744:	4293      	cmp	r3, r2
 8011746:	d004      	beq.n	8011752 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	4a38      	ldr	r2, [pc, #224]	; (8011830 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 801174e:	4293      	cmp	r3, r2
 8011750:	d101      	bne.n	8011756 <HAL_TIM_PWM_Stop_DMA+0x112>
 8011752:	2301      	movs	r3, #1
 8011754:	e000      	b.n	8011758 <HAL_TIM_PWM_Stop_DMA+0x114>
 8011756:	2300      	movs	r3, #0
 8011758:	2b00      	cmp	r3, #0
 801175a:	d017      	beq.n	801178c <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	6a1a      	ldr	r2, [r3, #32]
 8011762:	f241 1311 	movw	r3, #4369	; 0x1111
 8011766:	4013      	ands	r3, r2
 8011768:	2b00      	cmp	r3, #0
 801176a:	d10f      	bne.n	801178c <HAL_TIM_PWM_Stop_DMA+0x148>
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	6a1a      	ldr	r2, [r3, #32]
 8011772:	f240 4344 	movw	r3, #1092	; 0x444
 8011776:	4013      	ands	r3, r2
 8011778:	2b00      	cmp	r3, #0
 801177a:	d107      	bne.n	801178c <HAL_TIM_PWM_Stop_DMA+0x148>
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801178a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	6a1a      	ldr	r2, [r3, #32]
 8011792:	f241 1311 	movw	r3, #4369	; 0x1111
 8011796:	4013      	ands	r3, r2
 8011798:	2b00      	cmp	r3, #0
 801179a:	d10f      	bne.n	80117bc <HAL_TIM_PWM_Stop_DMA+0x178>
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	6a1a      	ldr	r2, [r3, #32]
 80117a2:	f240 4344 	movw	r3, #1092	; 0x444
 80117a6:	4013      	ands	r3, r2
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d107      	bne.n	80117bc <HAL_TIM_PWM_Stop_DMA+0x178>
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	681a      	ldr	r2, [r3, #0]
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	f022 0201 	bic.w	r2, r2, #1
 80117ba:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80117bc:	683b      	ldr	r3, [r7, #0]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d104      	bne.n	80117cc <HAL_TIM_PWM_Stop_DMA+0x188>
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	2201      	movs	r2, #1
 80117c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80117ca:	e023      	b.n	8011814 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80117cc:	683b      	ldr	r3, [r7, #0]
 80117ce:	2b04      	cmp	r3, #4
 80117d0:	d104      	bne.n	80117dc <HAL_TIM_PWM_Stop_DMA+0x198>
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	2201      	movs	r2, #1
 80117d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80117da:	e01b      	b.n	8011814 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80117dc:	683b      	ldr	r3, [r7, #0]
 80117de:	2b08      	cmp	r3, #8
 80117e0:	d104      	bne.n	80117ec <HAL_TIM_PWM_Stop_DMA+0x1a8>
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	2201      	movs	r2, #1
 80117e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80117ea:	e013      	b.n	8011814 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80117ec:	683b      	ldr	r3, [r7, #0]
 80117ee:	2b0c      	cmp	r3, #12
 80117f0:	d104      	bne.n	80117fc <HAL_TIM_PWM_Stop_DMA+0x1b8>
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	2201      	movs	r2, #1
 80117f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80117fa:	e00b      	b.n	8011814 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80117fc:	683b      	ldr	r3, [r7, #0]
 80117fe:	2b10      	cmp	r3, #16
 8011800:	d104      	bne.n	801180c <HAL_TIM_PWM_Stop_DMA+0x1c8>
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	2201      	movs	r2, #1
 8011806:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801180a:	e003      	b.n	8011814 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	2201      	movs	r2, #1
 8011810:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8011814:	7bfb      	ldrb	r3, [r7, #15]
}
 8011816:	4618      	mov	r0, r3
 8011818:	3710      	adds	r7, #16
 801181a:	46bd      	mov	sp, r7
 801181c:	bd80      	pop	{r7, pc}
 801181e:	bf00      	nop
 8011820:	40012c00 	.word	0x40012c00
 8011824:	40013400 	.word	0x40013400
 8011828:	40014000 	.word	0x40014000
 801182c:	40014400 	.word	0x40014400
 8011830:	40014800 	.word	0x40014800

08011834 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8011834:	b580      	push	{r7, lr}
 8011836:	b086      	sub	sp, #24
 8011838:	af00      	add	r7, sp, #0
 801183a:	6078      	str	r0, [r7, #4]
 801183c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	2b00      	cmp	r3, #0
 8011842:	d101      	bne.n	8011848 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8011844:	2301      	movs	r3, #1
 8011846:	e097      	b.n	8011978 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801184e:	b2db      	uxtb	r3, r3
 8011850:	2b00      	cmp	r3, #0
 8011852:	d106      	bne.n	8011862 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	2200      	movs	r2, #0
 8011858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 801185c:	6878      	ldr	r0, [r7, #4]
 801185e:	f7fb fb9b 	bl	800cf98 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	2202      	movs	r2, #2
 8011866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	689b      	ldr	r3, [r3, #8]
 8011870:	687a      	ldr	r2, [r7, #4]
 8011872:	6812      	ldr	r2, [r2, #0]
 8011874:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8011878:	f023 0307 	bic.w	r3, r3, #7
 801187c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	681a      	ldr	r2, [r3, #0]
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	3304      	adds	r3, #4
 8011886:	4619      	mov	r1, r3
 8011888:	4610      	mov	r0, r2
 801188a:	f000 fd11 	bl	80122b0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	689b      	ldr	r3, [r3, #8]
 8011894:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	699b      	ldr	r3, [r3, #24]
 801189c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	6a1b      	ldr	r3, [r3, #32]
 80118a4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80118a6:	683b      	ldr	r3, [r7, #0]
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	697a      	ldr	r2, [r7, #20]
 80118ac:	4313      	orrs	r3, r2
 80118ae:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80118b0:	693b      	ldr	r3, [r7, #16]
 80118b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80118b6:	f023 0303 	bic.w	r3, r3, #3
 80118ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80118bc:	683b      	ldr	r3, [r7, #0]
 80118be:	689a      	ldr	r2, [r3, #8]
 80118c0:	683b      	ldr	r3, [r7, #0]
 80118c2:	699b      	ldr	r3, [r3, #24]
 80118c4:	021b      	lsls	r3, r3, #8
 80118c6:	4313      	orrs	r3, r2
 80118c8:	693a      	ldr	r2, [r7, #16]
 80118ca:	4313      	orrs	r3, r2
 80118cc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80118ce:	693b      	ldr	r3, [r7, #16]
 80118d0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80118d4:	f023 030c 	bic.w	r3, r3, #12
 80118d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80118da:	693b      	ldr	r3, [r7, #16]
 80118dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80118e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80118e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80118e6:	683b      	ldr	r3, [r7, #0]
 80118e8:	68da      	ldr	r2, [r3, #12]
 80118ea:	683b      	ldr	r3, [r7, #0]
 80118ec:	69db      	ldr	r3, [r3, #28]
 80118ee:	021b      	lsls	r3, r3, #8
 80118f0:	4313      	orrs	r3, r2
 80118f2:	693a      	ldr	r2, [r7, #16]
 80118f4:	4313      	orrs	r3, r2
 80118f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80118f8:	683b      	ldr	r3, [r7, #0]
 80118fa:	691b      	ldr	r3, [r3, #16]
 80118fc:	011a      	lsls	r2, r3, #4
 80118fe:	683b      	ldr	r3, [r7, #0]
 8011900:	6a1b      	ldr	r3, [r3, #32]
 8011902:	031b      	lsls	r3, r3, #12
 8011904:	4313      	orrs	r3, r2
 8011906:	693a      	ldr	r2, [r7, #16]
 8011908:	4313      	orrs	r3, r2
 801190a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8011912:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 801191a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 801191c:	683b      	ldr	r3, [r7, #0]
 801191e:	685a      	ldr	r2, [r3, #4]
 8011920:	683b      	ldr	r3, [r7, #0]
 8011922:	695b      	ldr	r3, [r3, #20]
 8011924:	011b      	lsls	r3, r3, #4
 8011926:	4313      	orrs	r3, r2
 8011928:	68fa      	ldr	r2, [r7, #12]
 801192a:	4313      	orrs	r3, r2
 801192c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	697a      	ldr	r2, [r7, #20]
 8011934:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	693a      	ldr	r2, [r7, #16]
 801193c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	68fa      	ldr	r2, [r7, #12]
 8011944:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	2201      	movs	r2, #1
 801194a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	2201      	movs	r2, #1
 8011952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	2201      	movs	r2, #1
 801195a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	2201      	movs	r2, #1
 8011962:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	2201      	movs	r2, #1
 801196a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	2201      	movs	r2, #1
 8011972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011976:	2300      	movs	r3, #0
}
 8011978:	4618      	mov	r0, r3
 801197a:	3718      	adds	r7, #24
 801197c:	46bd      	mov	sp, r7
 801197e:	bd80      	pop	{r7, pc}

08011980 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011980:	b580      	push	{r7, lr}
 8011982:	b084      	sub	sp, #16
 8011984:	af00      	add	r7, sp, #0
 8011986:	6078      	str	r0, [r7, #4]
 8011988:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011990:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8011998:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80119a0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80119a8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80119aa:	683b      	ldr	r3, [r7, #0]
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d110      	bne.n	80119d2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80119b0:	7bfb      	ldrb	r3, [r7, #15]
 80119b2:	2b01      	cmp	r3, #1
 80119b4:	d102      	bne.n	80119bc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80119b6:	7b7b      	ldrb	r3, [r7, #13]
 80119b8:	2b01      	cmp	r3, #1
 80119ba:	d001      	beq.n	80119c0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80119bc:	2301      	movs	r3, #1
 80119be:	e069      	b.n	8011a94 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	2202      	movs	r2, #2
 80119c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	2202      	movs	r2, #2
 80119cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80119d0:	e031      	b.n	8011a36 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80119d2:	683b      	ldr	r3, [r7, #0]
 80119d4:	2b04      	cmp	r3, #4
 80119d6:	d110      	bne.n	80119fa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80119d8:	7bbb      	ldrb	r3, [r7, #14]
 80119da:	2b01      	cmp	r3, #1
 80119dc:	d102      	bne.n	80119e4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80119de:	7b3b      	ldrb	r3, [r7, #12]
 80119e0:	2b01      	cmp	r3, #1
 80119e2:	d001      	beq.n	80119e8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80119e4:	2301      	movs	r3, #1
 80119e6:	e055      	b.n	8011a94 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	2202      	movs	r2, #2
 80119ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	2202      	movs	r2, #2
 80119f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80119f8:	e01d      	b.n	8011a36 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80119fa:	7bfb      	ldrb	r3, [r7, #15]
 80119fc:	2b01      	cmp	r3, #1
 80119fe:	d108      	bne.n	8011a12 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8011a00:	7bbb      	ldrb	r3, [r7, #14]
 8011a02:	2b01      	cmp	r3, #1
 8011a04:	d105      	bne.n	8011a12 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8011a06:	7b7b      	ldrb	r3, [r7, #13]
 8011a08:	2b01      	cmp	r3, #1
 8011a0a:	d102      	bne.n	8011a12 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8011a0c:	7b3b      	ldrb	r3, [r7, #12]
 8011a0e:	2b01      	cmp	r3, #1
 8011a10:	d001      	beq.n	8011a16 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8011a12:	2301      	movs	r3, #1
 8011a14:	e03e      	b.n	8011a94 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	2202      	movs	r2, #2
 8011a1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	2202      	movs	r2, #2
 8011a22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	2202      	movs	r2, #2
 8011a2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	2202      	movs	r2, #2
 8011a32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8011a36:	683b      	ldr	r3, [r7, #0]
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d003      	beq.n	8011a44 <HAL_TIM_Encoder_Start+0xc4>
 8011a3c:	683b      	ldr	r3, [r7, #0]
 8011a3e:	2b04      	cmp	r3, #4
 8011a40:	d008      	beq.n	8011a54 <HAL_TIM_Encoder_Start+0xd4>
 8011a42:	e00f      	b.n	8011a64 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	2201      	movs	r2, #1
 8011a4a:	2100      	movs	r1, #0
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	f001 f839 	bl	8012ac4 <TIM_CCxChannelCmd>
      break;
 8011a52:	e016      	b.n	8011a82 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	2201      	movs	r2, #1
 8011a5a:	2104      	movs	r1, #4
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	f001 f831 	bl	8012ac4 <TIM_CCxChannelCmd>
      break;
 8011a62:	e00e      	b.n	8011a82 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	2201      	movs	r2, #1
 8011a6a:	2100      	movs	r1, #0
 8011a6c:	4618      	mov	r0, r3
 8011a6e:	f001 f829 	bl	8012ac4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	2201      	movs	r2, #1
 8011a78:	2104      	movs	r1, #4
 8011a7a:	4618      	mov	r0, r3
 8011a7c:	f001 f822 	bl	8012ac4 <TIM_CCxChannelCmd>
      break;
 8011a80:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	681a      	ldr	r2, [r3, #0]
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	f042 0201 	orr.w	r2, r2, #1
 8011a90:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8011a92:	2300      	movs	r3, #0
}
 8011a94:	4618      	mov	r0, r3
 8011a96:	3710      	adds	r7, #16
 8011a98:	46bd      	mov	sp, r7
 8011a9a:	bd80      	pop	{r7, pc}

08011a9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8011a9c:	b580      	push	{r7, lr}
 8011a9e:	b082      	sub	sp, #8
 8011aa0:	af00      	add	r7, sp, #0
 8011aa2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	691b      	ldr	r3, [r3, #16]
 8011aaa:	f003 0302 	and.w	r3, r3, #2
 8011aae:	2b02      	cmp	r3, #2
 8011ab0:	d122      	bne.n	8011af8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	68db      	ldr	r3, [r3, #12]
 8011ab8:	f003 0302 	and.w	r3, r3, #2
 8011abc:	2b02      	cmp	r3, #2
 8011abe:	d11b      	bne.n	8011af8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	f06f 0202 	mvn.w	r2, #2
 8011ac8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	2201      	movs	r2, #1
 8011ace:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	699b      	ldr	r3, [r3, #24]
 8011ad6:	f003 0303 	and.w	r3, r3, #3
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d003      	beq.n	8011ae6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8011ade:	6878      	ldr	r0, [r7, #4]
 8011ae0:	f000 fae3 	bl	80120aa <HAL_TIM_IC_CaptureCallback>
 8011ae4:	e005      	b.n	8011af2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8011ae6:	6878      	ldr	r0, [r7, #4]
 8011ae8:	f000 fad5 	bl	8012096 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011aec:	6878      	ldr	r0, [r7, #4]
 8011aee:	f000 fae6 	bl	80120be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	2200      	movs	r2, #0
 8011af6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	691b      	ldr	r3, [r3, #16]
 8011afe:	f003 0304 	and.w	r3, r3, #4
 8011b02:	2b04      	cmp	r3, #4
 8011b04:	d122      	bne.n	8011b4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	68db      	ldr	r3, [r3, #12]
 8011b0c:	f003 0304 	and.w	r3, r3, #4
 8011b10:	2b04      	cmp	r3, #4
 8011b12:	d11b      	bne.n	8011b4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	f06f 0204 	mvn.w	r2, #4
 8011b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	2202      	movs	r2, #2
 8011b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	699b      	ldr	r3, [r3, #24]
 8011b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d003      	beq.n	8011b3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011b32:	6878      	ldr	r0, [r7, #4]
 8011b34:	f000 fab9 	bl	80120aa <HAL_TIM_IC_CaptureCallback>
 8011b38:	e005      	b.n	8011b46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011b3a:	6878      	ldr	r0, [r7, #4]
 8011b3c:	f000 faab 	bl	8012096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011b40:	6878      	ldr	r0, [r7, #4]
 8011b42:	f000 fabc 	bl	80120be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	2200      	movs	r2, #0
 8011b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	691b      	ldr	r3, [r3, #16]
 8011b52:	f003 0308 	and.w	r3, r3, #8
 8011b56:	2b08      	cmp	r3, #8
 8011b58:	d122      	bne.n	8011ba0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	68db      	ldr	r3, [r3, #12]
 8011b60:	f003 0308 	and.w	r3, r3, #8
 8011b64:	2b08      	cmp	r3, #8
 8011b66:	d11b      	bne.n	8011ba0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	f06f 0208 	mvn.w	r2, #8
 8011b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	2204      	movs	r2, #4
 8011b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	69db      	ldr	r3, [r3, #28]
 8011b7e:	f003 0303 	and.w	r3, r3, #3
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d003      	beq.n	8011b8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011b86:	6878      	ldr	r0, [r7, #4]
 8011b88:	f000 fa8f 	bl	80120aa <HAL_TIM_IC_CaptureCallback>
 8011b8c:	e005      	b.n	8011b9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011b8e:	6878      	ldr	r0, [r7, #4]
 8011b90:	f000 fa81 	bl	8012096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011b94:	6878      	ldr	r0, [r7, #4]
 8011b96:	f000 fa92 	bl	80120be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	2200      	movs	r2, #0
 8011b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	691b      	ldr	r3, [r3, #16]
 8011ba6:	f003 0310 	and.w	r3, r3, #16
 8011baa:	2b10      	cmp	r3, #16
 8011bac:	d122      	bne.n	8011bf4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	68db      	ldr	r3, [r3, #12]
 8011bb4:	f003 0310 	and.w	r3, r3, #16
 8011bb8:	2b10      	cmp	r3, #16
 8011bba:	d11b      	bne.n	8011bf4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	f06f 0210 	mvn.w	r2, #16
 8011bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	2208      	movs	r2, #8
 8011bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	69db      	ldr	r3, [r3, #28]
 8011bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d003      	beq.n	8011be2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011bda:	6878      	ldr	r0, [r7, #4]
 8011bdc:	f000 fa65 	bl	80120aa <HAL_TIM_IC_CaptureCallback>
 8011be0:	e005      	b.n	8011bee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011be2:	6878      	ldr	r0, [r7, #4]
 8011be4:	f000 fa57 	bl	8012096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011be8:	6878      	ldr	r0, [r7, #4]
 8011bea:	f000 fa68 	bl	80120be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	2200      	movs	r2, #0
 8011bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	691b      	ldr	r3, [r3, #16]
 8011bfa:	f003 0301 	and.w	r3, r3, #1
 8011bfe:	2b01      	cmp	r3, #1
 8011c00:	d10e      	bne.n	8011c20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	68db      	ldr	r3, [r3, #12]
 8011c08:	f003 0301 	and.w	r3, r3, #1
 8011c0c:	2b01      	cmp	r3, #1
 8011c0e:	d107      	bne.n	8011c20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	f06f 0201 	mvn.w	r2, #1
 8011c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8011c1a:	6878      	ldr	r0, [r7, #4]
 8011c1c:	f7f8 fc3a 	bl	800a494 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	691b      	ldr	r3, [r3, #16]
 8011c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011c2a:	2b80      	cmp	r3, #128	; 0x80
 8011c2c:	d10e      	bne.n	8011c4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	68db      	ldr	r3, [r3, #12]
 8011c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011c38:	2b80      	cmp	r3, #128	; 0x80
 8011c3a:	d107      	bne.n	8011c4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8011c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8011c46:	6878      	ldr	r0, [r7, #4]
 8011c48:	f001 f872 	bl	8012d30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	691b      	ldr	r3, [r3, #16]
 8011c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011c56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011c5a:	d10e      	bne.n	8011c7a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	68db      	ldr	r3, [r3, #12]
 8011c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011c66:	2b80      	cmp	r3, #128	; 0x80
 8011c68:	d107      	bne.n	8011c7a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8011c72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8011c74:	6878      	ldr	r0, [r7, #4]
 8011c76:	f001 f865 	bl	8012d44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	691b      	ldr	r3, [r3, #16]
 8011c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011c84:	2b40      	cmp	r3, #64	; 0x40
 8011c86:	d10e      	bne.n	8011ca6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	68db      	ldr	r3, [r3, #12]
 8011c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011c92:	2b40      	cmp	r3, #64	; 0x40
 8011c94:	d107      	bne.n	8011ca6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8011c9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8011ca0:	6878      	ldr	r0, [r7, #4]
 8011ca2:	f000 fa20 	bl	80120e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	691b      	ldr	r3, [r3, #16]
 8011cac:	f003 0320 	and.w	r3, r3, #32
 8011cb0:	2b20      	cmp	r3, #32
 8011cb2:	d10e      	bne.n	8011cd2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	68db      	ldr	r3, [r3, #12]
 8011cba:	f003 0320 	and.w	r3, r3, #32
 8011cbe:	2b20      	cmp	r3, #32
 8011cc0:	d107      	bne.n	8011cd2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	f06f 0220 	mvn.w	r2, #32
 8011cca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8011ccc:	6878      	ldr	r0, [r7, #4]
 8011cce:	f001 f825 	bl	8012d1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8011cd2:	bf00      	nop
 8011cd4:	3708      	adds	r7, #8
 8011cd6:	46bd      	mov	sp, r7
 8011cd8:	bd80      	pop	{r7, pc}
	...

08011cdc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8011cdc:	b580      	push	{r7, lr}
 8011cde:	b086      	sub	sp, #24
 8011ce0:	af00      	add	r7, sp, #0
 8011ce2:	60f8      	str	r0, [r7, #12]
 8011ce4:	60b9      	str	r1, [r7, #8]
 8011ce6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011ce8:	2300      	movs	r3, #0
 8011cea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011cf2:	2b01      	cmp	r3, #1
 8011cf4:	d101      	bne.n	8011cfa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8011cf6:	2302      	movs	r3, #2
 8011cf8:	e0ff      	b.n	8011efa <HAL_TIM_PWM_ConfigChannel+0x21e>
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	2201      	movs	r2, #1
 8011cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	2b14      	cmp	r3, #20
 8011d06:	f200 80f0 	bhi.w	8011eea <HAL_TIM_PWM_ConfigChannel+0x20e>
 8011d0a:	a201      	add	r2, pc, #4	; (adr r2, 8011d10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8011d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d10:	08011d65 	.word	0x08011d65
 8011d14:	08011eeb 	.word	0x08011eeb
 8011d18:	08011eeb 	.word	0x08011eeb
 8011d1c:	08011eeb 	.word	0x08011eeb
 8011d20:	08011da5 	.word	0x08011da5
 8011d24:	08011eeb 	.word	0x08011eeb
 8011d28:	08011eeb 	.word	0x08011eeb
 8011d2c:	08011eeb 	.word	0x08011eeb
 8011d30:	08011de7 	.word	0x08011de7
 8011d34:	08011eeb 	.word	0x08011eeb
 8011d38:	08011eeb 	.word	0x08011eeb
 8011d3c:	08011eeb 	.word	0x08011eeb
 8011d40:	08011e27 	.word	0x08011e27
 8011d44:	08011eeb 	.word	0x08011eeb
 8011d48:	08011eeb 	.word	0x08011eeb
 8011d4c:	08011eeb 	.word	0x08011eeb
 8011d50:	08011e69 	.word	0x08011e69
 8011d54:	08011eeb 	.word	0x08011eeb
 8011d58:	08011eeb 	.word	0x08011eeb
 8011d5c:	08011eeb 	.word	0x08011eeb
 8011d60:	08011ea9 	.word	0x08011ea9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	68b9      	ldr	r1, [r7, #8]
 8011d6a:	4618      	mov	r0, r3
 8011d6c:	f000 fb3a 	bl	80123e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	699a      	ldr	r2, [r3, #24]
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	681b      	ldr	r3, [r3, #0]
 8011d7a:	f042 0208 	orr.w	r2, r2, #8
 8011d7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	699a      	ldr	r2, [r3, #24]
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	f022 0204 	bic.w	r2, r2, #4
 8011d8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	6999      	ldr	r1, [r3, #24]
 8011d96:	68bb      	ldr	r3, [r7, #8]
 8011d98:	691a      	ldr	r2, [r3, #16]
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	430a      	orrs	r2, r1
 8011da0:	619a      	str	r2, [r3, #24]
      break;
 8011da2:	e0a5      	b.n	8011ef0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	68b9      	ldr	r1, [r7, #8]
 8011daa:	4618      	mov	r0, r3
 8011dac:	f000 fbaa 	bl	8012504 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	699a      	ldr	r2, [r3, #24]
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011dbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	699a      	ldr	r2, [r3, #24]
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011dce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	6999      	ldr	r1, [r3, #24]
 8011dd6:	68bb      	ldr	r3, [r7, #8]
 8011dd8:	691b      	ldr	r3, [r3, #16]
 8011dda:	021a      	lsls	r2, r3, #8
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	430a      	orrs	r2, r1
 8011de2:	619a      	str	r2, [r3, #24]
      break;
 8011de4:	e084      	b.n	8011ef0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011de6:	68fb      	ldr	r3, [r7, #12]
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	68b9      	ldr	r1, [r7, #8]
 8011dec:	4618      	mov	r0, r3
 8011dee:	f000 fc13 	bl	8012618 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	69da      	ldr	r2, [r3, #28]
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	f042 0208 	orr.w	r2, r2, #8
 8011e00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	69da      	ldr	r2, [r3, #28]
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	f022 0204 	bic.w	r2, r2, #4
 8011e10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	69d9      	ldr	r1, [r3, #28]
 8011e18:	68bb      	ldr	r3, [r7, #8]
 8011e1a:	691a      	ldr	r2, [r3, #16]
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	430a      	orrs	r2, r1
 8011e22:	61da      	str	r2, [r3, #28]
      break;
 8011e24:	e064      	b.n	8011ef0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	68b9      	ldr	r1, [r7, #8]
 8011e2c:	4618      	mov	r0, r3
 8011e2e:	f000 fc7b 	bl	8012728 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	69da      	ldr	r2, [r3, #28]
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011e40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	69da      	ldr	r2, [r3, #28]
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011e50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8011e52:	68fb      	ldr	r3, [r7, #12]
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	69d9      	ldr	r1, [r3, #28]
 8011e58:	68bb      	ldr	r3, [r7, #8]
 8011e5a:	691b      	ldr	r3, [r3, #16]
 8011e5c:	021a      	lsls	r2, r3, #8
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	430a      	orrs	r2, r1
 8011e64:	61da      	str	r2, [r3, #28]
      break;
 8011e66:	e043      	b.n	8011ef0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	68b9      	ldr	r1, [r7, #8]
 8011e6e:	4618      	mov	r0, r3
 8011e70:	f000 fcc4 	bl	80127fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	f042 0208 	orr.w	r2, r2, #8
 8011e82:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	f022 0204 	bic.w	r2, r2, #4
 8011e92:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8011e9a:	68bb      	ldr	r3, [r7, #8]
 8011e9c:	691a      	ldr	r2, [r3, #16]
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	430a      	orrs	r2, r1
 8011ea4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8011ea6:	e023      	b.n	8011ef0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	68b9      	ldr	r1, [r7, #8]
 8011eae:	4618      	mov	r0, r3
 8011eb0:	f000 fd08 	bl	80128c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011ec2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011eca:	68fb      	ldr	r3, [r7, #12]
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011ed2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8011eda:	68bb      	ldr	r3, [r7, #8]
 8011edc:	691b      	ldr	r3, [r3, #16]
 8011ede:	021a      	lsls	r2, r3, #8
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	430a      	orrs	r2, r1
 8011ee6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8011ee8:	e002      	b.n	8011ef0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8011eea:	2301      	movs	r3, #1
 8011eec:	75fb      	strb	r3, [r7, #23]
      break;
 8011eee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	2200      	movs	r2, #0
 8011ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8011ef8:	7dfb      	ldrb	r3, [r7, #23]
}
 8011efa:	4618      	mov	r0, r3
 8011efc:	3718      	adds	r7, #24
 8011efe:	46bd      	mov	sp, r7
 8011f00:	bd80      	pop	{r7, pc}
 8011f02:	bf00      	nop

08011f04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8011f04:	b580      	push	{r7, lr}
 8011f06:	b084      	sub	sp, #16
 8011f08:	af00      	add	r7, sp, #0
 8011f0a:	6078      	str	r0, [r7, #4]
 8011f0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011f0e:	2300      	movs	r3, #0
 8011f10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011f18:	2b01      	cmp	r3, #1
 8011f1a:	d101      	bne.n	8011f20 <HAL_TIM_ConfigClockSource+0x1c>
 8011f1c:	2302      	movs	r3, #2
 8011f1e:	e0b6      	b.n	801208e <HAL_TIM_ConfigClockSource+0x18a>
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	2201      	movs	r2, #1
 8011f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	2202      	movs	r2, #2
 8011f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	689b      	ldr	r3, [r3, #8]
 8011f36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8011f38:	68bb      	ldr	r3, [r7, #8]
 8011f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011f3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8011f42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011f44:	68bb      	ldr	r3, [r7, #8]
 8011f46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011f4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	68ba      	ldr	r2, [r7, #8]
 8011f52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8011f54:	683b      	ldr	r3, [r7, #0]
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011f5c:	d03e      	beq.n	8011fdc <HAL_TIM_ConfigClockSource+0xd8>
 8011f5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011f62:	f200 8087 	bhi.w	8012074 <HAL_TIM_ConfigClockSource+0x170>
 8011f66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011f6a:	f000 8086 	beq.w	801207a <HAL_TIM_ConfigClockSource+0x176>
 8011f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011f72:	d87f      	bhi.n	8012074 <HAL_TIM_ConfigClockSource+0x170>
 8011f74:	2b70      	cmp	r3, #112	; 0x70
 8011f76:	d01a      	beq.n	8011fae <HAL_TIM_ConfigClockSource+0xaa>
 8011f78:	2b70      	cmp	r3, #112	; 0x70
 8011f7a:	d87b      	bhi.n	8012074 <HAL_TIM_ConfigClockSource+0x170>
 8011f7c:	2b60      	cmp	r3, #96	; 0x60
 8011f7e:	d050      	beq.n	8012022 <HAL_TIM_ConfigClockSource+0x11e>
 8011f80:	2b60      	cmp	r3, #96	; 0x60
 8011f82:	d877      	bhi.n	8012074 <HAL_TIM_ConfigClockSource+0x170>
 8011f84:	2b50      	cmp	r3, #80	; 0x50
 8011f86:	d03c      	beq.n	8012002 <HAL_TIM_ConfigClockSource+0xfe>
 8011f88:	2b50      	cmp	r3, #80	; 0x50
 8011f8a:	d873      	bhi.n	8012074 <HAL_TIM_ConfigClockSource+0x170>
 8011f8c:	2b40      	cmp	r3, #64	; 0x40
 8011f8e:	d058      	beq.n	8012042 <HAL_TIM_ConfigClockSource+0x13e>
 8011f90:	2b40      	cmp	r3, #64	; 0x40
 8011f92:	d86f      	bhi.n	8012074 <HAL_TIM_ConfigClockSource+0x170>
 8011f94:	2b30      	cmp	r3, #48	; 0x30
 8011f96:	d064      	beq.n	8012062 <HAL_TIM_ConfigClockSource+0x15e>
 8011f98:	2b30      	cmp	r3, #48	; 0x30
 8011f9a:	d86b      	bhi.n	8012074 <HAL_TIM_ConfigClockSource+0x170>
 8011f9c:	2b20      	cmp	r3, #32
 8011f9e:	d060      	beq.n	8012062 <HAL_TIM_ConfigClockSource+0x15e>
 8011fa0:	2b20      	cmp	r3, #32
 8011fa2:	d867      	bhi.n	8012074 <HAL_TIM_ConfigClockSource+0x170>
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d05c      	beq.n	8012062 <HAL_TIM_ConfigClockSource+0x15e>
 8011fa8:	2b10      	cmp	r3, #16
 8011faa:	d05a      	beq.n	8012062 <HAL_TIM_ConfigClockSource+0x15e>
 8011fac:	e062      	b.n	8012074 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	6818      	ldr	r0, [r3, #0]
 8011fb2:	683b      	ldr	r3, [r7, #0]
 8011fb4:	6899      	ldr	r1, [r3, #8]
 8011fb6:	683b      	ldr	r3, [r7, #0]
 8011fb8:	685a      	ldr	r2, [r3, #4]
 8011fba:	683b      	ldr	r3, [r7, #0]
 8011fbc:	68db      	ldr	r3, [r3, #12]
 8011fbe:	f000 fd61 	bl	8012a84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	689b      	ldr	r3, [r3, #8]
 8011fc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8011fca:	68bb      	ldr	r3, [r7, #8]
 8011fcc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8011fd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	68ba      	ldr	r2, [r7, #8]
 8011fd8:	609a      	str	r2, [r3, #8]
      break;
 8011fda:	e04f      	b.n	801207c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	6818      	ldr	r0, [r3, #0]
 8011fe0:	683b      	ldr	r3, [r7, #0]
 8011fe2:	6899      	ldr	r1, [r3, #8]
 8011fe4:	683b      	ldr	r3, [r7, #0]
 8011fe6:	685a      	ldr	r2, [r3, #4]
 8011fe8:	683b      	ldr	r3, [r7, #0]
 8011fea:	68db      	ldr	r3, [r3, #12]
 8011fec:	f000 fd4a 	bl	8012a84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	689a      	ldr	r2, [r3, #8]
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011ffe:	609a      	str	r2, [r3, #8]
      break;
 8012000:	e03c      	b.n	801207c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	6818      	ldr	r0, [r3, #0]
 8012006:	683b      	ldr	r3, [r7, #0]
 8012008:	6859      	ldr	r1, [r3, #4]
 801200a:	683b      	ldr	r3, [r7, #0]
 801200c:	68db      	ldr	r3, [r3, #12]
 801200e:	461a      	mov	r2, r3
 8012010:	f000 fcbe 	bl	8012990 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	2150      	movs	r1, #80	; 0x50
 801201a:	4618      	mov	r0, r3
 801201c:	f000 fd17 	bl	8012a4e <TIM_ITRx_SetConfig>
      break;
 8012020:	e02c      	b.n	801207c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	6818      	ldr	r0, [r3, #0]
 8012026:	683b      	ldr	r3, [r7, #0]
 8012028:	6859      	ldr	r1, [r3, #4]
 801202a:	683b      	ldr	r3, [r7, #0]
 801202c:	68db      	ldr	r3, [r3, #12]
 801202e:	461a      	mov	r2, r3
 8012030:	f000 fcdd 	bl	80129ee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	2160      	movs	r1, #96	; 0x60
 801203a:	4618      	mov	r0, r3
 801203c:	f000 fd07 	bl	8012a4e <TIM_ITRx_SetConfig>
      break;
 8012040:	e01c      	b.n	801207c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	6818      	ldr	r0, [r3, #0]
 8012046:	683b      	ldr	r3, [r7, #0]
 8012048:	6859      	ldr	r1, [r3, #4]
 801204a:	683b      	ldr	r3, [r7, #0]
 801204c:	68db      	ldr	r3, [r3, #12]
 801204e:	461a      	mov	r2, r3
 8012050:	f000 fc9e 	bl	8012990 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	2140      	movs	r1, #64	; 0x40
 801205a:	4618      	mov	r0, r3
 801205c:	f000 fcf7 	bl	8012a4e <TIM_ITRx_SetConfig>
      break;
 8012060:	e00c      	b.n	801207c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	681a      	ldr	r2, [r3, #0]
 8012066:	683b      	ldr	r3, [r7, #0]
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	4619      	mov	r1, r3
 801206c:	4610      	mov	r0, r2
 801206e:	f000 fcee 	bl	8012a4e <TIM_ITRx_SetConfig>
      break;
 8012072:	e003      	b.n	801207c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8012074:	2301      	movs	r3, #1
 8012076:	73fb      	strb	r3, [r7, #15]
      break;
 8012078:	e000      	b.n	801207c <HAL_TIM_ConfigClockSource+0x178>
      break;
 801207a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	2201      	movs	r2, #1
 8012080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	2200      	movs	r2, #0
 8012088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801208c:	7bfb      	ldrb	r3, [r7, #15]
}
 801208e:	4618      	mov	r0, r3
 8012090:	3710      	adds	r7, #16
 8012092:	46bd      	mov	sp, r7
 8012094:	bd80      	pop	{r7, pc}

08012096 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8012096:	b480      	push	{r7}
 8012098:	b083      	sub	sp, #12
 801209a:	af00      	add	r7, sp, #0
 801209c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801209e:	bf00      	nop
 80120a0:	370c      	adds	r7, #12
 80120a2:	46bd      	mov	sp, r7
 80120a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a8:	4770      	bx	lr

080120aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80120aa:	b480      	push	{r7}
 80120ac:	b083      	sub	sp, #12
 80120ae:	af00      	add	r7, sp, #0
 80120b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80120b2:	bf00      	nop
 80120b4:	370c      	adds	r7, #12
 80120b6:	46bd      	mov	sp, r7
 80120b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120bc:	4770      	bx	lr

080120be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80120be:	b480      	push	{r7}
 80120c0:	b083      	sub	sp, #12
 80120c2:	af00      	add	r7, sp, #0
 80120c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80120c6:	bf00      	nop
 80120c8:	370c      	adds	r7, #12
 80120ca:	46bd      	mov	sp, r7
 80120cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120d0:	4770      	bx	lr

080120d2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80120d2:	b480      	push	{r7}
 80120d4:	b083      	sub	sp, #12
 80120d6:	af00      	add	r7, sp, #0
 80120d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80120da:	bf00      	nop
 80120dc:	370c      	adds	r7, #12
 80120de:	46bd      	mov	sp, r7
 80120e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e4:	4770      	bx	lr

080120e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80120e6:	b480      	push	{r7}
 80120e8:	b083      	sub	sp, #12
 80120ea:	af00      	add	r7, sp, #0
 80120ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80120ee:	bf00      	nop
 80120f0:	370c      	adds	r7, #12
 80120f2:	46bd      	mov	sp, r7
 80120f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120f8:	4770      	bx	lr

080120fa <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80120fa:	b480      	push	{r7}
 80120fc:	b083      	sub	sp, #12
 80120fe:	af00      	add	r7, sp, #0
 8012100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8012102:	bf00      	nop
 8012104:	370c      	adds	r7, #12
 8012106:	46bd      	mov	sp, r7
 8012108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801210c:	4770      	bx	lr

0801210e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 801210e:	b580      	push	{r7, lr}
 8012110:	b084      	sub	sp, #16
 8012112:	af00      	add	r7, sp, #0
 8012114:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801211a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012120:	687a      	ldr	r2, [r7, #4]
 8012122:	429a      	cmp	r2, r3
 8012124:	d107      	bne.n	8012136 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012126:	68fb      	ldr	r3, [r7, #12]
 8012128:	2201      	movs	r2, #1
 801212a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	2201      	movs	r2, #1
 8012130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012134:	e02a      	b.n	801218c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801213a:	687a      	ldr	r2, [r7, #4]
 801213c:	429a      	cmp	r2, r3
 801213e:	d107      	bne.n	8012150 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	2202      	movs	r2, #2
 8012144:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	2201      	movs	r2, #1
 801214a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801214e:	e01d      	b.n	801218c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012154:	687a      	ldr	r2, [r7, #4]
 8012156:	429a      	cmp	r2, r3
 8012158:	d107      	bne.n	801216a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	2204      	movs	r2, #4
 801215e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	2201      	movs	r2, #1
 8012164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012168:	e010      	b.n	801218c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801216e:	687a      	ldr	r2, [r7, #4]
 8012170:	429a      	cmp	r2, r3
 8012172:	d107      	bne.n	8012184 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	2208      	movs	r2, #8
 8012178:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	2201      	movs	r2, #1
 801217e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012182:	e003      	b.n	801218c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	2201      	movs	r2, #1
 8012188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 801218c:	68f8      	ldr	r0, [r7, #12]
 801218e:	f7ff ffb4 	bl	80120fa <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	2200      	movs	r2, #0
 8012196:	771a      	strb	r2, [r3, #28]
}
 8012198:	bf00      	nop
 801219a:	3710      	adds	r7, #16
 801219c:	46bd      	mov	sp, r7
 801219e:	bd80      	pop	{r7, pc}

080121a0 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80121a0:	b580      	push	{r7, lr}
 80121a2:	b084      	sub	sp, #16
 80121a4:	af00      	add	r7, sp, #0
 80121a6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80121ac:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121b2:	687a      	ldr	r2, [r7, #4]
 80121b4:	429a      	cmp	r2, r3
 80121b6:	d10b      	bne.n	80121d0 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	2201      	movs	r2, #1
 80121bc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	69db      	ldr	r3, [r3, #28]
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d136      	bne.n	8012234 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	2201      	movs	r2, #1
 80121ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80121ce:	e031      	b.n	8012234 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80121d4:	687a      	ldr	r2, [r7, #4]
 80121d6:	429a      	cmp	r2, r3
 80121d8:	d10b      	bne.n	80121f2 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	2202      	movs	r2, #2
 80121de:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	69db      	ldr	r3, [r3, #28]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d125      	bne.n	8012234 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	2201      	movs	r2, #1
 80121ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80121f0:	e020      	b.n	8012234 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121f6:	687a      	ldr	r2, [r7, #4]
 80121f8:	429a      	cmp	r2, r3
 80121fa:	d10b      	bne.n	8012214 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80121fc:	68fb      	ldr	r3, [r7, #12]
 80121fe:	2204      	movs	r2, #4
 8012200:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	69db      	ldr	r3, [r3, #28]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d114      	bne.n	8012234 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	2201      	movs	r2, #1
 801220e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012212:	e00f      	b.n	8012234 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012218:	687a      	ldr	r2, [r7, #4]
 801221a:	429a      	cmp	r2, r3
 801221c:	d10a      	bne.n	8012234 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	2208      	movs	r2, #8
 8012222:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	69db      	ldr	r3, [r3, #28]
 8012228:	2b00      	cmp	r3, #0
 801222a:	d103      	bne.n	8012234 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	2201      	movs	r2, #1
 8012230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012234:	68f8      	ldr	r0, [r7, #12]
 8012236:	f7ff ff42 	bl	80120be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	2200      	movs	r2, #0
 801223e:	771a      	strb	r2, [r3, #28]
}
 8012240:	bf00      	nop
 8012242:	3710      	adds	r7, #16
 8012244:	46bd      	mov	sp, r7
 8012246:	bd80      	pop	{r7, pc}

08012248 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012248:	b580      	push	{r7, lr}
 801224a:	b084      	sub	sp, #16
 801224c:	af00      	add	r7, sp, #0
 801224e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012254:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801225a:	687a      	ldr	r2, [r7, #4]
 801225c:	429a      	cmp	r2, r3
 801225e:	d103      	bne.n	8012268 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	2201      	movs	r2, #1
 8012264:	771a      	strb	r2, [r3, #28]
 8012266:	e019      	b.n	801229c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801226c:	687a      	ldr	r2, [r7, #4]
 801226e:	429a      	cmp	r2, r3
 8012270:	d103      	bne.n	801227a <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	2202      	movs	r2, #2
 8012276:	771a      	strb	r2, [r3, #28]
 8012278:	e010      	b.n	801229c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801227e:	687a      	ldr	r2, [r7, #4]
 8012280:	429a      	cmp	r2, r3
 8012282:	d103      	bne.n	801228c <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	2204      	movs	r2, #4
 8012288:	771a      	strb	r2, [r3, #28]
 801228a:	e007      	b.n	801229c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012290:	687a      	ldr	r2, [r7, #4]
 8012292:	429a      	cmp	r2, r3
 8012294:	d102      	bne.n	801229c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	2208      	movs	r2, #8
 801229a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 801229c:	68f8      	ldr	r0, [r7, #12]
 801229e:	f7ff ff18 	bl	80120d2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	2200      	movs	r2, #0
 80122a6:	771a      	strb	r2, [r3, #28]
}
 80122a8:	bf00      	nop
 80122aa:	3710      	adds	r7, #16
 80122ac:	46bd      	mov	sp, r7
 80122ae:	bd80      	pop	{r7, pc}

080122b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80122b0:	b480      	push	{r7}
 80122b2:	b085      	sub	sp, #20
 80122b4:	af00      	add	r7, sp, #0
 80122b6:	6078      	str	r0, [r7, #4]
 80122b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	4a40      	ldr	r2, [pc, #256]	; (80123c4 <TIM_Base_SetConfig+0x114>)
 80122c4:	4293      	cmp	r3, r2
 80122c6:	d013      	beq.n	80122f0 <TIM_Base_SetConfig+0x40>
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80122ce:	d00f      	beq.n	80122f0 <TIM_Base_SetConfig+0x40>
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	4a3d      	ldr	r2, [pc, #244]	; (80123c8 <TIM_Base_SetConfig+0x118>)
 80122d4:	4293      	cmp	r3, r2
 80122d6:	d00b      	beq.n	80122f0 <TIM_Base_SetConfig+0x40>
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	4a3c      	ldr	r2, [pc, #240]	; (80123cc <TIM_Base_SetConfig+0x11c>)
 80122dc:	4293      	cmp	r3, r2
 80122de:	d007      	beq.n	80122f0 <TIM_Base_SetConfig+0x40>
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	4a3b      	ldr	r2, [pc, #236]	; (80123d0 <TIM_Base_SetConfig+0x120>)
 80122e4:	4293      	cmp	r3, r2
 80122e6:	d003      	beq.n	80122f0 <TIM_Base_SetConfig+0x40>
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	4a3a      	ldr	r2, [pc, #232]	; (80123d4 <TIM_Base_SetConfig+0x124>)
 80122ec:	4293      	cmp	r3, r2
 80122ee:	d108      	bne.n	8012302 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80122f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80122f8:	683b      	ldr	r3, [r7, #0]
 80122fa:	685b      	ldr	r3, [r3, #4]
 80122fc:	68fa      	ldr	r2, [r7, #12]
 80122fe:	4313      	orrs	r3, r2
 8012300:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	4a2f      	ldr	r2, [pc, #188]	; (80123c4 <TIM_Base_SetConfig+0x114>)
 8012306:	4293      	cmp	r3, r2
 8012308:	d01f      	beq.n	801234a <TIM_Base_SetConfig+0x9a>
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012310:	d01b      	beq.n	801234a <TIM_Base_SetConfig+0x9a>
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	4a2c      	ldr	r2, [pc, #176]	; (80123c8 <TIM_Base_SetConfig+0x118>)
 8012316:	4293      	cmp	r3, r2
 8012318:	d017      	beq.n	801234a <TIM_Base_SetConfig+0x9a>
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	4a2b      	ldr	r2, [pc, #172]	; (80123cc <TIM_Base_SetConfig+0x11c>)
 801231e:	4293      	cmp	r3, r2
 8012320:	d013      	beq.n	801234a <TIM_Base_SetConfig+0x9a>
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	4a2a      	ldr	r2, [pc, #168]	; (80123d0 <TIM_Base_SetConfig+0x120>)
 8012326:	4293      	cmp	r3, r2
 8012328:	d00f      	beq.n	801234a <TIM_Base_SetConfig+0x9a>
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	4a29      	ldr	r2, [pc, #164]	; (80123d4 <TIM_Base_SetConfig+0x124>)
 801232e:	4293      	cmp	r3, r2
 8012330:	d00b      	beq.n	801234a <TIM_Base_SetConfig+0x9a>
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	4a28      	ldr	r2, [pc, #160]	; (80123d8 <TIM_Base_SetConfig+0x128>)
 8012336:	4293      	cmp	r3, r2
 8012338:	d007      	beq.n	801234a <TIM_Base_SetConfig+0x9a>
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	4a27      	ldr	r2, [pc, #156]	; (80123dc <TIM_Base_SetConfig+0x12c>)
 801233e:	4293      	cmp	r3, r2
 8012340:	d003      	beq.n	801234a <TIM_Base_SetConfig+0x9a>
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	4a26      	ldr	r2, [pc, #152]	; (80123e0 <TIM_Base_SetConfig+0x130>)
 8012346:	4293      	cmp	r3, r2
 8012348:	d108      	bne.n	801235c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012350:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012352:	683b      	ldr	r3, [r7, #0]
 8012354:	68db      	ldr	r3, [r3, #12]
 8012356:	68fa      	ldr	r2, [r7, #12]
 8012358:	4313      	orrs	r3, r2
 801235a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8012362:	683b      	ldr	r3, [r7, #0]
 8012364:	695b      	ldr	r3, [r3, #20]
 8012366:	4313      	orrs	r3, r2
 8012368:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	68fa      	ldr	r2, [r7, #12]
 801236e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012370:	683b      	ldr	r3, [r7, #0]
 8012372:	689a      	ldr	r2, [r3, #8]
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8012378:	683b      	ldr	r3, [r7, #0]
 801237a:	681a      	ldr	r2, [r3, #0]
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	4a10      	ldr	r2, [pc, #64]	; (80123c4 <TIM_Base_SetConfig+0x114>)
 8012384:	4293      	cmp	r3, r2
 8012386:	d00f      	beq.n	80123a8 <TIM_Base_SetConfig+0xf8>
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	4a12      	ldr	r2, [pc, #72]	; (80123d4 <TIM_Base_SetConfig+0x124>)
 801238c:	4293      	cmp	r3, r2
 801238e:	d00b      	beq.n	80123a8 <TIM_Base_SetConfig+0xf8>
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	4a11      	ldr	r2, [pc, #68]	; (80123d8 <TIM_Base_SetConfig+0x128>)
 8012394:	4293      	cmp	r3, r2
 8012396:	d007      	beq.n	80123a8 <TIM_Base_SetConfig+0xf8>
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	4a10      	ldr	r2, [pc, #64]	; (80123dc <TIM_Base_SetConfig+0x12c>)
 801239c:	4293      	cmp	r3, r2
 801239e:	d003      	beq.n	80123a8 <TIM_Base_SetConfig+0xf8>
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	4a0f      	ldr	r2, [pc, #60]	; (80123e0 <TIM_Base_SetConfig+0x130>)
 80123a4:	4293      	cmp	r3, r2
 80123a6:	d103      	bne.n	80123b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80123a8:	683b      	ldr	r3, [r7, #0]
 80123aa:	691a      	ldr	r2, [r3, #16]
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	2201      	movs	r2, #1
 80123b4:	615a      	str	r2, [r3, #20]
}
 80123b6:	bf00      	nop
 80123b8:	3714      	adds	r7, #20
 80123ba:	46bd      	mov	sp, r7
 80123bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123c0:	4770      	bx	lr
 80123c2:	bf00      	nop
 80123c4:	40012c00 	.word	0x40012c00
 80123c8:	40000400 	.word	0x40000400
 80123cc:	40000800 	.word	0x40000800
 80123d0:	40000c00 	.word	0x40000c00
 80123d4:	40013400 	.word	0x40013400
 80123d8:	40014000 	.word	0x40014000
 80123dc:	40014400 	.word	0x40014400
 80123e0:	40014800 	.word	0x40014800

080123e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80123e4:	b480      	push	{r7}
 80123e6:	b087      	sub	sp, #28
 80123e8:	af00      	add	r7, sp, #0
 80123ea:	6078      	str	r0, [r7, #4]
 80123ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	6a1b      	ldr	r3, [r3, #32]
 80123f2:	f023 0201 	bic.w	r2, r3, #1
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	6a1b      	ldr	r3, [r3, #32]
 80123fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	685b      	ldr	r3, [r3, #4]
 8012404:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	699b      	ldr	r3, [r3, #24]
 801240a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801240c:	68fb      	ldr	r3, [r7, #12]
 801240e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	f023 0303 	bic.w	r3, r3, #3
 801241e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012420:	683b      	ldr	r3, [r7, #0]
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	68fa      	ldr	r2, [r7, #12]
 8012426:	4313      	orrs	r3, r2
 8012428:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801242a:	697b      	ldr	r3, [r7, #20]
 801242c:	f023 0302 	bic.w	r3, r3, #2
 8012430:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8012432:	683b      	ldr	r3, [r7, #0]
 8012434:	689b      	ldr	r3, [r3, #8]
 8012436:	697a      	ldr	r2, [r7, #20]
 8012438:	4313      	orrs	r3, r2
 801243a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	4a2c      	ldr	r2, [pc, #176]	; (80124f0 <TIM_OC1_SetConfig+0x10c>)
 8012440:	4293      	cmp	r3, r2
 8012442:	d00f      	beq.n	8012464 <TIM_OC1_SetConfig+0x80>
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	4a2b      	ldr	r2, [pc, #172]	; (80124f4 <TIM_OC1_SetConfig+0x110>)
 8012448:	4293      	cmp	r3, r2
 801244a:	d00b      	beq.n	8012464 <TIM_OC1_SetConfig+0x80>
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	4a2a      	ldr	r2, [pc, #168]	; (80124f8 <TIM_OC1_SetConfig+0x114>)
 8012450:	4293      	cmp	r3, r2
 8012452:	d007      	beq.n	8012464 <TIM_OC1_SetConfig+0x80>
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	4a29      	ldr	r2, [pc, #164]	; (80124fc <TIM_OC1_SetConfig+0x118>)
 8012458:	4293      	cmp	r3, r2
 801245a:	d003      	beq.n	8012464 <TIM_OC1_SetConfig+0x80>
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	4a28      	ldr	r2, [pc, #160]	; (8012500 <TIM_OC1_SetConfig+0x11c>)
 8012460:	4293      	cmp	r3, r2
 8012462:	d10c      	bne.n	801247e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8012464:	697b      	ldr	r3, [r7, #20]
 8012466:	f023 0308 	bic.w	r3, r3, #8
 801246a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801246c:	683b      	ldr	r3, [r7, #0]
 801246e:	68db      	ldr	r3, [r3, #12]
 8012470:	697a      	ldr	r2, [r7, #20]
 8012472:	4313      	orrs	r3, r2
 8012474:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8012476:	697b      	ldr	r3, [r7, #20]
 8012478:	f023 0304 	bic.w	r3, r3, #4
 801247c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	4a1b      	ldr	r2, [pc, #108]	; (80124f0 <TIM_OC1_SetConfig+0x10c>)
 8012482:	4293      	cmp	r3, r2
 8012484:	d00f      	beq.n	80124a6 <TIM_OC1_SetConfig+0xc2>
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	4a1a      	ldr	r2, [pc, #104]	; (80124f4 <TIM_OC1_SetConfig+0x110>)
 801248a:	4293      	cmp	r3, r2
 801248c:	d00b      	beq.n	80124a6 <TIM_OC1_SetConfig+0xc2>
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	4a19      	ldr	r2, [pc, #100]	; (80124f8 <TIM_OC1_SetConfig+0x114>)
 8012492:	4293      	cmp	r3, r2
 8012494:	d007      	beq.n	80124a6 <TIM_OC1_SetConfig+0xc2>
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	4a18      	ldr	r2, [pc, #96]	; (80124fc <TIM_OC1_SetConfig+0x118>)
 801249a:	4293      	cmp	r3, r2
 801249c:	d003      	beq.n	80124a6 <TIM_OC1_SetConfig+0xc2>
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	4a17      	ldr	r2, [pc, #92]	; (8012500 <TIM_OC1_SetConfig+0x11c>)
 80124a2:	4293      	cmp	r3, r2
 80124a4:	d111      	bne.n	80124ca <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80124a6:	693b      	ldr	r3, [r7, #16]
 80124a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80124ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80124ae:	693b      	ldr	r3, [r7, #16]
 80124b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80124b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80124b6:	683b      	ldr	r3, [r7, #0]
 80124b8:	695b      	ldr	r3, [r3, #20]
 80124ba:	693a      	ldr	r2, [r7, #16]
 80124bc:	4313      	orrs	r3, r2
 80124be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80124c0:	683b      	ldr	r3, [r7, #0]
 80124c2:	699b      	ldr	r3, [r3, #24]
 80124c4:	693a      	ldr	r2, [r7, #16]
 80124c6:	4313      	orrs	r3, r2
 80124c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	693a      	ldr	r2, [r7, #16]
 80124ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	68fa      	ldr	r2, [r7, #12]
 80124d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80124d6:	683b      	ldr	r3, [r7, #0]
 80124d8:	685a      	ldr	r2, [r3, #4]
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	697a      	ldr	r2, [r7, #20]
 80124e2:	621a      	str	r2, [r3, #32]
}
 80124e4:	bf00      	nop
 80124e6:	371c      	adds	r7, #28
 80124e8:	46bd      	mov	sp, r7
 80124ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ee:	4770      	bx	lr
 80124f0:	40012c00 	.word	0x40012c00
 80124f4:	40013400 	.word	0x40013400
 80124f8:	40014000 	.word	0x40014000
 80124fc:	40014400 	.word	0x40014400
 8012500:	40014800 	.word	0x40014800

08012504 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012504:	b480      	push	{r7}
 8012506:	b087      	sub	sp, #28
 8012508:	af00      	add	r7, sp, #0
 801250a:	6078      	str	r0, [r7, #4]
 801250c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	6a1b      	ldr	r3, [r3, #32]
 8012512:	f023 0210 	bic.w	r2, r3, #16
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	6a1b      	ldr	r3, [r3, #32]
 801251e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	685b      	ldr	r3, [r3, #4]
 8012524:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	699b      	ldr	r3, [r3, #24]
 801252a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8012532:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801253e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012540:	683b      	ldr	r3, [r7, #0]
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	021b      	lsls	r3, r3, #8
 8012546:	68fa      	ldr	r2, [r7, #12]
 8012548:	4313      	orrs	r3, r2
 801254a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801254c:	697b      	ldr	r3, [r7, #20]
 801254e:	f023 0320 	bic.w	r3, r3, #32
 8012552:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8012554:	683b      	ldr	r3, [r7, #0]
 8012556:	689b      	ldr	r3, [r3, #8]
 8012558:	011b      	lsls	r3, r3, #4
 801255a:	697a      	ldr	r2, [r7, #20]
 801255c:	4313      	orrs	r3, r2
 801255e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	4a28      	ldr	r2, [pc, #160]	; (8012604 <TIM_OC2_SetConfig+0x100>)
 8012564:	4293      	cmp	r3, r2
 8012566:	d003      	beq.n	8012570 <TIM_OC2_SetConfig+0x6c>
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	4a27      	ldr	r2, [pc, #156]	; (8012608 <TIM_OC2_SetConfig+0x104>)
 801256c:	4293      	cmp	r3, r2
 801256e:	d10d      	bne.n	801258c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8012570:	697b      	ldr	r3, [r7, #20]
 8012572:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012576:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8012578:	683b      	ldr	r3, [r7, #0]
 801257a:	68db      	ldr	r3, [r3, #12]
 801257c:	011b      	lsls	r3, r3, #4
 801257e:	697a      	ldr	r2, [r7, #20]
 8012580:	4313      	orrs	r3, r2
 8012582:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8012584:	697b      	ldr	r3, [r7, #20]
 8012586:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801258a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	4a1d      	ldr	r2, [pc, #116]	; (8012604 <TIM_OC2_SetConfig+0x100>)
 8012590:	4293      	cmp	r3, r2
 8012592:	d00f      	beq.n	80125b4 <TIM_OC2_SetConfig+0xb0>
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	4a1c      	ldr	r2, [pc, #112]	; (8012608 <TIM_OC2_SetConfig+0x104>)
 8012598:	4293      	cmp	r3, r2
 801259a:	d00b      	beq.n	80125b4 <TIM_OC2_SetConfig+0xb0>
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	4a1b      	ldr	r2, [pc, #108]	; (801260c <TIM_OC2_SetConfig+0x108>)
 80125a0:	4293      	cmp	r3, r2
 80125a2:	d007      	beq.n	80125b4 <TIM_OC2_SetConfig+0xb0>
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	4a1a      	ldr	r2, [pc, #104]	; (8012610 <TIM_OC2_SetConfig+0x10c>)
 80125a8:	4293      	cmp	r3, r2
 80125aa:	d003      	beq.n	80125b4 <TIM_OC2_SetConfig+0xb0>
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	4a19      	ldr	r2, [pc, #100]	; (8012614 <TIM_OC2_SetConfig+0x110>)
 80125b0:	4293      	cmp	r3, r2
 80125b2:	d113      	bne.n	80125dc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80125b4:	693b      	ldr	r3, [r7, #16]
 80125b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80125ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80125bc:	693b      	ldr	r3, [r7, #16]
 80125be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80125c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80125c4:	683b      	ldr	r3, [r7, #0]
 80125c6:	695b      	ldr	r3, [r3, #20]
 80125c8:	009b      	lsls	r3, r3, #2
 80125ca:	693a      	ldr	r2, [r7, #16]
 80125cc:	4313      	orrs	r3, r2
 80125ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80125d0:	683b      	ldr	r3, [r7, #0]
 80125d2:	699b      	ldr	r3, [r3, #24]
 80125d4:	009b      	lsls	r3, r3, #2
 80125d6:	693a      	ldr	r2, [r7, #16]
 80125d8:	4313      	orrs	r3, r2
 80125da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	693a      	ldr	r2, [r7, #16]
 80125e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	68fa      	ldr	r2, [r7, #12]
 80125e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80125e8:	683b      	ldr	r3, [r7, #0]
 80125ea:	685a      	ldr	r2, [r3, #4]
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	697a      	ldr	r2, [r7, #20]
 80125f4:	621a      	str	r2, [r3, #32]
}
 80125f6:	bf00      	nop
 80125f8:	371c      	adds	r7, #28
 80125fa:	46bd      	mov	sp, r7
 80125fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012600:	4770      	bx	lr
 8012602:	bf00      	nop
 8012604:	40012c00 	.word	0x40012c00
 8012608:	40013400 	.word	0x40013400
 801260c:	40014000 	.word	0x40014000
 8012610:	40014400 	.word	0x40014400
 8012614:	40014800 	.word	0x40014800

08012618 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012618:	b480      	push	{r7}
 801261a:	b087      	sub	sp, #28
 801261c:	af00      	add	r7, sp, #0
 801261e:	6078      	str	r0, [r7, #4]
 8012620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	6a1b      	ldr	r3, [r3, #32]
 8012626:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	6a1b      	ldr	r3, [r3, #32]
 8012632:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	685b      	ldr	r3, [r3, #4]
 8012638:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	69db      	ldr	r3, [r3, #28]
 801263e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801264a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	f023 0303 	bic.w	r3, r3, #3
 8012652:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012654:	683b      	ldr	r3, [r7, #0]
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	68fa      	ldr	r2, [r7, #12]
 801265a:	4313      	orrs	r3, r2
 801265c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801265e:	697b      	ldr	r3, [r7, #20]
 8012660:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012664:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8012666:	683b      	ldr	r3, [r7, #0]
 8012668:	689b      	ldr	r3, [r3, #8]
 801266a:	021b      	lsls	r3, r3, #8
 801266c:	697a      	ldr	r2, [r7, #20]
 801266e:	4313      	orrs	r3, r2
 8012670:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	4a27      	ldr	r2, [pc, #156]	; (8012714 <TIM_OC3_SetConfig+0xfc>)
 8012676:	4293      	cmp	r3, r2
 8012678:	d003      	beq.n	8012682 <TIM_OC3_SetConfig+0x6a>
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	4a26      	ldr	r2, [pc, #152]	; (8012718 <TIM_OC3_SetConfig+0x100>)
 801267e:	4293      	cmp	r3, r2
 8012680:	d10d      	bne.n	801269e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8012682:	697b      	ldr	r3, [r7, #20]
 8012684:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012688:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801268a:	683b      	ldr	r3, [r7, #0]
 801268c:	68db      	ldr	r3, [r3, #12]
 801268e:	021b      	lsls	r3, r3, #8
 8012690:	697a      	ldr	r2, [r7, #20]
 8012692:	4313      	orrs	r3, r2
 8012694:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8012696:	697b      	ldr	r3, [r7, #20]
 8012698:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801269c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	4a1c      	ldr	r2, [pc, #112]	; (8012714 <TIM_OC3_SetConfig+0xfc>)
 80126a2:	4293      	cmp	r3, r2
 80126a4:	d00f      	beq.n	80126c6 <TIM_OC3_SetConfig+0xae>
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	4a1b      	ldr	r2, [pc, #108]	; (8012718 <TIM_OC3_SetConfig+0x100>)
 80126aa:	4293      	cmp	r3, r2
 80126ac:	d00b      	beq.n	80126c6 <TIM_OC3_SetConfig+0xae>
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	4a1a      	ldr	r2, [pc, #104]	; (801271c <TIM_OC3_SetConfig+0x104>)
 80126b2:	4293      	cmp	r3, r2
 80126b4:	d007      	beq.n	80126c6 <TIM_OC3_SetConfig+0xae>
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	4a19      	ldr	r2, [pc, #100]	; (8012720 <TIM_OC3_SetConfig+0x108>)
 80126ba:	4293      	cmp	r3, r2
 80126bc:	d003      	beq.n	80126c6 <TIM_OC3_SetConfig+0xae>
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	4a18      	ldr	r2, [pc, #96]	; (8012724 <TIM_OC3_SetConfig+0x10c>)
 80126c2:	4293      	cmp	r3, r2
 80126c4:	d113      	bne.n	80126ee <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80126c6:	693b      	ldr	r3, [r7, #16]
 80126c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80126cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80126ce:	693b      	ldr	r3, [r7, #16]
 80126d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80126d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80126d6:	683b      	ldr	r3, [r7, #0]
 80126d8:	695b      	ldr	r3, [r3, #20]
 80126da:	011b      	lsls	r3, r3, #4
 80126dc:	693a      	ldr	r2, [r7, #16]
 80126de:	4313      	orrs	r3, r2
 80126e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80126e2:	683b      	ldr	r3, [r7, #0]
 80126e4:	699b      	ldr	r3, [r3, #24]
 80126e6:	011b      	lsls	r3, r3, #4
 80126e8:	693a      	ldr	r2, [r7, #16]
 80126ea:	4313      	orrs	r3, r2
 80126ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	693a      	ldr	r2, [r7, #16]
 80126f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	68fa      	ldr	r2, [r7, #12]
 80126f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80126fa:	683b      	ldr	r3, [r7, #0]
 80126fc:	685a      	ldr	r2, [r3, #4]
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	697a      	ldr	r2, [r7, #20]
 8012706:	621a      	str	r2, [r3, #32]
}
 8012708:	bf00      	nop
 801270a:	371c      	adds	r7, #28
 801270c:	46bd      	mov	sp, r7
 801270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012712:	4770      	bx	lr
 8012714:	40012c00 	.word	0x40012c00
 8012718:	40013400 	.word	0x40013400
 801271c:	40014000 	.word	0x40014000
 8012720:	40014400 	.word	0x40014400
 8012724:	40014800 	.word	0x40014800

08012728 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012728:	b480      	push	{r7}
 801272a:	b087      	sub	sp, #28
 801272c:	af00      	add	r7, sp, #0
 801272e:	6078      	str	r0, [r7, #4]
 8012730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	6a1b      	ldr	r3, [r3, #32]
 8012736:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	6a1b      	ldr	r3, [r3, #32]
 8012742:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	685b      	ldr	r3, [r3, #4]
 8012748:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	69db      	ldr	r3, [r3, #28]
 801274e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8012750:	68fb      	ldr	r3, [r7, #12]
 8012752:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8012756:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801275a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012762:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012764:	683b      	ldr	r3, [r7, #0]
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	021b      	lsls	r3, r3, #8
 801276a:	68fa      	ldr	r2, [r7, #12]
 801276c:	4313      	orrs	r3, r2
 801276e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8012770:	693b      	ldr	r3, [r7, #16]
 8012772:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012776:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8012778:	683b      	ldr	r3, [r7, #0]
 801277a:	689b      	ldr	r3, [r3, #8]
 801277c:	031b      	lsls	r3, r3, #12
 801277e:	693a      	ldr	r2, [r7, #16]
 8012780:	4313      	orrs	r3, r2
 8012782:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	4a18      	ldr	r2, [pc, #96]	; (80127e8 <TIM_OC4_SetConfig+0xc0>)
 8012788:	4293      	cmp	r3, r2
 801278a:	d00f      	beq.n	80127ac <TIM_OC4_SetConfig+0x84>
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	4a17      	ldr	r2, [pc, #92]	; (80127ec <TIM_OC4_SetConfig+0xc4>)
 8012790:	4293      	cmp	r3, r2
 8012792:	d00b      	beq.n	80127ac <TIM_OC4_SetConfig+0x84>
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	4a16      	ldr	r2, [pc, #88]	; (80127f0 <TIM_OC4_SetConfig+0xc8>)
 8012798:	4293      	cmp	r3, r2
 801279a:	d007      	beq.n	80127ac <TIM_OC4_SetConfig+0x84>
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	4a15      	ldr	r2, [pc, #84]	; (80127f4 <TIM_OC4_SetConfig+0xcc>)
 80127a0:	4293      	cmp	r3, r2
 80127a2:	d003      	beq.n	80127ac <TIM_OC4_SetConfig+0x84>
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	4a14      	ldr	r2, [pc, #80]	; (80127f8 <TIM_OC4_SetConfig+0xd0>)
 80127a8:	4293      	cmp	r3, r2
 80127aa:	d109      	bne.n	80127c0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80127ac:	697b      	ldr	r3, [r7, #20]
 80127ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80127b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80127b4:	683b      	ldr	r3, [r7, #0]
 80127b6:	695b      	ldr	r3, [r3, #20]
 80127b8:	019b      	lsls	r3, r3, #6
 80127ba:	697a      	ldr	r2, [r7, #20]
 80127bc:	4313      	orrs	r3, r2
 80127be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	697a      	ldr	r2, [r7, #20]
 80127c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	68fa      	ldr	r2, [r7, #12]
 80127ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80127cc:	683b      	ldr	r3, [r7, #0]
 80127ce:	685a      	ldr	r2, [r3, #4]
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	693a      	ldr	r2, [r7, #16]
 80127d8:	621a      	str	r2, [r3, #32]
}
 80127da:	bf00      	nop
 80127dc:	371c      	adds	r7, #28
 80127de:	46bd      	mov	sp, r7
 80127e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e4:	4770      	bx	lr
 80127e6:	bf00      	nop
 80127e8:	40012c00 	.word	0x40012c00
 80127ec:	40013400 	.word	0x40013400
 80127f0:	40014000 	.word	0x40014000
 80127f4:	40014400 	.word	0x40014400
 80127f8:	40014800 	.word	0x40014800

080127fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80127fc:	b480      	push	{r7}
 80127fe:	b087      	sub	sp, #28
 8012800:	af00      	add	r7, sp, #0
 8012802:	6078      	str	r0, [r7, #4]
 8012804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	6a1b      	ldr	r3, [r3, #32]
 801280a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	6a1b      	ldr	r3, [r3, #32]
 8012816:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	685b      	ldr	r3, [r3, #4]
 801281c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801282a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801282e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012830:	683b      	ldr	r3, [r7, #0]
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	68fa      	ldr	r2, [r7, #12]
 8012836:	4313      	orrs	r3, r2
 8012838:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801283a:	693b      	ldr	r3, [r7, #16]
 801283c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8012840:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8012842:	683b      	ldr	r3, [r7, #0]
 8012844:	689b      	ldr	r3, [r3, #8]
 8012846:	041b      	lsls	r3, r3, #16
 8012848:	693a      	ldr	r2, [r7, #16]
 801284a:	4313      	orrs	r3, r2
 801284c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	4a17      	ldr	r2, [pc, #92]	; (80128b0 <TIM_OC5_SetConfig+0xb4>)
 8012852:	4293      	cmp	r3, r2
 8012854:	d00f      	beq.n	8012876 <TIM_OC5_SetConfig+0x7a>
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	4a16      	ldr	r2, [pc, #88]	; (80128b4 <TIM_OC5_SetConfig+0xb8>)
 801285a:	4293      	cmp	r3, r2
 801285c:	d00b      	beq.n	8012876 <TIM_OC5_SetConfig+0x7a>
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	4a15      	ldr	r2, [pc, #84]	; (80128b8 <TIM_OC5_SetConfig+0xbc>)
 8012862:	4293      	cmp	r3, r2
 8012864:	d007      	beq.n	8012876 <TIM_OC5_SetConfig+0x7a>
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	4a14      	ldr	r2, [pc, #80]	; (80128bc <TIM_OC5_SetConfig+0xc0>)
 801286a:	4293      	cmp	r3, r2
 801286c:	d003      	beq.n	8012876 <TIM_OC5_SetConfig+0x7a>
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	4a13      	ldr	r2, [pc, #76]	; (80128c0 <TIM_OC5_SetConfig+0xc4>)
 8012872:	4293      	cmp	r3, r2
 8012874:	d109      	bne.n	801288a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8012876:	697b      	ldr	r3, [r7, #20]
 8012878:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801287c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801287e:	683b      	ldr	r3, [r7, #0]
 8012880:	695b      	ldr	r3, [r3, #20]
 8012882:	021b      	lsls	r3, r3, #8
 8012884:	697a      	ldr	r2, [r7, #20]
 8012886:	4313      	orrs	r3, r2
 8012888:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	697a      	ldr	r2, [r7, #20]
 801288e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	68fa      	ldr	r2, [r7, #12]
 8012894:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8012896:	683b      	ldr	r3, [r7, #0]
 8012898:	685a      	ldr	r2, [r3, #4]
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	693a      	ldr	r2, [r7, #16]
 80128a2:	621a      	str	r2, [r3, #32]
}
 80128a4:	bf00      	nop
 80128a6:	371c      	adds	r7, #28
 80128a8:	46bd      	mov	sp, r7
 80128aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ae:	4770      	bx	lr
 80128b0:	40012c00 	.word	0x40012c00
 80128b4:	40013400 	.word	0x40013400
 80128b8:	40014000 	.word	0x40014000
 80128bc:	40014400 	.word	0x40014400
 80128c0:	40014800 	.word	0x40014800

080128c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80128c4:	b480      	push	{r7}
 80128c6:	b087      	sub	sp, #28
 80128c8:	af00      	add	r7, sp, #0
 80128ca:	6078      	str	r0, [r7, #4]
 80128cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	6a1b      	ldr	r3, [r3, #32]
 80128d2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	6a1b      	ldr	r3, [r3, #32]
 80128de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	685b      	ldr	r3, [r3, #4]
 80128e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80128ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80128f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80128f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80128f8:	683b      	ldr	r3, [r7, #0]
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	021b      	lsls	r3, r3, #8
 80128fe:	68fa      	ldr	r2, [r7, #12]
 8012900:	4313      	orrs	r3, r2
 8012902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8012904:	693b      	ldr	r3, [r7, #16]
 8012906:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801290a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801290c:	683b      	ldr	r3, [r7, #0]
 801290e:	689b      	ldr	r3, [r3, #8]
 8012910:	051b      	lsls	r3, r3, #20
 8012912:	693a      	ldr	r2, [r7, #16]
 8012914:	4313      	orrs	r3, r2
 8012916:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	4a18      	ldr	r2, [pc, #96]	; (801297c <TIM_OC6_SetConfig+0xb8>)
 801291c:	4293      	cmp	r3, r2
 801291e:	d00f      	beq.n	8012940 <TIM_OC6_SetConfig+0x7c>
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	4a17      	ldr	r2, [pc, #92]	; (8012980 <TIM_OC6_SetConfig+0xbc>)
 8012924:	4293      	cmp	r3, r2
 8012926:	d00b      	beq.n	8012940 <TIM_OC6_SetConfig+0x7c>
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	4a16      	ldr	r2, [pc, #88]	; (8012984 <TIM_OC6_SetConfig+0xc0>)
 801292c:	4293      	cmp	r3, r2
 801292e:	d007      	beq.n	8012940 <TIM_OC6_SetConfig+0x7c>
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	4a15      	ldr	r2, [pc, #84]	; (8012988 <TIM_OC6_SetConfig+0xc4>)
 8012934:	4293      	cmp	r3, r2
 8012936:	d003      	beq.n	8012940 <TIM_OC6_SetConfig+0x7c>
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	4a14      	ldr	r2, [pc, #80]	; (801298c <TIM_OC6_SetConfig+0xc8>)
 801293c:	4293      	cmp	r3, r2
 801293e:	d109      	bne.n	8012954 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8012940:	697b      	ldr	r3, [r7, #20]
 8012942:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012946:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8012948:	683b      	ldr	r3, [r7, #0]
 801294a:	695b      	ldr	r3, [r3, #20]
 801294c:	029b      	lsls	r3, r3, #10
 801294e:	697a      	ldr	r2, [r7, #20]
 8012950:	4313      	orrs	r3, r2
 8012952:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	697a      	ldr	r2, [r7, #20]
 8012958:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	68fa      	ldr	r2, [r7, #12]
 801295e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8012960:	683b      	ldr	r3, [r7, #0]
 8012962:	685a      	ldr	r2, [r3, #4]
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	693a      	ldr	r2, [r7, #16]
 801296c:	621a      	str	r2, [r3, #32]
}
 801296e:	bf00      	nop
 8012970:	371c      	adds	r7, #28
 8012972:	46bd      	mov	sp, r7
 8012974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012978:	4770      	bx	lr
 801297a:	bf00      	nop
 801297c:	40012c00 	.word	0x40012c00
 8012980:	40013400 	.word	0x40013400
 8012984:	40014000 	.word	0x40014000
 8012988:	40014400 	.word	0x40014400
 801298c:	40014800 	.word	0x40014800

08012990 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012990:	b480      	push	{r7}
 8012992:	b087      	sub	sp, #28
 8012994:	af00      	add	r7, sp, #0
 8012996:	60f8      	str	r0, [r7, #12]
 8012998:	60b9      	str	r1, [r7, #8]
 801299a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801299c:	68fb      	ldr	r3, [r7, #12]
 801299e:	6a1b      	ldr	r3, [r3, #32]
 80129a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	6a1b      	ldr	r3, [r3, #32]
 80129a6:	f023 0201 	bic.w	r2, r3, #1
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	699b      	ldr	r3, [r3, #24]
 80129b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80129b4:	693b      	ldr	r3, [r7, #16]
 80129b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80129ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	011b      	lsls	r3, r3, #4
 80129c0:	693a      	ldr	r2, [r7, #16]
 80129c2:	4313      	orrs	r3, r2
 80129c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80129c6:	697b      	ldr	r3, [r7, #20]
 80129c8:	f023 030a 	bic.w	r3, r3, #10
 80129cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80129ce:	697a      	ldr	r2, [r7, #20]
 80129d0:	68bb      	ldr	r3, [r7, #8]
 80129d2:	4313      	orrs	r3, r2
 80129d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80129d6:	68fb      	ldr	r3, [r7, #12]
 80129d8:	693a      	ldr	r2, [r7, #16]
 80129da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	697a      	ldr	r2, [r7, #20]
 80129e0:	621a      	str	r2, [r3, #32]
}
 80129e2:	bf00      	nop
 80129e4:	371c      	adds	r7, #28
 80129e6:	46bd      	mov	sp, r7
 80129e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ec:	4770      	bx	lr

080129ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80129ee:	b480      	push	{r7}
 80129f0:	b087      	sub	sp, #28
 80129f2:	af00      	add	r7, sp, #0
 80129f4:	60f8      	str	r0, [r7, #12]
 80129f6:	60b9      	str	r1, [r7, #8]
 80129f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80129fa:	68fb      	ldr	r3, [r7, #12]
 80129fc:	6a1b      	ldr	r3, [r3, #32]
 80129fe:	f023 0210 	bic.w	r2, r3, #16
 8012a02:	68fb      	ldr	r3, [r7, #12]
 8012a04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	699b      	ldr	r3, [r3, #24]
 8012a0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8012a0c:	68fb      	ldr	r3, [r7, #12]
 8012a0e:	6a1b      	ldr	r3, [r3, #32]
 8012a10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8012a12:	697b      	ldr	r3, [r7, #20]
 8012a14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8012a18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	031b      	lsls	r3, r3, #12
 8012a1e:	697a      	ldr	r2, [r7, #20]
 8012a20:	4313      	orrs	r3, r2
 8012a22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8012a24:	693b      	ldr	r3, [r7, #16]
 8012a26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8012a2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8012a2c:	68bb      	ldr	r3, [r7, #8]
 8012a2e:	011b      	lsls	r3, r3, #4
 8012a30:	693a      	ldr	r2, [r7, #16]
 8012a32:	4313      	orrs	r3, r2
 8012a34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	697a      	ldr	r2, [r7, #20]
 8012a3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012a3c:	68fb      	ldr	r3, [r7, #12]
 8012a3e:	693a      	ldr	r2, [r7, #16]
 8012a40:	621a      	str	r2, [r3, #32]
}
 8012a42:	bf00      	nop
 8012a44:	371c      	adds	r7, #28
 8012a46:	46bd      	mov	sp, r7
 8012a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a4c:	4770      	bx	lr

08012a4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8012a4e:	b480      	push	{r7}
 8012a50:	b085      	sub	sp, #20
 8012a52:	af00      	add	r7, sp, #0
 8012a54:	6078      	str	r0, [r7, #4]
 8012a56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	689b      	ldr	r3, [r3, #8]
 8012a5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012a64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8012a66:	683a      	ldr	r2, [r7, #0]
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	4313      	orrs	r3, r2
 8012a6c:	f043 0307 	orr.w	r3, r3, #7
 8012a70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	68fa      	ldr	r2, [r7, #12]
 8012a76:	609a      	str	r2, [r3, #8]
}
 8012a78:	bf00      	nop
 8012a7a:	3714      	adds	r7, #20
 8012a7c:	46bd      	mov	sp, r7
 8012a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a82:	4770      	bx	lr

08012a84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8012a84:	b480      	push	{r7}
 8012a86:	b087      	sub	sp, #28
 8012a88:	af00      	add	r7, sp, #0
 8012a8a:	60f8      	str	r0, [r7, #12]
 8012a8c:	60b9      	str	r1, [r7, #8]
 8012a8e:	607a      	str	r2, [r7, #4]
 8012a90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8012a92:	68fb      	ldr	r3, [r7, #12]
 8012a94:	689b      	ldr	r3, [r3, #8]
 8012a96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012a98:	697b      	ldr	r3, [r7, #20]
 8012a9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8012a9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8012aa0:	683b      	ldr	r3, [r7, #0]
 8012aa2:	021a      	lsls	r2, r3, #8
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	431a      	orrs	r2, r3
 8012aa8:	68bb      	ldr	r3, [r7, #8]
 8012aaa:	4313      	orrs	r3, r2
 8012aac:	697a      	ldr	r2, [r7, #20]
 8012aae:	4313      	orrs	r3, r2
 8012ab0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	697a      	ldr	r2, [r7, #20]
 8012ab6:	609a      	str	r2, [r3, #8]
}
 8012ab8:	bf00      	nop
 8012aba:	371c      	adds	r7, #28
 8012abc:	46bd      	mov	sp, r7
 8012abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ac2:	4770      	bx	lr

08012ac4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8012ac4:	b480      	push	{r7}
 8012ac6:	b087      	sub	sp, #28
 8012ac8:	af00      	add	r7, sp, #0
 8012aca:	60f8      	str	r0, [r7, #12]
 8012acc:	60b9      	str	r1, [r7, #8]
 8012ace:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8012ad0:	68bb      	ldr	r3, [r7, #8]
 8012ad2:	f003 031f 	and.w	r3, r3, #31
 8012ad6:	2201      	movs	r2, #1
 8012ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8012adc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	6a1a      	ldr	r2, [r3, #32]
 8012ae2:	697b      	ldr	r3, [r7, #20]
 8012ae4:	43db      	mvns	r3, r3
 8012ae6:	401a      	ands	r2, r3
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	6a1a      	ldr	r2, [r3, #32]
 8012af0:	68bb      	ldr	r3, [r7, #8]
 8012af2:	f003 031f 	and.w	r3, r3, #31
 8012af6:	6879      	ldr	r1, [r7, #4]
 8012af8:	fa01 f303 	lsl.w	r3, r1, r3
 8012afc:	431a      	orrs	r2, r3
 8012afe:	68fb      	ldr	r3, [r7, #12]
 8012b00:	621a      	str	r2, [r3, #32]
}
 8012b02:	bf00      	nop
 8012b04:	371c      	adds	r7, #28
 8012b06:	46bd      	mov	sp, r7
 8012b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b0c:	4770      	bx	lr
	...

08012b10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8012b10:	b480      	push	{r7}
 8012b12:	b085      	sub	sp, #20
 8012b14:	af00      	add	r7, sp, #0
 8012b16:	6078      	str	r0, [r7, #4]
 8012b18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012b20:	2b01      	cmp	r3, #1
 8012b22:	d101      	bne.n	8012b28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8012b24:	2302      	movs	r3, #2
 8012b26:	e068      	b.n	8012bfa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	2201      	movs	r2, #1
 8012b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	2202      	movs	r2, #2
 8012b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	685b      	ldr	r3, [r3, #4]
 8012b3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	689b      	ldr	r3, [r3, #8]
 8012b46:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	4a2e      	ldr	r2, [pc, #184]	; (8012c08 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8012b4e:	4293      	cmp	r3, r2
 8012b50:	d004      	beq.n	8012b5c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	681b      	ldr	r3, [r3, #0]
 8012b56:	4a2d      	ldr	r2, [pc, #180]	; (8012c0c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8012b58:	4293      	cmp	r3, r2
 8012b5a:	d108      	bne.n	8012b6e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8012b5c:	68fb      	ldr	r3, [r7, #12]
 8012b5e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8012b62:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8012b64:	683b      	ldr	r3, [r7, #0]
 8012b66:	685b      	ldr	r3, [r3, #4]
 8012b68:	68fa      	ldr	r2, [r7, #12]
 8012b6a:	4313      	orrs	r3, r2
 8012b6c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8012b6e:	68fb      	ldr	r3, [r7, #12]
 8012b70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012b74:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8012b76:	683b      	ldr	r3, [r7, #0]
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	68fa      	ldr	r2, [r7, #12]
 8012b7c:	4313      	orrs	r3, r2
 8012b7e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	68fa      	ldr	r2, [r7, #12]
 8012b86:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	4a1e      	ldr	r2, [pc, #120]	; (8012c08 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8012b8e:	4293      	cmp	r3, r2
 8012b90:	d01d      	beq.n	8012bce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012b9a:	d018      	beq.n	8012bce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	4a1b      	ldr	r2, [pc, #108]	; (8012c10 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8012ba2:	4293      	cmp	r3, r2
 8012ba4:	d013      	beq.n	8012bce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	4a1a      	ldr	r2, [pc, #104]	; (8012c14 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8012bac:	4293      	cmp	r3, r2
 8012bae:	d00e      	beq.n	8012bce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	4a18      	ldr	r2, [pc, #96]	; (8012c18 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8012bb6:	4293      	cmp	r3, r2
 8012bb8:	d009      	beq.n	8012bce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	681b      	ldr	r3, [r3, #0]
 8012bbe:	4a13      	ldr	r2, [pc, #76]	; (8012c0c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8012bc0:	4293      	cmp	r3, r2
 8012bc2:	d004      	beq.n	8012bce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	4a14      	ldr	r2, [pc, #80]	; (8012c1c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8012bca:	4293      	cmp	r3, r2
 8012bcc:	d10c      	bne.n	8012be8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8012bce:	68bb      	ldr	r3, [r7, #8]
 8012bd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012bd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8012bd6:	683b      	ldr	r3, [r7, #0]
 8012bd8:	689b      	ldr	r3, [r3, #8]
 8012bda:	68ba      	ldr	r2, [r7, #8]
 8012bdc:	4313      	orrs	r3, r2
 8012bde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	681b      	ldr	r3, [r3, #0]
 8012be4:	68ba      	ldr	r2, [r7, #8]
 8012be6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	2201      	movs	r2, #1
 8012bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	2200      	movs	r2, #0
 8012bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012bf8:	2300      	movs	r3, #0
}
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	3714      	adds	r7, #20
 8012bfe:	46bd      	mov	sp, r7
 8012c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c04:	4770      	bx	lr
 8012c06:	bf00      	nop
 8012c08:	40012c00 	.word	0x40012c00
 8012c0c:	40013400 	.word	0x40013400
 8012c10:	40000400 	.word	0x40000400
 8012c14:	40000800 	.word	0x40000800
 8012c18:	40000c00 	.word	0x40000c00
 8012c1c:	40014000 	.word	0x40014000

08012c20 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8012c20:	b480      	push	{r7}
 8012c22:	b085      	sub	sp, #20
 8012c24:	af00      	add	r7, sp, #0
 8012c26:	6078      	str	r0, [r7, #4]
 8012c28:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8012c2a:	2300      	movs	r3, #0
 8012c2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012c34:	2b01      	cmp	r3, #1
 8012c36:	d101      	bne.n	8012c3c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8012c38:	2302      	movs	r3, #2
 8012c3a:	e065      	b.n	8012d08 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	2201      	movs	r2, #1
 8012c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8012c44:	68fb      	ldr	r3, [r7, #12]
 8012c46:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8012c4a:	683b      	ldr	r3, [r7, #0]
 8012c4c:	68db      	ldr	r3, [r3, #12]
 8012c4e:	4313      	orrs	r3, r2
 8012c50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8012c58:	683b      	ldr	r3, [r7, #0]
 8012c5a:	689b      	ldr	r3, [r3, #8]
 8012c5c:	4313      	orrs	r3, r2
 8012c5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8012c60:	68fb      	ldr	r3, [r7, #12]
 8012c62:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8012c66:	683b      	ldr	r3, [r7, #0]
 8012c68:	685b      	ldr	r3, [r3, #4]
 8012c6a:	4313      	orrs	r3, r2
 8012c6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8012c6e:	68fb      	ldr	r3, [r7, #12]
 8012c70:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8012c74:	683b      	ldr	r3, [r7, #0]
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	4313      	orrs	r3, r2
 8012c7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8012c82:	683b      	ldr	r3, [r7, #0]
 8012c84:	691b      	ldr	r3, [r3, #16]
 8012c86:	4313      	orrs	r3, r2
 8012c88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8012c90:	683b      	ldr	r3, [r7, #0]
 8012c92:	695b      	ldr	r3, [r3, #20]
 8012c94:	4313      	orrs	r3, r2
 8012c96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8012c98:	68fb      	ldr	r3, [r7, #12]
 8012c9a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8012c9e:	683b      	ldr	r3, [r7, #0]
 8012ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012ca2:	4313      	orrs	r3, r2
 8012ca4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8012cac:	683b      	ldr	r3, [r7, #0]
 8012cae:	699b      	ldr	r3, [r3, #24]
 8012cb0:	041b      	lsls	r3, r3, #16
 8012cb2:	4313      	orrs	r3, r2
 8012cb4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	681b      	ldr	r3, [r3, #0]
 8012cba:	4a16      	ldr	r2, [pc, #88]	; (8012d14 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8012cbc:	4293      	cmp	r3, r2
 8012cbe:	d004      	beq.n	8012cca <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	4a14      	ldr	r2, [pc, #80]	; (8012d18 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8012cc6:	4293      	cmp	r3, r2
 8012cc8:	d115      	bne.n	8012cf6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8012cd0:	683b      	ldr	r3, [r7, #0]
 8012cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cd4:	051b      	lsls	r3, r3, #20
 8012cd6:	4313      	orrs	r3, r2
 8012cd8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8012ce0:	683b      	ldr	r3, [r7, #0]
 8012ce2:	69db      	ldr	r3, [r3, #28]
 8012ce4:	4313      	orrs	r3, r2
 8012ce6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8012cee:	683b      	ldr	r3, [r7, #0]
 8012cf0:	6a1b      	ldr	r3, [r3, #32]
 8012cf2:	4313      	orrs	r3, r2
 8012cf4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	68fa      	ldr	r2, [r7, #12]
 8012cfc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	2200      	movs	r2, #0
 8012d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012d06:	2300      	movs	r3, #0
}
 8012d08:	4618      	mov	r0, r3
 8012d0a:	3714      	adds	r7, #20
 8012d0c:	46bd      	mov	sp, r7
 8012d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d12:	4770      	bx	lr
 8012d14:	40012c00 	.word	0x40012c00
 8012d18:	40013400 	.word	0x40013400

08012d1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8012d1c:	b480      	push	{r7}
 8012d1e:	b083      	sub	sp, #12
 8012d20:	af00      	add	r7, sp, #0
 8012d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8012d24:	bf00      	nop
 8012d26:	370c      	adds	r7, #12
 8012d28:	46bd      	mov	sp, r7
 8012d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d2e:	4770      	bx	lr

08012d30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8012d30:	b480      	push	{r7}
 8012d32:	b083      	sub	sp, #12
 8012d34:	af00      	add	r7, sp, #0
 8012d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8012d38:	bf00      	nop
 8012d3a:	370c      	adds	r7, #12
 8012d3c:	46bd      	mov	sp, r7
 8012d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d42:	4770      	bx	lr

08012d44 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8012d44:	b480      	push	{r7}
 8012d46:	b083      	sub	sp, #12
 8012d48:	af00      	add	r7, sp, #0
 8012d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8012d4c:	bf00      	nop
 8012d4e:	370c      	adds	r7, #12
 8012d50:	46bd      	mov	sp, r7
 8012d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d56:	4770      	bx	lr

08012d58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8012d58:	b580      	push	{r7, lr}
 8012d5a:	b082      	sub	sp, #8
 8012d5c:	af00      	add	r7, sp, #0
 8012d5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d101      	bne.n	8012d6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8012d66:	2301      	movs	r3, #1
 8012d68:	e042      	b.n	8012df0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d106      	bne.n	8012d82 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	2200      	movs	r2, #0
 8012d78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012d7c:	6878      	ldr	r0, [r7, #4]
 8012d7e:	f7fa f9d5 	bl	800d12c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	2224      	movs	r2, #36	; 0x24
 8012d86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	681b      	ldr	r3, [r3, #0]
 8012d8e:	681a      	ldr	r2, [r3, #0]
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	f022 0201 	bic.w	r2, r2, #1
 8012d98:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012d9a:	6878      	ldr	r0, [r7, #4]
 8012d9c:	f000 fc02 	bl	80135a4 <UART_SetConfig>
 8012da0:	4603      	mov	r3, r0
 8012da2:	2b01      	cmp	r3, #1
 8012da4:	d101      	bne.n	8012daa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8012da6:	2301      	movs	r3, #1
 8012da8:	e022      	b.n	8012df0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d002      	beq.n	8012db8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8012db2:	6878      	ldr	r0, [r7, #4]
 8012db4:	f000 fef2 	bl	8013b9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	685a      	ldr	r2, [r3, #4]
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8012dc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	689a      	ldr	r2, [r3, #8]
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8012dd6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	681a      	ldr	r2, [r3, #0]
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	f042 0201 	orr.w	r2, r2, #1
 8012de6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8012de8:	6878      	ldr	r0, [r7, #4]
 8012dea:	f000 ff79 	bl	8013ce0 <UART_CheckIdleState>
 8012dee:	4603      	mov	r3, r0
}
 8012df0:	4618      	mov	r0, r3
 8012df2:	3708      	adds	r7, #8
 8012df4:	46bd      	mov	sp, r7
 8012df6:	bd80      	pop	{r7, pc}

08012df8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012df8:	b580      	push	{r7, lr}
 8012dfa:	b08a      	sub	sp, #40	; 0x28
 8012dfc:	af02      	add	r7, sp, #8
 8012dfe:	60f8      	str	r0, [r7, #12]
 8012e00:	60b9      	str	r1, [r7, #8]
 8012e02:	603b      	str	r3, [r7, #0]
 8012e04:	4613      	mov	r3, r2
 8012e06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012e0e:	2b20      	cmp	r3, #32
 8012e10:	f040 8083 	bne.w	8012f1a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8012e14:	68bb      	ldr	r3, [r7, #8]
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d002      	beq.n	8012e20 <HAL_UART_Transmit+0x28>
 8012e1a:	88fb      	ldrh	r3, [r7, #6]
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d101      	bne.n	8012e24 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8012e20:	2301      	movs	r3, #1
 8012e22:	e07b      	b.n	8012f1c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8012e2a:	2b01      	cmp	r3, #1
 8012e2c:	d101      	bne.n	8012e32 <HAL_UART_Transmit+0x3a>
 8012e2e:	2302      	movs	r3, #2
 8012e30:	e074      	b.n	8012f1c <HAL_UART_Transmit+0x124>
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	2201      	movs	r2, #1
 8012e36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	2200      	movs	r2, #0
 8012e3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	2221      	movs	r2, #33	; 0x21
 8012e46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8012e4a:	f7fa fa4f 	bl	800d2ec <HAL_GetTick>
 8012e4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	88fa      	ldrh	r2, [r7, #6]
 8012e54:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	88fa      	ldrh	r2, [r7, #6]
 8012e5c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	689b      	ldr	r3, [r3, #8]
 8012e64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012e68:	d108      	bne.n	8012e7c <HAL_UART_Transmit+0x84>
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	691b      	ldr	r3, [r3, #16]
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d104      	bne.n	8012e7c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8012e72:	2300      	movs	r3, #0
 8012e74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8012e76:	68bb      	ldr	r3, [r7, #8]
 8012e78:	61bb      	str	r3, [r7, #24]
 8012e7a:	e003      	b.n	8012e84 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8012e7c:	68bb      	ldr	r3, [r7, #8]
 8012e7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8012e80:	2300      	movs	r3, #0
 8012e82:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	2200      	movs	r2, #0
 8012e88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8012e8c:	e02c      	b.n	8012ee8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8012e8e:	683b      	ldr	r3, [r7, #0]
 8012e90:	9300      	str	r3, [sp, #0]
 8012e92:	697b      	ldr	r3, [r7, #20]
 8012e94:	2200      	movs	r2, #0
 8012e96:	2180      	movs	r1, #128	; 0x80
 8012e98:	68f8      	ldr	r0, [r7, #12]
 8012e9a:	f000 ff6c 	bl	8013d76 <UART_WaitOnFlagUntilTimeout>
 8012e9e:	4603      	mov	r3, r0
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d001      	beq.n	8012ea8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8012ea4:	2303      	movs	r3, #3
 8012ea6:	e039      	b.n	8012f1c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8012ea8:	69fb      	ldr	r3, [r7, #28]
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d10b      	bne.n	8012ec6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8012eae:	69bb      	ldr	r3, [r7, #24]
 8012eb0:	881b      	ldrh	r3, [r3, #0]
 8012eb2:	461a      	mov	r2, r3
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012ebc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8012ebe:	69bb      	ldr	r3, [r7, #24]
 8012ec0:	3302      	adds	r3, #2
 8012ec2:	61bb      	str	r3, [r7, #24]
 8012ec4:	e007      	b.n	8012ed6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8012ec6:	69fb      	ldr	r3, [r7, #28]
 8012ec8:	781a      	ldrb	r2, [r3, #0]
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8012ed0:	69fb      	ldr	r3, [r7, #28]
 8012ed2:	3301      	adds	r3, #1
 8012ed4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8012ed6:	68fb      	ldr	r3, [r7, #12]
 8012ed8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012edc:	b29b      	uxth	r3, r3
 8012ede:	3b01      	subs	r3, #1
 8012ee0:	b29a      	uxth	r2, r3
 8012ee2:	68fb      	ldr	r3, [r7, #12]
 8012ee4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012eee:	b29b      	uxth	r3, r3
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d1cc      	bne.n	8012e8e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8012ef4:	683b      	ldr	r3, [r7, #0]
 8012ef6:	9300      	str	r3, [sp, #0]
 8012ef8:	697b      	ldr	r3, [r7, #20]
 8012efa:	2200      	movs	r2, #0
 8012efc:	2140      	movs	r1, #64	; 0x40
 8012efe:	68f8      	ldr	r0, [r7, #12]
 8012f00:	f000 ff39 	bl	8013d76 <UART_WaitOnFlagUntilTimeout>
 8012f04:	4603      	mov	r3, r0
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d001      	beq.n	8012f0e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8012f0a:	2303      	movs	r3, #3
 8012f0c:	e006      	b.n	8012f1c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	2220      	movs	r2, #32
 8012f12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8012f16:	2300      	movs	r3, #0
 8012f18:	e000      	b.n	8012f1c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8012f1a:	2302      	movs	r3, #2
  }
}
 8012f1c:	4618      	mov	r0, r3
 8012f1e:	3720      	adds	r7, #32
 8012f20:	46bd      	mov	sp, r7
 8012f22:	bd80      	pop	{r7, pc}

08012f24 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8012f24:	b580      	push	{r7, lr}
 8012f26:	b0ba      	sub	sp, #232	; 0xe8
 8012f28:	af00      	add	r7, sp, #0
 8012f2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	681b      	ldr	r3, [r3, #0]
 8012f30:	69db      	ldr	r3, [r3, #28]
 8012f32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	681b      	ldr	r3, [r3, #0]
 8012f44:	689b      	ldr	r3, [r3, #8]
 8012f46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8012f4a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8012f4e:	f640 030f 	movw	r3, #2063	; 0x80f
 8012f52:	4013      	ands	r3, r2
 8012f54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8012f58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d11b      	bne.n	8012f98 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8012f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012f64:	f003 0320 	and.w	r3, r3, #32
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d015      	beq.n	8012f98 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8012f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012f70:	f003 0320 	and.w	r3, r3, #32
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d105      	bne.n	8012f84 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8012f78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d009      	beq.n	8012f98 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	f000 82d6 	beq.w	801353a <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f92:	6878      	ldr	r0, [r7, #4]
 8012f94:	4798      	blx	r3
      }
      return;
 8012f96:	e2d0      	b.n	801353a <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8012f98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	f000 811f 	beq.w	80131e0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8012fa2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8012fa6:	4b8b      	ldr	r3, [pc, #556]	; (80131d4 <HAL_UART_IRQHandler+0x2b0>)
 8012fa8:	4013      	ands	r3, r2
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d106      	bne.n	8012fbc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8012fae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8012fb2:	4b89      	ldr	r3, [pc, #548]	; (80131d8 <HAL_UART_IRQHandler+0x2b4>)
 8012fb4:	4013      	ands	r3, r2
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	f000 8112 	beq.w	80131e0 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012fbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012fc0:	f003 0301 	and.w	r3, r3, #1
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d011      	beq.n	8012fec <HAL_UART_IRQHandler+0xc8>
 8012fc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d00b      	beq.n	8012fec <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	681b      	ldr	r3, [r3, #0]
 8012fd8:	2201      	movs	r2, #1
 8012fda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012fe2:	f043 0201 	orr.w	r2, r3, #1
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012fec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012ff0:	f003 0302 	and.w	r3, r3, #2
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d011      	beq.n	801301c <HAL_UART_IRQHandler+0xf8>
 8012ff8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012ffc:	f003 0301 	and.w	r3, r3, #1
 8013000:	2b00      	cmp	r3, #0
 8013002:	d00b      	beq.n	801301c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	681b      	ldr	r3, [r3, #0]
 8013008:	2202      	movs	r2, #2
 801300a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013012:	f043 0204 	orr.w	r2, r3, #4
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801301c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013020:	f003 0304 	and.w	r3, r3, #4
 8013024:	2b00      	cmp	r3, #0
 8013026:	d011      	beq.n	801304c <HAL_UART_IRQHandler+0x128>
 8013028:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801302c:	f003 0301 	and.w	r3, r3, #1
 8013030:	2b00      	cmp	r3, #0
 8013032:	d00b      	beq.n	801304c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	2204      	movs	r2, #4
 801303a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013042:	f043 0202 	orr.w	r2, r3, #2
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 801304c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013050:	f003 0308 	and.w	r3, r3, #8
 8013054:	2b00      	cmp	r3, #0
 8013056:	d017      	beq.n	8013088 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8013058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801305c:	f003 0320 	and.w	r3, r3, #32
 8013060:	2b00      	cmp	r3, #0
 8013062:	d105      	bne.n	8013070 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8013064:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8013068:	4b5a      	ldr	r3, [pc, #360]	; (80131d4 <HAL_UART_IRQHandler+0x2b0>)
 801306a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801306c:	2b00      	cmp	r3, #0
 801306e:	d00b      	beq.n	8013088 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	681b      	ldr	r3, [r3, #0]
 8013074:	2208      	movs	r2, #8
 8013076:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801307e:	f043 0208 	orr.w	r2, r3, #8
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8013088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801308c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013090:	2b00      	cmp	r3, #0
 8013092:	d012      	beq.n	80130ba <HAL_UART_IRQHandler+0x196>
 8013094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013098:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801309c:	2b00      	cmp	r3, #0
 801309e:	d00c      	beq.n	80130ba <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80130a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80130b0:	f043 0220 	orr.w	r2, r3, #32
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	f000 823c 	beq.w	801353e <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80130c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80130ca:	f003 0320 	and.w	r3, r3, #32
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d013      	beq.n	80130fa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80130d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80130d6:	f003 0320 	and.w	r3, r3, #32
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d105      	bne.n	80130ea <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80130de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80130e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d007      	beq.n	80130fa <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d003      	beq.n	80130fa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80130f6:	6878      	ldr	r0, [r7, #4]
 80130f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013100:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	689b      	ldr	r3, [r3, #8]
 801310a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801310e:	2b40      	cmp	r3, #64	; 0x40
 8013110:	d005      	beq.n	801311e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8013112:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8013116:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801311a:	2b00      	cmp	r3, #0
 801311c:	d04f      	beq.n	80131be <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801311e:	6878      	ldr	r0, [r7, #4]
 8013120:	f000 ffdb 	bl	80140da <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	689b      	ldr	r3, [r3, #8]
 801312a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801312e:	2b40      	cmp	r3, #64	; 0x40
 8013130:	d141      	bne.n	80131b6 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	3308      	adds	r3, #8
 8013138:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801313c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013140:	e853 3f00 	ldrex	r3, [r3]
 8013144:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8013148:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801314c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013150:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	681b      	ldr	r3, [r3, #0]
 8013158:	3308      	adds	r3, #8
 801315a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801315e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8013162:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013166:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801316a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801316e:	e841 2300 	strex	r3, r2, [r1]
 8013172:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8013176:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801317a:	2b00      	cmp	r3, #0
 801317c:	d1d9      	bne.n	8013132 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013182:	2b00      	cmp	r3, #0
 8013184:	d013      	beq.n	80131ae <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801318a:	4a14      	ldr	r2, [pc, #80]	; (80131dc <HAL_UART_IRQHandler+0x2b8>)
 801318c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013192:	4618      	mov	r0, r3
 8013194:	f7fa fb33 	bl	800d7fe <HAL_DMA_Abort_IT>
 8013198:	4603      	mov	r3, r0
 801319a:	2b00      	cmp	r3, #0
 801319c:	d017      	beq.n	80131ce <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80131a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80131a4:	687a      	ldr	r2, [r7, #4]
 80131a6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80131a8:	4610      	mov	r0, r2
 80131aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80131ac:	e00f      	b.n	80131ce <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80131ae:	6878      	ldr	r0, [r7, #4]
 80131b0:	f000 f9ee 	bl	8013590 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80131b4:	e00b      	b.n	80131ce <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80131b6:	6878      	ldr	r0, [r7, #4]
 80131b8:	f000 f9ea 	bl	8013590 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80131bc:	e007      	b.n	80131ce <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80131be:	6878      	ldr	r0, [r7, #4]
 80131c0:	f000 f9e6 	bl	8013590 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	2200      	movs	r2, #0
 80131c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80131cc:	e1b7      	b.n	801353e <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80131ce:	bf00      	nop
    return;
 80131d0:	e1b5      	b.n	801353e <HAL_UART_IRQHandler+0x61a>
 80131d2:	bf00      	nop
 80131d4:	10000001 	.word	0x10000001
 80131d8:	04000120 	.word	0x04000120
 80131dc:	08014385 	.word	0x08014385

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80131e4:	2b01      	cmp	r3, #1
 80131e6:	f040 814a 	bne.w	801347e <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80131ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80131ee:	f003 0310 	and.w	r3, r3, #16
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	f000 8143 	beq.w	801347e <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80131f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80131fc:	f003 0310 	and.w	r3, r3, #16
 8013200:	2b00      	cmp	r3, #0
 8013202:	f000 813c 	beq.w	801347e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	2210      	movs	r2, #16
 801320c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	689b      	ldr	r3, [r3, #8]
 8013214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013218:	2b40      	cmp	r3, #64	; 0x40
 801321a:	f040 80b5 	bne.w	8013388 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	685b      	ldr	r3, [r3, #4]
 8013226:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801322a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801322e:	2b00      	cmp	r3, #0
 8013230:	f000 8187 	beq.w	8013542 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801323a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801323e:	429a      	cmp	r2, r3
 8013240:	f080 817f 	bcs.w	8013542 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801324a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013252:	681b      	ldr	r3, [r3, #0]
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	f003 0320 	and.w	r3, r3, #32
 801325a:	2b00      	cmp	r3, #0
 801325c:	f040 8086 	bne.w	801336c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	681b      	ldr	r3, [r3, #0]
 8013264:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013268:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801326c:	e853 3f00 	ldrex	r3, [r3]
 8013270:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8013274:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013278:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801327c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	681b      	ldr	r3, [r3, #0]
 8013284:	461a      	mov	r2, r3
 8013286:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801328a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801328e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013292:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8013296:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801329a:	e841 2300 	strex	r3, r2, [r1]
 801329e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80132a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d1da      	bne.n	8013260 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	3308      	adds	r3, #8
 80132b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80132b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80132b4:	e853 3f00 	ldrex	r3, [r3]
 80132b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80132ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80132bc:	f023 0301 	bic.w	r3, r3, #1
 80132c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	3308      	adds	r3, #8
 80132ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80132ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80132d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80132d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80132d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80132da:	e841 2300 	strex	r3, r2, [r1]
 80132de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80132e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d1e1      	bne.n	80132aa <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	681b      	ldr	r3, [r3, #0]
 80132ea:	3308      	adds	r3, #8
 80132ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80132ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80132f0:	e853 3f00 	ldrex	r3, [r3]
 80132f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80132f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80132f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80132fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	3308      	adds	r3, #8
 8013306:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801330a:	66fa      	str	r2, [r7, #108]	; 0x6c
 801330c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801330e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8013310:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8013312:	e841 2300 	strex	r3, r2, [r1]
 8013316:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8013318:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801331a:	2b00      	cmp	r3, #0
 801331c:	d1e3      	bne.n	80132e6 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	2220      	movs	r2, #32
 8013322:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	2200      	movs	r2, #0
 801332a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	681b      	ldr	r3, [r3, #0]
 8013330:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013334:	e853 3f00 	ldrex	r3, [r3]
 8013338:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801333a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801333c:	f023 0310 	bic.w	r3, r3, #16
 8013340:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	681b      	ldr	r3, [r3, #0]
 8013348:	461a      	mov	r2, r3
 801334a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801334e:	65bb      	str	r3, [r7, #88]	; 0x58
 8013350:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013352:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8013354:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013356:	e841 2300 	strex	r3, r2, [r1]
 801335a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801335c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801335e:	2b00      	cmp	r3, #0
 8013360:	d1e4      	bne.n	801332c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013366:	4618      	mov	r0, r3
 8013368:	f7fa f9ed 	bl	800d746 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013378:	b29b      	uxth	r3, r3
 801337a:	1ad3      	subs	r3, r2, r3
 801337c:	b29b      	uxth	r3, r3
 801337e:	4619      	mov	r1, r3
 8013380:	6878      	ldr	r0, [r7, #4]
 8013382:	f7f6 ff05 	bl	800a190 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8013386:	e0dc      	b.n	8013542 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013394:	b29b      	uxth	r3, r3
 8013396:	1ad3      	subs	r3, r2, r3
 8013398:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80133a2:	b29b      	uxth	r3, r3
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	f000 80ce 	beq.w	8013546 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 80133aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	f000 80c9 	beq.w	8013546 <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80133ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133bc:	e853 3f00 	ldrex	r3, [r3]
 80133c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80133c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80133c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	461a      	mov	r2, r3
 80133d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80133d6:	647b      	str	r3, [r7, #68]	; 0x44
 80133d8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80133da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80133dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80133de:	e841 2300 	strex	r3, r2, [r1]
 80133e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80133e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d1e4      	bne.n	80133b4 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	3308      	adds	r3, #8
 80133f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80133f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133f4:	e853 3f00 	ldrex	r3, [r3]
 80133f8:	623b      	str	r3, [r7, #32]
   return(result);
 80133fa:	6a3b      	ldr	r3, [r7, #32]
 80133fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013400:	f023 0301 	bic.w	r3, r3, #1
 8013404:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	681b      	ldr	r3, [r3, #0]
 801340c:	3308      	adds	r3, #8
 801340e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8013412:	633a      	str	r2, [r7, #48]	; 0x30
 8013414:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013416:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801341a:	e841 2300 	strex	r3, r2, [r1]
 801341e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8013420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013422:	2b00      	cmp	r3, #0
 8013424:	d1e1      	bne.n	80133ea <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	2220      	movs	r2, #32
 801342a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	2200      	movs	r2, #0
 8013432:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	2200      	movs	r2, #0
 8013438:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	681b      	ldr	r3, [r3, #0]
 801343e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013440:	693b      	ldr	r3, [r7, #16]
 8013442:	e853 3f00 	ldrex	r3, [r3]
 8013446:	60fb      	str	r3, [r7, #12]
   return(result);
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	f023 0310 	bic.w	r3, r3, #16
 801344e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	681b      	ldr	r3, [r3, #0]
 8013456:	461a      	mov	r2, r3
 8013458:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801345c:	61fb      	str	r3, [r7, #28]
 801345e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013460:	69b9      	ldr	r1, [r7, #24]
 8013462:	69fa      	ldr	r2, [r7, #28]
 8013464:	e841 2300 	strex	r3, r2, [r1]
 8013468:	617b      	str	r3, [r7, #20]
   return(result);
 801346a:	697b      	ldr	r3, [r7, #20]
 801346c:	2b00      	cmp	r3, #0
 801346e:	d1e4      	bne.n	801343a <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8013470:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8013474:	4619      	mov	r1, r3
 8013476:	6878      	ldr	r0, [r7, #4]
 8013478:	f7f6 fe8a 	bl	800a190 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801347c:	e063      	b.n	8013546 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801347e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013482:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013486:	2b00      	cmp	r3, #0
 8013488:	d00e      	beq.n	80134a8 <HAL_UART_IRQHandler+0x584>
 801348a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801348e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013492:	2b00      	cmp	r3, #0
 8013494:	d008      	beq.n	80134a8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	681b      	ldr	r3, [r3, #0]
 801349a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801349e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80134a0:	6878      	ldr	r0, [r7, #4]
 80134a2:	f000 ffb0 	bl	8014406 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80134a6:	e051      	b.n	801354c <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80134a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80134ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d014      	beq.n	80134de <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80134b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80134b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d105      	bne.n	80134cc <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80134c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80134c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d008      	beq.n	80134de <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d03a      	beq.n	801354a <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80134d8:	6878      	ldr	r0, [r7, #4]
 80134da:	4798      	blx	r3
    }
    return;
 80134dc:	e035      	b.n	801354a <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80134de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80134e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d009      	beq.n	80134fe <HAL_UART_IRQHandler+0x5da>
 80134ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80134ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d003      	beq.n	80134fe <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80134f6:	6878      	ldr	r0, [r7, #4]
 80134f8:	f000 ff5a 	bl	80143b0 <UART_EndTransmit_IT>
    return;
 80134fc:	e026      	b.n	801354c <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80134fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013502:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013506:	2b00      	cmp	r3, #0
 8013508:	d009      	beq.n	801351e <HAL_UART_IRQHandler+0x5fa>
 801350a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801350e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8013512:	2b00      	cmp	r3, #0
 8013514:	d003      	beq.n	801351e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8013516:	6878      	ldr	r0, [r7, #4]
 8013518:	f000 ff89 	bl	801442e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801351c:	e016      	b.n	801354c <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801351e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013522:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013526:	2b00      	cmp	r3, #0
 8013528:	d010      	beq.n	801354c <HAL_UART_IRQHandler+0x628>
 801352a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801352e:	2b00      	cmp	r3, #0
 8013530:	da0c      	bge.n	801354c <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8013532:	6878      	ldr	r0, [r7, #4]
 8013534:	f000 ff71 	bl	801441a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8013538:	e008      	b.n	801354c <HAL_UART_IRQHandler+0x628>
      return;
 801353a:	bf00      	nop
 801353c:	e006      	b.n	801354c <HAL_UART_IRQHandler+0x628>
    return;
 801353e:	bf00      	nop
 8013540:	e004      	b.n	801354c <HAL_UART_IRQHandler+0x628>
      return;
 8013542:	bf00      	nop
 8013544:	e002      	b.n	801354c <HAL_UART_IRQHandler+0x628>
      return;
 8013546:	bf00      	nop
 8013548:	e000      	b.n	801354c <HAL_UART_IRQHandler+0x628>
    return;
 801354a:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 801354c:	37e8      	adds	r7, #232	; 0xe8
 801354e:	46bd      	mov	sp, r7
 8013550:	bd80      	pop	{r7, pc}
 8013552:	bf00      	nop

08013554 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8013554:	b480      	push	{r7}
 8013556:	b083      	sub	sp, #12
 8013558:	af00      	add	r7, sp, #0
 801355a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801355c:	bf00      	nop
 801355e:	370c      	adds	r7, #12
 8013560:	46bd      	mov	sp, r7
 8013562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013566:	4770      	bx	lr

08013568 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8013568:	b480      	push	{r7}
 801356a:	b083      	sub	sp, #12
 801356c:	af00      	add	r7, sp, #0
 801356e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8013570:	bf00      	nop
 8013572:	370c      	adds	r7, #12
 8013574:	46bd      	mov	sp, r7
 8013576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801357a:	4770      	bx	lr

0801357c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801357c:	b480      	push	{r7}
 801357e:	b083      	sub	sp, #12
 8013580:	af00      	add	r7, sp, #0
 8013582:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8013584:	bf00      	nop
 8013586:	370c      	adds	r7, #12
 8013588:	46bd      	mov	sp, r7
 801358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801358e:	4770      	bx	lr

08013590 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8013590:	b480      	push	{r7}
 8013592:	b083      	sub	sp, #12
 8013594:	af00      	add	r7, sp, #0
 8013596:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8013598:	bf00      	nop
 801359a:	370c      	adds	r7, #12
 801359c:	46bd      	mov	sp, r7
 801359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135a2:	4770      	bx	lr

080135a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80135a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80135a8:	b08c      	sub	sp, #48	; 0x30
 80135aa:	af00      	add	r7, sp, #0
 80135ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80135ae:	2300      	movs	r3, #0
 80135b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80135b4:	697b      	ldr	r3, [r7, #20]
 80135b6:	689a      	ldr	r2, [r3, #8]
 80135b8:	697b      	ldr	r3, [r7, #20]
 80135ba:	691b      	ldr	r3, [r3, #16]
 80135bc:	431a      	orrs	r2, r3
 80135be:	697b      	ldr	r3, [r7, #20]
 80135c0:	695b      	ldr	r3, [r3, #20]
 80135c2:	431a      	orrs	r2, r3
 80135c4:	697b      	ldr	r3, [r7, #20]
 80135c6:	69db      	ldr	r3, [r3, #28]
 80135c8:	4313      	orrs	r3, r2
 80135ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80135cc:	697b      	ldr	r3, [r7, #20]
 80135ce:	681b      	ldr	r3, [r3, #0]
 80135d0:	681a      	ldr	r2, [r3, #0]
 80135d2:	4baa      	ldr	r3, [pc, #680]	; (801387c <UART_SetConfig+0x2d8>)
 80135d4:	4013      	ands	r3, r2
 80135d6:	697a      	ldr	r2, [r7, #20]
 80135d8:	6812      	ldr	r2, [r2, #0]
 80135da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80135dc:	430b      	orrs	r3, r1
 80135de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80135e0:	697b      	ldr	r3, [r7, #20]
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	685b      	ldr	r3, [r3, #4]
 80135e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80135ea:	697b      	ldr	r3, [r7, #20]
 80135ec:	68da      	ldr	r2, [r3, #12]
 80135ee:	697b      	ldr	r3, [r7, #20]
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	430a      	orrs	r2, r1
 80135f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80135f6:	697b      	ldr	r3, [r7, #20]
 80135f8:	699b      	ldr	r3, [r3, #24]
 80135fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80135fc:	697b      	ldr	r3, [r7, #20]
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	4a9f      	ldr	r2, [pc, #636]	; (8013880 <UART_SetConfig+0x2dc>)
 8013602:	4293      	cmp	r3, r2
 8013604:	d004      	beq.n	8013610 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8013606:	697b      	ldr	r3, [r7, #20]
 8013608:	6a1b      	ldr	r3, [r3, #32]
 801360a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801360c:	4313      	orrs	r3, r2
 801360e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8013610:	697b      	ldr	r3, [r7, #20]
 8013612:	681b      	ldr	r3, [r3, #0]
 8013614:	689b      	ldr	r3, [r3, #8]
 8013616:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 801361a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 801361e:	697a      	ldr	r2, [r7, #20]
 8013620:	6812      	ldr	r2, [r2, #0]
 8013622:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013624:	430b      	orrs	r3, r1
 8013626:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8013628:	697b      	ldr	r3, [r7, #20]
 801362a:	681b      	ldr	r3, [r3, #0]
 801362c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801362e:	f023 010f 	bic.w	r1, r3, #15
 8013632:	697b      	ldr	r3, [r7, #20]
 8013634:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013636:	697b      	ldr	r3, [r7, #20]
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	430a      	orrs	r2, r1
 801363c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801363e:	697b      	ldr	r3, [r7, #20]
 8013640:	681b      	ldr	r3, [r3, #0]
 8013642:	4a90      	ldr	r2, [pc, #576]	; (8013884 <UART_SetConfig+0x2e0>)
 8013644:	4293      	cmp	r3, r2
 8013646:	d125      	bne.n	8013694 <UART_SetConfig+0xf0>
 8013648:	4b8f      	ldr	r3, [pc, #572]	; (8013888 <UART_SetConfig+0x2e4>)
 801364a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801364e:	f003 0303 	and.w	r3, r3, #3
 8013652:	2b03      	cmp	r3, #3
 8013654:	d81a      	bhi.n	801368c <UART_SetConfig+0xe8>
 8013656:	a201      	add	r2, pc, #4	; (adr r2, 801365c <UART_SetConfig+0xb8>)
 8013658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801365c:	0801366d 	.word	0x0801366d
 8013660:	0801367d 	.word	0x0801367d
 8013664:	08013675 	.word	0x08013675
 8013668:	08013685 	.word	0x08013685
 801366c:	2301      	movs	r3, #1
 801366e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8013672:	e116      	b.n	80138a2 <UART_SetConfig+0x2fe>
 8013674:	2302      	movs	r3, #2
 8013676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801367a:	e112      	b.n	80138a2 <UART_SetConfig+0x2fe>
 801367c:	2304      	movs	r3, #4
 801367e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8013682:	e10e      	b.n	80138a2 <UART_SetConfig+0x2fe>
 8013684:	2308      	movs	r3, #8
 8013686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801368a:	e10a      	b.n	80138a2 <UART_SetConfig+0x2fe>
 801368c:	2310      	movs	r3, #16
 801368e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8013692:	e106      	b.n	80138a2 <UART_SetConfig+0x2fe>
 8013694:	697b      	ldr	r3, [r7, #20]
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	4a7c      	ldr	r2, [pc, #496]	; (801388c <UART_SetConfig+0x2e8>)
 801369a:	4293      	cmp	r3, r2
 801369c:	d138      	bne.n	8013710 <UART_SetConfig+0x16c>
 801369e:	4b7a      	ldr	r3, [pc, #488]	; (8013888 <UART_SetConfig+0x2e4>)
 80136a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80136a4:	f003 030c 	and.w	r3, r3, #12
 80136a8:	2b0c      	cmp	r3, #12
 80136aa:	d82d      	bhi.n	8013708 <UART_SetConfig+0x164>
 80136ac:	a201      	add	r2, pc, #4	; (adr r2, 80136b4 <UART_SetConfig+0x110>)
 80136ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80136b2:	bf00      	nop
 80136b4:	080136e9 	.word	0x080136e9
 80136b8:	08013709 	.word	0x08013709
 80136bc:	08013709 	.word	0x08013709
 80136c0:	08013709 	.word	0x08013709
 80136c4:	080136f9 	.word	0x080136f9
 80136c8:	08013709 	.word	0x08013709
 80136cc:	08013709 	.word	0x08013709
 80136d0:	08013709 	.word	0x08013709
 80136d4:	080136f1 	.word	0x080136f1
 80136d8:	08013709 	.word	0x08013709
 80136dc:	08013709 	.word	0x08013709
 80136e0:	08013709 	.word	0x08013709
 80136e4:	08013701 	.word	0x08013701
 80136e8:	2300      	movs	r3, #0
 80136ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80136ee:	e0d8      	b.n	80138a2 <UART_SetConfig+0x2fe>
 80136f0:	2302      	movs	r3, #2
 80136f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80136f6:	e0d4      	b.n	80138a2 <UART_SetConfig+0x2fe>
 80136f8:	2304      	movs	r3, #4
 80136fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80136fe:	e0d0      	b.n	80138a2 <UART_SetConfig+0x2fe>
 8013700:	2308      	movs	r3, #8
 8013702:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8013706:	e0cc      	b.n	80138a2 <UART_SetConfig+0x2fe>
 8013708:	2310      	movs	r3, #16
 801370a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801370e:	e0c8      	b.n	80138a2 <UART_SetConfig+0x2fe>
 8013710:	697b      	ldr	r3, [r7, #20]
 8013712:	681b      	ldr	r3, [r3, #0]
 8013714:	4a5e      	ldr	r2, [pc, #376]	; (8013890 <UART_SetConfig+0x2ec>)
 8013716:	4293      	cmp	r3, r2
 8013718:	d125      	bne.n	8013766 <UART_SetConfig+0x1c2>
 801371a:	4b5b      	ldr	r3, [pc, #364]	; (8013888 <UART_SetConfig+0x2e4>)
 801371c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013720:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8013724:	2b30      	cmp	r3, #48	; 0x30
 8013726:	d016      	beq.n	8013756 <UART_SetConfig+0x1b2>
 8013728:	2b30      	cmp	r3, #48	; 0x30
 801372a:	d818      	bhi.n	801375e <UART_SetConfig+0x1ba>
 801372c:	2b20      	cmp	r3, #32
 801372e:	d00a      	beq.n	8013746 <UART_SetConfig+0x1a2>
 8013730:	2b20      	cmp	r3, #32
 8013732:	d814      	bhi.n	801375e <UART_SetConfig+0x1ba>
 8013734:	2b00      	cmp	r3, #0
 8013736:	d002      	beq.n	801373e <UART_SetConfig+0x19a>
 8013738:	2b10      	cmp	r3, #16
 801373a:	d008      	beq.n	801374e <UART_SetConfig+0x1aa>
 801373c:	e00f      	b.n	801375e <UART_SetConfig+0x1ba>
 801373e:	2300      	movs	r3, #0
 8013740:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8013744:	e0ad      	b.n	80138a2 <UART_SetConfig+0x2fe>
 8013746:	2302      	movs	r3, #2
 8013748:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801374c:	e0a9      	b.n	80138a2 <UART_SetConfig+0x2fe>
 801374e:	2304      	movs	r3, #4
 8013750:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8013754:	e0a5      	b.n	80138a2 <UART_SetConfig+0x2fe>
 8013756:	2308      	movs	r3, #8
 8013758:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801375c:	e0a1      	b.n	80138a2 <UART_SetConfig+0x2fe>
 801375e:	2310      	movs	r3, #16
 8013760:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8013764:	e09d      	b.n	80138a2 <UART_SetConfig+0x2fe>
 8013766:	697b      	ldr	r3, [r7, #20]
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	4a4a      	ldr	r2, [pc, #296]	; (8013894 <UART_SetConfig+0x2f0>)
 801376c:	4293      	cmp	r3, r2
 801376e:	d125      	bne.n	80137bc <UART_SetConfig+0x218>
 8013770:	4b45      	ldr	r3, [pc, #276]	; (8013888 <UART_SetConfig+0x2e4>)
 8013772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013776:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801377a:	2bc0      	cmp	r3, #192	; 0xc0
 801377c:	d016      	beq.n	80137ac <UART_SetConfig+0x208>
 801377e:	2bc0      	cmp	r3, #192	; 0xc0
 8013780:	d818      	bhi.n	80137b4 <UART_SetConfig+0x210>
 8013782:	2b80      	cmp	r3, #128	; 0x80
 8013784:	d00a      	beq.n	801379c <UART_SetConfig+0x1f8>
 8013786:	2b80      	cmp	r3, #128	; 0x80
 8013788:	d814      	bhi.n	80137b4 <UART_SetConfig+0x210>
 801378a:	2b00      	cmp	r3, #0
 801378c:	d002      	beq.n	8013794 <UART_SetConfig+0x1f0>
 801378e:	2b40      	cmp	r3, #64	; 0x40
 8013790:	d008      	beq.n	80137a4 <UART_SetConfig+0x200>
 8013792:	e00f      	b.n	80137b4 <UART_SetConfig+0x210>
 8013794:	2300      	movs	r3, #0
 8013796:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801379a:	e082      	b.n	80138a2 <UART_SetConfig+0x2fe>
 801379c:	2302      	movs	r3, #2
 801379e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80137a2:	e07e      	b.n	80138a2 <UART_SetConfig+0x2fe>
 80137a4:	2304      	movs	r3, #4
 80137a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80137aa:	e07a      	b.n	80138a2 <UART_SetConfig+0x2fe>
 80137ac:	2308      	movs	r3, #8
 80137ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80137b2:	e076      	b.n	80138a2 <UART_SetConfig+0x2fe>
 80137b4:	2310      	movs	r3, #16
 80137b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80137ba:	e072      	b.n	80138a2 <UART_SetConfig+0x2fe>
 80137bc:	697b      	ldr	r3, [r7, #20]
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	4a35      	ldr	r2, [pc, #212]	; (8013898 <UART_SetConfig+0x2f4>)
 80137c2:	4293      	cmp	r3, r2
 80137c4:	d12a      	bne.n	801381c <UART_SetConfig+0x278>
 80137c6:	4b30      	ldr	r3, [pc, #192]	; (8013888 <UART_SetConfig+0x2e4>)
 80137c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80137cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80137d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80137d4:	d01a      	beq.n	801380c <UART_SetConfig+0x268>
 80137d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80137da:	d81b      	bhi.n	8013814 <UART_SetConfig+0x270>
 80137dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80137e0:	d00c      	beq.n	80137fc <UART_SetConfig+0x258>
 80137e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80137e6:	d815      	bhi.n	8013814 <UART_SetConfig+0x270>
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d003      	beq.n	80137f4 <UART_SetConfig+0x250>
 80137ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80137f0:	d008      	beq.n	8013804 <UART_SetConfig+0x260>
 80137f2:	e00f      	b.n	8013814 <UART_SetConfig+0x270>
 80137f4:	2300      	movs	r3, #0
 80137f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80137fa:	e052      	b.n	80138a2 <UART_SetConfig+0x2fe>
 80137fc:	2302      	movs	r3, #2
 80137fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8013802:	e04e      	b.n	80138a2 <UART_SetConfig+0x2fe>
 8013804:	2304      	movs	r3, #4
 8013806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801380a:	e04a      	b.n	80138a2 <UART_SetConfig+0x2fe>
 801380c:	2308      	movs	r3, #8
 801380e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8013812:	e046      	b.n	80138a2 <UART_SetConfig+0x2fe>
 8013814:	2310      	movs	r3, #16
 8013816:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801381a:	e042      	b.n	80138a2 <UART_SetConfig+0x2fe>
 801381c:	697b      	ldr	r3, [r7, #20]
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	4a17      	ldr	r2, [pc, #92]	; (8013880 <UART_SetConfig+0x2dc>)
 8013822:	4293      	cmp	r3, r2
 8013824:	d13a      	bne.n	801389c <UART_SetConfig+0x2f8>
 8013826:	4b18      	ldr	r3, [pc, #96]	; (8013888 <UART_SetConfig+0x2e4>)
 8013828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801382c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8013830:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8013834:	d01a      	beq.n	801386c <UART_SetConfig+0x2c8>
 8013836:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801383a:	d81b      	bhi.n	8013874 <UART_SetConfig+0x2d0>
 801383c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013840:	d00c      	beq.n	801385c <UART_SetConfig+0x2b8>
 8013842:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013846:	d815      	bhi.n	8013874 <UART_SetConfig+0x2d0>
 8013848:	2b00      	cmp	r3, #0
 801384a:	d003      	beq.n	8013854 <UART_SetConfig+0x2b0>
 801384c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013850:	d008      	beq.n	8013864 <UART_SetConfig+0x2c0>
 8013852:	e00f      	b.n	8013874 <UART_SetConfig+0x2d0>
 8013854:	2300      	movs	r3, #0
 8013856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801385a:	e022      	b.n	80138a2 <UART_SetConfig+0x2fe>
 801385c:	2302      	movs	r3, #2
 801385e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8013862:	e01e      	b.n	80138a2 <UART_SetConfig+0x2fe>
 8013864:	2304      	movs	r3, #4
 8013866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801386a:	e01a      	b.n	80138a2 <UART_SetConfig+0x2fe>
 801386c:	2308      	movs	r3, #8
 801386e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8013872:	e016      	b.n	80138a2 <UART_SetConfig+0x2fe>
 8013874:	2310      	movs	r3, #16
 8013876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801387a:	e012      	b.n	80138a2 <UART_SetConfig+0x2fe>
 801387c:	cfff69f3 	.word	0xcfff69f3
 8013880:	40008000 	.word	0x40008000
 8013884:	40013800 	.word	0x40013800
 8013888:	40021000 	.word	0x40021000
 801388c:	40004400 	.word	0x40004400
 8013890:	40004800 	.word	0x40004800
 8013894:	40004c00 	.word	0x40004c00
 8013898:	40005000 	.word	0x40005000
 801389c:	2310      	movs	r3, #16
 801389e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80138a2:	697b      	ldr	r3, [r7, #20]
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	4aae      	ldr	r2, [pc, #696]	; (8013b60 <UART_SetConfig+0x5bc>)
 80138a8:	4293      	cmp	r3, r2
 80138aa:	f040 8097 	bne.w	80139dc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80138ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80138b2:	2b08      	cmp	r3, #8
 80138b4:	d823      	bhi.n	80138fe <UART_SetConfig+0x35a>
 80138b6:	a201      	add	r2, pc, #4	; (adr r2, 80138bc <UART_SetConfig+0x318>)
 80138b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80138bc:	080138e1 	.word	0x080138e1
 80138c0:	080138ff 	.word	0x080138ff
 80138c4:	080138e9 	.word	0x080138e9
 80138c8:	080138ff 	.word	0x080138ff
 80138cc:	080138ef 	.word	0x080138ef
 80138d0:	080138ff 	.word	0x080138ff
 80138d4:	080138ff 	.word	0x080138ff
 80138d8:	080138ff 	.word	0x080138ff
 80138dc:	080138f7 	.word	0x080138f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80138e0:	f7fb faa8 	bl	800ee34 <HAL_RCC_GetPCLK1Freq>
 80138e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80138e6:	e010      	b.n	801390a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80138e8:	4b9e      	ldr	r3, [pc, #632]	; (8013b64 <UART_SetConfig+0x5c0>)
 80138ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80138ec:	e00d      	b.n	801390a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80138ee:	f7fb fa09 	bl	800ed04 <HAL_RCC_GetSysClockFreq>
 80138f2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80138f4:	e009      	b.n	801390a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80138f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80138fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80138fc:	e005      	b.n	801390a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80138fe:	2300      	movs	r3, #0
 8013900:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8013902:	2301      	movs	r3, #1
 8013904:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8013908:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801390c:	2b00      	cmp	r3, #0
 801390e:	f000 8130 	beq.w	8013b72 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8013912:	697b      	ldr	r3, [r7, #20]
 8013914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013916:	4a94      	ldr	r2, [pc, #592]	; (8013b68 <UART_SetConfig+0x5c4>)
 8013918:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801391c:	461a      	mov	r2, r3
 801391e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013920:	fbb3 f3f2 	udiv	r3, r3, r2
 8013924:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013926:	697b      	ldr	r3, [r7, #20]
 8013928:	685a      	ldr	r2, [r3, #4]
 801392a:	4613      	mov	r3, r2
 801392c:	005b      	lsls	r3, r3, #1
 801392e:	4413      	add	r3, r2
 8013930:	69ba      	ldr	r2, [r7, #24]
 8013932:	429a      	cmp	r2, r3
 8013934:	d305      	bcc.n	8013942 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8013936:	697b      	ldr	r3, [r7, #20]
 8013938:	685b      	ldr	r3, [r3, #4]
 801393a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801393c:	69ba      	ldr	r2, [r7, #24]
 801393e:	429a      	cmp	r2, r3
 8013940:	d903      	bls.n	801394a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8013942:	2301      	movs	r3, #1
 8013944:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8013948:	e113      	b.n	8013b72 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801394a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801394c:	2200      	movs	r2, #0
 801394e:	60bb      	str	r3, [r7, #8]
 8013950:	60fa      	str	r2, [r7, #12]
 8013952:	697b      	ldr	r3, [r7, #20]
 8013954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013956:	4a84      	ldr	r2, [pc, #528]	; (8013b68 <UART_SetConfig+0x5c4>)
 8013958:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801395c:	b29b      	uxth	r3, r3
 801395e:	2200      	movs	r2, #0
 8013960:	603b      	str	r3, [r7, #0]
 8013962:	607a      	str	r2, [r7, #4]
 8013964:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013968:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801396c:	f7ed f9f4 	bl	8000d58 <__aeabi_uldivmod>
 8013970:	4602      	mov	r2, r0
 8013972:	460b      	mov	r3, r1
 8013974:	4610      	mov	r0, r2
 8013976:	4619      	mov	r1, r3
 8013978:	f04f 0200 	mov.w	r2, #0
 801397c:	f04f 0300 	mov.w	r3, #0
 8013980:	020b      	lsls	r3, r1, #8
 8013982:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8013986:	0202      	lsls	r2, r0, #8
 8013988:	6979      	ldr	r1, [r7, #20]
 801398a:	6849      	ldr	r1, [r1, #4]
 801398c:	0849      	lsrs	r1, r1, #1
 801398e:	2000      	movs	r0, #0
 8013990:	460c      	mov	r4, r1
 8013992:	4605      	mov	r5, r0
 8013994:	eb12 0804 	adds.w	r8, r2, r4
 8013998:	eb43 0905 	adc.w	r9, r3, r5
 801399c:	697b      	ldr	r3, [r7, #20]
 801399e:	685b      	ldr	r3, [r3, #4]
 80139a0:	2200      	movs	r2, #0
 80139a2:	469a      	mov	sl, r3
 80139a4:	4693      	mov	fp, r2
 80139a6:	4652      	mov	r2, sl
 80139a8:	465b      	mov	r3, fp
 80139aa:	4640      	mov	r0, r8
 80139ac:	4649      	mov	r1, r9
 80139ae:	f7ed f9d3 	bl	8000d58 <__aeabi_uldivmod>
 80139b2:	4602      	mov	r2, r0
 80139b4:	460b      	mov	r3, r1
 80139b6:	4613      	mov	r3, r2
 80139b8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80139ba:	6a3b      	ldr	r3, [r7, #32]
 80139bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80139c0:	d308      	bcc.n	80139d4 <UART_SetConfig+0x430>
 80139c2:	6a3b      	ldr	r3, [r7, #32]
 80139c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80139c8:	d204      	bcs.n	80139d4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80139ca:	697b      	ldr	r3, [r7, #20]
 80139cc:	681b      	ldr	r3, [r3, #0]
 80139ce:	6a3a      	ldr	r2, [r7, #32]
 80139d0:	60da      	str	r2, [r3, #12]
 80139d2:	e0ce      	b.n	8013b72 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80139d4:	2301      	movs	r3, #1
 80139d6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80139da:	e0ca      	b.n	8013b72 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80139dc:	697b      	ldr	r3, [r7, #20]
 80139de:	69db      	ldr	r3, [r3, #28]
 80139e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80139e4:	d166      	bne.n	8013ab4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80139e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80139ea:	2b08      	cmp	r3, #8
 80139ec:	d827      	bhi.n	8013a3e <UART_SetConfig+0x49a>
 80139ee:	a201      	add	r2, pc, #4	; (adr r2, 80139f4 <UART_SetConfig+0x450>)
 80139f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80139f4:	08013a19 	.word	0x08013a19
 80139f8:	08013a21 	.word	0x08013a21
 80139fc:	08013a29 	.word	0x08013a29
 8013a00:	08013a3f 	.word	0x08013a3f
 8013a04:	08013a2f 	.word	0x08013a2f
 8013a08:	08013a3f 	.word	0x08013a3f
 8013a0c:	08013a3f 	.word	0x08013a3f
 8013a10:	08013a3f 	.word	0x08013a3f
 8013a14:	08013a37 	.word	0x08013a37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013a18:	f7fb fa0c 	bl	800ee34 <HAL_RCC_GetPCLK1Freq>
 8013a1c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8013a1e:	e014      	b.n	8013a4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013a20:	f7fb fa1e 	bl	800ee60 <HAL_RCC_GetPCLK2Freq>
 8013a24:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8013a26:	e010      	b.n	8013a4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8013a28:	4b4e      	ldr	r3, [pc, #312]	; (8013b64 <UART_SetConfig+0x5c0>)
 8013a2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8013a2c:	e00d      	b.n	8013a4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8013a2e:	f7fb f969 	bl	800ed04 <HAL_RCC_GetSysClockFreq>
 8013a32:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8013a34:	e009      	b.n	8013a4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013a36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013a3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8013a3c:	e005      	b.n	8013a4a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8013a3e:	2300      	movs	r3, #0
 8013a40:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8013a42:	2301      	movs	r3, #1
 8013a44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8013a48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8013a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	f000 8090 	beq.w	8013b72 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013a52:	697b      	ldr	r3, [r7, #20]
 8013a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a56:	4a44      	ldr	r2, [pc, #272]	; (8013b68 <UART_SetConfig+0x5c4>)
 8013a58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013a5c:	461a      	mov	r2, r3
 8013a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a60:	fbb3 f3f2 	udiv	r3, r3, r2
 8013a64:	005a      	lsls	r2, r3, #1
 8013a66:	697b      	ldr	r3, [r7, #20]
 8013a68:	685b      	ldr	r3, [r3, #4]
 8013a6a:	085b      	lsrs	r3, r3, #1
 8013a6c:	441a      	add	r2, r3
 8013a6e:	697b      	ldr	r3, [r7, #20]
 8013a70:	685b      	ldr	r3, [r3, #4]
 8013a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8013a76:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013a78:	6a3b      	ldr	r3, [r7, #32]
 8013a7a:	2b0f      	cmp	r3, #15
 8013a7c:	d916      	bls.n	8013aac <UART_SetConfig+0x508>
 8013a7e:	6a3b      	ldr	r3, [r7, #32]
 8013a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013a84:	d212      	bcs.n	8013aac <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8013a86:	6a3b      	ldr	r3, [r7, #32]
 8013a88:	b29b      	uxth	r3, r3
 8013a8a:	f023 030f 	bic.w	r3, r3, #15
 8013a8e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8013a90:	6a3b      	ldr	r3, [r7, #32]
 8013a92:	085b      	lsrs	r3, r3, #1
 8013a94:	b29b      	uxth	r3, r3
 8013a96:	f003 0307 	and.w	r3, r3, #7
 8013a9a:	b29a      	uxth	r2, r3
 8013a9c:	8bfb      	ldrh	r3, [r7, #30]
 8013a9e:	4313      	orrs	r3, r2
 8013aa0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8013aa2:	697b      	ldr	r3, [r7, #20]
 8013aa4:	681b      	ldr	r3, [r3, #0]
 8013aa6:	8bfa      	ldrh	r2, [r7, #30]
 8013aa8:	60da      	str	r2, [r3, #12]
 8013aaa:	e062      	b.n	8013b72 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8013aac:	2301      	movs	r3, #1
 8013aae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8013ab2:	e05e      	b.n	8013b72 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8013ab4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013ab8:	2b08      	cmp	r3, #8
 8013aba:	d828      	bhi.n	8013b0e <UART_SetConfig+0x56a>
 8013abc:	a201      	add	r2, pc, #4	; (adr r2, 8013ac4 <UART_SetConfig+0x520>)
 8013abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ac2:	bf00      	nop
 8013ac4:	08013ae9 	.word	0x08013ae9
 8013ac8:	08013af1 	.word	0x08013af1
 8013acc:	08013af9 	.word	0x08013af9
 8013ad0:	08013b0f 	.word	0x08013b0f
 8013ad4:	08013aff 	.word	0x08013aff
 8013ad8:	08013b0f 	.word	0x08013b0f
 8013adc:	08013b0f 	.word	0x08013b0f
 8013ae0:	08013b0f 	.word	0x08013b0f
 8013ae4:	08013b07 	.word	0x08013b07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013ae8:	f7fb f9a4 	bl	800ee34 <HAL_RCC_GetPCLK1Freq>
 8013aec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8013aee:	e014      	b.n	8013b1a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013af0:	f7fb f9b6 	bl	800ee60 <HAL_RCC_GetPCLK2Freq>
 8013af4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8013af6:	e010      	b.n	8013b1a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8013af8:	4b1a      	ldr	r3, [pc, #104]	; (8013b64 <UART_SetConfig+0x5c0>)
 8013afa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8013afc:	e00d      	b.n	8013b1a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8013afe:	f7fb f901 	bl	800ed04 <HAL_RCC_GetSysClockFreq>
 8013b02:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8013b04:	e009      	b.n	8013b1a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013b06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013b0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8013b0c:	e005      	b.n	8013b1a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8013b0e:	2300      	movs	r3, #0
 8013b10:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8013b12:	2301      	movs	r3, #1
 8013b14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8013b18:	bf00      	nop
    }

    if (pclk != 0U)
 8013b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d028      	beq.n	8013b72 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013b20:	697b      	ldr	r3, [r7, #20]
 8013b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b24:	4a10      	ldr	r2, [pc, #64]	; (8013b68 <UART_SetConfig+0x5c4>)
 8013b26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013b2a:	461a      	mov	r2, r3
 8013b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b2e:	fbb3 f2f2 	udiv	r2, r3, r2
 8013b32:	697b      	ldr	r3, [r7, #20]
 8013b34:	685b      	ldr	r3, [r3, #4]
 8013b36:	085b      	lsrs	r3, r3, #1
 8013b38:	441a      	add	r2, r3
 8013b3a:	697b      	ldr	r3, [r7, #20]
 8013b3c:	685b      	ldr	r3, [r3, #4]
 8013b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8013b42:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013b44:	6a3b      	ldr	r3, [r7, #32]
 8013b46:	2b0f      	cmp	r3, #15
 8013b48:	d910      	bls.n	8013b6c <UART_SetConfig+0x5c8>
 8013b4a:	6a3b      	ldr	r3, [r7, #32]
 8013b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013b50:	d20c      	bcs.n	8013b6c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8013b52:	6a3b      	ldr	r3, [r7, #32]
 8013b54:	b29a      	uxth	r2, r3
 8013b56:	697b      	ldr	r3, [r7, #20]
 8013b58:	681b      	ldr	r3, [r3, #0]
 8013b5a:	60da      	str	r2, [r3, #12]
 8013b5c:	e009      	b.n	8013b72 <UART_SetConfig+0x5ce>
 8013b5e:	bf00      	nop
 8013b60:	40008000 	.word	0x40008000
 8013b64:	00f42400 	.word	0x00f42400
 8013b68:	08024370 	.word	0x08024370
      }
      else
      {
        ret = HAL_ERROR;
 8013b6c:	2301      	movs	r3, #1
 8013b6e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8013b72:	697b      	ldr	r3, [r7, #20]
 8013b74:	2201      	movs	r2, #1
 8013b76:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8013b7a:	697b      	ldr	r3, [r7, #20]
 8013b7c:	2201      	movs	r2, #1
 8013b7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8013b82:	697b      	ldr	r3, [r7, #20]
 8013b84:	2200      	movs	r2, #0
 8013b86:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8013b88:	697b      	ldr	r3, [r7, #20]
 8013b8a:	2200      	movs	r2, #0
 8013b8c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8013b8e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8013b92:	4618      	mov	r0, r3
 8013b94:	3730      	adds	r7, #48	; 0x30
 8013b96:	46bd      	mov	sp, r7
 8013b98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08013b9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8013b9c:	b480      	push	{r7}
 8013b9e:	b083      	sub	sp, #12
 8013ba0:	af00      	add	r7, sp, #0
 8013ba2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013ba8:	f003 0301 	and.w	r3, r3, #1
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d00a      	beq.n	8013bc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	681b      	ldr	r3, [r3, #0]
 8013bb4:	685b      	ldr	r3, [r3, #4]
 8013bb6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	430a      	orrs	r2, r1
 8013bc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013bca:	f003 0302 	and.w	r3, r3, #2
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d00a      	beq.n	8013be8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	681b      	ldr	r3, [r3, #0]
 8013bd6:	685b      	ldr	r3, [r3, #4]
 8013bd8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	430a      	orrs	r2, r1
 8013be6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013bec:	f003 0304 	and.w	r3, r3, #4
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d00a      	beq.n	8013c0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	681b      	ldr	r3, [r3, #0]
 8013bf8:	685b      	ldr	r3, [r3, #4]
 8013bfa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	430a      	orrs	r2, r1
 8013c08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c0e:	f003 0308 	and.w	r3, r3, #8
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d00a      	beq.n	8013c2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	685b      	ldr	r3, [r3, #4]
 8013c1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	430a      	orrs	r2, r1
 8013c2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c30:	f003 0310 	and.w	r3, r3, #16
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d00a      	beq.n	8013c4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	689b      	ldr	r3, [r3, #8]
 8013c3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	681b      	ldr	r3, [r3, #0]
 8013c4a:	430a      	orrs	r2, r1
 8013c4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c52:	f003 0320 	and.w	r3, r3, #32
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d00a      	beq.n	8013c70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	681b      	ldr	r3, [r3, #0]
 8013c5e:	689b      	ldr	r3, [r3, #8]
 8013c60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	430a      	orrs	r2, r1
 8013c6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d01a      	beq.n	8013cb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	681b      	ldr	r3, [r3, #0]
 8013c80:	685b      	ldr	r3, [r3, #4]
 8013c82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	430a      	orrs	r2, r1
 8013c90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013c96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013c9a:	d10a      	bne.n	8013cb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	681b      	ldr	r3, [r3, #0]
 8013ca0:	685b      	ldr	r3, [r3, #4]
 8013ca2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	430a      	orrs	r2, r1
 8013cb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d00a      	beq.n	8013cd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	681b      	ldr	r3, [r3, #0]
 8013cc2:	685b      	ldr	r3, [r3, #4]
 8013cc4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	681b      	ldr	r3, [r3, #0]
 8013cd0:	430a      	orrs	r2, r1
 8013cd2:	605a      	str	r2, [r3, #4]
  }
}
 8013cd4:	bf00      	nop
 8013cd6:	370c      	adds	r7, #12
 8013cd8:	46bd      	mov	sp, r7
 8013cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cde:	4770      	bx	lr

08013ce0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8013ce0:	b580      	push	{r7, lr}
 8013ce2:	b086      	sub	sp, #24
 8013ce4:	af02      	add	r7, sp, #8
 8013ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	2200      	movs	r2, #0
 8013cec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8013cf0:	f7f9 fafc 	bl	800d2ec <HAL_GetTick>
 8013cf4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	f003 0308 	and.w	r3, r3, #8
 8013d00:	2b08      	cmp	r3, #8
 8013d02:	d10e      	bne.n	8013d22 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013d04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8013d08:	9300      	str	r3, [sp, #0]
 8013d0a:	68fb      	ldr	r3, [r7, #12]
 8013d0c:	2200      	movs	r2, #0
 8013d0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8013d12:	6878      	ldr	r0, [r7, #4]
 8013d14:	f000 f82f 	bl	8013d76 <UART_WaitOnFlagUntilTimeout>
 8013d18:	4603      	mov	r3, r0
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d001      	beq.n	8013d22 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013d1e:	2303      	movs	r3, #3
 8013d20:	e025      	b.n	8013d6e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	681b      	ldr	r3, [r3, #0]
 8013d26:	681b      	ldr	r3, [r3, #0]
 8013d28:	f003 0304 	and.w	r3, r3, #4
 8013d2c:	2b04      	cmp	r3, #4
 8013d2e:	d10e      	bne.n	8013d4e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013d30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8013d34:	9300      	str	r3, [sp, #0]
 8013d36:	68fb      	ldr	r3, [r7, #12]
 8013d38:	2200      	movs	r2, #0
 8013d3a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8013d3e:	6878      	ldr	r0, [r7, #4]
 8013d40:	f000 f819 	bl	8013d76 <UART_WaitOnFlagUntilTimeout>
 8013d44:	4603      	mov	r3, r0
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	d001      	beq.n	8013d4e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013d4a:	2303      	movs	r3, #3
 8013d4c:	e00f      	b.n	8013d6e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	2220      	movs	r2, #32
 8013d52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	2220      	movs	r2, #32
 8013d5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	2200      	movs	r2, #0
 8013d62:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	2200      	movs	r2, #0
 8013d68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8013d6c:	2300      	movs	r3, #0
}
 8013d6e:	4618      	mov	r0, r3
 8013d70:	3710      	adds	r7, #16
 8013d72:	46bd      	mov	sp, r7
 8013d74:	bd80      	pop	{r7, pc}

08013d76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8013d76:	b580      	push	{r7, lr}
 8013d78:	b09c      	sub	sp, #112	; 0x70
 8013d7a:	af00      	add	r7, sp, #0
 8013d7c:	60f8      	str	r0, [r7, #12]
 8013d7e:	60b9      	str	r1, [r7, #8]
 8013d80:	603b      	str	r3, [r7, #0]
 8013d82:	4613      	mov	r3, r2
 8013d84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013d86:	e0a9      	b.n	8013edc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013d88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d8e:	f000 80a5 	beq.w	8013edc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013d92:	f7f9 faab 	bl	800d2ec <HAL_GetTick>
 8013d96:	4602      	mov	r2, r0
 8013d98:	683b      	ldr	r3, [r7, #0]
 8013d9a:	1ad3      	subs	r3, r2, r3
 8013d9c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8013d9e:	429a      	cmp	r2, r3
 8013da0:	d302      	bcc.n	8013da8 <UART_WaitOnFlagUntilTimeout+0x32>
 8013da2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d140      	bne.n	8013e2a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8013da8:	68fb      	ldr	r3, [r7, #12]
 8013daa:	681b      	ldr	r3, [r3, #0]
 8013dac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013dae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013db0:	e853 3f00 	ldrex	r3, [r3]
 8013db4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8013db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013db8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8013dbc:	667b      	str	r3, [r7, #100]	; 0x64
 8013dbe:	68fb      	ldr	r3, [r7, #12]
 8013dc0:	681b      	ldr	r3, [r3, #0]
 8013dc2:	461a      	mov	r2, r3
 8013dc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013dc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013dc8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013dca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013dcc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8013dce:	e841 2300 	strex	r3, r2, [r1]
 8013dd2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8013dd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d1e6      	bne.n	8013da8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013dda:	68fb      	ldr	r3, [r7, #12]
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	3308      	adds	r3, #8
 8013de0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013de4:	e853 3f00 	ldrex	r3, [r3]
 8013de8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013dec:	f023 0301 	bic.w	r3, r3, #1
 8013df0:	663b      	str	r3, [r7, #96]	; 0x60
 8013df2:	68fb      	ldr	r3, [r7, #12]
 8013df4:	681b      	ldr	r3, [r3, #0]
 8013df6:	3308      	adds	r3, #8
 8013df8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013dfa:	64ba      	str	r2, [r7, #72]	; 0x48
 8013dfc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013dfe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013e00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013e02:	e841 2300 	strex	r3, r2, [r1]
 8013e06:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8013e08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	d1e5      	bne.n	8013dda <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	2220      	movs	r2, #32
 8013e12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8013e16:	68fb      	ldr	r3, [r7, #12]
 8013e18:	2220      	movs	r2, #32
 8013e1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	2200      	movs	r2, #0
 8013e22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8013e26:	2303      	movs	r3, #3
 8013e28:	e069      	b.n	8013efe <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8013e2a:	68fb      	ldr	r3, [r7, #12]
 8013e2c:	681b      	ldr	r3, [r3, #0]
 8013e2e:	681b      	ldr	r3, [r3, #0]
 8013e30:	f003 0304 	and.w	r3, r3, #4
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d051      	beq.n	8013edc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	681b      	ldr	r3, [r3, #0]
 8013e3c:	69db      	ldr	r3, [r3, #28]
 8013e3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013e42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013e46:	d149      	bne.n	8013edc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013e48:	68fb      	ldr	r3, [r7, #12]
 8013e4a:	681b      	ldr	r3, [r3, #0]
 8013e4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013e50:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8013e52:	68fb      	ldr	r3, [r7, #12]
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e5a:	e853 3f00 	ldrex	r3, [r3]
 8013e5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e62:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8013e66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8013e68:	68fb      	ldr	r3, [r7, #12]
 8013e6a:	681b      	ldr	r3, [r3, #0]
 8013e6c:	461a      	mov	r2, r3
 8013e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013e70:	637b      	str	r3, [r7, #52]	; 0x34
 8013e72:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013e76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013e78:	e841 2300 	strex	r3, r2, [r1]
 8013e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8013e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d1e6      	bne.n	8013e52 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013e84:	68fb      	ldr	r3, [r7, #12]
 8013e86:	681b      	ldr	r3, [r3, #0]
 8013e88:	3308      	adds	r3, #8
 8013e8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e8c:	697b      	ldr	r3, [r7, #20]
 8013e8e:	e853 3f00 	ldrex	r3, [r3]
 8013e92:	613b      	str	r3, [r7, #16]
   return(result);
 8013e94:	693b      	ldr	r3, [r7, #16]
 8013e96:	f023 0301 	bic.w	r3, r3, #1
 8013e9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8013e9c:	68fb      	ldr	r3, [r7, #12]
 8013e9e:	681b      	ldr	r3, [r3, #0]
 8013ea0:	3308      	adds	r3, #8
 8013ea2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013ea4:	623a      	str	r2, [r7, #32]
 8013ea6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013ea8:	69f9      	ldr	r1, [r7, #28]
 8013eaa:	6a3a      	ldr	r2, [r7, #32]
 8013eac:	e841 2300 	strex	r3, r2, [r1]
 8013eb0:	61bb      	str	r3, [r7, #24]
   return(result);
 8013eb2:	69bb      	ldr	r3, [r7, #24]
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d1e5      	bne.n	8013e84 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	2220      	movs	r2, #32
 8013ebc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8013ec0:	68fb      	ldr	r3, [r7, #12]
 8013ec2:	2220      	movs	r2, #32
 8013ec4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	2220      	movs	r2, #32
 8013ecc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013ed0:	68fb      	ldr	r3, [r7, #12]
 8013ed2:	2200      	movs	r2, #0
 8013ed4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8013ed8:	2303      	movs	r3, #3
 8013eda:	e010      	b.n	8013efe <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013edc:	68fb      	ldr	r3, [r7, #12]
 8013ede:	681b      	ldr	r3, [r3, #0]
 8013ee0:	69da      	ldr	r2, [r3, #28]
 8013ee2:	68bb      	ldr	r3, [r7, #8]
 8013ee4:	4013      	ands	r3, r2
 8013ee6:	68ba      	ldr	r2, [r7, #8]
 8013ee8:	429a      	cmp	r2, r3
 8013eea:	bf0c      	ite	eq
 8013eec:	2301      	moveq	r3, #1
 8013eee:	2300      	movne	r3, #0
 8013ef0:	b2db      	uxtb	r3, r3
 8013ef2:	461a      	mov	r2, r3
 8013ef4:	79fb      	ldrb	r3, [r7, #7]
 8013ef6:	429a      	cmp	r2, r3
 8013ef8:	f43f af46 	beq.w	8013d88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8013efc:	2300      	movs	r3, #0
}
 8013efe:	4618      	mov	r0, r3
 8013f00:	3770      	adds	r7, #112	; 0x70
 8013f02:	46bd      	mov	sp, r7
 8013f04:	bd80      	pop	{r7, pc}
	...

08013f08 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013f08:	b580      	push	{r7, lr}
 8013f0a:	b096      	sub	sp, #88	; 0x58
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	60f8      	str	r0, [r7, #12]
 8013f10:	60b9      	str	r1, [r7, #8]
 8013f12:	4613      	mov	r3, r2
 8013f14:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	68ba      	ldr	r2, [r7, #8]
 8013f1a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8013f1c:	68fb      	ldr	r3, [r7, #12]
 8013f1e:	88fa      	ldrh	r2, [r7, #6]
 8013f20:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013f24:	68fb      	ldr	r3, [r7, #12]
 8013f26:	2200      	movs	r2, #0
 8013f28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8013f2c:	68fb      	ldr	r3, [r7, #12]
 8013f2e:	2222      	movs	r2, #34	; 0x22
 8013f30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d02c      	beq.n	8013f96 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013f40:	4a42      	ldr	r2, [pc, #264]	; (801404c <UART_Start_Receive_DMA+0x144>)
 8013f42:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8013f44:	68fb      	ldr	r3, [r7, #12]
 8013f46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013f48:	4a41      	ldr	r2, [pc, #260]	; (8014050 <UART_Start_Receive_DMA+0x148>)
 8013f4a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013f50:	4a40      	ldr	r2, [pc, #256]	; (8014054 <UART_Start_Receive_DMA+0x14c>)
 8013f52:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013f58:	2200      	movs	r2, #0
 8013f5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8013f5c:	68fb      	ldr	r3, [r7, #12]
 8013f5e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8013f60:	68fb      	ldr	r3, [r7, #12]
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	3324      	adds	r3, #36	; 0x24
 8013f66:	4619      	mov	r1, r3
 8013f68:	68fb      	ldr	r3, [r7, #12]
 8013f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013f6c:	461a      	mov	r2, r3
 8013f6e:	88fb      	ldrh	r3, [r7, #6]
 8013f70:	f7f9 fb6e 	bl	800d650 <HAL_DMA_Start_IT>
 8013f74:	4603      	mov	r3, r0
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d00d      	beq.n	8013f96 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8013f7a:	68fb      	ldr	r3, [r7, #12]
 8013f7c:	2210      	movs	r2, #16
 8013f7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8013f82:	68fb      	ldr	r3, [r7, #12]
 8013f84:	2200      	movs	r2, #0
 8013f86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	2220      	movs	r2, #32
 8013f8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 8013f92:	2301      	movs	r3, #1
 8013f94:	e055      	b.n	8014042 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 8013f96:	68fb      	ldr	r3, [r7, #12]
 8013f98:	2200      	movs	r2, #0
 8013f9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8013f9e:	68fb      	ldr	r3, [r7, #12]
 8013fa0:	691b      	ldr	r3, [r3, #16]
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d018      	beq.n	8013fd8 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013fa6:	68fb      	ldr	r3, [r7, #12]
 8013fa8:	681b      	ldr	r3, [r3, #0]
 8013faa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013fae:	e853 3f00 	ldrex	r3, [r3]
 8013fb2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013fba:	657b      	str	r3, [r7, #84]	; 0x54
 8013fbc:	68fb      	ldr	r3, [r7, #12]
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	461a      	mov	r2, r3
 8013fc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013fc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8013fc6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013fc8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013fca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013fcc:	e841 2300 	strex	r3, r2, [r1]
 8013fd0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8013fd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d1e6      	bne.n	8013fa6 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013fd8:	68fb      	ldr	r3, [r7, #12]
 8013fda:	681b      	ldr	r3, [r3, #0]
 8013fdc:	3308      	adds	r3, #8
 8013fde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fe2:	e853 3f00 	ldrex	r3, [r3]
 8013fe6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fea:	f043 0301 	orr.w	r3, r3, #1
 8013fee:	653b      	str	r3, [r7, #80]	; 0x50
 8013ff0:	68fb      	ldr	r3, [r7, #12]
 8013ff2:	681b      	ldr	r3, [r3, #0]
 8013ff4:	3308      	adds	r3, #8
 8013ff6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013ff8:	637a      	str	r2, [r7, #52]	; 0x34
 8013ffa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013ffc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013ffe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014000:	e841 2300 	strex	r3, r2, [r1]
 8014004:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8014006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014008:	2b00      	cmp	r3, #0
 801400a:	d1e5      	bne.n	8013fd8 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801400c:	68fb      	ldr	r3, [r7, #12]
 801400e:	681b      	ldr	r3, [r3, #0]
 8014010:	3308      	adds	r3, #8
 8014012:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014014:	697b      	ldr	r3, [r7, #20]
 8014016:	e853 3f00 	ldrex	r3, [r3]
 801401a:	613b      	str	r3, [r7, #16]
   return(result);
 801401c:	693b      	ldr	r3, [r7, #16]
 801401e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014022:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014024:	68fb      	ldr	r3, [r7, #12]
 8014026:	681b      	ldr	r3, [r3, #0]
 8014028:	3308      	adds	r3, #8
 801402a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801402c:	623a      	str	r2, [r7, #32]
 801402e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014030:	69f9      	ldr	r1, [r7, #28]
 8014032:	6a3a      	ldr	r2, [r7, #32]
 8014034:	e841 2300 	strex	r3, r2, [r1]
 8014038:	61bb      	str	r3, [r7, #24]
   return(result);
 801403a:	69bb      	ldr	r3, [r7, #24]
 801403c:	2b00      	cmp	r3, #0
 801403e:	d1e5      	bne.n	801400c <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 8014040:	2300      	movs	r3, #0
}
 8014042:	4618      	mov	r0, r3
 8014044:	3758      	adds	r7, #88	; 0x58
 8014046:	46bd      	mov	sp, r7
 8014048:	bd80      	pop	{r7, pc}
 801404a:	bf00      	nop
 801404c:	080141a7 	.word	0x080141a7
 8014050:	080142cd 	.word	0x080142cd
 8014054:	08014305 	.word	0x08014305

08014058 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8014058:	b480      	push	{r7}
 801405a:	b08f      	sub	sp, #60	; 0x3c
 801405c:	af00      	add	r7, sp, #0
 801405e:	6078      	str	r0, [r7, #4]
#if defined(USART_CR1_FIFOEN)
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014066:	6a3b      	ldr	r3, [r7, #32]
 8014068:	e853 3f00 	ldrex	r3, [r3]
 801406c:	61fb      	str	r3, [r7, #28]
   return(result);
 801406e:	69fb      	ldr	r3, [r7, #28]
 8014070:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8014074:	637b      	str	r3, [r7, #52]	; 0x34
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	681b      	ldr	r3, [r3, #0]
 801407a:	461a      	mov	r2, r3
 801407c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801407e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014080:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014082:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014084:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014086:	e841 2300 	strex	r3, r2, [r1]
 801408a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801408c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801408e:	2b00      	cmp	r3, #0
 8014090:	d1e6      	bne.n	8014060 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	681b      	ldr	r3, [r3, #0]
 8014096:	3308      	adds	r3, #8
 8014098:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801409a:	68fb      	ldr	r3, [r7, #12]
 801409c:	e853 3f00 	ldrex	r3, [r3]
 80140a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80140a2:	68bb      	ldr	r3, [r7, #8]
 80140a4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80140a8:	633b      	str	r3, [r7, #48]	; 0x30
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	3308      	adds	r3, #8
 80140b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80140b2:	61ba      	str	r2, [r7, #24]
 80140b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80140b6:	6979      	ldr	r1, [r7, #20]
 80140b8:	69ba      	ldr	r2, [r7, #24]
 80140ba:	e841 2300 	strex	r3, r2, [r1]
 80140be:	613b      	str	r3, [r7, #16]
   return(result);
 80140c0:	693b      	ldr	r3, [r7, #16]
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d1e5      	bne.n	8014092 <UART_EndTxTransfer+0x3a>
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	2220      	movs	r2, #32
 80140ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80140ce:	bf00      	nop
 80140d0:	373c      	adds	r7, #60	; 0x3c
 80140d2:	46bd      	mov	sp, r7
 80140d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140d8:	4770      	bx	lr

080140da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80140da:	b480      	push	{r7}
 80140dc:	b095      	sub	sp, #84	; 0x54
 80140de:	af00      	add	r7, sp, #0
 80140e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	681b      	ldr	r3, [r3, #0]
 80140e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80140e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140ea:	e853 3f00 	ldrex	r3, [r3]
 80140ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80140f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80140f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	461a      	mov	r2, r3
 80140fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014100:	643b      	str	r3, [r7, #64]	; 0x40
 8014102:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014104:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014106:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014108:	e841 2300 	strex	r3, r2, [r1]
 801410c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801410e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014110:	2b00      	cmp	r3, #0
 8014112:	d1e6      	bne.n	80140e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	681b      	ldr	r3, [r3, #0]
 8014118:	3308      	adds	r3, #8
 801411a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801411c:	6a3b      	ldr	r3, [r7, #32]
 801411e:	e853 3f00 	ldrex	r3, [r3]
 8014122:	61fb      	str	r3, [r7, #28]
   return(result);
 8014124:	69fb      	ldr	r3, [r7, #28]
 8014126:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801412a:	f023 0301 	bic.w	r3, r3, #1
 801412e:	64bb      	str	r3, [r7, #72]	; 0x48
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	3308      	adds	r3, #8
 8014136:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014138:	62fa      	str	r2, [r7, #44]	; 0x2c
 801413a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801413c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801413e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014140:	e841 2300 	strex	r3, r2, [r1]
 8014144:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014148:	2b00      	cmp	r3, #0
 801414a:	d1e3      	bne.n	8014114 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014150:	2b01      	cmp	r3, #1
 8014152:	d118      	bne.n	8014186 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	681b      	ldr	r3, [r3, #0]
 8014158:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801415a:	68fb      	ldr	r3, [r7, #12]
 801415c:	e853 3f00 	ldrex	r3, [r3]
 8014160:	60bb      	str	r3, [r7, #8]
   return(result);
 8014162:	68bb      	ldr	r3, [r7, #8]
 8014164:	f023 0310 	bic.w	r3, r3, #16
 8014168:	647b      	str	r3, [r7, #68]	; 0x44
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	681b      	ldr	r3, [r3, #0]
 801416e:	461a      	mov	r2, r3
 8014170:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014172:	61bb      	str	r3, [r7, #24]
 8014174:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014176:	6979      	ldr	r1, [r7, #20]
 8014178:	69ba      	ldr	r2, [r7, #24]
 801417a:	e841 2300 	strex	r3, r2, [r1]
 801417e:	613b      	str	r3, [r7, #16]
   return(result);
 8014180:	693b      	ldr	r3, [r7, #16]
 8014182:	2b00      	cmp	r3, #0
 8014184:	d1e6      	bne.n	8014154 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	2220      	movs	r2, #32
 801418a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	2200      	movs	r2, #0
 8014192:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	2200      	movs	r2, #0
 8014198:	671a      	str	r2, [r3, #112]	; 0x70
}
 801419a:	bf00      	nop
 801419c:	3754      	adds	r7, #84	; 0x54
 801419e:	46bd      	mov	sp, r7
 80141a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141a4:	4770      	bx	lr

080141a6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80141a6:	b580      	push	{r7, lr}
 80141a8:	b09c      	sub	sp, #112	; 0x70
 80141aa:	af00      	add	r7, sp, #0
 80141ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80141b2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	681b      	ldr	r3, [r3, #0]
 80141b8:	681b      	ldr	r3, [r3, #0]
 80141ba:	f003 0320 	and.w	r3, r3, #32
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d171      	bne.n	80142a6 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80141c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80141c4:	2200      	movs	r2, #0
 80141c6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80141ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80141cc:	681b      	ldr	r3, [r3, #0]
 80141ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80141d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80141d2:	e853 3f00 	ldrex	r3, [r3]
 80141d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80141d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80141da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80141de:	66bb      	str	r3, [r7, #104]	; 0x68
 80141e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80141e2:	681b      	ldr	r3, [r3, #0]
 80141e4:	461a      	mov	r2, r3
 80141e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80141e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80141ea:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80141ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80141ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80141f0:	e841 2300 	strex	r3, r2, [r1]
 80141f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80141f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d1e6      	bne.n	80141ca <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80141fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80141fe:	681b      	ldr	r3, [r3, #0]
 8014200:	3308      	adds	r3, #8
 8014202:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014206:	e853 3f00 	ldrex	r3, [r3]
 801420a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801420c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801420e:	f023 0301 	bic.w	r3, r3, #1
 8014212:	667b      	str	r3, [r7, #100]	; 0x64
 8014214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014216:	681b      	ldr	r3, [r3, #0]
 8014218:	3308      	adds	r3, #8
 801421a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801421c:	647a      	str	r2, [r7, #68]	; 0x44
 801421e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014220:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014222:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014224:	e841 2300 	strex	r3, r2, [r1]
 8014228:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801422a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801422c:	2b00      	cmp	r3, #0
 801422e:	d1e5      	bne.n	80141fc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014232:	681b      	ldr	r3, [r3, #0]
 8014234:	3308      	adds	r3, #8
 8014236:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801423a:	e853 3f00 	ldrex	r3, [r3]
 801423e:	623b      	str	r3, [r7, #32]
   return(result);
 8014240:	6a3b      	ldr	r3, [r7, #32]
 8014242:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014246:	663b      	str	r3, [r7, #96]	; 0x60
 8014248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801424a:	681b      	ldr	r3, [r3, #0]
 801424c:	3308      	adds	r3, #8
 801424e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014250:	633a      	str	r2, [r7, #48]	; 0x30
 8014252:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014254:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014256:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014258:	e841 2300 	strex	r3, r2, [r1]
 801425c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801425e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014260:	2b00      	cmp	r3, #0
 8014262:	d1e5      	bne.n	8014230 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8014264:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014266:	2220      	movs	r2, #32
 8014268:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801426c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801426e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014270:	2b01      	cmp	r3, #1
 8014272:	d118      	bne.n	80142a6 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014274:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014276:	681b      	ldr	r3, [r3, #0]
 8014278:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801427a:	693b      	ldr	r3, [r7, #16]
 801427c:	e853 3f00 	ldrex	r3, [r3]
 8014280:	60fb      	str	r3, [r7, #12]
   return(result);
 8014282:	68fb      	ldr	r3, [r7, #12]
 8014284:	f023 0310 	bic.w	r3, r3, #16
 8014288:	65fb      	str	r3, [r7, #92]	; 0x5c
 801428a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801428c:	681b      	ldr	r3, [r3, #0]
 801428e:	461a      	mov	r2, r3
 8014290:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014292:	61fb      	str	r3, [r7, #28]
 8014294:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014296:	69b9      	ldr	r1, [r7, #24]
 8014298:	69fa      	ldr	r2, [r7, #28]
 801429a:	e841 2300 	strex	r3, r2, [r1]
 801429e:	617b      	str	r3, [r7, #20]
   return(result);
 80142a0:	697b      	ldr	r3, [r7, #20]
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d1e6      	bne.n	8014274 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80142a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80142a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80142aa:	2b01      	cmp	r3, #1
 80142ac:	d107      	bne.n	80142be <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80142ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80142b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80142b4:	4619      	mov	r1, r3
 80142b6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80142b8:	f7f5 ff6a 	bl	800a190 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80142bc:	e002      	b.n	80142c4 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80142be:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80142c0:	f7ff f952 	bl	8013568 <HAL_UART_RxCpltCallback>
}
 80142c4:	bf00      	nop
 80142c6:	3770      	adds	r7, #112	; 0x70
 80142c8:	46bd      	mov	sp, r7
 80142ca:	bd80      	pop	{r7, pc}

080142cc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80142cc:	b580      	push	{r7, lr}
 80142ce:	b084      	sub	sp, #16
 80142d0:	af00      	add	r7, sp, #0
 80142d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80142d8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80142da:	68fb      	ldr	r3, [r7, #12]
 80142dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80142de:	2b01      	cmp	r3, #1
 80142e0:	d109      	bne.n	80142f6 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80142e2:	68fb      	ldr	r3, [r7, #12]
 80142e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80142e8:	085b      	lsrs	r3, r3, #1
 80142ea:	b29b      	uxth	r3, r3
 80142ec:	4619      	mov	r1, r3
 80142ee:	68f8      	ldr	r0, [r7, #12]
 80142f0:	f7f5 ff4e 	bl	800a190 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80142f4:	e002      	b.n	80142fc <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80142f6:	68f8      	ldr	r0, [r7, #12]
 80142f8:	f7ff f940 	bl	801357c <HAL_UART_RxHalfCpltCallback>
}
 80142fc:	bf00      	nop
 80142fe:	3710      	adds	r7, #16
 8014300:	46bd      	mov	sp, r7
 8014302:	bd80      	pop	{r7, pc}

08014304 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8014304:	b580      	push	{r7, lr}
 8014306:	b086      	sub	sp, #24
 8014308:	af00      	add	r7, sp, #0
 801430a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014310:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8014312:	697b      	ldr	r3, [r7, #20]
 8014314:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014318:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801431a:	697b      	ldr	r3, [r7, #20]
 801431c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014320:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8014322:	697b      	ldr	r3, [r7, #20]
 8014324:	681b      	ldr	r3, [r3, #0]
 8014326:	689b      	ldr	r3, [r3, #8]
 8014328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801432c:	2b80      	cmp	r3, #128	; 0x80
 801432e:	d109      	bne.n	8014344 <UART_DMAError+0x40>
 8014330:	693b      	ldr	r3, [r7, #16]
 8014332:	2b21      	cmp	r3, #33	; 0x21
 8014334:	d106      	bne.n	8014344 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8014336:	697b      	ldr	r3, [r7, #20]
 8014338:	2200      	movs	r2, #0
 801433a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 801433e:	6978      	ldr	r0, [r7, #20]
 8014340:	f7ff fe8a 	bl	8014058 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8014344:	697b      	ldr	r3, [r7, #20]
 8014346:	681b      	ldr	r3, [r3, #0]
 8014348:	689b      	ldr	r3, [r3, #8]
 801434a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801434e:	2b40      	cmp	r3, #64	; 0x40
 8014350:	d109      	bne.n	8014366 <UART_DMAError+0x62>
 8014352:	68fb      	ldr	r3, [r7, #12]
 8014354:	2b22      	cmp	r3, #34	; 0x22
 8014356:	d106      	bne.n	8014366 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8014358:	697b      	ldr	r3, [r7, #20]
 801435a:	2200      	movs	r2, #0
 801435c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8014360:	6978      	ldr	r0, [r7, #20]
 8014362:	f7ff feba 	bl	80140da <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8014366:	697b      	ldr	r3, [r7, #20]
 8014368:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801436c:	f043 0210 	orr.w	r2, r3, #16
 8014370:	697b      	ldr	r3, [r7, #20]
 8014372:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8014376:	6978      	ldr	r0, [r7, #20]
 8014378:	f7ff f90a 	bl	8013590 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801437c:	bf00      	nop
 801437e:	3718      	adds	r7, #24
 8014380:	46bd      	mov	sp, r7
 8014382:	bd80      	pop	{r7, pc}

08014384 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8014384:	b580      	push	{r7, lr}
 8014386:	b084      	sub	sp, #16
 8014388:	af00      	add	r7, sp, #0
 801438a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014390:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8014392:	68fb      	ldr	r3, [r7, #12]
 8014394:	2200      	movs	r2, #0
 8014396:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801439a:	68fb      	ldr	r3, [r7, #12]
 801439c:	2200      	movs	r2, #0
 801439e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80143a2:	68f8      	ldr	r0, [r7, #12]
 80143a4:	f7ff f8f4 	bl	8013590 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80143a8:	bf00      	nop
 80143aa:	3710      	adds	r7, #16
 80143ac:	46bd      	mov	sp, r7
 80143ae:	bd80      	pop	{r7, pc}

080143b0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80143b0:	b580      	push	{r7, lr}
 80143b2:	b088      	sub	sp, #32
 80143b4:	af00      	add	r7, sp, #0
 80143b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80143be:	68fb      	ldr	r3, [r7, #12]
 80143c0:	e853 3f00 	ldrex	r3, [r3]
 80143c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80143c6:	68bb      	ldr	r3, [r7, #8]
 80143c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80143cc:	61fb      	str	r3, [r7, #28]
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	681b      	ldr	r3, [r3, #0]
 80143d2:	461a      	mov	r2, r3
 80143d4:	69fb      	ldr	r3, [r7, #28]
 80143d6:	61bb      	str	r3, [r7, #24]
 80143d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80143da:	6979      	ldr	r1, [r7, #20]
 80143dc:	69ba      	ldr	r2, [r7, #24]
 80143de:	e841 2300 	strex	r3, r2, [r1]
 80143e2:	613b      	str	r3, [r7, #16]
   return(result);
 80143e4:	693b      	ldr	r3, [r7, #16]
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d1e6      	bne.n	80143b8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	2220      	movs	r2, #32
 80143ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	2200      	movs	r2, #0
 80143f6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80143f8:	6878      	ldr	r0, [r7, #4]
 80143fa:	f7ff f8ab 	bl	8013554 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80143fe:	bf00      	nop
 8014400:	3720      	adds	r7, #32
 8014402:	46bd      	mov	sp, r7
 8014404:	bd80      	pop	{r7, pc}

08014406 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8014406:	b480      	push	{r7}
 8014408:	b083      	sub	sp, #12
 801440a:	af00      	add	r7, sp, #0
 801440c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801440e:	bf00      	nop
 8014410:	370c      	adds	r7, #12
 8014412:	46bd      	mov	sp, r7
 8014414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014418:	4770      	bx	lr

0801441a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801441a:	b480      	push	{r7}
 801441c:	b083      	sub	sp, #12
 801441e:	af00      	add	r7, sp, #0
 8014420:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8014422:	bf00      	nop
 8014424:	370c      	adds	r7, #12
 8014426:	46bd      	mov	sp, r7
 8014428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801442c:	4770      	bx	lr

0801442e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801442e:	b480      	push	{r7}
 8014430:	b083      	sub	sp, #12
 8014432:	af00      	add	r7, sp, #0
 8014434:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8014436:	bf00      	nop
 8014438:	370c      	adds	r7, #12
 801443a:	46bd      	mov	sp, r7
 801443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014440:	4770      	bx	lr

08014442 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8014442:	b480      	push	{r7}
 8014444:	b085      	sub	sp, #20
 8014446:	af00      	add	r7, sp, #0
 8014448:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8014450:	2b01      	cmp	r3, #1
 8014452:	d101      	bne.n	8014458 <HAL_UARTEx_DisableFifoMode+0x16>
 8014454:	2302      	movs	r3, #2
 8014456:	e027      	b.n	80144a8 <HAL_UARTEx_DisableFifoMode+0x66>
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	2201      	movs	r2, #1
 801445c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	2224      	movs	r2, #36	; 0x24
 8014464:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	681b      	ldr	r3, [r3, #0]
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	681a      	ldr	r2, [r3, #0]
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	f022 0201 	bic.w	r2, r2, #1
 801447e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8014480:	68fb      	ldr	r3, [r7, #12]
 8014482:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8014486:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	2200      	movs	r2, #0
 801448c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	681b      	ldr	r3, [r3, #0]
 8014492:	68fa      	ldr	r2, [r7, #12]
 8014494:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	2220      	movs	r2, #32
 801449a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	2200      	movs	r2, #0
 80144a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80144a6:	2300      	movs	r3, #0
}
 80144a8:	4618      	mov	r0, r3
 80144aa:	3714      	adds	r7, #20
 80144ac:	46bd      	mov	sp, r7
 80144ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144b2:	4770      	bx	lr

080144b4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80144b4:	b580      	push	{r7, lr}
 80144b6:	b084      	sub	sp, #16
 80144b8:	af00      	add	r7, sp, #0
 80144ba:	6078      	str	r0, [r7, #4]
 80144bc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80144c4:	2b01      	cmp	r3, #1
 80144c6:	d101      	bne.n	80144cc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80144c8:	2302      	movs	r3, #2
 80144ca:	e02d      	b.n	8014528 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	2201      	movs	r2, #1
 80144d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	2224      	movs	r2, #36	; 0x24
 80144d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	681b      	ldr	r3, [r3, #0]
 80144e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	681b      	ldr	r3, [r3, #0]
 80144e8:	681a      	ldr	r2, [r3, #0]
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	681b      	ldr	r3, [r3, #0]
 80144ee:	f022 0201 	bic.w	r2, r2, #1
 80144f2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	681b      	ldr	r3, [r3, #0]
 80144f8:	689b      	ldr	r3, [r3, #8]
 80144fa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	681b      	ldr	r3, [r3, #0]
 8014502:	683a      	ldr	r2, [r7, #0]
 8014504:	430a      	orrs	r2, r1
 8014506:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8014508:	6878      	ldr	r0, [r7, #4]
 801450a:	f000 f8ab 	bl	8014664 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	68fa      	ldr	r2, [r7, #12]
 8014514:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	2220      	movs	r2, #32
 801451a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	2200      	movs	r2, #0
 8014522:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8014526:	2300      	movs	r3, #0
}
 8014528:	4618      	mov	r0, r3
 801452a:	3710      	adds	r7, #16
 801452c:	46bd      	mov	sp, r7
 801452e:	bd80      	pop	{r7, pc}

08014530 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8014530:	b580      	push	{r7, lr}
 8014532:	b084      	sub	sp, #16
 8014534:	af00      	add	r7, sp, #0
 8014536:	6078      	str	r0, [r7, #4]
 8014538:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8014540:	2b01      	cmp	r3, #1
 8014542:	d101      	bne.n	8014548 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8014544:	2302      	movs	r3, #2
 8014546:	e02d      	b.n	80145a4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	2201      	movs	r2, #1
 801454c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	2224      	movs	r2, #36	; 0x24
 8014554:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	681b      	ldr	r3, [r3, #0]
 801455c:	681b      	ldr	r3, [r3, #0]
 801455e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	681b      	ldr	r3, [r3, #0]
 8014564:	681a      	ldr	r2, [r3, #0]
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	f022 0201 	bic.w	r2, r2, #1
 801456e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	681b      	ldr	r3, [r3, #0]
 8014574:	689b      	ldr	r3, [r3, #8]
 8014576:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	681b      	ldr	r3, [r3, #0]
 801457e:	683a      	ldr	r2, [r7, #0]
 8014580:	430a      	orrs	r2, r1
 8014582:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8014584:	6878      	ldr	r0, [r7, #4]
 8014586:	f000 f86d 	bl	8014664 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	681b      	ldr	r3, [r3, #0]
 801458e:	68fa      	ldr	r2, [r7, #12]
 8014590:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	2220      	movs	r2, #32
 8014596:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	2200      	movs	r2, #0
 801459e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80145a2:	2300      	movs	r3, #0
}
 80145a4:	4618      	mov	r0, r3
 80145a6:	3710      	adds	r7, #16
 80145a8:	46bd      	mov	sp, r7
 80145aa:	bd80      	pop	{r7, pc}

080145ac <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80145ac:	b580      	push	{r7, lr}
 80145ae:	b08c      	sub	sp, #48	; 0x30
 80145b0:	af00      	add	r7, sp, #0
 80145b2:	60f8      	str	r0, [r7, #12]
 80145b4:	60b9      	str	r1, [r7, #8]
 80145b6:	4613      	mov	r3, r2
 80145b8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80145ba:	68fb      	ldr	r3, [r7, #12]
 80145bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80145c0:	2b20      	cmp	r3, #32
 80145c2:	d14a      	bne.n	801465a <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80145c4:	68bb      	ldr	r3, [r7, #8]
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	d002      	beq.n	80145d0 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80145ca:	88fb      	ldrh	r3, [r7, #6]
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	d101      	bne.n	80145d4 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80145d0:	2301      	movs	r3, #1
 80145d2:	e043      	b.n	801465c <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80145da:	2b01      	cmp	r3, #1
 80145dc:	d101      	bne.n	80145e2 <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 80145de:	2302      	movs	r3, #2
 80145e0:	e03c      	b.n	801465c <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 80145e2:	68fb      	ldr	r3, [r7, #12]
 80145e4:	2201      	movs	r2, #1
 80145e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80145ea:	68fb      	ldr	r3, [r7, #12]
 80145ec:	2201      	movs	r2, #1
 80145ee:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80145f0:	88fb      	ldrh	r3, [r7, #6]
 80145f2:	461a      	mov	r2, r3
 80145f4:	68b9      	ldr	r1, [r7, #8]
 80145f6:	68f8      	ldr	r0, [r7, #12]
 80145f8:	f7ff fc86 	bl	8013f08 <UART_Start_Receive_DMA>
 80145fc:	4603      	mov	r3, r0
 80145fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8014602:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014606:	2b00      	cmp	r3, #0
 8014608:	d124      	bne.n	8014654 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801460a:	68fb      	ldr	r3, [r7, #12]
 801460c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801460e:	2b01      	cmp	r3, #1
 8014610:	d11d      	bne.n	801464e <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8014612:	68fb      	ldr	r3, [r7, #12]
 8014614:	681b      	ldr	r3, [r3, #0]
 8014616:	2210      	movs	r2, #16
 8014618:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801461a:	68fb      	ldr	r3, [r7, #12]
 801461c:	681b      	ldr	r3, [r3, #0]
 801461e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014620:	69bb      	ldr	r3, [r7, #24]
 8014622:	e853 3f00 	ldrex	r3, [r3]
 8014626:	617b      	str	r3, [r7, #20]
   return(result);
 8014628:	697b      	ldr	r3, [r7, #20]
 801462a:	f043 0310 	orr.w	r3, r3, #16
 801462e:	62bb      	str	r3, [r7, #40]	; 0x28
 8014630:	68fb      	ldr	r3, [r7, #12]
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	461a      	mov	r2, r3
 8014636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014638:	627b      	str	r3, [r7, #36]	; 0x24
 801463a:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801463c:	6a39      	ldr	r1, [r7, #32]
 801463e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014640:	e841 2300 	strex	r3, r2, [r1]
 8014644:	61fb      	str	r3, [r7, #28]
   return(result);
 8014646:	69fb      	ldr	r3, [r7, #28]
 8014648:	2b00      	cmp	r3, #0
 801464a:	d1e6      	bne.n	801461a <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 801464c:	e002      	b.n	8014654 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 801464e:	2301      	movs	r3, #1
 8014650:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8014654:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014658:	e000      	b.n	801465c <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801465a:	2302      	movs	r3, #2
  }
}
 801465c:	4618      	mov	r0, r3
 801465e:	3730      	adds	r7, #48	; 0x30
 8014660:	46bd      	mov	sp, r7
 8014662:	bd80      	pop	{r7, pc}

08014664 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8014664:	b480      	push	{r7}
 8014666:	b085      	sub	sp, #20
 8014668:	af00      	add	r7, sp, #0
 801466a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014670:	2b00      	cmp	r3, #0
 8014672:	d108      	bne.n	8014686 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	2201      	movs	r2, #1
 8014678:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	2201      	movs	r2, #1
 8014680:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8014684:	e031      	b.n	80146ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8014686:	2308      	movs	r3, #8
 8014688:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801468a:	2308      	movs	r3, #8
 801468c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	689b      	ldr	r3, [r3, #8]
 8014694:	0e5b      	lsrs	r3, r3, #25
 8014696:	b2db      	uxtb	r3, r3
 8014698:	f003 0307 	and.w	r3, r3, #7
 801469c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	689b      	ldr	r3, [r3, #8]
 80146a4:	0f5b      	lsrs	r3, r3, #29
 80146a6:	b2db      	uxtb	r3, r3
 80146a8:	f003 0307 	and.w	r3, r3, #7
 80146ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80146ae:	7bbb      	ldrb	r3, [r7, #14]
 80146b0:	7b3a      	ldrb	r2, [r7, #12]
 80146b2:	4911      	ldr	r1, [pc, #68]	; (80146f8 <UARTEx_SetNbDataToProcess+0x94>)
 80146b4:	5c8a      	ldrb	r2, [r1, r2]
 80146b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80146ba:	7b3a      	ldrb	r2, [r7, #12]
 80146bc:	490f      	ldr	r1, [pc, #60]	; (80146fc <UARTEx_SetNbDataToProcess+0x98>)
 80146be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80146c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80146c4:	b29a      	uxth	r2, r3
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80146cc:	7bfb      	ldrb	r3, [r7, #15]
 80146ce:	7b7a      	ldrb	r2, [r7, #13]
 80146d0:	4909      	ldr	r1, [pc, #36]	; (80146f8 <UARTEx_SetNbDataToProcess+0x94>)
 80146d2:	5c8a      	ldrb	r2, [r1, r2]
 80146d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80146d8:	7b7a      	ldrb	r2, [r7, #13]
 80146da:	4908      	ldr	r1, [pc, #32]	; (80146fc <UARTEx_SetNbDataToProcess+0x98>)
 80146dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80146de:	fb93 f3f2 	sdiv	r3, r3, r2
 80146e2:	b29a      	uxth	r2, r3
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80146ea:	bf00      	nop
 80146ec:	3714      	adds	r7, #20
 80146ee:	46bd      	mov	sp, r7
 80146f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146f4:	4770      	bx	lr
 80146f6:	bf00      	nop
 80146f8:	08024388 	.word	0x08024388
 80146fc:	08024390 	.word	0x08024390

08014700 <__NVIC_SetPriority>:
{
 8014700:	b480      	push	{r7}
 8014702:	b083      	sub	sp, #12
 8014704:	af00      	add	r7, sp, #0
 8014706:	4603      	mov	r3, r0
 8014708:	6039      	str	r1, [r7, #0]
 801470a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801470c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014710:	2b00      	cmp	r3, #0
 8014712:	db0a      	blt.n	801472a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014714:	683b      	ldr	r3, [r7, #0]
 8014716:	b2da      	uxtb	r2, r3
 8014718:	490c      	ldr	r1, [pc, #48]	; (801474c <__NVIC_SetPriority+0x4c>)
 801471a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801471e:	0112      	lsls	r2, r2, #4
 8014720:	b2d2      	uxtb	r2, r2
 8014722:	440b      	add	r3, r1
 8014724:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8014728:	e00a      	b.n	8014740 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801472a:	683b      	ldr	r3, [r7, #0]
 801472c:	b2da      	uxtb	r2, r3
 801472e:	4908      	ldr	r1, [pc, #32]	; (8014750 <__NVIC_SetPriority+0x50>)
 8014730:	79fb      	ldrb	r3, [r7, #7]
 8014732:	f003 030f 	and.w	r3, r3, #15
 8014736:	3b04      	subs	r3, #4
 8014738:	0112      	lsls	r2, r2, #4
 801473a:	b2d2      	uxtb	r2, r2
 801473c:	440b      	add	r3, r1
 801473e:	761a      	strb	r2, [r3, #24]
}
 8014740:	bf00      	nop
 8014742:	370c      	adds	r7, #12
 8014744:	46bd      	mov	sp, r7
 8014746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801474a:	4770      	bx	lr
 801474c:	e000e100 	.word	0xe000e100
 8014750:	e000ed00 	.word	0xe000ed00

08014754 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8014754:	b580      	push	{r7, lr}
 8014756:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8014758:	4b05      	ldr	r3, [pc, #20]	; (8014770 <SysTick_Handler+0x1c>)
 801475a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 801475c:	f002 fe98 	bl	8017490 <xTaskGetSchedulerState>
 8014760:	4603      	mov	r3, r0
 8014762:	2b01      	cmp	r3, #1
 8014764:	d001      	beq.n	801476a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8014766:	f003 fe6f 	bl	8018448 <xPortSysTickHandler>
  }
}
 801476a:	bf00      	nop
 801476c:	bd80      	pop	{r7, pc}
 801476e:	bf00      	nop
 8014770:	e000e010 	.word	0xe000e010

08014774 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8014774:	b580      	push	{r7, lr}
 8014776:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8014778:	2100      	movs	r1, #0
 801477a:	f06f 0004 	mvn.w	r0, #4
 801477e:	f7ff ffbf 	bl	8014700 <__NVIC_SetPriority>
#endif
}
 8014782:	bf00      	nop
 8014784:	bd80      	pop	{r7, pc}
	...

08014788 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8014788:	b480      	push	{r7}
 801478a:	b083      	sub	sp, #12
 801478c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801478e:	f3ef 8305 	mrs	r3, IPSR
 8014792:	603b      	str	r3, [r7, #0]
  return(result);
 8014794:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014796:	2b00      	cmp	r3, #0
 8014798:	d003      	beq.n	80147a2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801479a:	f06f 0305 	mvn.w	r3, #5
 801479e:	607b      	str	r3, [r7, #4]
 80147a0:	e00c      	b.n	80147bc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80147a2:	4b0a      	ldr	r3, [pc, #40]	; (80147cc <osKernelInitialize+0x44>)
 80147a4:	681b      	ldr	r3, [r3, #0]
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	d105      	bne.n	80147b6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80147aa:	4b08      	ldr	r3, [pc, #32]	; (80147cc <osKernelInitialize+0x44>)
 80147ac:	2201      	movs	r2, #1
 80147ae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80147b0:	2300      	movs	r3, #0
 80147b2:	607b      	str	r3, [r7, #4]
 80147b4:	e002      	b.n	80147bc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80147b6:	f04f 33ff 	mov.w	r3, #4294967295
 80147ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80147bc:	687b      	ldr	r3, [r7, #4]
}
 80147be:	4618      	mov	r0, r3
 80147c0:	370c      	adds	r7, #12
 80147c2:	46bd      	mov	sp, r7
 80147c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147c8:	4770      	bx	lr
 80147ca:	bf00      	nop
 80147cc:	20004888 	.word	0x20004888

080147d0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80147d0:	b580      	push	{r7, lr}
 80147d2:	b082      	sub	sp, #8
 80147d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80147d6:	f3ef 8305 	mrs	r3, IPSR
 80147da:	603b      	str	r3, [r7, #0]
  return(result);
 80147dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80147de:	2b00      	cmp	r3, #0
 80147e0:	d003      	beq.n	80147ea <osKernelStart+0x1a>
    stat = osErrorISR;
 80147e2:	f06f 0305 	mvn.w	r3, #5
 80147e6:	607b      	str	r3, [r7, #4]
 80147e8:	e010      	b.n	801480c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80147ea:	4b0b      	ldr	r3, [pc, #44]	; (8014818 <osKernelStart+0x48>)
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	2b01      	cmp	r3, #1
 80147f0:	d109      	bne.n	8014806 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80147f2:	f7ff ffbf 	bl	8014774 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80147f6:	4b08      	ldr	r3, [pc, #32]	; (8014818 <osKernelStart+0x48>)
 80147f8:	2202      	movs	r2, #2
 80147fa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80147fc:	f002 f952 	bl	8016aa4 <vTaskStartScheduler>
      stat = osOK;
 8014800:	2300      	movs	r3, #0
 8014802:	607b      	str	r3, [r7, #4]
 8014804:	e002      	b.n	801480c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8014806:	f04f 33ff 	mov.w	r3, #4294967295
 801480a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801480c:	687b      	ldr	r3, [r7, #4]
}
 801480e:	4618      	mov	r0, r3
 8014810:	3708      	adds	r7, #8
 8014812:	46bd      	mov	sp, r7
 8014814:	bd80      	pop	{r7, pc}
 8014816:	bf00      	nop
 8014818:	20004888 	.word	0x20004888

0801481c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801481c:	b580      	push	{r7, lr}
 801481e:	b08e      	sub	sp, #56	; 0x38
 8014820:	af04      	add	r7, sp, #16
 8014822:	60f8      	str	r0, [r7, #12]
 8014824:	60b9      	str	r1, [r7, #8]
 8014826:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8014828:	2300      	movs	r3, #0
 801482a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801482c:	f3ef 8305 	mrs	r3, IPSR
 8014830:	617b      	str	r3, [r7, #20]
  return(result);
 8014832:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8014834:	2b00      	cmp	r3, #0
 8014836:	d17e      	bne.n	8014936 <osThreadNew+0x11a>
 8014838:	68fb      	ldr	r3, [r7, #12]
 801483a:	2b00      	cmp	r3, #0
 801483c:	d07b      	beq.n	8014936 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801483e:	2380      	movs	r3, #128	; 0x80
 8014840:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8014842:	2318      	movs	r3, #24
 8014844:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8014846:	2300      	movs	r3, #0
 8014848:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801484a:	f04f 33ff 	mov.w	r3, #4294967295
 801484e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	2b00      	cmp	r3, #0
 8014854:	d045      	beq.n	80148e2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	681b      	ldr	r3, [r3, #0]
 801485a:	2b00      	cmp	r3, #0
 801485c:	d002      	beq.n	8014864 <osThreadNew+0x48>
        name = attr->name;
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	681b      	ldr	r3, [r3, #0]
 8014862:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	699b      	ldr	r3, [r3, #24]
 8014868:	2b00      	cmp	r3, #0
 801486a:	d002      	beq.n	8014872 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	699b      	ldr	r3, [r3, #24]
 8014870:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8014872:	69fb      	ldr	r3, [r7, #28]
 8014874:	2b00      	cmp	r3, #0
 8014876:	d008      	beq.n	801488a <osThreadNew+0x6e>
 8014878:	69fb      	ldr	r3, [r7, #28]
 801487a:	2b38      	cmp	r3, #56	; 0x38
 801487c:	d805      	bhi.n	801488a <osThreadNew+0x6e>
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	685b      	ldr	r3, [r3, #4]
 8014882:	f003 0301 	and.w	r3, r3, #1
 8014886:	2b00      	cmp	r3, #0
 8014888:	d001      	beq.n	801488e <osThreadNew+0x72>
        return (NULL);
 801488a:	2300      	movs	r3, #0
 801488c:	e054      	b.n	8014938 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	695b      	ldr	r3, [r3, #20]
 8014892:	2b00      	cmp	r3, #0
 8014894:	d003      	beq.n	801489e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	695b      	ldr	r3, [r3, #20]
 801489a:	089b      	lsrs	r3, r3, #2
 801489c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	689b      	ldr	r3, [r3, #8]
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	d00e      	beq.n	80148c4 <osThreadNew+0xa8>
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	68db      	ldr	r3, [r3, #12]
 80148aa:	2b6b      	cmp	r3, #107	; 0x6b
 80148ac:	d90a      	bls.n	80148c4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d006      	beq.n	80148c4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	695b      	ldr	r3, [r3, #20]
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d002      	beq.n	80148c4 <osThreadNew+0xa8>
        mem = 1;
 80148be:	2301      	movs	r3, #1
 80148c0:	61bb      	str	r3, [r7, #24]
 80148c2:	e010      	b.n	80148e6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	689b      	ldr	r3, [r3, #8]
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d10c      	bne.n	80148e6 <osThreadNew+0xca>
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	68db      	ldr	r3, [r3, #12]
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	d108      	bne.n	80148e6 <osThreadNew+0xca>
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	691b      	ldr	r3, [r3, #16]
 80148d8:	2b00      	cmp	r3, #0
 80148da:	d104      	bne.n	80148e6 <osThreadNew+0xca>
          mem = 0;
 80148dc:	2300      	movs	r3, #0
 80148de:	61bb      	str	r3, [r7, #24]
 80148e0:	e001      	b.n	80148e6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80148e2:	2300      	movs	r3, #0
 80148e4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80148e6:	69bb      	ldr	r3, [r7, #24]
 80148e8:	2b01      	cmp	r3, #1
 80148ea:	d110      	bne.n	801490e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80148f0:	687a      	ldr	r2, [r7, #4]
 80148f2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80148f4:	9202      	str	r2, [sp, #8]
 80148f6:	9301      	str	r3, [sp, #4]
 80148f8:	69fb      	ldr	r3, [r7, #28]
 80148fa:	9300      	str	r3, [sp, #0]
 80148fc:	68bb      	ldr	r3, [r7, #8]
 80148fe:	6a3a      	ldr	r2, [r7, #32]
 8014900:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014902:	68f8      	ldr	r0, [r7, #12]
 8014904:	f001 fef8 	bl	80166f8 <xTaskCreateStatic>
 8014908:	4603      	mov	r3, r0
 801490a:	613b      	str	r3, [r7, #16]
 801490c:	e013      	b.n	8014936 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801490e:	69bb      	ldr	r3, [r7, #24]
 8014910:	2b00      	cmp	r3, #0
 8014912:	d110      	bne.n	8014936 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8014914:	6a3b      	ldr	r3, [r7, #32]
 8014916:	b29a      	uxth	r2, r3
 8014918:	f107 0310 	add.w	r3, r7, #16
 801491c:	9301      	str	r3, [sp, #4]
 801491e:	69fb      	ldr	r3, [r7, #28]
 8014920:	9300      	str	r3, [sp, #0]
 8014922:	68bb      	ldr	r3, [r7, #8]
 8014924:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014926:	68f8      	ldr	r0, [r7, #12]
 8014928:	f001 ff43 	bl	80167b2 <xTaskCreate>
 801492c:	4603      	mov	r3, r0
 801492e:	2b01      	cmp	r3, #1
 8014930:	d001      	beq.n	8014936 <osThreadNew+0x11a>
            hTask = NULL;
 8014932:	2300      	movs	r3, #0
 8014934:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8014936:	693b      	ldr	r3, [r7, #16]
}
 8014938:	4618      	mov	r0, r3
 801493a:	3728      	adds	r7, #40	; 0x28
 801493c:	46bd      	mov	sp, r7
 801493e:	bd80      	pop	{r7, pc}

08014940 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8014940:	b580      	push	{r7, lr}
 8014942:	b084      	sub	sp, #16
 8014944:	af00      	add	r7, sp, #0
 8014946:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014948:	f3ef 8305 	mrs	r3, IPSR
 801494c:	60bb      	str	r3, [r7, #8]
  return(result);
 801494e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014950:	2b00      	cmp	r3, #0
 8014952:	d003      	beq.n	801495c <osDelay+0x1c>
    stat = osErrorISR;
 8014954:	f06f 0305 	mvn.w	r3, #5
 8014958:	60fb      	str	r3, [r7, #12]
 801495a:	e007      	b.n	801496c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 801495c:	2300      	movs	r3, #0
 801495e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	2b00      	cmp	r3, #0
 8014964:	d002      	beq.n	801496c <osDelay+0x2c>
      vTaskDelay(ticks);
 8014966:	6878      	ldr	r0, [r7, #4]
 8014968:	f002 f868 	bl	8016a3c <vTaskDelay>
    }
  }

  return (stat);
 801496c:	68fb      	ldr	r3, [r7, #12]
}
 801496e:	4618      	mov	r0, r3
 8014970:	3710      	adds	r7, #16
 8014972:	46bd      	mov	sp, r7
 8014974:	bd80      	pop	{r7, pc}

08014976 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8014976:	b580      	push	{r7, lr}
 8014978:	b084      	sub	sp, #16
 801497a:	af00      	add	r7, sp, #0
 801497c:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 801497e:	6878      	ldr	r0, [r7, #4]
 8014980:	f003 fb64 	bl	801804c <pvTimerGetTimerID>
 8014984:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8014986:	68fb      	ldr	r3, [r7, #12]
 8014988:	2b00      	cmp	r3, #0
 801498a:	d005      	beq.n	8014998 <TimerCallback+0x22>
    callb->func (callb->arg);
 801498c:	68fb      	ldr	r3, [r7, #12]
 801498e:	681b      	ldr	r3, [r3, #0]
 8014990:	68fa      	ldr	r2, [r7, #12]
 8014992:	6852      	ldr	r2, [r2, #4]
 8014994:	4610      	mov	r0, r2
 8014996:	4798      	blx	r3
  }
}
 8014998:	bf00      	nop
 801499a:	3710      	adds	r7, #16
 801499c:	46bd      	mov	sp, r7
 801499e:	bd80      	pop	{r7, pc}

080149a0 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80149a0:	b580      	push	{r7, lr}
 80149a2:	b08c      	sub	sp, #48	; 0x30
 80149a4:	af02      	add	r7, sp, #8
 80149a6:	60f8      	str	r0, [r7, #12]
 80149a8:	607a      	str	r2, [r7, #4]
 80149aa:	603b      	str	r3, [r7, #0]
 80149ac:	460b      	mov	r3, r1
 80149ae:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80149b0:	2300      	movs	r3, #0
 80149b2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80149b4:	f3ef 8305 	mrs	r3, IPSR
 80149b8:	613b      	str	r3, [r7, #16]
  return(result);
 80149ba:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d163      	bne.n	8014a88 <osTimerNew+0xe8>
 80149c0:	68fb      	ldr	r3, [r7, #12]
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d060      	beq.n	8014a88 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80149c6:	2008      	movs	r0, #8
 80149c8:	f003 fdce 	bl	8018568 <pvPortMalloc>
 80149cc:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 80149ce:	697b      	ldr	r3, [r7, #20]
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d059      	beq.n	8014a88 <osTimerNew+0xe8>
      callb->func = func;
 80149d4:	697b      	ldr	r3, [r7, #20]
 80149d6:	68fa      	ldr	r2, [r7, #12]
 80149d8:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 80149da:	697b      	ldr	r3, [r7, #20]
 80149dc:	687a      	ldr	r2, [r7, #4]
 80149de:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 80149e0:	7afb      	ldrb	r3, [r7, #11]
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d102      	bne.n	80149ec <osTimerNew+0x4c>
        reload = pdFALSE;
 80149e6:	2300      	movs	r3, #0
 80149e8:	61fb      	str	r3, [r7, #28]
 80149ea:	e001      	b.n	80149f0 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 80149ec:	2301      	movs	r3, #1
 80149ee:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 80149f0:	f04f 33ff 	mov.w	r3, #4294967295
 80149f4:	61bb      	str	r3, [r7, #24]
      name = NULL;
 80149f6:	2300      	movs	r3, #0
 80149f8:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 80149fa:	683b      	ldr	r3, [r7, #0]
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d01c      	beq.n	8014a3a <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8014a00:	683b      	ldr	r3, [r7, #0]
 8014a02:	681b      	ldr	r3, [r3, #0]
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d002      	beq.n	8014a0e <osTimerNew+0x6e>
          name = attr->name;
 8014a08:	683b      	ldr	r3, [r7, #0]
 8014a0a:	681b      	ldr	r3, [r3, #0]
 8014a0c:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8014a0e:	683b      	ldr	r3, [r7, #0]
 8014a10:	689b      	ldr	r3, [r3, #8]
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d006      	beq.n	8014a24 <osTimerNew+0x84>
 8014a16:	683b      	ldr	r3, [r7, #0]
 8014a18:	68db      	ldr	r3, [r3, #12]
 8014a1a:	2b2b      	cmp	r3, #43	; 0x2b
 8014a1c:	d902      	bls.n	8014a24 <osTimerNew+0x84>
          mem = 1;
 8014a1e:	2301      	movs	r3, #1
 8014a20:	61bb      	str	r3, [r7, #24]
 8014a22:	e00c      	b.n	8014a3e <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8014a24:	683b      	ldr	r3, [r7, #0]
 8014a26:	689b      	ldr	r3, [r3, #8]
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d108      	bne.n	8014a3e <osTimerNew+0x9e>
 8014a2c:	683b      	ldr	r3, [r7, #0]
 8014a2e:	68db      	ldr	r3, [r3, #12]
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	d104      	bne.n	8014a3e <osTimerNew+0x9e>
            mem = 0;
 8014a34:	2300      	movs	r3, #0
 8014a36:	61bb      	str	r3, [r7, #24]
 8014a38:	e001      	b.n	8014a3e <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8014a3a:	2300      	movs	r3, #0
 8014a3c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8014a3e:	69bb      	ldr	r3, [r7, #24]
 8014a40:	2b01      	cmp	r3, #1
 8014a42:	d10c      	bne.n	8014a5e <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8014a44:	683b      	ldr	r3, [r7, #0]
 8014a46:	689b      	ldr	r3, [r3, #8]
 8014a48:	9301      	str	r3, [sp, #4]
 8014a4a:	4b12      	ldr	r3, [pc, #72]	; (8014a94 <osTimerNew+0xf4>)
 8014a4c:	9300      	str	r3, [sp, #0]
 8014a4e:	697b      	ldr	r3, [r7, #20]
 8014a50:	69fa      	ldr	r2, [r7, #28]
 8014a52:	2101      	movs	r1, #1
 8014a54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014a56:	f002 ff7a 	bl	801794e <xTimerCreateStatic>
 8014a5a:	6238      	str	r0, [r7, #32]
 8014a5c:	e00b      	b.n	8014a76 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8014a5e:	69bb      	ldr	r3, [r7, #24]
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	d108      	bne.n	8014a76 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8014a64:	4b0b      	ldr	r3, [pc, #44]	; (8014a94 <osTimerNew+0xf4>)
 8014a66:	9300      	str	r3, [sp, #0]
 8014a68:	697b      	ldr	r3, [r7, #20]
 8014a6a:	69fa      	ldr	r2, [r7, #28]
 8014a6c:	2101      	movs	r1, #1
 8014a6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014a70:	f002 ff4c 	bl	801790c <xTimerCreate>
 8014a74:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8014a76:	6a3b      	ldr	r3, [r7, #32]
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	d105      	bne.n	8014a88 <osTimerNew+0xe8>
 8014a7c:	697b      	ldr	r3, [r7, #20]
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d002      	beq.n	8014a88 <osTimerNew+0xe8>
        vPortFree (callb);
 8014a82:	6978      	ldr	r0, [r7, #20]
 8014a84:	f003 fe3c 	bl	8018700 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8014a88:	6a3b      	ldr	r3, [r7, #32]
}
 8014a8a:	4618      	mov	r0, r3
 8014a8c:	3728      	adds	r7, #40	; 0x28
 8014a8e:	46bd      	mov	sp, r7
 8014a90:	bd80      	pop	{r7, pc}
 8014a92:	bf00      	nop
 8014a94:	08014977 	.word	0x08014977

08014a98 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8014a98:	b580      	push	{r7, lr}
 8014a9a:	b086      	sub	sp, #24
 8014a9c:	af00      	add	r7, sp, #0
 8014a9e:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8014aa0:	2300      	movs	r3, #0
 8014aa2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014aa4:	f3ef 8305 	mrs	r3, IPSR
 8014aa8:	60fb      	str	r3, [r7, #12]
  return(result);
 8014aaa:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	d12d      	bne.n	8014b0c <osEventFlagsNew+0x74>
    mem = -1;
 8014ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8014ab4:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	d015      	beq.n	8014ae8 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	689b      	ldr	r3, [r3, #8]
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d006      	beq.n	8014ad2 <osEventFlagsNew+0x3a>
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	68db      	ldr	r3, [r3, #12]
 8014ac8:	2b1f      	cmp	r3, #31
 8014aca:	d902      	bls.n	8014ad2 <osEventFlagsNew+0x3a>
        mem = 1;
 8014acc:	2301      	movs	r3, #1
 8014ace:	613b      	str	r3, [r7, #16]
 8014ad0:	e00c      	b.n	8014aec <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	689b      	ldr	r3, [r3, #8]
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d108      	bne.n	8014aec <osEventFlagsNew+0x54>
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	68db      	ldr	r3, [r3, #12]
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d104      	bne.n	8014aec <osEventFlagsNew+0x54>
          mem = 0;
 8014ae2:	2300      	movs	r3, #0
 8014ae4:	613b      	str	r3, [r7, #16]
 8014ae6:	e001      	b.n	8014aec <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8014ae8:	2300      	movs	r3, #0
 8014aea:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8014aec:	693b      	ldr	r3, [r7, #16]
 8014aee:	2b01      	cmp	r3, #1
 8014af0:	d106      	bne.n	8014b00 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	689b      	ldr	r3, [r3, #8]
 8014af6:	4618      	mov	r0, r3
 8014af8:	f000 fb5e 	bl	80151b8 <xEventGroupCreateStatic>
 8014afc:	6178      	str	r0, [r7, #20]
 8014afe:	e005      	b.n	8014b0c <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8014b00:	693b      	ldr	r3, [r7, #16]
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d102      	bne.n	8014b0c <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8014b06:	f000 fb8e 	bl	8015226 <xEventGroupCreate>
 8014b0a:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8014b0c:	697b      	ldr	r3, [r7, #20]
}
 8014b0e:	4618      	mov	r0, r3
 8014b10:	3718      	adds	r7, #24
 8014b12:	46bd      	mov	sp, r7
 8014b14:	bd80      	pop	{r7, pc}
	...

08014b18 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8014b18:	b580      	push	{r7, lr}
 8014b1a:	b086      	sub	sp, #24
 8014b1c:	af00      	add	r7, sp, #0
 8014b1e:	6078      	str	r0, [r7, #4]
 8014b20:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8014b26:	693b      	ldr	r3, [r7, #16]
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	d004      	beq.n	8014b36 <osEventFlagsSet+0x1e>
 8014b2c:	683b      	ldr	r3, [r7, #0]
 8014b2e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d003      	beq.n	8014b3e <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8014b36:	f06f 0303 	mvn.w	r3, #3
 8014b3a:	617b      	str	r3, [r7, #20]
 8014b3c:	e028      	b.n	8014b90 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014b3e:	f3ef 8305 	mrs	r3, IPSR
 8014b42:	60fb      	str	r3, [r7, #12]
  return(result);
 8014b44:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d01d      	beq.n	8014b86 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8014b4a:	2300      	movs	r3, #0
 8014b4c:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8014b4e:	f107 0308 	add.w	r3, r7, #8
 8014b52:	461a      	mov	r2, r3
 8014b54:	6839      	ldr	r1, [r7, #0]
 8014b56:	6938      	ldr	r0, [r7, #16]
 8014b58:	f000 fd86 	bl	8015668 <xEventGroupSetBitsFromISR>
 8014b5c:	4603      	mov	r3, r0
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	d103      	bne.n	8014b6a <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8014b62:	f06f 0302 	mvn.w	r3, #2
 8014b66:	617b      	str	r3, [r7, #20]
 8014b68:	e012      	b.n	8014b90 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8014b6a:	683b      	ldr	r3, [r7, #0]
 8014b6c:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8014b6e:	68bb      	ldr	r3, [r7, #8]
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d00d      	beq.n	8014b90 <osEventFlagsSet+0x78>
 8014b74:	4b09      	ldr	r3, [pc, #36]	; (8014b9c <osEventFlagsSet+0x84>)
 8014b76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014b7a:	601a      	str	r2, [r3, #0]
 8014b7c:	f3bf 8f4f 	dsb	sy
 8014b80:	f3bf 8f6f 	isb	sy
 8014b84:	e004      	b.n	8014b90 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8014b86:	6839      	ldr	r1, [r7, #0]
 8014b88:	6938      	ldr	r0, [r7, #16]
 8014b8a:	f000 fca5 	bl	80154d8 <xEventGroupSetBits>
 8014b8e:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8014b90:	697b      	ldr	r3, [r7, #20]
}
 8014b92:	4618      	mov	r0, r3
 8014b94:	3718      	adds	r7, #24
 8014b96:	46bd      	mov	sp, r7
 8014b98:	bd80      	pop	{r7, pc}
 8014b9a:	bf00      	nop
 8014b9c:	e000ed04 	.word	0xe000ed04

08014ba0 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8014ba0:	b580      	push	{r7, lr}
 8014ba2:	b086      	sub	sp, #24
 8014ba4:	af00      	add	r7, sp, #0
 8014ba6:	6078      	str	r0, [r7, #4]
 8014ba8:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8014bae:	693b      	ldr	r3, [r7, #16]
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	d004      	beq.n	8014bbe <osEventFlagsClear+0x1e>
 8014bb4:	683b      	ldr	r3, [r7, #0]
 8014bb6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d003      	beq.n	8014bc6 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8014bbe:	f06f 0303 	mvn.w	r3, #3
 8014bc2:	617b      	str	r3, [r7, #20]
 8014bc4:	e019      	b.n	8014bfa <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014bc6:	f3ef 8305 	mrs	r3, IPSR
 8014bca:	60fb      	str	r3, [r7, #12]
  return(result);
 8014bcc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	d00e      	beq.n	8014bf0 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8014bd2:	6938      	ldr	r0, [r7, #16]
 8014bd4:	f000 fc5c 	bl	8015490 <xEventGroupGetBitsFromISR>
 8014bd8:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8014bda:	6839      	ldr	r1, [r7, #0]
 8014bdc:	6938      	ldr	r0, [r7, #16]
 8014bde:	f000 fc43 	bl	8015468 <xEventGroupClearBitsFromISR>
 8014be2:	4603      	mov	r3, r0
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d108      	bne.n	8014bfa <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 8014be8:	f06f 0302 	mvn.w	r3, #2
 8014bec:	617b      	str	r3, [r7, #20]
 8014bee:	e004      	b.n	8014bfa <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8014bf0:	6839      	ldr	r1, [r7, #0]
 8014bf2:	6938      	ldr	r0, [r7, #16]
 8014bf4:	f000 fc00 	bl	80153f8 <xEventGroupClearBits>
 8014bf8:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8014bfa:	697b      	ldr	r3, [r7, #20]
}
 8014bfc:	4618      	mov	r0, r3
 8014bfe:	3718      	adds	r7, #24
 8014c00:	46bd      	mov	sp, r7
 8014c02:	bd80      	pop	{r7, pc}

08014c04 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8014c04:	b580      	push	{r7, lr}
 8014c06:	b08c      	sub	sp, #48	; 0x30
 8014c08:	af02      	add	r7, sp, #8
 8014c0a:	60f8      	str	r0, [r7, #12]
 8014c0c:	60b9      	str	r1, [r7, #8]
 8014c0e:	607a      	str	r2, [r7, #4]
 8014c10:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8014c12:	68fb      	ldr	r3, [r7, #12]
 8014c14:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8014c16:	69bb      	ldr	r3, [r7, #24]
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	d004      	beq.n	8014c26 <osEventFlagsWait+0x22>
 8014c1c:	68bb      	ldr	r3, [r7, #8]
 8014c1e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d003      	beq.n	8014c2e <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8014c26:	f06f 0303 	mvn.w	r3, #3
 8014c2a:	61fb      	str	r3, [r7, #28]
 8014c2c:	e04b      	b.n	8014cc6 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014c2e:	f3ef 8305 	mrs	r3, IPSR
 8014c32:	617b      	str	r3, [r7, #20]
  return(result);
 8014c34:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d003      	beq.n	8014c42 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8014c3a:	f06f 0305 	mvn.w	r3, #5
 8014c3e:	61fb      	str	r3, [r7, #28]
 8014c40:	e041      	b.n	8014cc6 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	f003 0301 	and.w	r3, r3, #1
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d002      	beq.n	8014c52 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8014c4c:	2301      	movs	r3, #1
 8014c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8014c50:	e001      	b.n	8014c56 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8014c52:	2300      	movs	r3, #0
 8014c54:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	f003 0302 	and.w	r3, r3, #2
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d002      	beq.n	8014c66 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8014c60:	2300      	movs	r3, #0
 8014c62:	623b      	str	r3, [r7, #32]
 8014c64:	e001      	b.n	8014c6a <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8014c66:	2301      	movs	r3, #1
 8014c68:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8014c6a:	683b      	ldr	r3, [r7, #0]
 8014c6c:	9300      	str	r3, [sp, #0]
 8014c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c70:	6a3a      	ldr	r2, [r7, #32]
 8014c72:	68b9      	ldr	r1, [r7, #8]
 8014c74:	69b8      	ldr	r0, [r7, #24]
 8014c76:	f000 faf1 	bl	801525c <xEventGroupWaitBits>
 8014c7a:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	f003 0301 	and.w	r3, r3, #1
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	d010      	beq.n	8014ca8 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8014c86:	68ba      	ldr	r2, [r7, #8]
 8014c88:	69fb      	ldr	r3, [r7, #28]
 8014c8a:	4013      	ands	r3, r2
 8014c8c:	68ba      	ldr	r2, [r7, #8]
 8014c8e:	429a      	cmp	r2, r3
 8014c90:	d019      	beq.n	8014cc6 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8014c92:	683b      	ldr	r3, [r7, #0]
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	d003      	beq.n	8014ca0 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8014c98:	f06f 0301 	mvn.w	r3, #1
 8014c9c:	61fb      	str	r3, [r7, #28]
 8014c9e:	e012      	b.n	8014cc6 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8014ca0:	f06f 0302 	mvn.w	r3, #2
 8014ca4:	61fb      	str	r3, [r7, #28]
 8014ca6:	e00e      	b.n	8014cc6 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8014ca8:	68ba      	ldr	r2, [r7, #8]
 8014caa:	69fb      	ldr	r3, [r7, #28]
 8014cac:	4013      	ands	r3, r2
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	d109      	bne.n	8014cc6 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8014cb2:	683b      	ldr	r3, [r7, #0]
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d003      	beq.n	8014cc0 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8014cb8:	f06f 0301 	mvn.w	r3, #1
 8014cbc:	61fb      	str	r3, [r7, #28]
 8014cbe:	e002      	b.n	8014cc6 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8014cc0:	f06f 0302 	mvn.w	r3, #2
 8014cc4:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8014cc6:	69fb      	ldr	r3, [r7, #28]
}
 8014cc8:	4618      	mov	r0, r3
 8014cca:	3728      	adds	r7, #40	; 0x28
 8014ccc:	46bd      	mov	sp, r7
 8014cce:	bd80      	pop	{r7, pc}

08014cd0 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8014cd0:	b580      	push	{r7, lr}
 8014cd2:	b088      	sub	sp, #32
 8014cd4:	af00      	add	r7, sp, #0
 8014cd6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8014cd8:	2300      	movs	r3, #0
 8014cda:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014cdc:	f3ef 8305 	mrs	r3, IPSR
 8014ce0:	60bb      	str	r3, [r7, #8]
  return(result);
 8014ce2:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d174      	bne.n	8014dd2 <osMutexNew+0x102>
    if (attr != NULL) {
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d003      	beq.n	8014cf6 <osMutexNew+0x26>
      type = attr->attr_bits;
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	685b      	ldr	r3, [r3, #4]
 8014cf2:	61bb      	str	r3, [r7, #24]
 8014cf4:	e001      	b.n	8014cfa <osMutexNew+0x2a>
    } else {
      type = 0U;
 8014cf6:	2300      	movs	r3, #0
 8014cf8:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8014cfa:	69bb      	ldr	r3, [r7, #24]
 8014cfc:	f003 0301 	and.w	r3, r3, #1
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	d002      	beq.n	8014d0a <osMutexNew+0x3a>
      rmtx = 1U;
 8014d04:	2301      	movs	r3, #1
 8014d06:	617b      	str	r3, [r7, #20]
 8014d08:	e001      	b.n	8014d0e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8014d0a:	2300      	movs	r3, #0
 8014d0c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8014d0e:	69bb      	ldr	r3, [r7, #24]
 8014d10:	f003 0308 	and.w	r3, r3, #8
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d15c      	bne.n	8014dd2 <osMutexNew+0x102>
      mem = -1;
 8014d18:	f04f 33ff 	mov.w	r3, #4294967295
 8014d1c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d015      	beq.n	8014d50 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	689b      	ldr	r3, [r3, #8]
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d006      	beq.n	8014d3a <osMutexNew+0x6a>
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	68db      	ldr	r3, [r3, #12]
 8014d30:	2b4f      	cmp	r3, #79	; 0x4f
 8014d32:	d902      	bls.n	8014d3a <osMutexNew+0x6a>
          mem = 1;
 8014d34:	2301      	movs	r3, #1
 8014d36:	613b      	str	r3, [r7, #16]
 8014d38:	e00c      	b.n	8014d54 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	689b      	ldr	r3, [r3, #8]
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	d108      	bne.n	8014d54 <osMutexNew+0x84>
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	68db      	ldr	r3, [r3, #12]
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d104      	bne.n	8014d54 <osMutexNew+0x84>
            mem = 0;
 8014d4a:	2300      	movs	r3, #0
 8014d4c:	613b      	str	r3, [r7, #16]
 8014d4e:	e001      	b.n	8014d54 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8014d50:	2300      	movs	r3, #0
 8014d52:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8014d54:	693b      	ldr	r3, [r7, #16]
 8014d56:	2b01      	cmp	r3, #1
 8014d58:	d112      	bne.n	8014d80 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8014d5a:	697b      	ldr	r3, [r7, #20]
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d007      	beq.n	8014d70 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	689b      	ldr	r3, [r3, #8]
 8014d64:	4619      	mov	r1, r3
 8014d66:	2004      	movs	r0, #4
 8014d68:	f000 feb5 	bl	8015ad6 <xQueueCreateMutexStatic>
 8014d6c:	61f8      	str	r0, [r7, #28]
 8014d6e:	e016      	b.n	8014d9e <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	689b      	ldr	r3, [r3, #8]
 8014d74:	4619      	mov	r1, r3
 8014d76:	2001      	movs	r0, #1
 8014d78:	f000 fead 	bl	8015ad6 <xQueueCreateMutexStatic>
 8014d7c:	61f8      	str	r0, [r7, #28]
 8014d7e:	e00e      	b.n	8014d9e <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8014d80:	693b      	ldr	r3, [r7, #16]
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d10b      	bne.n	8014d9e <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8014d86:	697b      	ldr	r3, [r7, #20]
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d004      	beq.n	8014d96 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8014d8c:	2004      	movs	r0, #4
 8014d8e:	f000 fe8a 	bl	8015aa6 <xQueueCreateMutex>
 8014d92:	61f8      	str	r0, [r7, #28]
 8014d94:	e003      	b.n	8014d9e <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8014d96:	2001      	movs	r0, #1
 8014d98:	f000 fe85 	bl	8015aa6 <xQueueCreateMutex>
 8014d9c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8014d9e:	69fb      	ldr	r3, [r7, #28]
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d00c      	beq.n	8014dbe <osMutexNew+0xee>
        if (attr != NULL) {
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d003      	beq.n	8014db2 <osMutexNew+0xe2>
          name = attr->name;
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	681b      	ldr	r3, [r3, #0]
 8014dae:	60fb      	str	r3, [r7, #12]
 8014db0:	e001      	b.n	8014db6 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8014db2:	2300      	movs	r3, #0
 8014db4:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8014db6:	68f9      	ldr	r1, [r7, #12]
 8014db8:	69f8      	ldr	r0, [r7, #28]
 8014dba:	f001 fc3f 	bl	801663c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8014dbe:	69fb      	ldr	r3, [r7, #28]
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d006      	beq.n	8014dd2 <osMutexNew+0x102>
 8014dc4:	697b      	ldr	r3, [r7, #20]
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d003      	beq.n	8014dd2 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8014dca:	69fb      	ldr	r3, [r7, #28]
 8014dcc:	f043 0301 	orr.w	r3, r3, #1
 8014dd0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8014dd2:	69fb      	ldr	r3, [r7, #28]
}
 8014dd4:	4618      	mov	r0, r3
 8014dd6:	3720      	adds	r7, #32
 8014dd8:	46bd      	mov	sp, r7
 8014dda:	bd80      	pop	{r7, pc}

08014ddc <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8014ddc:	b580      	push	{r7, lr}
 8014dde:	b086      	sub	sp, #24
 8014de0:	af00      	add	r7, sp, #0
 8014de2:	6078      	str	r0, [r7, #4]
 8014de4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	f023 0301 	bic.w	r3, r3, #1
 8014dec:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	f003 0301 	and.w	r3, r3, #1
 8014df4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8014df6:	2300      	movs	r3, #0
 8014df8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014dfa:	f3ef 8305 	mrs	r3, IPSR
 8014dfe:	60bb      	str	r3, [r7, #8]
  return(result);
 8014e00:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d003      	beq.n	8014e0e <osMutexAcquire+0x32>
    stat = osErrorISR;
 8014e06:	f06f 0305 	mvn.w	r3, #5
 8014e0a:	617b      	str	r3, [r7, #20]
 8014e0c:	e02c      	b.n	8014e68 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8014e0e:	693b      	ldr	r3, [r7, #16]
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d103      	bne.n	8014e1c <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8014e14:	f06f 0303 	mvn.w	r3, #3
 8014e18:	617b      	str	r3, [r7, #20]
 8014e1a:	e025      	b.n	8014e68 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8014e1c:	68fb      	ldr	r3, [r7, #12]
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	d011      	beq.n	8014e46 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8014e22:	6839      	ldr	r1, [r7, #0]
 8014e24:	6938      	ldr	r0, [r7, #16]
 8014e26:	f000 fea5 	bl	8015b74 <xQueueTakeMutexRecursive>
 8014e2a:	4603      	mov	r3, r0
 8014e2c:	2b01      	cmp	r3, #1
 8014e2e:	d01b      	beq.n	8014e68 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8014e30:	683b      	ldr	r3, [r7, #0]
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	d003      	beq.n	8014e3e <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8014e36:	f06f 0301 	mvn.w	r3, #1
 8014e3a:	617b      	str	r3, [r7, #20]
 8014e3c:	e014      	b.n	8014e68 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8014e3e:	f06f 0302 	mvn.w	r3, #2
 8014e42:	617b      	str	r3, [r7, #20]
 8014e44:	e010      	b.n	8014e68 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8014e46:	6839      	ldr	r1, [r7, #0]
 8014e48:	6938      	ldr	r0, [r7, #16]
 8014e4a:	f001 f943 	bl	80160d4 <xQueueSemaphoreTake>
 8014e4e:	4603      	mov	r3, r0
 8014e50:	2b01      	cmp	r3, #1
 8014e52:	d009      	beq.n	8014e68 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8014e54:	683b      	ldr	r3, [r7, #0]
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d003      	beq.n	8014e62 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8014e5a:	f06f 0301 	mvn.w	r3, #1
 8014e5e:	617b      	str	r3, [r7, #20]
 8014e60:	e002      	b.n	8014e68 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8014e62:	f06f 0302 	mvn.w	r3, #2
 8014e66:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8014e68:	697b      	ldr	r3, [r7, #20]
}
 8014e6a:	4618      	mov	r0, r3
 8014e6c:	3718      	adds	r7, #24
 8014e6e:	46bd      	mov	sp, r7
 8014e70:	bd80      	pop	{r7, pc}

08014e72 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8014e72:	b580      	push	{r7, lr}
 8014e74:	b086      	sub	sp, #24
 8014e76:	af00      	add	r7, sp, #0
 8014e78:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	f023 0301 	bic.w	r3, r3, #1
 8014e80:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	f003 0301 	and.w	r3, r3, #1
 8014e88:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8014e8a:	2300      	movs	r3, #0
 8014e8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014e8e:	f3ef 8305 	mrs	r3, IPSR
 8014e92:	60bb      	str	r3, [r7, #8]
  return(result);
 8014e94:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d003      	beq.n	8014ea2 <osMutexRelease+0x30>
    stat = osErrorISR;
 8014e9a:	f06f 0305 	mvn.w	r3, #5
 8014e9e:	617b      	str	r3, [r7, #20]
 8014ea0:	e01f      	b.n	8014ee2 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8014ea2:	693b      	ldr	r3, [r7, #16]
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	d103      	bne.n	8014eb0 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8014ea8:	f06f 0303 	mvn.w	r3, #3
 8014eac:	617b      	str	r3, [r7, #20]
 8014eae:	e018      	b.n	8014ee2 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d009      	beq.n	8014eca <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8014eb6:	6938      	ldr	r0, [r7, #16]
 8014eb8:	f000 fe28 	bl	8015b0c <xQueueGiveMutexRecursive>
 8014ebc:	4603      	mov	r3, r0
 8014ebe:	2b01      	cmp	r3, #1
 8014ec0:	d00f      	beq.n	8014ee2 <osMutexRelease+0x70>
        stat = osErrorResource;
 8014ec2:	f06f 0302 	mvn.w	r3, #2
 8014ec6:	617b      	str	r3, [r7, #20]
 8014ec8:	e00b      	b.n	8014ee2 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8014eca:	2300      	movs	r3, #0
 8014ecc:	2200      	movs	r2, #0
 8014ece:	2100      	movs	r1, #0
 8014ed0:	6938      	ldr	r0, [r7, #16]
 8014ed2:	f000 fe85 	bl	8015be0 <xQueueGenericSend>
 8014ed6:	4603      	mov	r3, r0
 8014ed8:	2b01      	cmp	r3, #1
 8014eda:	d002      	beq.n	8014ee2 <osMutexRelease+0x70>
        stat = osErrorResource;
 8014edc:	f06f 0302 	mvn.w	r3, #2
 8014ee0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8014ee2:	697b      	ldr	r3, [r7, #20]
}
 8014ee4:	4618      	mov	r0, r3
 8014ee6:	3718      	adds	r7, #24
 8014ee8:	46bd      	mov	sp, r7
 8014eea:	bd80      	pop	{r7, pc}

08014eec <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8014eec:	b580      	push	{r7, lr}
 8014eee:	b08a      	sub	sp, #40	; 0x28
 8014ef0:	af02      	add	r7, sp, #8
 8014ef2:	60f8      	str	r0, [r7, #12]
 8014ef4:	60b9      	str	r1, [r7, #8]
 8014ef6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8014ef8:	2300      	movs	r3, #0
 8014efa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014efc:	f3ef 8305 	mrs	r3, IPSR
 8014f00:	613b      	str	r3, [r7, #16]
  return(result);
 8014f02:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d15f      	bne.n	8014fc8 <osMessageQueueNew+0xdc>
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d05c      	beq.n	8014fc8 <osMessageQueueNew+0xdc>
 8014f0e:	68bb      	ldr	r3, [r7, #8]
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d059      	beq.n	8014fc8 <osMessageQueueNew+0xdc>
    mem = -1;
 8014f14:	f04f 33ff 	mov.w	r3, #4294967295
 8014f18:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d029      	beq.n	8014f74 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	689b      	ldr	r3, [r3, #8]
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	d012      	beq.n	8014f4e <osMessageQueueNew+0x62>
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	68db      	ldr	r3, [r3, #12]
 8014f2c:	2b4f      	cmp	r3, #79	; 0x4f
 8014f2e:	d90e      	bls.n	8014f4e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d00a      	beq.n	8014f4e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	695a      	ldr	r2, [r3, #20]
 8014f3c:	68fb      	ldr	r3, [r7, #12]
 8014f3e:	68b9      	ldr	r1, [r7, #8]
 8014f40:	fb01 f303 	mul.w	r3, r1, r3
 8014f44:	429a      	cmp	r2, r3
 8014f46:	d302      	bcc.n	8014f4e <osMessageQueueNew+0x62>
        mem = 1;
 8014f48:	2301      	movs	r3, #1
 8014f4a:	61bb      	str	r3, [r7, #24]
 8014f4c:	e014      	b.n	8014f78 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	689b      	ldr	r3, [r3, #8]
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d110      	bne.n	8014f78 <osMessageQueueNew+0x8c>
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	68db      	ldr	r3, [r3, #12]
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	d10c      	bne.n	8014f78 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	d108      	bne.n	8014f78 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	695b      	ldr	r3, [r3, #20]
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	d104      	bne.n	8014f78 <osMessageQueueNew+0x8c>
          mem = 0;
 8014f6e:	2300      	movs	r3, #0
 8014f70:	61bb      	str	r3, [r7, #24]
 8014f72:	e001      	b.n	8014f78 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8014f74:	2300      	movs	r3, #0
 8014f76:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8014f78:	69bb      	ldr	r3, [r7, #24]
 8014f7a:	2b01      	cmp	r3, #1
 8014f7c:	d10b      	bne.n	8014f96 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	691a      	ldr	r2, [r3, #16]
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	689b      	ldr	r3, [r3, #8]
 8014f86:	2100      	movs	r1, #0
 8014f88:	9100      	str	r1, [sp, #0]
 8014f8a:	68b9      	ldr	r1, [r7, #8]
 8014f8c:	68f8      	ldr	r0, [r7, #12]
 8014f8e:	f000 fc9b 	bl	80158c8 <xQueueGenericCreateStatic>
 8014f92:	61f8      	str	r0, [r7, #28]
 8014f94:	e008      	b.n	8014fa8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8014f96:	69bb      	ldr	r3, [r7, #24]
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d105      	bne.n	8014fa8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8014f9c:	2200      	movs	r2, #0
 8014f9e:	68b9      	ldr	r1, [r7, #8]
 8014fa0:	68f8      	ldr	r0, [r7, #12]
 8014fa2:	f000 fd09 	bl	80159b8 <xQueueGenericCreate>
 8014fa6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8014fa8:	69fb      	ldr	r3, [r7, #28]
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d00c      	beq.n	8014fc8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	d003      	beq.n	8014fbc <osMessageQueueNew+0xd0>
        name = attr->name;
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	681b      	ldr	r3, [r3, #0]
 8014fb8:	617b      	str	r3, [r7, #20]
 8014fba:	e001      	b.n	8014fc0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8014fbc:	2300      	movs	r3, #0
 8014fbe:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8014fc0:	6979      	ldr	r1, [r7, #20]
 8014fc2:	69f8      	ldr	r0, [r7, #28]
 8014fc4:	f001 fb3a 	bl	801663c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8014fc8:	69fb      	ldr	r3, [r7, #28]
}
 8014fca:	4618      	mov	r0, r3
 8014fcc:	3720      	adds	r7, #32
 8014fce:	46bd      	mov	sp, r7
 8014fd0:	bd80      	pop	{r7, pc}
	...

08014fd4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8014fd4:	b580      	push	{r7, lr}
 8014fd6:	b088      	sub	sp, #32
 8014fd8:	af00      	add	r7, sp, #0
 8014fda:	60f8      	str	r0, [r7, #12]
 8014fdc:	60b9      	str	r1, [r7, #8]
 8014fde:	603b      	str	r3, [r7, #0]
 8014fe0:	4613      	mov	r3, r2
 8014fe2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8014fe4:	68fb      	ldr	r3, [r7, #12]
 8014fe6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8014fe8:	2300      	movs	r3, #0
 8014fea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014fec:	f3ef 8305 	mrs	r3, IPSR
 8014ff0:	617b      	str	r3, [r7, #20]
  return(result);
 8014ff2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d028      	beq.n	801504a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8014ff8:	69bb      	ldr	r3, [r7, #24]
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d005      	beq.n	801500a <osMessageQueuePut+0x36>
 8014ffe:	68bb      	ldr	r3, [r7, #8]
 8015000:	2b00      	cmp	r3, #0
 8015002:	d002      	beq.n	801500a <osMessageQueuePut+0x36>
 8015004:	683b      	ldr	r3, [r7, #0]
 8015006:	2b00      	cmp	r3, #0
 8015008:	d003      	beq.n	8015012 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 801500a:	f06f 0303 	mvn.w	r3, #3
 801500e:	61fb      	str	r3, [r7, #28]
 8015010:	e038      	b.n	8015084 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8015012:	2300      	movs	r3, #0
 8015014:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8015016:	f107 0210 	add.w	r2, r7, #16
 801501a:	2300      	movs	r3, #0
 801501c:	68b9      	ldr	r1, [r7, #8]
 801501e:	69b8      	ldr	r0, [r7, #24]
 8015020:	f000 fedc 	bl	8015ddc <xQueueGenericSendFromISR>
 8015024:	4603      	mov	r3, r0
 8015026:	2b01      	cmp	r3, #1
 8015028:	d003      	beq.n	8015032 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 801502a:	f06f 0302 	mvn.w	r3, #2
 801502e:	61fb      	str	r3, [r7, #28]
 8015030:	e028      	b.n	8015084 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8015032:	693b      	ldr	r3, [r7, #16]
 8015034:	2b00      	cmp	r3, #0
 8015036:	d025      	beq.n	8015084 <osMessageQueuePut+0xb0>
 8015038:	4b15      	ldr	r3, [pc, #84]	; (8015090 <osMessageQueuePut+0xbc>)
 801503a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801503e:	601a      	str	r2, [r3, #0]
 8015040:	f3bf 8f4f 	dsb	sy
 8015044:	f3bf 8f6f 	isb	sy
 8015048:	e01c      	b.n	8015084 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801504a:	69bb      	ldr	r3, [r7, #24]
 801504c:	2b00      	cmp	r3, #0
 801504e:	d002      	beq.n	8015056 <osMessageQueuePut+0x82>
 8015050:	68bb      	ldr	r3, [r7, #8]
 8015052:	2b00      	cmp	r3, #0
 8015054:	d103      	bne.n	801505e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8015056:	f06f 0303 	mvn.w	r3, #3
 801505a:	61fb      	str	r3, [r7, #28]
 801505c:	e012      	b.n	8015084 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801505e:	2300      	movs	r3, #0
 8015060:	683a      	ldr	r2, [r7, #0]
 8015062:	68b9      	ldr	r1, [r7, #8]
 8015064:	69b8      	ldr	r0, [r7, #24]
 8015066:	f000 fdbb 	bl	8015be0 <xQueueGenericSend>
 801506a:	4603      	mov	r3, r0
 801506c:	2b01      	cmp	r3, #1
 801506e:	d009      	beq.n	8015084 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8015070:	683b      	ldr	r3, [r7, #0]
 8015072:	2b00      	cmp	r3, #0
 8015074:	d003      	beq.n	801507e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8015076:	f06f 0301 	mvn.w	r3, #1
 801507a:	61fb      	str	r3, [r7, #28]
 801507c:	e002      	b.n	8015084 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 801507e:	f06f 0302 	mvn.w	r3, #2
 8015082:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8015084:	69fb      	ldr	r3, [r7, #28]
}
 8015086:	4618      	mov	r0, r3
 8015088:	3720      	adds	r7, #32
 801508a:	46bd      	mov	sp, r7
 801508c:	bd80      	pop	{r7, pc}
 801508e:	bf00      	nop
 8015090:	e000ed04 	.word	0xe000ed04

08015094 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8015094:	b580      	push	{r7, lr}
 8015096:	b088      	sub	sp, #32
 8015098:	af00      	add	r7, sp, #0
 801509a:	60f8      	str	r0, [r7, #12]
 801509c:	60b9      	str	r1, [r7, #8]
 801509e:	607a      	str	r2, [r7, #4]
 80150a0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80150a2:	68fb      	ldr	r3, [r7, #12]
 80150a4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80150a6:	2300      	movs	r3, #0
 80150a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80150aa:	f3ef 8305 	mrs	r3, IPSR
 80150ae:	617b      	str	r3, [r7, #20]
  return(result);
 80150b0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d028      	beq.n	8015108 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80150b6:	69bb      	ldr	r3, [r7, #24]
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d005      	beq.n	80150c8 <osMessageQueueGet+0x34>
 80150bc:	68bb      	ldr	r3, [r7, #8]
 80150be:	2b00      	cmp	r3, #0
 80150c0:	d002      	beq.n	80150c8 <osMessageQueueGet+0x34>
 80150c2:	683b      	ldr	r3, [r7, #0]
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	d003      	beq.n	80150d0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80150c8:	f06f 0303 	mvn.w	r3, #3
 80150cc:	61fb      	str	r3, [r7, #28]
 80150ce:	e037      	b.n	8015140 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80150d0:	2300      	movs	r3, #0
 80150d2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80150d4:	f107 0310 	add.w	r3, r7, #16
 80150d8:	461a      	mov	r2, r3
 80150da:	68b9      	ldr	r1, [r7, #8]
 80150dc:	69b8      	ldr	r0, [r7, #24]
 80150de:	f001 f905 	bl	80162ec <xQueueReceiveFromISR>
 80150e2:	4603      	mov	r3, r0
 80150e4:	2b01      	cmp	r3, #1
 80150e6:	d003      	beq.n	80150f0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80150e8:	f06f 0302 	mvn.w	r3, #2
 80150ec:	61fb      	str	r3, [r7, #28]
 80150ee:	e027      	b.n	8015140 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80150f0:	693b      	ldr	r3, [r7, #16]
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	d024      	beq.n	8015140 <osMessageQueueGet+0xac>
 80150f6:	4b15      	ldr	r3, [pc, #84]	; (801514c <osMessageQueueGet+0xb8>)
 80150f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80150fc:	601a      	str	r2, [r3, #0]
 80150fe:	f3bf 8f4f 	dsb	sy
 8015102:	f3bf 8f6f 	isb	sy
 8015106:	e01b      	b.n	8015140 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8015108:	69bb      	ldr	r3, [r7, #24]
 801510a:	2b00      	cmp	r3, #0
 801510c:	d002      	beq.n	8015114 <osMessageQueueGet+0x80>
 801510e:	68bb      	ldr	r3, [r7, #8]
 8015110:	2b00      	cmp	r3, #0
 8015112:	d103      	bne.n	801511c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8015114:	f06f 0303 	mvn.w	r3, #3
 8015118:	61fb      	str	r3, [r7, #28]
 801511a:	e011      	b.n	8015140 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801511c:	683a      	ldr	r2, [r7, #0]
 801511e:	68b9      	ldr	r1, [r7, #8]
 8015120:	69b8      	ldr	r0, [r7, #24]
 8015122:	f000 fef7 	bl	8015f14 <xQueueReceive>
 8015126:	4603      	mov	r3, r0
 8015128:	2b01      	cmp	r3, #1
 801512a:	d009      	beq.n	8015140 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 801512c:	683b      	ldr	r3, [r7, #0]
 801512e:	2b00      	cmp	r3, #0
 8015130:	d003      	beq.n	801513a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8015132:	f06f 0301 	mvn.w	r3, #1
 8015136:	61fb      	str	r3, [r7, #28]
 8015138:	e002      	b.n	8015140 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 801513a:	f06f 0302 	mvn.w	r3, #2
 801513e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8015140:	69fb      	ldr	r3, [r7, #28]
}
 8015142:	4618      	mov	r0, r3
 8015144:	3720      	adds	r7, #32
 8015146:	46bd      	mov	sp, r7
 8015148:	bd80      	pop	{r7, pc}
 801514a:	bf00      	nop
 801514c:	e000ed04 	.word	0xe000ed04

08015150 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8015150:	b480      	push	{r7}
 8015152:	b085      	sub	sp, #20
 8015154:	af00      	add	r7, sp, #0
 8015156:	60f8      	str	r0, [r7, #12]
 8015158:	60b9      	str	r1, [r7, #8]
 801515a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801515c:	68fb      	ldr	r3, [r7, #12]
 801515e:	4a07      	ldr	r2, [pc, #28]	; (801517c <vApplicationGetIdleTaskMemory+0x2c>)
 8015160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8015162:	68bb      	ldr	r3, [r7, #8]
 8015164:	4a06      	ldr	r2, [pc, #24]	; (8015180 <vApplicationGetIdleTaskMemory+0x30>)
 8015166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	2280      	movs	r2, #128	; 0x80
 801516c:	601a      	str	r2, [r3, #0]
}
 801516e:	bf00      	nop
 8015170:	3714      	adds	r7, #20
 8015172:	46bd      	mov	sp, r7
 8015174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015178:	4770      	bx	lr
 801517a:	bf00      	nop
 801517c:	2000488c 	.word	0x2000488c
 8015180:	200048f8 	.word	0x200048f8

08015184 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8015184:	b480      	push	{r7}
 8015186:	b085      	sub	sp, #20
 8015188:	af00      	add	r7, sp, #0
 801518a:	60f8      	str	r0, [r7, #12]
 801518c:	60b9      	str	r1, [r7, #8]
 801518e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8015190:	68fb      	ldr	r3, [r7, #12]
 8015192:	4a07      	ldr	r2, [pc, #28]	; (80151b0 <vApplicationGetTimerTaskMemory+0x2c>)
 8015194:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8015196:	68bb      	ldr	r3, [r7, #8]
 8015198:	4a06      	ldr	r2, [pc, #24]	; (80151b4 <vApplicationGetTimerTaskMemory+0x30>)
 801519a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80151a2:	601a      	str	r2, [r3, #0]
}
 80151a4:	bf00      	nop
 80151a6:	3714      	adds	r7, #20
 80151a8:	46bd      	mov	sp, r7
 80151aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151ae:	4770      	bx	lr
 80151b0:	20004af8 	.word	0x20004af8
 80151b4:	20004b64 	.word	0x20004b64

080151b8 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80151b8:	b580      	push	{r7, lr}
 80151ba:	b086      	sub	sp, #24
 80151bc:	af00      	add	r7, sp, #0
 80151be:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	d10a      	bne.n	80151dc <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80151c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151ca:	f383 8811 	msr	BASEPRI, r3
 80151ce:	f3bf 8f6f 	isb	sy
 80151d2:	f3bf 8f4f 	dsb	sy
 80151d6:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80151d8:	bf00      	nop
 80151da:	e7fe      	b.n	80151da <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80151dc:	2320      	movs	r3, #32
 80151de:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80151e0:	68bb      	ldr	r3, [r7, #8]
 80151e2:	2b20      	cmp	r3, #32
 80151e4:	d00a      	beq.n	80151fc <xEventGroupCreateStatic+0x44>
	__asm volatile
 80151e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151ea:	f383 8811 	msr	BASEPRI, r3
 80151ee:	f3bf 8f6f 	isb	sy
 80151f2:	f3bf 8f4f 	dsb	sy
 80151f6:	60fb      	str	r3, [r7, #12]
}
 80151f8:	bf00      	nop
 80151fa:	e7fe      	b.n	80151fa <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8015200:	697b      	ldr	r3, [r7, #20]
 8015202:	2b00      	cmp	r3, #0
 8015204:	d00a      	beq.n	801521c <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8015206:	697b      	ldr	r3, [r7, #20]
 8015208:	2200      	movs	r2, #0
 801520a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 801520c:	697b      	ldr	r3, [r7, #20]
 801520e:	3304      	adds	r3, #4
 8015210:	4618      	mov	r0, r3
 8015212:	f000 fa3d 	bl	8015690 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8015216:	697b      	ldr	r3, [r7, #20]
 8015218:	2201      	movs	r2, #1
 801521a:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 801521c:	697b      	ldr	r3, [r7, #20]
	}
 801521e:	4618      	mov	r0, r3
 8015220:	3718      	adds	r7, #24
 8015222:	46bd      	mov	sp, r7
 8015224:	bd80      	pop	{r7, pc}

08015226 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8015226:	b580      	push	{r7, lr}
 8015228:	b082      	sub	sp, #8
 801522a:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 801522c:	2020      	movs	r0, #32
 801522e:	f003 f99b 	bl	8018568 <pvPortMalloc>
 8015232:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	2b00      	cmp	r3, #0
 8015238:	d00a      	beq.n	8015250 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	2200      	movs	r2, #0
 801523e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	3304      	adds	r3, #4
 8015244:	4618      	mov	r0, r3
 8015246:	f000 fa23 	bl	8015690 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	2200      	movs	r2, #0
 801524e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8015250:	687b      	ldr	r3, [r7, #4]
	}
 8015252:	4618      	mov	r0, r3
 8015254:	3708      	adds	r7, #8
 8015256:	46bd      	mov	sp, r7
 8015258:	bd80      	pop	{r7, pc}
	...

0801525c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 801525c:	b580      	push	{r7, lr}
 801525e:	b090      	sub	sp, #64	; 0x40
 8015260:	af00      	add	r7, sp, #0
 8015262:	60f8      	str	r0, [r7, #12]
 8015264:	60b9      	str	r1, [r7, #8]
 8015266:	607a      	str	r2, [r7, #4]
 8015268:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 801526a:	68fb      	ldr	r3, [r7, #12]
 801526c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 801526e:	2300      	movs	r3, #0
 8015270:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8015272:	2300      	movs	r3, #0
 8015274:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8015276:	68fb      	ldr	r3, [r7, #12]
 8015278:	2b00      	cmp	r3, #0
 801527a:	d10a      	bne.n	8015292 <xEventGroupWaitBits+0x36>
	__asm volatile
 801527c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015280:	f383 8811 	msr	BASEPRI, r3
 8015284:	f3bf 8f6f 	isb	sy
 8015288:	f3bf 8f4f 	dsb	sy
 801528c:	623b      	str	r3, [r7, #32]
}
 801528e:	bf00      	nop
 8015290:	e7fe      	b.n	8015290 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8015292:	68bb      	ldr	r3, [r7, #8]
 8015294:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8015298:	2b00      	cmp	r3, #0
 801529a:	d00a      	beq.n	80152b2 <xEventGroupWaitBits+0x56>
	__asm volatile
 801529c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152a0:	f383 8811 	msr	BASEPRI, r3
 80152a4:	f3bf 8f6f 	isb	sy
 80152a8:	f3bf 8f4f 	dsb	sy
 80152ac:	61fb      	str	r3, [r7, #28]
}
 80152ae:	bf00      	nop
 80152b0:	e7fe      	b.n	80152b0 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80152b2:	68bb      	ldr	r3, [r7, #8]
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d10a      	bne.n	80152ce <xEventGroupWaitBits+0x72>
	__asm volatile
 80152b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152bc:	f383 8811 	msr	BASEPRI, r3
 80152c0:	f3bf 8f6f 	isb	sy
 80152c4:	f3bf 8f4f 	dsb	sy
 80152c8:	61bb      	str	r3, [r7, #24]
}
 80152ca:	bf00      	nop
 80152cc:	e7fe      	b.n	80152cc <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80152ce:	f002 f8df 	bl	8017490 <xTaskGetSchedulerState>
 80152d2:	4603      	mov	r3, r0
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d102      	bne.n	80152de <xEventGroupWaitBits+0x82>
 80152d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80152da:	2b00      	cmp	r3, #0
 80152dc:	d101      	bne.n	80152e2 <xEventGroupWaitBits+0x86>
 80152de:	2301      	movs	r3, #1
 80152e0:	e000      	b.n	80152e4 <xEventGroupWaitBits+0x88>
 80152e2:	2300      	movs	r3, #0
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d10a      	bne.n	80152fe <xEventGroupWaitBits+0xa2>
	__asm volatile
 80152e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152ec:	f383 8811 	msr	BASEPRI, r3
 80152f0:	f3bf 8f6f 	isb	sy
 80152f4:	f3bf 8f4f 	dsb	sy
 80152f8:	617b      	str	r3, [r7, #20]
}
 80152fa:	bf00      	nop
 80152fc:	e7fe      	b.n	80152fc <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80152fe:	f001 fc37 	bl	8016b70 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8015302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015304:	681b      	ldr	r3, [r3, #0]
 8015306:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8015308:	683a      	ldr	r2, [r7, #0]
 801530a:	68b9      	ldr	r1, [r7, #8]
 801530c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801530e:	f000 f988 	bl	8015622 <prvTestWaitCondition>
 8015312:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8015314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015316:	2b00      	cmp	r3, #0
 8015318:	d00e      	beq.n	8015338 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 801531a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801531c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 801531e:	2300      	movs	r3, #0
 8015320:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	2b00      	cmp	r3, #0
 8015326:	d028      	beq.n	801537a <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8015328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801532a:	681a      	ldr	r2, [r3, #0]
 801532c:	68bb      	ldr	r3, [r7, #8]
 801532e:	43db      	mvns	r3, r3
 8015330:	401a      	ands	r2, r3
 8015332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015334:	601a      	str	r2, [r3, #0]
 8015336:	e020      	b.n	801537a <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8015338:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801533a:	2b00      	cmp	r3, #0
 801533c:	d104      	bne.n	8015348 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 801533e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015340:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8015342:	2301      	movs	r3, #1
 8015344:	633b      	str	r3, [r7, #48]	; 0x30
 8015346:	e018      	b.n	801537a <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	2b00      	cmp	r3, #0
 801534c:	d003      	beq.n	8015356 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 801534e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015350:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8015354:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8015356:	683b      	ldr	r3, [r7, #0]
 8015358:	2b00      	cmp	r3, #0
 801535a:	d003      	beq.n	8015364 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 801535c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801535e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8015362:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8015364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015366:	1d18      	adds	r0, r3, #4
 8015368:	68ba      	ldr	r2, [r7, #8]
 801536a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801536c:	4313      	orrs	r3, r2
 801536e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015370:	4619      	mov	r1, r3
 8015372:	f001 fdf5 	bl	8016f60 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8015376:	2300      	movs	r3, #0
 8015378:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 801537a:	f001 fc07 	bl	8016b8c <xTaskResumeAll>
 801537e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8015380:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015382:	2b00      	cmp	r3, #0
 8015384:	d031      	beq.n	80153ea <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8015386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015388:	2b00      	cmp	r3, #0
 801538a:	d107      	bne.n	801539c <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 801538c:	4b19      	ldr	r3, [pc, #100]	; (80153f4 <xEventGroupWaitBits+0x198>)
 801538e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015392:	601a      	str	r2, [r3, #0]
 8015394:	f3bf 8f4f 	dsb	sy
 8015398:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 801539c:	f002 f9ee 	bl	801777c <uxTaskResetEventItemValue>
 80153a0:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80153a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80153a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d11a      	bne.n	80153e2 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80153ac:	f002 ffba 	bl	8018324 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80153b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80153b2:	681b      	ldr	r3, [r3, #0]
 80153b4:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80153b6:	683a      	ldr	r2, [r7, #0]
 80153b8:	68b9      	ldr	r1, [r7, #8]
 80153ba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80153bc:	f000 f931 	bl	8015622 <prvTestWaitCondition>
 80153c0:	4603      	mov	r3, r0
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d009      	beq.n	80153da <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	d006      	beq.n	80153da <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80153cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80153ce:	681a      	ldr	r2, [r3, #0]
 80153d0:	68bb      	ldr	r3, [r7, #8]
 80153d2:	43db      	mvns	r3, r3
 80153d4:	401a      	ands	r2, r3
 80153d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80153d8:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80153da:	2301      	movs	r3, #1
 80153dc:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80153de:	f002 ffd1 	bl	8018384 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80153e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80153e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80153e8:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80153ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80153ec:	4618      	mov	r0, r3
 80153ee:	3740      	adds	r7, #64	; 0x40
 80153f0:	46bd      	mov	sp, r7
 80153f2:	bd80      	pop	{r7, pc}
 80153f4:	e000ed04 	.word	0xe000ed04

080153f8 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 80153f8:	b580      	push	{r7, lr}
 80153fa:	b086      	sub	sp, #24
 80153fc:	af00      	add	r7, sp, #0
 80153fe:	6078      	str	r0, [r7, #4]
 8015400:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	2b00      	cmp	r3, #0
 801540a:	d10a      	bne.n	8015422 <xEventGroupClearBits+0x2a>
	__asm volatile
 801540c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015410:	f383 8811 	msr	BASEPRI, r3
 8015414:	f3bf 8f6f 	isb	sy
 8015418:	f3bf 8f4f 	dsb	sy
 801541c:	60fb      	str	r3, [r7, #12]
}
 801541e:	bf00      	nop
 8015420:	e7fe      	b.n	8015420 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8015422:	683b      	ldr	r3, [r7, #0]
 8015424:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8015428:	2b00      	cmp	r3, #0
 801542a:	d00a      	beq.n	8015442 <xEventGroupClearBits+0x4a>
	__asm volatile
 801542c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015430:	f383 8811 	msr	BASEPRI, r3
 8015434:	f3bf 8f6f 	isb	sy
 8015438:	f3bf 8f4f 	dsb	sy
 801543c:	60bb      	str	r3, [r7, #8]
}
 801543e:	bf00      	nop
 8015440:	e7fe      	b.n	8015440 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8015442:	f002 ff6f 	bl	8018324 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8015446:	697b      	ldr	r3, [r7, #20]
 8015448:	681b      	ldr	r3, [r3, #0]
 801544a:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 801544c:	697b      	ldr	r3, [r7, #20]
 801544e:	681a      	ldr	r2, [r3, #0]
 8015450:	683b      	ldr	r3, [r7, #0]
 8015452:	43db      	mvns	r3, r3
 8015454:	401a      	ands	r2, r3
 8015456:	697b      	ldr	r3, [r7, #20]
 8015458:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 801545a:	f002 ff93 	bl	8018384 <vPortExitCritical>

	return uxReturn;
 801545e:	693b      	ldr	r3, [r7, #16]
}
 8015460:	4618      	mov	r0, r3
 8015462:	3718      	adds	r7, #24
 8015464:	46bd      	mov	sp, r7
 8015466:	bd80      	pop	{r7, pc}

08015468 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8015468:	b580      	push	{r7, lr}
 801546a:	b084      	sub	sp, #16
 801546c:	af00      	add	r7, sp, #0
 801546e:	6078      	str	r0, [r7, #4]
 8015470:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8015472:	2300      	movs	r3, #0
 8015474:	683a      	ldr	r2, [r7, #0]
 8015476:	6879      	ldr	r1, [r7, #4]
 8015478:	4804      	ldr	r0, [pc, #16]	; (801548c <xEventGroupClearBitsFromISR+0x24>)
 801547a:	f002 fe07 	bl	801808c <xTimerPendFunctionCallFromISR>
 801547e:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8015480:	68fb      	ldr	r3, [r7, #12]
	}
 8015482:	4618      	mov	r0, r3
 8015484:	3710      	adds	r7, #16
 8015486:	46bd      	mov	sp, r7
 8015488:	bd80      	pop	{r7, pc}
 801548a:	bf00      	nop
 801548c:	08015609 	.word	0x08015609

08015490 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8015490:	b480      	push	{r7}
 8015492:	b089      	sub	sp, #36	; 0x24
 8015494:	af00      	add	r7, sp, #0
 8015496:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801549c:	f3ef 8211 	mrs	r2, BASEPRI
 80154a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154a4:	f383 8811 	msr	BASEPRI, r3
 80154a8:	f3bf 8f6f 	isb	sy
 80154ac:	f3bf 8f4f 	dsb	sy
 80154b0:	60fa      	str	r2, [r7, #12]
 80154b2:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80154b4:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80154b6:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 80154b8:	69fb      	ldr	r3, [r7, #28]
 80154ba:	681b      	ldr	r3, [r3, #0]
 80154bc:	617b      	str	r3, [r7, #20]
 80154be:	69bb      	ldr	r3, [r7, #24]
 80154c0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80154c2:	693b      	ldr	r3, [r7, #16]
 80154c4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80154c8:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 80154ca:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 80154cc:	4618      	mov	r0, r3
 80154ce:	3724      	adds	r7, #36	; 0x24
 80154d0:	46bd      	mov	sp, r7
 80154d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154d6:	4770      	bx	lr

080154d8 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80154d8:	b580      	push	{r7, lr}
 80154da:	b08e      	sub	sp, #56	; 0x38
 80154dc:	af00      	add	r7, sp, #0
 80154de:	6078      	str	r0, [r7, #4]
 80154e0:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80154e2:	2300      	movs	r3, #0
 80154e4:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80154ea:	2300      	movs	r3, #0
 80154ec:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d10a      	bne.n	801550a <xEventGroupSetBits+0x32>
	__asm volatile
 80154f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154f8:	f383 8811 	msr	BASEPRI, r3
 80154fc:	f3bf 8f6f 	isb	sy
 8015500:	f3bf 8f4f 	dsb	sy
 8015504:	613b      	str	r3, [r7, #16]
}
 8015506:	bf00      	nop
 8015508:	e7fe      	b.n	8015508 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801550a:	683b      	ldr	r3, [r7, #0]
 801550c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8015510:	2b00      	cmp	r3, #0
 8015512:	d00a      	beq.n	801552a <xEventGroupSetBits+0x52>
	__asm volatile
 8015514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015518:	f383 8811 	msr	BASEPRI, r3
 801551c:	f3bf 8f6f 	isb	sy
 8015520:	f3bf 8f4f 	dsb	sy
 8015524:	60fb      	str	r3, [r7, #12]
}
 8015526:	bf00      	nop
 8015528:	e7fe      	b.n	8015528 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 801552a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801552c:	3304      	adds	r3, #4
 801552e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015532:	3308      	adds	r3, #8
 8015534:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8015536:	f001 fb1b 	bl	8016b70 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 801553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801553c:	68db      	ldr	r3, [r3, #12]
 801553e:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8015540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015542:	681a      	ldr	r2, [r3, #0]
 8015544:	683b      	ldr	r3, [r7, #0]
 8015546:	431a      	orrs	r2, r3
 8015548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801554a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 801554c:	e03c      	b.n	80155c8 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 801554e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015550:	685b      	ldr	r3, [r3, #4]
 8015552:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8015554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015556:	681b      	ldr	r3, [r3, #0]
 8015558:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 801555a:	2300      	movs	r3, #0
 801555c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 801555e:	69bb      	ldr	r3, [r7, #24]
 8015560:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8015564:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8015566:	69bb      	ldr	r3, [r7, #24]
 8015568:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801556c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 801556e:	697b      	ldr	r3, [r7, #20]
 8015570:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8015574:	2b00      	cmp	r3, #0
 8015576:	d108      	bne.n	801558a <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8015578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801557a:	681a      	ldr	r2, [r3, #0]
 801557c:	69bb      	ldr	r3, [r7, #24]
 801557e:	4013      	ands	r3, r2
 8015580:	2b00      	cmp	r3, #0
 8015582:	d00b      	beq.n	801559c <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8015584:	2301      	movs	r3, #1
 8015586:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015588:	e008      	b.n	801559c <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 801558a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801558c:	681a      	ldr	r2, [r3, #0]
 801558e:	69bb      	ldr	r3, [r7, #24]
 8015590:	4013      	ands	r3, r2
 8015592:	69ba      	ldr	r2, [r7, #24]
 8015594:	429a      	cmp	r2, r3
 8015596:	d101      	bne.n	801559c <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8015598:	2301      	movs	r3, #1
 801559a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 801559c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d010      	beq.n	80155c4 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80155a2:	697b      	ldr	r3, [r7, #20]
 80155a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	d003      	beq.n	80155b4 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80155ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80155ae:	69bb      	ldr	r3, [r7, #24]
 80155b0:	4313      	orrs	r3, r2
 80155b2:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80155b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155b6:	681b      	ldr	r3, [r3, #0]
 80155b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80155bc:	4619      	mov	r1, r3
 80155be:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80155c0:	f001 fd9a 	bl	80170f8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80155c4:	69fb      	ldr	r3, [r7, #28]
 80155c6:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80155c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80155ca:	6a3b      	ldr	r3, [r7, #32]
 80155cc:	429a      	cmp	r2, r3
 80155ce:	d1be      	bne.n	801554e <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80155d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155d2:	681a      	ldr	r2, [r3, #0]
 80155d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155d6:	43db      	mvns	r3, r3
 80155d8:	401a      	ands	r2, r3
 80155da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155dc:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80155de:	f001 fad5 	bl	8016b8c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80155e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155e4:	681b      	ldr	r3, [r3, #0]
}
 80155e6:	4618      	mov	r0, r3
 80155e8:	3738      	adds	r7, #56	; 0x38
 80155ea:	46bd      	mov	sp, r7
 80155ec:	bd80      	pop	{r7, pc}

080155ee <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80155ee:	b580      	push	{r7, lr}
 80155f0:	b082      	sub	sp, #8
 80155f2:	af00      	add	r7, sp, #0
 80155f4:	6078      	str	r0, [r7, #4]
 80155f6:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80155f8:	6839      	ldr	r1, [r7, #0]
 80155fa:	6878      	ldr	r0, [r7, #4]
 80155fc:	f7ff ff6c 	bl	80154d8 <xEventGroupSetBits>
}
 8015600:	bf00      	nop
 8015602:	3708      	adds	r7, #8
 8015604:	46bd      	mov	sp, r7
 8015606:	bd80      	pop	{r7, pc}

08015608 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8015608:	b580      	push	{r7, lr}
 801560a:	b082      	sub	sp, #8
 801560c:	af00      	add	r7, sp, #0
 801560e:	6078      	str	r0, [r7, #4]
 8015610:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8015612:	6839      	ldr	r1, [r7, #0]
 8015614:	6878      	ldr	r0, [r7, #4]
 8015616:	f7ff feef 	bl	80153f8 <xEventGroupClearBits>
}
 801561a:	bf00      	nop
 801561c:	3708      	adds	r7, #8
 801561e:	46bd      	mov	sp, r7
 8015620:	bd80      	pop	{r7, pc}

08015622 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8015622:	b480      	push	{r7}
 8015624:	b087      	sub	sp, #28
 8015626:	af00      	add	r7, sp, #0
 8015628:	60f8      	str	r0, [r7, #12]
 801562a:	60b9      	str	r1, [r7, #8]
 801562c:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 801562e:	2300      	movs	r3, #0
 8015630:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	2b00      	cmp	r3, #0
 8015636:	d107      	bne.n	8015648 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8015638:	68fa      	ldr	r2, [r7, #12]
 801563a:	68bb      	ldr	r3, [r7, #8]
 801563c:	4013      	ands	r3, r2
 801563e:	2b00      	cmp	r3, #0
 8015640:	d00a      	beq.n	8015658 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8015642:	2301      	movs	r3, #1
 8015644:	617b      	str	r3, [r7, #20]
 8015646:	e007      	b.n	8015658 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8015648:	68fa      	ldr	r2, [r7, #12]
 801564a:	68bb      	ldr	r3, [r7, #8]
 801564c:	4013      	ands	r3, r2
 801564e:	68ba      	ldr	r2, [r7, #8]
 8015650:	429a      	cmp	r2, r3
 8015652:	d101      	bne.n	8015658 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8015654:	2301      	movs	r3, #1
 8015656:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8015658:	697b      	ldr	r3, [r7, #20]
}
 801565a:	4618      	mov	r0, r3
 801565c:	371c      	adds	r7, #28
 801565e:	46bd      	mov	sp, r7
 8015660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015664:	4770      	bx	lr
	...

08015668 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8015668:	b580      	push	{r7, lr}
 801566a:	b086      	sub	sp, #24
 801566c:	af00      	add	r7, sp, #0
 801566e:	60f8      	str	r0, [r7, #12]
 8015670:	60b9      	str	r1, [r7, #8]
 8015672:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	68ba      	ldr	r2, [r7, #8]
 8015678:	68f9      	ldr	r1, [r7, #12]
 801567a:	4804      	ldr	r0, [pc, #16]	; (801568c <xEventGroupSetBitsFromISR+0x24>)
 801567c:	f002 fd06 	bl	801808c <xTimerPendFunctionCallFromISR>
 8015680:	6178      	str	r0, [r7, #20]

		return xReturn;
 8015682:	697b      	ldr	r3, [r7, #20]
	}
 8015684:	4618      	mov	r0, r3
 8015686:	3718      	adds	r7, #24
 8015688:	46bd      	mov	sp, r7
 801568a:	bd80      	pop	{r7, pc}
 801568c:	080155ef 	.word	0x080155ef

08015690 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8015690:	b480      	push	{r7}
 8015692:	b083      	sub	sp, #12
 8015694:	af00      	add	r7, sp, #0
 8015696:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	f103 0208 	add.w	r2, r3, #8
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	f04f 32ff 	mov.w	r2, #4294967295
 80156a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	f103 0208 	add.w	r2, r3, #8
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	f103 0208 	add.w	r2, r3, #8
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	2200      	movs	r2, #0
 80156c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80156c4:	bf00      	nop
 80156c6:	370c      	adds	r7, #12
 80156c8:	46bd      	mov	sp, r7
 80156ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156ce:	4770      	bx	lr

080156d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80156d0:	b480      	push	{r7}
 80156d2:	b083      	sub	sp, #12
 80156d4:	af00      	add	r7, sp, #0
 80156d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	2200      	movs	r2, #0
 80156dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80156de:	bf00      	nop
 80156e0:	370c      	adds	r7, #12
 80156e2:	46bd      	mov	sp, r7
 80156e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156e8:	4770      	bx	lr

080156ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80156ea:	b480      	push	{r7}
 80156ec:	b085      	sub	sp, #20
 80156ee:	af00      	add	r7, sp, #0
 80156f0:	6078      	str	r0, [r7, #4]
 80156f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	685b      	ldr	r3, [r3, #4]
 80156f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80156fa:	683b      	ldr	r3, [r7, #0]
 80156fc:	68fa      	ldr	r2, [r7, #12]
 80156fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8015700:	68fb      	ldr	r3, [r7, #12]
 8015702:	689a      	ldr	r2, [r3, #8]
 8015704:	683b      	ldr	r3, [r7, #0]
 8015706:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8015708:	68fb      	ldr	r3, [r7, #12]
 801570a:	689b      	ldr	r3, [r3, #8]
 801570c:	683a      	ldr	r2, [r7, #0]
 801570e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8015710:	68fb      	ldr	r3, [r7, #12]
 8015712:	683a      	ldr	r2, [r7, #0]
 8015714:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8015716:	683b      	ldr	r3, [r7, #0]
 8015718:	687a      	ldr	r2, [r7, #4]
 801571a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	681b      	ldr	r3, [r3, #0]
 8015720:	1c5a      	adds	r2, r3, #1
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	601a      	str	r2, [r3, #0]
}
 8015726:	bf00      	nop
 8015728:	3714      	adds	r7, #20
 801572a:	46bd      	mov	sp, r7
 801572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015730:	4770      	bx	lr

08015732 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015732:	b480      	push	{r7}
 8015734:	b085      	sub	sp, #20
 8015736:	af00      	add	r7, sp, #0
 8015738:	6078      	str	r0, [r7, #4]
 801573a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801573c:	683b      	ldr	r3, [r7, #0]
 801573e:	681b      	ldr	r3, [r3, #0]
 8015740:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8015742:	68bb      	ldr	r3, [r7, #8]
 8015744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015748:	d103      	bne.n	8015752 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	691b      	ldr	r3, [r3, #16]
 801574e:	60fb      	str	r3, [r7, #12]
 8015750:	e00c      	b.n	801576c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	3308      	adds	r3, #8
 8015756:	60fb      	str	r3, [r7, #12]
 8015758:	e002      	b.n	8015760 <vListInsert+0x2e>
 801575a:	68fb      	ldr	r3, [r7, #12]
 801575c:	685b      	ldr	r3, [r3, #4]
 801575e:	60fb      	str	r3, [r7, #12]
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	685b      	ldr	r3, [r3, #4]
 8015764:	681b      	ldr	r3, [r3, #0]
 8015766:	68ba      	ldr	r2, [r7, #8]
 8015768:	429a      	cmp	r2, r3
 801576a:	d2f6      	bcs.n	801575a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801576c:	68fb      	ldr	r3, [r7, #12]
 801576e:	685a      	ldr	r2, [r3, #4]
 8015770:	683b      	ldr	r3, [r7, #0]
 8015772:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8015774:	683b      	ldr	r3, [r7, #0]
 8015776:	685b      	ldr	r3, [r3, #4]
 8015778:	683a      	ldr	r2, [r7, #0]
 801577a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801577c:	683b      	ldr	r3, [r7, #0]
 801577e:	68fa      	ldr	r2, [r7, #12]
 8015780:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8015782:	68fb      	ldr	r3, [r7, #12]
 8015784:	683a      	ldr	r2, [r7, #0]
 8015786:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8015788:	683b      	ldr	r3, [r7, #0]
 801578a:	687a      	ldr	r2, [r7, #4]
 801578c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	681b      	ldr	r3, [r3, #0]
 8015792:	1c5a      	adds	r2, r3, #1
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	601a      	str	r2, [r3, #0]
}
 8015798:	bf00      	nop
 801579a:	3714      	adds	r7, #20
 801579c:	46bd      	mov	sp, r7
 801579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157a2:	4770      	bx	lr

080157a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80157a4:	b480      	push	{r7}
 80157a6:	b085      	sub	sp, #20
 80157a8:	af00      	add	r7, sp, #0
 80157aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	691b      	ldr	r3, [r3, #16]
 80157b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	685b      	ldr	r3, [r3, #4]
 80157b6:	687a      	ldr	r2, [r7, #4]
 80157b8:	6892      	ldr	r2, [r2, #8]
 80157ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	689b      	ldr	r3, [r3, #8]
 80157c0:	687a      	ldr	r2, [r7, #4]
 80157c2:	6852      	ldr	r2, [r2, #4]
 80157c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80157c6:	68fb      	ldr	r3, [r7, #12]
 80157c8:	685b      	ldr	r3, [r3, #4]
 80157ca:	687a      	ldr	r2, [r7, #4]
 80157cc:	429a      	cmp	r2, r3
 80157ce:	d103      	bne.n	80157d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	689a      	ldr	r2, [r3, #8]
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	2200      	movs	r2, #0
 80157dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80157de:	68fb      	ldr	r3, [r7, #12]
 80157e0:	681b      	ldr	r3, [r3, #0]
 80157e2:	1e5a      	subs	r2, r3, #1
 80157e4:	68fb      	ldr	r3, [r7, #12]
 80157e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80157e8:	68fb      	ldr	r3, [r7, #12]
 80157ea:	681b      	ldr	r3, [r3, #0]
}
 80157ec:	4618      	mov	r0, r3
 80157ee:	3714      	adds	r7, #20
 80157f0:	46bd      	mov	sp, r7
 80157f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157f6:	4770      	bx	lr

080157f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80157f8:	b580      	push	{r7, lr}
 80157fa:	b084      	sub	sp, #16
 80157fc:	af00      	add	r7, sp, #0
 80157fe:	6078      	str	r0, [r7, #4]
 8015800:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015806:	68fb      	ldr	r3, [r7, #12]
 8015808:	2b00      	cmp	r3, #0
 801580a:	d10a      	bne.n	8015822 <xQueueGenericReset+0x2a>
	__asm volatile
 801580c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015810:	f383 8811 	msr	BASEPRI, r3
 8015814:	f3bf 8f6f 	isb	sy
 8015818:	f3bf 8f4f 	dsb	sy
 801581c:	60bb      	str	r3, [r7, #8]
}
 801581e:	bf00      	nop
 8015820:	e7fe      	b.n	8015820 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8015822:	f002 fd7f 	bl	8018324 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015826:	68fb      	ldr	r3, [r7, #12]
 8015828:	681a      	ldr	r2, [r3, #0]
 801582a:	68fb      	ldr	r3, [r7, #12]
 801582c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801582e:	68f9      	ldr	r1, [r7, #12]
 8015830:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015832:	fb01 f303 	mul.w	r3, r1, r3
 8015836:	441a      	add	r2, r3
 8015838:	68fb      	ldr	r3, [r7, #12]
 801583a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801583c:	68fb      	ldr	r3, [r7, #12]
 801583e:	2200      	movs	r2, #0
 8015840:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8015842:	68fb      	ldr	r3, [r7, #12]
 8015844:	681a      	ldr	r2, [r3, #0]
 8015846:	68fb      	ldr	r3, [r7, #12]
 8015848:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801584a:	68fb      	ldr	r3, [r7, #12]
 801584c:	681a      	ldr	r2, [r3, #0]
 801584e:	68fb      	ldr	r3, [r7, #12]
 8015850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015852:	3b01      	subs	r3, #1
 8015854:	68f9      	ldr	r1, [r7, #12]
 8015856:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015858:	fb01 f303 	mul.w	r3, r1, r3
 801585c:	441a      	add	r2, r3
 801585e:	68fb      	ldr	r3, [r7, #12]
 8015860:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8015862:	68fb      	ldr	r3, [r7, #12]
 8015864:	22ff      	movs	r2, #255	; 0xff
 8015866:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801586a:	68fb      	ldr	r3, [r7, #12]
 801586c:	22ff      	movs	r2, #255	; 0xff
 801586e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8015872:	683b      	ldr	r3, [r7, #0]
 8015874:	2b00      	cmp	r3, #0
 8015876:	d114      	bne.n	80158a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015878:	68fb      	ldr	r3, [r7, #12]
 801587a:	691b      	ldr	r3, [r3, #16]
 801587c:	2b00      	cmp	r3, #0
 801587e:	d01a      	beq.n	80158b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015880:	68fb      	ldr	r3, [r7, #12]
 8015882:	3310      	adds	r3, #16
 8015884:	4618      	mov	r0, r3
 8015886:	f001 fbd3 	bl	8017030 <xTaskRemoveFromEventList>
 801588a:	4603      	mov	r3, r0
 801588c:	2b00      	cmp	r3, #0
 801588e:	d012      	beq.n	80158b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8015890:	4b0c      	ldr	r3, [pc, #48]	; (80158c4 <xQueueGenericReset+0xcc>)
 8015892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015896:	601a      	str	r2, [r3, #0]
 8015898:	f3bf 8f4f 	dsb	sy
 801589c:	f3bf 8f6f 	isb	sy
 80158a0:	e009      	b.n	80158b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80158a2:	68fb      	ldr	r3, [r7, #12]
 80158a4:	3310      	adds	r3, #16
 80158a6:	4618      	mov	r0, r3
 80158a8:	f7ff fef2 	bl	8015690 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80158ac:	68fb      	ldr	r3, [r7, #12]
 80158ae:	3324      	adds	r3, #36	; 0x24
 80158b0:	4618      	mov	r0, r3
 80158b2:	f7ff feed 	bl	8015690 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80158b6:	f002 fd65 	bl	8018384 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80158ba:	2301      	movs	r3, #1
}
 80158bc:	4618      	mov	r0, r3
 80158be:	3710      	adds	r7, #16
 80158c0:	46bd      	mov	sp, r7
 80158c2:	bd80      	pop	{r7, pc}
 80158c4:	e000ed04 	.word	0xe000ed04

080158c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80158c8:	b580      	push	{r7, lr}
 80158ca:	b08e      	sub	sp, #56	; 0x38
 80158cc:	af02      	add	r7, sp, #8
 80158ce:	60f8      	str	r0, [r7, #12]
 80158d0:	60b9      	str	r1, [r7, #8]
 80158d2:	607a      	str	r2, [r7, #4]
 80158d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80158d6:	68fb      	ldr	r3, [r7, #12]
 80158d8:	2b00      	cmp	r3, #0
 80158da:	d10a      	bne.n	80158f2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80158dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158e0:	f383 8811 	msr	BASEPRI, r3
 80158e4:	f3bf 8f6f 	isb	sy
 80158e8:	f3bf 8f4f 	dsb	sy
 80158ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80158ee:	bf00      	nop
 80158f0:	e7fe      	b.n	80158f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80158f2:	683b      	ldr	r3, [r7, #0]
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d10a      	bne.n	801590e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80158f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158fc:	f383 8811 	msr	BASEPRI, r3
 8015900:	f3bf 8f6f 	isb	sy
 8015904:	f3bf 8f4f 	dsb	sy
 8015908:	627b      	str	r3, [r7, #36]	; 0x24
}
 801590a:	bf00      	nop
 801590c:	e7fe      	b.n	801590c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	2b00      	cmp	r3, #0
 8015912:	d002      	beq.n	801591a <xQueueGenericCreateStatic+0x52>
 8015914:	68bb      	ldr	r3, [r7, #8]
 8015916:	2b00      	cmp	r3, #0
 8015918:	d001      	beq.n	801591e <xQueueGenericCreateStatic+0x56>
 801591a:	2301      	movs	r3, #1
 801591c:	e000      	b.n	8015920 <xQueueGenericCreateStatic+0x58>
 801591e:	2300      	movs	r3, #0
 8015920:	2b00      	cmp	r3, #0
 8015922:	d10a      	bne.n	801593a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8015924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015928:	f383 8811 	msr	BASEPRI, r3
 801592c:	f3bf 8f6f 	isb	sy
 8015930:	f3bf 8f4f 	dsb	sy
 8015934:	623b      	str	r3, [r7, #32]
}
 8015936:	bf00      	nop
 8015938:	e7fe      	b.n	8015938 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	2b00      	cmp	r3, #0
 801593e:	d102      	bne.n	8015946 <xQueueGenericCreateStatic+0x7e>
 8015940:	68bb      	ldr	r3, [r7, #8]
 8015942:	2b00      	cmp	r3, #0
 8015944:	d101      	bne.n	801594a <xQueueGenericCreateStatic+0x82>
 8015946:	2301      	movs	r3, #1
 8015948:	e000      	b.n	801594c <xQueueGenericCreateStatic+0x84>
 801594a:	2300      	movs	r3, #0
 801594c:	2b00      	cmp	r3, #0
 801594e:	d10a      	bne.n	8015966 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8015950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015954:	f383 8811 	msr	BASEPRI, r3
 8015958:	f3bf 8f6f 	isb	sy
 801595c:	f3bf 8f4f 	dsb	sy
 8015960:	61fb      	str	r3, [r7, #28]
}
 8015962:	bf00      	nop
 8015964:	e7fe      	b.n	8015964 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8015966:	2350      	movs	r3, #80	; 0x50
 8015968:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801596a:	697b      	ldr	r3, [r7, #20]
 801596c:	2b50      	cmp	r3, #80	; 0x50
 801596e:	d00a      	beq.n	8015986 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8015970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015974:	f383 8811 	msr	BASEPRI, r3
 8015978:	f3bf 8f6f 	isb	sy
 801597c:	f3bf 8f4f 	dsb	sy
 8015980:	61bb      	str	r3, [r7, #24]
}
 8015982:	bf00      	nop
 8015984:	e7fe      	b.n	8015984 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8015986:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015988:	683b      	ldr	r3, [r7, #0]
 801598a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801598c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801598e:	2b00      	cmp	r3, #0
 8015990:	d00d      	beq.n	80159ae <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8015992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015994:	2201      	movs	r2, #1
 8015996:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801599a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801599e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159a0:	9300      	str	r3, [sp, #0]
 80159a2:	4613      	mov	r3, r2
 80159a4:	687a      	ldr	r2, [r7, #4]
 80159a6:	68b9      	ldr	r1, [r7, #8]
 80159a8:	68f8      	ldr	r0, [r7, #12]
 80159aa:	f000 f83f 	bl	8015a2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80159ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80159b0:	4618      	mov	r0, r3
 80159b2:	3730      	adds	r7, #48	; 0x30
 80159b4:	46bd      	mov	sp, r7
 80159b6:	bd80      	pop	{r7, pc}

080159b8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80159b8:	b580      	push	{r7, lr}
 80159ba:	b08a      	sub	sp, #40	; 0x28
 80159bc:	af02      	add	r7, sp, #8
 80159be:	60f8      	str	r0, [r7, #12]
 80159c0:	60b9      	str	r1, [r7, #8]
 80159c2:	4613      	mov	r3, r2
 80159c4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80159c6:	68fb      	ldr	r3, [r7, #12]
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	d10a      	bne.n	80159e2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80159cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159d0:	f383 8811 	msr	BASEPRI, r3
 80159d4:	f3bf 8f6f 	isb	sy
 80159d8:	f3bf 8f4f 	dsb	sy
 80159dc:	613b      	str	r3, [r7, #16]
}
 80159de:	bf00      	nop
 80159e0:	e7fe      	b.n	80159e0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80159e2:	68fb      	ldr	r3, [r7, #12]
 80159e4:	68ba      	ldr	r2, [r7, #8]
 80159e6:	fb02 f303 	mul.w	r3, r2, r3
 80159ea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80159ec:	69fb      	ldr	r3, [r7, #28]
 80159ee:	3350      	adds	r3, #80	; 0x50
 80159f0:	4618      	mov	r0, r3
 80159f2:	f002 fdb9 	bl	8018568 <pvPortMalloc>
 80159f6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80159f8:	69bb      	ldr	r3, [r7, #24]
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d011      	beq.n	8015a22 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80159fe:	69bb      	ldr	r3, [r7, #24]
 8015a00:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015a02:	697b      	ldr	r3, [r7, #20]
 8015a04:	3350      	adds	r3, #80	; 0x50
 8015a06:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015a08:	69bb      	ldr	r3, [r7, #24]
 8015a0a:	2200      	movs	r2, #0
 8015a0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015a10:	79fa      	ldrb	r2, [r7, #7]
 8015a12:	69bb      	ldr	r3, [r7, #24]
 8015a14:	9300      	str	r3, [sp, #0]
 8015a16:	4613      	mov	r3, r2
 8015a18:	697a      	ldr	r2, [r7, #20]
 8015a1a:	68b9      	ldr	r1, [r7, #8]
 8015a1c:	68f8      	ldr	r0, [r7, #12]
 8015a1e:	f000 f805 	bl	8015a2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015a22:	69bb      	ldr	r3, [r7, #24]
	}
 8015a24:	4618      	mov	r0, r3
 8015a26:	3720      	adds	r7, #32
 8015a28:	46bd      	mov	sp, r7
 8015a2a:	bd80      	pop	{r7, pc}

08015a2c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8015a2c:	b580      	push	{r7, lr}
 8015a2e:	b084      	sub	sp, #16
 8015a30:	af00      	add	r7, sp, #0
 8015a32:	60f8      	str	r0, [r7, #12]
 8015a34:	60b9      	str	r1, [r7, #8]
 8015a36:	607a      	str	r2, [r7, #4]
 8015a38:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8015a3a:	68bb      	ldr	r3, [r7, #8]
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	d103      	bne.n	8015a48 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8015a40:	69bb      	ldr	r3, [r7, #24]
 8015a42:	69ba      	ldr	r2, [r7, #24]
 8015a44:	601a      	str	r2, [r3, #0]
 8015a46:	e002      	b.n	8015a4e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8015a48:	69bb      	ldr	r3, [r7, #24]
 8015a4a:	687a      	ldr	r2, [r7, #4]
 8015a4c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8015a4e:	69bb      	ldr	r3, [r7, #24]
 8015a50:	68fa      	ldr	r2, [r7, #12]
 8015a52:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8015a54:	69bb      	ldr	r3, [r7, #24]
 8015a56:	68ba      	ldr	r2, [r7, #8]
 8015a58:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015a5a:	2101      	movs	r1, #1
 8015a5c:	69b8      	ldr	r0, [r7, #24]
 8015a5e:	f7ff fecb 	bl	80157f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8015a62:	69bb      	ldr	r3, [r7, #24]
 8015a64:	78fa      	ldrb	r2, [r7, #3]
 8015a66:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8015a6a:	bf00      	nop
 8015a6c:	3710      	adds	r7, #16
 8015a6e:	46bd      	mov	sp, r7
 8015a70:	bd80      	pop	{r7, pc}

08015a72 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8015a72:	b580      	push	{r7, lr}
 8015a74:	b082      	sub	sp, #8
 8015a76:	af00      	add	r7, sp, #0
 8015a78:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	d00e      	beq.n	8015a9e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	2200      	movs	r2, #0
 8015a84:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	2200      	movs	r2, #0
 8015a8a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	2200      	movs	r2, #0
 8015a90:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8015a92:	2300      	movs	r3, #0
 8015a94:	2200      	movs	r2, #0
 8015a96:	2100      	movs	r1, #0
 8015a98:	6878      	ldr	r0, [r7, #4]
 8015a9a:	f000 f8a1 	bl	8015be0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8015a9e:	bf00      	nop
 8015aa0:	3708      	adds	r7, #8
 8015aa2:	46bd      	mov	sp, r7
 8015aa4:	bd80      	pop	{r7, pc}

08015aa6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8015aa6:	b580      	push	{r7, lr}
 8015aa8:	b086      	sub	sp, #24
 8015aaa:	af00      	add	r7, sp, #0
 8015aac:	4603      	mov	r3, r0
 8015aae:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8015ab0:	2301      	movs	r3, #1
 8015ab2:	617b      	str	r3, [r7, #20]
 8015ab4:	2300      	movs	r3, #0
 8015ab6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8015ab8:	79fb      	ldrb	r3, [r7, #7]
 8015aba:	461a      	mov	r2, r3
 8015abc:	6939      	ldr	r1, [r7, #16]
 8015abe:	6978      	ldr	r0, [r7, #20]
 8015ac0:	f7ff ff7a 	bl	80159b8 <xQueueGenericCreate>
 8015ac4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8015ac6:	68f8      	ldr	r0, [r7, #12]
 8015ac8:	f7ff ffd3 	bl	8015a72 <prvInitialiseMutex>

		return xNewQueue;
 8015acc:	68fb      	ldr	r3, [r7, #12]
	}
 8015ace:	4618      	mov	r0, r3
 8015ad0:	3718      	adds	r7, #24
 8015ad2:	46bd      	mov	sp, r7
 8015ad4:	bd80      	pop	{r7, pc}

08015ad6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8015ad6:	b580      	push	{r7, lr}
 8015ad8:	b088      	sub	sp, #32
 8015ada:	af02      	add	r7, sp, #8
 8015adc:	4603      	mov	r3, r0
 8015ade:	6039      	str	r1, [r7, #0]
 8015ae0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8015ae2:	2301      	movs	r3, #1
 8015ae4:	617b      	str	r3, [r7, #20]
 8015ae6:	2300      	movs	r3, #0
 8015ae8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8015aea:	79fb      	ldrb	r3, [r7, #7]
 8015aec:	9300      	str	r3, [sp, #0]
 8015aee:	683b      	ldr	r3, [r7, #0]
 8015af0:	2200      	movs	r2, #0
 8015af2:	6939      	ldr	r1, [r7, #16]
 8015af4:	6978      	ldr	r0, [r7, #20]
 8015af6:	f7ff fee7 	bl	80158c8 <xQueueGenericCreateStatic>
 8015afa:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8015afc:	68f8      	ldr	r0, [r7, #12]
 8015afe:	f7ff ffb8 	bl	8015a72 <prvInitialiseMutex>

		return xNewQueue;
 8015b02:	68fb      	ldr	r3, [r7, #12]
	}
 8015b04:	4618      	mov	r0, r3
 8015b06:	3718      	adds	r7, #24
 8015b08:	46bd      	mov	sp, r7
 8015b0a:	bd80      	pop	{r7, pc}

08015b0c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8015b0c:	b590      	push	{r4, r7, lr}
 8015b0e:	b087      	sub	sp, #28
 8015b10:	af00      	add	r7, sp, #0
 8015b12:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8015b18:	693b      	ldr	r3, [r7, #16]
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d10a      	bne.n	8015b34 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8015b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b22:	f383 8811 	msr	BASEPRI, r3
 8015b26:	f3bf 8f6f 	isb	sy
 8015b2a:	f3bf 8f4f 	dsb	sy
 8015b2e:	60fb      	str	r3, [r7, #12]
}
 8015b30:	bf00      	nop
 8015b32:	e7fe      	b.n	8015b32 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8015b34:	693b      	ldr	r3, [r7, #16]
 8015b36:	689c      	ldr	r4, [r3, #8]
 8015b38:	f001 fc9a 	bl	8017470 <xTaskGetCurrentTaskHandle>
 8015b3c:	4603      	mov	r3, r0
 8015b3e:	429c      	cmp	r4, r3
 8015b40:	d111      	bne.n	8015b66 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8015b42:	693b      	ldr	r3, [r7, #16]
 8015b44:	68db      	ldr	r3, [r3, #12]
 8015b46:	1e5a      	subs	r2, r3, #1
 8015b48:	693b      	ldr	r3, [r7, #16]
 8015b4a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8015b4c:	693b      	ldr	r3, [r7, #16]
 8015b4e:	68db      	ldr	r3, [r3, #12]
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	d105      	bne.n	8015b60 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8015b54:	2300      	movs	r3, #0
 8015b56:	2200      	movs	r2, #0
 8015b58:	2100      	movs	r1, #0
 8015b5a:	6938      	ldr	r0, [r7, #16]
 8015b5c:	f000 f840 	bl	8015be0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8015b60:	2301      	movs	r3, #1
 8015b62:	617b      	str	r3, [r7, #20]
 8015b64:	e001      	b.n	8015b6a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8015b66:	2300      	movs	r3, #0
 8015b68:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8015b6a:	697b      	ldr	r3, [r7, #20]
	}
 8015b6c:	4618      	mov	r0, r3
 8015b6e:	371c      	adds	r7, #28
 8015b70:	46bd      	mov	sp, r7
 8015b72:	bd90      	pop	{r4, r7, pc}

08015b74 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8015b74:	b590      	push	{r4, r7, lr}
 8015b76:	b087      	sub	sp, #28
 8015b78:	af00      	add	r7, sp, #0
 8015b7a:	6078      	str	r0, [r7, #4]
 8015b7c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8015b82:	693b      	ldr	r3, [r7, #16]
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d10a      	bne.n	8015b9e <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8015b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b8c:	f383 8811 	msr	BASEPRI, r3
 8015b90:	f3bf 8f6f 	isb	sy
 8015b94:	f3bf 8f4f 	dsb	sy
 8015b98:	60fb      	str	r3, [r7, #12]
}
 8015b9a:	bf00      	nop
 8015b9c:	e7fe      	b.n	8015b9c <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8015b9e:	693b      	ldr	r3, [r7, #16]
 8015ba0:	689c      	ldr	r4, [r3, #8]
 8015ba2:	f001 fc65 	bl	8017470 <xTaskGetCurrentTaskHandle>
 8015ba6:	4603      	mov	r3, r0
 8015ba8:	429c      	cmp	r4, r3
 8015baa:	d107      	bne.n	8015bbc <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8015bac:	693b      	ldr	r3, [r7, #16]
 8015bae:	68db      	ldr	r3, [r3, #12]
 8015bb0:	1c5a      	adds	r2, r3, #1
 8015bb2:	693b      	ldr	r3, [r7, #16]
 8015bb4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8015bb6:	2301      	movs	r3, #1
 8015bb8:	617b      	str	r3, [r7, #20]
 8015bba:	e00c      	b.n	8015bd6 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8015bbc:	6839      	ldr	r1, [r7, #0]
 8015bbe:	6938      	ldr	r0, [r7, #16]
 8015bc0:	f000 fa88 	bl	80160d4 <xQueueSemaphoreTake>
 8015bc4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8015bc6:	697b      	ldr	r3, [r7, #20]
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	d004      	beq.n	8015bd6 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8015bcc:	693b      	ldr	r3, [r7, #16]
 8015bce:	68db      	ldr	r3, [r3, #12]
 8015bd0:	1c5a      	adds	r2, r3, #1
 8015bd2:	693b      	ldr	r3, [r7, #16]
 8015bd4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8015bd6:	697b      	ldr	r3, [r7, #20]
	}
 8015bd8:	4618      	mov	r0, r3
 8015bda:	371c      	adds	r7, #28
 8015bdc:	46bd      	mov	sp, r7
 8015bde:	bd90      	pop	{r4, r7, pc}

08015be0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8015be0:	b580      	push	{r7, lr}
 8015be2:	b08e      	sub	sp, #56	; 0x38
 8015be4:	af00      	add	r7, sp, #0
 8015be6:	60f8      	str	r0, [r7, #12]
 8015be8:	60b9      	str	r1, [r7, #8]
 8015bea:	607a      	str	r2, [r7, #4]
 8015bec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8015bee:	2300      	movs	r3, #0
 8015bf0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015bf2:	68fb      	ldr	r3, [r7, #12]
 8015bf4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bf8:	2b00      	cmp	r3, #0
 8015bfa:	d10a      	bne.n	8015c12 <xQueueGenericSend+0x32>
	__asm volatile
 8015bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c00:	f383 8811 	msr	BASEPRI, r3
 8015c04:	f3bf 8f6f 	isb	sy
 8015c08:	f3bf 8f4f 	dsb	sy
 8015c0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015c0e:	bf00      	nop
 8015c10:	e7fe      	b.n	8015c10 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015c12:	68bb      	ldr	r3, [r7, #8]
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	d103      	bne.n	8015c20 <xQueueGenericSend+0x40>
 8015c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	d101      	bne.n	8015c24 <xQueueGenericSend+0x44>
 8015c20:	2301      	movs	r3, #1
 8015c22:	e000      	b.n	8015c26 <xQueueGenericSend+0x46>
 8015c24:	2300      	movs	r3, #0
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d10a      	bne.n	8015c40 <xQueueGenericSend+0x60>
	__asm volatile
 8015c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c2e:	f383 8811 	msr	BASEPRI, r3
 8015c32:	f3bf 8f6f 	isb	sy
 8015c36:	f3bf 8f4f 	dsb	sy
 8015c3a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015c3c:	bf00      	nop
 8015c3e:	e7fe      	b.n	8015c3e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015c40:	683b      	ldr	r3, [r7, #0]
 8015c42:	2b02      	cmp	r3, #2
 8015c44:	d103      	bne.n	8015c4e <xQueueGenericSend+0x6e>
 8015c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015c4a:	2b01      	cmp	r3, #1
 8015c4c:	d101      	bne.n	8015c52 <xQueueGenericSend+0x72>
 8015c4e:	2301      	movs	r3, #1
 8015c50:	e000      	b.n	8015c54 <xQueueGenericSend+0x74>
 8015c52:	2300      	movs	r3, #0
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	d10a      	bne.n	8015c6e <xQueueGenericSend+0x8e>
	__asm volatile
 8015c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c5c:	f383 8811 	msr	BASEPRI, r3
 8015c60:	f3bf 8f6f 	isb	sy
 8015c64:	f3bf 8f4f 	dsb	sy
 8015c68:	623b      	str	r3, [r7, #32]
}
 8015c6a:	bf00      	nop
 8015c6c:	e7fe      	b.n	8015c6c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015c6e:	f001 fc0f 	bl	8017490 <xTaskGetSchedulerState>
 8015c72:	4603      	mov	r3, r0
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d102      	bne.n	8015c7e <xQueueGenericSend+0x9e>
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	d101      	bne.n	8015c82 <xQueueGenericSend+0xa2>
 8015c7e:	2301      	movs	r3, #1
 8015c80:	e000      	b.n	8015c84 <xQueueGenericSend+0xa4>
 8015c82:	2300      	movs	r3, #0
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	d10a      	bne.n	8015c9e <xQueueGenericSend+0xbe>
	__asm volatile
 8015c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c8c:	f383 8811 	msr	BASEPRI, r3
 8015c90:	f3bf 8f6f 	isb	sy
 8015c94:	f3bf 8f4f 	dsb	sy
 8015c98:	61fb      	str	r3, [r7, #28]
}
 8015c9a:	bf00      	nop
 8015c9c:	e7fe      	b.n	8015c9c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015c9e:	f002 fb41 	bl	8018324 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ca4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015caa:	429a      	cmp	r2, r3
 8015cac:	d302      	bcc.n	8015cb4 <xQueueGenericSend+0xd4>
 8015cae:	683b      	ldr	r3, [r7, #0]
 8015cb0:	2b02      	cmp	r3, #2
 8015cb2:	d129      	bne.n	8015d08 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015cb4:	683a      	ldr	r2, [r7, #0]
 8015cb6:	68b9      	ldr	r1, [r7, #8]
 8015cb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015cba:	f000 fbaf 	bl	801641c <prvCopyDataToQueue>
 8015cbe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	d010      	beq.n	8015cea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cca:	3324      	adds	r3, #36	; 0x24
 8015ccc:	4618      	mov	r0, r3
 8015cce:	f001 f9af 	bl	8017030 <xTaskRemoveFromEventList>
 8015cd2:	4603      	mov	r3, r0
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d013      	beq.n	8015d00 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8015cd8:	4b3f      	ldr	r3, [pc, #252]	; (8015dd8 <xQueueGenericSend+0x1f8>)
 8015cda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015cde:	601a      	str	r2, [r3, #0]
 8015ce0:	f3bf 8f4f 	dsb	sy
 8015ce4:	f3bf 8f6f 	isb	sy
 8015ce8:	e00a      	b.n	8015d00 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8015cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	d007      	beq.n	8015d00 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8015cf0:	4b39      	ldr	r3, [pc, #228]	; (8015dd8 <xQueueGenericSend+0x1f8>)
 8015cf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015cf6:	601a      	str	r2, [r3, #0]
 8015cf8:	f3bf 8f4f 	dsb	sy
 8015cfc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8015d00:	f002 fb40 	bl	8018384 <vPortExitCritical>
				return pdPASS;
 8015d04:	2301      	movs	r3, #1
 8015d06:	e063      	b.n	8015dd0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	d103      	bne.n	8015d16 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015d0e:	f002 fb39 	bl	8018384 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8015d12:	2300      	movs	r3, #0
 8015d14:	e05c      	b.n	8015dd0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	d106      	bne.n	8015d2a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015d1c:	f107 0314 	add.w	r3, r7, #20
 8015d20:	4618      	mov	r0, r3
 8015d22:	f001 fa4b 	bl	80171bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015d26:	2301      	movs	r3, #1
 8015d28:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015d2a:	f002 fb2b 	bl	8018384 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015d2e:	f000 ff1f 	bl	8016b70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015d32:	f002 faf7 	bl	8018324 <vPortEnterCritical>
 8015d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015d3c:	b25b      	sxtb	r3, r3
 8015d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d42:	d103      	bne.n	8015d4c <xQueueGenericSend+0x16c>
 8015d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d46:	2200      	movs	r2, #0
 8015d48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015d52:	b25b      	sxtb	r3, r3
 8015d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d58:	d103      	bne.n	8015d62 <xQueueGenericSend+0x182>
 8015d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d5c:	2200      	movs	r2, #0
 8015d5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015d62:	f002 fb0f 	bl	8018384 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015d66:	1d3a      	adds	r2, r7, #4
 8015d68:	f107 0314 	add.w	r3, r7, #20
 8015d6c:	4611      	mov	r1, r2
 8015d6e:	4618      	mov	r0, r3
 8015d70:	f001 fa3a 	bl	80171e8 <xTaskCheckForTimeOut>
 8015d74:	4603      	mov	r3, r0
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	d124      	bne.n	8015dc4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8015d7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015d7c:	f000 fc46 	bl	801660c <prvIsQueueFull>
 8015d80:	4603      	mov	r3, r0
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	d018      	beq.n	8015db8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8015d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d88:	3310      	adds	r3, #16
 8015d8a:	687a      	ldr	r2, [r7, #4]
 8015d8c:	4611      	mov	r1, r2
 8015d8e:	4618      	mov	r0, r3
 8015d90:	f001 f8c2 	bl	8016f18 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8015d94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015d96:	f000 fbd1 	bl	801653c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8015d9a:	f000 fef7 	bl	8016b8c <xTaskResumeAll>
 8015d9e:	4603      	mov	r3, r0
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	f47f af7c 	bne.w	8015c9e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8015da6:	4b0c      	ldr	r3, [pc, #48]	; (8015dd8 <xQueueGenericSend+0x1f8>)
 8015da8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015dac:	601a      	str	r2, [r3, #0]
 8015dae:	f3bf 8f4f 	dsb	sy
 8015db2:	f3bf 8f6f 	isb	sy
 8015db6:	e772      	b.n	8015c9e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015db8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015dba:	f000 fbbf 	bl	801653c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015dbe:	f000 fee5 	bl	8016b8c <xTaskResumeAll>
 8015dc2:	e76c      	b.n	8015c9e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8015dc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015dc6:	f000 fbb9 	bl	801653c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015dca:	f000 fedf 	bl	8016b8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8015dce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8015dd0:	4618      	mov	r0, r3
 8015dd2:	3738      	adds	r7, #56	; 0x38
 8015dd4:	46bd      	mov	sp, r7
 8015dd6:	bd80      	pop	{r7, pc}
 8015dd8:	e000ed04 	.word	0xe000ed04

08015ddc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8015ddc:	b580      	push	{r7, lr}
 8015dde:	b090      	sub	sp, #64	; 0x40
 8015de0:	af00      	add	r7, sp, #0
 8015de2:	60f8      	str	r0, [r7, #12]
 8015de4:	60b9      	str	r1, [r7, #8]
 8015de6:	607a      	str	r2, [r7, #4]
 8015de8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015dea:	68fb      	ldr	r3, [r7, #12]
 8015dec:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8015dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	d10a      	bne.n	8015e0a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8015df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015df8:	f383 8811 	msr	BASEPRI, r3
 8015dfc:	f3bf 8f6f 	isb	sy
 8015e00:	f3bf 8f4f 	dsb	sy
 8015e04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015e06:	bf00      	nop
 8015e08:	e7fe      	b.n	8015e08 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015e0a:	68bb      	ldr	r3, [r7, #8]
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d103      	bne.n	8015e18 <xQueueGenericSendFromISR+0x3c>
 8015e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d101      	bne.n	8015e1c <xQueueGenericSendFromISR+0x40>
 8015e18:	2301      	movs	r3, #1
 8015e1a:	e000      	b.n	8015e1e <xQueueGenericSendFromISR+0x42>
 8015e1c:	2300      	movs	r3, #0
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d10a      	bne.n	8015e38 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8015e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e26:	f383 8811 	msr	BASEPRI, r3
 8015e2a:	f3bf 8f6f 	isb	sy
 8015e2e:	f3bf 8f4f 	dsb	sy
 8015e32:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015e34:	bf00      	nop
 8015e36:	e7fe      	b.n	8015e36 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015e38:	683b      	ldr	r3, [r7, #0]
 8015e3a:	2b02      	cmp	r3, #2
 8015e3c:	d103      	bne.n	8015e46 <xQueueGenericSendFromISR+0x6a>
 8015e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015e42:	2b01      	cmp	r3, #1
 8015e44:	d101      	bne.n	8015e4a <xQueueGenericSendFromISR+0x6e>
 8015e46:	2301      	movs	r3, #1
 8015e48:	e000      	b.n	8015e4c <xQueueGenericSendFromISR+0x70>
 8015e4a:	2300      	movs	r3, #0
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	d10a      	bne.n	8015e66 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8015e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e54:	f383 8811 	msr	BASEPRI, r3
 8015e58:	f3bf 8f6f 	isb	sy
 8015e5c:	f3bf 8f4f 	dsb	sy
 8015e60:	623b      	str	r3, [r7, #32]
}
 8015e62:	bf00      	nop
 8015e64:	e7fe      	b.n	8015e64 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015e66:	f002 fb3f 	bl	80184e8 <vPortValidateInterruptPriority>
	__asm volatile
 8015e6a:	f3ef 8211 	mrs	r2, BASEPRI
 8015e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e72:	f383 8811 	msr	BASEPRI, r3
 8015e76:	f3bf 8f6f 	isb	sy
 8015e7a:	f3bf 8f4f 	dsb	sy
 8015e7e:	61fa      	str	r2, [r7, #28]
 8015e80:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8015e82:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015e84:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015e8e:	429a      	cmp	r2, r3
 8015e90:	d302      	bcc.n	8015e98 <xQueueGenericSendFromISR+0xbc>
 8015e92:	683b      	ldr	r3, [r7, #0]
 8015e94:	2b02      	cmp	r3, #2
 8015e96:	d12f      	bne.n	8015ef8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015e9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015ea8:	683a      	ldr	r2, [r7, #0]
 8015eaa:	68b9      	ldr	r1, [r7, #8]
 8015eac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015eae:	f000 fab5 	bl	801641c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015eb2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8015eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015eba:	d112      	bne.n	8015ee2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	d016      	beq.n	8015ef2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ec6:	3324      	adds	r3, #36	; 0x24
 8015ec8:	4618      	mov	r0, r3
 8015eca:	f001 f8b1 	bl	8017030 <xTaskRemoveFromEventList>
 8015ece:	4603      	mov	r3, r0
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d00e      	beq.n	8015ef2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	d00b      	beq.n	8015ef2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	2201      	movs	r2, #1
 8015ede:	601a      	str	r2, [r3, #0]
 8015ee0:	e007      	b.n	8015ef2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015ee2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015ee6:	3301      	adds	r3, #1
 8015ee8:	b2db      	uxtb	r3, r3
 8015eea:	b25a      	sxtb	r2, r3
 8015eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015eee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8015ef2:	2301      	movs	r3, #1
 8015ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8015ef6:	e001      	b.n	8015efc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015ef8:	2300      	movs	r3, #0
 8015efa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015efe:	617b      	str	r3, [r7, #20]
	__asm volatile
 8015f00:	697b      	ldr	r3, [r7, #20]
 8015f02:	f383 8811 	msr	BASEPRI, r3
}
 8015f06:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015f08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8015f0a:	4618      	mov	r0, r3
 8015f0c:	3740      	adds	r7, #64	; 0x40
 8015f0e:	46bd      	mov	sp, r7
 8015f10:	bd80      	pop	{r7, pc}
	...

08015f14 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8015f14:	b580      	push	{r7, lr}
 8015f16:	b08c      	sub	sp, #48	; 0x30
 8015f18:	af00      	add	r7, sp, #0
 8015f1a:	60f8      	str	r0, [r7, #12]
 8015f1c:	60b9      	str	r1, [r7, #8]
 8015f1e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8015f20:	2300      	movs	r3, #0
 8015f22:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015f24:	68fb      	ldr	r3, [r7, #12]
 8015f26:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d10a      	bne.n	8015f44 <xQueueReceive+0x30>
	__asm volatile
 8015f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f32:	f383 8811 	msr	BASEPRI, r3
 8015f36:	f3bf 8f6f 	isb	sy
 8015f3a:	f3bf 8f4f 	dsb	sy
 8015f3e:	623b      	str	r3, [r7, #32]
}
 8015f40:	bf00      	nop
 8015f42:	e7fe      	b.n	8015f42 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015f44:	68bb      	ldr	r3, [r7, #8]
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	d103      	bne.n	8015f52 <xQueueReceive+0x3e>
 8015f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d101      	bne.n	8015f56 <xQueueReceive+0x42>
 8015f52:	2301      	movs	r3, #1
 8015f54:	e000      	b.n	8015f58 <xQueueReceive+0x44>
 8015f56:	2300      	movs	r3, #0
 8015f58:	2b00      	cmp	r3, #0
 8015f5a:	d10a      	bne.n	8015f72 <xQueueReceive+0x5e>
	__asm volatile
 8015f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f60:	f383 8811 	msr	BASEPRI, r3
 8015f64:	f3bf 8f6f 	isb	sy
 8015f68:	f3bf 8f4f 	dsb	sy
 8015f6c:	61fb      	str	r3, [r7, #28]
}
 8015f6e:	bf00      	nop
 8015f70:	e7fe      	b.n	8015f70 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015f72:	f001 fa8d 	bl	8017490 <xTaskGetSchedulerState>
 8015f76:	4603      	mov	r3, r0
 8015f78:	2b00      	cmp	r3, #0
 8015f7a:	d102      	bne.n	8015f82 <xQueueReceive+0x6e>
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	d101      	bne.n	8015f86 <xQueueReceive+0x72>
 8015f82:	2301      	movs	r3, #1
 8015f84:	e000      	b.n	8015f88 <xQueueReceive+0x74>
 8015f86:	2300      	movs	r3, #0
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d10a      	bne.n	8015fa2 <xQueueReceive+0x8e>
	__asm volatile
 8015f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f90:	f383 8811 	msr	BASEPRI, r3
 8015f94:	f3bf 8f6f 	isb	sy
 8015f98:	f3bf 8f4f 	dsb	sy
 8015f9c:	61bb      	str	r3, [r7, #24]
}
 8015f9e:	bf00      	nop
 8015fa0:	e7fe      	b.n	8015fa0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015fa2:	f002 f9bf 	bl	8018324 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015faa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d01f      	beq.n	8015ff2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015fb2:	68b9      	ldr	r1, [r7, #8]
 8015fb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015fb6:	f000 fa9b 	bl	80164f0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fbc:	1e5a      	subs	r2, r3, #1
 8015fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fc0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fc4:	691b      	ldr	r3, [r3, #16]
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	d00f      	beq.n	8015fea <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fcc:	3310      	adds	r3, #16
 8015fce:	4618      	mov	r0, r3
 8015fd0:	f001 f82e 	bl	8017030 <xTaskRemoveFromEventList>
 8015fd4:	4603      	mov	r3, r0
 8015fd6:	2b00      	cmp	r3, #0
 8015fd8:	d007      	beq.n	8015fea <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8015fda:	4b3d      	ldr	r3, [pc, #244]	; (80160d0 <xQueueReceive+0x1bc>)
 8015fdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015fe0:	601a      	str	r2, [r3, #0]
 8015fe2:	f3bf 8f4f 	dsb	sy
 8015fe6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015fea:	f002 f9cb 	bl	8018384 <vPortExitCritical>
				return pdPASS;
 8015fee:	2301      	movs	r3, #1
 8015ff0:	e069      	b.n	80160c6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	d103      	bne.n	8016000 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015ff8:	f002 f9c4 	bl	8018384 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015ffc:	2300      	movs	r3, #0
 8015ffe:	e062      	b.n	80160c6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016002:	2b00      	cmp	r3, #0
 8016004:	d106      	bne.n	8016014 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016006:	f107 0310 	add.w	r3, r7, #16
 801600a:	4618      	mov	r0, r3
 801600c:	f001 f8d6 	bl	80171bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016010:	2301      	movs	r3, #1
 8016012:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016014:	f002 f9b6 	bl	8018384 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016018:	f000 fdaa 	bl	8016b70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801601c:	f002 f982 	bl	8018324 <vPortEnterCritical>
 8016020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016022:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016026:	b25b      	sxtb	r3, r3
 8016028:	f1b3 3fff 	cmp.w	r3, #4294967295
 801602c:	d103      	bne.n	8016036 <xQueueReceive+0x122>
 801602e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016030:	2200      	movs	r2, #0
 8016032:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016038:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801603c:	b25b      	sxtb	r3, r3
 801603e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016042:	d103      	bne.n	801604c <xQueueReceive+0x138>
 8016044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016046:	2200      	movs	r2, #0
 8016048:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801604c:	f002 f99a 	bl	8018384 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016050:	1d3a      	adds	r2, r7, #4
 8016052:	f107 0310 	add.w	r3, r7, #16
 8016056:	4611      	mov	r1, r2
 8016058:	4618      	mov	r0, r3
 801605a:	f001 f8c5 	bl	80171e8 <xTaskCheckForTimeOut>
 801605e:	4603      	mov	r3, r0
 8016060:	2b00      	cmp	r3, #0
 8016062:	d123      	bne.n	80160ac <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016064:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016066:	f000 fabb 	bl	80165e0 <prvIsQueueEmpty>
 801606a:	4603      	mov	r3, r0
 801606c:	2b00      	cmp	r3, #0
 801606e:	d017      	beq.n	80160a0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016072:	3324      	adds	r3, #36	; 0x24
 8016074:	687a      	ldr	r2, [r7, #4]
 8016076:	4611      	mov	r1, r2
 8016078:	4618      	mov	r0, r3
 801607a:	f000 ff4d 	bl	8016f18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801607e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016080:	f000 fa5c 	bl	801653c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016084:	f000 fd82 	bl	8016b8c <xTaskResumeAll>
 8016088:	4603      	mov	r3, r0
 801608a:	2b00      	cmp	r3, #0
 801608c:	d189      	bne.n	8015fa2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801608e:	4b10      	ldr	r3, [pc, #64]	; (80160d0 <xQueueReceive+0x1bc>)
 8016090:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016094:	601a      	str	r2, [r3, #0]
 8016096:	f3bf 8f4f 	dsb	sy
 801609a:	f3bf 8f6f 	isb	sy
 801609e:	e780      	b.n	8015fa2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80160a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80160a2:	f000 fa4b 	bl	801653c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80160a6:	f000 fd71 	bl	8016b8c <xTaskResumeAll>
 80160aa:	e77a      	b.n	8015fa2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80160ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80160ae:	f000 fa45 	bl	801653c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80160b2:	f000 fd6b 	bl	8016b8c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80160b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80160b8:	f000 fa92 	bl	80165e0 <prvIsQueueEmpty>
 80160bc:	4603      	mov	r3, r0
 80160be:	2b00      	cmp	r3, #0
 80160c0:	f43f af6f 	beq.w	8015fa2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80160c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80160c6:	4618      	mov	r0, r3
 80160c8:	3730      	adds	r7, #48	; 0x30
 80160ca:	46bd      	mov	sp, r7
 80160cc:	bd80      	pop	{r7, pc}
 80160ce:	bf00      	nop
 80160d0:	e000ed04 	.word	0xe000ed04

080160d4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80160d4:	b580      	push	{r7, lr}
 80160d6:	b08e      	sub	sp, #56	; 0x38
 80160d8:	af00      	add	r7, sp, #0
 80160da:	6078      	str	r0, [r7, #4]
 80160dc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80160de:	2300      	movs	r3, #0
 80160e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80160e6:	2300      	movs	r3, #0
 80160e8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80160ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	d10a      	bne.n	8016106 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80160f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160f4:	f383 8811 	msr	BASEPRI, r3
 80160f8:	f3bf 8f6f 	isb	sy
 80160fc:	f3bf 8f4f 	dsb	sy
 8016100:	623b      	str	r3, [r7, #32]
}
 8016102:	bf00      	nop
 8016104:	e7fe      	b.n	8016104 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8016106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801610a:	2b00      	cmp	r3, #0
 801610c:	d00a      	beq.n	8016124 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801610e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016112:	f383 8811 	msr	BASEPRI, r3
 8016116:	f3bf 8f6f 	isb	sy
 801611a:	f3bf 8f4f 	dsb	sy
 801611e:	61fb      	str	r3, [r7, #28]
}
 8016120:	bf00      	nop
 8016122:	e7fe      	b.n	8016122 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016124:	f001 f9b4 	bl	8017490 <xTaskGetSchedulerState>
 8016128:	4603      	mov	r3, r0
 801612a:	2b00      	cmp	r3, #0
 801612c:	d102      	bne.n	8016134 <xQueueSemaphoreTake+0x60>
 801612e:	683b      	ldr	r3, [r7, #0]
 8016130:	2b00      	cmp	r3, #0
 8016132:	d101      	bne.n	8016138 <xQueueSemaphoreTake+0x64>
 8016134:	2301      	movs	r3, #1
 8016136:	e000      	b.n	801613a <xQueueSemaphoreTake+0x66>
 8016138:	2300      	movs	r3, #0
 801613a:	2b00      	cmp	r3, #0
 801613c:	d10a      	bne.n	8016154 <xQueueSemaphoreTake+0x80>
	__asm volatile
 801613e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016142:	f383 8811 	msr	BASEPRI, r3
 8016146:	f3bf 8f6f 	isb	sy
 801614a:	f3bf 8f4f 	dsb	sy
 801614e:	61bb      	str	r3, [r7, #24]
}
 8016150:	bf00      	nop
 8016152:	e7fe      	b.n	8016152 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016154:	f002 f8e6 	bl	8018324 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8016158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801615a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801615c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801615e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016160:	2b00      	cmp	r3, #0
 8016162:	d024      	beq.n	80161ae <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8016164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016166:	1e5a      	subs	r2, r3, #1
 8016168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801616a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801616c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801616e:	681b      	ldr	r3, [r3, #0]
 8016170:	2b00      	cmp	r3, #0
 8016172:	d104      	bne.n	801617e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8016174:	f001 fb1a 	bl	80177ac <pvTaskIncrementMutexHeldCount>
 8016178:	4602      	mov	r2, r0
 801617a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801617c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801617e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016180:	691b      	ldr	r3, [r3, #16]
 8016182:	2b00      	cmp	r3, #0
 8016184:	d00f      	beq.n	80161a6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016188:	3310      	adds	r3, #16
 801618a:	4618      	mov	r0, r3
 801618c:	f000 ff50 	bl	8017030 <xTaskRemoveFromEventList>
 8016190:	4603      	mov	r3, r0
 8016192:	2b00      	cmp	r3, #0
 8016194:	d007      	beq.n	80161a6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8016196:	4b54      	ldr	r3, [pc, #336]	; (80162e8 <xQueueSemaphoreTake+0x214>)
 8016198:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801619c:	601a      	str	r2, [r3, #0]
 801619e:	f3bf 8f4f 	dsb	sy
 80161a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80161a6:	f002 f8ed 	bl	8018384 <vPortExitCritical>
				return pdPASS;
 80161aa:	2301      	movs	r3, #1
 80161ac:	e097      	b.n	80162de <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80161ae:	683b      	ldr	r3, [r7, #0]
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	d111      	bne.n	80161d8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80161b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	d00a      	beq.n	80161d0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80161ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161be:	f383 8811 	msr	BASEPRI, r3
 80161c2:	f3bf 8f6f 	isb	sy
 80161c6:	f3bf 8f4f 	dsb	sy
 80161ca:	617b      	str	r3, [r7, #20]
}
 80161cc:	bf00      	nop
 80161ce:	e7fe      	b.n	80161ce <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80161d0:	f002 f8d8 	bl	8018384 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80161d4:	2300      	movs	r3, #0
 80161d6:	e082      	b.n	80162de <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80161d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d106      	bne.n	80161ec <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80161de:	f107 030c 	add.w	r3, r7, #12
 80161e2:	4618      	mov	r0, r3
 80161e4:	f000 ffea 	bl	80171bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80161e8:	2301      	movs	r3, #1
 80161ea:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80161ec:	f002 f8ca 	bl	8018384 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80161f0:	f000 fcbe 	bl	8016b70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80161f4:	f002 f896 	bl	8018324 <vPortEnterCritical>
 80161f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80161fe:	b25b      	sxtb	r3, r3
 8016200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016204:	d103      	bne.n	801620e <xQueueSemaphoreTake+0x13a>
 8016206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016208:	2200      	movs	r2, #0
 801620a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801620e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016210:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016214:	b25b      	sxtb	r3, r3
 8016216:	f1b3 3fff 	cmp.w	r3, #4294967295
 801621a:	d103      	bne.n	8016224 <xQueueSemaphoreTake+0x150>
 801621c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801621e:	2200      	movs	r2, #0
 8016220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016224:	f002 f8ae 	bl	8018384 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016228:	463a      	mov	r2, r7
 801622a:	f107 030c 	add.w	r3, r7, #12
 801622e:	4611      	mov	r1, r2
 8016230:	4618      	mov	r0, r3
 8016232:	f000 ffd9 	bl	80171e8 <xTaskCheckForTimeOut>
 8016236:	4603      	mov	r3, r0
 8016238:	2b00      	cmp	r3, #0
 801623a:	d132      	bne.n	80162a2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801623c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801623e:	f000 f9cf 	bl	80165e0 <prvIsQueueEmpty>
 8016242:	4603      	mov	r3, r0
 8016244:	2b00      	cmp	r3, #0
 8016246:	d026      	beq.n	8016296 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801624a:	681b      	ldr	r3, [r3, #0]
 801624c:	2b00      	cmp	r3, #0
 801624e:	d109      	bne.n	8016264 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8016250:	f002 f868 	bl	8018324 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016256:	689b      	ldr	r3, [r3, #8]
 8016258:	4618      	mov	r0, r3
 801625a:	f001 f937 	bl	80174cc <xTaskPriorityInherit>
 801625e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8016260:	f002 f890 	bl	8018384 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016266:	3324      	adds	r3, #36	; 0x24
 8016268:	683a      	ldr	r2, [r7, #0]
 801626a:	4611      	mov	r1, r2
 801626c:	4618      	mov	r0, r3
 801626e:	f000 fe53 	bl	8016f18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016272:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016274:	f000 f962 	bl	801653c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016278:	f000 fc88 	bl	8016b8c <xTaskResumeAll>
 801627c:	4603      	mov	r3, r0
 801627e:	2b00      	cmp	r3, #0
 8016280:	f47f af68 	bne.w	8016154 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8016284:	4b18      	ldr	r3, [pc, #96]	; (80162e8 <xQueueSemaphoreTake+0x214>)
 8016286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801628a:	601a      	str	r2, [r3, #0]
 801628c:	f3bf 8f4f 	dsb	sy
 8016290:	f3bf 8f6f 	isb	sy
 8016294:	e75e      	b.n	8016154 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8016296:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016298:	f000 f950 	bl	801653c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801629c:	f000 fc76 	bl	8016b8c <xTaskResumeAll>
 80162a0:	e758      	b.n	8016154 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80162a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80162a4:	f000 f94a 	bl	801653c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80162a8:	f000 fc70 	bl	8016b8c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80162ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80162ae:	f000 f997 	bl	80165e0 <prvIsQueueEmpty>
 80162b2:	4603      	mov	r3, r0
 80162b4:	2b00      	cmp	r3, #0
 80162b6:	f43f af4d 	beq.w	8016154 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80162ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162bc:	2b00      	cmp	r3, #0
 80162be:	d00d      	beq.n	80162dc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80162c0:	f002 f830 	bl	8018324 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80162c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80162c6:	f000 f891 	bl	80163ec <prvGetDisinheritPriorityAfterTimeout>
 80162ca:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80162cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162ce:	689b      	ldr	r3, [r3, #8]
 80162d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80162d2:	4618      	mov	r0, r3
 80162d4:	f001 f9d0 	bl	8017678 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80162d8:	f002 f854 	bl	8018384 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80162dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80162de:	4618      	mov	r0, r3
 80162e0:	3738      	adds	r7, #56	; 0x38
 80162e2:	46bd      	mov	sp, r7
 80162e4:	bd80      	pop	{r7, pc}
 80162e6:	bf00      	nop
 80162e8:	e000ed04 	.word	0xe000ed04

080162ec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80162ec:	b580      	push	{r7, lr}
 80162ee:	b08e      	sub	sp, #56	; 0x38
 80162f0:	af00      	add	r7, sp, #0
 80162f2:	60f8      	str	r0, [r7, #12]
 80162f4:	60b9      	str	r1, [r7, #8]
 80162f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80162f8:	68fb      	ldr	r3, [r7, #12]
 80162fa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80162fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162fe:	2b00      	cmp	r3, #0
 8016300:	d10a      	bne.n	8016318 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8016302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016306:	f383 8811 	msr	BASEPRI, r3
 801630a:	f3bf 8f6f 	isb	sy
 801630e:	f3bf 8f4f 	dsb	sy
 8016312:	623b      	str	r3, [r7, #32]
}
 8016314:	bf00      	nop
 8016316:	e7fe      	b.n	8016316 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016318:	68bb      	ldr	r3, [r7, #8]
 801631a:	2b00      	cmp	r3, #0
 801631c:	d103      	bne.n	8016326 <xQueueReceiveFromISR+0x3a>
 801631e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016322:	2b00      	cmp	r3, #0
 8016324:	d101      	bne.n	801632a <xQueueReceiveFromISR+0x3e>
 8016326:	2301      	movs	r3, #1
 8016328:	e000      	b.n	801632c <xQueueReceiveFromISR+0x40>
 801632a:	2300      	movs	r3, #0
 801632c:	2b00      	cmp	r3, #0
 801632e:	d10a      	bne.n	8016346 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8016330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016334:	f383 8811 	msr	BASEPRI, r3
 8016338:	f3bf 8f6f 	isb	sy
 801633c:	f3bf 8f4f 	dsb	sy
 8016340:	61fb      	str	r3, [r7, #28]
}
 8016342:	bf00      	nop
 8016344:	e7fe      	b.n	8016344 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016346:	f002 f8cf 	bl	80184e8 <vPortValidateInterruptPriority>
	__asm volatile
 801634a:	f3ef 8211 	mrs	r2, BASEPRI
 801634e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016352:	f383 8811 	msr	BASEPRI, r3
 8016356:	f3bf 8f6f 	isb	sy
 801635a:	f3bf 8f4f 	dsb	sy
 801635e:	61ba      	str	r2, [r7, #24]
 8016360:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8016362:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016364:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801636a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801636c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801636e:	2b00      	cmp	r3, #0
 8016370:	d02f      	beq.n	80163d2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8016372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016374:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016378:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801637c:	68b9      	ldr	r1, [r7, #8]
 801637e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016380:	f000 f8b6 	bl	80164f0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8016384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016386:	1e5a      	subs	r2, r3, #1
 8016388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801638a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801638c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016394:	d112      	bne.n	80163bc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016398:	691b      	ldr	r3, [r3, #16]
 801639a:	2b00      	cmp	r3, #0
 801639c:	d016      	beq.n	80163cc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801639e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163a0:	3310      	adds	r3, #16
 80163a2:	4618      	mov	r0, r3
 80163a4:	f000 fe44 	bl	8017030 <xTaskRemoveFromEventList>
 80163a8:	4603      	mov	r3, r0
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	d00e      	beq.n	80163cc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	2b00      	cmp	r3, #0
 80163b2:	d00b      	beq.n	80163cc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	2201      	movs	r2, #1
 80163b8:	601a      	str	r2, [r3, #0]
 80163ba:	e007      	b.n	80163cc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80163bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80163c0:	3301      	adds	r3, #1
 80163c2:	b2db      	uxtb	r3, r3
 80163c4:	b25a      	sxtb	r2, r3
 80163c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80163cc:	2301      	movs	r3, #1
 80163ce:	637b      	str	r3, [r7, #52]	; 0x34
 80163d0:	e001      	b.n	80163d6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80163d2:	2300      	movs	r3, #0
 80163d4:	637b      	str	r3, [r7, #52]	; 0x34
 80163d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163d8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80163da:	693b      	ldr	r3, [r7, #16]
 80163dc:	f383 8811 	msr	BASEPRI, r3
}
 80163e0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80163e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80163e4:	4618      	mov	r0, r3
 80163e6:	3738      	adds	r7, #56	; 0x38
 80163e8:	46bd      	mov	sp, r7
 80163ea:	bd80      	pop	{r7, pc}

080163ec <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80163ec:	b480      	push	{r7}
 80163ee:	b085      	sub	sp, #20
 80163f0:	af00      	add	r7, sp, #0
 80163f2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	d006      	beq.n	801640a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016400:	681b      	ldr	r3, [r3, #0]
 8016402:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8016406:	60fb      	str	r3, [r7, #12]
 8016408:	e001      	b.n	801640e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801640a:	2300      	movs	r3, #0
 801640c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801640e:	68fb      	ldr	r3, [r7, #12]
	}
 8016410:	4618      	mov	r0, r3
 8016412:	3714      	adds	r7, #20
 8016414:	46bd      	mov	sp, r7
 8016416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801641a:	4770      	bx	lr

0801641c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801641c:	b580      	push	{r7, lr}
 801641e:	b086      	sub	sp, #24
 8016420:	af00      	add	r7, sp, #0
 8016422:	60f8      	str	r0, [r7, #12]
 8016424:	60b9      	str	r1, [r7, #8]
 8016426:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8016428:	2300      	movs	r3, #0
 801642a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801642c:	68fb      	ldr	r3, [r7, #12]
 801642e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016430:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8016432:	68fb      	ldr	r3, [r7, #12]
 8016434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016436:	2b00      	cmp	r3, #0
 8016438:	d10d      	bne.n	8016456 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801643a:	68fb      	ldr	r3, [r7, #12]
 801643c:	681b      	ldr	r3, [r3, #0]
 801643e:	2b00      	cmp	r3, #0
 8016440:	d14d      	bne.n	80164de <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016442:	68fb      	ldr	r3, [r7, #12]
 8016444:	689b      	ldr	r3, [r3, #8]
 8016446:	4618      	mov	r0, r3
 8016448:	f001 f8a8 	bl	801759c <xTaskPriorityDisinherit>
 801644c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801644e:	68fb      	ldr	r3, [r7, #12]
 8016450:	2200      	movs	r2, #0
 8016452:	609a      	str	r2, [r3, #8]
 8016454:	e043      	b.n	80164de <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	2b00      	cmp	r3, #0
 801645a:	d119      	bne.n	8016490 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801645c:	68fb      	ldr	r3, [r7, #12]
 801645e:	6858      	ldr	r0, [r3, #4]
 8016460:	68fb      	ldr	r3, [r7, #12]
 8016462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016464:	461a      	mov	r2, r3
 8016466:	68b9      	ldr	r1, [r7, #8]
 8016468:	f002 fa94 	bl	8018994 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801646c:	68fb      	ldr	r3, [r7, #12]
 801646e:	685a      	ldr	r2, [r3, #4]
 8016470:	68fb      	ldr	r3, [r7, #12]
 8016472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016474:	441a      	add	r2, r3
 8016476:	68fb      	ldr	r3, [r7, #12]
 8016478:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801647a:	68fb      	ldr	r3, [r7, #12]
 801647c:	685a      	ldr	r2, [r3, #4]
 801647e:	68fb      	ldr	r3, [r7, #12]
 8016480:	689b      	ldr	r3, [r3, #8]
 8016482:	429a      	cmp	r2, r3
 8016484:	d32b      	bcc.n	80164de <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8016486:	68fb      	ldr	r3, [r7, #12]
 8016488:	681a      	ldr	r2, [r3, #0]
 801648a:	68fb      	ldr	r3, [r7, #12]
 801648c:	605a      	str	r2, [r3, #4]
 801648e:	e026      	b.n	80164de <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8016490:	68fb      	ldr	r3, [r7, #12]
 8016492:	68d8      	ldr	r0, [r3, #12]
 8016494:	68fb      	ldr	r3, [r7, #12]
 8016496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016498:	461a      	mov	r2, r3
 801649a:	68b9      	ldr	r1, [r7, #8]
 801649c:	f002 fa7a 	bl	8018994 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80164a0:	68fb      	ldr	r3, [r7, #12]
 80164a2:	68da      	ldr	r2, [r3, #12]
 80164a4:	68fb      	ldr	r3, [r7, #12]
 80164a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80164a8:	425b      	negs	r3, r3
 80164aa:	441a      	add	r2, r3
 80164ac:	68fb      	ldr	r3, [r7, #12]
 80164ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80164b0:	68fb      	ldr	r3, [r7, #12]
 80164b2:	68da      	ldr	r2, [r3, #12]
 80164b4:	68fb      	ldr	r3, [r7, #12]
 80164b6:	681b      	ldr	r3, [r3, #0]
 80164b8:	429a      	cmp	r2, r3
 80164ba:	d207      	bcs.n	80164cc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80164bc:	68fb      	ldr	r3, [r7, #12]
 80164be:	689a      	ldr	r2, [r3, #8]
 80164c0:	68fb      	ldr	r3, [r7, #12]
 80164c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80164c4:	425b      	negs	r3, r3
 80164c6:	441a      	add	r2, r3
 80164c8:	68fb      	ldr	r3, [r7, #12]
 80164ca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	2b02      	cmp	r3, #2
 80164d0:	d105      	bne.n	80164de <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80164d2:	693b      	ldr	r3, [r7, #16]
 80164d4:	2b00      	cmp	r3, #0
 80164d6:	d002      	beq.n	80164de <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80164d8:	693b      	ldr	r3, [r7, #16]
 80164da:	3b01      	subs	r3, #1
 80164dc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80164de:	693b      	ldr	r3, [r7, #16]
 80164e0:	1c5a      	adds	r2, r3, #1
 80164e2:	68fb      	ldr	r3, [r7, #12]
 80164e4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80164e6:	697b      	ldr	r3, [r7, #20]
}
 80164e8:	4618      	mov	r0, r3
 80164ea:	3718      	adds	r7, #24
 80164ec:	46bd      	mov	sp, r7
 80164ee:	bd80      	pop	{r7, pc}

080164f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80164f0:	b580      	push	{r7, lr}
 80164f2:	b082      	sub	sp, #8
 80164f4:	af00      	add	r7, sp, #0
 80164f6:	6078      	str	r0, [r7, #4]
 80164f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80164fe:	2b00      	cmp	r3, #0
 8016500:	d018      	beq.n	8016534 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	68da      	ldr	r2, [r3, #12]
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801650a:	441a      	add	r2, r3
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	68da      	ldr	r2, [r3, #12]
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	689b      	ldr	r3, [r3, #8]
 8016518:	429a      	cmp	r2, r3
 801651a:	d303      	bcc.n	8016524 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	681a      	ldr	r2, [r3, #0]
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	68d9      	ldr	r1, [r3, #12]
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801652c:	461a      	mov	r2, r3
 801652e:	6838      	ldr	r0, [r7, #0]
 8016530:	f002 fa30 	bl	8018994 <memcpy>
	}
}
 8016534:	bf00      	nop
 8016536:	3708      	adds	r7, #8
 8016538:	46bd      	mov	sp, r7
 801653a:	bd80      	pop	{r7, pc}

0801653c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801653c:	b580      	push	{r7, lr}
 801653e:	b084      	sub	sp, #16
 8016540:	af00      	add	r7, sp, #0
 8016542:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8016544:	f001 feee 	bl	8018324 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801654e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016550:	e011      	b.n	8016576 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016556:	2b00      	cmp	r3, #0
 8016558:	d012      	beq.n	8016580 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	3324      	adds	r3, #36	; 0x24
 801655e:	4618      	mov	r0, r3
 8016560:	f000 fd66 	bl	8017030 <xTaskRemoveFromEventList>
 8016564:	4603      	mov	r3, r0
 8016566:	2b00      	cmp	r3, #0
 8016568:	d001      	beq.n	801656e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801656a:	f000 fe9f 	bl	80172ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801656e:	7bfb      	ldrb	r3, [r7, #15]
 8016570:	3b01      	subs	r3, #1
 8016572:	b2db      	uxtb	r3, r3
 8016574:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801657a:	2b00      	cmp	r3, #0
 801657c:	dce9      	bgt.n	8016552 <prvUnlockQueue+0x16>
 801657e:	e000      	b.n	8016582 <prvUnlockQueue+0x46>
					break;
 8016580:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	22ff      	movs	r2, #255	; 0xff
 8016586:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801658a:	f001 fefb 	bl	8018384 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801658e:	f001 fec9 	bl	8018324 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8016592:	687b      	ldr	r3, [r7, #4]
 8016594:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016598:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801659a:	e011      	b.n	80165c0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801659c:	687b      	ldr	r3, [r7, #4]
 801659e:	691b      	ldr	r3, [r3, #16]
 80165a0:	2b00      	cmp	r3, #0
 80165a2:	d012      	beq.n	80165ca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80165a4:	687b      	ldr	r3, [r7, #4]
 80165a6:	3310      	adds	r3, #16
 80165a8:	4618      	mov	r0, r3
 80165aa:	f000 fd41 	bl	8017030 <xTaskRemoveFromEventList>
 80165ae:	4603      	mov	r3, r0
 80165b0:	2b00      	cmp	r3, #0
 80165b2:	d001      	beq.n	80165b8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80165b4:	f000 fe7a 	bl	80172ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80165b8:	7bbb      	ldrb	r3, [r7, #14]
 80165ba:	3b01      	subs	r3, #1
 80165bc:	b2db      	uxtb	r3, r3
 80165be:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80165c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	dce9      	bgt.n	801659c <prvUnlockQueue+0x60>
 80165c8:	e000      	b.n	80165cc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80165ca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	22ff      	movs	r2, #255	; 0xff
 80165d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80165d4:	f001 fed6 	bl	8018384 <vPortExitCritical>
}
 80165d8:	bf00      	nop
 80165da:	3710      	adds	r7, #16
 80165dc:	46bd      	mov	sp, r7
 80165de:	bd80      	pop	{r7, pc}

080165e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80165e0:	b580      	push	{r7, lr}
 80165e2:	b084      	sub	sp, #16
 80165e4:	af00      	add	r7, sp, #0
 80165e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80165e8:	f001 fe9c 	bl	8018324 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d102      	bne.n	80165fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80165f4:	2301      	movs	r3, #1
 80165f6:	60fb      	str	r3, [r7, #12]
 80165f8:	e001      	b.n	80165fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80165fa:	2300      	movs	r3, #0
 80165fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80165fe:	f001 fec1 	bl	8018384 <vPortExitCritical>

	return xReturn;
 8016602:	68fb      	ldr	r3, [r7, #12]
}
 8016604:	4618      	mov	r0, r3
 8016606:	3710      	adds	r7, #16
 8016608:	46bd      	mov	sp, r7
 801660a:	bd80      	pop	{r7, pc}

0801660c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801660c:	b580      	push	{r7, lr}
 801660e:	b084      	sub	sp, #16
 8016610:	af00      	add	r7, sp, #0
 8016612:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016614:	f001 fe86 	bl	8018324 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016620:	429a      	cmp	r2, r3
 8016622:	d102      	bne.n	801662a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8016624:	2301      	movs	r3, #1
 8016626:	60fb      	str	r3, [r7, #12]
 8016628:	e001      	b.n	801662e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801662a:	2300      	movs	r3, #0
 801662c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801662e:	f001 fea9 	bl	8018384 <vPortExitCritical>

	return xReturn;
 8016632:	68fb      	ldr	r3, [r7, #12]
}
 8016634:	4618      	mov	r0, r3
 8016636:	3710      	adds	r7, #16
 8016638:	46bd      	mov	sp, r7
 801663a:	bd80      	pop	{r7, pc}

0801663c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801663c:	b480      	push	{r7}
 801663e:	b085      	sub	sp, #20
 8016640:	af00      	add	r7, sp, #0
 8016642:	6078      	str	r0, [r7, #4]
 8016644:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016646:	2300      	movs	r3, #0
 8016648:	60fb      	str	r3, [r7, #12]
 801664a:	e014      	b.n	8016676 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801664c:	4a0f      	ldr	r2, [pc, #60]	; (801668c <vQueueAddToRegistry+0x50>)
 801664e:	68fb      	ldr	r3, [r7, #12]
 8016650:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8016654:	2b00      	cmp	r3, #0
 8016656:	d10b      	bne.n	8016670 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8016658:	490c      	ldr	r1, [pc, #48]	; (801668c <vQueueAddToRegistry+0x50>)
 801665a:	68fb      	ldr	r3, [r7, #12]
 801665c:	683a      	ldr	r2, [r7, #0]
 801665e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8016662:	4a0a      	ldr	r2, [pc, #40]	; (801668c <vQueueAddToRegistry+0x50>)
 8016664:	68fb      	ldr	r3, [r7, #12]
 8016666:	00db      	lsls	r3, r3, #3
 8016668:	4413      	add	r3, r2
 801666a:	687a      	ldr	r2, [r7, #4]
 801666c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801666e:	e006      	b.n	801667e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016670:	68fb      	ldr	r3, [r7, #12]
 8016672:	3301      	adds	r3, #1
 8016674:	60fb      	str	r3, [r7, #12]
 8016676:	68fb      	ldr	r3, [r7, #12]
 8016678:	2b07      	cmp	r3, #7
 801667a:	d9e7      	bls.n	801664c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801667c:	bf00      	nop
 801667e:	bf00      	nop
 8016680:	3714      	adds	r7, #20
 8016682:	46bd      	mov	sp, r7
 8016684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016688:	4770      	bx	lr
 801668a:	bf00      	nop
 801668c:	20005b64 	.word	0x20005b64

08016690 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8016690:	b580      	push	{r7, lr}
 8016692:	b086      	sub	sp, #24
 8016694:	af00      	add	r7, sp, #0
 8016696:	60f8      	str	r0, [r7, #12]
 8016698:	60b9      	str	r1, [r7, #8]
 801669a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801669c:	68fb      	ldr	r3, [r7, #12]
 801669e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80166a0:	f001 fe40 	bl	8018324 <vPortEnterCritical>
 80166a4:	697b      	ldr	r3, [r7, #20]
 80166a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80166aa:	b25b      	sxtb	r3, r3
 80166ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80166b0:	d103      	bne.n	80166ba <vQueueWaitForMessageRestricted+0x2a>
 80166b2:	697b      	ldr	r3, [r7, #20]
 80166b4:	2200      	movs	r2, #0
 80166b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80166ba:	697b      	ldr	r3, [r7, #20]
 80166bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80166c0:	b25b      	sxtb	r3, r3
 80166c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80166c6:	d103      	bne.n	80166d0 <vQueueWaitForMessageRestricted+0x40>
 80166c8:	697b      	ldr	r3, [r7, #20]
 80166ca:	2200      	movs	r2, #0
 80166cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80166d0:	f001 fe58 	bl	8018384 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80166d4:	697b      	ldr	r3, [r7, #20]
 80166d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80166d8:	2b00      	cmp	r3, #0
 80166da:	d106      	bne.n	80166ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80166dc:	697b      	ldr	r3, [r7, #20]
 80166de:	3324      	adds	r3, #36	; 0x24
 80166e0:	687a      	ldr	r2, [r7, #4]
 80166e2:	68b9      	ldr	r1, [r7, #8]
 80166e4:	4618      	mov	r0, r3
 80166e6:	f000 fc77 	bl	8016fd8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80166ea:	6978      	ldr	r0, [r7, #20]
 80166ec:	f7ff ff26 	bl	801653c <prvUnlockQueue>
	}
 80166f0:	bf00      	nop
 80166f2:	3718      	adds	r7, #24
 80166f4:	46bd      	mov	sp, r7
 80166f6:	bd80      	pop	{r7, pc}

080166f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80166f8:	b580      	push	{r7, lr}
 80166fa:	b08e      	sub	sp, #56	; 0x38
 80166fc:	af04      	add	r7, sp, #16
 80166fe:	60f8      	str	r0, [r7, #12]
 8016700:	60b9      	str	r1, [r7, #8]
 8016702:	607a      	str	r2, [r7, #4]
 8016704:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8016706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016708:	2b00      	cmp	r3, #0
 801670a:	d10a      	bne.n	8016722 <xTaskCreateStatic+0x2a>
	__asm volatile
 801670c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016710:	f383 8811 	msr	BASEPRI, r3
 8016714:	f3bf 8f6f 	isb	sy
 8016718:	f3bf 8f4f 	dsb	sy
 801671c:	623b      	str	r3, [r7, #32]
}
 801671e:	bf00      	nop
 8016720:	e7fe      	b.n	8016720 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8016722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016724:	2b00      	cmp	r3, #0
 8016726:	d10a      	bne.n	801673e <xTaskCreateStatic+0x46>
	__asm volatile
 8016728:	f04f 0350 	mov.w	r3, #80	; 0x50
 801672c:	f383 8811 	msr	BASEPRI, r3
 8016730:	f3bf 8f6f 	isb	sy
 8016734:	f3bf 8f4f 	dsb	sy
 8016738:	61fb      	str	r3, [r7, #28]
}
 801673a:	bf00      	nop
 801673c:	e7fe      	b.n	801673c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801673e:	236c      	movs	r3, #108	; 0x6c
 8016740:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8016742:	693b      	ldr	r3, [r7, #16]
 8016744:	2b6c      	cmp	r3, #108	; 0x6c
 8016746:	d00a      	beq.n	801675e <xTaskCreateStatic+0x66>
	__asm volatile
 8016748:	f04f 0350 	mov.w	r3, #80	; 0x50
 801674c:	f383 8811 	msr	BASEPRI, r3
 8016750:	f3bf 8f6f 	isb	sy
 8016754:	f3bf 8f4f 	dsb	sy
 8016758:	61bb      	str	r3, [r7, #24]
}
 801675a:	bf00      	nop
 801675c:	e7fe      	b.n	801675c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801675e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8016760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016762:	2b00      	cmp	r3, #0
 8016764:	d01e      	beq.n	80167a4 <xTaskCreateStatic+0xac>
 8016766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016768:	2b00      	cmp	r3, #0
 801676a:	d01b      	beq.n	80167a4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801676c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801676e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8016770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016772:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016774:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8016776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016778:	2202      	movs	r2, #2
 801677a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801677e:	2300      	movs	r3, #0
 8016780:	9303      	str	r3, [sp, #12]
 8016782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016784:	9302      	str	r3, [sp, #8]
 8016786:	f107 0314 	add.w	r3, r7, #20
 801678a:	9301      	str	r3, [sp, #4]
 801678c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801678e:	9300      	str	r3, [sp, #0]
 8016790:	683b      	ldr	r3, [r7, #0]
 8016792:	687a      	ldr	r2, [r7, #4]
 8016794:	68b9      	ldr	r1, [r7, #8]
 8016796:	68f8      	ldr	r0, [r7, #12]
 8016798:	f000 f850 	bl	801683c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801679c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801679e:	f000 f8dd 	bl	801695c <prvAddNewTaskToReadyList>
 80167a2:	e001      	b.n	80167a8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80167a4:	2300      	movs	r3, #0
 80167a6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80167a8:	697b      	ldr	r3, [r7, #20]
	}
 80167aa:	4618      	mov	r0, r3
 80167ac:	3728      	adds	r7, #40	; 0x28
 80167ae:	46bd      	mov	sp, r7
 80167b0:	bd80      	pop	{r7, pc}

080167b2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80167b2:	b580      	push	{r7, lr}
 80167b4:	b08c      	sub	sp, #48	; 0x30
 80167b6:	af04      	add	r7, sp, #16
 80167b8:	60f8      	str	r0, [r7, #12]
 80167ba:	60b9      	str	r1, [r7, #8]
 80167bc:	603b      	str	r3, [r7, #0]
 80167be:	4613      	mov	r3, r2
 80167c0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80167c2:	88fb      	ldrh	r3, [r7, #6]
 80167c4:	009b      	lsls	r3, r3, #2
 80167c6:	4618      	mov	r0, r3
 80167c8:	f001 fece 	bl	8018568 <pvPortMalloc>
 80167cc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80167ce:	697b      	ldr	r3, [r7, #20]
 80167d0:	2b00      	cmp	r3, #0
 80167d2:	d00e      	beq.n	80167f2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80167d4:	206c      	movs	r0, #108	; 0x6c
 80167d6:	f001 fec7 	bl	8018568 <pvPortMalloc>
 80167da:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80167dc:	69fb      	ldr	r3, [r7, #28]
 80167de:	2b00      	cmp	r3, #0
 80167e0:	d003      	beq.n	80167ea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80167e2:	69fb      	ldr	r3, [r7, #28]
 80167e4:	697a      	ldr	r2, [r7, #20]
 80167e6:	631a      	str	r2, [r3, #48]	; 0x30
 80167e8:	e005      	b.n	80167f6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80167ea:	6978      	ldr	r0, [r7, #20]
 80167ec:	f001 ff88 	bl	8018700 <vPortFree>
 80167f0:	e001      	b.n	80167f6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80167f2:	2300      	movs	r3, #0
 80167f4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80167f6:	69fb      	ldr	r3, [r7, #28]
 80167f8:	2b00      	cmp	r3, #0
 80167fa:	d017      	beq.n	801682c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80167fc:	69fb      	ldr	r3, [r7, #28]
 80167fe:	2200      	movs	r2, #0
 8016800:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8016804:	88fa      	ldrh	r2, [r7, #6]
 8016806:	2300      	movs	r3, #0
 8016808:	9303      	str	r3, [sp, #12]
 801680a:	69fb      	ldr	r3, [r7, #28]
 801680c:	9302      	str	r3, [sp, #8]
 801680e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016810:	9301      	str	r3, [sp, #4]
 8016812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016814:	9300      	str	r3, [sp, #0]
 8016816:	683b      	ldr	r3, [r7, #0]
 8016818:	68b9      	ldr	r1, [r7, #8]
 801681a:	68f8      	ldr	r0, [r7, #12]
 801681c:	f000 f80e 	bl	801683c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016820:	69f8      	ldr	r0, [r7, #28]
 8016822:	f000 f89b 	bl	801695c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8016826:	2301      	movs	r3, #1
 8016828:	61bb      	str	r3, [r7, #24]
 801682a:	e002      	b.n	8016832 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801682c:	f04f 33ff 	mov.w	r3, #4294967295
 8016830:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8016832:	69bb      	ldr	r3, [r7, #24]
	}
 8016834:	4618      	mov	r0, r3
 8016836:	3720      	adds	r7, #32
 8016838:	46bd      	mov	sp, r7
 801683a:	bd80      	pop	{r7, pc}

0801683c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801683c:	b580      	push	{r7, lr}
 801683e:	b088      	sub	sp, #32
 8016840:	af00      	add	r7, sp, #0
 8016842:	60f8      	str	r0, [r7, #12]
 8016844:	60b9      	str	r1, [r7, #8]
 8016846:	607a      	str	r2, [r7, #4]
 8016848:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801684a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801684c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	009b      	lsls	r3, r3, #2
 8016852:	461a      	mov	r2, r3
 8016854:	21a5      	movs	r1, #165	; 0xa5
 8016856:	f002 f8ab 	bl	80189b0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801685a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801685c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801685e:	687b      	ldr	r3, [r7, #4]
 8016860:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8016864:	3b01      	subs	r3, #1
 8016866:	009b      	lsls	r3, r3, #2
 8016868:	4413      	add	r3, r2
 801686a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801686c:	69bb      	ldr	r3, [r7, #24]
 801686e:	f023 0307 	bic.w	r3, r3, #7
 8016872:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8016874:	69bb      	ldr	r3, [r7, #24]
 8016876:	f003 0307 	and.w	r3, r3, #7
 801687a:	2b00      	cmp	r3, #0
 801687c:	d00a      	beq.n	8016894 <prvInitialiseNewTask+0x58>
	__asm volatile
 801687e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016882:	f383 8811 	msr	BASEPRI, r3
 8016886:	f3bf 8f6f 	isb	sy
 801688a:	f3bf 8f4f 	dsb	sy
 801688e:	617b      	str	r3, [r7, #20]
}
 8016890:	bf00      	nop
 8016892:	e7fe      	b.n	8016892 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8016894:	68bb      	ldr	r3, [r7, #8]
 8016896:	2b00      	cmp	r3, #0
 8016898:	d01f      	beq.n	80168da <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801689a:	2300      	movs	r3, #0
 801689c:	61fb      	str	r3, [r7, #28]
 801689e:	e012      	b.n	80168c6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80168a0:	68ba      	ldr	r2, [r7, #8]
 80168a2:	69fb      	ldr	r3, [r7, #28]
 80168a4:	4413      	add	r3, r2
 80168a6:	7819      	ldrb	r1, [r3, #0]
 80168a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80168aa:	69fb      	ldr	r3, [r7, #28]
 80168ac:	4413      	add	r3, r2
 80168ae:	3334      	adds	r3, #52	; 0x34
 80168b0:	460a      	mov	r2, r1
 80168b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80168b4:	68ba      	ldr	r2, [r7, #8]
 80168b6:	69fb      	ldr	r3, [r7, #28]
 80168b8:	4413      	add	r3, r2
 80168ba:	781b      	ldrb	r3, [r3, #0]
 80168bc:	2b00      	cmp	r3, #0
 80168be:	d006      	beq.n	80168ce <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80168c0:	69fb      	ldr	r3, [r7, #28]
 80168c2:	3301      	adds	r3, #1
 80168c4:	61fb      	str	r3, [r7, #28]
 80168c6:	69fb      	ldr	r3, [r7, #28]
 80168c8:	2b1f      	cmp	r3, #31
 80168ca:	d9e9      	bls.n	80168a0 <prvInitialiseNewTask+0x64>
 80168cc:	e000      	b.n	80168d0 <prvInitialiseNewTask+0x94>
			{
				break;
 80168ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80168d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168d2:	2200      	movs	r2, #0
 80168d4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80168d8:	e003      	b.n	80168e2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80168da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168dc:	2200      	movs	r2, #0
 80168de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80168e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168e4:	2b37      	cmp	r3, #55	; 0x37
 80168e6:	d901      	bls.n	80168ec <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80168e8:	2337      	movs	r3, #55	; 0x37
 80168ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80168ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80168f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80168f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80168f6:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 80168f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168fa:	2200      	movs	r2, #0
 80168fc:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80168fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016900:	3304      	adds	r3, #4
 8016902:	4618      	mov	r0, r3
 8016904:	f7fe fee4 	bl	80156d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8016908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801690a:	3318      	adds	r3, #24
 801690c:	4618      	mov	r0, r3
 801690e:	f7fe fedf 	bl	80156d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8016912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016914:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016916:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801691a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801691e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016920:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8016922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016926:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8016928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801692a:	2200      	movs	r2, #0
 801692c:	665a      	str	r2, [r3, #100]	; 0x64
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801692e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016930:	2200      	movs	r2, #0
 8016932:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8016936:	683a      	ldr	r2, [r7, #0]
 8016938:	68f9      	ldr	r1, [r7, #12]
 801693a:	69b8      	ldr	r0, [r7, #24]
 801693c:	f001 fbc6 	bl	80180cc <pxPortInitialiseStack>
 8016940:	4602      	mov	r2, r0
 8016942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016944:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8016946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016948:	2b00      	cmp	r3, #0
 801694a:	d002      	beq.n	8016952 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801694c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801694e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016950:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016952:	bf00      	nop
 8016954:	3720      	adds	r7, #32
 8016956:	46bd      	mov	sp, r7
 8016958:	bd80      	pop	{r7, pc}
	...

0801695c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801695c:	b580      	push	{r7, lr}
 801695e:	b082      	sub	sp, #8
 8016960:	af00      	add	r7, sp, #0
 8016962:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8016964:	f001 fcde 	bl	8018324 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8016968:	4b2d      	ldr	r3, [pc, #180]	; (8016a20 <prvAddNewTaskToReadyList+0xc4>)
 801696a:	681b      	ldr	r3, [r3, #0]
 801696c:	3301      	adds	r3, #1
 801696e:	4a2c      	ldr	r2, [pc, #176]	; (8016a20 <prvAddNewTaskToReadyList+0xc4>)
 8016970:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8016972:	4b2c      	ldr	r3, [pc, #176]	; (8016a24 <prvAddNewTaskToReadyList+0xc8>)
 8016974:	681b      	ldr	r3, [r3, #0]
 8016976:	2b00      	cmp	r3, #0
 8016978:	d109      	bne.n	801698e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801697a:	4a2a      	ldr	r2, [pc, #168]	; (8016a24 <prvAddNewTaskToReadyList+0xc8>)
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8016980:	4b27      	ldr	r3, [pc, #156]	; (8016a20 <prvAddNewTaskToReadyList+0xc4>)
 8016982:	681b      	ldr	r3, [r3, #0]
 8016984:	2b01      	cmp	r3, #1
 8016986:	d110      	bne.n	80169aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8016988:	f000 fcb4 	bl	80172f4 <prvInitialiseTaskLists>
 801698c:	e00d      	b.n	80169aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801698e:	4b26      	ldr	r3, [pc, #152]	; (8016a28 <prvAddNewTaskToReadyList+0xcc>)
 8016990:	681b      	ldr	r3, [r3, #0]
 8016992:	2b00      	cmp	r3, #0
 8016994:	d109      	bne.n	80169aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8016996:	4b23      	ldr	r3, [pc, #140]	; (8016a24 <prvAddNewTaskToReadyList+0xc8>)
 8016998:	681b      	ldr	r3, [r3, #0]
 801699a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80169a0:	429a      	cmp	r2, r3
 80169a2:	d802      	bhi.n	80169aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80169a4:	4a1f      	ldr	r2, [pc, #124]	; (8016a24 <prvAddNewTaskToReadyList+0xc8>)
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80169aa:	4b20      	ldr	r3, [pc, #128]	; (8016a2c <prvAddNewTaskToReadyList+0xd0>)
 80169ac:	681b      	ldr	r3, [r3, #0]
 80169ae:	3301      	adds	r3, #1
 80169b0:	4a1e      	ldr	r2, [pc, #120]	; (8016a2c <prvAddNewTaskToReadyList+0xd0>)
 80169b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80169b4:	4b1d      	ldr	r3, [pc, #116]	; (8016a2c <prvAddNewTaskToReadyList+0xd0>)
 80169b6:	681a      	ldr	r2, [r3, #0]
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80169c0:	4b1b      	ldr	r3, [pc, #108]	; (8016a30 <prvAddNewTaskToReadyList+0xd4>)
 80169c2:	681b      	ldr	r3, [r3, #0]
 80169c4:	429a      	cmp	r2, r3
 80169c6:	d903      	bls.n	80169d0 <prvAddNewTaskToReadyList+0x74>
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80169cc:	4a18      	ldr	r2, [pc, #96]	; (8016a30 <prvAddNewTaskToReadyList+0xd4>)
 80169ce:	6013      	str	r3, [r2, #0]
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80169d4:	4613      	mov	r3, r2
 80169d6:	009b      	lsls	r3, r3, #2
 80169d8:	4413      	add	r3, r2
 80169da:	009b      	lsls	r3, r3, #2
 80169dc:	4a15      	ldr	r2, [pc, #84]	; (8016a34 <prvAddNewTaskToReadyList+0xd8>)
 80169de:	441a      	add	r2, r3
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	3304      	adds	r3, #4
 80169e4:	4619      	mov	r1, r3
 80169e6:	4610      	mov	r0, r2
 80169e8:	f7fe fe7f 	bl	80156ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80169ec:	f001 fcca 	bl	8018384 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80169f0:	4b0d      	ldr	r3, [pc, #52]	; (8016a28 <prvAddNewTaskToReadyList+0xcc>)
 80169f2:	681b      	ldr	r3, [r3, #0]
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	d00e      	beq.n	8016a16 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80169f8:	4b0a      	ldr	r3, [pc, #40]	; (8016a24 <prvAddNewTaskToReadyList+0xc8>)
 80169fa:	681b      	ldr	r3, [r3, #0]
 80169fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80169fe:	687b      	ldr	r3, [r7, #4]
 8016a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a02:	429a      	cmp	r2, r3
 8016a04:	d207      	bcs.n	8016a16 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8016a06:	4b0c      	ldr	r3, [pc, #48]	; (8016a38 <prvAddNewTaskToReadyList+0xdc>)
 8016a08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016a0c:	601a      	str	r2, [r3, #0]
 8016a0e:	f3bf 8f4f 	dsb	sy
 8016a12:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016a16:	bf00      	nop
 8016a18:	3708      	adds	r7, #8
 8016a1a:	46bd      	mov	sp, r7
 8016a1c:	bd80      	pop	{r7, pc}
 8016a1e:	bf00      	nop
 8016a20:	20006078 	.word	0x20006078
 8016a24:	20005ba4 	.word	0x20005ba4
 8016a28:	20006084 	.word	0x20006084
 8016a2c:	20006094 	.word	0x20006094
 8016a30:	20006080 	.word	0x20006080
 8016a34:	20005ba8 	.word	0x20005ba8
 8016a38:	e000ed04 	.word	0xe000ed04

08016a3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8016a3c:	b580      	push	{r7, lr}
 8016a3e:	b084      	sub	sp, #16
 8016a40:	af00      	add	r7, sp, #0
 8016a42:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8016a44:	2300      	movs	r3, #0
 8016a46:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d017      	beq.n	8016a7e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8016a4e:	4b13      	ldr	r3, [pc, #76]	; (8016a9c <vTaskDelay+0x60>)
 8016a50:	681b      	ldr	r3, [r3, #0]
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	d00a      	beq.n	8016a6c <vTaskDelay+0x30>
	__asm volatile
 8016a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a5a:	f383 8811 	msr	BASEPRI, r3
 8016a5e:	f3bf 8f6f 	isb	sy
 8016a62:	f3bf 8f4f 	dsb	sy
 8016a66:	60bb      	str	r3, [r7, #8]
}
 8016a68:	bf00      	nop
 8016a6a:	e7fe      	b.n	8016a6a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8016a6c:	f000 f880 	bl	8016b70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8016a70:	2100      	movs	r1, #0
 8016a72:	6878      	ldr	r0, [r7, #4]
 8016a74:	f000 feae 	bl	80177d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8016a78:	f000 f888 	bl	8016b8c <xTaskResumeAll>
 8016a7c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8016a7e:	68fb      	ldr	r3, [r7, #12]
 8016a80:	2b00      	cmp	r3, #0
 8016a82:	d107      	bne.n	8016a94 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8016a84:	4b06      	ldr	r3, [pc, #24]	; (8016aa0 <vTaskDelay+0x64>)
 8016a86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016a8a:	601a      	str	r2, [r3, #0]
 8016a8c:	f3bf 8f4f 	dsb	sy
 8016a90:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016a94:	bf00      	nop
 8016a96:	3710      	adds	r7, #16
 8016a98:	46bd      	mov	sp, r7
 8016a9a:	bd80      	pop	{r7, pc}
 8016a9c:	200060a0 	.word	0x200060a0
 8016aa0:	e000ed04 	.word	0xe000ed04

08016aa4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8016aa4:	b580      	push	{r7, lr}
 8016aa6:	b08a      	sub	sp, #40	; 0x28
 8016aa8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8016aaa:	2300      	movs	r3, #0
 8016aac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8016aae:	2300      	movs	r3, #0
 8016ab0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8016ab2:	463a      	mov	r2, r7
 8016ab4:	1d39      	adds	r1, r7, #4
 8016ab6:	f107 0308 	add.w	r3, r7, #8
 8016aba:	4618      	mov	r0, r3
 8016abc:	f7fe fb48 	bl	8015150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8016ac0:	6839      	ldr	r1, [r7, #0]
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	68ba      	ldr	r2, [r7, #8]
 8016ac6:	9202      	str	r2, [sp, #8]
 8016ac8:	9301      	str	r3, [sp, #4]
 8016aca:	2300      	movs	r3, #0
 8016acc:	9300      	str	r3, [sp, #0]
 8016ace:	2300      	movs	r3, #0
 8016ad0:	460a      	mov	r2, r1
 8016ad2:	4921      	ldr	r1, [pc, #132]	; (8016b58 <vTaskStartScheduler+0xb4>)
 8016ad4:	4821      	ldr	r0, [pc, #132]	; (8016b5c <vTaskStartScheduler+0xb8>)
 8016ad6:	f7ff fe0f 	bl	80166f8 <xTaskCreateStatic>
 8016ada:	4603      	mov	r3, r0
 8016adc:	4a20      	ldr	r2, [pc, #128]	; (8016b60 <vTaskStartScheduler+0xbc>)
 8016ade:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8016ae0:	4b1f      	ldr	r3, [pc, #124]	; (8016b60 <vTaskStartScheduler+0xbc>)
 8016ae2:	681b      	ldr	r3, [r3, #0]
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d002      	beq.n	8016aee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8016ae8:	2301      	movs	r3, #1
 8016aea:	617b      	str	r3, [r7, #20]
 8016aec:	e001      	b.n	8016af2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8016aee:	2300      	movs	r3, #0
 8016af0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8016af2:	697b      	ldr	r3, [r7, #20]
 8016af4:	2b01      	cmp	r3, #1
 8016af6:	d102      	bne.n	8016afe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8016af8:	f000 fec0 	bl	801787c <xTimerCreateTimerTask>
 8016afc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8016afe:	697b      	ldr	r3, [r7, #20]
 8016b00:	2b01      	cmp	r3, #1
 8016b02:	d116      	bne.n	8016b32 <vTaskStartScheduler+0x8e>
	__asm volatile
 8016b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b08:	f383 8811 	msr	BASEPRI, r3
 8016b0c:	f3bf 8f6f 	isb	sy
 8016b10:	f3bf 8f4f 	dsb	sy
 8016b14:	613b      	str	r3, [r7, #16]
}
 8016b16:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8016b18:	4b12      	ldr	r3, [pc, #72]	; (8016b64 <vTaskStartScheduler+0xc0>)
 8016b1a:	f04f 32ff 	mov.w	r2, #4294967295
 8016b1e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8016b20:	4b11      	ldr	r3, [pc, #68]	; (8016b68 <vTaskStartScheduler+0xc4>)
 8016b22:	2201      	movs	r2, #1
 8016b24:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8016b26:	4b11      	ldr	r3, [pc, #68]	; (8016b6c <vTaskStartScheduler+0xc8>)
 8016b28:	2200      	movs	r2, #0
 8016b2a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8016b2c:	f001 fb58 	bl	80181e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8016b30:	e00e      	b.n	8016b50 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8016b32:	697b      	ldr	r3, [r7, #20]
 8016b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016b38:	d10a      	bne.n	8016b50 <vTaskStartScheduler+0xac>
	__asm volatile
 8016b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b3e:	f383 8811 	msr	BASEPRI, r3
 8016b42:	f3bf 8f6f 	isb	sy
 8016b46:	f3bf 8f4f 	dsb	sy
 8016b4a:	60fb      	str	r3, [r7, #12]
}
 8016b4c:	bf00      	nop
 8016b4e:	e7fe      	b.n	8016b4e <vTaskStartScheduler+0xaa>
}
 8016b50:	bf00      	nop
 8016b52:	3718      	adds	r7, #24
 8016b54:	46bd      	mov	sp, r7
 8016b56:	bd80      	pop	{r7, pc}
 8016b58:	0801f4a4 	.word	0x0801f4a4
 8016b5c:	080172c5 	.word	0x080172c5
 8016b60:	2000609c 	.word	0x2000609c
 8016b64:	20006098 	.word	0x20006098
 8016b68:	20006084 	.word	0x20006084
 8016b6c:	2000607c 	.word	0x2000607c

08016b70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8016b70:	b480      	push	{r7}
 8016b72:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8016b74:	4b04      	ldr	r3, [pc, #16]	; (8016b88 <vTaskSuspendAll+0x18>)
 8016b76:	681b      	ldr	r3, [r3, #0]
 8016b78:	3301      	adds	r3, #1
 8016b7a:	4a03      	ldr	r2, [pc, #12]	; (8016b88 <vTaskSuspendAll+0x18>)
 8016b7c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8016b7e:	bf00      	nop
 8016b80:	46bd      	mov	sp, r7
 8016b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b86:	4770      	bx	lr
 8016b88:	200060a0 	.word	0x200060a0

08016b8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8016b8c:	b580      	push	{r7, lr}
 8016b8e:	b084      	sub	sp, #16
 8016b90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8016b92:	2300      	movs	r3, #0
 8016b94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8016b96:	2300      	movs	r3, #0
 8016b98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8016b9a:	4b42      	ldr	r3, [pc, #264]	; (8016ca4 <xTaskResumeAll+0x118>)
 8016b9c:	681b      	ldr	r3, [r3, #0]
 8016b9e:	2b00      	cmp	r3, #0
 8016ba0:	d10a      	bne.n	8016bb8 <xTaskResumeAll+0x2c>
	__asm volatile
 8016ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ba6:	f383 8811 	msr	BASEPRI, r3
 8016baa:	f3bf 8f6f 	isb	sy
 8016bae:	f3bf 8f4f 	dsb	sy
 8016bb2:	603b      	str	r3, [r7, #0]
}
 8016bb4:	bf00      	nop
 8016bb6:	e7fe      	b.n	8016bb6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8016bb8:	f001 fbb4 	bl	8018324 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8016bbc:	4b39      	ldr	r3, [pc, #228]	; (8016ca4 <xTaskResumeAll+0x118>)
 8016bbe:	681b      	ldr	r3, [r3, #0]
 8016bc0:	3b01      	subs	r3, #1
 8016bc2:	4a38      	ldr	r2, [pc, #224]	; (8016ca4 <xTaskResumeAll+0x118>)
 8016bc4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016bc6:	4b37      	ldr	r3, [pc, #220]	; (8016ca4 <xTaskResumeAll+0x118>)
 8016bc8:	681b      	ldr	r3, [r3, #0]
 8016bca:	2b00      	cmp	r3, #0
 8016bcc:	d162      	bne.n	8016c94 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8016bce:	4b36      	ldr	r3, [pc, #216]	; (8016ca8 <xTaskResumeAll+0x11c>)
 8016bd0:	681b      	ldr	r3, [r3, #0]
 8016bd2:	2b00      	cmp	r3, #0
 8016bd4:	d05e      	beq.n	8016c94 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016bd6:	e02f      	b.n	8016c38 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016bd8:	4b34      	ldr	r3, [pc, #208]	; (8016cac <xTaskResumeAll+0x120>)
 8016bda:	68db      	ldr	r3, [r3, #12]
 8016bdc:	68db      	ldr	r3, [r3, #12]
 8016bde:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016be0:	68fb      	ldr	r3, [r7, #12]
 8016be2:	3318      	adds	r3, #24
 8016be4:	4618      	mov	r0, r3
 8016be6:	f7fe fddd 	bl	80157a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016bea:	68fb      	ldr	r3, [r7, #12]
 8016bec:	3304      	adds	r3, #4
 8016bee:	4618      	mov	r0, r3
 8016bf0:	f7fe fdd8 	bl	80157a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8016bf4:	68fb      	ldr	r3, [r7, #12]
 8016bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016bf8:	4b2d      	ldr	r3, [pc, #180]	; (8016cb0 <xTaskResumeAll+0x124>)
 8016bfa:	681b      	ldr	r3, [r3, #0]
 8016bfc:	429a      	cmp	r2, r3
 8016bfe:	d903      	bls.n	8016c08 <xTaskResumeAll+0x7c>
 8016c00:	68fb      	ldr	r3, [r7, #12]
 8016c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c04:	4a2a      	ldr	r2, [pc, #168]	; (8016cb0 <xTaskResumeAll+0x124>)
 8016c06:	6013      	str	r3, [r2, #0]
 8016c08:	68fb      	ldr	r3, [r7, #12]
 8016c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016c0c:	4613      	mov	r3, r2
 8016c0e:	009b      	lsls	r3, r3, #2
 8016c10:	4413      	add	r3, r2
 8016c12:	009b      	lsls	r3, r3, #2
 8016c14:	4a27      	ldr	r2, [pc, #156]	; (8016cb4 <xTaskResumeAll+0x128>)
 8016c16:	441a      	add	r2, r3
 8016c18:	68fb      	ldr	r3, [r7, #12]
 8016c1a:	3304      	adds	r3, #4
 8016c1c:	4619      	mov	r1, r3
 8016c1e:	4610      	mov	r0, r2
 8016c20:	f7fe fd63 	bl	80156ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016c24:	68fb      	ldr	r3, [r7, #12]
 8016c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016c28:	4b23      	ldr	r3, [pc, #140]	; (8016cb8 <xTaskResumeAll+0x12c>)
 8016c2a:	681b      	ldr	r3, [r3, #0]
 8016c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c2e:	429a      	cmp	r2, r3
 8016c30:	d302      	bcc.n	8016c38 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8016c32:	4b22      	ldr	r3, [pc, #136]	; (8016cbc <xTaskResumeAll+0x130>)
 8016c34:	2201      	movs	r2, #1
 8016c36:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016c38:	4b1c      	ldr	r3, [pc, #112]	; (8016cac <xTaskResumeAll+0x120>)
 8016c3a:	681b      	ldr	r3, [r3, #0]
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	d1cb      	bne.n	8016bd8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8016c40:	68fb      	ldr	r3, [r7, #12]
 8016c42:	2b00      	cmp	r3, #0
 8016c44:	d001      	beq.n	8016c4a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8016c46:	f000 fbf3 	bl	8017430 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8016c4a:	4b1d      	ldr	r3, [pc, #116]	; (8016cc0 <xTaskResumeAll+0x134>)
 8016c4c:	681b      	ldr	r3, [r3, #0]
 8016c4e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	d010      	beq.n	8016c78 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8016c56:	f000 f847 	bl	8016ce8 <xTaskIncrementTick>
 8016c5a:	4603      	mov	r3, r0
 8016c5c:	2b00      	cmp	r3, #0
 8016c5e:	d002      	beq.n	8016c66 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8016c60:	4b16      	ldr	r3, [pc, #88]	; (8016cbc <xTaskResumeAll+0x130>)
 8016c62:	2201      	movs	r2, #1
 8016c64:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	3b01      	subs	r3, #1
 8016c6a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	2b00      	cmp	r3, #0
 8016c70:	d1f1      	bne.n	8016c56 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8016c72:	4b13      	ldr	r3, [pc, #76]	; (8016cc0 <xTaskResumeAll+0x134>)
 8016c74:	2200      	movs	r2, #0
 8016c76:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8016c78:	4b10      	ldr	r3, [pc, #64]	; (8016cbc <xTaskResumeAll+0x130>)
 8016c7a:	681b      	ldr	r3, [r3, #0]
 8016c7c:	2b00      	cmp	r3, #0
 8016c7e:	d009      	beq.n	8016c94 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8016c80:	2301      	movs	r3, #1
 8016c82:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8016c84:	4b0f      	ldr	r3, [pc, #60]	; (8016cc4 <xTaskResumeAll+0x138>)
 8016c86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016c8a:	601a      	str	r2, [r3, #0]
 8016c8c:	f3bf 8f4f 	dsb	sy
 8016c90:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8016c94:	f001 fb76 	bl	8018384 <vPortExitCritical>

	return xAlreadyYielded;
 8016c98:	68bb      	ldr	r3, [r7, #8]
}
 8016c9a:	4618      	mov	r0, r3
 8016c9c:	3710      	adds	r7, #16
 8016c9e:	46bd      	mov	sp, r7
 8016ca0:	bd80      	pop	{r7, pc}
 8016ca2:	bf00      	nop
 8016ca4:	200060a0 	.word	0x200060a0
 8016ca8:	20006078 	.word	0x20006078
 8016cac:	20006038 	.word	0x20006038
 8016cb0:	20006080 	.word	0x20006080
 8016cb4:	20005ba8 	.word	0x20005ba8
 8016cb8:	20005ba4 	.word	0x20005ba4
 8016cbc:	2000608c 	.word	0x2000608c
 8016cc0:	20006088 	.word	0x20006088
 8016cc4:	e000ed04 	.word	0xe000ed04

08016cc8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8016cc8:	b480      	push	{r7}
 8016cca:	b083      	sub	sp, #12
 8016ccc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8016cce:	4b05      	ldr	r3, [pc, #20]	; (8016ce4 <xTaskGetTickCount+0x1c>)
 8016cd0:	681b      	ldr	r3, [r3, #0]
 8016cd2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8016cd4:	687b      	ldr	r3, [r7, #4]
}
 8016cd6:	4618      	mov	r0, r3
 8016cd8:	370c      	adds	r7, #12
 8016cda:	46bd      	mov	sp, r7
 8016cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ce0:	4770      	bx	lr
 8016ce2:	bf00      	nop
 8016ce4:	2000607c 	.word	0x2000607c

08016ce8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8016ce8:	b580      	push	{r7, lr}
 8016cea:	b086      	sub	sp, #24
 8016cec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8016cee:	2300      	movs	r3, #0
 8016cf0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016cf2:	4b4f      	ldr	r3, [pc, #316]	; (8016e30 <xTaskIncrementTick+0x148>)
 8016cf4:	681b      	ldr	r3, [r3, #0]
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	f040 808f 	bne.w	8016e1a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8016cfc:	4b4d      	ldr	r3, [pc, #308]	; (8016e34 <xTaskIncrementTick+0x14c>)
 8016cfe:	681b      	ldr	r3, [r3, #0]
 8016d00:	3301      	adds	r3, #1
 8016d02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8016d04:	4a4b      	ldr	r2, [pc, #300]	; (8016e34 <xTaskIncrementTick+0x14c>)
 8016d06:	693b      	ldr	r3, [r7, #16]
 8016d08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8016d0a:	693b      	ldr	r3, [r7, #16]
 8016d0c:	2b00      	cmp	r3, #0
 8016d0e:	d120      	bne.n	8016d52 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8016d10:	4b49      	ldr	r3, [pc, #292]	; (8016e38 <xTaskIncrementTick+0x150>)
 8016d12:	681b      	ldr	r3, [r3, #0]
 8016d14:	681b      	ldr	r3, [r3, #0]
 8016d16:	2b00      	cmp	r3, #0
 8016d18:	d00a      	beq.n	8016d30 <xTaskIncrementTick+0x48>
	__asm volatile
 8016d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d1e:	f383 8811 	msr	BASEPRI, r3
 8016d22:	f3bf 8f6f 	isb	sy
 8016d26:	f3bf 8f4f 	dsb	sy
 8016d2a:	603b      	str	r3, [r7, #0]
}
 8016d2c:	bf00      	nop
 8016d2e:	e7fe      	b.n	8016d2e <xTaskIncrementTick+0x46>
 8016d30:	4b41      	ldr	r3, [pc, #260]	; (8016e38 <xTaskIncrementTick+0x150>)
 8016d32:	681b      	ldr	r3, [r3, #0]
 8016d34:	60fb      	str	r3, [r7, #12]
 8016d36:	4b41      	ldr	r3, [pc, #260]	; (8016e3c <xTaskIncrementTick+0x154>)
 8016d38:	681b      	ldr	r3, [r3, #0]
 8016d3a:	4a3f      	ldr	r2, [pc, #252]	; (8016e38 <xTaskIncrementTick+0x150>)
 8016d3c:	6013      	str	r3, [r2, #0]
 8016d3e:	4a3f      	ldr	r2, [pc, #252]	; (8016e3c <xTaskIncrementTick+0x154>)
 8016d40:	68fb      	ldr	r3, [r7, #12]
 8016d42:	6013      	str	r3, [r2, #0]
 8016d44:	4b3e      	ldr	r3, [pc, #248]	; (8016e40 <xTaskIncrementTick+0x158>)
 8016d46:	681b      	ldr	r3, [r3, #0]
 8016d48:	3301      	adds	r3, #1
 8016d4a:	4a3d      	ldr	r2, [pc, #244]	; (8016e40 <xTaskIncrementTick+0x158>)
 8016d4c:	6013      	str	r3, [r2, #0]
 8016d4e:	f000 fb6f 	bl	8017430 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8016d52:	4b3c      	ldr	r3, [pc, #240]	; (8016e44 <xTaskIncrementTick+0x15c>)
 8016d54:	681b      	ldr	r3, [r3, #0]
 8016d56:	693a      	ldr	r2, [r7, #16]
 8016d58:	429a      	cmp	r2, r3
 8016d5a:	d349      	bcc.n	8016df0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016d5c:	4b36      	ldr	r3, [pc, #216]	; (8016e38 <xTaskIncrementTick+0x150>)
 8016d5e:	681b      	ldr	r3, [r3, #0]
 8016d60:	681b      	ldr	r3, [r3, #0]
 8016d62:	2b00      	cmp	r3, #0
 8016d64:	d104      	bne.n	8016d70 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016d66:	4b37      	ldr	r3, [pc, #220]	; (8016e44 <xTaskIncrementTick+0x15c>)
 8016d68:	f04f 32ff 	mov.w	r2, #4294967295
 8016d6c:	601a      	str	r2, [r3, #0]
					break;
 8016d6e:	e03f      	b.n	8016df0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016d70:	4b31      	ldr	r3, [pc, #196]	; (8016e38 <xTaskIncrementTick+0x150>)
 8016d72:	681b      	ldr	r3, [r3, #0]
 8016d74:	68db      	ldr	r3, [r3, #12]
 8016d76:	68db      	ldr	r3, [r3, #12]
 8016d78:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8016d7a:	68bb      	ldr	r3, [r7, #8]
 8016d7c:	685b      	ldr	r3, [r3, #4]
 8016d7e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8016d80:	693a      	ldr	r2, [r7, #16]
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	429a      	cmp	r2, r3
 8016d86:	d203      	bcs.n	8016d90 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8016d88:	4a2e      	ldr	r2, [pc, #184]	; (8016e44 <xTaskIncrementTick+0x15c>)
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8016d8e:	e02f      	b.n	8016df0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016d90:	68bb      	ldr	r3, [r7, #8]
 8016d92:	3304      	adds	r3, #4
 8016d94:	4618      	mov	r0, r3
 8016d96:	f7fe fd05 	bl	80157a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8016d9a:	68bb      	ldr	r3, [r7, #8]
 8016d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016d9e:	2b00      	cmp	r3, #0
 8016da0:	d004      	beq.n	8016dac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016da2:	68bb      	ldr	r3, [r7, #8]
 8016da4:	3318      	adds	r3, #24
 8016da6:	4618      	mov	r0, r3
 8016da8:	f7fe fcfc 	bl	80157a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8016dac:	68bb      	ldr	r3, [r7, #8]
 8016dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016db0:	4b25      	ldr	r3, [pc, #148]	; (8016e48 <xTaskIncrementTick+0x160>)
 8016db2:	681b      	ldr	r3, [r3, #0]
 8016db4:	429a      	cmp	r2, r3
 8016db6:	d903      	bls.n	8016dc0 <xTaskIncrementTick+0xd8>
 8016db8:	68bb      	ldr	r3, [r7, #8]
 8016dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016dbc:	4a22      	ldr	r2, [pc, #136]	; (8016e48 <xTaskIncrementTick+0x160>)
 8016dbe:	6013      	str	r3, [r2, #0]
 8016dc0:	68bb      	ldr	r3, [r7, #8]
 8016dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016dc4:	4613      	mov	r3, r2
 8016dc6:	009b      	lsls	r3, r3, #2
 8016dc8:	4413      	add	r3, r2
 8016dca:	009b      	lsls	r3, r3, #2
 8016dcc:	4a1f      	ldr	r2, [pc, #124]	; (8016e4c <xTaskIncrementTick+0x164>)
 8016dce:	441a      	add	r2, r3
 8016dd0:	68bb      	ldr	r3, [r7, #8]
 8016dd2:	3304      	adds	r3, #4
 8016dd4:	4619      	mov	r1, r3
 8016dd6:	4610      	mov	r0, r2
 8016dd8:	f7fe fc87 	bl	80156ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016ddc:	68bb      	ldr	r3, [r7, #8]
 8016dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016de0:	4b1b      	ldr	r3, [pc, #108]	; (8016e50 <xTaskIncrementTick+0x168>)
 8016de2:	681b      	ldr	r3, [r3, #0]
 8016de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016de6:	429a      	cmp	r2, r3
 8016de8:	d3b8      	bcc.n	8016d5c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8016dea:	2301      	movs	r3, #1
 8016dec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016dee:	e7b5      	b.n	8016d5c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8016df0:	4b17      	ldr	r3, [pc, #92]	; (8016e50 <xTaskIncrementTick+0x168>)
 8016df2:	681b      	ldr	r3, [r3, #0]
 8016df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016df6:	4915      	ldr	r1, [pc, #84]	; (8016e4c <xTaskIncrementTick+0x164>)
 8016df8:	4613      	mov	r3, r2
 8016dfa:	009b      	lsls	r3, r3, #2
 8016dfc:	4413      	add	r3, r2
 8016dfe:	009b      	lsls	r3, r3, #2
 8016e00:	440b      	add	r3, r1
 8016e02:	681b      	ldr	r3, [r3, #0]
 8016e04:	2b01      	cmp	r3, #1
 8016e06:	d901      	bls.n	8016e0c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8016e08:	2301      	movs	r3, #1
 8016e0a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8016e0c:	4b11      	ldr	r3, [pc, #68]	; (8016e54 <xTaskIncrementTick+0x16c>)
 8016e0e:	681b      	ldr	r3, [r3, #0]
 8016e10:	2b00      	cmp	r3, #0
 8016e12:	d007      	beq.n	8016e24 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8016e14:	2301      	movs	r3, #1
 8016e16:	617b      	str	r3, [r7, #20]
 8016e18:	e004      	b.n	8016e24 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8016e1a:	4b0f      	ldr	r3, [pc, #60]	; (8016e58 <xTaskIncrementTick+0x170>)
 8016e1c:	681b      	ldr	r3, [r3, #0]
 8016e1e:	3301      	adds	r3, #1
 8016e20:	4a0d      	ldr	r2, [pc, #52]	; (8016e58 <xTaskIncrementTick+0x170>)
 8016e22:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8016e24:	697b      	ldr	r3, [r7, #20]
}
 8016e26:	4618      	mov	r0, r3
 8016e28:	3718      	adds	r7, #24
 8016e2a:	46bd      	mov	sp, r7
 8016e2c:	bd80      	pop	{r7, pc}
 8016e2e:	bf00      	nop
 8016e30:	200060a0 	.word	0x200060a0
 8016e34:	2000607c 	.word	0x2000607c
 8016e38:	20006030 	.word	0x20006030
 8016e3c:	20006034 	.word	0x20006034
 8016e40:	20006090 	.word	0x20006090
 8016e44:	20006098 	.word	0x20006098
 8016e48:	20006080 	.word	0x20006080
 8016e4c:	20005ba8 	.word	0x20005ba8
 8016e50:	20005ba4 	.word	0x20005ba4
 8016e54:	2000608c 	.word	0x2000608c
 8016e58:	20006088 	.word	0x20006088

08016e5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8016e5c:	b480      	push	{r7}
 8016e5e:	b085      	sub	sp, #20
 8016e60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8016e62:	4b28      	ldr	r3, [pc, #160]	; (8016f04 <vTaskSwitchContext+0xa8>)
 8016e64:	681b      	ldr	r3, [r3, #0]
 8016e66:	2b00      	cmp	r3, #0
 8016e68:	d003      	beq.n	8016e72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8016e6a:	4b27      	ldr	r3, [pc, #156]	; (8016f08 <vTaskSwitchContext+0xac>)
 8016e6c:	2201      	movs	r2, #1
 8016e6e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8016e70:	e041      	b.n	8016ef6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8016e72:	4b25      	ldr	r3, [pc, #148]	; (8016f08 <vTaskSwitchContext+0xac>)
 8016e74:	2200      	movs	r2, #0
 8016e76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016e78:	4b24      	ldr	r3, [pc, #144]	; (8016f0c <vTaskSwitchContext+0xb0>)
 8016e7a:	681b      	ldr	r3, [r3, #0]
 8016e7c:	60fb      	str	r3, [r7, #12]
 8016e7e:	e010      	b.n	8016ea2 <vTaskSwitchContext+0x46>
 8016e80:	68fb      	ldr	r3, [r7, #12]
 8016e82:	2b00      	cmp	r3, #0
 8016e84:	d10a      	bne.n	8016e9c <vTaskSwitchContext+0x40>
	__asm volatile
 8016e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e8a:	f383 8811 	msr	BASEPRI, r3
 8016e8e:	f3bf 8f6f 	isb	sy
 8016e92:	f3bf 8f4f 	dsb	sy
 8016e96:	607b      	str	r3, [r7, #4]
}
 8016e98:	bf00      	nop
 8016e9a:	e7fe      	b.n	8016e9a <vTaskSwitchContext+0x3e>
 8016e9c:	68fb      	ldr	r3, [r7, #12]
 8016e9e:	3b01      	subs	r3, #1
 8016ea0:	60fb      	str	r3, [r7, #12]
 8016ea2:	491b      	ldr	r1, [pc, #108]	; (8016f10 <vTaskSwitchContext+0xb4>)
 8016ea4:	68fa      	ldr	r2, [r7, #12]
 8016ea6:	4613      	mov	r3, r2
 8016ea8:	009b      	lsls	r3, r3, #2
 8016eaa:	4413      	add	r3, r2
 8016eac:	009b      	lsls	r3, r3, #2
 8016eae:	440b      	add	r3, r1
 8016eb0:	681b      	ldr	r3, [r3, #0]
 8016eb2:	2b00      	cmp	r3, #0
 8016eb4:	d0e4      	beq.n	8016e80 <vTaskSwitchContext+0x24>
 8016eb6:	68fa      	ldr	r2, [r7, #12]
 8016eb8:	4613      	mov	r3, r2
 8016eba:	009b      	lsls	r3, r3, #2
 8016ebc:	4413      	add	r3, r2
 8016ebe:	009b      	lsls	r3, r3, #2
 8016ec0:	4a13      	ldr	r2, [pc, #76]	; (8016f10 <vTaskSwitchContext+0xb4>)
 8016ec2:	4413      	add	r3, r2
 8016ec4:	60bb      	str	r3, [r7, #8]
 8016ec6:	68bb      	ldr	r3, [r7, #8]
 8016ec8:	685b      	ldr	r3, [r3, #4]
 8016eca:	685a      	ldr	r2, [r3, #4]
 8016ecc:	68bb      	ldr	r3, [r7, #8]
 8016ece:	605a      	str	r2, [r3, #4]
 8016ed0:	68bb      	ldr	r3, [r7, #8]
 8016ed2:	685a      	ldr	r2, [r3, #4]
 8016ed4:	68bb      	ldr	r3, [r7, #8]
 8016ed6:	3308      	adds	r3, #8
 8016ed8:	429a      	cmp	r2, r3
 8016eda:	d104      	bne.n	8016ee6 <vTaskSwitchContext+0x8a>
 8016edc:	68bb      	ldr	r3, [r7, #8]
 8016ede:	685b      	ldr	r3, [r3, #4]
 8016ee0:	685a      	ldr	r2, [r3, #4]
 8016ee2:	68bb      	ldr	r3, [r7, #8]
 8016ee4:	605a      	str	r2, [r3, #4]
 8016ee6:	68bb      	ldr	r3, [r7, #8]
 8016ee8:	685b      	ldr	r3, [r3, #4]
 8016eea:	68db      	ldr	r3, [r3, #12]
 8016eec:	4a09      	ldr	r2, [pc, #36]	; (8016f14 <vTaskSwitchContext+0xb8>)
 8016eee:	6013      	str	r3, [r2, #0]
 8016ef0:	4a06      	ldr	r2, [pc, #24]	; (8016f0c <vTaskSwitchContext+0xb0>)
 8016ef2:	68fb      	ldr	r3, [r7, #12]
 8016ef4:	6013      	str	r3, [r2, #0]
}
 8016ef6:	bf00      	nop
 8016ef8:	3714      	adds	r7, #20
 8016efa:	46bd      	mov	sp, r7
 8016efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f00:	4770      	bx	lr
 8016f02:	bf00      	nop
 8016f04:	200060a0 	.word	0x200060a0
 8016f08:	2000608c 	.word	0x2000608c
 8016f0c:	20006080 	.word	0x20006080
 8016f10:	20005ba8 	.word	0x20005ba8
 8016f14:	20005ba4 	.word	0x20005ba4

08016f18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8016f18:	b580      	push	{r7, lr}
 8016f1a:	b084      	sub	sp, #16
 8016f1c:	af00      	add	r7, sp, #0
 8016f1e:	6078      	str	r0, [r7, #4]
 8016f20:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8016f22:	687b      	ldr	r3, [r7, #4]
 8016f24:	2b00      	cmp	r3, #0
 8016f26:	d10a      	bne.n	8016f3e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8016f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f2c:	f383 8811 	msr	BASEPRI, r3
 8016f30:	f3bf 8f6f 	isb	sy
 8016f34:	f3bf 8f4f 	dsb	sy
 8016f38:	60fb      	str	r3, [r7, #12]
}
 8016f3a:	bf00      	nop
 8016f3c:	e7fe      	b.n	8016f3c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016f3e:	4b07      	ldr	r3, [pc, #28]	; (8016f5c <vTaskPlaceOnEventList+0x44>)
 8016f40:	681b      	ldr	r3, [r3, #0]
 8016f42:	3318      	adds	r3, #24
 8016f44:	4619      	mov	r1, r3
 8016f46:	6878      	ldr	r0, [r7, #4]
 8016f48:	f7fe fbf3 	bl	8015732 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016f4c:	2101      	movs	r1, #1
 8016f4e:	6838      	ldr	r0, [r7, #0]
 8016f50:	f000 fc40 	bl	80177d4 <prvAddCurrentTaskToDelayedList>
}
 8016f54:	bf00      	nop
 8016f56:	3710      	adds	r7, #16
 8016f58:	46bd      	mov	sp, r7
 8016f5a:	bd80      	pop	{r7, pc}
 8016f5c:	20005ba4 	.word	0x20005ba4

08016f60 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8016f60:	b580      	push	{r7, lr}
 8016f62:	b086      	sub	sp, #24
 8016f64:	af00      	add	r7, sp, #0
 8016f66:	60f8      	str	r0, [r7, #12]
 8016f68:	60b9      	str	r1, [r7, #8]
 8016f6a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8016f6c:	68fb      	ldr	r3, [r7, #12]
 8016f6e:	2b00      	cmp	r3, #0
 8016f70:	d10a      	bne.n	8016f88 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8016f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f76:	f383 8811 	msr	BASEPRI, r3
 8016f7a:	f3bf 8f6f 	isb	sy
 8016f7e:	f3bf 8f4f 	dsb	sy
 8016f82:	617b      	str	r3, [r7, #20]
}
 8016f84:	bf00      	nop
 8016f86:	e7fe      	b.n	8016f86 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8016f88:	4b11      	ldr	r3, [pc, #68]	; (8016fd0 <vTaskPlaceOnUnorderedEventList+0x70>)
 8016f8a:	681b      	ldr	r3, [r3, #0]
 8016f8c:	2b00      	cmp	r3, #0
 8016f8e:	d10a      	bne.n	8016fa6 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8016f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f94:	f383 8811 	msr	BASEPRI, r3
 8016f98:	f3bf 8f6f 	isb	sy
 8016f9c:	f3bf 8f4f 	dsb	sy
 8016fa0:	613b      	str	r3, [r7, #16]
}
 8016fa2:	bf00      	nop
 8016fa4:	e7fe      	b.n	8016fa4 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8016fa6:	4b0b      	ldr	r3, [pc, #44]	; (8016fd4 <vTaskPlaceOnUnorderedEventList+0x74>)
 8016fa8:	681b      	ldr	r3, [r3, #0]
 8016faa:	68ba      	ldr	r2, [r7, #8]
 8016fac:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8016fb0:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016fb2:	4b08      	ldr	r3, [pc, #32]	; (8016fd4 <vTaskPlaceOnUnorderedEventList+0x74>)
 8016fb4:	681b      	ldr	r3, [r3, #0]
 8016fb6:	3318      	adds	r3, #24
 8016fb8:	4619      	mov	r1, r3
 8016fba:	68f8      	ldr	r0, [r7, #12]
 8016fbc:	f7fe fb95 	bl	80156ea <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016fc0:	2101      	movs	r1, #1
 8016fc2:	6878      	ldr	r0, [r7, #4]
 8016fc4:	f000 fc06 	bl	80177d4 <prvAddCurrentTaskToDelayedList>
}
 8016fc8:	bf00      	nop
 8016fca:	3718      	adds	r7, #24
 8016fcc:	46bd      	mov	sp, r7
 8016fce:	bd80      	pop	{r7, pc}
 8016fd0:	200060a0 	.word	0x200060a0
 8016fd4:	20005ba4 	.word	0x20005ba4

08016fd8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8016fd8:	b580      	push	{r7, lr}
 8016fda:	b086      	sub	sp, #24
 8016fdc:	af00      	add	r7, sp, #0
 8016fde:	60f8      	str	r0, [r7, #12]
 8016fe0:	60b9      	str	r1, [r7, #8]
 8016fe2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8016fe4:	68fb      	ldr	r3, [r7, #12]
 8016fe6:	2b00      	cmp	r3, #0
 8016fe8:	d10a      	bne.n	8017000 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8016fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016fee:	f383 8811 	msr	BASEPRI, r3
 8016ff2:	f3bf 8f6f 	isb	sy
 8016ff6:	f3bf 8f4f 	dsb	sy
 8016ffa:	617b      	str	r3, [r7, #20]
}
 8016ffc:	bf00      	nop
 8016ffe:	e7fe      	b.n	8016ffe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017000:	4b0a      	ldr	r3, [pc, #40]	; (801702c <vTaskPlaceOnEventListRestricted+0x54>)
 8017002:	681b      	ldr	r3, [r3, #0]
 8017004:	3318      	adds	r3, #24
 8017006:	4619      	mov	r1, r3
 8017008:	68f8      	ldr	r0, [r7, #12]
 801700a:	f7fe fb6e 	bl	80156ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801700e:	687b      	ldr	r3, [r7, #4]
 8017010:	2b00      	cmp	r3, #0
 8017012:	d002      	beq.n	801701a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8017014:	f04f 33ff 	mov.w	r3, #4294967295
 8017018:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801701a:	6879      	ldr	r1, [r7, #4]
 801701c:	68b8      	ldr	r0, [r7, #8]
 801701e:	f000 fbd9 	bl	80177d4 <prvAddCurrentTaskToDelayedList>
	}
 8017022:	bf00      	nop
 8017024:	3718      	adds	r7, #24
 8017026:	46bd      	mov	sp, r7
 8017028:	bd80      	pop	{r7, pc}
 801702a:	bf00      	nop
 801702c:	20005ba4 	.word	0x20005ba4

08017030 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8017030:	b580      	push	{r7, lr}
 8017032:	b086      	sub	sp, #24
 8017034:	af00      	add	r7, sp, #0
 8017036:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017038:	687b      	ldr	r3, [r7, #4]
 801703a:	68db      	ldr	r3, [r3, #12]
 801703c:	68db      	ldr	r3, [r3, #12]
 801703e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8017040:	693b      	ldr	r3, [r7, #16]
 8017042:	2b00      	cmp	r3, #0
 8017044:	d10a      	bne.n	801705c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8017046:	f04f 0350 	mov.w	r3, #80	; 0x50
 801704a:	f383 8811 	msr	BASEPRI, r3
 801704e:	f3bf 8f6f 	isb	sy
 8017052:	f3bf 8f4f 	dsb	sy
 8017056:	60fb      	str	r3, [r7, #12]
}
 8017058:	bf00      	nop
 801705a:	e7fe      	b.n	801705a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801705c:	693b      	ldr	r3, [r7, #16]
 801705e:	3318      	adds	r3, #24
 8017060:	4618      	mov	r0, r3
 8017062:	f7fe fb9f 	bl	80157a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017066:	4b1e      	ldr	r3, [pc, #120]	; (80170e0 <xTaskRemoveFromEventList+0xb0>)
 8017068:	681b      	ldr	r3, [r3, #0]
 801706a:	2b00      	cmp	r3, #0
 801706c:	d11d      	bne.n	80170aa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801706e:	693b      	ldr	r3, [r7, #16]
 8017070:	3304      	adds	r3, #4
 8017072:	4618      	mov	r0, r3
 8017074:	f7fe fb96 	bl	80157a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8017078:	693b      	ldr	r3, [r7, #16]
 801707a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801707c:	4b19      	ldr	r3, [pc, #100]	; (80170e4 <xTaskRemoveFromEventList+0xb4>)
 801707e:	681b      	ldr	r3, [r3, #0]
 8017080:	429a      	cmp	r2, r3
 8017082:	d903      	bls.n	801708c <xTaskRemoveFromEventList+0x5c>
 8017084:	693b      	ldr	r3, [r7, #16]
 8017086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017088:	4a16      	ldr	r2, [pc, #88]	; (80170e4 <xTaskRemoveFromEventList+0xb4>)
 801708a:	6013      	str	r3, [r2, #0]
 801708c:	693b      	ldr	r3, [r7, #16]
 801708e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017090:	4613      	mov	r3, r2
 8017092:	009b      	lsls	r3, r3, #2
 8017094:	4413      	add	r3, r2
 8017096:	009b      	lsls	r3, r3, #2
 8017098:	4a13      	ldr	r2, [pc, #76]	; (80170e8 <xTaskRemoveFromEventList+0xb8>)
 801709a:	441a      	add	r2, r3
 801709c:	693b      	ldr	r3, [r7, #16]
 801709e:	3304      	adds	r3, #4
 80170a0:	4619      	mov	r1, r3
 80170a2:	4610      	mov	r0, r2
 80170a4:	f7fe fb21 	bl	80156ea <vListInsertEnd>
 80170a8:	e005      	b.n	80170b6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80170aa:	693b      	ldr	r3, [r7, #16]
 80170ac:	3318      	adds	r3, #24
 80170ae:	4619      	mov	r1, r3
 80170b0:	480e      	ldr	r0, [pc, #56]	; (80170ec <xTaskRemoveFromEventList+0xbc>)
 80170b2:	f7fe fb1a 	bl	80156ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80170b6:	693b      	ldr	r3, [r7, #16]
 80170b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80170ba:	4b0d      	ldr	r3, [pc, #52]	; (80170f0 <xTaskRemoveFromEventList+0xc0>)
 80170bc:	681b      	ldr	r3, [r3, #0]
 80170be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170c0:	429a      	cmp	r2, r3
 80170c2:	d905      	bls.n	80170d0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80170c4:	2301      	movs	r3, #1
 80170c6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80170c8:	4b0a      	ldr	r3, [pc, #40]	; (80170f4 <xTaskRemoveFromEventList+0xc4>)
 80170ca:	2201      	movs	r2, #1
 80170cc:	601a      	str	r2, [r3, #0]
 80170ce:	e001      	b.n	80170d4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80170d0:	2300      	movs	r3, #0
 80170d2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80170d4:	697b      	ldr	r3, [r7, #20]
}
 80170d6:	4618      	mov	r0, r3
 80170d8:	3718      	adds	r7, #24
 80170da:	46bd      	mov	sp, r7
 80170dc:	bd80      	pop	{r7, pc}
 80170de:	bf00      	nop
 80170e0:	200060a0 	.word	0x200060a0
 80170e4:	20006080 	.word	0x20006080
 80170e8:	20005ba8 	.word	0x20005ba8
 80170ec:	20006038 	.word	0x20006038
 80170f0:	20005ba4 	.word	0x20005ba4
 80170f4:	2000608c 	.word	0x2000608c

080170f8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80170f8:	b580      	push	{r7, lr}
 80170fa:	b086      	sub	sp, #24
 80170fc:	af00      	add	r7, sp, #0
 80170fe:	6078      	str	r0, [r7, #4]
 8017100:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8017102:	4b29      	ldr	r3, [pc, #164]	; (80171a8 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8017104:	681b      	ldr	r3, [r3, #0]
 8017106:	2b00      	cmp	r3, #0
 8017108:	d10a      	bne.n	8017120 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 801710a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801710e:	f383 8811 	msr	BASEPRI, r3
 8017112:	f3bf 8f6f 	isb	sy
 8017116:	f3bf 8f4f 	dsb	sy
 801711a:	613b      	str	r3, [r7, #16]
}
 801711c:	bf00      	nop
 801711e:	e7fe      	b.n	801711e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8017120:	683b      	ldr	r3, [r7, #0]
 8017122:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8017126:	687b      	ldr	r3, [r7, #4]
 8017128:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801712a:	687b      	ldr	r3, [r7, #4]
 801712c:	68db      	ldr	r3, [r3, #12]
 801712e:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8017130:	697b      	ldr	r3, [r7, #20]
 8017132:	2b00      	cmp	r3, #0
 8017134:	d10a      	bne.n	801714c <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8017136:	f04f 0350 	mov.w	r3, #80	; 0x50
 801713a:	f383 8811 	msr	BASEPRI, r3
 801713e:	f3bf 8f6f 	isb	sy
 8017142:	f3bf 8f4f 	dsb	sy
 8017146:	60fb      	str	r3, [r7, #12]
}
 8017148:	bf00      	nop
 801714a:	e7fe      	b.n	801714a <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 801714c:	6878      	ldr	r0, [r7, #4]
 801714e:	f7fe fb29 	bl	80157a4 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8017152:	697b      	ldr	r3, [r7, #20]
 8017154:	3304      	adds	r3, #4
 8017156:	4618      	mov	r0, r3
 8017158:	f7fe fb24 	bl	80157a4 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 801715c:	697b      	ldr	r3, [r7, #20]
 801715e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017160:	4b12      	ldr	r3, [pc, #72]	; (80171ac <vTaskRemoveFromUnorderedEventList+0xb4>)
 8017162:	681b      	ldr	r3, [r3, #0]
 8017164:	429a      	cmp	r2, r3
 8017166:	d903      	bls.n	8017170 <vTaskRemoveFromUnorderedEventList+0x78>
 8017168:	697b      	ldr	r3, [r7, #20]
 801716a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801716c:	4a0f      	ldr	r2, [pc, #60]	; (80171ac <vTaskRemoveFromUnorderedEventList+0xb4>)
 801716e:	6013      	str	r3, [r2, #0]
 8017170:	697b      	ldr	r3, [r7, #20]
 8017172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017174:	4613      	mov	r3, r2
 8017176:	009b      	lsls	r3, r3, #2
 8017178:	4413      	add	r3, r2
 801717a:	009b      	lsls	r3, r3, #2
 801717c:	4a0c      	ldr	r2, [pc, #48]	; (80171b0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 801717e:	441a      	add	r2, r3
 8017180:	697b      	ldr	r3, [r7, #20]
 8017182:	3304      	adds	r3, #4
 8017184:	4619      	mov	r1, r3
 8017186:	4610      	mov	r0, r2
 8017188:	f7fe faaf 	bl	80156ea <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801718c:	697b      	ldr	r3, [r7, #20]
 801718e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017190:	4b08      	ldr	r3, [pc, #32]	; (80171b4 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8017192:	681b      	ldr	r3, [r3, #0]
 8017194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017196:	429a      	cmp	r2, r3
 8017198:	d902      	bls.n	80171a0 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 801719a:	4b07      	ldr	r3, [pc, #28]	; (80171b8 <vTaskRemoveFromUnorderedEventList+0xc0>)
 801719c:	2201      	movs	r2, #1
 801719e:	601a      	str	r2, [r3, #0]
	}
}
 80171a0:	bf00      	nop
 80171a2:	3718      	adds	r7, #24
 80171a4:	46bd      	mov	sp, r7
 80171a6:	bd80      	pop	{r7, pc}
 80171a8:	200060a0 	.word	0x200060a0
 80171ac:	20006080 	.word	0x20006080
 80171b0:	20005ba8 	.word	0x20005ba8
 80171b4:	20005ba4 	.word	0x20005ba4
 80171b8:	2000608c 	.word	0x2000608c

080171bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80171bc:	b480      	push	{r7}
 80171be:	b083      	sub	sp, #12
 80171c0:	af00      	add	r7, sp, #0
 80171c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80171c4:	4b06      	ldr	r3, [pc, #24]	; (80171e0 <vTaskInternalSetTimeOutState+0x24>)
 80171c6:	681a      	ldr	r2, [r3, #0]
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80171cc:	4b05      	ldr	r3, [pc, #20]	; (80171e4 <vTaskInternalSetTimeOutState+0x28>)
 80171ce:	681a      	ldr	r2, [r3, #0]
 80171d0:	687b      	ldr	r3, [r7, #4]
 80171d2:	605a      	str	r2, [r3, #4]
}
 80171d4:	bf00      	nop
 80171d6:	370c      	adds	r7, #12
 80171d8:	46bd      	mov	sp, r7
 80171da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171de:	4770      	bx	lr
 80171e0:	20006090 	.word	0x20006090
 80171e4:	2000607c 	.word	0x2000607c

080171e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80171e8:	b580      	push	{r7, lr}
 80171ea:	b088      	sub	sp, #32
 80171ec:	af00      	add	r7, sp, #0
 80171ee:	6078      	str	r0, [r7, #4]
 80171f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80171f2:	687b      	ldr	r3, [r7, #4]
 80171f4:	2b00      	cmp	r3, #0
 80171f6:	d10a      	bne.n	801720e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80171f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171fc:	f383 8811 	msr	BASEPRI, r3
 8017200:	f3bf 8f6f 	isb	sy
 8017204:	f3bf 8f4f 	dsb	sy
 8017208:	613b      	str	r3, [r7, #16]
}
 801720a:	bf00      	nop
 801720c:	e7fe      	b.n	801720c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801720e:	683b      	ldr	r3, [r7, #0]
 8017210:	2b00      	cmp	r3, #0
 8017212:	d10a      	bne.n	801722a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8017214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017218:	f383 8811 	msr	BASEPRI, r3
 801721c:	f3bf 8f6f 	isb	sy
 8017220:	f3bf 8f4f 	dsb	sy
 8017224:	60fb      	str	r3, [r7, #12]
}
 8017226:	bf00      	nop
 8017228:	e7fe      	b.n	8017228 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801722a:	f001 f87b 	bl	8018324 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801722e:	4b1d      	ldr	r3, [pc, #116]	; (80172a4 <xTaskCheckForTimeOut+0xbc>)
 8017230:	681b      	ldr	r3, [r3, #0]
 8017232:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	685b      	ldr	r3, [r3, #4]
 8017238:	69ba      	ldr	r2, [r7, #24]
 801723a:	1ad3      	subs	r3, r2, r3
 801723c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801723e:	683b      	ldr	r3, [r7, #0]
 8017240:	681b      	ldr	r3, [r3, #0]
 8017242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017246:	d102      	bne.n	801724e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8017248:	2300      	movs	r3, #0
 801724a:	61fb      	str	r3, [r7, #28]
 801724c:	e023      	b.n	8017296 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	681a      	ldr	r2, [r3, #0]
 8017252:	4b15      	ldr	r3, [pc, #84]	; (80172a8 <xTaskCheckForTimeOut+0xc0>)
 8017254:	681b      	ldr	r3, [r3, #0]
 8017256:	429a      	cmp	r2, r3
 8017258:	d007      	beq.n	801726a <xTaskCheckForTimeOut+0x82>
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	685b      	ldr	r3, [r3, #4]
 801725e:	69ba      	ldr	r2, [r7, #24]
 8017260:	429a      	cmp	r2, r3
 8017262:	d302      	bcc.n	801726a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8017264:	2301      	movs	r3, #1
 8017266:	61fb      	str	r3, [r7, #28]
 8017268:	e015      	b.n	8017296 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801726a:	683b      	ldr	r3, [r7, #0]
 801726c:	681b      	ldr	r3, [r3, #0]
 801726e:	697a      	ldr	r2, [r7, #20]
 8017270:	429a      	cmp	r2, r3
 8017272:	d20b      	bcs.n	801728c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8017274:	683b      	ldr	r3, [r7, #0]
 8017276:	681a      	ldr	r2, [r3, #0]
 8017278:	697b      	ldr	r3, [r7, #20]
 801727a:	1ad2      	subs	r2, r2, r3
 801727c:	683b      	ldr	r3, [r7, #0]
 801727e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8017280:	6878      	ldr	r0, [r7, #4]
 8017282:	f7ff ff9b 	bl	80171bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8017286:	2300      	movs	r3, #0
 8017288:	61fb      	str	r3, [r7, #28]
 801728a:	e004      	b.n	8017296 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801728c:	683b      	ldr	r3, [r7, #0]
 801728e:	2200      	movs	r2, #0
 8017290:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8017292:	2301      	movs	r3, #1
 8017294:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8017296:	f001 f875 	bl	8018384 <vPortExitCritical>

	return xReturn;
 801729a:	69fb      	ldr	r3, [r7, #28]
}
 801729c:	4618      	mov	r0, r3
 801729e:	3720      	adds	r7, #32
 80172a0:	46bd      	mov	sp, r7
 80172a2:	bd80      	pop	{r7, pc}
 80172a4:	2000607c 	.word	0x2000607c
 80172a8:	20006090 	.word	0x20006090

080172ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80172ac:	b480      	push	{r7}
 80172ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80172b0:	4b03      	ldr	r3, [pc, #12]	; (80172c0 <vTaskMissedYield+0x14>)
 80172b2:	2201      	movs	r2, #1
 80172b4:	601a      	str	r2, [r3, #0]
}
 80172b6:	bf00      	nop
 80172b8:	46bd      	mov	sp, r7
 80172ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172be:	4770      	bx	lr
 80172c0:	2000608c 	.word	0x2000608c

080172c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80172c4:	b580      	push	{r7, lr}
 80172c6:	b082      	sub	sp, #8
 80172c8:	af00      	add	r7, sp, #0
 80172ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80172cc:	f000 f852 	bl	8017374 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80172d0:	4b06      	ldr	r3, [pc, #24]	; (80172ec <prvIdleTask+0x28>)
 80172d2:	681b      	ldr	r3, [r3, #0]
 80172d4:	2b01      	cmp	r3, #1
 80172d6:	d9f9      	bls.n	80172cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80172d8:	4b05      	ldr	r3, [pc, #20]	; (80172f0 <prvIdleTask+0x2c>)
 80172da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80172de:	601a      	str	r2, [r3, #0]
 80172e0:	f3bf 8f4f 	dsb	sy
 80172e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80172e8:	e7f0      	b.n	80172cc <prvIdleTask+0x8>
 80172ea:	bf00      	nop
 80172ec:	20005ba8 	.word	0x20005ba8
 80172f0:	e000ed04 	.word	0xe000ed04

080172f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80172f4:	b580      	push	{r7, lr}
 80172f6:	b082      	sub	sp, #8
 80172f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80172fa:	2300      	movs	r3, #0
 80172fc:	607b      	str	r3, [r7, #4]
 80172fe:	e00c      	b.n	801731a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8017300:	687a      	ldr	r2, [r7, #4]
 8017302:	4613      	mov	r3, r2
 8017304:	009b      	lsls	r3, r3, #2
 8017306:	4413      	add	r3, r2
 8017308:	009b      	lsls	r3, r3, #2
 801730a:	4a12      	ldr	r2, [pc, #72]	; (8017354 <prvInitialiseTaskLists+0x60>)
 801730c:	4413      	add	r3, r2
 801730e:	4618      	mov	r0, r3
 8017310:	f7fe f9be 	bl	8015690 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	3301      	adds	r3, #1
 8017318:	607b      	str	r3, [r7, #4]
 801731a:	687b      	ldr	r3, [r7, #4]
 801731c:	2b37      	cmp	r3, #55	; 0x37
 801731e:	d9ef      	bls.n	8017300 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8017320:	480d      	ldr	r0, [pc, #52]	; (8017358 <prvInitialiseTaskLists+0x64>)
 8017322:	f7fe f9b5 	bl	8015690 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8017326:	480d      	ldr	r0, [pc, #52]	; (801735c <prvInitialiseTaskLists+0x68>)
 8017328:	f7fe f9b2 	bl	8015690 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801732c:	480c      	ldr	r0, [pc, #48]	; (8017360 <prvInitialiseTaskLists+0x6c>)
 801732e:	f7fe f9af 	bl	8015690 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8017332:	480c      	ldr	r0, [pc, #48]	; (8017364 <prvInitialiseTaskLists+0x70>)
 8017334:	f7fe f9ac 	bl	8015690 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8017338:	480b      	ldr	r0, [pc, #44]	; (8017368 <prvInitialiseTaskLists+0x74>)
 801733a:	f7fe f9a9 	bl	8015690 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801733e:	4b0b      	ldr	r3, [pc, #44]	; (801736c <prvInitialiseTaskLists+0x78>)
 8017340:	4a05      	ldr	r2, [pc, #20]	; (8017358 <prvInitialiseTaskLists+0x64>)
 8017342:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8017344:	4b0a      	ldr	r3, [pc, #40]	; (8017370 <prvInitialiseTaskLists+0x7c>)
 8017346:	4a05      	ldr	r2, [pc, #20]	; (801735c <prvInitialiseTaskLists+0x68>)
 8017348:	601a      	str	r2, [r3, #0]
}
 801734a:	bf00      	nop
 801734c:	3708      	adds	r7, #8
 801734e:	46bd      	mov	sp, r7
 8017350:	bd80      	pop	{r7, pc}
 8017352:	bf00      	nop
 8017354:	20005ba8 	.word	0x20005ba8
 8017358:	20006008 	.word	0x20006008
 801735c:	2000601c 	.word	0x2000601c
 8017360:	20006038 	.word	0x20006038
 8017364:	2000604c 	.word	0x2000604c
 8017368:	20006064 	.word	0x20006064
 801736c:	20006030 	.word	0x20006030
 8017370:	20006034 	.word	0x20006034

08017374 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8017374:	b580      	push	{r7, lr}
 8017376:	b082      	sub	sp, #8
 8017378:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801737a:	e019      	b.n	80173b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801737c:	f000 ffd2 	bl	8018324 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017380:	4b10      	ldr	r3, [pc, #64]	; (80173c4 <prvCheckTasksWaitingTermination+0x50>)
 8017382:	68db      	ldr	r3, [r3, #12]
 8017384:	68db      	ldr	r3, [r3, #12]
 8017386:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	3304      	adds	r3, #4
 801738c:	4618      	mov	r0, r3
 801738e:	f7fe fa09 	bl	80157a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8017392:	4b0d      	ldr	r3, [pc, #52]	; (80173c8 <prvCheckTasksWaitingTermination+0x54>)
 8017394:	681b      	ldr	r3, [r3, #0]
 8017396:	3b01      	subs	r3, #1
 8017398:	4a0b      	ldr	r2, [pc, #44]	; (80173c8 <prvCheckTasksWaitingTermination+0x54>)
 801739a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801739c:	4b0b      	ldr	r3, [pc, #44]	; (80173cc <prvCheckTasksWaitingTermination+0x58>)
 801739e:	681b      	ldr	r3, [r3, #0]
 80173a0:	3b01      	subs	r3, #1
 80173a2:	4a0a      	ldr	r2, [pc, #40]	; (80173cc <prvCheckTasksWaitingTermination+0x58>)
 80173a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80173a6:	f000 ffed 	bl	8018384 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80173aa:	6878      	ldr	r0, [r7, #4]
 80173ac:	f000 f810 	bl	80173d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80173b0:	4b06      	ldr	r3, [pc, #24]	; (80173cc <prvCheckTasksWaitingTermination+0x58>)
 80173b2:	681b      	ldr	r3, [r3, #0]
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	d1e1      	bne.n	801737c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80173b8:	bf00      	nop
 80173ba:	bf00      	nop
 80173bc:	3708      	adds	r7, #8
 80173be:	46bd      	mov	sp, r7
 80173c0:	bd80      	pop	{r7, pc}
 80173c2:	bf00      	nop
 80173c4:	2000604c 	.word	0x2000604c
 80173c8:	20006078 	.word	0x20006078
 80173cc:	20006060 	.word	0x20006060

080173d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80173d0:	b580      	push	{r7, lr}
 80173d2:	b084      	sub	sp, #16
 80173d4:	af00      	add	r7, sp, #0
 80173d6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80173d8:	687b      	ldr	r3, [r7, #4]
 80173da:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80173de:	2b00      	cmp	r3, #0
 80173e0:	d108      	bne.n	80173f4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80173e2:	687b      	ldr	r3, [r7, #4]
 80173e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80173e6:	4618      	mov	r0, r3
 80173e8:	f001 f98a 	bl	8018700 <vPortFree>
				vPortFree( pxTCB );
 80173ec:	6878      	ldr	r0, [r7, #4]
 80173ee:	f001 f987 	bl	8018700 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80173f2:	e018      	b.n	8017426 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80173f4:	687b      	ldr	r3, [r7, #4]
 80173f6:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80173fa:	2b01      	cmp	r3, #1
 80173fc:	d103      	bne.n	8017406 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80173fe:	6878      	ldr	r0, [r7, #4]
 8017400:	f001 f97e 	bl	8018700 <vPortFree>
	}
 8017404:	e00f      	b.n	8017426 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 801740c:	2b02      	cmp	r3, #2
 801740e:	d00a      	beq.n	8017426 <prvDeleteTCB+0x56>
	__asm volatile
 8017410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017414:	f383 8811 	msr	BASEPRI, r3
 8017418:	f3bf 8f6f 	isb	sy
 801741c:	f3bf 8f4f 	dsb	sy
 8017420:	60fb      	str	r3, [r7, #12]
}
 8017422:	bf00      	nop
 8017424:	e7fe      	b.n	8017424 <prvDeleteTCB+0x54>
	}
 8017426:	bf00      	nop
 8017428:	3710      	adds	r7, #16
 801742a:	46bd      	mov	sp, r7
 801742c:	bd80      	pop	{r7, pc}
	...

08017430 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8017430:	b480      	push	{r7}
 8017432:	b083      	sub	sp, #12
 8017434:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017436:	4b0c      	ldr	r3, [pc, #48]	; (8017468 <prvResetNextTaskUnblockTime+0x38>)
 8017438:	681b      	ldr	r3, [r3, #0]
 801743a:	681b      	ldr	r3, [r3, #0]
 801743c:	2b00      	cmp	r3, #0
 801743e:	d104      	bne.n	801744a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8017440:	4b0a      	ldr	r3, [pc, #40]	; (801746c <prvResetNextTaskUnblockTime+0x3c>)
 8017442:	f04f 32ff 	mov.w	r2, #4294967295
 8017446:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8017448:	e008      	b.n	801745c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801744a:	4b07      	ldr	r3, [pc, #28]	; (8017468 <prvResetNextTaskUnblockTime+0x38>)
 801744c:	681b      	ldr	r3, [r3, #0]
 801744e:	68db      	ldr	r3, [r3, #12]
 8017450:	68db      	ldr	r3, [r3, #12]
 8017452:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	685b      	ldr	r3, [r3, #4]
 8017458:	4a04      	ldr	r2, [pc, #16]	; (801746c <prvResetNextTaskUnblockTime+0x3c>)
 801745a:	6013      	str	r3, [r2, #0]
}
 801745c:	bf00      	nop
 801745e:	370c      	adds	r7, #12
 8017460:	46bd      	mov	sp, r7
 8017462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017466:	4770      	bx	lr
 8017468:	20006030 	.word	0x20006030
 801746c:	20006098 	.word	0x20006098

08017470 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8017470:	b480      	push	{r7}
 8017472:	b083      	sub	sp, #12
 8017474:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8017476:	4b05      	ldr	r3, [pc, #20]	; (801748c <xTaskGetCurrentTaskHandle+0x1c>)
 8017478:	681b      	ldr	r3, [r3, #0]
 801747a:	607b      	str	r3, [r7, #4]

		return xReturn;
 801747c:	687b      	ldr	r3, [r7, #4]
	}
 801747e:	4618      	mov	r0, r3
 8017480:	370c      	adds	r7, #12
 8017482:	46bd      	mov	sp, r7
 8017484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017488:	4770      	bx	lr
 801748a:	bf00      	nop
 801748c:	20005ba4 	.word	0x20005ba4

08017490 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8017490:	b480      	push	{r7}
 8017492:	b083      	sub	sp, #12
 8017494:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8017496:	4b0b      	ldr	r3, [pc, #44]	; (80174c4 <xTaskGetSchedulerState+0x34>)
 8017498:	681b      	ldr	r3, [r3, #0]
 801749a:	2b00      	cmp	r3, #0
 801749c:	d102      	bne.n	80174a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801749e:	2301      	movs	r3, #1
 80174a0:	607b      	str	r3, [r7, #4]
 80174a2:	e008      	b.n	80174b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80174a4:	4b08      	ldr	r3, [pc, #32]	; (80174c8 <xTaskGetSchedulerState+0x38>)
 80174a6:	681b      	ldr	r3, [r3, #0]
 80174a8:	2b00      	cmp	r3, #0
 80174aa:	d102      	bne.n	80174b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80174ac:	2302      	movs	r3, #2
 80174ae:	607b      	str	r3, [r7, #4]
 80174b0:	e001      	b.n	80174b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80174b2:	2300      	movs	r3, #0
 80174b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80174b6:	687b      	ldr	r3, [r7, #4]
	}
 80174b8:	4618      	mov	r0, r3
 80174ba:	370c      	adds	r7, #12
 80174bc:	46bd      	mov	sp, r7
 80174be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174c2:	4770      	bx	lr
 80174c4:	20006084 	.word	0x20006084
 80174c8:	200060a0 	.word	0x200060a0

080174cc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80174cc:	b580      	push	{r7, lr}
 80174ce:	b084      	sub	sp, #16
 80174d0:	af00      	add	r7, sp, #0
 80174d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80174d8:	2300      	movs	r3, #0
 80174da:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	2b00      	cmp	r3, #0
 80174e0:	d051      	beq.n	8017586 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80174e2:	68bb      	ldr	r3, [r7, #8]
 80174e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80174e6:	4b2a      	ldr	r3, [pc, #168]	; (8017590 <xTaskPriorityInherit+0xc4>)
 80174e8:	681b      	ldr	r3, [r3, #0]
 80174ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80174ec:	429a      	cmp	r2, r3
 80174ee:	d241      	bcs.n	8017574 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80174f0:	68bb      	ldr	r3, [r7, #8]
 80174f2:	699b      	ldr	r3, [r3, #24]
 80174f4:	2b00      	cmp	r3, #0
 80174f6:	db06      	blt.n	8017506 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80174f8:	4b25      	ldr	r3, [pc, #148]	; (8017590 <xTaskPriorityInherit+0xc4>)
 80174fa:	681b      	ldr	r3, [r3, #0]
 80174fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80174fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017502:	68bb      	ldr	r3, [r7, #8]
 8017504:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8017506:	68bb      	ldr	r3, [r7, #8]
 8017508:	6959      	ldr	r1, [r3, #20]
 801750a:	68bb      	ldr	r3, [r7, #8]
 801750c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801750e:	4613      	mov	r3, r2
 8017510:	009b      	lsls	r3, r3, #2
 8017512:	4413      	add	r3, r2
 8017514:	009b      	lsls	r3, r3, #2
 8017516:	4a1f      	ldr	r2, [pc, #124]	; (8017594 <xTaskPriorityInherit+0xc8>)
 8017518:	4413      	add	r3, r2
 801751a:	4299      	cmp	r1, r3
 801751c:	d122      	bne.n	8017564 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801751e:	68bb      	ldr	r3, [r7, #8]
 8017520:	3304      	adds	r3, #4
 8017522:	4618      	mov	r0, r3
 8017524:	f7fe f93e 	bl	80157a4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8017528:	4b19      	ldr	r3, [pc, #100]	; (8017590 <xTaskPriorityInherit+0xc4>)
 801752a:	681b      	ldr	r3, [r3, #0]
 801752c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801752e:	68bb      	ldr	r3, [r7, #8]
 8017530:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8017532:	68bb      	ldr	r3, [r7, #8]
 8017534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017536:	4b18      	ldr	r3, [pc, #96]	; (8017598 <xTaskPriorityInherit+0xcc>)
 8017538:	681b      	ldr	r3, [r3, #0]
 801753a:	429a      	cmp	r2, r3
 801753c:	d903      	bls.n	8017546 <xTaskPriorityInherit+0x7a>
 801753e:	68bb      	ldr	r3, [r7, #8]
 8017540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017542:	4a15      	ldr	r2, [pc, #84]	; (8017598 <xTaskPriorityInherit+0xcc>)
 8017544:	6013      	str	r3, [r2, #0]
 8017546:	68bb      	ldr	r3, [r7, #8]
 8017548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801754a:	4613      	mov	r3, r2
 801754c:	009b      	lsls	r3, r3, #2
 801754e:	4413      	add	r3, r2
 8017550:	009b      	lsls	r3, r3, #2
 8017552:	4a10      	ldr	r2, [pc, #64]	; (8017594 <xTaskPriorityInherit+0xc8>)
 8017554:	441a      	add	r2, r3
 8017556:	68bb      	ldr	r3, [r7, #8]
 8017558:	3304      	adds	r3, #4
 801755a:	4619      	mov	r1, r3
 801755c:	4610      	mov	r0, r2
 801755e:	f7fe f8c4 	bl	80156ea <vListInsertEnd>
 8017562:	e004      	b.n	801756e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8017564:	4b0a      	ldr	r3, [pc, #40]	; (8017590 <xTaskPriorityInherit+0xc4>)
 8017566:	681b      	ldr	r3, [r3, #0]
 8017568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801756a:	68bb      	ldr	r3, [r7, #8]
 801756c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801756e:	2301      	movs	r3, #1
 8017570:	60fb      	str	r3, [r7, #12]
 8017572:	e008      	b.n	8017586 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8017574:	68bb      	ldr	r3, [r7, #8]
 8017576:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8017578:	4b05      	ldr	r3, [pc, #20]	; (8017590 <xTaskPriorityInherit+0xc4>)
 801757a:	681b      	ldr	r3, [r3, #0]
 801757c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801757e:	429a      	cmp	r2, r3
 8017580:	d201      	bcs.n	8017586 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8017582:	2301      	movs	r3, #1
 8017584:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017586:	68fb      	ldr	r3, [r7, #12]
	}
 8017588:	4618      	mov	r0, r3
 801758a:	3710      	adds	r7, #16
 801758c:	46bd      	mov	sp, r7
 801758e:	bd80      	pop	{r7, pc}
 8017590:	20005ba4 	.word	0x20005ba4
 8017594:	20005ba8 	.word	0x20005ba8
 8017598:	20006080 	.word	0x20006080

0801759c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801759c:	b580      	push	{r7, lr}
 801759e:	b086      	sub	sp, #24
 80175a0:	af00      	add	r7, sp, #0
 80175a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80175a4:	687b      	ldr	r3, [r7, #4]
 80175a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80175a8:	2300      	movs	r3, #0
 80175aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	2b00      	cmp	r3, #0
 80175b0:	d056      	beq.n	8017660 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80175b2:	4b2e      	ldr	r3, [pc, #184]	; (801766c <xTaskPriorityDisinherit+0xd0>)
 80175b4:	681b      	ldr	r3, [r3, #0]
 80175b6:	693a      	ldr	r2, [r7, #16]
 80175b8:	429a      	cmp	r2, r3
 80175ba:	d00a      	beq.n	80175d2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80175bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175c0:	f383 8811 	msr	BASEPRI, r3
 80175c4:	f3bf 8f6f 	isb	sy
 80175c8:	f3bf 8f4f 	dsb	sy
 80175cc:	60fb      	str	r3, [r7, #12]
}
 80175ce:	bf00      	nop
 80175d0:	e7fe      	b.n	80175d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80175d2:	693b      	ldr	r3, [r7, #16]
 80175d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80175d6:	2b00      	cmp	r3, #0
 80175d8:	d10a      	bne.n	80175f0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80175da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175de:	f383 8811 	msr	BASEPRI, r3
 80175e2:	f3bf 8f6f 	isb	sy
 80175e6:	f3bf 8f4f 	dsb	sy
 80175ea:	60bb      	str	r3, [r7, #8]
}
 80175ec:	bf00      	nop
 80175ee:	e7fe      	b.n	80175ee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80175f0:	693b      	ldr	r3, [r7, #16]
 80175f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80175f4:	1e5a      	subs	r2, r3, #1
 80175f6:	693b      	ldr	r3, [r7, #16]
 80175f8:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80175fa:	693b      	ldr	r3, [r7, #16]
 80175fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80175fe:	693b      	ldr	r3, [r7, #16]
 8017600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017602:	429a      	cmp	r2, r3
 8017604:	d02c      	beq.n	8017660 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8017606:	693b      	ldr	r3, [r7, #16]
 8017608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801760a:	2b00      	cmp	r3, #0
 801760c:	d128      	bne.n	8017660 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801760e:	693b      	ldr	r3, [r7, #16]
 8017610:	3304      	adds	r3, #4
 8017612:	4618      	mov	r0, r3
 8017614:	f7fe f8c6 	bl	80157a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8017618:	693b      	ldr	r3, [r7, #16]
 801761a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801761c:	693b      	ldr	r3, [r7, #16]
 801761e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017620:	693b      	ldr	r3, [r7, #16]
 8017622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017624:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017628:	693b      	ldr	r3, [r7, #16]
 801762a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801762c:	693b      	ldr	r3, [r7, #16]
 801762e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017630:	4b0f      	ldr	r3, [pc, #60]	; (8017670 <xTaskPriorityDisinherit+0xd4>)
 8017632:	681b      	ldr	r3, [r3, #0]
 8017634:	429a      	cmp	r2, r3
 8017636:	d903      	bls.n	8017640 <xTaskPriorityDisinherit+0xa4>
 8017638:	693b      	ldr	r3, [r7, #16]
 801763a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801763c:	4a0c      	ldr	r2, [pc, #48]	; (8017670 <xTaskPriorityDisinherit+0xd4>)
 801763e:	6013      	str	r3, [r2, #0]
 8017640:	693b      	ldr	r3, [r7, #16]
 8017642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017644:	4613      	mov	r3, r2
 8017646:	009b      	lsls	r3, r3, #2
 8017648:	4413      	add	r3, r2
 801764a:	009b      	lsls	r3, r3, #2
 801764c:	4a09      	ldr	r2, [pc, #36]	; (8017674 <xTaskPriorityDisinherit+0xd8>)
 801764e:	441a      	add	r2, r3
 8017650:	693b      	ldr	r3, [r7, #16]
 8017652:	3304      	adds	r3, #4
 8017654:	4619      	mov	r1, r3
 8017656:	4610      	mov	r0, r2
 8017658:	f7fe f847 	bl	80156ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801765c:	2301      	movs	r3, #1
 801765e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017660:	697b      	ldr	r3, [r7, #20]
	}
 8017662:	4618      	mov	r0, r3
 8017664:	3718      	adds	r7, #24
 8017666:	46bd      	mov	sp, r7
 8017668:	bd80      	pop	{r7, pc}
 801766a:	bf00      	nop
 801766c:	20005ba4 	.word	0x20005ba4
 8017670:	20006080 	.word	0x20006080
 8017674:	20005ba8 	.word	0x20005ba8

08017678 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8017678:	b580      	push	{r7, lr}
 801767a:	b088      	sub	sp, #32
 801767c:	af00      	add	r7, sp, #0
 801767e:	6078      	str	r0, [r7, #4]
 8017680:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8017682:	687b      	ldr	r3, [r7, #4]
 8017684:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8017686:	2301      	movs	r3, #1
 8017688:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801768a:	687b      	ldr	r3, [r7, #4]
 801768c:	2b00      	cmp	r3, #0
 801768e:	d06a      	beq.n	8017766 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8017690:	69bb      	ldr	r3, [r7, #24]
 8017692:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017694:	2b00      	cmp	r3, #0
 8017696:	d10a      	bne.n	80176ae <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8017698:	f04f 0350 	mov.w	r3, #80	; 0x50
 801769c:	f383 8811 	msr	BASEPRI, r3
 80176a0:	f3bf 8f6f 	isb	sy
 80176a4:	f3bf 8f4f 	dsb	sy
 80176a8:	60fb      	str	r3, [r7, #12]
}
 80176aa:	bf00      	nop
 80176ac:	e7fe      	b.n	80176ac <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80176ae:	69bb      	ldr	r3, [r7, #24]
 80176b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80176b2:	683a      	ldr	r2, [r7, #0]
 80176b4:	429a      	cmp	r2, r3
 80176b6:	d902      	bls.n	80176be <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80176b8:	683b      	ldr	r3, [r7, #0]
 80176ba:	61fb      	str	r3, [r7, #28]
 80176bc:	e002      	b.n	80176c4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80176be:	69bb      	ldr	r3, [r7, #24]
 80176c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80176c2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80176c4:	69bb      	ldr	r3, [r7, #24]
 80176c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80176c8:	69fa      	ldr	r2, [r7, #28]
 80176ca:	429a      	cmp	r2, r3
 80176cc:	d04b      	beq.n	8017766 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80176ce:	69bb      	ldr	r3, [r7, #24]
 80176d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80176d2:	697a      	ldr	r2, [r7, #20]
 80176d4:	429a      	cmp	r2, r3
 80176d6:	d146      	bne.n	8017766 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80176d8:	4b25      	ldr	r3, [pc, #148]	; (8017770 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80176da:	681b      	ldr	r3, [r3, #0]
 80176dc:	69ba      	ldr	r2, [r7, #24]
 80176de:	429a      	cmp	r2, r3
 80176e0:	d10a      	bne.n	80176f8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80176e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176e6:	f383 8811 	msr	BASEPRI, r3
 80176ea:	f3bf 8f6f 	isb	sy
 80176ee:	f3bf 8f4f 	dsb	sy
 80176f2:	60bb      	str	r3, [r7, #8]
}
 80176f4:	bf00      	nop
 80176f6:	e7fe      	b.n	80176f6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80176f8:	69bb      	ldr	r3, [r7, #24]
 80176fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80176fc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80176fe:	69bb      	ldr	r3, [r7, #24]
 8017700:	69fa      	ldr	r2, [r7, #28]
 8017702:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8017704:	69bb      	ldr	r3, [r7, #24]
 8017706:	699b      	ldr	r3, [r3, #24]
 8017708:	2b00      	cmp	r3, #0
 801770a:	db04      	blt.n	8017716 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801770c:	69fb      	ldr	r3, [r7, #28]
 801770e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017712:	69bb      	ldr	r3, [r7, #24]
 8017714:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8017716:	69bb      	ldr	r3, [r7, #24]
 8017718:	6959      	ldr	r1, [r3, #20]
 801771a:	693a      	ldr	r2, [r7, #16]
 801771c:	4613      	mov	r3, r2
 801771e:	009b      	lsls	r3, r3, #2
 8017720:	4413      	add	r3, r2
 8017722:	009b      	lsls	r3, r3, #2
 8017724:	4a13      	ldr	r2, [pc, #76]	; (8017774 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8017726:	4413      	add	r3, r2
 8017728:	4299      	cmp	r1, r3
 801772a:	d11c      	bne.n	8017766 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801772c:	69bb      	ldr	r3, [r7, #24]
 801772e:	3304      	adds	r3, #4
 8017730:	4618      	mov	r0, r3
 8017732:	f7fe f837 	bl	80157a4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8017736:	69bb      	ldr	r3, [r7, #24]
 8017738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801773a:	4b0f      	ldr	r3, [pc, #60]	; (8017778 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801773c:	681b      	ldr	r3, [r3, #0]
 801773e:	429a      	cmp	r2, r3
 8017740:	d903      	bls.n	801774a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8017742:	69bb      	ldr	r3, [r7, #24]
 8017744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017746:	4a0c      	ldr	r2, [pc, #48]	; (8017778 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8017748:	6013      	str	r3, [r2, #0]
 801774a:	69bb      	ldr	r3, [r7, #24]
 801774c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801774e:	4613      	mov	r3, r2
 8017750:	009b      	lsls	r3, r3, #2
 8017752:	4413      	add	r3, r2
 8017754:	009b      	lsls	r3, r3, #2
 8017756:	4a07      	ldr	r2, [pc, #28]	; (8017774 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8017758:	441a      	add	r2, r3
 801775a:	69bb      	ldr	r3, [r7, #24]
 801775c:	3304      	adds	r3, #4
 801775e:	4619      	mov	r1, r3
 8017760:	4610      	mov	r0, r2
 8017762:	f7fd ffc2 	bl	80156ea <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017766:	bf00      	nop
 8017768:	3720      	adds	r7, #32
 801776a:	46bd      	mov	sp, r7
 801776c:	bd80      	pop	{r7, pc}
 801776e:	bf00      	nop
 8017770:	20005ba4 	.word	0x20005ba4
 8017774:	20005ba8 	.word	0x20005ba8
 8017778:	20006080 	.word	0x20006080

0801777c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 801777c:	b480      	push	{r7}
 801777e:	b083      	sub	sp, #12
 8017780:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8017782:	4b09      	ldr	r3, [pc, #36]	; (80177a8 <uxTaskResetEventItemValue+0x2c>)
 8017784:	681b      	ldr	r3, [r3, #0]
 8017786:	699b      	ldr	r3, [r3, #24]
 8017788:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801778a:	4b07      	ldr	r3, [pc, #28]	; (80177a8 <uxTaskResetEventItemValue+0x2c>)
 801778c:	681b      	ldr	r3, [r3, #0]
 801778e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017790:	4b05      	ldr	r3, [pc, #20]	; (80177a8 <uxTaskResetEventItemValue+0x2c>)
 8017792:	681b      	ldr	r3, [r3, #0]
 8017794:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8017798:	619a      	str	r2, [r3, #24]

	return uxReturn;
 801779a:	687b      	ldr	r3, [r7, #4]
}
 801779c:	4618      	mov	r0, r3
 801779e:	370c      	adds	r7, #12
 80177a0:	46bd      	mov	sp, r7
 80177a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177a6:	4770      	bx	lr
 80177a8:	20005ba4 	.word	0x20005ba4

080177ac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80177ac:	b480      	push	{r7}
 80177ae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80177b0:	4b07      	ldr	r3, [pc, #28]	; (80177d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80177b2:	681b      	ldr	r3, [r3, #0]
 80177b4:	2b00      	cmp	r3, #0
 80177b6:	d004      	beq.n	80177c2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80177b8:	4b05      	ldr	r3, [pc, #20]	; (80177d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80177ba:	681b      	ldr	r3, [r3, #0]
 80177bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80177be:	3201      	adds	r2, #1
 80177c0:	661a      	str	r2, [r3, #96]	; 0x60
		}

		return pxCurrentTCB;
 80177c2:	4b03      	ldr	r3, [pc, #12]	; (80177d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80177c4:	681b      	ldr	r3, [r3, #0]
	}
 80177c6:	4618      	mov	r0, r3
 80177c8:	46bd      	mov	sp, r7
 80177ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177ce:	4770      	bx	lr
 80177d0:	20005ba4 	.word	0x20005ba4

080177d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80177d4:	b580      	push	{r7, lr}
 80177d6:	b084      	sub	sp, #16
 80177d8:	af00      	add	r7, sp, #0
 80177da:	6078      	str	r0, [r7, #4]
 80177dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80177de:	4b21      	ldr	r3, [pc, #132]	; (8017864 <prvAddCurrentTaskToDelayedList+0x90>)
 80177e0:	681b      	ldr	r3, [r3, #0]
 80177e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80177e4:	4b20      	ldr	r3, [pc, #128]	; (8017868 <prvAddCurrentTaskToDelayedList+0x94>)
 80177e6:	681b      	ldr	r3, [r3, #0]
 80177e8:	3304      	adds	r3, #4
 80177ea:	4618      	mov	r0, r3
 80177ec:	f7fd ffda 	bl	80157a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80177f0:	687b      	ldr	r3, [r7, #4]
 80177f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80177f6:	d10a      	bne.n	801780e <prvAddCurrentTaskToDelayedList+0x3a>
 80177f8:	683b      	ldr	r3, [r7, #0]
 80177fa:	2b00      	cmp	r3, #0
 80177fc:	d007      	beq.n	801780e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80177fe:	4b1a      	ldr	r3, [pc, #104]	; (8017868 <prvAddCurrentTaskToDelayedList+0x94>)
 8017800:	681b      	ldr	r3, [r3, #0]
 8017802:	3304      	adds	r3, #4
 8017804:	4619      	mov	r1, r3
 8017806:	4819      	ldr	r0, [pc, #100]	; (801786c <prvAddCurrentTaskToDelayedList+0x98>)
 8017808:	f7fd ff6f 	bl	80156ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801780c:	e026      	b.n	801785c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801780e:	68fa      	ldr	r2, [r7, #12]
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	4413      	add	r3, r2
 8017814:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8017816:	4b14      	ldr	r3, [pc, #80]	; (8017868 <prvAddCurrentTaskToDelayedList+0x94>)
 8017818:	681b      	ldr	r3, [r3, #0]
 801781a:	68ba      	ldr	r2, [r7, #8]
 801781c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801781e:	68ba      	ldr	r2, [r7, #8]
 8017820:	68fb      	ldr	r3, [r7, #12]
 8017822:	429a      	cmp	r2, r3
 8017824:	d209      	bcs.n	801783a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017826:	4b12      	ldr	r3, [pc, #72]	; (8017870 <prvAddCurrentTaskToDelayedList+0x9c>)
 8017828:	681a      	ldr	r2, [r3, #0]
 801782a:	4b0f      	ldr	r3, [pc, #60]	; (8017868 <prvAddCurrentTaskToDelayedList+0x94>)
 801782c:	681b      	ldr	r3, [r3, #0]
 801782e:	3304      	adds	r3, #4
 8017830:	4619      	mov	r1, r3
 8017832:	4610      	mov	r0, r2
 8017834:	f7fd ff7d 	bl	8015732 <vListInsert>
}
 8017838:	e010      	b.n	801785c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801783a:	4b0e      	ldr	r3, [pc, #56]	; (8017874 <prvAddCurrentTaskToDelayedList+0xa0>)
 801783c:	681a      	ldr	r2, [r3, #0]
 801783e:	4b0a      	ldr	r3, [pc, #40]	; (8017868 <prvAddCurrentTaskToDelayedList+0x94>)
 8017840:	681b      	ldr	r3, [r3, #0]
 8017842:	3304      	adds	r3, #4
 8017844:	4619      	mov	r1, r3
 8017846:	4610      	mov	r0, r2
 8017848:	f7fd ff73 	bl	8015732 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801784c:	4b0a      	ldr	r3, [pc, #40]	; (8017878 <prvAddCurrentTaskToDelayedList+0xa4>)
 801784e:	681b      	ldr	r3, [r3, #0]
 8017850:	68ba      	ldr	r2, [r7, #8]
 8017852:	429a      	cmp	r2, r3
 8017854:	d202      	bcs.n	801785c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8017856:	4a08      	ldr	r2, [pc, #32]	; (8017878 <prvAddCurrentTaskToDelayedList+0xa4>)
 8017858:	68bb      	ldr	r3, [r7, #8]
 801785a:	6013      	str	r3, [r2, #0]
}
 801785c:	bf00      	nop
 801785e:	3710      	adds	r7, #16
 8017860:	46bd      	mov	sp, r7
 8017862:	bd80      	pop	{r7, pc}
 8017864:	2000607c 	.word	0x2000607c
 8017868:	20005ba4 	.word	0x20005ba4
 801786c:	20006064 	.word	0x20006064
 8017870:	20006034 	.word	0x20006034
 8017874:	20006030 	.word	0x20006030
 8017878:	20006098 	.word	0x20006098

0801787c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801787c:	b580      	push	{r7, lr}
 801787e:	b08a      	sub	sp, #40	; 0x28
 8017880:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8017882:	2300      	movs	r3, #0
 8017884:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8017886:	f000 fba1 	bl	8017fcc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801788a:	4b1c      	ldr	r3, [pc, #112]	; (80178fc <xTimerCreateTimerTask+0x80>)
 801788c:	681b      	ldr	r3, [r3, #0]
 801788e:	2b00      	cmp	r3, #0
 8017890:	d021      	beq.n	80178d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8017892:	2300      	movs	r3, #0
 8017894:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8017896:	2300      	movs	r3, #0
 8017898:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801789a:	1d3a      	adds	r2, r7, #4
 801789c:	f107 0108 	add.w	r1, r7, #8
 80178a0:	f107 030c 	add.w	r3, r7, #12
 80178a4:	4618      	mov	r0, r3
 80178a6:	f7fd fc6d 	bl	8015184 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80178aa:	6879      	ldr	r1, [r7, #4]
 80178ac:	68bb      	ldr	r3, [r7, #8]
 80178ae:	68fa      	ldr	r2, [r7, #12]
 80178b0:	9202      	str	r2, [sp, #8]
 80178b2:	9301      	str	r3, [sp, #4]
 80178b4:	2302      	movs	r3, #2
 80178b6:	9300      	str	r3, [sp, #0]
 80178b8:	2300      	movs	r3, #0
 80178ba:	460a      	mov	r2, r1
 80178bc:	4910      	ldr	r1, [pc, #64]	; (8017900 <xTimerCreateTimerTask+0x84>)
 80178be:	4811      	ldr	r0, [pc, #68]	; (8017904 <xTimerCreateTimerTask+0x88>)
 80178c0:	f7fe ff1a 	bl	80166f8 <xTaskCreateStatic>
 80178c4:	4603      	mov	r3, r0
 80178c6:	4a10      	ldr	r2, [pc, #64]	; (8017908 <xTimerCreateTimerTask+0x8c>)
 80178c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80178ca:	4b0f      	ldr	r3, [pc, #60]	; (8017908 <xTimerCreateTimerTask+0x8c>)
 80178cc:	681b      	ldr	r3, [r3, #0]
 80178ce:	2b00      	cmp	r3, #0
 80178d0:	d001      	beq.n	80178d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80178d2:	2301      	movs	r3, #1
 80178d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80178d6:	697b      	ldr	r3, [r7, #20]
 80178d8:	2b00      	cmp	r3, #0
 80178da:	d10a      	bne.n	80178f2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80178dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178e0:	f383 8811 	msr	BASEPRI, r3
 80178e4:	f3bf 8f6f 	isb	sy
 80178e8:	f3bf 8f4f 	dsb	sy
 80178ec:	613b      	str	r3, [r7, #16]
}
 80178ee:	bf00      	nop
 80178f0:	e7fe      	b.n	80178f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80178f2:	697b      	ldr	r3, [r7, #20]
}
 80178f4:	4618      	mov	r0, r3
 80178f6:	3718      	adds	r7, #24
 80178f8:	46bd      	mov	sp, r7
 80178fa:	bd80      	pop	{r7, pc}
 80178fc:	200060d4 	.word	0x200060d4
 8017900:	0801f4ac 	.word	0x0801f4ac
 8017904:	08017b75 	.word	0x08017b75
 8017908:	200060d8 	.word	0x200060d8

0801790c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 801790c:	b580      	push	{r7, lr}
 801790e:	b088      	sub	sp, #32
 8017910:	af02      	add	r7, sp, #8
 8017912:	60f8      	str	r0, [r7, #12]
 8017914:	60b9      	str	r1, [r7, #8]
 8017916:	607a      	str	r2, [r7, #4]
 8017918:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 801791a:	202c      	movs	r0, #44	; 0x2c
 801791c:	f000 fe24 	bl	8018568 <pvPortMalloc>
 8017920:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8017922:	697b      	ldr	r3, [r7, #20]
 8017924:	2b00      	cmp	r3, #0
 8017926:	d00d      	beq.n	8017944 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8017928:	697b      	ldr	r3, [r7, #20]
 801792a:	2200      	movs	r2, #0
 801792c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8017930:	697b      	ldr	r3, [r7, #20]
 8017932:	9301      	str	r3, [sp, #4]
 8017934:	6a3b      	ldr	r3, [r7, #32]
 8017936:	9300      	str	r3, [sp, #0]
 8017938:	683b      	ldr	r3, [r7, #0]
 801793a:	687a      	ldr	r2, [r7, #4]
 801793c:	68b9      	ldr	r1, [r7, #8]
 801793e:	68f8      	ldr	r0, [r7, #12]
 8017940:	f000 f843 	bl	80179ca <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8017944:	697b      	ldr	r3, [r7, #20]
	}
 8017946:	4618      	mov	r0, r3
 8017948:	3718      	adds	r7, #24
 801794a:	46bd      	mov	sp, r7
 801794c:	bd80      	pop	{r7, pc}

0801794e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 801794e:	b580      	push	{r7, lr}
 8017950:	b08a      	sub	sp, #40	; 0x28
 8017952:	af02      	add	r7, sp, #8
 8017954:	60f8      	str	r0, [r7, #12]
 8017956:	60b9      	str	r1, [r7, #8]
 8017958:	607a      	str	r2, [r7, #4]
 801795a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 801795c:	232c      	movs	r3, #44	; 0x2c
 801795e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8017960:	693b      	ldr	r3, [r7, #16]
 8017962:	2b2c      	cmp	r3, #44	; 0x2c
 8017964:	d00a      	beq.n	801797c <xTimerCreateStatic+0x2e>
	__asm volatile
 8017966:	f04f 0350 	mov.w	r3, #80	; 0x50
 801796a:	f383 8811 	msr	BASEPRI, r3
 801796e:	f3bf 8f6f 	isb	sy
 8017972:	f3bf 8f4f 	dsb	sy
 8017976:	61bb      	str	r3, [r7, #24]
}
 8017978:	bf00      	nop
 801797a:	e7fe      	b.n	801797a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801797c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 801797e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017980:	2b00      	cmp	r3, #0
 8017982:	d10a      	bne.n	801799a <xTimerCreateStatic+0x4c>
	__asm volatile
 8017984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017988:	f383 8811 	msr	BASEPRI, r3
 801798c:	f3bf 8f6f 	isb	sy
 8017990:	f3bf 8f4f 	dsb	sy
 8017994:	617b      	str	r3, [r7, #20]
}
 8017996:	bf00      	nop
 8017998:	e7fe      	b.n	8017998 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 801799a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801799c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 801799e:	69fb      	ldr	r3, [r7, #28]
 80179a0:	2b00      	cmp	r3, #0
 80179a2:	d00d      	beq.n	80179c0 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80179a4:	69fb      	ldr	r3, [r7, #28]
 80179a6:	2202      	movs	r2, #2
 80179a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80179ac:	69fb      	ldr	r3, [r7, #28]
 80179ae:	9301      	str	r3, [sp, #4]
 80179b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179b2:	9300      	str	r3, [sp, #0]
 80179b4:	683b      	ldr	r3, [r7, #0]
 80179b6:	687a      	ldr	r2, [r7, #4]
 80179b8:	68b9      	ldr	r1, [r7, #8]
 80179ba:	68f8      	ldr	r0, [r7, #12]
 80179bc:	f000 f805 	bl	80179ca <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80179c0:	69fb      	ldr	r3, [r7, #28]
	}
 80179c2:	4618      	mov	r0, r3
 80179c4:	3720      	adds	r7, #32
 80179c6:	46bd      	mov	sp, r7
 80179c8:	bd80      	pop	{r7, pc}

080179ca <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80179ca:	b580      	push	{r7, lr}
 80179cc:	b086      	sub	sp, #24
 80179ce:	af00      	add	r7, sp, #0
 80179d0:	60f8      	str	r0, [r7, #12]
 80179d2:	60b9      	str	r1, [r7, #8]
 80179d4:	607a      	str	r2, [r7, #4]
 80179d6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80179d8:	68bb      	ldr	r3, [r7, #8]
 80179da:	2b00      	cmp	r3, #0
 80179dc:	d10a      	bne.n	80179f4 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80179de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80179e2:	f383 8811 	msr	BASEPRI, r3
 80179e6:	f3bf 8f6f 	isb	sy
 80179ea:	f3bf 8f4f 	dsb	sy
 80179ee:	617b      	str	r3, [r7, #20]
}
 80179f0:	bf00      	nop
 80179f2:	e7fe      	b.n	80179f2 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80179f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179f6:	2b00      	cmp	r3, #0
 80179f8:	d01e      	beq.n	8017a38 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80179fa:	f000 fae7 	bl	8017fcc <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80179fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a00:	68fa      	ldr	r2, [r7, #12]
 8017a02:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8017a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a06:	68ba      	ldr	r2, [r7, #8]
 8017a08:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8017a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a0c:	683a      	ldr	r2, [r7, #0]
 8017a0e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8017a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a12:	6a3a      	ldr	r2, [r7, #32]
 8017a14:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8017a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a18:	3304      	adds	r3, #4
 8017a1a:	4618      	mov	r0, r3
 8017a1c:	f7fd fe58 	bl	80156d0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8017a20:	687b      	ldr	r3, [r7, #4]
 8017a22:	2b00      	cmp	r3, #0
 8017a24:	d008      	beq.n	8017a38 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8017a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017a2c:	f043 0304 	orr.w	r3, r3, #4
 8017a30:	b2da      	uxtb	r2, r3
 8017a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a34:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8017a38:	bf00      	nop
 8017a3a:	3718      	adds	r7, #24
 8017a3c:	46bd      	mov	sp, r7
 8017a3e:	bd80      	pop	{r7, pc}

08017a40 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8017a40:	b580      	push	{r7, lr}
 8017a42:	b08a      	sub	sp, #40	; 0x28
 8017a44:	af00      	add	r7, sp, #0
 8017a46:	60f8      	str	r0, [r7, #12]
 8017a48:	60b9      	str	r1, [r7, #8]
 8017a4a:	607a      	str	r2, [r7, #4]
 8017a4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8017a4e:	2300      	movs	r3, #0
 8017a50:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8017a52:	68fb      	ldr	r3, [r7, #12]
 8017a54:	2b00      	cmp	r3, #0
 8017a56:	d10a      	bne.n	8017a6e <xTimerGenericCommand+0x2e>
	__asm volatile
 8017a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a5c:	f383 8811 	msr	BASEPRI, r3
 8017a60:	f3bf 8f6f 	isb	sy
 8017a64:	f3bf 8f4f 	dsb	sy
 8017a68:	623b      	str	r3, [r7, #32]
}
 8017a6a:	bf00      	nop
 8017a6c:	e7fe      	b.n	8017a6c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8017a6e:	4b1a      	ldr	r3, [pc, #104]	; (8017ad8 <xTimerGenericCommand+0x98>)
 8017a70:	681b      	ldr	r3, [r3, #0]
 8017a72:	2b00      	cmp	r3, #0
 8017a74:	d02a      	beq.n	8017acc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8017a76:	68bb      	ldr	r3, [r7, #8]
 8017a78:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8017a7e:	68fb      	ldr	r3, [r7, #12]
 8017a80:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8017a82:	68bb      	ldr	r3, [r7, #8]
 8017a84:	2b05      	cmp	r3, #5
 8017a86:	dc18      	bgt.n	8017aba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8017a88:	f7ff fd02 	bl	8017490 <xTaskGetSchedulerState>
 8017a8c:	4603      	mov	r3, r0
 8017a8e:	2b02      	cmp	r3, #2
 8017a90:	d109      	bne.n	8017aa6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8017a92:	4b11      	ldr	r3, [pc, #68]	; (8017ad8 <xTimerGenericCommand+0x98>)
 8017a94:	6818      	ldr	r0, [r3, #0]
 8017a96:	f107 0110 	add.w	r1, r7, #16
 8017a9a:	2300      	movs	r3, #0
 8017a9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017a9e:	f7fe f89f 	bl	8015be0 <xQueueGenericSend>
 8017aa2:	6278      	str	r0, [r7, #36]	; 0x24
 8017aa4:	e012      	b.n	8017acc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8017aa6:	4b0c      	ldr	r3, [pc, #48]	; (8017ad8 <xTimerGenericCommand+0x98>)
 8017aa8:	6818      	ldr	r0, [r3, #0]
 8017aaa:	f107 0110 	add.w	r1, r7, #16
 8017aae:	2300      	movs	r3, #0
 8017ab0:	2200      	movs	r2, #0
 8017ab2:	f7fe f895 	bl	8015be0 <xQueueGenericSend>
 8017ab6:	6278      	str	r0, [r7, #36]	; 0x24
 8017ab8:	e008      	b.n	8017acc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8017aba:	4b07      	ldr	r3, [pc, #28]	; (8017ad8 <xTimerGenericCommand+0x98>)
 8017abc:	6818      	ldr	r0, [r3, #0]
 8017abe:	f107 0110 	add.w	r1, r7, #16
 8017ac2:	2300      	movs	r3, #0
 8017ac4:	683a      	ldr	r2, [r7, #0]
 8017ac6:	f7fe f989 	bl	8015ddc <xQueueGenericSendFromISR>
 8017aca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8017acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8017ace:	4618      	mov	r0, r3
 8017ad0:	3728      	adds	r7, #40	; 0x28
 8017ad2:	46bd      	mov	sp, r7
 8017ad4:	bd80      	pop	{r7, pc}
 8017ad6:	bf00      	nop
 8017ad8:	200060d4 	.word	0x200060d4

08017adc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8017adc:	b580      	push	{r7, lr}
 8017ade:	b088      	sub	sp, #32
 8017ae0:	af02      	add	r7, sp, #8
 8017ae2:	6078      	str	r0, [r7, #4]
 8017ae4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017ae6:	4b22      	ldr	r3, [pc, #136]	; (8017b70 <prvProcessExpiredTimer+0x94>)
 8017ae8:	681b      	ldr	r3, [r3, #0]
 8017aea:	68db      	ldr	r3, [r3, #12]
 8017aec:	68db      	ldr	r3, [r3, #12]
 8017aee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017af0:	697b      	ldr	r3, [r7, #20]
 8017af2:	3304      	adds	r3, #4
 8017af4:	4618      	mov	r0, r3
 8017af6:	f7fd fe55 	bl	80157a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017afa:	697b      	ldr	r3, [r7, #20]
 8017afc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017b00:	f003 0304 	and.w	r3, r3, #4
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	d022      	beq.n	8017b4e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8017b08:	697b      	ldr	r3, [r7, #20]
 8017b0a:	699a      	ldr	r2, [r3, #24]
 8017b0c:	687b      	ldr	r3, [r7, #4]
 8017b0e:	18d1      	adds	r1, r2, r3
 8017b10:	687b      	ldr	r3, [r7, #4]
 8017b12:	683a      	ldr	r2, [r7, #0]
 8017b14:	6978      	ldr	r0, [r7, #20]
 8017b16:	f000 f8d1 	bl	8017cbc <prvInsertTimerInActiveList>
 8017b1a:	4603      	mov	r3, r0
 8017b1c:	2b00      	cmp	r3, #0
 8017b1e:	d01f      	beq.n	8017b60 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017b20:	2300      	movs	r3, #0
 8017b22:	9300      	str	r3, [sp, #0]
 8017b24:	2300      	movs	r3, #0
 8017b26:	687a      	ldr	r2, [r7, #4]
 8017b28:	2100      	movs	r1, #0
 8017b2a:	6978      	ldr	r0, [r7, #20]
 8017b2c:	f7ff ff88 	bl	8017a40 <xTimerGenericCommand>
 8017b30:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8017b32:	693b      	ldr	r3, [r7, #16]
 8017b34:	2b00      	cmp	r3, #0
 8017b36:	d113      	bne.n	8017b60 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8017b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b3c:	f383 8811 	msr	BASEPRI, r3
 8017b40:	f3bf 8f6f 	isb	sy
 8017b44:	f3bf 8f4f 	dsb	sy
 8017b48:	60fb      	str	r3, [r7, #12]
}
 8017b4a:	bf00      	nop
 8017b4c:	e7fe      	b.n	8017b4c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017b4e:	697b      	ldr	r3, [r7, #20]
 8017b50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017b54:	f023 0301 	bic.w	r3, r3, #1
 8017b58:	b2da      	uxtb	r2, r3
 8017b5a:	697b      	ldr	r3, [r7, #20]
 8017b5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017b60:	697b      	ldr	r3, [r7, #20]
 8017b62:	6a1b      	ldr	r3, [r3, #32]
 8017b64:	6978      	ldr	r0, [r7, #20]
 8017b66:	4798      	blx	r3
}
 8017b68:	bf00      	nop
 8017b6a:	3718      	adds	r7, #24
 8017b6c:	46bd      	mov	sp, r7
 8017b6e:	bd80      	pop	{r7, pc}
 8017b70:	200060cc 	.word	0x200060cc

08017b74 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8017b74:	b580      	push	{r7, lr}
 8017b76:	b084      	sub	sp, #16
 8017b78:	af00      	add	r7, sp, #0
 8017b7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8017b7c:	f107 0308 	add.w	r3, r7, #8
 8017b80:	4618      	mov	r0, r3
 8017b82:	f000 f857 	bl	8017c34 <prvGetNextExpireTime>
 8017b86:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8017b88:	68bb      	ldr	r3, [r7, #8]
 8017b8a:	4619      	mov	r1, r3
 8017b8c:	68f8      	ldr	r0, [r7, #12]
 8017b8e:	f000 f803 	bl	8017b98 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8017b92:	f000 f8d5 	bl	8017d40 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8017b96:	e7f1      	b.n	8017b7c <prvTimerTask+0x8>

08017b98 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8017b98:	b580      	push	{r7, lr}
 8017b9a:	b084      	sub	sp, #16
 8017b9c:	af00      	add	r7, sp, #0
 8017b9e:	6078      	str	r0, [r7, #4]
 8017ba0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8017ba2:	f7fe ffe5 	bl	8016b70 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8017ba6:	f107 0308 	add.w	r3, r7, #8
 8017baa:	4618      	mov	r0, r3
 8017bac:	f000 f866 	bl	8017c7c <prvSampleTimeNow>
 8017bb0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8017bb2:	68bb      	ldr	r3, [r7, #8]
 8017bb4:	2b00      	cmp	r3, #0
 8017bb6:	d130      	bne.n	8017c1a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8017bb8:	683b      	ldr	r3, [r7, #0]
 8017bba:	2b00      	cmp	r3, #0
 8017bbc:	d10a      	bne.n	8017bd4 <prvProcessTimerOrBlockTask+0x3c>
 8017bbe:	687a      	ldr	r2, [r7, #4]
 8017bc0:	68fb      	ldr	r3, [r7, #12]
 8017bc2:	429a      	cmp	r2, r3
 8017bc4:	d806      	bhi.n	8017bd4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8017bc6:	f7fe ffe1 	bl	8016b8c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8017bca:	68f9      	ldr	r1, [r7, #12]
 8017bcc:	6878      	ldr	r0, [r7, #4]
 8017bce:	f7ff ff85 	bl	8017adc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8017bd2:	e024      	b.n	8017c1e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8017bd4:	683b      	ldr	r3, [r7, #0]
 8017bd6:	2b00      	cmp	r3, #0
 8017bd8:	d008      	beq.n	8017bec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8017bda:	4b13      	ldr	r3, [pc, #76]	; (8017c28 <prvProcessTimerOrBlockTask+0x90>)
 8017bdc:	681b      	ldr	r3, [r3, #0]
 8017bde:	681b      	ldr	r3, [r3, #0]
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	d101      	bne.n	8017be8 <prvProcessTimerOrBlockTask+0x50>
 8017be4:	2301      	movs	r3, #1
 8017be6:	e000      	b.n	8017bea <prvProcessTimerOrBlockTask+0x52>
 8017be8:	2300      	movs	r3, #0
 8017bea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8017bec:	4b0f      	ldr	r3, [pc, #60]	; (8017c2c <prvProcessTimerOrBlockTask+0x94>)
 8017bee:	6818      	ldr	r0, [r3, #0]
 8017bf0:	687a      	ldr	r2, [r7, #4]
 8017bf2:	68fb      	ldr	r3, [r7, #12]
 8017bf4:	1ad3      	subs	r3, r2, r3
 8017bf6:	683a      	ldr	r2, [r7, #0]
 8017bf8:	4619      	mov	r1, r3
 8017bfa:	f7fe fd49 	bl	8016690 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8017bfe:	f7fe ffc5 	bl	8016b8c <xTaskResumeAll>
 8017c02:	4603      	mov	r3, r0
 8017c04:	2b00      	cmp	r3, #0
 8017c06:	d10a      	bne.n	8017c1e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8017c08:	4b09      	ldr	r3, [pc, #36]	; (8017c30 <prvProcessTimerOrBlockTask+0x98>)
 8017c0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017c0e:	601a      	str	r2, [r3, #0]
 8017c10:	f3bf 8f4f 	dsb	sy
 8017c14:	f3bf 8f6f 	isb	sy
}
 8017c18:	e001      	b.n	8017c1e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8017c1a:	f7fe ffb7 	bl	8016b8c <xTaskResumeAll>
}
 8017c1e:	bf00      	nop
 8017c20:	3710      	adds	r7, #16
 8017c22:	46bd      	mov	sp, r7
 8017c24:	bd80      	pop	{r7, pc}
 8017c26:	bf00      	nop
 8017c28:	200060d0 	.word	0x200060d0
 8017c2c:	200060d4 	.word	0x200060d4
 8017c30:	e000ed04 	.word	0xe000ed04

08017c34 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8017c34:	b480      	push	{r7}
 8017c36:	b085      	sub	sp, #20
 8017c38:	af00      	add	r7, sp, #0
 8017c3a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8017c3c:	4b0e      	ldr	r3, [pc, #56]	; (8017c78 <prvGetNextExpireTime+0x44>)
 8017c3e:	681b      	ldr	r3, [r3, #0]
 8017c40:	681b      	ldr	r3, [r3, #0]
 8017c42:	2b00      	cmp	r3, #0
 8017c44:	d101      	bne.n	8017c4a <prvGetNextExpireTime+0x16>
 8017c46:	2201      	movs	r2, #1
 8017c48:	e000      	b.n	8017c4c <prvGetNextExpireTime+0x18>
 8017c4a:	2200      	movs	r2, #0
 8017c4c:	687b      	ldr	r3, [r7, #4]
 8017c4e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	681b      	ldr	r3, [r3, #0]
 8017c54:	2b00      	cmp	r3, #0
 8017c56:	d105      	bne.n	8017c64 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017c58:	4b07      	ldr	r3, [pc, #28]	; (8017c78 <prvGetNextExpireTime+0x44>)
 8017c5a:	681b      	ldr	r3, [r3, #0]
 8017c5c:	68db      	ldr	r3, [r3, #12]
 8017c5e:	681b      	ldr	r3, [r3, #0]
 8017c60:	60fb      	str	r3, [r7, #12]
 8017c62:	e001      	b.n	8017c68 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8017c64:	2300      	movs	r3, #0
 8017c66:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8017c68:	68fb      	ldr	r3, [r7, #12]
}
 8017c6a:	4618      	mov	r0, r3
 8017c6c:	3714      	adds	r7, #20
 8017c6e:	46bd      	mov	sp, r7
 8017c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c74:	4770      	bx	lr
 8017c76:	bf00      	nop
 8017c78:	200060cc 	.word	0x200060cc

08017c7c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8017c7c:	b580      	push	{r7, lr}
 8017c7e:	b084      	sub	sp, #16
 8017c80:	af00      	add	r7, sp, #0
 8017c82:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8017c84:	f7ff f820 	bl	8016cc8 <xTaskGetTickCount>
 8017c88:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8017c8a:	4b0b      	ldr	r3, [pc, #44]	; (8017cb8 <prvSampleTimeNow+0x3c>)
 8017c8c:	681b      	ldr	r3, [r3, #0]
 8017c8e:	68fa      	ldr	r2, [r7, #12]
 8017c90:	429a      	cmp	r2, r3
 8017c92:	d205      	bcs.n	8017ca0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8017c94:	f000 f936 	bl	8017f04 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	2201      	movs	r2, #1
 8017c9c:	601a      	str	r2, [r3, #0]
 8017c9e:	e002      	b.n	8017ca6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	2200      	movs	r2, #0
 8017ca4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8017ca6:	4a04      	ldr	r2, [pc, #16]	; (8017cb8 <prvSampleTimeNow+0x3c>)
 8017ca8:	68fb      	ldr	r3, [r7, #12]
 8017caa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8017cac:	68fb      	ldr	r3, [r7, #12]
}
 8017cae:	4618      	mov	r0, r3
 8017cb0:	3710      	adds	r7, #16
 8017cb2:	46bd      	mov	sp, r7
 8017cb4:	bd80      	pop	{r7, pc}
 8017cb6:	bf00      	nop
 8017cb8:	200060dc 	.word	0x200060dc

08017cbc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8017cbc:	b580      	push	{r7, lr}
 8017cbe:	b086      	sub	sp, #24
 8017cc0:	af00      	add	r7, sp, #0
 8017cc2:	60f8      	str	r0, [r7, #12]
 8017cc4:	60b9      	str	r1, [r7, #8]
 8017cc6:	607a      	str	r2, [r7, #4]
 8017cc8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8017cca:	2300      	movs	r3, #0
 8017ccc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8017cce:	68fb      	ldr	r3, [r7, #12]
 8017cd0:	68ba      	ldr	r2, [r7, #8]
 8017cd2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017cd4:	68fb      	ldr	r3, [r7, #12]
 8017cd6:	68fa      	ldr	r2, [r7, #12]
 8017cd8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8017cda:	68ba      	ldr	r2, [r7, #8]
 8017cdc:	687b      	ldr	r3, [r7, #4]
 8017cde:	429a      	cmp	r2, r3
 8017ce0:	d812      	bhi.n	8017d08 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017ce2:	687a      	ldr	r2, [r7, #4]
 8017ce4:	683b      	ldr	r3, [r7, #0]
 8017ce6:	1ad2      	subs	r2, r2, r3
 8017ce8:	68fb      	ldr	r3, [r7, #12]
 8017cea:	699b      	ldr	r3, [r3, #24]
 8017cec:	429a      	cmp	r2, r3
 8017cee:	d302      	bcc.n	8017cf6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8017cf0:	2301      	movs	r3, #1
 8017cf2:	617b      	str	r3, [r7, #20]
 8017cf4:	e01b      	b.n	8017d2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8017cf6:	4b10      	ldr	r3, [pc, #64]	; (8017d38 <prvInsertTimerInActiveList+0x7c>)
 8017cf8:	681a      	ldr	r2, [r3, #0]
 8017cfa:	68fb      	ldr	r3, [r7, #12]
 8017cfc:	3304      	adds	r3, #4
 8017cfe:	4619      	mov	r1, r3
 8017d00:	4610      	mov	r0, r2
 8017d02:	f7fd fd16 	bl	8015732 <vListInsert>
 8017d06:	e012      	b.n	8017d2e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8017d08:	687a      	ldr	r2, [r7, #4]
 8017d0a:	683b      	ldr	r3, [r7, #0]
 8017d0c:	429a      	cmp	r2, r3
 8017d0e:	d206      	bcs.n	8017d1e <prvInsertTimerInActiveList+0x62>
 8017d10:	68ba      	ldr	r2, [r7, #8]
 8017d12:	683b      	ldr	r3, [r7, #0]
 8017d14:	429a      	cmp	r2, r3
 8017d16:	d302      	bcc.n	8017d1e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8017d18:	2301      	movs	r3, #1
 8017d1a:	617b      	str	r3, [r7, #20]
 8017d1c:	e007      	b.n	8017d2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8017d1e:	4b07      	ldr	r3, [pc, #28]	; (8017d3c <prvInsertTimerInActiveList+0x80>)
 8017d20:	681a      	ldr	r2, [r3, #0]
 8017d22:	68fb      	ldr	r3, [r7, #12]
 8017d24:	3304      	adds	r3, #4
 8017d26:	4619      	mov	r1, r3
 8017d28:	4610      	mov	r0, r2
 8017d2a:	f7fd fd02 	bl	8015732 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8017d2e:	697b      	ldr	r3, [r7, #20]
}
 8017d30:	4618      	mov	r0, r3
 8017d32:	3718      	adds	r7, #24
 8017d34:	46bd      	mov	sp, r7
 8017d36:	bd80      	pop	{r7, pc}
 8017d38:	200060d0 	.word	0x200060d0
 8017d3c:	200060cc 	.word	0x200060cc

08017d40 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8017d40:	b580      	push	{r7, lr}
 8017d42:	b08e      	sub	sp, #56	; 0x38
 8017d44:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8017d46:	e0ca      	b.n	8017ede <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8017d48:	687b      	ldr	r3, [r7, #4]
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	da18      	bge.n	8017d80 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8017d4e:	1d3b      	adds	r3, r7, #4
 8017d50:	3304      	adds	r3, #4
 8017d52:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8017d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d56:	2b00      	cmp	r3, #0
 8017d58:	d10a      	bne.n	8017d70 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8017d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d5e:	f383 8811 	msr	BASEPRI, r3
 8017d62:	f3bf 8f6f 	isb	sy
 8017d66:	f3bf 8f4f 	dsb	sy
 8017d6a:	61fb      	str	r3, [r7, #28]
}
 8017d6c:	bf00      	nop
 8017d6e:	e7fe      	b.n	8017d6e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8017d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d72:	681b      	ldr	r3, [r3, #0]
 8017d74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017d76:	6850      	ldr	r0, [r2, #4]
 8017d78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017d7a:	6892      	ldr	r2, [r2, #8]
 8017d7c:	4611      	mov	r1, r2
 8017d7e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8017d80:	687b      	ldr	r3, [r7, #4]
 8017d82:	2b00      	cmp	r3, #0
 8017d84:	f2c0 80aa 	blt.w	8017edc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8017d88:	68fb      	ldr	r3, [r7, #12]
 8017d8a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8017d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d8e:	695b      	ldr	r3, [r3, #20]
 8017d90:	2b00      	cmp	r3, #0
 8017d92:	d004      	beq.n	8017d9e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d96:	3304      	adds	r3, #4
 8017d98:	4618      	mov	r0, r3
 8017d9a:	f7fd fd03 	bl	80157a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8017d9e:	463b      	mov	r3, r7
 8017da0:	4618      	mov	r0, r3
 8017da2:	f7ff ff6b 	bl	8017c7c <prvSampleTimeNow>
 8017da6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8017da8:	687b      	ldr	r3, [r7, #4]
 8017daa:	2b09      	cmp	r3, #9
 8017dac:	f200 8097 	bhi.w	8017ede <prvProcessReceivedCommands+0x19e>
 8017db0:	a201      	add	r2, pc, #4	; (adr r2, 8017db8 <prvProcessReceivedCommands+0x78>)
 8017db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017db6:	bf00      	nop
 8017db8:	08017de1 	.word	0x08017de1
 8017dbc:	08017de1 	.word	0x08017de1
 8017dc0:	08017de1 	.word	0x08017de1
 8017dc4:	08017e55 	.word	0x08017e55
 8017dc8:	08017e69 	.word	0x08017e69
 8017dcc:	08017eb3 	.word	0x08017eb3
 8017dd0:	08017de1 	.word	0x08017de1
 8017dd4:	08017de1 	.word	0x08017de1
 8017dd8:	08017e55 	.word	0x08017e55
 8017ddc:	08017e69 	.word	0x08017e69
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017de2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017de6:	f043 0301 	orr.w	r3, r3, #1
 8017dea:	b2da      	uxtb	r2, r3
 8017dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017dee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8017df2:	68ba      	ldr	r2, [r7, #8]
 8017df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017df6:	699b      	ldr	r3, [r3, #24]
 8017df8:	18d1      	adds	r1, r2, r3
 8017dfa:	68bb      	ldr	r3, [r7, #8]
 8017dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017dfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017e00:	f7ff ff5c 	bl	8017cbc <prvInsertTimerInActiveList>
 8017e04:	4603      	mov	r3, r0
 8017e06:	2b00      	cmp	r3, #0
 8017e08:	d069      	beq.n	8017ede <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e0c:	6a1b      	ldr	r3, [r3, #32]
 8017e0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017e10:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017e18:	f003 0304 	and.w	r3, r3, #4
 8017e1c:	2b00      	cmp	r3, #0
 8017e1e:	d05e      	beq.n	8017ede <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8017e20:	68ba      	ldr	r2, [r7, #8]
 8017e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e24:	699b      	ldr	r3, [r3, #24]
 8017e26:	441a      	add	r2, r3
 8017e28:	2300      	movs	r3, #0
 8017e2a:	9300      	str	r3, [sp, #0]
 8017e2c:	2300      	movs	r3, #0
 8017e2e:	2100      	movs	r1, #0
 8017e30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017e32:	f7ff fe05 	bl	8017a40 <xTimerGenericCommand>
 8017e36:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8017e38:	6a3b      	ldr	r3, [r7, #32]
 8017e3a:	2b00      	cmp	r3, #0
 8017e3c:	d14f      	bne.n	8017ede <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8017e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e42:	f383 8811 	msr	BASEPRI, r3
 8017e46:	f3bf 8f6f 	isb	sy
 8017e4a:	f3bf 8f4f 	dsb	sy
 8017e4e:	61bb      	str	r3, [r7, #24]
}
 8017e50:	bf00      	nop
 8017e52:	e7fe      	b.n	8017e52 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017e5a:	f023 0301 	bic.w	r3, r3, #1
 8017e5e:	b2da      	uxtb	r2, r3
 8017e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8017e66:	e03a      	b.n	8017ede <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017e6e:	f043 0301 	orr.w	r3, r3, #1
 8017e72:	b2da      	uxtb	r2, r3
 8017e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8017e7a:	68ba      	ldr	r2, [r7, #8]
 8017e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e7e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8017e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e82:	699b      	ldr	r3, [r3, #24]
 8017e84:	2b00      	cmp	r3, #0
 8017e86:	d10a      	bne.n	8017e9e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8017e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e8c:	f383 8811 	msr	BASEPRI, r3
 8017e90:	f3bf 8f6f 	isb	sy
 8017e94:	f3bf 8f4f 	dsb	sy
 8017e98:	617b      	str	r3, [r7, #20]
}
 8017e9a:	bf00      	nop
 8017e9c:	e7fe      	b.n	8017e9c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8017e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ea0:	699a      	ldr	r2, [r3, #24]
 8017ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ea4:	18d1      	adds	r1, r2, r3
 8017ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017eaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017eac:	f7ff ff06 	bl	8017cbc <prvInsertTimerInActiveList>
					break;
 8017eb0:	e015      	b.n	8017ede <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8017eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017eb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017eb8:	f003 0302 	and.w	r3, r3, #2
 8017ebc:	2b00      	cmp	r3, #0
 8017ebe:	d103      	bne.n	8017ec8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8017ec0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017ec2:	f000 fc1d 	bl	8018700 <vPortFree>
 8017ec6:	e00a      	b.n	8017ede <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017eca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017ece:	f023 0301 	bic.w	r3, r3, #1
 8017ed2:	b2da      	uxtb	r2, r3
 8017ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ed6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8017eda:	e000      	b.n	8017ede <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8017edc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8017ede:	4b08      	ldr	r3, [pc, #32]	; (8017f00 <prvProcessReceivedCommands+0x1c0>)
 8017ee0:	681b      	ldr	r3, [r3, #0]
 8017ee2:	1d39      	adds	r1, r7, #4
 8017ee4:	2200      	movs	r2, #0
 8017ee6:	4618      	mov	r0, r3
 8017ee8:	f7fe f814 	bl	8015f14 <xQueueReceive>
 8017eec:	4603      	mov	r3, r0
 8017eee:	2b00      	cmp	r3, #0
 8017ef0:	f47f af2a 	bne.w	8017d48 <prvProcessReceivedCommands+0x8>
	}
}
 8017ef4:	bf00      	nop
 8017ef6:	bf00      	nop
 8017ef8:	3730      	adds	r7, #48	; 0x30
 8017efa:	46bd      	mov	sp, r7
 8017efc:	bd80      	pop	{r7, pc}
 8017efe:	bf00      	nop
 8017f00:	200060d4 	.word	0x200060d4

08017f04 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8017f04:	b580      	push	{r7, lr}
 8017f06:	b088      	sub	sp, #32
 8017f08:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8017f0a:	e048      	b.n	8017f9e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017f0c:	4b2d      	ldr	r3, [pc, #180]	; (8017fc4 <prvSwitchTimerLists+0xc0>)
 8017f0e:	681b      	ldr	r3, [r3, #0]
 8017f10:	68db      	ldr	r3, [r3, #12]
 8017f12:	681b      	ldr	r3, [r3, #0]
 8017f14:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017f16:	4b2b      	ldr	r3, [pc, #172]	; (8017fc4 <prvSwitchTimerLists+0xc0>)
 8017f18:	681b      	ldr	r3, [r3, #0]
 8017f1a:	68db      	ldr	r3, [r3, #12]
 8017f1c:	68db      	ldr	r3, [r3, #12]
 8017f1e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017f20:	68fb      	ldr	r3, [r7, #12]
 8017f22:	3304      	adds	r3, #4
 8017f24:	4618      	mov	r0, r3
 8017f26:	f7fd fc3d 	bl	80157a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017f2a:	68fb      	ldr	r3, [r7, #12]
 8017f2c:	6a1b      	ldr	r3, [r3, #32]
 8017f2e:	68f8      	ldr	r0, [r7, #12]
 8017f30:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017f32:	68fb      	ldr	r3, [r7, #12]
 8017f34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017f38:	f003 0304 	and.w	r3, r3, #4
 8017f3c:	2b00      	cmp	r3, #0
 8017f3e:	d02e      	beq.n	8017f9e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8017f40:	68fb      	ldr	r3, [r7, #12]
 8017f42:	699b      	ldr	r3, [r3, #24]
 8017f44:	693a      	ldr	r2, [r7, #16]
 8017f46:	4413      	add	r3, r2
 8017f48:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8017f4a:	68ba      	ldr	r2, [r7, #8]
 8017f4c:	693b      	ldr	r3, [r7, #16]
 8017f4e:	429a      	cmp	r2, r3
 8017f50:	d90e      	bls.n	8017f70 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8017f52:	68fb      	ldr	r3, [r7, #12]
 8017f54:	68ba      	ldr	r2, [r7, #8]
 8017f56:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017f58:	68fb      	ldr	r3, [r7, #12]
 8017f5a:	68fa      	ldr	r2, [r7, #12]
 8017f5c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8017f5e:	4b19      	ldr	r3, [pc, #100]	; (8017fc4 <prvSwitchTimerLists+0xc0>)
 8017f60:	681a      	ldr	r2, [r3, #0]
 8017f62:	68fb      	ldr	r3, [r7, #12]
 8017f64:	3304      	adds	r3, #4
 8017f66:	4619      	mov	r1, r3
 8017f68:	4610      	mov	r0, r2
 8017f6a:	f7fd fbe2 	bl	8015732 <vListInsert>
 8017f6e:	e016      	b.n	8017f9e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017f70:	2300      	movs	r3, #0
 8017f72:	9300      	str	r3, [sp, #0]
 8017f74:	2300      	movs	r3, #0
 8017f76:	693a      	ldr	r2, [r7, #16]
 8017f78:	2100      	movs	r1, #0
 8017f7a:	68f8      	ldr	r0, [r7, #12]
 8017f7c:	f7ff fd60 	bl	8017a40 <xTimerGenericCommand>
 8017f80:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8017f82:	687b      	ldr	r3, [r7, #4]
 8017f84:	2b00      	cmp	r3, #0
 8017f86:	d10a      	bne.n	8017f9e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8017f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f8c:	f383 8811 	msr	BASEPRI, r3
 8017f90:	f3bf 8f6f 	isb	sy
 8017f94:	f3bf 8f4f 	dsb	sy
 8017f98:	603b      	str	r3, [r7, #0]
}
 8017f9a:	bf00      	nop
 8017f9c:	e7fe      	b.n	8017f9c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8017f9e:	4b09      	ldr	r3, [pc, #36]	; (8017fc4 <prvSwitchTimerLists+0xc0>)
 8017fa0:	681b      	ldr	r3, [r3, #0]
 8017fa2:	681b      	ldr	r3, [r3, #0]
 8017fa4:	2b00      	cmp	r3, #0
 8017fa6:	d1b1      	bne.n	8017f0c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8017fa8:	4b06      	ldr	r3, [pc, #24]	; (8017fc4 <prvSwitchTimerLists+0xc0>)
 8017faa:	681b      	ldr	r3, [r3, #0]
 8017fac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8017fae:	4b06      	ldr	r3, [pc, #24]	; (8017fc8 <prvSwitchTimerLists+0xc4>)
 8017fb0:	681b      	ldr	r3, [r3, #0]
 8017fb2:	4a04      	ldr	r2, [pc, #16]	; (8017fc4 <prvSwitchTimerLists+0xc0>)
 8017fb4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8017fb6:	4a04      	ldr	r2, [pc, #16]	; (8017fc8 <prvSwitchTimerLists+0xc4>)
 8017fb8:	697b      	ldr	r3, [r7, #20]
 8017fba:	6013      	str	r3, [r2, #0]
}
 8017fbc:	bf00      	nop
 8017fbe:	3718      	adds	r7, #24
 8017fc0:	46bd      	mov	sp, r7
 8017fc2:	bd80      	pop	{r7, pc}
 8017fc4:	200060cc 	.word	0x200060cc
 8017fc8:	200060d0 	.word	0x200060d0

08017fcc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8017fcc:	b580      	push	{r7, lr}
 8017fce:	b082      	sub	sp, #8
 8017fd0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8017fd2:	f000 f9a7 	bl	8018324 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8017fd6:	4b15      	ldr	r3, [pc, #84]	; (801802c <prvCheckForValidListAndQueue+0x60>)
 8017fd8:	681b      	ldr	r3, [r3, #0]
 8017fda:	2b00      	cmp	r3, #0
 8017fdc:	d120      	bne.n	8018020 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8017fde:	4814      	ldr	r0, [pc, #80]	; (8018030 <prvCheckForValidListAndQueue+0x64>)
 8017fe0:	f7fd fb56 	bl	8015690 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8017fe4:	4813      	ldr	r0, [pc, #76]	; (8018034 <prvCheckForValidListAndQueue+0x68>)
 8017fe6:	f7fd fb53 	bl	8015690 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8017fea:	4b13      	ldr	r3, [pc, #76]	; (8018038 <prvCheckForValidListAndQueue+0x6c>)
 8017fec:	4a10      	ldr	r2, [pc, #64]	; (8018030 <prvCheckForValidListAndQueue+0x64>)
 8017fee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8017ff0:	4b12      	ldr	r3, [pc, #72]	; (801803c <prvCheckForValidListAndQueue+0x70>)
 8017ff2:	4a10      	ldr	r2, [pc, #64]	; (8018034 <prvCheckForValidListAndQueue+0x68>)
 8017ff4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8017ff6:	2300      	movs	r3, #0
 8017ff8:	9300      	str	r3, [sp, #0]
 8017ffa:	4b11      	ldr	r3, [pc, #68]	; (8018040 <prvCheckForValidListAndQueue+0x74>)
 8017ffc:	4a11      	ldr	r2, [pc, #68]	; (8018044 <prvCheckForValidListAndQueue+0x78>)
 8017ffe:	2110      	movs	r1, #16
 8018000:	2040      	movs	r0, #64	; 0x40
 8018002:	f7fd fc61 	bl	80158c8 <xQueueGenericCreateStatic>
 8018006:	4603      	mov	r3, r0
 8018008:	4a08      	ldr	r2, [pc, #32]	; (801802c <prvCheckForValidListAndQueue+0x60>)
 801800a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801800c:	4b07      	ldr	r3, [pc, #28]	; (801802c <prvCheckForValidListAndQueue+0x60>)
 801800e:	681b      	ldr	r3, [r3, #0]
 8018010:	2b00      	cmp	r3, #0
 8018012:	d005      	beq.n	8018020 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8018014:	4b05      	ldr	r3, [pc, #20]	; (801802c <prvCheckForValidListAndQueue+0x60>)
 8018016:	681b      	ldr	r3, [r3, #0]
 8018018:	490b      	ldr	r1, [pc, #44]	; (8018048 <prvCheckForValidListAndQueue+0x7c>)
 801801a:	4618      	mov	r0, r3
 801801c:	f7fe fb0e 	bl	801663c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018020:	f000 f9b0 	bl	8018384 <vPortExitCritical>
}
 8018024:	bf00      	nop
 8018026:	46bd      	mov	sp, r7
 8018028:	bd80      	pop	{r7, pc}
 801802a:	bf00      	nop
 801802c:	200060d4 	.word	0x200060d4
 8018030:	200060a4 	.word	0x200060a4
 8018034:	200060b8 	.word	0x200060b8
 8018038:	200060cc 	.word	0x200060cc
 801803c:	200060d0 	.word	0x200060d0
 8018040:	200064e0 	.word	0x200064e0
 8018044:	200060e0 	.word	0x200060e0
 8018048:	0801f4b4 	.word	0x0801f4b4

0801804c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 801804c:	b580      	push	{r7, lr}
 801804e:	b086      	sub	sp, #24
 8018050:	af00      	add	r7, sp, #0
 8018052:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8018058:	687b      	ldr	r3, [r7, #4]
 801805a:	2b00      	cmp	r3, #0
 801805c:	d10a      	bne.n	8018074 <pvTimerGetTimerID+0x28>
	__asm volatile
 801805e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018062:	f383 8811 	msr	BASEPRI, r3
 8018066:	f3bf 8f6f 	isb	sy
 801806a:	f3bf 8f4f 	dsb	sy
 801806e:	60fb      	str	r3, [r7, #12]
}
 8018070:	bf00      	nop
 8018072:	e7fe      	b.n	8018072 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8018074:	f000 f956 	bl	8018324 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8018078:	697b      	ldr	r3, [r7, #20]
 801807a:	69db      	ldr	r3, [r3, #28]
 801807c:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 801807e:	f000 f981 	bl	8018384 <vPortExitCritical>

	return pvReturn;
 8018082:	693b      	ldr	r3, [r7, #16]
}
 8018084:	4618      	mov	r0, r3
 8018086:	3718      	adds	r7, #24
 8018088:	46bd      	mov	sp, r7
 801808a:	bd80      	pop	{r7, pc}

0801808c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801808c:	b580      	push	{r7, lr}
 801808e:	b08a      	sub	sp, #40	; 0x28
 8018090:	af00      	add	r7, sp, #0
 8018092:	60f8      	str	r0, [r7, #12]
 8018094:	60b9      	str	r1, [r7, #8]
 8018096:	607a      	str	r2, [r7, #4]
 8018098:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 801809a:	f06f 0301 	mvn.w	r3, #1
 801809e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80180a0:	68fb      	ldr	r3, [r7, #12]
 80180a2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80180a4:	68bb      	ldr	r3, [r7, #8]
 80180a6:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80180a8:	687b      	ldr	r3, [r7, #4]
 80180aa:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80180ac:	4b06      	ldr	r3, [pc, #24]	; (80180c8 <xTimerPendFunctionCallFromISR+0x3c>)
 80180ae:	6818      	ldr	r0, [r3, #0]
 80180b0:	f107 0114 	add.w	r1, r7, #20
 80180b4:	2300      	movs	r3, #0
 80180b6:	683a      	ldr	r2, [r7, #0]
 80180b8:	f7fd fe90 	bl	8015ddc <xQueueGenericSendFromISR>
 80180bc:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80180be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80180c0:	4618      	mov	r0, r3
 80180c2:	3728      	adds	r7, #40	; 0x28
 80180c4:	46bd      	mov	sp, r7
 80180c6:	bd80      	pop	{r7, pc}
 80180c8:	200060d4 	.word	0x200060d4

080180cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80180cc:	b480      	push	{r7}
 80180ce:	b085      	sub	sp, #20
 80180d0:	af00      	add	r7, sp, #0
 80180d2:	60f8      	str	r0, [r7, #12]
 80180d4:	60b9      	str	r1, [r7, #8]
 80180d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80180d8:	68fb      	ldr	r3, [r7, #12]
 80180da:	3b04      	subs	r3, #4
 80180dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80180de:	68fb      	ldr	r3, [r7, #12]
 80180e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80180e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80180e6:	68fb      	ldr	r3, [r7, #12]
 80180e8:	3b04      	subs	r3, #4
 80180ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80180ec:	68bb      	ldr	r3, [r7, #8]
 80180ee:	f023 0201 	bic.w	r2, r3, #1
 80180f2:	68fb      	ldr	r3, [r7, #12]
 80180f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80180f6:	68fb      	ldr	r3, [r7, #12]
 80180f8:	3b04      	subs	r3, #4
 80180fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80180fc:	4a0c      	ldr	r2, [pc, #48]	; (8018130 <pxPortInitialiseStack+0x64>)
 80180fe:	68fb      	ldr	r3, [r7, #12]
 8018100:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8018102:	68fb      	ldr	r3, [r7, #12]
 8018104:	3b14      	subs	r3, #20
 8018106:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8018108:	687a      	ldr	r2, [r7, #4]
 801810a:	68fb      	ldr	r3, [r7, #12]
 801810c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801810e:	68fb      	ldr	r3, [r7, #12]
 8018110:	3b04      	subs	r3, #4
 8018112:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8018114:	68fb      	ldr	r3, [r7, #12]
 8018116:	f06f 0202 	mvn.w	r2, #2
 801811a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801811c:	68fb      	ldr	r3, [r7, #12]
 801811e:	3b20      	subs	r3, #32
 8018120:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8018122:	68fb      	ldr	r3, [r7, #12]
}
 8018124:	4618      	mov	r0, r3
 8018126:	3714      	adds	r7, #20
 8018128:	46bd      	mov	sp, r7
 801812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801812e:	4770      	bx	lr
 8018130:	08018135 	.word	0x08018135

08018134 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8018134:	b480      	push	{r7}
 8018136:	b085      	sub	sp, #20
 8018138:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801813a:	2300      	movs	r3, #0
 801813c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801813e:	4b12      	ldr	r3, [pc, #72]	; (8018188 <prvTaskExitError+0x54>)
 8018140:	681b      	ldr	r3, [r3, #0]
 8018142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018146:	d00a      	beq.n	801815e <prvTaskExitError+0x2a>
	__asm volatile
 8018148:	f04f 0350 	mov.w	r3, #80	; 0x50
 801814c:	f383 8811 	msr	BASEPRI, r3
 8018150:	f3bf 8f6f 	isb	sy
 8018154:	f3bf 8f4f 	dsb	sy
 8018158:	60fb      	str	r3, [r7, #12]
}
 801815a:	bf00      	nop
 801815c:	e7fe      	b.n	801815c <prvTaskExitError+0x28>
	__asm volatile
 801815e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018162:	f383 8811 	msr	BASEPRI, r3
 8018166:	f3bf 8f6f 	isb	sy
 801816a:	f3bf 8f4f 	dsb	sy
 801816e:	60bb      	str	r3, [r7, #8]
}
 8018170:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8018172:	bf00      	nop
 8018174:	687b      	ldr	r3, [r7, #4]
 8018176:	2b00      	cmp	r3, #0
 8018178:	d0fc      	beq.n	8018174 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801817a:	bf00      	nop
 801817c:	bf00      	nop
 801817e:	3714      	adds	r7, #20
 8018180:	46bd      	mov	sp, r7
 8018182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018186:	4770      	bx	lr
 8018188:	200000a0 	.word	0x200000a0
 801818c:	00000000 	.word	0x00000000

08018190 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8018190:	4b07      	ldr	r3, [pc, #28]	; (80181b0 <pxCurrentTCBConst2>)
 8018192:	6819      	ldr	r1, [r3, #0]
 8018194:	6808      	ldr	r0, [r1, #0]
 8018196:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801819a:	f380 8809 	msr	PSP, r0
 801819e:	f3bf 8f6f 	isb	sy
 80181a2:	f04f 0000 	mov.w	r0, #0
 80181a6:	f380 8811 	msr	BASEPRI, r0
 80181aa:	4770      	bx	lr
 80181ac:	f3af 8000 	nop.w

080181b0 <pxCurrentTCBConst2>:
 80181b0:	20005ba4 	.word	0x20005ba4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80181b4:	bf00      	nop
 80181b6:	bf00      	nop

080181b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80181b8:	4808      	ldr	r0, [pc, #32]	; (80181dc <prvPortStartFirstTask+0x24>)
 80181ba:	6800      	ldr	r0, [r0, #0]
 80181bc:	6800      	ldr	r0, [r0, #0]
 80181be:	f380 8808 	msr	MSP, r0
 80181c2:	f04f 0000 	mov.w	r0, #0
 80181c6:	f380 8814 	msr	CONTROL, r0
 80181ca:	b662      	cpsie	i
 80181cc:	b661      	cpsie	f
 80181ce:	f3bf 8f4f 	dsb	sy
 80181d2:	f3bf 8f6f 	isb	sy
 80181d6:	df00      	svc	0
 80181d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80181da:	bf00      	nop
 80181dc:	e000ed08 	.word	0xe000ed08

080181e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80181e0:	b580      	push	{r7, lr}
 80181e2:	b086      	sub	sp, #24
 80181e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80181e6:	4b46      	ldr	r3, [pc, #280]	; (8018300 <xPortStartScheduler+0x120>)
 80181e8:	681b      	ldr	r3, [r3, #0]
 80181ea:	4a46      	ldr	r2, [pc, #280]	; (8018304 <xPortStartScheduler+0x124>)
 80181ec:	4293      	cmp	r3, r2
 80181ee:	d10a      	bne.n	8018206 <xPortStartScheduler+0x26>
	__asm volatile
 80181f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181f4:	f383 8811 	msr	BASEPRI, r3
 80181f8:	f3bf 8f6f 	isb	sy
 80181fc:	f3bf 8f4f 	dsb	sy
 8018200:	613b      	str	r3, [r7, #16]
}
 8018202:	bf00      	nop
 8018204:	e7fe      	b.n	8018204 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8018206:	4b3e      	ldr	r3, [pc, #248]	; (8018300 <xPortStartScheduler+0x120>)
 8018208:	681b      	ldr	r3, [r3, #0]
 801820a:	4a3f      	ldr	r2, [pc, #252]	; (8018308 <xPortStartScheduler+0x128>)
 801820c:	4293      	cmp	r3, r2
 801820e:	d10a      	bne.n	8018226 <xPortStartScheduler+0x46>
	__asm volatile
 8018210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018214:	f383 8811 	msr	BASEPRI, r3
 8018218:	f3bf 8f6f 	isb	sy
 801821c:	f3bf 8f4f 	dsb	sy
 8018220:	60fb      	str	r3, [r7, #12]
}
 8018222:	bf00      	nop
 8018224:	e7fe      	b.n	8018224 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8018226:	4b39      	ldr	r3, [pc, #228]	; (801830c <xPortStartScheduler+0x12c>)
 8018228:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801822a:	697b      	ldr	r3, [r7, #20]
 801822c:	781b      	ldrb	r3, [r3, #0]
 801822e:	b2db      	uxtb	r3, r3
 8018230:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8018232:	697b      	ldr	r3, [r7, #20]
 8018234:	22ff      	movs	r2, #255	; 0xff
 8018236:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8018238:	697b      	ldr	r3, [r7, #20]
 801823a:	781b      	ldrb	r3, [r3, #0]
 801823c:	b2db      	uxtb	r3, r3
 801823e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8018240:	78fb      	ldrb	r3, [r7, #3]
 8018242:	b2db      	uxtb	r3, r3
 8018244:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8018248:	b2da      	uxtb	r2, r3
 801824a:	4b31      	ldr	r3, [pc, #196]	; (8018310 <xPortStartScheduler+0x130>)
 801824c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801824e:	4b31      	ldr	r3, [pc, #196]	; (8018314 <xPortStartScheduler+0x134>)
 8018250:	2207      	movs	r2, #7
 8018252:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018254:	e009      	b.n	801826a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8018256:	4b2f      	ldr	r3, [pc, #188]	; (8018314 <xPortStartScheduler+0x134>)
 8018258:	681b      	ldr	r3, [r3, #0]
 801825a:	3b01      	subs	r3, #1
 801825c:	4a2d      	ldr	r2, [pc, #180]	; (8018314 <xPortStartScheduler+0x134>)
 801825e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8018260:	78fb      	ldrb	r3, [r7, #3]
 8018262:	b2db      	uxtb	r3, r3
 8018264:	005b      	lsls	r3, r3, #1
 8018266:	b2db      	uxtb	r3, r3
 8018268:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801826a:	78fb      	ldrb	r3, [r7, #3]
 801826c:	b2db      	uxtb	r3, r3
 801826e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018272:	2b80      	cmp	r3, #128	; 0x80
 8018274:	d0ef      	beq.n	8018256 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8018276:	4b27      	ldr	r3, [pc, #156]	; (8018314 <xPortStartScheduler+0x134>)
 8018278:	681b      	ldr	r3, [r3, #0]
 801827a:	f1c3 0307 	rsb	r3, r3, #7
 801827e:	2b04      	cmp	r3, #4
 8018280:	d00a      	beq.n	8018298 <xPortStartScheduler+0xb8>
	__asm volatile
 8018282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018286:	f383 8811 	msr	BASEPRI, r3
 801828a:	f3bf 8f6f 	isb	sy
 801828e:	f3bf 8f4f 	dsb	sy
 8018292:	60bb      	str	r3, [r7, #8]
}
 8018294:	bf00      	nop
 8018296:	e7fe      	b.n	8018296 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8018298:	4b1e      	ldr	r3, [pc, #120]	; (8018314 <xPortStartScheduler+0x134>)
 801829a:	681b      	ldr	r3, [r3, #0]
 801829c:	021b      	lsls	r3, r3, #8
 801829e:	4a1d      	ldr	r2, [pc, #116]	; (8018314 <xPortStartScheduler+0x134>)
 80182a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80182a2:	4b1c      	ldr	r3, [pc, #112]	; (8018314 <xPortStartScheduler+0x134>)
 80182a4:	681b      	ldr	r3, [r3, #0]
 80182a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80182aa:	4a1a      	ldr	r2, [pc, #104]	; (8018314 <xPortStartScheduler+0x134>)
 80182ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80182ae:	687b      	ldr	r3, [r7, #4]
 80182b0:	b2da      	uxtb	r2, r3
 80182b2:	697b      	ldr	r3, [r7, #20]
 80182b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80182b6:	4b18      	ldr	r3, [pc, #96]	; (8018318 <xPortStartScheduler+0x138>)
 80182b8:	681b      	ldr	r3, [r3, #0]
 80182ba:	4a17      	ldr	r2, [pc, #92]	; (8018318 <xPortStartScheduler+0x138>)
 80182bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80182c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80182c2:	4b15      	ldr	r3, [pc, #84]	; (8018318 <xPortStartScheduler+0x138>)
 80182c4:	681b      	ldr	r3, [r3, #0]
 80182c6:	4a14      	ldr	r2, [pc, #80]	; (8018318 <xPortStartScheduler+0x138>)
 80182c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80182cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80182ce:	f000 f8dd 	bl	801848c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80182d2:	4b12      	ldr	r3, [pc, #72]	; (801831c <xPortStartScheduler+0x13c>)
 80182d4:	2200      	movs	r2, #0
 80182d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80182d8:	f000 f8fc 	bl	80184d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80182dc:	4b10      	ldr	r3, [pc, #64]	; (8018320 <xPortStartScheduler+0x140>)
 80182de:	681b      	ldr	r3, [r3, #0]
 80182e0:	4a0f      	ldr	r2, [pc, #60]	; (8018320 <xPortStartScheduler+0x140>)
 80182e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80182e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80182e8:	f7ff ff66 	bl	80181b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80182ec:	f7fe fdb6 	bl	8016e5c <vTaskSwitchContext>
	prvTaskExitError();
 80182f0:	f7ff ff20 	bl	8018134 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80182f4:	2300      	movs	r3, #0
}
 80182f6:	4618      	mov	r0, r3
 80182f8:	3718      	adds	r7, #24
 80182fa:	46bd      	mov	sp, r7
 80182fc:	bd80      	pop	{r7, pc}
 80182fe:	bf00      	nop
 8018300:	e000ed00 	.word	0xe000ed00
 8018304:	410fc271 	.word	0x410fc271
 8018308:	410fc270 	.word	0x410fc270
 801830c:	e000e400 	.word	0xe000e400
 8018310:	20006530 	.word	0x20006530
 8018314:	20006534 	.word	0x20006534
 8018318:	e000ed20 	.word	0xe000ed20
 801831c:	200000a0 	.word	0x200000a0
 8018320:	e000ef34 	.word	0xe000ef34

08018324 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8018324:	b480      	push	{r7}
 8018326:	b083      	sub	sp, #12
 8018328:	af00      	add	r7, sp, #0
	__asm volatile
 801832a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801832e:	f383 8811 	msr	BASEPRI, r3
 8018332:	f3bf 8f6f 	isb	sy
 8018336:	f3bf 8f4f 	dsb	sy
 801833a:	607b      	str	r3, [r7, #4]
}
 801833c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801833e:	4b0f      	ldr	r3, [pc, #60]	; (801837c <vPortEnterCritical+0x58>)
 8018340:	681b      	ldr	r3, [r3, #0]
 8018342:	3301      	adds	r3, #1
 8018344:	4a0d      	ldr	r2, [pc, #52]	; (801837c <vPortEnterCritical+0x58>)
 8018346:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8018348:	4b0c      	ldr	r3, [pc, #48]	; (801837c <vPortEnterCritical+0x58>)
 801834a:	681b      	ldr	r3, [r3, #0]
 801834c:	2b01      	cmp	r3, #1
 801834e:	d10f      	bne.n	8018370 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8018350:	4b0b      	ldr	r3, [pc, #44]	; (8018380 <vPortEnterCritical+0x5c>)
 8018352:	681b      	ldr	r3, [r3, #0]
 8018354:	b2db      	uxtb	r3, r3
 8018356:	2b00      	cmp	r3, #0
 8018358:	d00a      	beq.n	8018370 <vPortEnterCritical+0x4c>
	__asm volatile
 801835a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801835e:	f383 8811 	msr	BASEPRI, r3
 8018362:	f3bf 8f6f 	isb	sy
 8018366:	f3bf 8f4f 	dsb	sy
 801836a:	603b      	str	r3, [r7, #0]
}
 801836c:	bf00      	nop
 801836e:	e7fe      	b.n	801836e <vPortEnterCritical+0x4a>
	}
}
 8018370:	bf00      	nop
 8018372:	370c      	adds	r7, #12
 8018374:	46bd      	mov	sp, r7
 8018376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801837a:	4770      	bx	lr
 801837c:	200000a0 	.word	0x200000a0
 8018380:	e000ed04 	.word	0xe000ed04

08018384 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8018384:	b480      	push	{r7}
 8018386:	b083      	sub	sp, #12
 8018388:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801838a:	4b12      	ldr	r3, [pc, #72]	; (80183d4 <vPortExitCritical+0x50>)
 801838c:	681b      	ldr	r3, [r3, #0]
 801838e:	2b00      	cmp	r3, #0
 8018390:	d10a      	bne.n	80183a8 <vPortExitCritical+0x24>
	__asm volatile
 8018392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018396:	f383 8811 	msr	BASEPRI, r3
 801839a:	f3bf 8f6f 	isb	sy
 801839e:	f3bf 8f4f 	dsb	sy
 80183a2:	607b      	str	r3, [r7, #4]
}
 80183a4:	bf00      	nop
 80183a6:	e7fe      	b.n	80183a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80183a8:	4b0a      	ldr	r3, [pc, #40]	; (80183d4 <vPortExitCritical+0x50>)
 80183aa:	681b      	ldr	r3, [r3, #0]
 80183ac:	3b01      	subs	r3, #1
 80183ae:	4a09      	ldr	r2, [pc, #36]	; (80183d4 <vPortExitCritical+0x50>)
 80183b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80183b2:	4b08      	ldr	r3, [pc, #32]	; (80183d4 <vPortExitCritical+0x50>)
 80183b4:	681b      	ldr	r3, [r3, #0]
 80183b6:	2b00      	cmp	r3, #0
 80183b8:	d105      	bne.n	80183c6 <vPortExitCritical+0x42>
 80183ba:	2300      	movs	r3, #0
 80183bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80183be:	683b      	ldr	r3, [r7, #0]
 80183c0:	f383 8811 	msr	BASEPRI, r3
}
 80183c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80183c6:	bf00      	nop
 80183c8:	370c      	adds	r7, #12
 80183ca:	46bd      	mov	sp, r7
 80183cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183d0:	4770      	bx	lr
 80183d2:	bf00      	nop
 80183d4:	200000a0 	.word	0x200000a0
	...

080183e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80183e0:	f3ef 8009 	mrs	r0, PSP
 80183e4:	f3bf 8f6f 	isb	sy
 80183e8:	4b15      	ldr	r3, [pc, #84]	; (8018440 <pxCurrentTCBConst>)
 80183ea:	681a      	ldr	r2, [r3, #0]
 80183ec:	f01e 0f10 	tst.w	lr, #16
 80183f0:	bf08      	it	eq
 80183f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80183f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183fa:	6010      	str	r0, [r2, #0]
 80183fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8018400:	f04f 0050 	mov.w	r0, #80	; 0x50
 8018404:	f380 8811 	msr	BASEPRI, r0
 8018408:	f3bf 8f4f 	dsb	sy
 801840c:	f3bf 8f6f 	isb	sy
 8018410:	f7fe fd24 	bl	8016e5c <vTaskSwitchContext>
 8018414:	f04f 0000 	mov.w	r0, #0
 8018418:	f380 8811 	msr	BASEPRI, r0
 801841c:	bc09      	pop	{r0, r3}
 801841e:	6819      	ldr	r1, [r3, #0]
 8018420:	6808      	ldr	r0, [r1, #0]
 8018422:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018426:	f01e 0f10 	tst.w	lr, #16
 801842a:	bf08      	it	eq
 801842c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8018430:	f380 8809 	msr	PSP, r0
 8018434:	f3bf 8f6f 	isb	sy
 8018438:	4770      	bx	lr
 801843a:	bf00      	nop
 801843c:	f3af 8000 	nop.w

08018440 <pxCurrentTCBConst>:
 8018440:	20005ba4 	.word	0x20005ba4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8018444:	bf00      	nop
 8018446:	bf00      	nop

08018448 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8018448:	b580      	push	{r7, lr}
 801844a:	b082      	sub	sp, #8
 801844c:	af00      	add	r7, sp, #0
	__asm volatile
 801844e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018452:	f383 8811 	msr	BASEPRI, r3
 8018456:	f3bf 8f6f 	isb	sy
 801845a:	f3bf 8f4f 	dsb	sy
 801845e:	607b      	str	r3, [r7, #4]
}
 8018460:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8018462:	f7fe fc41 	bl	8016ce8 <xTaskIncrementTick>
 8018466:	4603      	mov	r3, r0
 8018468:	2b00      	cmp	r3, #0
 801846a:	d003      	beq.n	8018474 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801846c:	4b06      	ldr	r3, [pc, #24]	; (8018488 <xPortSysTickHandler+0x40>)
 801846e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018472:	601a      	str	r2, [r3, #0]
 8018474:	2300      	movs	r3, #0
 8018476:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018478:	683b      	ldr	r3, [r7, #0]
 801847a:	f383 8811 	msr	BASEPRI, r3
}
 801847e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8018480:	bf00      	nop
 8018482:	3708      	adds	r7, #8
 8018484:	46bd      	mov	sp, r7
 8018486:	bd80      	pop	{r7, pc}
 8018488:	e000ed04 	.word	0xe000ed04

0801848c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801848c:	b480      	push	{r7}
 801848e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8018490:	4b0b      	ldr	r3, [pc, #44]	; (80184c0 <vPortSetupTimerInterrupt+0x34>)
 8018492:	2200      	movs	r2, #0
 8018494:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8018496:	4b0b      	ldr	r3, [pc, #44]	; (80184c4 <vPortSetupTimerInterrupt+0x38>)
 8018498:	2200      	movs	r2, #0
 801849a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801849c:	4b0a      	ldr	r3, [pc, #40]	; (80184c8 <vPortSetupTimerInterrupt+0x3c>)
 801849e:	681b      	ldr	r3, [r3, #0]
 80184a0:	4a0a      	ldr	r2, [pc, #40]	; (80184cc <vPortSetupTimerInterrupt+0x40>)
 80184a2:	fba2 2303 	umull	r2, r3, r2, r3
 80184a6:	099b      	lsrs	r3, r3, #6
 80184a8:	4a09      	ldr	r2, [pc, #36]	; (80184d0 <vPortSetupTimerInterrupt+0x44>)
 80184aa:	3b01      	subs	r3, #1
 80184ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80184ae:	4b04      	ldr	r3, [pc, #16]	; (80184c0 <vPortSetupTimerInterrupt+0x34>)
 80184b0:	2207      	movs	r2, #7
 80184b2:	601a      	str	r2, [r3, #0]
}
 80184b4:	bf00      	nop
 80184b6:	46bd      	mov	sp, r7
 80184b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184bc:	4770      	bx	lr
 80184be:	bf00      	nop
 80184c0:	e000e010 	.word	0xe000e010
 80184c4:	e000e018 	.word	0xe000e018
 80184c8:	20000094 	.word	0x20000094
 80184cc:	10624dd3 	.word	0x10624dd3
 80184d0:	e000e014 	.word	0xe000e014

080184d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80184d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80184e4 <vPortEnableVFP+0x10>
 80184d8:	6801      	ldr	r1, [r0, #0]
 80184da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80184de:	6001      	str	r1, [r0, #0]
 80184e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80184e2:	bf00      	nop
 80184e4:	e000ed88 	.word	0xe000ed88

080184e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80184e8:	b480      	push	{r7}
 80184ea:	b085      	sub	sp, #20
 80184ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80184ee:	f3ef 8305 	mrs	r3, IPSR
 80184f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80184f4:	68fb      	ldr	r3, [r7, #12]
 80184f6:	2b0f      	cmp	r3, #15
 80184f8:	d914      	bls.n	8018524 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80184fa:	4a17      	ldr	r2, [pc, #92]	; (8018558 <vPortValidateInterruptPriority+0x70>)
 80184fc:	68fb      	ldr	r3, [r7, #12]
 80184fe:	4413      	add	r3, r2
 8018500:	781b      	ldrb	r3, [r3, #0]
 8018502:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8018504:	4b15      	ldr	r3, [pc, #84]	; (801855c <vPortValidateInterruptPriority+0x74>)
 8018506:	781b      	ldrb	r3, [r3, #0]
 8018508:	7afa      	ldrb	r2, [r7, #11]
 801850a:	429a      	cmp	r2, r3
 801850c:	d20a      	bcs.n	8018524 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801850e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018512:	f383 8811 	msr	BASEPRI, r3
 8018516:	f3bf 8f6f 	isb	sy
 801851a:	f3bf 8f4f 	dsb	sy
 801851e:	607b      	str	r3, [r7, #4]
}
 8018520:	bf00      	nop
 8018522:	e7fe      	b.n	8018522 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8018524:	4b0e      	ldr	r3, [pc, #56]	; (8018560 <vPortValidateInterruptPriority+0x78>)
 8018526:	681b      	ldr	r3, [r3, #0]
 8018528:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801852c:	4b0d      	ldr	r3, [pc, #52]	; (8018564 <vPortValidateInterruptPriority+0x7c>)
 801852e:	681b      	ldr	r3, [r3, #0]
 8018530:	429a      	cmp	r2, r3
 8018532:	d90a      	bls.n	801854a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8018534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018538:	f383 8811 	msr	BASEPRI, r3
 801853c:	f3bf 8f6f 	isb	sy
 8018540:	f3bf 8f4f 	dsb	sy
 8018544:	603b      	str	r3, [r7, #0]
}
 8018546:	bf00      	nop
 8018548:	e7fe      	b.n	8018548 <vPortValidateInterruptPriority+0x60>
	}
 801854a:	bf00      	nop
 801854c:	3714      	adds	r7, #20
 801854e:	46bd      	mov	sp, r7
 8018550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018554:	4770      	bx	lr
 8018556:	bf00      	nop
 8018558:	e000e3f0 	.word	0xe000e3f0
 801855c:	20006530 	.word	0x20006530
 8018560:	e000ed0c 	.word	0xe000ed0c
 8018564:	20006534 	.word	0x20006534

08018568 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8018568:	b580      	push	{r7, lr}
 801856a:	b08a      	sub	sp, #40	; 0x28
 801856c:	af00      	add	r7, sp, #0
 801856e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8018570:	2300      	movs	r3, #0
 8018572:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8018574:	f7fe fafc 	bl	8016b70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8018578:	4b5b      	ldr	r3, [pc, #364]	; (80186e8 <pvPortMalloc+0x180>)
 801857a:	681b      	ldr	r3, [r3, #0]
 801857c:	2b00      	cmp	r3, #0
 801857e:	d101      	bne.n	8018584 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8018580:	f000 f920 	bl	80187c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8018584:	4b59      	ldr	r3, [pc, #356]	; (80186ec <pvPortMalloc+0x184>)
 8018586:	681a      	ldr	r2, [r3, #0]
 8018588:	687b      	ldr	r3, [r7, #4]
 801858a:	4013      	ands	r3, r2
 801858c:	2b00      	cmp	r3, #0
 801858e:	f040 8093 	bne.w	80186b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8018592:	687b      	ldr	r3, [r7, #4]
 8018594:	2b00      	cmp	r3, #0
 8018596:	d01d      	beq.n	80185d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8018598:	2208      	movs	r2, #8
 801859a:	687b      	ldr	r3, [r7, #4]
 801859c:	4413      	add	r3, r2
 801859e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80185a0:	687b      	ldr	r3, [r7, #4]
 80185a2:	f003 0307 	and.w	r3, r3, #7
 80185a6:	2b00      	cmp	r3, #0
 80185a8:	d014      	beq.n	80185d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80185aa:	687b      	ldr	r3, [r7, #4]
 80185ac:	f023 0307 	bic.w	r3, r3, #7
 80185b0:	3308      	adds	r3, #8
 80185b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80185b4:	687b      	ldr	r3, [r7, #4]
 80185b6:	f003 0307 	and.w	r3, r3, #7
 80185ba:	2b00      	cmp	r3, #0
 80185bc:	d00a      	beq.n	80185d4 <pvPortMalloc+0x6c>
	__asm volatile
 80185be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80185c2:	f383 8811 	msr	BASEPRI, r3
 80185c6:	f3bf 8f6f 	isb	sy
 80185ca:	f3bf 8f4f 	dsb	sy
 80185ce:	617b      	str	r3, [r7, #20]
}
 80185d0:	bf00      	nop
 80185d2:	e7fe      	b.n	80185d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80185d4:	687b      	ldr	r3, [r7, #4]
 80185d6:	2b00      	cmp	r3, #0
 80185d8:	d06e      	beq.n	80186b8 <pvPortMalloc+0x150>
 80185da:	4b45      	ldr	r3, [pc, #276]	; (80186f0 <pvPortMalloc+0x188>)
 80185dc:	681b      	ldr	r3, [r3, #0]
 80185de:	687a      	ldr	r2, [r7, #4]
 80185e0:	429a      	cmp	r2, r3
 80185e2:	d869      	bhi.n	80186b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80185e4:	4b43      	ldr	r3, [pc, #268]	; (80186f4 <pvPortMalloc+0x18c>)
 80185e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80185e8:	4b42      	ldr	r3, [pc, #264]	; (80186f4 <pvPortMalloc+0x18c>)
 80185ea:	681b      	ldr	r3, [r3, #0]
 80185ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80185ee:	e004      	b.n	80185fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80185f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80185f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185f6:	681b      	ldr	r3, [r3, #0]
 80185f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80185fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185fc:	685b      	ldr	r3, [r3, #4]
 80185fe:	687a      	ldr	r2, [r7, #4]
 8018600:	429a      	cmp	r2, r3
 8018602:	d903      	bls.n	801860c <pvPortMalloc+0xa4>
 8018604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018606:	681b      	ldr	r3, [r3, #0]
 8018608:	2b00      	cmp	r3, #0
 801860a:	d1f1      	bne.n	80185f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801860c:	4b36      	ldr	r3, [pc, #216]	; (80186e8 <pvPortMalloc+0x180>)
 801860e:	681b      	ldr	r3, [r3, #0]
 8018610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018612:	429a      	cmp	r2, r3
 8018614:	d050      	beq.n	80186b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8018616:	6a3b      	ldr	r3, [r7, #32]
 8018618:	681b      	ldr	r3, [r3, #0]
 801861a:	2208      	movs	r2, #8
 801861c:	4413      	add	r3, r2
 801861e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8018620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018622:	681a      	ldr	r2, [r3, #0]
 8018624:	6a3b      	ldr	r3, [r7, #32]
 8018626:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8018628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801862a:	685a      	ldr	r2, [r3, #4]
 801862c:	687b      	ldr	r3, [r7, #4]
 801862e:	1ad2      	subs	r2, r2, r3
 8018630:	2308      	movs	r3, #8
 8018632:	005b      	lsls	r3, r3, #1
 8018634:	429a      	cmp	r2, r3
 8018636:	d91f      	bls.n	8018678 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8018638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801863a:	687b      	ldr	r3, [r7, #4]
 801863c:	4413      	add	r3, r2
 801863e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018640:	69bb      	ldr	r3, [r7, #24]
 8018642:	f003 0307 	and.w	r3, r3, #7
 8018646:	2b00      	cmp	r3, #0
 8018648:	d00a      	beq.n	8018660 <pvPortMalloc+0xf8>
	__asm volatile
 801864a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801864e:	f383 8811 	msr	BASEPRI, r3
 8018652:	f3bf 8f6f 	isb	sy
 8018656:	f3bf 8f4f 	dsb	sy
 801865a:	613b      	str	r3, [r7, #16]
}
 801865c:	bf00      	nop
 801865e:	e7fe      	b.n	801865e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8018660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018662:	685a      	ldr	r2, [r3, #4]
 8018664:	687b      	ldr	r3, [r7, #4]
 8018666:	1ad2      	subs	r2, r2, r3
 8018668:	69bb      	ldr	r3, [r7, #24]
 801866a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801866c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801866e:	687a      	ldr	r2, [r7, #4]
 8018670:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8018672:	69b8      	ldr	r0, [r7, #24]
 8018674:	f000 f90a 	bl	801888c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8018678:	4b1d      	ldr	r3, [pc, #116]	; (80186f0 <pvPortMalloc+0x188>)
 801867a:	681a      	ldr	r2, [r3, #0]
 801867c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801867e:	685b      	ldr	r3, [r3, #4]
 8018680:	1ad3      	subs	r3, r2, r3
 8018682:	4a1b      	ldr	r2, [pc, #108]	; (80186f0 <pvPortMalloc+0x188>)
 8018684:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8018686:	4b1a      	ldr	r3, [pc, #104]	; (80186f0 <pvPortMalloc+0x188>)
 8018688:	681a      	ldr	r2, [r3, #0]
 801868a:	4b1b      	ldr	r3, [pc, #108]	; (80186f8 <pvPortMalloc+0x190>)
 801868c:	681b      	ldr	r3, [r3, #0]
 801868e:	429a      	cmp	r2, r3
 8018690:	d203      	bcs.n	801869a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8018692:	4b17      	ldr	r3, [pc, #92]	; (80186f0 <pvPortMalloc+0x188>)
 8018694:	681b      	ldr	r3, [r3, #0]
 8018696:	4a18      	ldr	r2, [pc, #96]	; (80186f8 <pvPortMalloc+0x190>)
 8018698:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801869a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801869c:	685a      	ldr	r2, [r3, #4]
 801869e:	4b13      	ldr	r3, [pc, #76]	; (80186ec <pvPortMalloc+0x184>)
 80186a0:	681b      	ldr	r3, [r3, #0]
 80186a2:	431a      	orrs	r2, r3
 80186a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80186a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186aa:	2200      	movs	r2, #0
 80186ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80186ae:	4b13      	ldr	r3, [pc, #76]	; (80186fc <pvPortMalloc+0x194>)
 80186b0:	681b      	ldr	r3, [r3, #0]
 80186b2:	3301      	adds	r3, #1
 80186b4:	4a11      	ldr	r2, [pc, #68]	; (80186fc <pvPortMalloc+0x194>)
 80186b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80186b8:	f7fe fa68 	bl	8016b8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80186bc:	69fb      	ldr	r3, [r7, #28]
 80186be:	f003 0307 	and.w	r3, r3, #7
 80186c2:	2b00      	cmp	r3, #0
 80186c4:	d00a      	beq.n	80186dc <pvPortMalloc+0x174>
	__asm volatile
 80186c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186ca:	f383 8811 	msr	BASEPRI, r3
 80186ce:	f3bf 8f6f 	isb	sy
 80186d2:	f3bf 8f4f 	dsb	sy
 80186d6:	60fb      	str	r3, [r7, #12]
}
 80186d8:	bf00      	nop
 80186da:	e7fe      	b.n	80186da <pvPortMalloc+0x172>
	return pvReturn;
 80186dc:	69fb      	ldr	r3, [r7, #28]
}
 80186de:	4618      	mov	r0, r3
 80186e0:	3728      	adds	r7, #40	; 0x28
 80186e2:	46bd      	mov	sp, r7
 80186e4:	bd80      	pop	{r7, pc}
 80186e6:	bf00      	nop
 80186e8:	20037280 	.word	0x20037280
 80186ec:	20037294 	.word	0x20037294
 80186f0:	20037284 	.word	0x20037284
 80186f4:	20037278 	.word	0x20037278
 80186f8:	20037288 	.word	0x20037288
 80186fc:	2003728c 	.word	0x2003728c

08018700 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8018700:	b580      	push	{r7, lr}
 8018702:	b086      	sub	sp, #24
 8018704:	af00      	add	r7, sp, #0
 8018706:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8018708:	687b      	ldr	r3, [r7, #4]
 801870a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801870c:	687b      	ldr	r3, [r7, #4]
 801870e:	2b00      	cmp	r3, #0
 8018710:	d04d      	beq.n	80187ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8018712:	2308      	movs	r3, #8
 8018714:	425b      	negs	r3, r3
 8018716:	697a      	ldr	r2, [r7, #20]
 8018718:	4413      	add	r3, r2
 801871a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801871c:	697b      	ldr	r3, [r7, #20]
 801871e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8018720:	693b      	ldr	r3, [r7, #16]
 8018722:	685a      	ldr	r2, [r3, #4]
 8018724:	4b24      	ldr	r3, [pc, #144]	; (80187b8 <vPortFree+0xb8>)
 8018726:	681b      	ldr	r3, [r3, #0]
 8018728:	4013      	ands	r3, r2
 801872a:	2b00      	cmp	r3, #0
 801872c:	d10a      	bne.n	8018744 <vPortFree+0x44>
	__asm volatile
 801872e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018732:	f383 8811 	msr	BASEPRI, r3
 8018736:	f3bf 8f6f 	isb	sy
 801873a:	f3bf 8f4f 	dsb	sy
 801873e:	60fb      	str	r3, [r7, #12]
}
 8018740:	bf00      	nop
 8018742:	e7fe      	b.n	8018742 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8018744:	693b      	ldr	r3, [r7, #16]
 8018746:	681b      	ldr	r3, [r3, #0]
 8018748:	2b00      	cmp	r3, #0
 801874a:	d00a      	beq.n	8018762 <vPortFree+0x62>
	__asm volatile
 801874c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018750:	f383 8811 	msr	BASEPRI, r3
 8018754:	f3bf 8f6f 	isb	sy
 8018758:	f3bf 8f4f 	dsb	sy
 801875c:	60bb      	str	r3, [r7, #8]
}
 801875e:	bf00      	nop
 8018760:	e7fe      	b.n	8018760 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8018762:	693b      	ldr	r3, [r7, #16]
 8018764:	685a      	ldr	r2, [r3, #4]
 8018766:	4b14      	ldr	r3, [pc, #80]	; (80187b8 <vPortFree+0xb8>)
 8018768:	681b      	ldr	r3, [r3, #0]
 801876a:	4013      	ands	r3, r2
 801876c:	2b00      	cmp	r3, #0
 801876e:	d01e      	beq.n	80187ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8018770:	693b      	ldr	r3, [r7, #16]
 8018772:	681b      	ldr	r3, [r3, #0]
 8018774:	2b00      	cmp	r3, #0
 8018776:	d11a      	bne.n	80187ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8018778:	693b      	ldr	r3, [r7, #16]
 801877a:	685a      	ldr	r2, [r3, #4]
 801877c:	4b0e      	ldr	r3, [pc, #56]	; (80187b8 <vPortFree+0xb8>)
 801877e:	681b      	ldr	r3, [r3, #0]
 8018780:	43db      	mvns	r3, r3
 8018782:	401a      	ands	r2, r3
 8018784:	693b      	ldr	r3, [r7, #16]
 8018786:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8018788:	f7fe f9f2 	bl	8016b70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801878c:	693b      	ldr	r3, [r7, #16]
 801878e:	685a      	ldr	r2, [r3, #4]
 8018790:	4b0a      	ldr	r3, [pc, #40]	; (80187bc <vPortFree+0xbc>)
 8018792:	681b      	ldr	r3, [r3, #0]
 8018794:	4413      	add	r3, r2
 8018796:	4a09      	ldr	r2, [pc, #36]	; (80187bc <vPortFree+0xbc>)
 8018798:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801879a:	6938      	ldr	r0, [r7, #16]
 801879c:	f000 f876 	bl	801888c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80187a0:	4b07      	ldr	r3, [pc, #28]	; (80187c0 <vPortFree+0xc0>)
 80187a2:	681b      	ldr	r3, [r3, #0]
 80187a4:	3301      	adds	r3, #1
 80187a6:	4a06      	ldr	r2, [pc, #24]	; (80187c0 <vPortFree+0xc0>)
 80187a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80187aa:	f7fe f9ef 	bl	8016b8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80187ae:	bf00      	nop
 80187b0:	3718      	adds	r7, #24
 80187b2:	46bd      	mov	sp, r7
 80187b4:	bd80      	pop	{r7, pc}
 80187b6:	bf00      	nop
 80187b8:	20037294 	.word	0x20037294
 80187bc:	20037284 	.word	0x20037284
 80187c0:	20037290 	.word	0x20037290

080187c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80187c4:	b480      	push	{r7}
 80187c6:	b085      	sub	sp, #20
 80187c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80187ca:	4b29      	ldr	r3, [pc, #164]	; (8018870 <prvHeapInit+0xac>)
 80187cc:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80187ce:	4b29      	ldr	r3, [pc, #164]	; (8018874 <prvHeapInit+0xb0>)
 80187d0:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80187d2:	68fb      	ldr	r3, [r7, #12]
 80187d4:	f003 0307 	and.w	r3, r3, #7
 80187d8:	2b00      	cmp	r3, #0
 80187da:	d00c      	beq.n	80187f6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80187dc:	68fb      	ldr	r3, [r7, #12]
 80187de:	3307      	adds	r3, #7
 80187e0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80187e2:	68fb      	ldr	r3, [r7, #12]
 80187e4:	f023 0307 	bic.w	r3, r3, #7
 80187e8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80187ea:	68ba      	ldr	r2, [r7, #8]
 80187ec:	68fb      	ldr	r3, [r7, #12]
 80187ee:	1ad3      	subs	r3, r2, r3
 80187f0:	4a20      	ldr	r2, [pc, #128]	; (8018874 <prvHeapInit+0xb0>)
 80187f2:	4413      	add	r3, r2
 80187f4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80187f6:	68fb      	ldr	r3, [r7, #12]
 80187f8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80187fa:	4a1f      	ldr	r2, [pc, #124]	; (8018878 <prvHeapInit+0xb4>)
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8018800:	4b1d      	ldr	r3, [pc, #116]	; (8018878 <prvHeapInit+0xb4>)
 8018802:	2200      	movs	r2, #0
 8018804:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8018806:	687b      	ldr	r3, [r7, #4]
 8018808:	68ba      	ldr	r2, [r7, #8]
 801880a:	4413      	add	r3, r2
 801880c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801880e:	2208      	movs	r2, #8
 8018810:	68fb      	ldr	r3, [r7, #12]
 8018812:	1a9b      	subs	r3, r3, r2
 8018814:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018816:	68fb      	ldr	r3, [r7, #12]
 8018818:	f023 0307 	bic.w	r3, r3, #7
 801881c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801881e:	68fb      	ldr	r3, [r7, #12]
 8018820:	4a16      	ldr	r2, [pc, #88]	; (801887c <prvHeapInit+0xb8>)
 8018822:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8018824:	4b15      	ldr	r3, [pc, #84]	; (801887c <prvHeapInit+0xb8>)
 8018826:	681b      	ldr	r3, [r3, #0]
 8018828:	2200      	movs	r2, #0
 801882a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801882c:	4b13      	ldr	r3, [pc, #76]	; (801887c <prvHeapInit+0xb8>)
 801882e:	681b      	ldr	r3, [r3, #0]
 8018830:	2200      	movs	r2, #0
 8018832:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8018834:	687b      	ldr	r3, [r7, #4]
 8018836:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8018838:	683b      	ldr	r3, [r7, #0]
 801883a:	68fa      	ldr	r2, [r7, #12]
 801883c:	1ad2      	subs	r2, r2, r3
 801883e:	683b      	ldr	r3, [r7, #0]
 8018840:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8018842:	4b0e      	ldr	r3, [pc, #56]	; (801887c <prvHeapInit+0xb8>)
 8018844:	681a      	ldr	r2, [r3, #0]
 8018846:	683b      	ldr	r3, [r7, #0]
 8018848:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801884a:	683b      	ldr	r3, [r7, #0]
 801884c:	685b      	ldr	r3, [r3, #4]
 801884e:	4a0c      	ldr	r2, [pc, #48]	; (8018880 <prvHeapInit+0xbc>)
 8018850:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018852:	683b      	ldr	r3, [r7, #0]
 8018854:	685b      	ldr	r3, [r3, #4]
 8018856:	4a0b      	ldr	r2, [pc, #44]	; (8018884 <prvHeapInit+0xc0>)
 8018858:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801885a:	4b0b      	ldr	r3, [pc, #44]	; (8018888 <prvHeapInit+0xc4>)
 801885c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8018860:	601a      	str	r2, [r3, #0]
}
 8018862:	bf00      	nop
 8018864:	3714      	adds	r7, #20
 8018866:	46bd      	mov	sp, r7
 8018868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801886c:	4770      	bx	lr
 801886e:	bf00      	nop
 8018870:	00030d40 	.word	0x00030d40
 8018874:	20006538 	.word	0x20006538
 8018878:	20037278 	.word	0x20037278
 801887c:	20037280 	.word	0x20037280
 8018880:	20037288 	.word	0x20037288
 8018884:	20037284 	.word	0x20037284
 8018888:	20037294 	.word	0x20037294

0801888c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801888c:	b480      	push	{r7}
 801888e:	b085      	sub	sp, #20
 8018890:	af00      	add	r7, sp, #0
 8018892:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8018894:	4b28      	ldr	r3, [pc, #160]	; (8018938 <prvInsertBlockIntoFreeList+0xac>)
 8018896:	60fb      	str	r3, [r7, #12]
 8018898:	e002      	b.n	80188a0 <prvInsertBlockIntoFreeList+0x14>
 801889a:	68fb      	ldr	r3, [r7, #12]
 801889c:	681b      	ldr	r3, [r3, #0]
 801889e:	60fb      	str	r3, [r7, #12]
 80188a0:	68fb      	ldr	r3, [r7, #12]
 80188a2:	681b      	ldr	r3, [r3, #0]
 80188a4:	687a      	ldr	r2, [r7, #4]
 80188a6:	429a      	cmp	r2, r3
 80188a8:	d8f7      	bhi.n	801889a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80188aa:	68fb      	ldr	r3, [r7, #12]
 80188ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80188ae:	68fb      	ldr	r3, [r7, #12]
 80188b0:	685b      	ldr	r3, [r3, #4]
 80188b2:	68ba      	ldr	r2, [r7, #8]
 80188b4:	4413      	add	r3, r2
 80188b6:	687a      	ldr	r2, [r7, #4]
 80188b8:	429a      	cmp	r2, r3
 80188ba:	d108      	bne.n	80188ce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80188bc:	68fb      	ldr	r3, [r7, #12]
 80188be:	685a      	ldr	r2, [r3, #4]
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	685b      	ldr	r3, [r3, #4]
 80188c4:	441a      	add	r2, r3
 80188c6:	68fb      	ldr	r3, [r7, #12]
 80188c8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80188ca:	68fb      	ldr	r3, [r7, #12]
 80188cc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80188ce:	687b      	ldr	r3, [r7, #4]
 80188d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80188d2:	687b      	ldr	r3, [r7, #4]
 80188d4:	685b      	ldr	r3, [r3, #4]
 80188d6:	68ba      	ldr	r2, [r7, #8]
 80188d8:	441a      	add	r2, r3
 80188da:	68fb      	ldr	r3, [r7, #12]
 80188dc:	681b      	ldr	r3, [r3, #0]
 80188de:	429a      	cmp	r2, r3
 80188e0:	d118      	bne.n	8018914 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80188e2:	68fb      	ldr	r3, [r7, #12]
 80188e4:	681a      	ldr	r2, [r3, #0]
 80188e6:	4b15      	ldr	r3, [pc, #84]	; (801893c <prvInsertBlockIntoFreeList+0xb0>)
 80188e8:	681b      	ldr	r3, [r3, #0]
 80188ea:	429a      	cmp	r2, r3
 80188ec:	d00d      	beq.n	801890a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80188ee:	687b      	ldr	r3, [r7, #4]
 80188f0:	685a      	ldr	r2, [r3, #4]
 80188f2:	68fb      	ldr	r3, [r7, #12]
 80188f4:	681b      	ldr	r3, [r3, #0]
 80188f6:	685b      	ldr	r3, [r3, #4]
 80188f8:	441a      	add	r2, r3
 80188fa:	687b      	ldr	r3, [r7, #4]
 80188fc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80188fe:	68fb      	ldr	r3, [r7, #12]
 8018900:	681b      	ldr	r3, [r3, #0]
 8018902:	681a      	ldr	r2, [r3, #0]
 8018904:	687b      	ldr	r3, [r7, #4]
 8018906:	601a      	str	r2, [r3, #0]
 8018908:	e008      	b.n	801891c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801890a:	4b0c      	ldr	r3, [pc, #48]	; (801893c <prvInsertBlockIntoFreeList+0xb0>)
 801890c:	681a      	ldr	r2, [r3, #0]
 801890e:	687b      	ldr	r3, [r7, #4]
 8018910:	601a      	str	r2, [r3, #0]
 8018912:	e003      	b.n	801891c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8018914:	68fb      	ldr	r3, [r7, #12]
 8018916:	681a      	ldr	r2, [r3, #0]
 8018918:	687b      	ldr	r3, [r7, #4]
 801891a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801891c:	68fa      	ldr	r2, [r7, #12]
 801891e:	687b      	ldr	r3, [r7, #4]
 8018920:	429a      	cmp	r2, r3
 8018922:	d002      	beq.n	801892a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8018924:	68fb      	ldr	r3, [r7, #12]
 8018926:	687a      	ldr	r2, [r7, #4]
 8018928:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801892a:	bf00      	nop
 801892c:	3714      	adds	r7, #20
 801892e:	46bd      	mov	sp, r7
 8018930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018934:	4770      	bx	lr
 8018936:	bf00      	nop
 8018938:	20037278 	.word	0x20037278
 801893c:	20037280 	.word	0x20037280

08018940 <__errno>:
 8018940:	4b01      	ldr	r3, [pc, #4]	; (8018948 <__errno+0x8>)
 8018942:	6818      	ldr	r0, [r3, #0]
 8018944:	4770      	bx	lr
 8018946:	bf00      	nop
 8018948:	200000a4 	.word	0x200000a4

0801894c <__libc_init_array>:
 801894c:	b570      	push	{r4, r5, r6, lr}
 801894e:	4d0d      	ldr	r5, [pc, #52]	; (8018984 <__libc_init_array+0x38>)
 8018950:	4c0d      	ldr	r4, [pc, #52]	; (8018988 <__libc_init_array+0x3c>)
 8018952:	1b64      	subs	r4, r4, r5
 8018954:	10a4      	asrs	r4, r4, #2
 8018956:	2600      	movs	r6, #0
 8018958:	42a6      	cmp	r6, r4
 801895a:	d109      	bne.n	8018970 <__libc_init_array+0x24>
 801895c:	4d0b      	ldr	r5, [pc, #44]	; (801898c <__libc_init_array+0x40>)
 801895e:	4c0c      	ldr	r4, [pc, #48]	; (8018990 <__libc_init_array+0x44>)
 8018960:	f006 fabc 	bl	801eedc <_init>
 8018964:	1b64      	subs	r4, r4, r5
 8018966:	10a4      	asrs	r4, r4, #2
 8018968:	2600      	movs	r6, #0
 801896a:	42a6      	cmp	r6, r4
 801896c:	d105      	bne.n	801897a <__libc_init_array+0x2e>
 801896e:	bd70      	pop	{r4, r5, r6, pc}
 8018970:	f855 3b04 	ldr.w	r3, [r5], #4
 8018974:	4798      	blx	r3
 8018976:	3601      	adds	r6, #1
 8018978:	e7ee      	b.n	8018958 <__libc_init_array+0xc>
 801897a:	f855 3b04 	ldr.w	r3, [r5], #4
 801897e:	4798      	blx	r3
 8018980:	3601      	adds	r6, #1
 8018982:	e7f2      	b.n	801896a <__libc_init_array+0x1e>
 8018984:	08024a20 	.word	0x08024a20
 8018988:	08024a20 	.word	0x08024a20
 801898c:	08024a20 	.word	0x08024a20
 8018990:	08024a24 	.word	0x08024a24

08018994 <memcpy>:
 8018994:	440a      	add	r2, r1
 8018996:	4291      	cmp	r1, r2
 8018998:	f100 33ff 	add.w	r3, r0, #4294967295
 801899c:	d100      	bne.n	80189a0 <memcpy+0xc>
 801899e:	4770      	bx	lr
 80189a0:	b510      	push	{r4, lr}
 80189a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80189a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80189aa:	4291      	cmp	r1, r2
 80189ac:	d1f9      	bne.n	80189a2 <memcpy+0xe>
 80189ae:	bd10      	pop	{r4, pc}

080189b0 <memset>:
 80189b0:	4402      	add	r2, r0
 80189b2:	4603      	mov	r3, r0
 80189b4:	4293      	cmp	r3, r2
 80189b6:	d100      	bne.n	80189ba <memset+0xa>
 80189b8:	4770      	bx	lr
 80189ba:	f803 1b01 	strb.w	r1, [r3], #1
 80189be:	e7f9      	b.n	80189b4 <memset+0x4>

080189c0 <__cvt>:
 80189c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80189c4:	ec55 4b10 	vmov	r4, r5, d0
 80189c8:	2d00      	cmp	r5, #0
 80189ca:	460e      	mov	r6, r1
 80189cc:	4619      	mov	r1, r3
 80189ce:	462b      	mov	r3, r5
 80189d0:	bfbb      	ittet	lt
 80189d2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80189d6:	461d      	movlt	r5, r3
 80189d8:	2300      	movge	r3, #0
 80189da:	232d      	movlt	r3, #45	; 0x2d
 80189dc:	700b      	strb	r3, [r1, #0]
 80189de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80189e0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80189e4:	4691      	mov	r9, r2
 80189e6:	f023 0820 	bic.w	r8, r3, #32
 80189ea:	bfbc      	itt	lt
 80189ec:	4622      	movlt	r2, r4
 80189ee:	4614      	movlt	r4, r2
 80189f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80189f4:	d005      	beq.n	8018a02 <__cvt+0x42>
 80189f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80189fa:	d100      	bne.n	80189fe <__cvt+0x3e>
 80189fc:	3601      	adds	r6, #1
 80189fe:	2102      	movs	r1, #2
 8018a00:	e000      	b.n	8018a04 <__cvt+0x44>
 8018a02:	2103      	movs	r1, #3
 8018a04:	ab03      	add	r3, sp, #12
 8018a06:	9301      	str	r3, [sp, #4]
 8018a08:	ab02      	add	r3, sp, #8
 8018a0a:	9300      	str	r3, [sp, #0]
 8018a0c:	ec45 4b10 	vmov	d0, r4, r5
 8018a10:	4653      	mov	r3, sl
 8018a12:	4632      	mov	r2, r6
 8018a14:	f001 fdac 	bl	801a570 <_dtoa_r>
 8018a18:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8018a1c:	4607      	mov	r7, r0
 8018a1e:	d102      	bne.n	8018a26 <__cvt+0x66>
 8018a20:	f019 0f01 	tst.w	r9, #1
 8018a24:	d022      	beq.n	8018a6c <__cvt+0xac>
 8018a26:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8018a2a:	eb07 0906 	add.w	r9, r7, r6
 8018a2e:	d110      	bne.n	8018a52 <__cvt+0x92>
 8018a30:	783b      	ldrb	r3, [r7, #0]
 8018a32:	2b30      	cmp	r3, #48	; 0x30
 8018a34:	d10a      	bne.n	8018a4c <__cvt+0x8c>
 8018a36:	2200      	movs	r2, #0
 8018a38:	2300      	movs	r3, #0
 8018a3a:	4620      	mov	r0, r4
 8018a3c:	4629      	mov	r1, r5
 8018a3e:	f7e8 f85b 	bl	8000af8 <__aeabi_dcmpeq>
 8018a42:	b918      	cbnz	r0, 8018a4c <__cvt+0x8c>
 8018a44:	f1c6 0601 	rsb	r6, r6, #1
 8018a48:	f8ca 6000 	str.w	r6, [sl]
 8018a4c:	f8da 3000 	ldr.w	r3, [sl]
 8018a50:	4499      	add	r9, r3
 8018a52:	2200      	movs	r2, #0
 8018a54:	2300      	movs	r3, #0
 8018a56:	4620      	mov	r0, r4
 8018a58:	4629      	mov	r1, r5
 8018a5a:	f7e8 f84d 	bl	8000af8 <__aeabi_dcmpeq>
 8018a5e:	b108      	cbz	r0, 8018a64 <__cvt+0xa4>
 8018a60:	f8cd 900c 	str.w	r9, [sp, #12]
 8018a64:	2230      	movs	r2, #48	; 0x30
 8018a66:	9b03      	ldr	r3, [sp, #12]
 8018a68:	454b      	cmp	r3, r9
 8018a6a:	d307      	bcc.n	8018a7c <__cvt+0xbc>
 8018a6c:	9b03      	ldr	r3, [sp, #12]
 8018a6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018a70:	1bdb      	subs	r3, r3, r7
 8018a72:	4638      	mov	r0, r7
 8018a74:	6013      	str	r3, [r2, #0]
 8018a76:	b004      	add	sp, #16
 8018a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018a7c:	1c59      	adds	r1, r3, #1
 8018a7e:	9103      	str	r1, [sp, #12]
 8018a80:	701a      	strb	r2, [r3, #0]
 8018a82:	e7f0      	b.n	8018a66 <__cvt+0xa6>

08018a84 <__exponent>:
 8018a84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018a86:	4603      	mov	r3, r0
 8018a88:	2900      	cmp	r1, #0
 8018a8a:	bfb8      	it	lt
 8018a8c:	4249      	neglt	r1, r1
 8018a8e:	f803 2b02 	strb.w	r2, [r3], #2
 8018a92:	bfb4      	ite	lt
 8018a94:	222d      	movlt	r2, #45	; 0x2d
 8018a96:	222b      	movge	r2, #43	; 0x2b
 8018a98:	2909      	cmp	r1, #9
 8018a9a:	7042      	strb	r2, [r0, #1]
 8018a9c:	dd2a      	ble.n	8018af4 <__exponent+0x70>
 8018a9e:	f10d 0407 	add.w	r4, sp, #7
 8018aa2:	46a4      	mov	ip, r4
 8018aa4:	270a      	movs	r7, #10
 8018aa6:	46a6      	mov	lr, r4
 8018aa8:	460a      	mov	r2, r1
 8018aaa:	fb91 f6f7 	sdiv	r6, r1, r7
 8018aae:	fb07 1516 	mls	r5, r7, r6, r1
 8018ab2:	3530      	adds	r5, #48	; 0x30
 8018ab4:	2a63      	cmp	r2, #99	; 0x63
 8018ab6:	f104 34ff 	add.w	r4, r4, #4294967295
 8018aba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8018abe:	4631      	mov	r1, r6
 8018ac0:	dcf1      	bgt.n	8018aa6 <__exponent+0x22>
 8018ac2:	3130      	adds	r1, #48	; 0x30
 8018ac4:	f1ae 0502 	sub.w	r5, lr, #2
 8018ac8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8018acc:	1c44      	adds	r4, r0, #1
 8018ace:	4629      	mov	r1, r5
 8018ad0:	4561      	cmp	r1, ip
 8018ad2:	d30a      	bcc.n	8018aea <__exponent+0x66>
 8018ad4:	f10d 0209 	add.w	r2, sp, #9
 8018ad8:	eba2 020e 	sub.w	r2, r2, lr
 8018adc:	4565      	cmp	r5, ip
 8018ade:	bf88      	it	hi
 8018ae0:	2200      	movhi	r2, #0
 8018ae2:	4413      	add	r3, r2
 8018ae4:	1a18      	subs	r0, r3, r0
 8018ae6:	b003      	add	sp, #12
 8018ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018aea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018aee:	f804 2f01 	strb.w	r2, [r4, #1]!
 8018af2:	e7ed      	b.n	8018ad0 <__exponent+0x4c>
 8018af4:	2330      	movs	r3, #48	; 0x30
 8018af6:	3130      	adds	r1, #48	; 0x30
 8018af8:	7083      	strb	r3, [r0, #2]
 8018afa:	70c1      	strb	r1, [r0, #3]
 8018afc:	1d03      	adds	r3, r0, #4
 8018afe:	e7f1      	b.n	8018ae4 <__exponent+0x60>

08018b00 <_printf_float>:
 8018b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b04:	ed2d 8b02 	vpush	{d8}
 8018b08:	b08d      	sub	sp, #52	; 0x34
 8018b0a:	460c      	mov	r4, r1
 8018b0c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8018b10:	4616      	mov	r6, r2
 8018b12:	461f      	mov	r7, r3
 8018b14:	4605      	mov	r5, r0
 8018b16:	f002 fe89 	bl	801b82c <_localeconv_r>
 8018b1a:	f8d0 a000 	ldr.w	sl, [r0]
 8018b1e:	4650      	mov	r0, sl
 8018b20:	f7e7 fb6e 	bl	8000200 <strlen>
 8018b24:	2300      	movs	r3, #0
 8018b26:	930a      	str	r3, [sp, #40]	; 0x28
 8018b28:	6823      	ldr	r3, [r4, #0]
 8018b2a:	9305      	str	r3, [sp, #20]
 8018b2c:	f8d8 3000 	ldr.w	r3, [r8]
 8018b30:	f894 b018 	ldrb.w	fp, [r4, #24]
 8018b34:	3307      	adds	r3, #7
 8018b36:	f023 0307 	bic.w	r3, r3, #7
 8018b3a:	f103 0208 	add.w	r2, r3, #8
 8018b3e:	f8c8 2000 	str.w	r2, [r8]
 8018b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b46:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8018b4a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8018b4e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8018b52:	9307      	str	r3, [sp, #28]
 8018b54:	f8cd 8018 	str.w	r8, [sp, #24]
 8018b58:	ee08 0a10 	vmov	s16, r0
 8018b5c:	4b9f      	ldr	r3, [pc, #636]	; (8018ddc <_printf_float+0x2dc>)
 8018b5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018b62:	f04f 32ff 	mov.w	r2, #4294967295
 8018b66:	f7e7 fff9 	bl	8000b5c <__aeabi_dcmpun>
 8018b6a:	bb88      	cbnz	r0, 8018bd0 <_printf_float+0xd0>
 8018b6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018b70:	4b9a      	ldr	r3, [pc, #616]	; (8018ddc <_printf_float+0x2dc>)
 8018b72:	f04f 32ff 	mov.w	r2, #4294967295
 8018b76:	f7e7 ffd3 	bl	8000b20 <__aeabi_dcmple>
 8018b7a:	bb48      	cbnz	r0, 8018bd0 <_printf_float+0xd0>
 8018b7c:	2200      	movs	r2, #0
 8018b7e:	2300      	movs	r3, #0
 8018b80:	4640      	mov	r0, r8
 8018b82:	4649      	mov	r1, r9
 8018b84:	f7e7 ffc2 	bl	8000b0c <__aeabi_dcmplt>
 8018b88:	b110      	cbz	r0, 8018b90 <_printf_float+0x90>
 8018b8a:	232d      	movs	r3, #45	; 0x2d
 8018b8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018b90:	4b93      	ldr	r3, [pc, #588]	; (8018de0 <_printf_float+0x2e0>)
 8018b92:	4894      	ldr	r0, [pc, #592]	; (8018de4 <_printf_float+0x2e4>)
 8018b94:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8018b98:	bf94      	ite	ls
 8018b9a:	4698      	movls	r8, r3
 8018b9c:	4680      	movhi	r8, r0
 8018b9e:	2303      	movs	r3, #3
 8018ba0:	6123      	str	r3, [r4, #16]
 8018ba2:	9b05      	ldr	r3, [sp, #20]
 8018ba4:	f023 0204 	bic.w	r2, r3, #4
 8018ba8:	6022      	str	r2, [r4, #0]
 8018baa:	f04f 0900 	mov.w	r9, #0
 8018bae:	9700      	str	r7, [sp, #0]
 8018bb0:	4633      	mov	r3, r6
 8018bb2:	aa0b      	add	r2, sp, #44	; 0x2c
 8018bb4:	4621      	mov	r1, r4
 8018bb6:	4628      	mov	r0, r5
 8018bb8:	f000 f9d8 	bl	8018f6c <_printf_common>
 8018bbc:	3001      	adds	r0, #1
 8018bbe:	f040 8090 	bne.w	8018ce2 <_printf_float+0x1e2>
 8018bc2:	f04f 30ff 	mov.w	r0, #4294967295
 8018bc6:	b00d      	add	sp, #52	; 0x34
 8018bc8:	ecbd 8b02 	vpop	{d8}
 8018bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018bd0:	4642      	mov	r2, r8
 8018bd2:	464b      	mov	r3, r9
 8018bd4:	4640      	mov	r0, r8
 8018bd6:	4649      	mov	r1, r9
 8018bd8:	f7e7 ffc0 	bl	8000b5c <__aeabi_dcmpun>
 8018bdc:	b140      	cbz	r0, 8018bf0 <_printf_float+0xf0>
 8018bde:	464b      	mov	r3, r9
 8018be0:	2b00      	cmp	r3, #0
 8018be2:	bfbc      	itt	lt
 8018be4:	232d      	movlt	r3, #45	; 0x2d
 8018be6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8018bea:	487f      	ldr	r0, [pc, #508]	; (8018de8 <_printf_float+0x2e8>)
 8018bec:	4b7f      	ldr	r3, [pc, #508]	; (8018dec <_printf_float+0x2ec>)
 8018bee:	e7d1      	b.n	8018b94 <_printf_float+0x94>
 8018bf0:	6863      	ldr	r3, [r4, #4]
 8018bf2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8018bf6:	9206      	str	r2, [sp, #24]
 8018bf8:	1c5a      	adds	r2, r3, #1
 8018bfa:	d13f      	bne.n	8018c7c <_printf_float+0x17c>
 8018bfc:	2306      	movs	r3, #6
 8018bfe:	6063      	str	r3, [r4, #4]
 8018c00:	9b05      	ldr	r3, [sp, #20]
 8018c02:	6861      	ldr	r1, [r4, #4]
 8018c04:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8018c08:	2300      	movs	r3, #0
 8018c0a:	9303      	str	r3, [sp, #12]
 8018c0c:	ab0a      	add	r3, sp, #40	; 0x28
 8018c0e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8018c12:	ab09      	add	r3, sp, #36	; 0x24
 8018c14:	ec49 8b10 	vmov	d0, r8, r9
 8018c18:	9300      	str	r3, [sp, #0]
 8018c1a:	6022      	str	r2, [r4, #0]
 8018c1c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8018c20:	4628      	mov	r0, r5
 8018c22:	f7ff fecd 	bl	80189c0 <__cvt>
 8018c26:	9b06      	ldr	r3, [sp, #24]
 8018c28:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018c2a:	2b47      	cmp	r3, #71	; 0x47
 8018c2c:	4680      	mov	r8, r0
 8018c2e:	d108      	bne.n	8018c42 <_printf_float+0x142>
 8018c30:	1cc8      	adds	r0, r1, #3
 8018c32:	db02      	blt.n	8018c3a <_printf_float+0x13a>
 8018c34:	6863      	ldr	r3, [r4, #4]
 8018c36:	4299      	cmp	r1, r3
 8018c38:	dd41      	ble.n	8018cbe <_printf_float+0x1be>
 8018c3a:	f1ab 0b02 	sub.w	fp, fp, #2
 8018c3e:	fa5f fb8b 	uxtb.w	fp, fp
 8018c42:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8018c46:	d820      	bhi.n	8018c8a <_printf_float+0x18a>
 8018c48:	3901      	subs	r1, #1
 8018c4a:	465a      	mov	r2, fp
 8018c4c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8018c50:	9109      	str	r1, [sp, #36]	; 0x24
 8018c52:	f7ff ff17 	bl	8018a84 <__exponent>
 8018c56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018c58:	1813      	adds	r3, r2, r0
 8018c5a:	2a01      	cmp	r2, #1
 8018c5c:	4681      	mov	r9, r0
 8018c5e:	6123      	str	r3, [r4, #16]
 8018c60:	dc02      	bgt.n	8018c68 <_printf_float+0x168>
 8018c62:	6822      	ldr	r2, [r4, #0]
 8018c64:	07d2      	lsls	r2, r2, #31
 8018c66:	d501      	bpl.n	8018c6c <_printf_float+0x16c>
 8018c68:	3301      	adds	r3, #1
 8018c6a:	6123      	str	r3, [r4, #16]
 8018c6c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8018c70:	2b00      	cmp	r3, #0
 8018c72:	d09c      	beq.n	8018bae <_printf_float+0xae>
 8018c74:	232d      	movs	r3, #45	; 0x2d
 8018c76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018c7a:	e798      	b.n	8018bae <_printf_float+0xae>
 8018c7c:	9a06      	ldr	r2, [sp, #24]
 8018c7e:	2a47      	cmp	r2, #71	; 0x47
 8018c80:	d1be      	bne.n	8018c00 <_printf_float+0x100>
 8018c82:	2b00      	cmp	r3, #0
 8018c84:	d1bc      	bne.n	8018c00 <_printf_float+0x100>
 8018c86:	2301      	movs	r3, #1
 8018c88:	e7b9      	b.n	8018bfe <_printf_float+0xfe>
 8018c8a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8018c8e:	d118      	bne.n	8018cc2 <_printf_float+0x1c2>
 8018c90:	2900      	cmp	r1, #0
 8018c92:	6863      	ldr	r3, [r4, #4]
 8018c94:	dd0b      	ble.n	8018cae <_printf_float+0x1ae>
 8018c96:	6121      	str	r1, [r4, #16]
 8018c98:	b913      	cbnz	r3, 8018ca0 <_printf_float+0x1a0>
 8018c9a:	6822      	ldr	r2, [r4, #0]
 8018c9c:	07d0      	lsls	r0, r2, #31
 8018c9e:	d502      	bpl.n	8018ca6 <_printf_float+0x1a6>
 8018ca0:	3301      	adds	r3, #1
 8018ca2:	440b      	add	r3, r1
 8018ca4:	6123      	str	r3, [r4, #16]
 8018ca6:	65a1      	str	r1, [r4, #88]	; 0x58
 8018ca8:	f04f 0900 	mov.w	r9, #0
 8018cac:	e7de      	b.n	8018c6c <_printf_float+0x16c>
 8018cae:	b913      	cbnz	r3, 8018cb6 <_printf_float+0x1b6>
 8018cb0:	6822      	ldr	r2, [r4, #0]
 8018cb2:	07d2      	lsls	r2, r2, #31
 8018cb4:	d501      	bpl.n	8018cba <_printf_float+0x1ba>
 8018cb6:	3302      	adds	r3, #2
 8018cb8:	e7f4      	b.n	8018ca4 <_printf_float+0x1a4>
 8018cba:	2301      	movs	r3, #1
 8018cbc:	e7f2      	b.n	8018ca4 <_printf_float+0x1a4>
 8018cbe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8018cc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018cc4:	4299      	cmp	r1, r3
 8018cc6:	db05      	blt.n	8018cd4 <_printf_float+0x1d4>
 8018cc8:	6823      	ldr	r3, [r4, #0]
 8018cca:	6121      	str	r1, [r4, #16]
 8018ccc:	07d8      	lsls	r0, r3, #31
 8018cce:	d5ea      	bpl.n	8018ca6 <_printf_float+0x1a6>
 8018cd0:	1c4b      	adds	r3, r1, #1
 8018cd2:	e7e7      	b.n	8018ca4 <_printf_float+0x1a4>
 8018cd4:	2900      	cmp	r1, #0
 8018cd6:	bfd4      	ite	le
 8018cd8:	f1c1 0202 	rsble	r2, r1, #2
 8018cdc:	2201      	movgt	r2, #1
 8018cde:	4413      	add	r3, r2
 8018ce0:	e7e0      	b.n	8018ca4 <_printf_float+0x1a4>
 8018ce2:	6823      	ldr	r3, [r4, #0]
 8018ce4:	055a      	lsls	r2, r3, #21
 8018ce6:	d407      	bmi.n	8018cf8 <_printf_float+0x1f8>
 8018ce8:	6923      	ldr	r3, [r4, #16]
 8018cea:	4642      	mov	r2, r8
 8018cec:	4631      	mov	r1, r6
 8018cee:	4628      	mov	r0, r5
 8018cf0:	47b8      	blx	r7
 8018cf2:	3001      	adds	r0, #1
 8018cf4:	d12c      	bne.n	8018d50 <_printf_float+0x250>
 8018cf6:	e764      	b.n	8018bc2 <_printf_float+0xc2>
 8018cf8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8018cfc:	f240 80e0 	bls.w	8018ec0 <_printf_float+0x3c0>
 8018d00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8018d04:	2200      	movs	r2, #0
 8018d06:	2300      	movs	r3, #0
 8018d08:	f7e7 fef6 	bl	8000af8 <__aeabi_dcmpeq>
 8018d0c:	2800      	cmp	r0, #0
 8018d0e:	d034      	beq.n	8018d7a <_printf_float+0x27a>
 8018d10:	4a37      	ldr	r2, [pc, #220]	; (8018df0 <_printf_float+0x2f0>)
 8018d12:	2301      	movs	r3, #1
 8018d14:	4631      	mov	r1, r6
 8018d16:	4628      	mov	r0, r5
 8018d18:	47b8      	blx	r7
 8018d1a:	3001      	adds	r0, #1
 8018d1c:	f43f af51 	beq.w	8018bc2 <_printf_float+0xc2>
 8018d20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8018d24:	429a      	cmp	r2, r3
 8018d26:	db02      	blt.n	8018d2e <_printf_float+0x22e>
 8018d28:	6823      	ldr	r3, [r4, #0]
 8018d2a:	07d8      	lsls	r0, r3, #31
 8018d2c:	d510      	bpl.n	8018d50 <_printf_float+0x250>
 8018d2e:	ee18 3a10 	vmov	r3, s16
 8018d32:	4652      	mov	r2, sl
 8018d34:	4631      	mov	r1, r6
 8018d36:	4628      	mov	r0, r5
 8018d38:	47b8      	blx	r7
 8018d3a:	3001      	adds	r0, #1
 8018d3c:	f43f af41 	beq.w	8018bc2 <_printf_float+0xc2>
 8018d40:	f04f 0800 	mov.w	r8, #0
 8018d44:	f104 091a 	add.w	r9, r4, #26
 8018d48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018d4a:	3b01      	subs	r3, #1
 8018d4c:	4543      	cmp	r3, r8
 8018d4e:	dc09      	bgt.n	8018d64 <_printf_float+0x264>
 8018d50:	6823      	ldr	r3, [r4, #0]
 8018d52:	079b      	lsls	r3, r3, #30
 8018d54:	f100 8105 	bmi.w	8018f62 <_printf_float+0x462>
 8018d58:	68e0      	ldr	r0, [r4, #12]
 8018d5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018d5c:	4298      	cmp	r0, r3
 8018d5e:	bfb8      	it	lt
 8018d60:	4618      	movlt	r0, r3
 8018d62:	e730      	b.n	8018bc6 <_printf_float+0xc6>
 8018d64:	2301      	movs	r3, #1
 8018d66:	464a      	mov	r2, r9
 8018d68:	4631      	mov	r1, r6
 8018d6a:	4628      	mov	r0, r5
 8018d6c:	47b8      	blx	r7
 8018d6e:	3001      	adds	r0, #1
 8018d70:	f43f af27 	beq.w	8018bc2 <_printf_float+0xc2>
 8018d74:	f108 0801 	add.w	r8, r8, #1
 8018d78:	e7e6      	b.n	8018d48 <_printf_float+0x248>
 8018d7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018d7c:	2b00      	cmp	r3, #0
 8018d7e:	dc39      	bgt.n	8018df4 <_printf_float+0x2f4>
 8018d80:	4a1b      	ldr	r2, [pc, #108]	; (8018df0 <_printf_float+0x2f0>)
 8018d82:	2301      	movs	r3, #1
 8018d84:	4631      	mov	r1, r6
 8018d86:	4628      	mov	r0, r5
 8018d88:	47b8      	blx	r7
 8018d8a:	3001      	adds	r0, #1
 8018d8c:	f43f af19 	beq.w	8018bc2 <_printf_float+0xc2>
 8018d90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8018d94:	4313      	orrs	r3, r2
 8018d96:	d102      	bne.n	8018d9e <_printf_float+0x29e>
 8018d98:	6823      	ldr	r3, [r4, #0]
 8018d9a:	07d9      	lsls	r1, r3, #31
 8018d9c:	d5d8      	bpl.n	8018d50 <_printf_float+0x250>
 8018d9e:	ee18 3a10 	vmov	r3, s16
 8018da2:	4652      	mov	r2, sl
 8018da4:	4631      	mov	r1, r6
 8018da6:	4628      	mov	r0, r5
 8018da8:	47b8      	blx	r7
 8018daa:	3001      	adds	r0, #1
 8018dac:	f43f af09 	beq.w	8018bc2 <_printf_float+0xc2>
 8018db0:	f04f 0900 	mov.w	r9, #0
 8018db4:	f104 0a1a 	add.w	sl, r4, #26
 8018db8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018dba:	425b      	negs	r3, r3
 8018dbc:	454b      	cmp	r3, r9
 8018dbe:	dc01      	bgt.n	8018dc4 <_printf_float+0x2c4>
 8018dc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018dc2:	e792      	b.n	8018cea <_printf_float+0x1ea>
 8018dc4:	2301      	movs	r3, #1
 8018dc6:	4652      	mov	r2, sl
 8018dc8:	4631      	mov	r1, r6
 8018dca:	4628      	mov	r0, r5
 8018dcc:	47b8      	blx	r7
 8018dce:	3001      	adds	r0, #1
 8018dd0:	f43f aef7 	beq.w	8018bc2 <_printf_float+0xc2>
 8018dd4:	f109 0901 	add.w	r9, r9, #1
 8018dd8:	e7ee      	b.n	8018db8 <_printf_float+0x2b8>
 8018dda:	bf00      	nop
 8018ddc:	7fefffff 	.word	0x7fefffff
 8018de0:	0802439c 	.word	0x0802439c
 8018de4:	080243a0 	.word	0x080243a0
 8018de8:	080243a8 	.word	0x080243a8
 8018dec:	080243a4 	.word	0x080243a4
 8018df0:	080243ac 	.word	0x080243ac
 8018df4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018df6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8018df8:	429a      	cmp	r2, r3
 8018dfa:	bfa8      	it	ge
 8018dfc:	461a      	movge	r2, r3
 8018dfe:	2a00      	cmp	r2, #0
 8018e00:	4691      	mov	r9, r2
 8018e02:	dc37      	bgt.n	8018e74 <_printf_float+0x374>
 8018e04:	f04f 0b00 	mov.w	fp, #0
 8018e08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8018e0c:	f104 021a 	add.w	r2, r4, #26
 8018e10:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8018e12:	9305      	str	r3, [sp, #20]
 8018e14:	eba3 0309 	sub.w	r3, r3, r9
 8018e18:	455b      	cmp	r3, fp
 8018e1a:	dc33      	bgt.n	8018e84 <_printf_float+0x384>
 8018e1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8018e20:	429a      	cmp	r2, r3
 8018e22:	db3b      	blt.n	8018e9c <_printf_float+0x39c>
 8018e24:	6823      	ldr	r3, [r4, #0]
 8018e26:	07da      	lsls	r2, r3, #31
 8018e28:	d438      	bmi.n	8018e9c <_printf_float+0x39c>
 8018e2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018e2c:	9a05      	ldr	r2, [sp, #20]
 8018e2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018e30:	1a9a      	subs	r2, r3, r2
 8018e32:	eba3 0901 	sub.w	r9, r3, r1
 8018e36:	4591      	cmp	r9, r2
 8018e38:	bfa8      	it	ge
 8018e3a:	4691      	movge	r9, r2
 8018e3c:	f1b9 0f00 	cmp.w	r9, #0
 8018e40:	dc35      	bgt.n	8018eae <_printf_float+0x3ae>
 8018e42:	f04f 0800 	mov.w	r8, #0
 8018e46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8018e4a:	f104 0a1a 	add.w	sl, r4, #26
 8018e4e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8018e52:	1a9b      	subs	r3, r3, r2
 8018e54:	eba3 0309 	sub.w	r3, r3, r9
 8018e58:	4543      	cmp	r3, r8
 8018e5a:	f77f af79 	ble.w	8018d50 <_printf_float+0x250>
 8018e5e:	2301      	movs	r3, #1
 8018e60:	4652      	mov	r2, sl
 8018e62:	4631      	mov	r1, r6
 8018e64:	4628      	mov	r0, r5
 8018e66:	47b8      	blx	r7
 8018e68:	3001      	adds	r0, #1
 8018e6a:	f43f aeaa 	beq.w	8018bc2 <_printf_float+0xc2>
 8018e6e:	f108 0801 	add.w	r8, r8, #1
 8018e72:	e7ec      	b.n	8018e4e <_printf_float+0x34e>
 8018e74:	4613      	mov	r3, r2
 8018e76:	4631      	mov	r1, r6
 8018e78:	4642      	mov	r2, r8
 8018e7a:	4628      	mov	r0, r5
 8018e7c:	47b8      	blx	r7
 8018e7e:	3001      	adds	r0, #1
 8018e80:	d1c0      	bne.n	8018e04 <_printf_float+0x304>
 8018e82:	e69e      	b.n	8018bc2 <_printf_float+0xc2>
 8018e84:	2301      	movs	r3, #1
 8018e86:	4631      	mov	r1, r6
 8018e88:	4628      	mov	r0, r5
 8018e8a:	9205      	str	r2, [sp, #20]
 8018e8c:	47b8      	blx	r7
 8018e8e:	3001      	adds	r0, #1
 8018e90:	f43f ae97 	beq.w	8018bc2 <_printf_float+0xc2>
 8018e94:	9a05      	ldr	r2, [sp, #20]
 8018e96:	f10b 0b01 	add.w	fp, fp, #1
 8018e9a:	e7b9      	b.n	8018e10 <_printf_float+0x310>
 8018e9c:	ee18 3a10 	vmov	r3, s16
 8018ea0:	4652      	mov	r2, sl
 8018ea2:	4631      	mov	r1, r6
 8018ea4:	4628      	mov	r0, r5
 8018ea6:	47b8      	blx	r7
 8018ea8:	3001      	adds	r0, #1
 8018eaa:	d1be      	bne.n	8018e2a <_printf_float+0x32a>
 8018eac:	e689      	b.n	8018bc2 <_printf_float+0xc2>
 8018eae:	9a05      	ldr	r2, [sp, #20]
 8018eb0:	464b      	mov	r3, r9
 8018eb2:	4442      	add	r2, r8
 8018eb4:	4631      	mov	r1, r6
 8018eb6:	4628      	mov	r0, r5
 8018eb8:	47b8      	blx	r7
 8018eba:	3001      	adds	r0, #1
 8018ebc:	d1c1      	bne.n	8018e42 <_printf_float+0x342>
 8018ebe:	e680      	b.n	8018bc2 <_printf_float+0xc2>
 8018ec0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018ec2:	2a01      	cmp	r2, #1
 8018ec4:	dc01      	bgt.n	8018eca <_printf_float+0x3ca>
 8018ec6:	07db      	lsls	r3, r3, #31
 8018ec8:	d538      	bpl.n	8018f3c <_printf_float+0x43c>
 8018eca:	2301      	movs	r3, #1
 8018ecc:	4642      	mov	r2, r8
 8018ece:	4631      	mov	r1, r6
 8018ed0:	4628      	mov	r0, r5
 8018ed2:	47b8      	blx	r7
 8018ed4:	3001      	adds	r0, #1
 8018ed6:	f43f ae74 	beq.w	8018bc2 <_printf_float+0xc2>
 8018eda:	ee18 3a10 	vmov	r3, s16
 8018ede:	4652      	mov	r2, sl
 8018ee0:	4631      	mov	r1, r6
 8018ee2:	4628      	mov	r0, r5
 8018ee4:	47b8      	blx	r7
 8018ee6:	3001      	adds	r0, #1
 8018ee8:	f43f ae6b 	beq.w	8018bc2 <_printf_float+0xc2>
 8018eec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8018ef0:	2200      	movs	r2, #0
 8018ef2:	2300      	movs	r3, #0
 8018ef4:	f7e7 fe00 	bl	8000af8 <__aeabi_dcmpeq>
 8018ef8:	b9d8      	cbnz	r0, 8018f32 <_printf_float+0x432>
 8018efa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018efc:	f108 0201 	add.w	r2, r8, #1
 8018f00:	3b01      	subs	r3, #1
 8018f02:	4631      	mov	r1, r6
 8018f04:	4628      	mov	r0, r5
 8018f06:	47b8      	blx	r7
 8018f08:	3001      	adds	r0, #1
 8018f0a:	d10e      	bne.n	8018f2a <_printf_float+0x42a>
 8018f0c:	e659      	b.n	8018bc2 <_printf_float+0xc2>
 8018f0e:	2301      	movs	r3, #1
 8018f10:	4652      	mov	r2, sl
 8018f12:	4631      	mov	r1, r6
 8018f14:	4628      	mov	r0, r5
 8018f16:	47b8      	blx	r7
 8018f18:	3001      	adds	r0, #1
 8018f1a:	f43f ae52 	beq.w	8018bc2 <_printf_float+0xc2>
 8018f1e:	f108 0801 	add.w	r8, r8, #1
 8018f22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018f24:	3b01      	subs	r3, #1
 8018f26:	4543      	cmp	r3, r8
 8018f28:	dcf1      	bgt.n	8018f0e <_printf_float+0x40e>
 8018f2a:	464b      	mov	r3, r9
 8018f2c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8018f30:	e6dc      	b.n	8018cec <_printf_float+0x1ec>
 8018f32:	f04f 0800 	mov.w	r8, #0
 8018f36:	f104 0a1a 	add.w	sl, r4, #26
 8018f3a:	e7f2      	b.n	8018f22 <_printf_float+0x422>
 8018f3c:	2301      	movs	r3, #1
 8018f3e:	4642      	mov	r2, r8
 8018f40:	e7df      	b.n	8018f02 <_printf_float+0x402>
 8018f42:	2301      	movs	r3, #1
 8018f44:	464a      	mov	r2, r9
 8018f46:	4631      	mov	r1, r6
 8018f48:	4628      	mov	r0, r5
 8018f4a:	47b8      	blx	r7
 8018f4c:	3001      	adds	r0, #1
 8018f4e:	f43f ae38 	beq.w	8018bc2 <_printf_float+0xc2>
 8018f52:	f108 0801 	add.w	r8, r8, #1
 8018f56:	68e3      	ldr	r3, [r4, #12]
 8018f58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8018f5a:	1a5b      	subs	r3, r3, r1
 8018f5c:	4543      	cmp	r3, r8
 8018f5e:	dcf0      	bgt.n	8018f42 <_printf_float+0x442>
 8018f60:	e6fa      	b.n	8018d58 <_printf_float+0x258>
 8018f62:	f04f 0800 	mov.w	r8, #0
 8018f66:	f104 0919 	add.w	r9, r4, #25
 8018f6a:	e7f4      	b.n	8018f56 <_printf_float+0x456>

08018f6c <_printf_common>:
 8018f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018f70:	4616      	mov	r6, r2
 8018f72:	4699      	mov	r9, r3
 8018f74:	688a      	ldr	r2, [r1, #8]
 8018f76:	690b      	ldr	r3, [r1, #16]
 8018f78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018f7c:	4293      	cmp	r3, r2
 8018f7e:	bfb8      	it	lt
 8018f80:	4613      	movlt	r3, r2
 8018f82:	6033      	str	r3, [r6, #0]
 8018f84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018f88:	4607      	mov	r7, r0
 8018f8a:	460c      	mov	r4, r1
 8018f8c:	b10a      	cbz	r2, 8018f92 <_printf_common+0x26>
 8018f8e:	3301      	adds	r3, #1
 8018f90:	6033      	str	r3, [r6, #0]
 8018f92:	6823      	ldr	r3, [r4, #0]
 8018f94:	0699      	lsls	r1, r3, #26
 8018f96:	bf42      	ittt	mi
 8018f98:	6833      	ldrmi	r3, [r6, #0]
 8018f9a:	3302      	addmi	r3, #2
 8018f9c:	6033      	strmi	r3, [r6, #0]
 8018f9e:	6825      	ldr	r5, [r4, #0]
 8018fa0:	f015 0506 	ands.w	r5, r5, #6
 8018fa4:	d106      	bne.n	8018fb4 <_printf_common+0x48>
 8018fa6:	f104 0a19 	add.w	sl, r4, #25
 8018faa:	68e3      	ldr	r3, [r4, #12]
 8018fac:	6832      	ldr	r2, [r6, #0]
 8018fae:	1a9b      	subs	r3, r3, r2
 8018fb0:	42ab      	cmp	r3, r5
 8018fb2:	dc26      	bgt.n	8019002 <_printf_common+0x96>
 8018fb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018fb8:	1e13      	subs	r3, r2, #0
 8018fba:	6822      	ldr	r2, [r4, #0]
 8018fbc:	bf18      	it	ne
 8018fbe:	2301      	movne	r3, #1
 8018fc0:	0692      	lsls	r2, r2, #26
 8018fc2:	d42b      	bmi.n	801901c <_printf_common+0xb0>
 8018fc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018fc8:	4649      	mov	r1, r9
 8018fca:	4638      	mov	r0, r7
 8018fcc:	47c0      	blx	r8
 8018fce:	3001      	adds	r0, #1
 8018fd0:	d01e      	beq.n	8019010 <_printf_common+0xa4>
 8018fd2:	6823      	ldr	r3, [r4, #0]
 8018fd4:	68e5      	ldr	r5, [r4, #12]
 8018fd6:	6832      	ldr	r2, [r6, #0]
 8018fd8:	f003 0306 	and.w	r3, r3, #6
 8018fdc:	2b04      	cmp	r3, #4
 8018fde:	bf08      	it	eq
 8018fe0:	1aad      	subeq	r5, r5, r2
 8018fe2:	68a3      	ldr	r3, [r4, #8]
 8018fe4:	6922      	ldr	r2, [r4, #16]
 8018fe6:	bf0c      	ite	eq
 8018fe8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018fec:	2500      	movne	r5, #0
 8018fee:	4293      	cmp	r3, r2
 8018ff0:	bfc4      	itt	gt
 8018ff2:	1a9b      	subgt	r3, r3, r2
 8018ff4:	18ed      	addgt	r5, r5, r3
 8018ff6:	2600      	movs	r6, #0
 8018ff8:	341a      	adds	r4, #26
 8018ffa:	42b5      	cmp	r5, r6
 8018ffc:	d11a      	bne.n	8019034 <_printf_common+0xc8>
 8018ffe:	2000      	movs	r0, #0
 8019000:	e008      	b.n	8019014 <_printf_common+0xa8>
 8019002:	2301      	movs	r3, #1
 8019004:	4652      	mov	r2, sl
 8019006:	4649      	mov	r1, r9
 8019008:	4638      	mov	r0, r7
 801900a:	47c0      	blx	r8
 801900c:	3001      	adds	r0, #1
 801900e:	d103      	bne.n	8019018 <_printf_common+0xac>
 8019010:	f04f 30ff 	mov.w	r0, #4294967295
 8019014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019018:	3501      	adds	r5, #1
 801901a:	e7c6      	b.n	8018faa <_printf_common+0x3e>
 801901c:	18e1      	adds	r1, r4, r3
 801901e:	1c5a      	adds	r2, r3, #1
 8019020:	2030      	movs	r0, #48	; 0x30
 8019022:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019026:	4422      	add	r2, r4
 8019028:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801902c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019030:	3302      	adds	r3, #2
 8019032:	e7c7      	b.n	8018fc4 <_printf_common+0x58>
 8019034:	2301      	movs	r3, #1
 8019036:	4622      	mov	r2, r4
 8019038:	4649      	mov	r1, r9
 801903a:	4638      	mov	r0, r7
 801903c:	47c0      	blx	r8
 801903e:	3001      	adds	r0, #1
 8019040:	d0e6      	beq.n	8019010 <_printf_common+0xa4>
 8019042:	3601      	adds	r6, #1
 8019044:	e7d9      	b.n	8018ffa <_printf_common+0x8e>
	...

08019048 <_printf_i>:
 8019048:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801904c:	7e0f      	ldrb	r7, [r1, #24]
 801904e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019050:	2f78      	cmp	r7, #120	; 0x78
 8019052:	4691      	mov	r9, r2
 8019054:	4680      	mov	r8, r0
 8019056:	460c      	mov	r4, r1
 8019058:	469a      	mov	sl, r3
 801905a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801905e:	d807      	bhi.n	8019070 <_printf_i+0x28>
 8019060:	2f62      	cmp	r7, #98	; 0x62
 8019062:	d80a      	bhi.n	801907a <_printf_i+0x32>
 8019064:	2f00      	cmp	r7, #0
 8019066:	f000 80d8 	beq.w	801921a <_printf_i+0x1d2>
 801906a:	2f58      	cmp	r7, #88	; 0x58
 801906c:	f000 80a3 	beq.w	80191b6 <_printf_i+0x16e>
 8019070:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019074:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019078:	e03a      	b.n	80190f0 <_printf_i+0xa8>
 801907a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801907e:	2b15      	cmp	r3, #21
 8019080:	d8f6      	bhi.n	8019070 <_printf_i+0x28>
 8019082:	a101      	add	r1, pc, #4	; (adr r1, 8019088 <_printf_i+0x40>)
 8019084:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019088:	080190e1 	.word	0x080190e1
 801908c:	080190f5 	.word	0x080190f5
 8019090:	08019071 	.word	0x08019071
 8019094:	08019071 	.word	0x08019071
 8019098:	08019071 	.word	0x08019071
 801909c:	08019071 	.word	0x08019071
 80190a0:	080190f5 	.word	0x080190f5
 80190a4:	08019071 	.word	0x08019071
 80190a8:	08019071 	.word	0x08019071
 80190ac:	08019071 	.word	0x08019071
 80190b0:	08019071 	.word	0x08019071
 80190b4:	08019201 	.word	0x08019201
 80190b8:	08019125 	.word	0x08019125
 80190bc:	080191e3 	.word	0x080191e3
 80190c0:	08019071 	.word	0x08019071
 80190c4:	08019071 	.word	0x08019071
 80190c8:	08019223 	.word	0x08019223
 80190cc:	08019071 	.word	0x08019071
 80190d0:	08019125 	.word	0x08019125
 80190d4:	08019071 	.word	0x08019071
 80190d8:	08019071 	.word	0x08019071
 80190dc:	080191eb 	.word	0x080191eb
 80190e0:	682b      	ldr	r3, [r5, #0]
 80190e2:	1d1a      	adds	r2, r3, #4
 80190e4:	681b      	ldr	r3, [r3, #0]
 80190e6:	602a      	str	r2, [r5, #0]
 80190e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80190ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80190f0:	2301      	movs	r3, #1
 80190f2:	e0a3      	b.n	801923c <_printf_i+0x1f4>
 80190f4:	6820      	ldr	r0, [r4, #0]
 80190f6:	6829      	ldr	r1, [r5, #0]
 80190f8:	0606      	lsls	r6, r0, #24
 80190fa:	f101 0304 	add.w	r3, r1, #4
 80190fe:	d50a      	bpl.n	8019116 <_printf_i+0xce>
 8019100:	680e      	ldr	r6, [r1, #0]
 8019102:	602b      	str	r3, [r5, #0]
 8019104:	2e00      	cmp	r6, #0
 8019106:	da03      	bge.n	8019110 <_printf_i+0xc8>
 8019108:	232d      	movs	r3, #45	; 0x2d
 801910a:	4276      	negs	r6, r6
 801910c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019110:	485e      	ldr	r0, [pc, #376]	; (801928c <_printf_i+0x244>)
 8019112:	230a      	movs	r3, #10
 8019114:	e019      	b.n	801914a <_printf_i+0x102>
 8019116:	680e      	ldr	r6, [r1, #0]
 8019118:	602b      	str	r3, [r5, #0]
 801911a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801911e:	bf18      	it	ne
 8019120:	b236      	sxthne	r6, r6
 8019122:	e7ef      	b.n	8019104 <_printf_i+0xbc>
 8019124:	682b      	ldr	r3, [r5, #0]
 8019126:	6820      	ldr	r0, [r4, #0]
 8019128:	1d19      	adds	r1, r3, #4
 801912a:	6029      	str	r1, [r5, #0]
 801912c:	0601      	lsls	r1, r0, #24
 801912e:	d501      	bpl.n	8019134 <_printf_i+0xec>
 8019130:	681e      	ldr	r6, [r3, #0]
 8019132:	e002      	b.n	801913a <_printf_i+0xf2>
 8019134:	0646      	lsls	r6, r0, #25
 8019136:	d5fb      	bpl.n	8019130 <_printf_i+0xe8>
 8019138:	881e      	ldrh	r6, [r3, #0]
 801913a:	4854      	ldr	r0, [pc, #336]	; (801928c <_printf_i+0x244>)
 801913c:	2f6f      	cmp	r7, #111	; 0x6f
 801913e:	bf0c      	ite	eq
 8019140:	2308      	moveq	r3, #8
 8019142:	230a      	movne	r3, #10
 8019144:	2100      	movs	r1, #0
 8019146:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801914a:	6865      	ldr	r5, [r4, #4]
 801914c:	60a5      	str	r5, [r4, #8]
 801914e:	2d00      	cmp	r5, #0
 8019150:	bfa2      	ittt	ge
 8019152:	6821      	ldrge	r1, [r4, #0]
 8019154:	f021 0104 	bicge.w	r1, r1, #4
 8019158:	6021      	strge	r1, [r4, #0]
 801915a:	b90e      	cbnz	r6, 8019160 <_printf_i+0x118>
 801915c:	2d00      	cmp	r5, #0
 801915e:	d04d      	beq.n	80191fc <_printf_i+0x1b4>
 8019160:	4615      	mov	r5, r2
 8019162:	fbb6 f1f3 	udiv	r1, r6, r3
 8019166:	fb03 6711 	mls	r7, r3, r1, r6
 801916a:	5dc7      	ldrb	r7, [r0, r7]
 801916c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8019170:	4637      	mov	r7, r6
 8019172:	42bb      	cmp	r3, r7
 8019174:	460e      	mov	r6, r1
 8019176:	d9f4      	bls.n	8019162 <_printf_i+0x11a>
 8019178:	2b08      	cmp	r3, #8
 801917a:	d10b      	bne.n	8019194 <_printf_i+0x14c>
 801917c:	6823      	ldr	r3, [r4, #0]
 801917e:	07de      	lsls	r6, r3, #31
 8019180:	d508      	bpl.n	8019194 <_printf_i+0x14c>
 8019182:	6923      	ldr	r3, [r4, #16]
 8019184:	6861      	ldr	r1, [r4, #4]
 8019186:	4299      	cmp	r1, r3
 8019188:	bfde      	ittt	le
 801918a:	2330      	movle	r3, #48	; 0x30
 801918c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8019190:	f105 35ff 	addle.w	r5, r5, #4294967295
 8019194:	1b52      	subs	r2, r2, r5
 8019196:	6122      	str	r2, [r4, #16]
 8019198:	f8cd a000 	str.w	sl, [sp]
 801919c:	464b      	mov	r3, r9
 801919e:	aa03      	add	r2, sp, #12
 80191a0:	4621      	mov	r1, r4
 80191a2:	4640      	mov	r0, r8
 80191a4:	f7ff fee2 	bl	8018f6c <_printf_common>
 80191a8:	3001      	adds	r0, #1
 80191aa:	d14c      	bne.n	8019246 <_printf_i+0x1fe>
 80191ac:	f04f 30ff 	mov.w	r0, #4294967295
 80191b0:	b004      	add	sp, #16
 80191b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80191b6:	4835      	ldr	r0, [pc, #212]	; (801928c <_printf_i+0x244>)
 80191b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80191bc:	6829      	ldr	r1, [r5, #0]
 80191be:	6823      	ldr	r3, [r4, #0]
 80191c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80191c4:	6029      	str	r1, [r5, #0]
 80191c6:	061d      	lsls	r5, r3, #24
 80191c8:	d514      	bpl.n	80191f4 <_printf_i+0x1ac>
 80191ca:	07df      	lsls	r7, r3, #31
 80191cc:	bf44      	itt	mi
 80191ce:	f043 0320 	orrmi.w	r3, r3, #32
 80191d2:	6023      	strmi	r3, [r4, #0]
 80191d4:	b91e      	cbnz	r6, 80191de <_printf_i+0x196>
 80191d6:	6823      	ldr	r3, [r4, #0]
 80191d8:	f023 0320 	bic.w	r3, r3, #32
 80191dc:	6023      	str	r3, [r4, #0]
 80191de:	2310      	movs	r3, #16
 80191e0:	e7b0      	b.n	8019144 <_printf_i+0xfc>
 80191e2:	6823      	ldr	r3, [r4, #0]
 80191e4:	f043 0320 	orr.w	r3, r3, #32
 80191e8:	6023      	str	r3, [r4, #0]
 80191ea:	2378      	movs	r3, #120	; 0x78
 80191ec:	4828      	ldr	r0, [pc, #160]	; (8019290 <_printf_i+0x248>)
 80191ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80191f2:	e7e3      	b.n	80191bc <_printf_i+0x174>
 80191f4:	0659      	lsls	r1, r3, #25
 80191f6:	bf48      	it	mi
 80191f8:	b2b6      	uxthmi	r6, r6
 80191fa:	e7e6      	b.n	80191ca <_printf_i+0x182>
 80191fc:	4615      	mov	r5, r2
 80191fe:	e7bb      	b.n	8019178 <_printf_i+0x130>
 8019200:	682b      	ldr	r3, [r5, #0]
 8019202:	6826      	ldr	r6, [r4, #0]
 8019204:	6961      	ldr	r1, [r4, #20]
 8019206:	1d18      	adds	r0, r3, #4
 8019208:	6028      	str	r0, [r5, #0]
 801920a:	0635      	lsls	r5, r6, #24
 801920c:	681b      	ldr	r3, [r3, #0]
 801920e:	d501      	bpl.n	8019214 <_printf_i+0x1cc>
 8019210:	6019      	str	r1, [r3, #0]
 8019212:	e002      	b.n	801921a <_printf_i+0x1d2>
 8019214:	0670      	lsls	r0, r6, #25
 8019216:	d5fb      	bpl.n	8019210 <_printf_i+0x1c8>
 8019218:	8019      	strh	r1, [r3, #0]
 801921a:	2300      	movs	r3, #0
 801921c:	6123      	str	r3, [r4, #16]
 801921e:	4615      	mov	r5, r2
 8019220:	e7ba      	b.n	8019198 <_printf_i+0x150>
 8019222:	682b      	ldr	r3, [r5, #0]
 8019224:	1d1a      	adds	r2, r3, #4
 8019226:	602a      	str	r2, [r5, #0]
 8019228:	681d      	ldr	r5, [r3, #0]
 801922a:	6862      	ldr	r2, [r4, #4]
 801922c:	2100      	movs	r1, #0
 801922e:	4628      	mov	r0, r5
 8019230:	f7e6 ffee 	bl	8000210 <memchr>
 8019234:	b108      	cbz	r0, 801923a <_printf_i+0x1f2>
 8019236:	1b40      	subs	r0, r0, r5
 8019238:	6060      	str	r0, [r4, #4]
 801923a:	6863      	ldr	r3, [r4, #4]
 801923c:	6123      	str	r3, [r4, #16]
 801923e:	2300      	movs	r3, #0
 8019240:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019244:	e7a8      	b.n	8019198 <_printf_i+0x150>
 8019246:	6923      	ldr	r3, [r4, #16]
 8019248:	462a      	mov	r2, r5
 801924a:	4649      	mov	r1, r9
 801924c:	4640      	mov	r0, r8
 801924e:	47d0      	blx	sl
 8019250:	3001      	adds	r0, #1
 8019252:	d0ab      	beq.n	80191ac <_printf_i+0x164>
 8019254:	6823      	ldr	r3, [r4, #0]
 8019256:	079b      	lsls	r3, r3, #30
 8019258:	d413      	bmi.n	8019282 <_printf_i+0x23a>
 801925a:	68e0      	ldr	r0, [r4, #12]
 801925c:	9b03      	ldr	r3, [sp, #12]
 801925e:	4298      	cmp	r0, r3
 8019260:	bfb8      	it	lt
 8019262:	4618      	movlt	r0, r3
 8019264:	e7a4      	b.n	80191b0 <_printf_i+0x168>
 8019266:	2301      	movs	r3, #1
 8019268:	4632      	mov	r2, r6
 801926a:	4649      	mov	r1, r9
 801926c:	4640      	mov	r0, r8
 801926e:	47d0      	blx	sl
 8019270:	3001      	adds	r0, #1
 8019272:	d09b      	beq.n	80191ac <_printf_i+0x164>
 8019274:	3501      	adds	r5, #1
 8019276:	68e3      	ldr	r3, [r4, #12]
 8019278:	9903      	ldr	r1, [sp, #12]
 801927a:	1a5b      	subs	r3, r3, r1
 801927c:	42ab      	cmp	r3, r5
 801927e:	dcf2      	bgt.n	8019266 <_printf_i+0x21e>
 8019280:	e7eb      	b.n	801925a <_printf_i+0x212>
 8019282:	2500      	movs	r5, #0
 8019284:	f104 0619 	add.w	r6, r4, #25
 8019288:	e7f5      	b.n	8019276 <_printf_i+0x22e>
 801928a:	bf00      	nop
 801928c:	080243ae 	.word	0x080243ae
 8019290:	080243bf 	.word	0x080243bf

08019294 <_scanf_float>:
 8019294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019298:	b087      	sub	sp, #28
 801929a:	4617      	mov	r7, r2
 801929c:	9303      	str	r3, [sp, #12]
 801929e:	688b      	ldr	r3, [r1, #8]
 80192a0:	1e5a      	subs	r2, r3, #1
 80192a2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80192a6:	bf83      	ittte	hi
 80192a8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80192ac:	195b      	addhi	r3, r3, r5
 80192ae:	9302      	strhi	r3, [sp, #8]
 80192b0:	2300      	movls	r3, #0
 80192b2:	bf86      	itte	hi
 80192b4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80192b8:	608b      	strhi	r3, [r1, #8]
 80192ba:	9302      	strls	r3, [sp, #8]
 80192bc:	680b      	ldr	r3, [r1, #0]
 80192be:	468b      	mov	fp, r1
 80192c0:	2500      	movs	r5, #0
 80192c2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80192c6:	f84b 3b1c 	str.w	r3, [fp], #28
 80192ca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80192ce:	4680      	mov	r8, r0
 80192d0:	460c      	mov	r4, r1
 80192d2:	465e      	mov	r6, fp
 80192d4:	46aa      	mov	sl, r5
 80192d6:	46a9      	mov	r9, r5
 80192d8:	9501      	str	r5, [sp, #4]
 80192da:	68a2      	ldr	r2, [r4, #8]
 80192dc:	b152      	cbz	r2, 80192f4 <_scanf_float+0x60>
 80192de:	683b      	ldr	r3, [r7, #0]
 80192e0:	781b      	ldrb	r3, [r3, #0]
 80192e2:	2b4e      	cmp	r3, #78	; 0x4e
 80192e4:	d864      	bhi.n	80193b0 <_scanf_float+0x11c>
 80192e6:	2b40      	cmp	r3, #64	; 0x40
 80192e8:	d83c      	bhi.n	8019364 <_scanf_float+0xd0>
 80192ea:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80192ee:	b2c8      	uxtb	r0, r1
 80192f0:	280e      	cmp	r0, #14
 80192f2:	d93a      	bls.n	801936a <_scanf_float+0xd6>
 80192f4:	f1b9 0f00 	cmp.w	r9, #0
 80192f8:	d003      	beq.n	8019302 <_scanf_float+0x6e>
 80192fa:	6823      	ldr	r3, [r4, #0]
 80192fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8019300:	6023      	str	r3, [r4, #0]
 8019302:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019306:	f1ba 0f01 	cmp.w	sl, #1
 801930a:	f200 8113 	bhi.w	8019534 <_scanf_float+0x2a0>
 801930e:	455e      	cmp	r6, fp
 8019310:	f200 8105 	bhi.w	801951e <_scanf_float+0x28a>
 8019314:	2501      	movs	r5, #1
 8019316:	4628      	mov	r0, r5
 8019318:	b007      	add	sp, #28
 801931a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801931e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8019322:	2a0d      	cmp	r2, #13
 8019324:	d8e6      	bhi.n	80192f4 <_scanf_float+0x60>
 8019326:	a101      	add	r1, pc, #4	; (adr r1, 801932c <_scanf_float+0x98>)
 8019328:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801932c:	0801946b 	.word	0x0801946b
 8019330:	080192f5 	.word	0x080192f5
 8019334:	080192f5 	.word	0x080192f5
 8019338:	080192f5 	.word	0x080192f5
 801933c:	080194cb 	.word	0x080194cb
 8019340:	080194a3 	.word	0x080194a3
 8019344:	080192f5 	.word	0x080192f5
 8019348:	080192f5 	.word	0x080192f5
 801934c:	08019479 	.word	0x08019479
 8019350:	080192f5 	.word	0x080192f5
 8019354:	080192f5 	.word	0x080192f5
 8019358:	080192f5 	.word	0x080192f5
 801935c:	080192f5 	.word	0x080192f5
 8019360:	08019431 	.word	0x08019431
 8019364:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8019368:	e7db      	b.n	8019322 <_scanf_float+0x8e>
 801936a:	290e      	cmp	r1, #14
 801936c:	d8c2      	bhi.n	80192f4 <_scanf_float+0x60>
 801936e:	a001      	add	r0, pc, #4	; (adr r0, 8019374 <_scanf_float+0xe0>)
 8019370:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8019374:	08019423 	.word	0x08019423
 8019378:	080192f5 	.word	0x080192f5
 801937c:	08019423 	.word	0x08019423
 8019380:	080194b7 	.word	0x080194b7
 8019384:	080192f5 	.word	0x080192f5
 8019388:	080193d1 	.word	0x080193d1
 801938c:	0801940d 	.word	0x0801940d
 8019390:	0801940d 	.word	0x0801940d
 8019394:	0801940d 	.word	0x0801940d
 8019398:	0801940d 	.word	0x0801940d
 801939c:	0801940d 	.word	0x0801940d
 80193a0:	0801940d 	.word	0x0801940d
 80193a4:	0801940d 	.word	0x0801940d
 80193a8:	0801940d 	.word	0x0801940d
 80193ac:	0801940d 	.word	0x0801940d
 80193b0:	2b6e      	cmp	r3, #110	; 0x6e
 80193b2:	d809      	bhi.n	80193c8 <_scanf_float+0x134>
 80193b4:	2b60      	cmp	r3, #96	; 0x60
 80193b6:	d8b2      	bhi.n	801931e <_scanf_float+0x8a>
 80193b8:	2b54      	cmp	r3, #84	; 0x54
 80193ba:	d077      	beq.n	80194ac <_scanf_float+0x218>
 80193bc:	2b59      	cmp	r3, #89	; 0x59
 80193be:	d199      	bne.n	80192f4 <_scanf_float+0x60>
 80193c0:	2d07      	cmp	r5, #7
 80193c2:	d197      	bne.n	80192f4 <_scanf_float+0x60>
 80193c4:	2508      	movs	r5, #8
 80193c6:	e029      	b.n	801941c <_scanf_float+0x188>
 80193c8:	2b74      	cmp	r3, #116	; 0x74
 80193ca:	d06f      	beq.n	80194ac <_scanf_float+0x218>
 80193cc:	2b79      	cmp	r3, #121	; 0x79
 80193ce:	e7f6      	b.n	80193be <_scanf_float+0x12a>
 80193d0:	6821      	ldr	r1, [r4, #0]
 80193d2:	05c8      	lsls	r0, r1, #23
 80193d4:	d51a      	bpl.n	801940c <_scanf_float+0x178>
 80193d6:	9b02      	ldr	r3, [sp, #8]
 80193d8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80193dc:	6021      	str	r1, [r4, #0]
 80193de:	f109 0901 	add.w	r9, r9, #1
 80193e2:	b11b      	cbz	r3, 80193ec <_scanf_float+0x158>
 80193e4:	3b01      	subs	r3, #1
 80193e6:	3201      	adds	r2, #1
 80193e8:	9302      	str	r3, [sp, #8]
 80193ea:	60a2      	str	r2, [r4, #8]
 80193ec:	68a3      	ldr	r3, [r4, #8]
 80193ee:	3b01      	subs	r3, #1
 80193f0:	60a3      	str	r3, [r4, #8]
 80193f2:	6923      	ldr	r3, [r4, #16]
 80193f4:	3301      	adds	r3, #1
 80193f6:	6123      	str	r3, [r4, #16]
 80193f8:	687b      	ldr	r3, [r7, #4]
 80193fa:	3b01      	subs	r3, #1
 80193fc:	2b00      	cmp	r3, #0
 80193fe:	607b      	str	r3, [r7, #4]
 8019400:	f340 8084 	ble.w	801950c <_scanf_float+0x278>
 8019404:	683b      	ldr	r3, [r7, #0]
 8019406:	3301      	adds	r3, #1
 8019408:	603b      	str	r3, [r7, #0]
 801940a:	e766      	b.n	80192da <_scanf_float+0x46>
 801940c:	eb1a 0f05 	cmn.w	sl, r5
 8019410:	f47f af70 	bne.w	80192f4 <_scanf_float+0x60>
 8019414:	6822      	ldr	r2, [r4, #0]
 8019416:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801941a:	6022      	str	r2, [r4, #0]
 801941c:	f806 3b01 	strb.w	r3, [r6], #1
 8019420:	e7e4      	b.n	80193ec <_scanf_float+0x158>
 8019422:	6822      	ldr	r2, [r4, #0]
 8019424:	0610      	lsls	r0, r2, #24
 8019426:	f57f af65 	bpl.w	80192f4 <_scanf_float+0x60>
 801942a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801942e:	e7f4      	b.n	801941a <_scanf_float+0x186>
 8019430:	f1ba 0f00 	cmp.w	sl, #0
 8019434:	d10e      	bne.n	8019454 <_scanf_float+0x1c0>
 8019436:	f1b9 0f00 	cmp.w	r9, #0
 801943a:	d10e      	bne.n	801945a <_scanf_float+0x1c6>
 801943c:	6822      	ldr	r2, [r4, #0]
 801943e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8019442:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8019446:	d108      	bne.n	801945a <_scanf_float+0x1c6>
 8019448:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801944c:	6022      	str	r2, [r4, #0]
 801944e:	f04f 0a01 	mov.w	sl, #1
 8019452:	e7e3      	b.n	801941c <_scanf_float+0x188>
 8019454:	f1ba 0f02 	cmp.w	sl, #2
 8019458:	d055      	beq.n	8019506 <_scanf_float+0x272>
 801945a:	2d01      	cmp	r5, #1
 801945c:	d002      	beq.n	8019464 <_scanf_float+0x1d0>
 801945e:	2d04      	cmp	r5, #4
 8019460:	f47f af48 	bne.w	80192f4 <_scanf_float+0x60>
 8019464:	3501      	adds	r5, #1
 8019466:	b2ed      	uxtb	r5, r5
 8019468:	e7d8      	b.n	801941c <_scanf_float+0x188>
 801946a:	f1ba 0f01 	cmp.w	sl, #1
 801946e:	f47f af41 	bne.w	80192f4 <_scanf_float+0x60>
 8019472:	f04f 0a02 	mov.w	sl, #2
 8019476:	e7d1      	b.n	801941c <_scanf_float+0x188>
 8019478:	b97d      	cbnz	r5, 801949a <_scanf_float+0x206>
 801947a:	f1b9 0f00 	cmp.w	r9, #0
 801947e:	f47f af3c 	bne.w	80192fa <_scanf_float+0x66>
 8019482:	6822      	ldr	r2, [r4, #0]
 8019484:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8019488:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801948c:	f47f af39 	bne.w	8019302 <_scanf_float+0x6e>
 8019490:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8019494:	6022      	str	r2, [r4, #0]
 8019496:	2501      	movs	r5, #1
 8019498:	e7c0      	b.n	801941c <_scanf_float+0x188>
 801949a:	2d03      	cmp	r5, #3
 801949c:	d0e2      	beq.n	8019464 <_scanf_float+0x1d0>
 801949e:	2d05      	cmp	r5, #5
 80194a0:	e7de      	b.n	8019460 <_scanf_float+0x1cc>
 80194a2:	2d02      	cmp	r5, #2
 80194a4:	f47f af26 	bne.w	80192f4 <_scanf_float+0x60>
 80194a8:	2503      	movs	r5, #3
 80194aa:	e7b7      	b.n	801941c <_scanf_float+0x188>
 80194ac:	2d06      	cmp	r5, #6
 80194ae:	f47f af21 	bne.w	80192f4 <_scanf_float+0x60>
 80194b2:	2507      	movs	r5, #7
 80194b4:	e7b2      	b.n	801941c <_scanf_float+0x188>
 80194b6:	6822      	ldr	r2, [r4, #0]
 80194b8:	0591      	lsls	r1, r2, #22
 80194ba:	f57f af1b 	bpl.w	80192f4 <_scanf_float+0x60>
 80194be:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80194c2:	6022      	str	r2, [r4, #0]
 80194c4:	f8cd 9004 	str.w	r9, [sp, #4]
 80194c8:	e7a8      	b.n	801941c <_scanf_float+0x188>
 80194ca:	6822      	ldr	r2, [r4, #0]
 80194cc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80194d0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80194d4:	d006      	beq.n	80194e4 <_scanf_float+0x250>
 80194d6:	0550      	lsls	r0, r2, #21
 80194d8:	f57f af0c 	bpl.w	80192f4 <_scanf_float+0x60>
 80194dc:	f1b9 0f00 	cmp.w	r9, #0
 80194e0:	f43f af0f 	beq.w	8019302 <_scanf_float+0x6e>
 80194e4:	0591      	lsls	r1, r2, #22
 80194e6:	bf58      	it	pl
 80194e8:	9901      	ldrpl	r1, [sp, #4]
 80194ea:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80194ee:	bf58      	it	pl
 80194f0:	eba9 0101 	subpl.w	r1, r9, r1
 80194f4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80194f8:	bf58      	it	pl
 80194fa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80194fe:	6022      	str	r2, [r4, #0]
 8019500:	f04f 0900 	mov.w	r9, #0
 8019504:	e78a      	b.n	801941c <_scanf_float+0x188>
 8019506:	f04f 0a03 	mov.w	sl, #3
 801950a:	e787      	b.n	801941c <_scanf_float+0x188>
 801950c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019510:	4639      	mov	r1, r7
 8019512:	4640      	mov	r0, r8
 8019514:	4798      	blx	r3
 8019516:	2800      	cmp	r0, #0
 8019518:	f43f aedf 	beq.w	80192da <_scanf_float+0x46>
 801951c:	e6ea      	b.n	80192f4 <_scanf_float+0x60>
 801951e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019522:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8019526:	463a      	mov	r2, r7
 8019528:	4640      	mov	r0, r8
 801952a:	4798      	blx	r3
 801952c:	6923      	ldr	r3, [r4, #16]
 801952e:	3b01      	subs	r3, #1
 8019530:	6123      	str	r3, [r4, #16]
 8019532:	e6ec      	b.n	801930e <_scanf_float+0x7a>
 8019534:	1e6b      	subs	r3, r5, #1
 8019536:	2b06      	cmp	r3, #6
 8019538:	d825      	bhi.n	8019586 <_scanf_float+0x2f2>
 801953a:	2d02      	cmp	r5, #2
 801953c:	d836      	bhi.n	80195ac <_scanf_float+0x318>
 801953e:	455e      	cmp	r6, fp
 8019540:	f67f aee8 	bls.w	8019314 <_scanf_float+0x80>
 8019544:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019548:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801954c:	463a      	mov	r2, r7
 801954e:	4640      	mov	r0, r8
 8019550:	4798      	blx	r3
 8019552:	6923      	ldr	r3, [r4, #16]
 8019554:	3b01      	subs	r3, #1
 8019556:	6123      	str	r3, [r4, #16]
 8019558:	e7f1      	b.n	801953e <_scanf_float+0x2aa>
 801955a:	9802      	ldr	r0, [sp, #8]
 801955c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019560:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8019564:	9002      	str	r0, [sp, #8]
 8019566:	463a      	mov	r2, r7
 8019568:	4640      	mov	r0, r8
 801956a:	4798      	blx	r3
 801956c:	6923      	ldr	r3, [r4, #16]
 801956e:	3b01      	subs	r3, #1
 8019570:	6123      	str	r3, [r4, #16]
 8019572:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019576:	fa5f fa8a 	uxtb.w	sl, sl
 801957a:	f1ba 0f02 	cmp.w	sl, #2
 801957e:	d1ec      	bne.n	801955a <_scanf_float+0x2c6>
 8019580:	3d03      	subs	r5, #3
 8019582:	b2ed      	uxtb	r5, r5
 8019584:	1b76      	subs	r6, r6, r5
 8019586:	6823      	ldr	r3, [r4, #0]
 8019588:	05da      	lsls	r2, r3, #23
 801958a:	d52f      	bpl.n	80195ec <_scanf_float+0x358>
 801958c:	055b      	lsls	r3, r3, #21
 801958e:	d510      	bpl.n	80195b2 <_scanf_float+0x31e>
 8019590:	455e      	cmp	r6, fp
 8019592:	f67f aebf 	bls.w	8019314 <_scanf_float+0x80>
 8019596:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801959a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801959e:	463a      	mov	r2, r7
 80195a0:	4640      	mov	r0, r8
 80195a2:	4798      	blx	r3
 80195a4:	6923      	ldr	r3, [r4, #16]
 80195a6:	3b01      	subs	r3, #1
 80195a8:	6123      	str	r3, [r4, #16]
 80195aa:	e7f1      	b.n	8019590 <_scanf_float+0x2fc>
 80195ac:	46aa      	mov	sl, r5
 80195ae:	9602      	str	r6, [sp, #8]
 80195b0:	e7df      	b.n	8019572 <_scanf_float+0x2de>
 80195b2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80195b6:	6923      	ldr	r3, [r4, #16]
 80195b8:	2965      	cmp	r1, #101	; 0x65
 80195ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80195be:	f106 35ff 	add.w	r5, r6, #4294967295
 80195c2:	6123      	str	r3, [r4, #16]
 80195c4:	d00c      	beq.n	80195e0 <_scanf_float+0x34c>
 80195c6:	2945      	cmp	r1, #69	; 0x45
 80195c8:	d00a      	beq.n	80195e0 <_scanf_float+0x34c>
 80195ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80195ce:	463a      	mov	r2, r7
 80195d0:	4640      	mov	r0, r8
 80195d2:	4798      	blx	r3
 80195d4:	6923      	ldr	r3, [r4, #16]
 80195d6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80195da:	3b01      	subs	r3, #1
 80195dc:	1eb5      	subs	r5, r6, #2
 80195de:	6123      	str	r3, [r4, #16]
 80195e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80195e4:	463a      	mov	r2, r7
 80195e6:	4640      	mov	r0, r8
 80195e8:	4798      	blx	r3
 80195ea:	462e      	mov	r6, r5
 80195ec:	6825      	ldr	r5, [r4, #0]
 80195ee:	f015 0510 	ands.w	r5, r5, #16
 80195f2:	d159      	bne.n	80196a8 <_scanf_float+0x414>
 80195f4:	7035      	strb	r5, [r6, #0]
 80195f6:	6823      	ldr	r3, [r4, #0]
 80195f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80195fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019600:	d11b      	bne.n	801963a <_scanf_float+0x3a6>
 8019602:	9b01      	ldr	r3, [sp, #4]
 8019604:	454b      	cmp	r3, r9
 8019606:	eba3 0209 	sub.w	r2, r3, r9
 801960a:	d123      	bne.n	8019654 <_scanf_float+0x3c0>
 801960c:	2200      	movs	r2, #0
 801960e:	4659      	mov	r1, fp
 8019610:	4640      	mov	r0, r8
 8019612:	f000 fe97 	bl	801a344 <_strtod_r>
 8019616:	6822      	ldr	r2, [r4, #0]
 8019618:	9b03      	ldr	r3, [sp, #12]
 801961a:	f012 0f02 	tst.w	r2, #2
 801961e:	ec57 6b10 	vmov	r6, r7, d0
 8019622:	681b      	ldr	r3, [r3, #0]
 8019624:	d021      	beq.n	801966a <_scanf_float+0x3d6>
 8019626:	9903      	ldr	r1, [sp, #12]
 8019628:	1d1a      	adds	r2, r3, #4
 801962a:	600a      	str	r2, [r1, #0]
 801962c:	681b      	ldr	r3, [r3, #0]
 801962e:	e9c3 6700 	strd	r6, r7, [r3]
 8019632:	68e3      	ldr	r3, [r4, #12]
 8019634:	3301      	adds	r3, #1
 8019636:	60e3      	str	r3, [r4, #12]
 8019638:	e66d      	b.n	8019316 <_scanf_float+0x82>
 801963a:	9b04      	ldr	r3, [sp, #16]
 801963c:	2b00      	cmp	r3, #0
 801963e:	d0e5      	beq.n	801960c <_scanf_float+0x378>
 8019640:	9905      	ldr	r1, [sp, #20]
 8019642:	230a      	movs	r3, #10
 8019644:	462a      	mov	r2, r5
 8019646:	3101      	adds	r1, #1
 8019648:	4640      	mov	r0, r8
 801964a:	f000 ff03 	bl	801a454 <_strtol_r>
 801964e:	9b04      	ldr	r3, [sp, #16]
 8019650:	9e05      	ldr	r6, [sp, #20]
 8019652:	1ac2      	subs	r2, r0, r3
 8019654:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8019658:	429e      	cmp	r6, r3
 801965a:	bf28      	it	cs
 801965c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8019660:	4912      	ldr	r1, [pc, #72]	; (80196ac <_scanf_float+0x418>)
 8019662:	4630      	mov	r0, r6
 8019664:	f000 f82c 	bl	80196c0 <siprintf>
 8019668:	e7d0      	b.n	801960c <_scanf_float+0x378>
 801966a:	9903      	ldr	r1, [sp, #12]
 801966c:	f012 0f04 	tst.w	r2, #4
 8019670:	f103 0204 	add.w	r2, r3, #4
 8019674:	600a      	str	r2, [r1, #0]
 8019676:	d1d9      	bne.n	801962c <_scanf_float+0x398>
 8019678:	f8d3 8000 	ldr.w	r8, [r3]
 801967c:	ee10 2a10 	vmov	r2, s0
 8019680:	ee10 0a10 	vmov	r0, s0
 8019684:	463b      	mov	r3, r7
 8019686:	4639      	mov	r1, r7
 8019688:	f7e7 fa68 	bl	8000b5c <__aeabi_dcmpun>
 801968c:	b128      	cbz	r0, 801969a <_scanf_float+0x406>
 801968e:	4808      	ldr	r0, [pc, #32]	; (80196b0 <_scanf_float+0x41c>)
 8019690:	f000 f810 	bl	80196b4 <nanf>
 8019694:	ed88 0a00 	vstr	s0, [r8]
 8019698:	e7cb      	b.n	8019632 <_scanf_float+0x39e>
 801969a:	4630      	mov	r0, r6
 801969c:	4639      	mov	r1, r7
 801969e:	f7e7 fabb 	bl	8000c18 <__aeabi_d2f>
 80196a2:	f8c8 0000 	str.w	r0, [r8]
 80196a6:	e7c4      	b.n	8019632 <_scanf_float+0x39e>
 80196a8:	2500      	movs	r5, #0
 80196aa:	e634      	b.n	8019316 <_scanf_float+0x82>
 80196ac:	080243d0 	.word	0x080243d0
 80196b0:	080247d8 	.word	0x080247d8

080196b4 <nanf>:
 80196b4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80196bc <nanf+0x8>
 80196b8:	4770      	bx	lr
 80196ba:	bf00      	nop
 80196bc:	7fc00000 	.word	0x7fc00000

080196c0 <siprintf>:
 80196c0:	b40e      	push	{r1, r2, r3}
 80196c2:	b500      	push	{lr}
 80196c4:	b09c      	sub	sp, #112	; 0x70
 80196c6:	ab1d      	add	r3, sp, #116	; 0x74
 80196c8:	9002      	str	r0, [sp, #8]
 80196ca:	9006      	str	r0, [sp, #24]
 80196cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80196d0:	4809      	ldr	r0, [pc, #36]	; (80196f8 <siprintf+0x38>)
 80196d2:	9107      	str	r1, [sp, #28]
 80196d4:	9104      	str	r1, [sp, #16]
 80196d6:	4909      	ldr	r1, [pc, #36]	; (80196fc <siprintf+0x3c>)
 80196d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80196dc:	9105      	str	r1, [sp, #20]
 80196de:	6800      	ldr	r0, [r0, #0]
 80196e0:	9301      	str	r3, [sp, #4]
 80196e2:	a902      	add	r1, sp, #8
 80196e4:	f002 fed4 	bl	801c490 <_svfiprintf_r>
 80196e8:	9b02      	ldr	r3, [sp, #8]
 80196ea:	2200      	movs	r2, #0
 80196ec:	701a      	strb	r2, [r3, #0]
 80196ee:	b01c      	add	sp, #112	; 0x70
 80196f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80196f4:	b003      	add	sp, #12
 80196f6:	4770      	bx	lr
 80196f8:	200000a4 	.word	0x200000a4
 80196fc:	ffff0208 	.word	0xffff0208

08019700 <sulp>:
 8019700:	b570      	push	{r4, r5, r6, lr}
 8019702:	4604      	mov	r4, r0
 8019704:	460d      	mov	r5, r1
 8019706:	ec45 4b10 	vmov	d0, r4, r5
 801970a:	4616      	mov	r6, r2
 801970c:	f002 fc1e 	bl	801bf4c <__ulp>
 8019710:	ec51 0b10 	vmov	r0, r1, d0
 8019714:	b17e      	cbz	r6, 8019736 <sulp+0x36>
 8019716:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801971a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801971e:	2b00      	cmp	r3, #0
 8019720:	dd09      	ble.n	8019736 <sulp+0x36>
 8019722:	051b      	lsls	r3, r3, #20
 8019724:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8019728:	2400      	movs	r4, #0
 801972a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801972e:	4622      	mov	r2, r4
 8019730:	462b      	mov	r3, r5
 8019732:	f7e6 ff79 	bl	8000628 <__aeabi_dmul>
 8019736:	bd70      	pop	{r4, r5, r6, pc}

08019738 <_strtod_l>:
 8019738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801973c:	ed2d 8b02 	vpush	{d8}
 8019740:	b09d      	sub	sp, #116	; 0x74
 8019742:	461f      	mov	r7, r3
 8019744:	2300      	movs	r3, #0
 8019746:	9318      	str	r3, [sp, #96]	; 0x60
 8019748:	4ba2      	ldr	r3, [pc, #648]	; (80199d4 <_strtod_l+0x29c>)
 801974a:	9213      	str	r2, [sp, #76]	; 0x4c
 801974c:	681b      	ldr	r3, [r3, #0]
 801974e:	9305      	str	r3, [sp, #20]
 8019750:	4604      	mov	r4, r0
 8019752:	4618      	mov	r0, r3
 8019754:	4688      	mov	r8, r1
 8019756:	f7e6 fd53 	bl	8000200 <strlen>
 801975a:	f04f 0a00 	mov.w	sl, #0
 801975e:	4605      	mov	r5, r0
 8019760:	f04f 0b00 	mov.w	fp, #0
 8019764:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8019768:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801976a:	781a      	ldrb	r2, [r3, #0]
 801976c:	2a2b      	cmp	r2, #43	; 0x2b
 801976e:	d04e      	beq.n	801980e <_strtod_l+0xd6>
 8019770:	d83b      	bhi.n	80197ea <_strtod_l+0xb2>
 8019772:	2a0d      	cmp	r2, #13
 8019774:	d834      	bhi.n	80197e0 <_strtod_l+0xa8>
 8019776:	2a08      	cmp	r2, #8
 8019778:	d834      	bhi.n	80197e4 <_strtod_l+0xac>
 801977a:	2a00      	cmp	r2, #0
 801977c:	d03e      	beq.n	80197fc <_strtod_l+0xc4>
 801977e:	2300      	movs	r3, #0
 8019780:	930a      	str	r3, [sp, #40]	; 0x28
 8019782:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8019784:	7833      	ldrb	r3, [r6, #0]
 8019786:	2b30      	cmp	r3, #48	; 0x30
 8019788:	f040 80b0 	bne.w	80198ec <_strtod_l+0x1b4>
 801978c:	7873      	ldrb	r3, [r6, #1]
 801978e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8019792:	2b58      	cmp	r3, #88	; 0x58
 8019794:	d168      	bne.n	8019868 <_strtod_l+0x130>
 8019796:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019798:	9301      	str	r3, [sp, #4]
 801979a:	ab18      	add	r3, sp, #96	; 0x60
 801979c:	9702      	str	r7, [sp, #8]
 801979e:	9300      	str	r3, [sp, #0]
 80197a0:	4a8d      	ldr	r2, [pc, #564]	; (80199d8 <_strtod_l+0x2a0>)
 80197a2:	ab19      	add	r3, sp, #100	; 0x64
 80197a4:	a917      	add	r1, sp, #92	; 0x5c
 80197a6:	4620      	mov	r0, r4
 80197a8:	f001 fd38 	bl	801b21c <__gethex>
 80197ac:	f010 0707 	ands.w	r7, r0, #7
 80197b0:	4605      	mov	r5, r0
 80197b2:	d005      	beq.n	80197c0 <_strtod_l+0x88>
 80197b4:	2f06      	cmp	r7, #6
 80197b6:	d12c      	bne.n	8019812 <_strtod_l+0xda>
 80197b8:	3601      	adds	r6, #1
 80197ba:	2300      	movs	r3, #0
 80197bc:	9617      	str	r6, [sp, #92]	; 0x5c
 80197be:	930a      	str	r3, [sp, #40]	; 0x28
 80197c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80197c2:	2b00      	cmp	r3, #0
 80197c4:	f040 8590 	bne.w	801a2e8 <_strtod_l+0xbb0>
 80197c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80197ca:	b1eb      	cbz	r3, 8019808 <_strtod_l+0xd0>
 80197cc:	4652      	mov	r2, sl
 80197ce:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80197d2:	ec43 2b10 	vmov	d0, r2, r3
 80197d6:	b01d      	add	sp, #116	; 0x74
 80197d8:	ecbd 8b02 	vpop	{d8}
 80197dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197e0:	2a20      	cmp	r2, #32
 80197e2:	d1cc      	bne.n	801977e <_strtod_l+0x46>
 80197e4:	3301      	adds	r3, #1
 80197e6:	9317      	str	r3, [sp, #92]	; 0x5c
 80197e8:	e7be      	b.n	8019768 <_strtod_l+0x30>
 80197ea:	2a2d      	cmp	r2, #45	; 0x2d
 80197ec:	d1c7      	bne.n	801977e <_strtod_l+0x46>
 80197ee:	2201      	movs	r2, #1
 80197f0:	920a      	str	r2, [sp, #40]	; 0x28
 80197f2:	1c5a      	adds	r2, r3, #1
 80197f4:	9217      	str	r2, [sp, #92]	; 0x5c
 80197f6:	785b      	ldrb	r3, [r3, #1]
 80197f8:	2b00      	cmp	r3, #0
 80197fa:	d1c2      	bne.n	8019782 <_strtod_l+0x4a>
 80197fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80197fe:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8019802:	2b00      	cmp	r3, #0
 8019804:	f040 856e 	bne.w	801a2e4 <_strtod_l+0xbac>
 8019808:	4652      	mov	r2, sl
 801980a:	465b      	mov	r3, fp
 801980c:	e7e1      	b.n	80197d2 <_strtod_l+0x9a>
 801980e:	2200      	movs	r2, #0
 8019810:	e7ee      	b.n	80197f0 <_strtod_l+0xb8>
 8019812:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8019814:	b13a      	cbz	r2, 8019826 <_strtod_l+0xee>
 8019816:	2135      	movs	r1, #53	; 0x35
 8019818:	a81a      	add	r0, sp, #104	; 0x68
 801981a:	f002 fca2 	bl	801c162 <__copybits>
 801981e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8019820:	4620      	mov	r0, r4
 8019822:	f002 f861 	bl	801b8e8 <_Bfree>
 8019826:	3f01      	subs	r7, #1
 8019828:	2f04      	cmp	r7, #4
 801982a:	d806      	bhi.n	801983a <_strtod_l+0x102>
 801982c:	e8df f007 	tbb	[pc, r7]
 8019830:	1714030a 	.word	0x1714030a
 8019834:	0a          	.byte	0x0a
 8019835:	00          	.byte	0x00
 8019836:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801983a:	0728      	lsls	r0, r5, #28
 801983c:	d5c0      	bpl.n	80197c0 <_strtod_l+0x88>
 801983e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8019842:	e7bd      	b.n	80197c0 <_strtod_l+0x88>
 8019844:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8019848:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801984a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801984e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8019852:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8019856:	e7f0      	b.n	801983a <_strtod_l+0x102>
 8019858:	f8df b180 	ldr.w	fp, [pc, #384]	; 80199dc <_strtod_l+0x2a4>
 801985c:	e7ed      	b.n	801983a <_strtod_l+0x102>
 801985e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8019862:	f04f 3aff 	mov.w	sl, #4294967295
 8019866:	e7e8      	b.n	801983a <_strtod_l+0x102>
 8019868:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801986a:	1c5a      	adds	r2, r3, #1
 801986c:	9217      	str	r2, [sp, #92]	; 0x5c
 801986e:	785b      	ldrb	r3, [r3, #1]
 8019870:	2b30      	cmp	r3, #48	; 0x30
 8019872:	d0f9      	beq.n	8019868 <_strtod_l+0x130>
 8019874:	2b00      	cmp	r3, #0
 8019876:	d0a3      	beq.n	80197c0 <_strtod_l+0x88>
 8019878:	2301      	movs	r3, #1
 801987a:	f04f 0900 	mov.w	r9, #0
 801987e:	9304      	str	r3, [sp, #16]
 8019880:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019882:	9308      	str	r3, [sp, #32]
 8019884:	f8cd 901c 	str.w	r9, [sp, #28]
 8019888:	464f      	mov	r7, r9
 801988a:	220a      	movs	r2, #10
 801988c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801988e:	7806      	ldrb	r6, [r0, #0]
 8019890:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8019894:	b2d9      	uxtb	r1, r3
 8019896:	2909      	cmp	r1, #9
 8019898:	d92a      	bls.n	80198f0 <_strtod_l+0x1b8>
 801989a:	9905      	ldr	r1, [sp, #20]
 801989c:	462a      	mov	r2, r5
 801989e:	f002 ff0f 	bl	801c6c0 <strncmp>
 80198a2:	b398      	cbz	r0, 801990c <_strtod_l+0x1d4>
 80198a4:	2000      	movs	r0, #0
 80198a6:	4632      	mov	r2, r6
 80198a8:	463d      	mov	r5, r7
 80198aa:	9005      	str	r0, [sp, #20]
 80198ac:	4603      	mov	r3, r0
 80198ae:	2a65      	cmp	r2, #101	; 0x65
 80198b0:	d001      	beq.n	80198b6 <_strtod_l+0x17e>
 80198b2:	2a45      	cmp	r2, #69	; 0x45
 80198b4:	d118      	bne.n	80198e8 <_strtod_l+0x1b0>
 80198b6:	b91d      	cbnz	r5, 80198c0 <_strtod_l+0x188>
 80198b8:	9a04      	ldr	r2, [sp, #16]
 80198ba:	4302      	orrs	r2, r0
 80198bc:	d09e      	beq.n	80197fc <_strtod_l+0xc4>
 80198be:	2500      	movs	r5, #0
 80198c0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80198c4:	f108 0201 	add.w	r2, r8, #1
 80198c8:	9217      	str	r2, [sp, #92]	; 0x5c
 80198ca:	f898 2001 	ldrb.w	r2, [r8, #1]
 80198ce:	2a2b      	cmp	r2, #43	; 0x2b
 80198d0:	d075      	beq.n	80199be <_strtod_l+0x286>
 80198d2:	2a2d      	cmp	r2, #45	; 0x2d
 80198d4:	d07b      	beq.n	80199ce <_strtod_l+0x296>
 80198d6:	f04f 0c00 	mov.w	ip, #0
 80198da:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80198de:	2909      	cmp	r1, #9
 80198e0:	f240 8082 	bls.w	80199e8 <_strtod_l+0x2b0>
 80198e4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80198e8:	2600      	movs	r6, #0
 80198ea:	e09d      	b.n	8019a28 <_strtod_l+0x2f0>
 80198ec:	2300      	movs	r3, #0
 80198ee:	e7c4      	b.n	801987a <_strtod_l+0x142>
 80198f0:	2f08      	cmp	r7, #8
 80198f2:	bfd8      	it	le
 80198f4:	9907      	ldrle	r1, [sp, #28]
 80198f6:	f100 0001 	add.w	r0, r0, #1
 80198fa:	bfda      	itte	le
 80198fc:	fb02 3301 	mlale	r3, r2, r1, r3
 8019900:	9307      	strle	r3, [sp, #28]
 8019902:	fb02 3909 	mlagt	r9, r2, r9, r3
 8019906:	3701      	adds	r7, #1
 8019908:	9017      	str	r0, [sp, #92]	; 0x5c
 801990a:	e7bf      	b.n	801988c <_strtod_l+0x154>
 801990c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801990e:	195a      	adds	r2, r3, r5
 8019910:	9217      	str	r2, [sp, #92]	; 0x5c
 8019912:	5d5a      	ldrb	r2, [r3, r5]
 8019914:	2f00      	cmp	r7, #0
 8019916:	d037      	beq.n	8019988 <_strtod_l+0x250>
 8019918:	9005      	str	r0, [sp, #20]
 801991a:	463d      	mov	r5, r7
 801991c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8019920:	2b09      	cmp	r3, #9
 8019922:	d912      	bls.n	801994a <_strtod_l+0x212>
 8019924:	2301      	movs	r3, #1
 8019926:	e7c2      	b.n	80198ae <_strtod_l+0x176>
 8019928:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801992a:	1c5a      	adds	r2, r3, #1
 801992c:	9217      	str	r2, [sp, #92]	; 0x5c
 801992e:	785a      	ldrb	r2, [r3, #1]
 8019930:	3001      	adds	r0, #1
 8019932:	2a30      	cmp	r2, #48	; 0x30
 8019934:	d0f8      	beq.n	8019928 <_strtod_l+0x1f0>
 8019936:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801993a:	2b08      	cmp	r3, #8
 801993c:	f200 84d9 	bhi.w	801a2f2 <_strtod_l+0xbba>
 8019940:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019942:	9005      	str	r0, [sp, #20]
 8019944:	2000      	movs	r0, #0
 8019946:	9308      	str	r3, [sp, #32]
 8019948:	4605      	mov	r5, r0
 801994a:	3a30      	subs	r2, #48	; 0x30
 801994c:	f100 0301 	add.w	r3, r0, #1
 8019950:	d014      	beq.n	801997c <_strtod_l+0x244>
 8019952:	9905      	ldr	r1, [sp, #20]
 8019954:	4419      	add	r1, r3
 8019956:	9105      	str	r1, [sp, #20]
 8019958:	462b      	mov	r3, r5
 801995a:	eb00 0e05 	add.w	lr, r0, r5
 801995e:	210a      	movs	r1, #10
 8019960:	4573      	cmp	r3, lr
 8019962:	d113      	bne.n	801998c <_strtod_l+0x254>
 8019964:	182b      	adds	r3, r5, r0
 8019966:	2b08      	cmp	r3, #8
 8019968:	f105 0501 	add.w	r5, r5, #1
 801996c:	4405      	add	r5, r0
 801996e:	dc1c      	bgt.n	80199aa <_strtod_l+0x272>
 8019970:	9907      	ldr	r1, [sp, #28]
 8019972:	230a      	movs	r3, #10
 8019974:	fb03 2301 	mla	r3, r3, r1, r2
 8019978:	9307      	str	r3, [sp, #28]
 801997a:	2300      	movs	r3, #0
 801997c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801997e:	1c51      	adds	r1, r2, #1
 8019980:	9117      	str	r1, [sp, #92]	; 0x5c
 8019982:	7852      	ldrb	r2, [r2, #1]
 8019984:	4618      	mov	r0, r3
 8019986:	e7c9      	b.n	801991c <_strtod_l+0x1e4>
 8019988:	4638      	mov	r0, r7
 801998a:	e7d2      	b.n	8019932 <_strtod_l+0x1fa>
 801998c:	2b08      	cmp	r3, #8
 801998e:	dc04      	bgt.n	801999a <_strtod_l+0x262>
 8019990:	9e07      	ldr	r6, [sp, #28]
 8019992:	434e      	muls	r6, r1
 8019994:	9607      	str	r6, [sp, #28]
 8019996:	3301      	adds	r3, #1
 8019998:	e7e2      	b.n	8019960 <_strtod_l+0x228>
 801999a:	f103 0c01 	add.w	ip, r3, #1
 801999e:	f1bc 0f10 	cmp.w	ip, #16
 80199a2:	bfd8      	it	le
 80199a4:	fb01 f909 	mulle.w	r9, r1, r9
 80199a8:	e7f5      	b.n	8019996 <_strtod_l+0x25e>
 80199aa:	2d10      	cmp	r5, #16
 80199ac:	bfdc      	itt	le
 80199ae:	230a      	movle	r3, #10
 80199b0:	fb03 2909 	mlale	r9, r3, r9, r2
 80199b4:	e7e1      	b.n	801997a <_strtod_l+0x242>
 80199b6:	2300      	movs	r3, #0
 80199b8:	9305      	str	r3, [sp, #20]
 80199ba:	2301      	movs	r3, #1
 80199bc:	e77c      	b.n	80198b8 <_strtod_l+0x180>
 80199be:	f04f 0c00 	mov.w	ip, #0
 80199c2:	f108 0202 	add.w	r2, r8, #2
 80199c6:	9217      	str	r2, [sp, #92]	; 0x5c
 80199c8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80199cc:	e785      	b.n	80198da <_strtod_l+0x1a2>
 80199ce:	f04f 0c01 	mov.w	ip, #1
 80199d2:	e7f6      	b.n	80199c2 <_strtod_l+0x28a>
 80199d4:	08024620 	.word	0x08024620
 80199d8:	080243d8 	.word	0x080243d8
 80199dc:	7ff00000 	.word	0x7ff00000
 80199e0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80199e2:	1c51      	adds	r1, r2, #1
 80199e4:	9117      	str	r1, [sp, #92]	; 0x5c
 80199e6:	7852      	ldrb	r2, [r2, #1]
 80199e8:	2a30      	cmp	r2, #48	; 0x30
 80199ea:	d0f9      	beq.n	80199e0 <_strtod_l+0x2a8>
 80199ec:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80199f0:	2908      	cmp	r1, #8
 80199f2:	f63f af79 	bhi.w	80198e8 <_strtod_l+0x1b0>
 80199f6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80199fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80199fc:	9206      	str	r2, [sp, #24]
 80199fe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8019a00:	1c51      	adds	r1, r2, #1
 8019a02:	9117      	str	r1, [sp, #92]	; 0x5c
 8019a04:	7852      	ldrb	r2, [r2, #1]
 8019a06:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8019a0a:	2e09      	cmp	r6, #9
 8019a0c:	d937      	bls.n	8019a7e <_strtod_l+0x346>
 8019a0e:	9e06      	ldr	r6, [sp, #24]
 8019a10:	1b89      	subs	r1, r1, r6
 8019a12:	2908      	cmp	r1, #8
 8019a14:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8019a18:	dc02      	bgt.n	8019a20 <_strtod_l+0x2e8>
 8019a1a:	4576      	cmp	r6, lr
 8019a1c:	bfa8      	it	ge
 8019a1e:	4676      	movge	r6, lr
 8019a20:	f1bc 0f00 	cmp.w	ip, #0
 8019a24:	d000      	beq.n	8019a28 <_strtod_l+0x2f0>
 8019a26:	4276      	negs	r6, r6
 8019a28:	2d00      	cmp	r5, #0
 8019a2a:	d14d      	bne.n	8019ac8 <_strtod_l+0x390>
 8019a2c:	9904      	ldr	r1, [sp, #16]
 8019a2e:	4301      	orrs	r1, r0
 8019a30:	f47f aec6 	bne.w	80197c0 <_strtod_l+0x88>
 8019a34:	2b00      	cmp	r3, #0
 8019a36:	f47f aee1 	bne.w	80197fc <_strtod_l+0xc4>
 8019a3a:	2a69      	cmp	r2, #105	; 0x69
 8019a3c:	d027      	beq.n	8019a8e <_strtod_l+0x356>
 8019a3e:	dc24      	bgt.n	8019a8a <_strtod_l+0x352>
 8019a40:	2a49      	cmp	r2, #73	; 0x49
 8019a42:	d024      	beq.n	8019a8e <_strtod_l+0x356>
 8019a44:	2a4e      	cmp	r2, #78	; 0x4e
 8019a46:	f47f aed9 	bne.w	80197fc <_strtod_l+0xc4>
 8019a4a:	499f      	ldr	r1, [pc, #636]	; (8019cc8 <_strtod_l+0x590>)
 8019a4c:	a817      	add	r0, sp, #92	; 0x5c
 8019a4e:	f001 fe3d 	bl	801b6cc <__match>
 8019a52:	2800      	cmp	r0, #0
 8019a54:	f43f aed2 	beq.w	80197fc <_strtod_l+0xc4>
 8019a58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019a5a:	781b      	ldrb	r3, [r3, #0]
 8019a5c:	2b28      	cmp	r3, #40	; 0x28
 8019a5e:	d12d      	bne.n	8019abc <_strtod_l+0x384>
 8019a60:	499a      	ldr	r1, [pc, #616]	; (8019ccc <_strtod_l+0x594>)
 8019a62:	aa1a      	add	r2, sp, #104	; 0x68
 8019a64:	a817      	add	r0, sp, #92	; 0x5c
 8019a66:	f001 fe45 	bl	801b6f4 <__hexnan>
 8019a6a:	2805      	cmp	r0, #5
 8019a6c:	d126      	bne.n	8019abc <_strtod_l+0x384>
 8019a6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019a70:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8019a74:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8019a78:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8019a7c:	e6a0      	b.n	80197c0 <_strtod_l+0x88>
 8019a7e:	210a      	movs	r1, #10
 8019a80:	fb01 2e0e 	mla	lr, r1, lr, r2
 8019a84:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8019a88:	e7b9      	b.n	80199fe <_strtod_l+0x2c6>
 8019a8a:	2a6e      	cmp	r2, #110	; 0x6e
 8019a8c:	e7db      	b.n	8019a46 <_strtod_l+0x30e>
 8019a8e:	4990      	ldr	r1, [pc, #576]	; (8019cd0 <_strtod_l+0x598>)
 8019a90:	a817      	add	r0, sp, #92	; 0x5c
 8019a92:	f001 fe1b 	bl	801b6cc <__match>
 8019a96:	2800      	cmp	r0, #0
 8019a98:	f43f aeb0 	beq.w	80197fc <_strtod_l+0xc4>
 8019a9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019a9e:	498d      	ldr	r1, [pc, #564]	; (8019cd4 <_strtod_l+0x59c>)
 8019aa0:	3b01      	subs	r3, #1
 8019aa2:	a817      	add	r0, sp, #92	; 0x5c
 8019aa4:	9317      	str	r3, [sp, #92]	; 0x5c
 8019aa6:	f001 fe11 	bl	801b6cc <__match>
 8019aaa:	b910      	cbnz	r0, 8019ab2 <_strtod_l+0x37a>
 8019aac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019aae:	3301      	adds	r3, #1
 8019ab0:	9317      	str	r3, [sp, #92]	; 0x5c
 8019ab2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8019ce4 <_strtod_l+0x5ac>
 8019ab6:	f04f 0a00 	mov.w	sl, #0
 8019aba:	e681      	b.n	80197c0 <_strtod_l+0x88>
 8019abc:	4886      	ldr	r0, [pc, #536]	; (8019cd8 <_strtod_l+0x5a0>)
 8019abe:	f002 fde7 	bl	801c690 <nan>
 8019ac2:	ec5b ab10 	vmov	sl, fp, d0
 8019ac6:	e67b      	b.n	80197c0 <_strtod_l+0x88>
 8019ac8:	9b05      	ldr	r3, [sp, #20]
 8019aca:	9807      	ldr	r0, [sp, #28]
 8019acc:	1af3      	subs	r3, r6, r3
 8019ace:	2f00      	cmp	r7, #0
 8019ad0:	bf08      	it	eq
 8019ad2:	462f      	moveq	r7, r5
 8019ad4:	2d10      	cmp	r5, #16
 8019ad6:	9306      	str	r3, [sp, #24]
 8019ad8:	46a8      	mov	r8, r5
 8019ada:	bfa8      	it	ge
 8019adc:	f04f 0810 	movge.w	r8, #16
 8019ae0:	f7e6 fd28 	bl	8000534 <__aeabi_ui2d>
 8019ae4:	2d09      	cmp	r5, #9
 8019ae6:	4682      	mov	sl, r0
 8019ae8:	468b      	mov	fp, r1
 8019aea:	dd13      	ble.n	8019b14 <_strtod_l+0x3dc>
 8019aec:	4b7b      	ldr	r3, [pc, #492]	; (8019cdc <_strtod_l+0x5a4>)
 8019aee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8019af2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8019af6:	f7e6 fd97 	bl	8000628 <__aeabi_dmul>
 8019afa:	4682      	mov	sl, r0
 8019afc:	4648      	mov	r0, r9
 8019afe:	468b      	mov	fp, r1
 8019b00:	f7e6 fd18 	bl	8000534 <__aeabi_ui2d>
 8019b04:	4602      	mov	r2, r0
 8019b06:	460b      	mov	r3, r1
 8019b08:	4650      	mov	r0, sl
 8019b0a:	4659      	mov	r1, fp
 8019b0c:	f7e6 fbd6 	bl	80002bc <__adddf3>
 8019b10:	4682      	mov	sl, r0
 8019b12:	468b      	mov	fp, r1
 8019b14:	2d0f      	cmp	r5, #15
 8019b16:	dc38      	bgt.n	8019b8a <_strtod_l+0x452>
 8019b18:	9b06      	ldr	r3, [sp, #24]
 8019b1a:	2b00      	cmp	r3, #0
 8019b1c:	f43f ae50 	beq.w	80197c0 <_strtod_l+0x88>
 8019b20:	dd24      	ble.n	8019b6c <_strtod_l+0x434>
 8019b22:	2b16      	cmp	r3, #22
 8019b24:	dc0b      	bgt.n	8019b3e <_strtod_l+0x406>
 8019b26:	496d      	ldr	r1, [pc, #436]	; (8019cdc <_strtod_l+0x5a4>)
 8019b28:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8019b2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019b30:	4652      	mov	r2, sl
 8019b32:	465b      	mov	r3, fp
 8019b34:	f7e6 fd78 	bl	8000628 <__aeabi_dmul>
 8019b38:	4682      	mov	sl, r0
 8019b3a:	468b      	mov	fp, r1
 8019b3c:	e640      	b.n	80197c0 <_strtod_l+0x88>
 8019b3e:	9a06      	ldr	r2, [sp, #24]
 8019b40:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8019b44:	4293      	cmp	r3, r2
 8019b46:	db20      	blt.n	8019b8a <_strtod_l+0x452>
 8019b48:	4c64      	ldr	r4, [pc, #400]	; (8019cdc <_strtod_l+0x5a4>)
 8019b4a:	f1c5 050f 	rsb	r5, r5, #15
 8019b4e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8019b52:	4652      	mov	r2, sl
 8019b54:	465b      	mov	r3, fp
 8019b56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019b5a:	f7e6 fd65 	bl	8000628 <__aeabi_dmul>
 8019b5e:	9b06      	ldr	r3, [sp, #24]
 8019b60:	1b5d      	subs	r5, r3, r5
 8019b62:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8019b66:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019b6a:	e7e3      	b.n	8019b34 <_strtod_l+0x3fc>
 8019b6c:	9b06      	ldr	r3, [sp, #24]
 8019b6e:	3316      	adds	r3, #22
 8019b70:	db0b      	blt.n	8019b8a <_strtod_l+0x452>
 8019b72:	9b05      	ldr	r3, [sp, #20]
 8019b74:	1b9e      	subs	r6, r3, r6
 8019b76:	4b59      	ldr	r3, [pc, #356]	; (8019cdc <_strtod_l+0x5a4>)
 8019b78:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8019b7c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8019b80:	4650      	mov	r0, sl
 8019b82:	4659      	mov	r1, fp
 8019b84:	f7e6 fe7a 	bl	800087c <__aeabi_ddiv>
 8019b88:	e7d6      	b.n	8019b38 <_strtod_l+0x400>
 8019b8a:	9b06      	ldr	r3, [sp, #24]
 8019b8c:	eba5 0808 	sub.w	r8, r5, r8
 8019b90:	4498      	add	r8, r3
 8019b92:	f1b8 0f00 	cmp.w	r8, #0
 8019b96:	dd74      	ble.n	8019c82 <_strtod_l+0x54a>
 8019b98:	f018 030f 	ands.w	r3, r8, #15
 8019b9c:	d00a      	beq.n	8019bb4 <_strtod_l+0x47c>
 8019b9e:	494f      	ldr	r1, [pc, #316]	; (8019cdc <_strtod_l+0x5a4>)
 8019ba0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8019ba4:	4652      	mov	r2, sl
 8019ba6:	465b      	mov	r3, fp
 8019ba8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019bac:	f7e6 fd3c 	bl	8000628 <__aeabi_dmul>
 8019bb0:	4682      	mov	sl, r0
 8019bb2:	468b      	mov	fp, r1
 8019bb4:	f038 080f 	bics.w	r8, r8, #15
 8019bb8:	d04f      	beq.n	8019c5a <_strtod_l+0x522>
 8019bba:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8019bbe:	dd22      	ble.n	8019c06 <_strtod_l+0x4ce>
 8019bc0:	2500      	movs	r5, #0
 8019bc2:	462e      	mov	r6, r5
 8019bc4:	9507      	str	r5, [sp, #28]
 8019bc6:	9505      	str	r5, [sp, #20]
 8019bc8:	2322      	movs	r3, #34	; 0x22
 8019bca:	f8df b118 	ldr.w	fp, [pc, #280]	; 8019ce4 <_strtod_l+0x5ac>
 8019bce:	6023      	str	r3, [r4, #0]
 8019bd0:	f04f 0a00 	mov.w	sl, #0
 8019bd4:	9b07      	ldr	r3, [sp, #28]
 8019bd6:	2b00      	cmp	r3, #0
 8019bd8:	f43f adf2 	beq.w	80197c0 <_strtod_l+0x88>
 8019bdc:	9918      	ldr	r1, [sp, #96]	; 0x60
 8019bde:	4620      	mov	r0, r4
 8019be0:	f001 fe82 	bl	801b8e8 <_Bfree>
 8019be4:	9905      	ldr	r1, [sp, #20]
 8019be6:	4620      	mov	r0, r4
 8019be8:	f001 fe7e 	bl	801b8e8 <_Bfree>
 8019bec:	4631      	mov	r1, r6
 8019bee:	4620      	mov	r0, r4
 8019bf0:	f001 fe7a 	bl	801b8e8 <_Bfree>
 8019bf4:	9907      	ldr	r1, [sp, #28]
 8019bf6:	4620      	mov	r0, r4
 8019bf8:	f001 fe76 	bl	801b8e8 <_Bfree>
 8019bfc:	4629      	mov	r1, r5
 8019bfe:	4620      	mov	r0, r4
 8019c00:	f001 fe72 	bl	801b8e8 <_Bfree>
 8019c04:	e5dc      	b.n	80197c0 <_strtod_l+0x88>
 8019c06:	4b36      	ldr	r3, [pc, #216]	; (8019ce0 <_strtod_l+0x5a8>)
 8019c08:	9304      	str	r3, [sp, #16]
 8019c0a:	2300      	movs	r3, #0
 8019c0c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8019c10:	4650      	mov	r0, sl
 8019c12:	4659      	mov	r1, fp
 8019c14:	4699      	mov	r9, r3
 8019c16:	f1b8 0f01 	cmp.w	r8, #1
 8019c1a:	dc21      	bgt.n	8019c60 <_strtod_l+0x528>
 8019c1c:	b10b      	cbz	r3, 8019c22 <_strtod_l+0x4ea>
 8019c1e:	4682      	mov	sl, r0
 8019c20:	468b      	mov	fp, r1
 8019c22:	4b2f      	ldr	r3, [pc, #188]	; (8019ce0 <_strtod_l+0x5a8>)
 8019c24:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8019c28:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8019c2c:	4652      	mov	r2, sl
 8019c2e:	465b      	mov	r3, fp
 8019c30:	e9d9 0100 	ldrd	r0, r1, [r9]
 8019c34:	f7e6 fcf8 	bl	8000628 <__aeabi_dmul>
 8019c38:	4b2a      	ldr	r3, [pc, #168]	; (8019ce4 <_strtod_l+0x5ac>)
 8019c3a:	460a      	mov	r2, r1
 8019c3c:	400b      	ands	r3, r1
 8019c3e:	492a      	ldr	r1, [pc, #168]	; (8019ce8 <_strtod_l+0x5b0>)
 8019c40:	428b      	cmp	r3, r1
 8019c42:	4682      	mov	sl, r0
 8019c44:	d8bc      	bhi.n	8019bc0 <_strtod_l+0x488>
 8019c46:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8019c4a:	428b      	cmp	r3, r1
 8019c4c:	bf86      	itte	hi
 8019c4e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8019cec <_strtod_l+0x5b4>
 8019c52:	f04f 3aff 	movhi.w	sl, #4294967295
 8019c56:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8019c5a:	2300      	movs	r3, #0
 8019c5c:	9304      	str	r3, [sp, #16]
 8019c5e:	e084      	b.n	8019d6a <_strtod_l+0x632>
 8019c60:	f018 0f01 	tst.w	r8, #1
 8019c64:	d005      	beq.n	8019c72 <_strtod_l+0x53a>
 8019c66:	9b04      	ldr	r3, [sp, #16]
 8019c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c6c:	f7e6 fcdc 	bl	8000628 <__aeabi_dmul>
 8019c70:	2301      	movs	r3, #1
 8019c72:	9a04      	ldr	r2, [sp, #16]
 8019c74:	3208      	adds	r2, #8
 8019c76:	f109 0901 	add.w	r9, r9, #1
 8019c7a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8019c7e:	9204      	str	r2, [sp, #16]
 8019c80:	e7c9      	b.n	8019c16 <_strtod_l+0x4de>
 8019c82:	d0ea      	beq.n	8019c5a <_strtod_l+0x522>
 8019c84:	f1c8 0800 	rsb	r8, r8, #0
 8019c88:	f018 020f 	ands.w	r2, r8, #15
 8019c8c:	d00a      	beq.n	8019ca4 <_strtod_l+0x56c>
 8019c8e:	4b13      	ldr	r3, [pc, #76]	; (8019cdc <_strtod_l+0x5a4>)
 8019c90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019c94:	4650      	mov	r0, sl
 8019c96:	4659      	mov	r1, fp
 8019c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c9c:	f7e6 fdee 	bl	800087c <__aeabi_ddiv>
 8019ca0:	4682      	mov	sl, r0
 8019ca2:	468b      	mov	fp, r1
 8019ca4:	ea5f 1828 	movs.w	r8, r8, asr #4
 8019ca8:	d0d7      	beq.n	8019c5a <_strtod_l+0x522>
 8019caa:	f1b8 0f1f 	cmp.w	r8, #31
 8019cae:	dd1f      	ble.n	8019cf0 <_strtod_l+0x5b8>
 8019cb0:	2500      	movs	r5, #0
 8019cb2:	462e      	mov	r6, r5
 8019cb4:	9507      	str	r5, [sp, #28]
 8019cb6:	9505      	str	r5, [sp, #20]
 8019cb8:	2322      	movs	r3, #34	; 0x22
 8019cba:	f04f 0a00 	mov.w	sl, #0
 8019cbe:	f04f 0b00 	mov.w	fp, #0
 8019cc2:	6023      	str	r3, [r4, #0]
 8019cc4:	e786      	b.n	8019bd4 <_strtod_l+0x49c>
 8019cc6:	bf00      	nop
 8019cc8:	080243a9 	.word	0x080243a9
 8019ccc:	080243ec 	.word	0x080243ec
 8019cd0:	080243a1 	.word	0x080243a1
 8019cd4:	0802452c 	.word	0x0802452c
 8019cd8:	080247d8 	.word	0x080247d8
 8019cdc:	080246b8 	.word	0x080246b8
 8019ce0:	08024690 	.word	0x08024690
 8019ce4:	7ff00000 	.word	0x7ff00000
 8019ce8:	7ca00000 	.word	0x7ca00000
 8019cec:	7fefffff 	.word	0x7fefffff
 8019cf0:	f018 0310 	ands.w	r3, r8, #16
 8019cf4:	bf18      	it	ne
 8019cf6:	236a      	movne	r3, #106	; 0x6a
 8019cf8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 801a0a8 <_strtod_l+0x970>
 8019cfc:	9304      	str	r3, [sp, #16]
 8019cfe:	4650      	mov	r0, sl
 8019d00:	4659      	mov	r1, fp
 8019d02:	2300      	movs	r3, #0
 8019d04:	f018 0f01 	tst.w	r8, #1
 8019d08:	d004      	beq.n	8019d14 <_strtod_l+0x5dc>
 8019d0a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8019d0e:	f7e6 fc8b 	bl	8000628 <__aeabi_dmul>
 8019d12:	2301      	movs	r3, #1
 8019d14:	ea5f 0868 	movs.w	r8, r8, asr #1
 8019d18:	f109 0908 	add.w	r9, r9, #8
 8019d1c:	d1f2      	bne.n	8019d04 <_strtod_l+0x5cc>
 8019d1e:	b10b      	cbz	r3, 8019d24 <_strtod_l+0x5ec>
 8019d20:	4682      	mov	sl, r0
 8019d22:	468b      	mov	fp, r1
 8019d24:	9b04      	ldr	r3, [sp, #16]
 8019d26:	b1c3      	cbz	r3, 8019d5a <_strtod_l+0x622>
 8019d28:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8019d2c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8019d30:	2b00      	cmp	r3, #0
 8019d32:	4659      	mov	r1, fp
 8019d34:	dd11      	ble.n	8019d5a <_strtod_l+0x622>
 8019d36:	2b1f      	cmp	r3, #31
 8019d38:	f340 8124 	ble.w	8019f84 <_strtod_l+0x84c>
 8019d3c:	2b34      	cmp	r3, #52	; 0x34
 8019d3e:	bfde      	ittt	le
 8019d40:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8019d44:	f04f 33ff 	movle.w	r3, #4294967295
 8019d48:	fa03 f202 	lslle.w	r2, r3, r2
 8019d4c:	f04f 0a00 	mov.w	sl, #0
 8019d50:	bfcc      	ite	gt
 8019d52:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8019d56:	ea02 0b01 	andle.w	fp, r2, r1
 8019d5a:	2200      	movs	r2, #0
 8019d5c:	2300      	movs	r3, #0
 8019d5e:	4650      	mov	r0, sl
 8019d60:	4659      	mov	r1, fp
 8019d62:	f7e6 fec9 	bl	8000af8 <__aeabi_dcmpeq>
 8019d66:	2800      	cmp	r0, #0
 8019d68:	d1a2      	bne.n	8019cb0 <_strtod_l+0x578>
 8019d6a:	9b07      	ldr	r3, [sp, #28]
 8019d6c:	9300      	str	r3, [sp, #0]
 8019d6e:	9908      	ldr	r1, [sp, #32]
 8019d70:	462b      	mov	r3, r5
 8019d72:	463a      	mov	r2, r7
 8019d74:	4620      	mov	r0, r4
 8019d76:	f001 fe1f 	bl	801b9b8 <__s2b>
 8019d7a:	9007      	str	r0, [sp, #28]
 8019d7c:	2800      	cmp	r0, #0
 8019d7e:	f43f af1f 	beq.w	8019bc0 <_strtod_l+0x488>
 8019d82:	9b05      	ldr	r3, [sp, #20]
 8019d84:	1b9e      	subs	r6, r3, r6
 8019d86:	9b06      	ldr	r3, [sp, #24]
 8019d88:	2b00      	cmp	r3, #0
 8019d8a:	bfb4      	ite	lt
 8019d8c:	4633      	movlt	r3, r6
 8019d8e:	2300      	movge	r3, #0
 8019d90:	930c      	str	r3, [sp, #48]	; 0x30
 8019d92:	9b06      	ldr	r3, [sp, #24]
 8019d94:	2500      	movs	r5, #0
 8019d96:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019d9a:	9312      	str	r3, [sp, #72]	; 0x48
 8019d9c:	462e      	mov	r6, r5
 8019d9e:	9b07      	ldr	r3, [sp, #28]
 8019da0:	4620      	mov	r0, r4
 8019da2:	6859      	ldr	r1, [r3, #4]
 8019da4:	f001 fd60 	bl	801b868 <_Balloc>
 8019da8:	9005      	str	r0, [sp, #20]
 8019daa:	2800      	cmp	r0, #0
 8019dac:	f43f af0c 	beq.w	8019bc8 <_strtod_l+0x490>
 8019db0:	9b07      	ldr	r3, [sp, #28]
 8019db2:	691a      	ldr	r2, [r3, #16]
 8019db4:	3202      	adds	r2, #2
 8019db6:	f103 010c 	add.w	r1, r3, #12
 8019dba:	0092      	lsls	r2, r2, #2
 8019dbc:	300c      	adds	r0, #12
 8019dbe:	f7fe fde9 	bl	8018994 <memcpy>
 8019dc2:	ec4b ab10 	vmov	d0, sl, fp
 8019dc6:	aa1a      	add	r2, sp, #104	; 0x68
 8019dc8:	a919      	add	r1, sp, #100	; 0x64
 8019dca:	4620      	mov	r0, r4
 8019dcc:	f002 f93a 	bl	801c044 <__d2b>
 8019dd0:	ec4b ab18 	vmov	d8, sl, fp
 8019dd4:	9018      	str	r0, [sp, #96]	; 0x60
 8019dd6:	2800      	cmp	r0, #0
 8019dd8:	f43f aef6 	beq.w	8019bc8 <_strtod_l+0x490>
 8019ddc:	2101      	movs	r1, #1
 8019dde:	4620      	mov	r0, r4
 8019de0:	f001 fe84 	bl	801baec <__i2b>
 8019de4:	4606      	mov	r6, r0
 8019de6:	2800      	cmp	r0, #0
 8019de8:	f43f aeee 	beq.w	8019bc8 <_strtod_l+0x490>
 8019dec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019dee:	9904      	ldr	r1, [sp, #16]
 8019df0:	2b00      	cmp	r3, #0
 8019df2:	bfab      	itete	ge
 8019df4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8019df6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8019df8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8019dfa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8019dfe:	bfac      	ite	ge
 8019e00:	eb03 0902 	addge.w	r9, r3, r2
 8019e04:	1ad7      	sublt	r7, r2, r3
 8019e06:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8019e08:	eba3 0801 	sub.w	r8, r3, r1
 8019e0c:	4490      	add	r8, r2
 8019e0e:	4ba1      	ldr	r3, [pc, #644]	; (801a094 <_strtod_l+0x95c>)
 8019e10:	f108 38ff 	add.w	r8, r8, #4294967295
 8019e14:	4598      	cmp	r8, r3
 8019e16:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8019e1a:	f280 80c7 	bge.w	8019fac <_strtod_l+0x874>
 8019e1e:	eba3 0308 	sub.w	r3, r3, r8
 8019e22:	2b1f      	cmp	r3, #31
 8019e24:	eba2 0203 	sub.w	r2, r2, r3
 8019e28:	f04f 0101 	mov.w	r1, #1
 8019e2c:	f300 80b1 	bgt.w	8019f92 <_strtod_l+0x85a>
 8019e30:	fa01 f303 	lsl.w	r3, r1, r3
 8019e34:	930d      	str	r3, [sp, #52]	; 0x34
 8019e36:	2300      	movs	r3, #0
 8019e38:	9308      	str	r3, [sp, #32]
 8019e3a:	eb09 0802 	add.w	r8, r9, r2
 8019e3e:	9b04      	ldr	r3, [sp, #16]
 8019e40:	45c1      	cmp	r9, r8
 8019e42:	4417      	add	r7, r2
 8019e44:	441f      	add	r7, r3
 8019e46:	464b      	mov	r3, r9
 8019e48:	bfa8      	it	ge
 8019e4a:	4643      	movge	r3, r8
 8019e4c:	42bb      	cmp	r3, r7
 8019e4e:	bfa8      	it	ge
 8019e50:	463b      	movge	r3, r7
 8019e52:	2b00      	cmp	r3, #0
 8019e54:	bfc2      	ittt	gt
 8019e56:	eba8 0803 	subgt.w	r8, r8, r3
 8019e5a:	1aff      	subgt	r7, r7, r3
 8019e5c:	eba9 0903 	subgt.w	r9, r9, r3
 8019e60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019e62:	2b00      	cmp	r3, #0
 8019e64:	dd17      	ble.n	8019e96 <_strtod_l+0x75e>
 8019e66:	4631      	mov	r1, r6
 8019e68:	461a      	mov	r2, r3
 8019e6a:	4620      	mov	r0, r4
 8019e6c:	f001 fefe 	bl	801bc6c <__pow5mult>
 8019e70:	4606      	mov	r6, r0
 8019e72:	2800      	cmp	r0, #0
 8019e74:	f43f aea8 	beq.w	8019bc8 <_strtod_l+0x490>
 8019e78:	4601      	mov	r1, r0
 8019e7a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8019e7c:	4620      	mov	r0, r4
 8019e7e:	f001 fe4b 	bl	801bb18 <__multiply>
 8019e82:	900b      	str	r0, [sp, #44]	; 0x2c
 8019e84:	2800      	cmp	r0, #0
 8019e86:	f43f ae9f 	beq.w	8019bc8 <_strtod_l+0x490>
 8019e8a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8019e8c:	4620      	mov	r0, r4
 8019e8e:	f001 fd2b 	bl	801b8e8 <_Bfree>
 8019e92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019e94:	9318      	str	r3, [sp, #96]	; 0x60
 8019e96:	f1b8 0f00 	cmp.w	r8, #0
 8019e9a:	f300 808c 	bgt.w	8019fb6 <_strtod_l+0x87e>
 8019e9e:	9b06      	ldr	r3, [sp, #24]
 8019ea0:	2b00      	cmp	r3, #0
 8019ea2:	dd08      	ble.n	8019eb6 <_strtod_l+0x77e>
 8019ea4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019ea6:	9905      	ldr	r1, [sp, #20]
 8019ea8:	4620      	mov	r0, r4
 8019eaa:	f001 fedf 	bl	801bc6c <__pow5mult>
 8019eae:	9005      	str	r0, [sp, #20]
 8019eb0:	2800      	cmp	r0, #0
 8019eb2:	f43f ae89 	beq.w	8019bc8 <_strtod_l+0x490>
 8019eb6:	2f00      	cmp	r7, #0
 8019eb8:	dd08      	ble.n	8019ecc <_strtod_l+0x794>
 8019eba:	9905      	ldr	r1, [sp, #20]
 8019ebc:	463a      	mov	r2, r7
 8019ebe:	4620      	mov	r0, r4
 8019ec0:	f001 ff2e 	bl	801bd20 <__lshift>
 8019ec4:	9005      	str	r0, [sp, #20]
 8019ec6:	2800      	cmp	r0, #0
 8019ec8:	f43f ae7e 	beq.w	8019bc8 <_strtod_l+0x490>
 8019ecc:	f1b9 0f00 	cmp.w	r9, #0
 8019ed0:	dd08      	ble.n	8019ee4 <_strtod_l+0x7ac>
 8019ed2:	4631      	mov	r1, r6
 8019ed4:	464a      	mov	r2, r9
 8019ed6:	4620      	mov	r0, r4
 8019ed8:	f001 ff22 	bl	801bd20 <__lshift>
 8019edc:	4606      	mov	r6, r0
 8019ede:	2800      	cmp	r0, #0
 8019ee0:	f43f ae72 	beq.w	8019bc8 <_strtod_l+0x490>
 8019ee4:	9a05      	ldr	r2, [sp, #20]
 8019ee6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8019ee8:	4620      	mov	r0, r4
 8019eea:	f001 ffa5 	bl	801be38 <__mdiff>
 8019eee:	4605      	mov	r5, r0
 8019ef0:	2800      	cmp	r0, #0
 8019ef2:	f43f ae69 	beq.w	8019bc8 <_strtod_l+0x490>
 8019ef6:	68c3      	ldr	r3, [r0, #12]
 8019ef8:	930b      	str	r3, [sp, #44]	; 0x2c
 8019efa:	2300      	movs	r3, #0
 8019efc:	60c3      	str	r3, [r0, #12]
 8019efe:	4631      	mov	r1, r6
 8019f00:	f001 ff7e 	bl	801be00 <__mcmp>
 8019f04:	2800      	cmp	r0, #0
 8019f06:	da60      	bge.n	8019fca <_strtod_l+0x892>
 8019f08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019f0a:	ea53 030a 	orrs.w	r3, r3, sl
 8019f0e:	f040 8082 	bne.w	801a016 <_strtod_l+0x8de>
 8019f12:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8019f16:	2b00      	cmp	r3, #0
 8019f18:	d17d      	bne.n	801a016 <_strtod_l+0x8de>
 8019f1a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8019f1e:	0d1b      	lsrs	r3, r3, #20
 8019f20:	051b      	lsls	r3, r3, #20
 8019f22:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8019f26:	d976      	bls.n	801a016 <_strtod_l+0x8de>
 8019f28:	696b      	ldr	r3, [r5, #20]
 8019f2a:	b913      	cbnz	r3, 8019f32 <_strtod_l+0x7fa>
 8019f2c:	692b      	ldr	r3, [r5, #16]
 8019f2e:	2b01      	cmp	r3, #1
 8019f30:	dd71      	ble.n	801a016 <_strtod_l+0x8de>
 8019f32:	4629      	mov	r1, r5
 8019f34:	2201      	movs	r2, #1
 8019f36:	4620      	mov	r0, r4
 8019f38:	f001 fef2 	bl	801bd20 <__lshift>
 8019f3c:	4631      	mov	r1, r6
 8019f3e:	4605      	mov	r5, r0
 8019f40:	f001 ff5e 	bl	801be00 <__mcmp>
 8019f44:	2800      	cmp	r0, #0
 8019f46:	dd66      	ble.n	801a016 <_strtod_l+0x8de>
 8019f48:	9904      	ldr	r1, [sp, #16]
 8019f4a:	4a53      	ldr	r2, [pc, #332]	; (801a098 <_strtod_l+0x960>)
 8019f4c:	465b      	mov	r3, fp
 8019f4e:	2900      	cmp	r1, #0
 8019f50:	f000 8081 	beq.w	801a056 <_strtod_l+0x91e>
 8019f54:	ea02 010b 	and.w	r1, r2, fp
 8019f58:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8019f5c:	dc7b      	bgt.n	801a056 <_strtod_l+0x91e>
 8019f5e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8019f62:	f77f aea9 	ble.w	8019cb8 <_strtod_l+0x580>
 8019f66:	4b4d      	ldr	r3, [pc, #308]	; (801a09c <_strtod_l+0x964>)
 8019f68:	4650      	mov	r0, sl
 8019f6a:	4659      	mov	r1, fp
 8019f6c:	2200      	movs	r2, #0
 8019f6e:	f7e6 fb5b 	bl	8000628 <__aeabi_dmul>
 8019f72:	460b      	mov	r3, r1
 8019f74:	4303      	orrs	r3, r0
 8019f76:	bf08      	it	eq
 8019f78:	2322      	moveq	r3, #34	; 0x22
 8019f7a:	4682      	mov	sl, r0
 8019f7c:	468b      	mov	fp, r1
 8019f7e:	bf08      	it	eq
 8019f80:	6023      	streq	r3, [r4, #0]
 8019f82:	e62b      	b.n	8019bdc <_strtod_l+0x4a4>
 8019f84:	f04f 32ff 	mov.w	r2, #4294967295
 8019f88:	fa02 f303 	lsl.w	r3, r2, r3
 8019f8c:	ea03 0a0a 	and.w	sl, r3, sl
 8019f90:	e6e3      	b.n	8019d5a <_strtod_l+0x622>
 8019f92:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8019f96:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8019f9a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8019f9e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8019fa2:	fa01 f308 	lsl.w	r3, r1, r8
 8019fa6:	9308      	str	r3, [sp, #32]
 8019fa8:	910d      	str	r1, [sp, #52]	; 0x34
 8019faa:	e746      	b.n	8019e3a <_strtod_l+0x702>
 8019fac:	2300      	movs	r3, #0
 8019fae:	9308      	str	r3, [sp, #32]
 8019fb0:	2301      	movs	r3, #1
 8019fb2:	930d      	str	r3, [sp, #52]	; 0x34
 8019fb4:	e741      	b.n	8019e3a <_strtod_l+0x702>
 8019fb6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8019fb8:	4642      	mov	r2, r8
 8019fba:	4620      	mov	r0, r4
 8019fbc:	f001 feb0 	bl	801bd20 <__lshift>
 8019fc0:	9018      	str	r0, [sp, #96]	; 0x60
 8019fc2:	2800      	cmp	r0, #0
 8019fc4:	f47f af6b 	bne.w	8019e9e <_strtod_l+0x766>
 8019fc8:	e5fe      	b.n	8019bc8 <_strtod_l+0x490>
 8019fca:	465f      	mov	r7, fp
 8019fcc:	d16e      	bne.n	801a0ac <_strtod_l+0x974>
 8019fce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019fd0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8019fd4:	b342      	cbz	r2, 801a028 <_strtod_l+0x8f0>
 8019fd6:	4a32      	ldr	r2, [pc, #200]	; (801a0a0 <_strtod_l+0x968>)
 8019fd8:	4293      	cmp	r3, r2
 8019fda:	d128      	bne.n	801a02e <_strtod_l+0x8f6>
 8019fdc:	9b04      	ldr	r3, [sp, #16]
 8019fde:	4651      	mov	r1, sl
 8019fe0:	b1eb      	cbz	r3, 801a01e <_strtod_l+0x8e6>
 8019fe2:	4b2d      	ldr	r3, [pc, #180]	; (801a098 <_strtod_l+0x960>)
 8019fe4:	403b      	ands	r3, r7
 8019fe6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8019fea:	f04f 32ff 	mov.w	r2, #4294967295
 8019fee:	d819      	bhi.n	801a024 <_strtod_l+0x8ec>
 8019ff0:	0d1b      	lsrs	r3, r3, #20
 8019ff2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8019ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8019ffa:	4299      	cmp	r1, r3
 8019ffc:	d117      	bne.n	801a02e <_strtod_l+0x8f6>
 8019ffe:	4b29      	ldr	r3, [pc, #164]	; (801a0a4 <_strtod_l+0x96c>)
 801a000:	429f      	cmp	r7, r3
 801a002:	d102      	bne.n	801a00a <_strtod_l+0x8d2>
 801a004:	3101      	adds	r1, #1
 801a006:	f43f addf 	beq.w	8019bc8 <_strtod_l+0x490>
 801a00a:	4b23      	ldr	r3, [pc, #140]	; (801a098 <_strtod_l+0x960>)
 801a00c:	403b      	ands	r3, r7
 801a00e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801a012:	f04f 0a00 	mov.w	sl, #0
 801a016:	9b04      	ldr	r3, [sp, #16]
 801a018:	2b00      	cmp	r3, #0
 801a01a:	d1a4      	bne.n	8019f66 <_strtod_l+0x82e>
 801a01c:	e5de      	b.n	8019bdc <_strtod_l+0x4a4>
 801a01e:	f04f 33ff 	mov.w	r3, #4294967295
 801a022:	e7ea      	b.n	8019ffa <_strtod_l+0x8c2>
 801a024:	4613      	mov	r3, r2
 801a026:	e7e8      	b.n	8019ffa <_strtod_l+0x8c2>
 801a028:	ea53 030a 	orrs.w	r3, r3, sl
 801a02c:	d08c      	beq.n	8019f48 <_strtod_l+0x810>
 801a02e:	9b08      	ldr	r3, [sp, #32]
 801a030:	b1db      	cbz	r3, 801a06a <_strtod_l+0x932>
 801a032:	423b      	tst	r3, r7
 801a034:	d0ef      	beq.n	801a016 <_strtod_l+0x8de>
 801a036:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a038:	9a04      	ldr	r2, [sp, #16]
 801a03a:	4650      	mov	r0, sl
 801a03c:	4659      	mov	r1, fp
 801a03e:	b1c3      	cbz	r3, 801a072 <_strtod_l+0x93a>
 801a040:	f7ff fb5e 	bl	8019700 <sulp>
 801a044:	4602      	mov	r2, r0
 801a046:	460b      	mov	r3, r1
 801a048:	ec51 0b18 	vmov	r0, r1, d8
 801a04c:	f7e6 f936 	bl	80002bc <__adddf3>
 801a050:	4682      	mov	sl, r0
 801a052:	468b      	mov	fp, r1
 801a054:	e7df      	b.n	801a016 <_strtod_l+0x8de>
 801a056:	4013      	ands	r3, r2
 801a058:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801a05c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801a060:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801a064:	f04f 3aff 	mov.w	sl, #4294967295
 801a068:	e7d5      	b.n	801a016 <_strtod_l+0x8de>
 801a06a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a06c:	ea13 0f0a 	tst.w	r3, sl
 801a070:	e7e0      	b.n	801a034 <_strtod_l+0x8fc>
 801a072:	f7ff fb45 	bl	8019700 <sulp>
 801a076:	4602      	mov	r2, r0
 801a078:	460b      	mov	r3, r1
 801a07a:	ec51 0b18 	vmov	r0, r1, d8
 801a07e:	f7e6 f91b 	bl	80002b8 <__aeabi_dsub>
 801a082:	2200      	movs	r2, #0
 801a084:	2300      	movs	r3, #0
 801a086:	4682      	mov	sl, r0
 801a088:	468b      	mov	fp, r1
 801a08a:	f7e6 fd35 	bl	8000af8 <__aeabi_dcmpeq>
 801a08e:	2800      	cmp	r0, #0
 801a090:	d0c1      	beq.n	801a016 <_strtod_l+0x8de>
 801a092:	e611      	b.n	8019cb8 <_strtod_l+0x580>
 801a094:	fffffc02 	.word	0xfffffc02
 801a098:	7ff00000 	.word	0x7ff00000
 801a09c:	39500000 	.word	0x39500000
 801a0a0:	000fffff 	.word	0x000fffff
 801a0a4:	7fefffff 	.word	0x7fefffff
 801a0a8:	08024400 	.word	0x08024400
 801a0ac:	4631      	mov	r1, r6
 801a0ae:	4628      	mov	r0, r5
 801a0b0:	f002 f824 	bl	801c0fc <__ratio>
 801a0b4:	ec59 8b10 	vmov	r8, r9, d0
 801a0b8:	ee10 0a10 	vmov	r0, s0
 801a0bc:	2200      	movs	r2, #0
 801a0be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801a0c2:	4649      	mov	r1, r9
 801a0c4:	f7e6 fd2c 	bl	8000b20 <__aeabi_dcmple>
 801a0c8:	2800      	cmp	r0, #0
 801a0ca:	d07a      	beq.n	801a1c2 <_strtod_l+0xa8a>
 801a0cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a0ce:	2b00      	cmp	r3, #0
 801a0d0:	d04a      	beq.n	801a168 <_strtod_l+0xa30>
 801a0d2:	4b95      	ldr	r3, [pc, #596]	; (801a328 <_strtod_l+0xbf0>)
 801a0d4:	2200      	movs	r2, #0
 801a0d6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a0da:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801a328 <_strtod_l+0xbf0>
 801a0de:	f04f 0800 	mov.w	r8, #0
 801a0e2:	4b92      	ldr	r3, [pc, #584]	; (801a32c <_strtod_l+0xbf4>)
 801a0e4:	403b      	ands	r3, r7
 801a0e6:	930d      	str	r3, [sp, #52]	; 0x34
 801a0e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a0ea:	4b91      	ldr	r3, [pc, #580]	; (801a330 <_strtod_l+0xbf8>)
 801a0ec:	429a      	cmp	r2, r3
 801a0ee:	f040 80b0 	bne.w	801a252 <_strtod_l+0xb1a>
 801a0f2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801a0f6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801a0fa:	ec4b ab10 	vmov	d0, sl, fp
 801a0fe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801a102:	f001 ff23 	bl	801bf4c <__ulp>
 801a106:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801a10a:	ec53 2b10 	vmov	r2, r3, d0
 801a10e:	f7e6 fa8b 	bl	8000628 <__aeabi_dmul>
 801a112:	4652      	mov	r2, sl
 801a114:	465b      	mov	r3, fp
 801a116:	f7e6 f8d1 	bl	80002bc <__adddf3>
 801a11a:	460b      	mov	r3, r1
 801a11c:	4983      	ldr	r1, [pc, #524]	; (801a32c <_strtod_l+0xbf4>)
 801a11e:	4a85      	ldr	r2, [pc, #532]	; (801a334 <_strtod_l+0xbfc>)
 801a120:	4019      	ands	r1, r3
 801a122:	4291      	cmp	r1, r2
 801a124:	4682      	mov	sl, r0
 801a126:	d960      	bls.n	801a1ea <_strtod_l+0xab2>
 801a128:	ee18 3a90 	vmov	r3, s17
 801a12c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801a130:	4293      	cmp	r3, r2
 801a132:	d104      	bne.n	801a13e <_strtod_l+0xa06>
 801a134:	ee18 3a10 	vmov	r3, s16
 801a138:	3301      	adds	r3, #1
 801a13a:	f43f ad45 	beq.w	8019bc8 <_strtod_l+0x490>
 801a13e:	f8df b200 	ldr.w	fp, [pc, #512]	; 801a340 <_strtod_l+0xc08>
 801a142:	f04f 3aff 	mov.w	sl, #4294967295
 801a146:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a148:	4620      	mov	r0, r4
 801a14a:	f001 fbcd 	bl	801b8e8 <_Bfree>
 801a14e:	9905      	ldr	r1, [sp, #20]
 801a150:	4620      	mov	r0, r4
 801a152:	f001 fbc9 	bl	801b8e8 <_Bfree>
 801a156:	4631      	mov	r1, r6
 801a158:	4620      	mov	r0, r4
 801a15a:	f001 fbc5 	bl	801b8e8 <_Bfree>
 801a15e:	4629      	mov	r1, r5
 801a160:	4620      	mov	r0, r4
 801a162:	f001 fbc1 	bl	801b8e8 <_Bfree>
 801a166:	e61a      	b.n	8019d9e <_strtod_l+0x666>
 801a168:	f1ba 0f00 	cmp.w	sl, #0
 801a16c:	d11b      	bne.n	801a1a6 <_strtod_l+0xa6e>
 801a16e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a172:	b9f3      	cbnz	r3, 801a1b2 <_strtod_l+0xa7a>
 801a174:	4b6c      	ldr	r3, [pc, #432]	; (801a328 <_strtod_l+0xbf0>)
 801a176:	2200      	movs	r2, #0
 801a178:	4640      	mov	r0, r8
 801a17a:	4649      	mov	r1, r9
 801a17c:	f7e6 fcc6 	bl	8000b0c <__aeabi_dcmplt>
 801a180:	b9d0      	cbnz	r0, 801a1b8 <_strtod_l+0xa80>
 801a182:	4640      	mov	r0, r8
 801a184:	4649      	mov	r1, r9
 801a186:	4b6c      	ldr	r3, [pc, #432]	; (801a338 <_strtod_l+0xc00>)
 801a188:	2200      	movs	r2, #0
 801a18a:	f7e6 fa4d 	bl	8000628 <__aeabi_dmul>
 801a18e:	4680      	mov	r8, r0
 801a190:	4689      	mov	r9, r1
 801a192:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801a196:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801a19a:	9315      	str	r3, [sp, #84]	; 0x54
 801a19c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801a1a0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a1a4:	e79d      	b.n	801a0e2 <_strtod_l+0x9aa>
 801a1a6:	f1ba 0f01 	cmp.w	sl, #1
 801a1aa:	d102      	bne.n	801a1b2 <_strtod_l+0xa7a>
 801a1ac:	2f00      	cmp	r7, #0
 801a1ae:	f43f ad83 	beq.w	8019cb8 <_strtod_l+0x580>
 801a1b2:	4b62      	ldr	r3, [pc, #392]	; (801a33c <_strtod_l+0xc04>)
 801a1b4:	2200      	movs	r2, #0
 801a1b6:	e78e      	b.n	801a0d6 <_strtod_l+0x99e>
 801a1b8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 801a338 <_strtod_l+0xc00>
 801a1bc:	f04f 0800 	mov.w	r8, #0
 801a1c0:	e7e7      	b.n	801a192 <_strtod_l+0xa5a>
 801a1c2:	4b5d      	ldr	r3, [pc, #372]	; (801a338 <_strtod_l+0xc00>)
 801a1c4:	4640      	mov	r0, r8
 801a1c6:	4649      	mov	r1, r9
 801a1c8:	2200      	movs	r2, #0
 801a1ca:	f7e6 fa2d 	bl	8000628 <__aeabi_dmul>
 801a1ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a1d0:	4680      	mov	r8, r0
 801a1d2:	4689      	mov	r9, r1
 801a1d4:	b933      	cbnz	r3, 801a1e4 <_strtod_l+0xaac>
 801a1d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a1da:	900e      	str	r0, [sp, #56]	; 0x38
 801a1dc:	930f      	str	r3, [sp, #60]	; 0x3c
 801a1de:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801a1e2:	e7dd      	b.n	801a1a0 <_strtod_l+0xa68>
 801a1e4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 801a1e8:	e7f9      	b.n	801a1de <_strtod_l+0xaa6>
 801a1ea:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801a1ee:	9b04      	ldr	r3, [sp, #16]
 801a1f0:	2b00      	cmp	r3, #0
 801a1f2:	d1a8      	bne.n	801a146 <_strtod_l+0xa0e>
 801a1f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801a1f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a1fa:	0d1b      	lsrs	r3, r3, #20
 801a1fc:	051b      	lsls	r3, r3, #20
 801a1fe:	429a      	cmp	r2, r3
 801a200:	d1a1      	bne.n	801a146 <_strtod_l+0xa0e>
 801a202:	4640      	mov	r0, r8
 801a204:	4649      	mov	r1, r9
 801a206:	f7e6 fdbf 	bl	8000d88 <__aeabi_d2lz>
 801a20a:	f7e6 f9df 	bl	80005cc <__aeabi_l2d>
 801a20e:	4602      	mov	r2, r0
 801a210:	460b      	mov	r3, r1
 801a212:	4640      	mov	r0, r8
 801a214:	4649      	mov	r1, r9
 801a216:	f7e6 f84f 	bl	80002b8 <__aeabi_dsub>
 801a21a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a21c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a220:	ea43 030a 	orr.w	r3, r3, sl
 801a224:	4313      	orrs	r3, r2
 801a226:	4680      	mov	r8, r0
 801a228:	4689      	mov	r9, r1
 801a22a:	d055      	beq.n	801a2d8 <_strtod_l+0xba0>
 801a22c:	a336      	add	r3, pc, #216	; (adr r3, 801a308 <_strtod_l+0xbd0>)
 801a22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a232:	f7e6 fc6b 	bl	8000b0c <__aeabi_dcmplt>
 801a236:	2800      	cmp	r0, #0
 801a238:	f47f acd0 	bne.w	8019bdc <_strtod_l+0x4a4>
 801a23c:	a334      	add	r3, pc, #208	; (adr r3, 801a310 <_strtod_l+0xbd8>)
 801a23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a242:	4640      	mov	r0, r8
 801a244:	4649      	mov	r1, r9
 801a246:	f7e6 fc7f 	bl	8000b48 <__aeabi_dcmpgt>
 801a24a:	2800      	cmp	r0, #0
 801a24c:	f43f af7b 	beq.w	801a146 <_strtod_l+0xa0e>
 801a250:	e4c4      	b.n	8019bdc <_strtod_l+0x4a4>
 801a252:	9b04      	ldr	r3, [sp, #16]
 801a254:	b333      	cbz	r3, 801a2a4 <_strtod_l+0xb6c>
 801a256:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a258:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801a25c:	d822      	bhi.n	801a2a4 <_strtod_l+0xb6c>
 801a25e:	a32e      	add	r3, pc, #184	; (adr r3, 801a318 <_strtod_l+0xbe0>)
 801a260:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a264:	4640      	mov	r0, r8
 801a266:	4649      	mov	r1, r9
 801a268:	f7e6 fc5a 	bl	8000b20 <__aeabi_dcmple>
 801a26c:	b1a0      	cbz	r0, 801a298 <_strtod_l+0xb60>
 801a26e:	4649      	mov	r1, r9
 801a270:	4640      	mov	r0, r8
 801a272:	f7e6 fcb1 	bl	8000bd8 <__aeabi_d2uiz>
 801a276:	2801      	cmp	r0, #1
 801a278:	bf38      	it	cc
 801a27a:	2001      	movcc	r0, #1
 801a27c:	f7e6 f95a 	bl	8000534 <__aeabi_ui2d>
 801a280:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a282:	4680      	mov	r8, r0
 801a284:	4689      	mov	r9, r1
 801a286:	bb23      	cbnz	r3, 801a2d2 <_strtod_l+0xb9a>
 801a288:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a28c:	9010      	str	r0, [sp, #64]	; 0x40
 801a28e:	9311      	str	r3, [sp, #68]	; 0x44
 801a290:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801a294:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a298:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a29a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a29c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801a2a0:	1a9b      	subs	r3, r3, r2
 801a2a2:	9309      	str	r3, [sp, #36]	; 0x24
 801a2a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801a2a8:	eeb0 0a48 	vmov.f32	s0, s16
 801a2ac:	eef0 0a68 	vmov.f32	s1, s17
 801a2b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801a2b4:	f001 fe4a 	bl	801bf4c <__ulp>
 801a2b8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801a2bc:	ec53 2b10 	vmov	r2, r3, d0
 801a2c0:	f7e6 f9b2 	bl	8000628 <__aeabi_dmul>
 801a2c4:	ec53 2b18 	vmov	r2, r3, d8
 801a2c8:	f7e5 fff8 	bl	80002bc <__adddf3>
 801a2cc:	4682      	mov	sl, r0
 801a2ce:	468b      	mov	fp, r1
 801a2d0:	e78d      	b.n	801a1ee <_strtod_l+0xab6>
 801a2d2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801a2d6:	e7db      	b.n	801a290 <_strtod_l+0xb58>
 801a2d8:	a311      	add	r3, pc, #68	; (adr r3, 801a320 <_strtod_l+0xbe8>)
 801a2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2de:	f7e6 fc15 	bl	8000b0c <__aeabi_dcmplt>
 801a2e2:	e7b2      	b.n	801a24a <_strtod_l+0xb12>
 801a2e4:	2300      	movs	r3, #0
 801a2e6:	930a      	str	r3, [sp, #40]	; 0x28
 801a2e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a2ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a2ec:	6013      	str	r3, [r2, #0]
 801a2ee:	f7ff ba6b 	b.w	80197c8 <_strtod_l+0x90>
 801a2f2:	2a65      	cmp	r2, #101	; 0x65
 801a2f4:	f43f ab5f 	beq.w	80199b6 <_strtod_l+0x27e>
 801a2f8:	2a45      	cmp	r2, #69	; 0x45
 801a2fa:	f43f ab5c 	beq.w	80199b6 <_strtod_l+0x27e>
 801a2fe:	2301      	movs	r3, #1
 801a300:	f7ff bb94 	b.w	8019a2c <_strtod_l+0x2f4>
 801a304:	f3af 8000 	nop.w
 801a308:	94a03595 	.word	0x94a03595
 801a30c:	3fdfffff 	.word	0x3fdfffff
 801a310:	35afe535 	.word	0x35afe535
 801a314:	3fe00000 	.word	0x3fe00000
 801a318:	ffc00000 	.word	0xffc00000
 801a31c:	41dfffff 	.word	0x41dfffff
 801a320:	94a03595 	.word	0x94a03595
 801a324:	3fcfffff 	.word	0x3fcfffff
 801a328:	3ff00000 	.word	0x3ff00000
 801a32c:	7ff00000 	.word	0x7ff00000
 801a330:	7fe00000 	.word	0x7fe00000
 801a334:	7c9fffff 	.word	0x7c9fffff
 801a338:	3fe00000 	.word	0x3fe00000
 801a33c:	bff00000 	.word	0xbff00000
 801a340:	7fefffff 	.word	0x7fefffff

0801a344 <_strtod_r>:
 801a344:	4b01      	ldr	r3, [pc, #4]	; (801a34c <_strtod_r+0x8>)
 801a346:	f7ff b9f7 	b.w	8019738 <_strtod_l>
 801a34a:	bf00      	nop
 801a34c:	2000010c 	.word	0x2000010c

0801a350 <_strtol_l.constprop.0>:
 801a350:	2b01      	cmp	r3, #1
 801a352:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a356:	d001      	beq.n	801a35c <_strtol_l.constprop.0+0xc>
 801a358:	2b24      	cmp	r3, #36	; 0x24
 801a35a:	d906      	bls.n	801a36a <_strtol_l.constprop.0+0x1a>
 801a35c:	f7fe faf0 	bl	8018940 <__errno>
 801a360:	2316      	movs	r3, #22
 801a362:	6003      	str	r3, [r0, #0]
 801a364:	2000      	movs	r0, #0
 801a366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a36a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801a450 <_strtol_l.constprop.0+0x100>
 801a36e:	460d      	mov	r5, r1
 801a370:	462e      	mov	r6, r5
 801a372:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a376:	f814 700c 	ldrb.w	r7, [r4, ip]
 801a37a:	f017 0708 	ands.w	r7, r7, #8
 801a37e:	d1f7      	bne.n	801a370 <_strtol_l.constprop.0+0x20>
 801a380:	2c2d      	cmp	r4, #45	; 0x2d
 801a382:	d132      	bne.n	801a3ea <_strtol_l.constprop.0+0x9a>
 801a384:	782c      	ldrb	r4, [r5, #0]
 801a386:	2701      	movs	r7, #1
 801a388:	1cb5      	adds	r5, r6, #2
 801a38a:	2b00      	cmp	r3, #0
 801a38c:	d05b      	beq.n	801a446 <_strtol_l.constprop.0+0xf6>
 801a38e:	2b10      	cmp	r3, #16
 801a390:	d109      	bne.n	801a3a6 <_strtol_l.constprop.0+0x56>
 801a392:	2c30      	cmp	r4, #48	; 0x30
 801a394:	d107      	bne.n	801a3a6 <_strtol_l.constprop.0+0x56>
 801a396:	782c      	ldrb	r4, [r5, #0]
 801a398:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801a39c:	2c58      	cmp	r4, #88	; 0x58
 801a39e:	d14d      	bne.n	801a43c <_strtol_l.constprop.0+0xec>
 801a3a0:	786c      	ldrb	r4, [r5, #1]
 801a3a2:	2310      	movs	r3, #16
 801a3a4:	3502      	adds	r5, #2
 801a3a6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801a3aa:	f108 38ff 	add.w	r8, r8, #4294967295
 801a3ae:	f04f 0c00 	mov.w	ip, #0
 801a3b2:	fbb8 f9f3 	udiv	r9, r8, r3
 801a3b6:	4666      	mov	r6, ip
 801a3b8:	fb03 8a19 	mls	sl, r3, r9, r8
 801a3bc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801a3c0:	f1be 0f09 	cmp.w	lr, #9
 801a3c4:	d816      	bhi.n	801a3f4 <_strtol_l.constprop.0+0xa4>
 801a3c6:	4674      	mov	r4, lr
 801a3c8:	42a3      	cmp	r3, r4
 801a3ca:	dd24      	ble.n	801a416 <_strtol_l.constprop.0+0xc6>
 801a3cc:	f1bc 0f00 	cmp.w	ip, #0
 801a3d0:	db1e      	blt.n	801a410 <_strtol_l.constprop.0+0xc0>
 801a3d2:	45b1      	cmp	r9, r6
 801a3d4:	d31c      	bcc.n	801a410 <_strtol_l.constprop.0+0xc0>
 801a3d6:	d101      	bne.n	801a3dc <_strtol_l.constprop.0+0x8c>
 801a3d8:	45a2      	cmp	sl, r4
 801a3da:	db19      	blt.n	801a410 <_strtol_l.constprop.0+0xc0>
 801a3dc:	fb06 4603 	mla	r6, r6, r3, r4
 801a3e0:	f04f 0c01 	mov.w	ip, #1
 801a3e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a3e8:	e7e8      	b.n	801a3bc <_strtol_l.constprop.0+0x6c>
 801a3ea:	2c2b      	cmp	r4, #43	; 0x2b
 801a3ec:	bf04      	itt	eq
 801a3ee:	782c      	ldrbeq	r4, [r5, #0]
 801a3f0:	1cb5      	addeq	r5, r6, #2
 801a3f2:	e7ca      	b.n	801a38a <_strtol_l.constprop.0+0x3a>
 801a3f4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801a3f8:	f1be 0f19 	cmp.w	lr, #25
 801a3fc:	d801      	bhi.n	801a402 <_strtol_l.constprop.0+0xb2>
 801a3fe:	3c37      	subs	r4, #55	; 0x37
 801a400:	e7e2      	b.n	801a3c8 <_strtol_l.constprop.0+0x78>
 801a402:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801a406:	f1be 0f19 	cmp.w	lr, #25
 801a40a:	d804      	bhi.n	801a416 <_strtol_l.constprop.0+0xc6>
 801a40c:	3c57      	subs	r4, #87	; 0x57
 801a40e:	e7db      	b.n	801a3c8 <_strtol_l.constprop.0+0x78>
 801a410:	f04f 3cff 	mov.w	ip, #4294967295
 801a414:	e7e6      	b.n	801a3e4 <_strtol_l.constprop.0+0x94>
 801a416:	f1bc 0f00 	cmp.w	ip, #0
 801a41a:	da05      	bge.n	801a428 <_strtol_l.constprop.0+0xd8>
 801a41c:	2322      	movs	r3, #34	; 0x22
 801a41e:	6003      	str	r3, [r0, #0]
 801a420:	4646      	mov	r6, r8
 801a422:	b942      	cbnz	r2, 801a436 <_strtol_l.constprop.0+0xe6>
 801a424:	4630      	mov	r0, r6
 801a426:	e79e      	b.n	801a366 <_strtol_l.constprop.0+0x16>
 801a428:	b107      	cbz	r7, 801a42c <_strtol_l.constprop.0+0xdc>
 801a42a:	4276      	negs	r6, r6
 801a42c:	2a00      	cmp	r2, #0
 801a42e:	d0f9      	beq.n	801a424 <_strtol_l.constprop.0+0xd4>
 801a430:	f1bc 0f00 	cmp.w	ip, #0
 801a434:	d000      	beq.n	801a438 <_strtol_l.constprop.0+0xe8>
 801a436:	1e69      	subs	r1, r5, #1
 801a438:	6011      	str	r1, [r2, #0]
 801a43a:	e7f3      	b.n	801a424 <_strtol_l.constprop.0+0xd4>
 801a43c:	2430      	movs	r4, #48	; 0x30
 801a43e:	2b00      	cmp	r3, #0
 801a440:	d1b1      	bne.n	801a3a6 <_strtol_l.constprop.0+0x56>
 801a442:	2308      	movs	r3, #8
 801a444:	e7af      	b.n	801a3a6 <_strtol_l.constprop.0+0x56>
 801a446:	2c30      	cmp	r4, #48	; 0x30
 801a448:	d0a5      	beq.n	801a396 <_strtol_l.constprop.0+0x46>
 801a44a:	230a      	movs	r3, #10
 801a44c:	e7ab      	b.n	801a3a6 <_strtol_l.constprop.0+0x56>
 801a44e:	bf00      	nop
 801a450:	08024429 	.word	0x08024429

0801a454 <_strtol_r>:
 801a454:	f7ff bf7c 	b.w	801a350 <_strtol_l.constprop.0>

0801a458 <quorem>:
 801a458:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a45c:	6903      	ldr	r3, [r0, #16]
 801a45e:	690c      	ldr	r4, [r1, #16]
 801a460:	42a3      	cmp	r3, r4
 801a462:	4607      	mov	r7, r0
 801a464:	f2c0 8081 	blt.w	801a56a <quorem+0x112>
 801a468:	3c01      	subs	r4, #1
 801a46a:	f101 0814 	add.w	r8, r1, #20
 801a46e:	f100 0514 	add.w	r5, r0, #20
 801a472:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a476:	9301      	str	r3, [sp, #4]
 801a478:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801a47c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a480:	3301      	adds	r3, #1
 801a482:	429a      	cmp	r2, r3
 801a484:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801a488:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801a48c:	fbb2 f6f3 	udiv	r6, r2, r3
 801a490:	d331      	bcc.n	801a4f6 <quorem+0x9e>
 801a492:	f04f 0e00 	mov.w	lr, #0
 801a496:	4640      	mov	r0, r8
 801a498:	46ac      	mov	ip, r5
 801a49a:	46f2      	mov	sl, lr
 801a49c:	f850 2b04 	ldr.w	r2, [r0], #4
 801a4a0:	b293      	uxth	r3, r2
 801a4a2:	fb06 e303 	mla	r3, r6, r3, lr
 801a4a6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801a4aa:	b29b      	uxth	r3, r3
 801a4ac:	ebaa 0303 	sub.w	r3, sl, r3
 801a4b0:	f8dc a000 	ldr.w	sl, [ip]
 801a4b4:	0c12      	lsrs	r2, r2, #16
 801a4b6:	fa13 f38a 	uxtah	r3, r3, sl
 801a4ba:	fb06 e202 	mla	r2, r6, r2, lr
 801a4be:	9300      	str	r3, [sp, #0]
 801a4c0:	9b00      	ldr	r3, [sp, #0]
 801a4c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801a4c6:	b292      	uxth	r2, r2
 801a4c8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801a4cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a4d0:	f8bd 3000 	ldrh.w	r3, [sp]
 801a4d4:	4581      	cmp	r9, r0
 801a4d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a4da:	f84c 3b04 	str.w	r3, [ip], #4
 801a4de:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801a4e2:	d2db      	bcs.n	801a49c <quorem+0x44>
 801a4e4:	f855 300b 	ldr.w	r3, [r5, fp]
 801a4e8:	b92b      	cbnz	r3, 801a4f6 <quorem+0x9e>
 801a4ea:	9b01      	ldr	r3, [sp, #4]
 801a4ec:	3b04      	subs	r3, #4
 801a4ee:	429d      	cmp	r5, r3
 801a4f0:	461a      	mov	r2, r3
 801a4f2:	d32e      	bcc.n	801a552 <quorem+0xfa>
 801a4f4:	613c      	str	r4, [r7, #16]
 801a4f6:	4638      	mov	r0, r7
 801a4f8:	f001 fc82 	bl	801be00 <__mcmp>
 801a4fc:	2800      	cmp	r0, #0
 801a4fe:	db24      	blt.n	801a54a <quorem+0xf2>
 801a500:	3601      	adds	r6, #1
 801a502:	4628      	mov	r0, r5
 801a504:	f04f 0c00 	mov.w	ip, #0
 801a508:	f858 2b04 	ldr.w	r2, [r8], #4
 801a50c:	f8d0 e000 	ldr.w	lr, [r0]
 801a510:	b293      	uxth	r3, r2
 801a512:	ebac 0303 	sub.w	r3, ip, r3
 801a516:	0c12      	lsrs	r2, r2, #16
 801a518:	fa13 f38e 	uxtah	r3, r3, lr
 801a51c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801a520:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a524:	b29b      	uxth	r3, r3
 801a526:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a52a:	45c1      	cmp	r9, r8
 801a52c:	f840 3b04 	str.w	r3, [r0], #4
 801a530:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801a534:	d2e8      	bcs.n	801a508 <quorem+0xb0>
 801a536:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a53a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a53e:	b922      	cbnz	r2, 801a54a <quorem+0xf2>
 801a540:	3b04      	subs	r3, #4
 801a542:	429d      	cmp	r5, r3
 801a544:	461a      	mov	r2, r3
 801a546:	d30a      	bcc.n	801a55e <quorem+0x106>
 801a548:	613c      	str	r4, [r7, #16]
 801a54a:	4630      	mov	r0, r6
 801a54c:	b003      	add	sp, #12
 801a54e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a552:	6812      	ldr	r2, [r2, #0]
 801a554:	3b04      	subs	r3, #4
 801a556:	2a00      	cmp	r2, #0
 801a558:	d1cc      	bne.n	801a4f4 <quorem+0x9c>
 801a55a:	3c01      	subs	r4, #1
 801a55c:	e7c7      	b.n	801a4ee <quorem+0x96>
 801a55e:	6812      	ldr	r2, [r2, #0]
 801a560:	3b04      	subs	r3, #4
 801a562:	2a00      	cmp	r2, #0
 801a564:	d1f0      	bne.n	801a548 <quorem+0xf0>
 801a566:	3c01      	subs	r4, #1
 801a568:	e7eb      	b.n	801a542 <quorem+0xea>
 801a56a:	2000      	movs	r0, #0
 801a56c:	e7ee      	b.n	801a54c <quorem+0xf4>
	...

0801a570 <_dtoa_r>:
 801a570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a574:	ed2d 8b04 	vpush	{d8-d9}
 801a578:	ec57 6b10 	vmov	r6, r7, d0
 801a57c:	b093      	sub	sp, #76	; 0x4c
 801a57e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801a580:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801a584:	9106      	str	r1, [sp, #24]
 801a586:	ee10 aa10 	vmov	sl, s0
 801a58a:	4604      	mov	r4, r0
 801a58c:	9209      	str	r2, [sp, #36]	; 0x24
 801a58e:	930c      	str	r3, [sp, #48]	; 0x30
 801a590:	46bb      	mov	fp, r7
 801a592:	b975      	cbnz	r5, 801a5b2 <_dtoa_r+0x42>
 801a594:	2010      	movs	r0, #16
 801a596:	f001 f94d 	bl	801b834 <malloc>
 801a59a:	4602      	mov	r2, r0
 801a59c:	6260      	str	r0, [r4, #36]	; 0x24
 801a59e:	b920      	cbnz	r0, 801a5aa <_dtoa_r+0x3a>
 801a5a0:	4ba7      	ldr	r3, [pc, #668]	; (801a840 <_dtoa_r+0x2d0>)
 801a5a2:	21ea      	movs	r1, #234	; 0xea
 801a5a4:	48a7      	ldr	r0, [pc, #668]	; (801a844 <_dtoa_r+0x2d4>)
 801a5a6:	f002 f8ad 	bl	801c704 <__assert_func>
 801a5aa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801a5ae:	6005      	str	r5, [r0, #0]
 801a5b0:	60c5      	str	r5, [r0, #12]
 801a5b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a5b4:	6819      	ldr	r1, [r3, #0]
 801a5b6:	b151      	cbz	r1, 801a5ce <_dtoa_r+0x5e>
 801a5b8:	685a      	ldr	r2, [r3, #4]
 801a5ba:	604a      	str	r2, [r1, #4]
 801a5bc:	2301      	movs	r3, #1
 801a5be:	4093      	lsls	r3, r2
 801a5c0:	608b      	str	r3, [r1, #8]
 801a5c2:	4620      	mov	r0, r4
 801a5c4:	f001 f990 	bl	801b8e8 <_Bfree>
 801a5c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a5ca:	2200      	movs	r2, #0
 801a5cc:	601a      	str	r2, [r3, #0]
 801a5ce:	1e3b      	subs	r3, r7, #0
 801a5d0:	bfaa      	itet	ge
 801a5d2:	2300      	movge	r3, #0
 801a5d4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801a5d8:	f8c8 3000 	strge.w	r3, [r8]
 801a5dc:	4b9a      	ldr	r3, [pc, #616]	; (801a848 <_dtoa_r+0x2d8>)
 801a5de:	bfbc      	itt	lt
 801a5e0:	2201      	movlt	r2, #1
 801a5e2:	f8c8 2000 	strlt.w	r2, [r8]
 801a5e6:	ea33 030b 	bics.w	r3, r3, fp
 801a5ea:	d11b      	bne.n	801a624 <_dtoa_r+0xb4>
 801a5ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a5ee:	f242 730f 	movw	r3, #9999	; 0x270f
 801a5f2:	6013      	str	r3, [r2, #0]
 801a5f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a5f8:	4333      	orrs	r3, r6
 801a5fa:	f000 8592 	beq.w	801b122 <_dtoa_r+0xbb2>
 801a5fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a600:	b963      	cbnz	r3, 801a61c <_dtoa_r+0xac>
 801a602:	4b92      	ldr	r3, [pc, #584]	; (801a84c <_dtoa_r+0x2dc>)
 801a604:	e022      	b.n	801a64c <_dtoa_r+0xdc>
 801a606:	4b92      	ldr	r3, [pc, #584]	; (801a850 <_dtoa_r+0x2e0>)
 801a608:	9301      	str	r3, [sp, #4]
 801a60a:	3308      	adds	r3, #8
 801a60c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a60e:	6013      	str	r3, [r2, #0]
 801a610:	9801      	ldr	r0, [sp, #4]
 801a612:	b013      	add	sp, #76	; 0x4c
 801a614:	ecbd 8b04 	vpop	{d8-d9}
 801a618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a61c:	4b8b      	ldr	r3, [pc, #556]	; (801a84c <_dtoa_r+0x2dc>)
 801a61e:	9301      	str	r3, [sp, #4]
 801a620:	3303      	adds	r3, #3
 801a622:	e7f3      	b.n	801a60c <_dtoa_r+0x9c>
 801a624:	2200      	movs	r2, #0
 801a626:	2300      	movs	r3, #0
 801a628:	4650      	mov	r0, sl
 801a62a:	4659      	mov	r1, fp
 801a62c:	f7e6 fa64 	bl	8000af8 <__aeabi_dcmpeq>
 801a630:	ec4b ab19 	vmov	d9, sl, fp
 801a634:	4680      	mov	r8, r0
 801a636:	b158      	cbz	r0, 801a650 <_dtoa_r+0xe0>
 801a638:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a63a:	2301      	movs	r3, #1
 801a63c:	6013      	str	r3, [r2, #0]
 801a63e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a640:	2b00      	cmp	r3, #0
 801a642:	f000 856b 	beq.w	801b11c <_dtoa_r+0xbac>
 801a646:	4883      	ldr	r0, [pc, #524]	; (801a854 <_dtoa_r+0x2e4>)
 801a648:	6018      	str	r0, [r3, #0]
 801a64a:	1e43      	subs	r3, r0, #1
 801a64c:	9301      	str	r3, [sp, #4]
 801a64e:	e7df      	b.n	801a610 <_dtoa_r+0xa0>
 801a650:	ec4b ab10 	vmov	d0, sl, fp
 801a654:	aa10      	add	r2, sp, #64	; 0x40
 801a656:	a911      	add	r1, sp, #68	; 0x44
 801a658:	4620      	mov	r0, r4
 801a65a:	f001 fcf3 	bl	801c044 <__d2b>
 801a65e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801a662:	ee08 0a10 	vmov	s16, r0
 801a666:	2d00      	cmp	r5, #0
 801a668:	f000 8084 	beq.w	801a774 <_dtoa_r+0x204>
 801a66c:	ee19 3a90 	vmov	r3, s19
 801a670:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a674:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801a678:	4656      	mov	r6, sl
 801a67a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801a67e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801a682:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801a686:	4b74      	ldr	r3, [pc, #464]	; (801a858 <_dtoa_r+0x2e8>)
 801a688:	2200      	movs	r2, #0
 801a68a:	4630      	mov	r0, r6
 801a68c:	4639      	mov	r1, r7
 801a68e:	f7e5 fe13 	bl	80002b8 <__aeabi_dsub>
 801a692:	a365      	add	r3, pc, #404	; (adr r3, 801a828 <_dtoa_r+0x2b8>)
 801a694:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a698:	f7e5 ffc6 	bl	8000628 <__aeabi_dmul>
 801a69c:	a364      	add	r3, pc, #400	; (adr r3, 801a830 <_dtoa_r+0x2c0>)
 801a69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6a2:	f7e5 fe0b 	bl	80002bc <__adddf3>
 801a6a6:	4606      	mov	r6, r0
 801a6a8:	4628      	mov	r0, r5
 801a6aa:	460f      	mov	r7, r1
 801a6ac:	f7e5 ff52 	bl	8000554 <__aeabi_i2d>
 801a6b0:	a361      	add	r3, pc, #388	; (adr r3, 801a838 <_dtoa_r+0x2c8>)
 801a6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6b6:	f7e5 ffb7 	bl	8000628 <__aeabi_dmul>
 801a6ba:	4602      	mov	r2, r0
 801a6bc:	460b      	mov	r3, r1
 801a6be:	4630      	mov	r0, r6
 801a6c0:	4639      	mov	r1, r7
 801a6c2:	f7e5 fdfb 	bl	80002bc <__adddf3>
 801a6c6:	4606      	mov	r6, r0
 801a6c8:	460f      	mov	r7, r1
 801a6ca:	f7e6 fa5d 	bl	8000b88 <__aeabi_d2iz>
 801a6ce:	2200      	movs	r2, #0
 801a6d0:	9000      	str	r0, [sp, #0]
 801a6d2:	2300      	movs	r3, #0
 801a6d4:	4630      	mov	r0, r6
 801a6d6:	4639      	mov	r1, r7
 801a6d8:	f7e6 fa18 	bl	8000b0c <__aeabi_dcmplt>
 801a6dc:	b150      	cbz	r0, 801a6f4 <_dtoa_r+0x184>
 801a6de:	9800      	ldr	r0, [sp, #0]
 801a6e0:	f7e5 ff38 	bl	8000554 <__aeabi_i2d>
 801a6e4:	4632      	mov	r2, r6
 801a6e6:	463b      	mov	r3, r7
 801a6e8:	f7e6 fa06 	bl	8000af8 <__aeabi_dcmpeq>
 801a6ec:	b910      	cbnz	r0, 801a6f4 <_dtoa_r+0x184>
 801a6ee:	9b00      	ldr	r3, [sp, #0]
 801a6f0:	3b01      	subs	r3, #1
 801a6f2:	9300      	str	r3, [sp, #0]
 801a6f4:	9b00      	ldr	r3, [sp, #0]
 801a6f6:	2b16      	cmp	r3, #22
 801a6f8:	d85a      	bhi.n	801a7b0 <_dtoa_r+0x240>
 801a6fa:	9a00      	ldr	r2, [sp, #0]
 801a6fc:	4b57      	ldr	r3, [pc, #348]	; (801a85c <_dtoa_r+0x2ec>)
 801a6fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a702:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a706:	ec51 0b19 	vmov	r0, r1, d9
 801a70a:	f7e6 f9ff 	bl	8000b0c <__aeabi_dcmplt>
 801a70e:	2800      	cmp	r0, #0
 801a710:	d050      	beq.n	801a7b4 <_dtoa_r+0x244>
 801a712:	9b00      	ldr	r3, [sp, #0]
 801a714:	3b01      	subs	r3, #1
 801a716:	9300      	str	r3, [sp, #0]
 801a718:	2300      	movs	r3, #0
 801a71a:	930b      	str	r3, [sp, #44]	; 0x2c
 801a71c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a71e:	1b5d      	subs	r5, r3, r5
 801a720:	1e6b      	subs	r3, r5, #1
 801a722:	9305      	str	r3, [sp, #20]
 801a724:	bf45      	ittet	mi
 801a726:	f1c5 0301 	rsbmi	r3, r5, #1
 801a72a:	9304      	strmi	r3, [sp, #16]
 801a72c:	2300      	movpl	r3, #0
 801a72e:	2300      	movmi	r3, #0
 801a730:	bf4c      	ite	mi
 801a732:	9305      	strmi	r3, [sp, #20]
 801a734:	9304      	strpl	r3, [sp, #16]
 801a736:	9b00      	ldr	r3, [sp, #0]
 801a738:	2b00      	cmp	r3, #0
 801a73a:	db3d      	blt.n	801a7b8 <_dtoa_r+0x248>
 801a73c:	9b05      	ldr	r3, [sp, #20]
 801a73e:	9a00      	ldr	r2, [sp, #0]
 801a740:	920a      	str	r2, [sp, #40]	; 0x28
 801a742:	4413      	add	r3, r2
 801a744:	9305      	str	r3, [sp, #20]
 801a746:	2300      	movs	r3, #0
 801a748:	9307      	str	r3, [sp, #28]
 801a74a:	9b06      	ldr	r3, [sp, #24]
 801a74c:	2b09      	cmp	r3, #9
 801a74e:	f200 8089 	bhi.w	801a864 <_dtoa_r+0x2f4>
 801a752:	2b05      	cmp	r3, #5
 801a754:	bfc4      	itt	gt
 801a756:	3b04      	subgt	r3, #4
 801a758:	9306      	strgt	r3, [sp, #24]
 801a75a:	9b06      	ldr	r3, [sp, #24]
 801a75c:	f1a3 0302 	sub.w	r3, r3, #2
 801a760:	bfcc      	ite	gt
 801a762:	2500      	movgt	r5, #0
 801a764:	2501      	movle	r5, #1
 801a766:	2b03      	cmp	r3, #3
 801a768:	f200 8087 	bhi.w	801a87a <_dtoa_r+0x30a>
 801a76c:	e8df f003 	tbb	[pc, r3]
 801a770:	59383a2d 	.word	0x59383a2d
 801a774:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801a778:	441d      	add	r5, r3
 801a77a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801a77e:	2b20      	cmp	r3, #32
 801a780:	bfc1      	itttt	gt
 801a782:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801a786:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801a78a:	fa0b f303 	lslgt.w	r3, fp, r3
 801a78e:	fa26 f000 	lsrgt.w	r0, r6, r0
 801a792:	bfda      	itte	le
 801a794:	f1c3 0320 	rsble	r3, r3, #32
 801a798:	fa06 f003 	lslle.w	r0, r6, r3
 801a79c:	4318      	orrgt	r0, r3
 801a79e:	f7e5 fec9 	bl	8000534 <__aeabi_ui2d>
 801a7a2:	2301      	movs	r3, #1
 801a7a4:	4606      	mov	r6, r0
 801a7a6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801a7aa:	3d01      	subs	r5, #1
 801a7ac:	930e      	str	r3, [sp, #56]	; 0x38
 801a7ae:	e76a      	b.n	801a686 <_dtoa_r+0x116>
 801a7b0:	2301      	movs	r3, #1
 801a7b2:	e7b2      	b.n	801a71a <_dtoa_r+0x1aa>
 801a7b4:	900b      	str	r0, [sp, #44]	; 0x2c
 801a7b6:	e7b1      	b.n	801a71c <_dtoa_r+0x1ac>
 801a7b8:	9b04      	ldr	r3, [sp, #16]
 801a7ba:	9a00      	ldr	r2, [sp, #0]
 801a7bc:	1a9b      	subs	r3, r3, r2
 801a7be:	9304      	str	r3, [sp, #16]
 801a7c0:	4253      	negs	r3, r2
 801a7c2:	9307      	str	r3, [sp, #28]
 801a7c4:	2300      	movs	r3, #0
 801a7c6:	930a      	str	r3, [sp, #40]	; 0x28
 801a7c8:	e7bf      	b.n	801a74a <_dtoa_r+0x1da>
 801a7ca:	2300      	movs	r3, #0
 801a7cc:	9308      	str	r3, [sp, #32]
 801a7ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a7d0:	2b00      	cmp	r3, #0
 801a7d2:	dc55      	bgt.n	801a880 <_dtoa_r+0x310>
 801a7d4:	2301      	movs	r3, #1
 801a7d6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801a7da:	461a      	mov	r2, r3
 801a7dc:	9209      	str	r2, [sp, #36]	; 0x24
 801a7de:	e00c      	b.n	801a7fa <_dtoa_r+0x28a>
 801a7e0:	2301      	movs	r3, #1
 801a7e2:	e7f3      	b.n	801a7cc <_dtoa_r+0x25c>
 801a7e4:	2300      	movs	r3, #0
 801a7e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a7e8:	9308      	str	r3, [sp, #32]
 801a7ea:	9b00      	ldr	r3, [sp, #0]
 801a7ec:	4413      	add	r3, r2
 801a7ee:	9302      	str	r3, [sp, #8]
 801a7f0:	3301      	adds	r3, #1
 801a7f2:	2b01      	cmp	r3, #1
 801a7f4:	9303      	str	r3, [sp, #12]
 801a7f6:	bfb8      	it	lt
 801a7f8:	2301      	movlt	r3, #1
 801a7fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801a7fc:	2200      	movs	r2, #0
 801a7fe:	6042      	str	r2, [r0, #4]
 801a800:	2204      	movs	r2, #4
 801a802:	f102 0614 	add.w	r6, r2, #20
 801a806:	429e      	cmp	r6, r3
 801a808:	6841      	ldr	r1, [r0, #4]
 801a80a:	d93d      	bls.n	801a888 <_dtoa_r+0x318>
 801a80c:	4620      	mov	r0, r4
 801a80e:	f001 f82b 	bl	801b868 <_Balloc>
 801a812:	9001      	str	r0, [sp, #4]
 801a814:	2800      	cmp	r0, #0
 801a816:	d13b      	bne.n	801a890 <_dtoa_r+0x320>
 801a818:	4b11      	ldr	r3, [pc, #68]	; (801a860 <_dtoa_r+0x2f0>)
 801a81a:	4602      	mov	r2, r0
 801a81c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801a820:	e6c0      	b.n	801a5a4 <_dtoa_r+0x34>
 801a822:	2301      	movs	r3, #1
 801a824:	e7df      	b.n	801a7e6 <_dtoa_r+0x276>
 801a826:	bf00      	nop
 801a828:	636f4361 	.word	0x636f4361
 801a82c:	3fd287a7 	.word	0x3fd287a7
 801a830:	8b60c8b3 	.word	0x8b60c8b3
 801a834:	3fc68a28 	.word	0x3fc68a28
 801a838:	509f79fb 	.word	0x509f79fb
 801a83c:	3fd34413 	.word	0x3fd34413
 801a840:	08024536 	.word	0x08024536
 801a844:	0802454d 	.word	0x0802454d
 801a848:	7ff00000 	.word	0x7ff00000
 801a84c:	08024532 	.word	0x08024532
 801a850:	08024529 	.word	0x08024529
 801a854:	080243ad 	.word	0x080243ad
 801a858:	3ff80000 	.word	0x3ff80000
 801a85c:	080246b8 	.word	0x080246b8
 801a860:	080245a8 	.word	0x080245a8
 801a864:	2501      	movs	r5, #1
 801a866:	2300      	movs	r3, #0
 801a868:	9306      	str	r3, [sp, #24]
 801a86a:	9508      	str	r5, [sp, #32]
 801a86c:	f04f 33ff 	mov.w	r3, #4294967295
 801a870:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801a874:	2200      	movs	r2, #0
 801a876:	2312      	movs	r3, #18
 801a878:	e7b0      	b.n	801a7dc <_dtoa_r+0x26c>
 801a87a:	2301      	movs	r3, #1
 801a87c:	9308      	str	r3, [sp, #32]
 801a87e:	e7f5      	b.n	801a86c <_dtoa_r+0x2fc>
 801a880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a882:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801a886:	e7b8      	b.n	801a7fa <_dtoa_r+0x28a>
 801a888:	3101      	adds	r1, #1
 801a88a:	6041      	str	r1, [r0, #4]
 801a88c:	0052      	lsls	r2, r2, #1
 801a88e:	e7b8      	b.n	801a802 <_dtoa_r+0x292>
 801a890:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a892:	9a01      	ldr	r2, [sp, #4]
 801a894:	601a      	str	r2, [r3, #0]
 801a896:	9b03      	ldr	r3, [sp, #12]
 801a898:	2b0e      	cmp	r3, #14
 801a89a:	f200 809d 	bhi.w	801a9d8 <_dtoa_r+0x468>
 801a89e:	2d00      	cmp	r5, #0
 801a8a0:	f000 809a 	beq.w	801a9d8 <_dtoa_r+0x468>
 801a8a4:	9b00      	ldr	r3, [sp, #0]
 801a8a6:	2b00      	cmp	r3, #0
 801a8a8:	dd32      	ble.n	801a910 <_dtoa_r+0x3a0>
 801a8aa:	4ab7      	ldr	r2, [pc, #732]	; (801ab88 <_dtoa_r+0x618>)
 801a8ac:	f003 030f 	and.w	r3, r3, #15
 801a8b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801a8b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 801a8b8:	9b00      	ldr	r3, [sp, #0]
 801a8ba:	05d8      	lsls	r0, r3, #23
 801a8bc:	ea4f 1723 	mov.w	r7, r3, asr #4
 801a8c0:	d516      	bpl.n	801a8f0 <_dtoa_r+0x380>
 801a8c2:	4bb2      	ldr	r3, [pc, #712]	; (801ab8c <_dtoa_r+0x61c>)
 801a8c4:	ec51 0b19 	vmov	r0, r1, d9
 801a8c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801a8cc:	f7e5 ffd6 	bl	800087c <__aeabi_ddiv>
 801a8d0:	f007 070f 	and.w	r7, r7, #15
 801a8d4:	4682      	mov	sl, r0
 801a8d6:	468b      	mov	fp, r1
 801a8d8:	2503      	movs	r5, #3
 801a8da:	4eac      	ldr	r6, [pc, #688]	; (801ab8c <_dtoa_r+0x61c>)
 801a8dc:	b957      	cbnz	r7, 801a8f4 <_dtoa_r+0x384>
 801a8de:	4642      	mov	r2, r8
 801a8e0:	464b      	mov	r3, r9
 801a8e2:	4650      	mov	r0, sl
 801a8e4:	4659      	mov	r1, fp
 801a8e6:	f7e5 ffc9 	bl	800087c <__aeabi_ddiv>
 801a8ea:	4682      	mov	sl, r0
 801a8ec:	468b      	mov	fp, r1
 801a8ee:	e028      	b.n	801a942 <_dtoa_r+0x3d2>
 801a8f0:	2502      	movs	r5, #2
 801a8f2:	e7f2      	b.n	801a8da <_dtoa_r+0x36a>
 801a8f4:	07f9      	lsls	r1, r7, #31
 801a8f6:	d508      	bpl.n	801a90a <_dtoa_r+0x39a>
 801a8f8:	4640      	mov	r0, r8
 801a8fa:	4649      	mov	r1, r9
 801a8fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 801a900:	f7e5 fe92 	bl	8000628 <__aeabi_dmul>
 801a904:	3501      	adds	r5, #1
 801a906:	4680      	mov	r8, r0
 801a908:	4689      	mov	r9, r1
 801a90a:	107f      	asrs	r7, r7, #1
 801a90c:	3608      	adds	r6, #8
 801a90e:	e7e5      	b.n	801a8dc <_dtoa_r+0x36c>
 801a910:	f000 809b 	beq.w	801aa4a <_dtoa_r+0x4da>
 801a914:	9b00      	ldr	r3, [sp, #0]
 801a916:	4f9d      	ldr	r7, [pc, #628]	; (801ab8c <_dtoa_r+0x61c>)
 801a918:	425e      	negs	r6, r3
 801a91a:	4b9b      	ldr	r3, [pc, #620]	; (801ab88 <_dtoa_r+0x618>)
 801a91c:	f006 020f 	and.w	r2, r6, #15
 801a920:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a924:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a928:	ec51 0b19 	vmov	r0, r1, d9
 801a92c:	f7e5 fe7c 	bl	8000628 <__aeabi_dmul>
 801a930:	1136      	asrs	r6, r6, #4
 801a932:	4682      	mov	sl, r0
 801a934:	468b      	mov	fp, r1
 801a936:	2300      	movs	r3, #0
 801a938:	2502      	movs	r5, #2
 801a93a:	2e00      	cmp	r6, #0
 801a93c:	d17a      	bne.n	801aa34 <_dtoa_r+0x4c4>
 801a93e:	2b00      	cmp	r3, #0
 801a940:	d1d3      	bne.n	801a8ea <_dtoa_r+0x37a>
 801a942:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a944:	2b00      	cmp	r3, #0
 801a946:	f000 8082 	beq.w	801aa4e <_dtoa_r+0x4de>
 801a94a:	4b91      	ldr	r3, [pc, #580]	; (801ab90 <_dtoa_r+0x620>)
 801a94c:	2200      	movs	r2, #0
 801a94e:	4650      	mov	r0, sl
 801a950:	4659      	mov	r1, fp
 801a952:	f7e6 f8db 	bl	8000b0c <__aeabi_dcmplt>
 801a956:	2800      	cmp	r0, #0
 801a958:	d079      	beq.n	801aa4e <_dtoa_r+0x4de>
 801a95a:	9b03      	ldr	r3, [sp, #12]
 801a95c:	2b00      	cmp	r3, #0
 801a95e:	d076      	beq.n	801aa4e <_dtoa_r+0x4de>
 801a960:	9b02      	ldr	r3, [sp, #8]
 801a962:	2b00      	cmp	r3, #0
 801a964:	dd36      	ble.n	801a9d4 <_dtoa_r+0x464>
 801a966:	9b00      	ldr	r3, [sp, #0]
 801a968:	4650      	mov	r0, sl
 801a96a:	4659      	mov	r1, fp
 801a96c:	1e5f      	subs	r7, r3, #1
 801a96e:	2200      	movs	r2, #0
 801a970:	4b88      	ldr	r3, [pc, #544]	; (801ab94 <_dtoa_r+0x624>)
 801a972:	f7e5 fe59 	bl	8000628 <__aeabi_dmul>
 801a976:	9e02      	ldr	r6, [sp, #8]
 801a978:	4682      	mov	sl, r0
 801a97a:	468b      	mov	fp, r1
 801a97c:	3501      	adds	r5, #1
 801a97e:	4628      	mov	r0, r5
 801a980:	f7e5 fde8 	bl	8000554 <__aeabi_i2d>
 801a984:	4652      	mov	r2, sl
 801a986:	465b      	mov	r3, fp
 801a988:	f7e5 fe4e 	bl	8000628 <__aeabi_dmul>
 801a98c:	4b82      	ldr	r3, [pc, #520]	; (801ab98 <_dtoa_r+0x628>)
 801a98e:	2200      	movs	r2, #0
 801a990:	f7e5 fc94 	bl	80002bc <__adddf3>
 801a994:	46d0      	mov	r8, sl
 801a996:	46d9      	mov	r9, fp
 801a998:	4682      	mov	sl, r0
 801a99a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801a99e:	2e00      	cmp	r6, #0
 801a9a0:	d158      	bne.n	801aa54 <_dtoa_r+0x4e4>
 801a9a2:	4b7e      	ldr	r3, [pc, #504]	; (801ab9c <_dtoa_r+0x62c>)
 801a9a4:	2200      	movs	r2, #0
 801a9a6:	4640      	mov	r0, r8
 801a9a8:	4649      	mov	r1, r9
 801a9aa:	f7e5 fc85 	bl	80002b8 <__aeabi_dsub>
 801a9ae:	4652      	mov	r2, sl
 801a9b0:	465b      	mov	r3, fp
 801a9b2:	4680      	mov	r8, r0
 801a9b4:	4689      	mov	r9, r1
 801a9b6:	f7e6 f8c7 	bl	8000b48 <__aeabi_dcmpgt>
 801a9ba:	2800      	cmp	r0, #0
 801a9bc:	f040 8295 	bne.w	801aeea <_dtoa_r+0x97a>
 801a9c0:	4652      	mov	r2, sl
 801a9c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801a9c6:	4640      	mov	r0, r8
 801a9c8:	4649      	mov	r1, r9
 801a9ca:	f7e6 f89f 	bl	8000b0c <__aeabi_dcmplt>
 801a9ce:	2800      	cmp	r0, #0
 801a9d0:	f040 8289 	bne.w	801aee6 <_dtoa_r+0x976>
 801a9d4:	ec5b ab19 	vmov	sl, fp, d9
 801a9d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a9da:	2b00      	cmp	r3, #0
 801a9dc:	f2c0 8148 	blt.w	801ac70 <_dtoa_r+0x700>
 801a9e0:	9a00      	ldr	r2, [sp, #0]
 801a9e2:	2a0e      	cmp	r2, #14
 801a9e4:	f300 8144 	bgt.w	801ac70 <_dtoa_r+0x700>
 801a9e8:	4b67      	ldr	r3, [pc, #412]	; (801ab88 <_dtoa_r+0x618>)
 801a9ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a9ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 801a9f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a9f4:	2b00      	cmp	r3, #0
 801a9f6:	f280 80d5 	bge.w	801aba4 <_dtoa_r+0x634>
 801a9fa:	9b03      	ldr	r3, [sp, #12]
 801a9fc:	2b00      	cmp	r3, #0
 801a9fe:	f300 80d1 	bgt.w	801aba4 <_dtoa_r+0x634>
 801aa02:	f040 826f 	bne.w	801aee4 <_dtoa_r+0x974>
 801aa06:	4b65      	ldr	r3, [pc, #404]	; (801ab9c <_dtoa_r+0x62c>)
 801aa08:	2200      	movs	r2, #0
 801aa0a:	4640      	mov	r0, r8
 801aa0c:	4649      	mov	r1, r9
 801aa0e:	f7e5 fe0b 	bl	8000628 <__aeabi_dmul>
 801aa12:	4652      	mov	r2, sl
 801aa14:	465b      	mov	r3, fp
 801aa16:	f7e6 f88d 	bl	8000b34 <__aeabi_dcmpge>
 801aa1a:	9e03      	ldr	r6, [sp, #12]
 801aa1c:	4637      	mov	r7, r6
 801aa1e:	2800      	cmp	r0, #0
 801aa20:	f040 8245 	bne.w	801aeae <_dtoa_r+0x93e>
 801aa24:	9d01      	ldr	r5, [sp, #4]
 801aa26:	2331      	movs	r3, #49	; 0x31
 801aa28:	f805 3b01 	strb.w	r3, [r5], #1
 801aa2c:	9b00      	ldr	r3, [sp, #0]
 801aa2e:	3301      	adds	r3, #1
 801aa30:	9300      	str	r3, [sp, #0]
 801aa32:	e240      	b.n	801aeb6 <_dtoa_r+0x946>
 801aa34:	07f2      	lsls	r2, r6, #31
 801aa36:	d505      	bpl.n	801aa44 <_dtoa_r+0x4d4>
 801aa38:	e9d7 2300 	ldrd	r2, r3, [r7]
 801aa3c:	f7e5 fdf4 	bl	8000628 <__aeabi_dmul>
 801aa40:	3501      	adds	r5, #1
 801aa42:	2301      	movs	r3, #1
 801aa44:	1076      	asrs	r6, r6, #1
 801aa46:	3708      	adds	r7, #8
 801aa48:	e777      	b.n	801a93a <_dtoa_r+0x3ca>
 801aa4a:	2502      	movs	r5, #2
 801aa4c:	e779      	b.n	801a942 <_dtoa_r+0x3d2>
 801aa4e:	9f00      	ldr	r7, [sp, #0]
 801aa50:	9e03      	ldr	r6, [sp, #12]
 801aa52:	e794      	b.n	801a97e <_dtoa_r+0x40e>
 801aa54:	9901      	ldr	r1, [sp, #4]
 801aa56:	4b4c      	ldr	r3, [pc, #304]	; (801ab88 <_dtoa_r+0x618>)
 801aa58:	4431      	add	r1, r6
 801aa5a:	910d      	str	r1, [sp, #52]	; 0x34
 801aa5c:	9908      	ldr	r1, [sp, #32]
 801aa5e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801aa62:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801aa66:	2900      	cmp	r1, #0
 801aa68:	d043      	beq.n	801aaf2 <_dtoa_r+0x582>
 801aa6a:	494d      	ldr	r1, [pc, #308]	; (801aba0 <_dtoa_r+0x630>)
 801aa6c:	2000      	movs	r0, #0
 801aa6e:	f7e5 ff05 	bl	800087c <__aeabi_ddiv>
 801aa72:	4652      	mov	r2, sl
 801aa74:	465b      	mov	r3, fp
 801aa76:	f7e5 fc1f 	bl	80002b8 <__aeabi_dsub>
 801aa7a:	9d01      	ldr	r5, [sp, #4]
 801aa7c:	4682      	mov	sl, r0
 801aa7e:	468b      	mov	fp, r1
 801aa80:	4649      	mov	r1, r9
 801aa82:	4640      	mov	r0, r8
 801aa84:	f7e6 f880 	bl	8000b88 <__aeabi_d2iz>
 801aa88:	4606      	mov	r6, r0
 801aa8a:	f7e5 fd63 	bl	8000554 <__aeabi_i2d>
 801aa8e:	4602      	mov	r2, r0
 801aa90:	460b      	mov	r3, r1
 801aa92:	4640      	mov	r0, r8
 801aa94:	4649      	mov	r1, r9
 801aa96:	f7e5 fc0f 	bl	80002b8 <__aeabi_dsub>
 801aa9a:	3630      	adds	r6, #48	; 0x30
 801aa9c:	f805 6b01 	strb.w	r6, [r5], #1
 801aaa0:	4652      	mov	r2, sl
 801aaa2:	465b      	mov	r3, fp
 801aaa4:	4680      	mov	r8, r0
 801aaa6:	4689      	mov	r9, r1
 801aaa8:	f7e6 f830 	bl	8000b0c <__aeabi_dcmplt>
 801aaac:	2800      	cmp	r0, #0
 801aaae:	d163      	bne.n	801ab78 <_dtoa_r+0x608>
 801aab0:	4642      	mov	r2, r8
 801aab2:	464b      	mov	r3, r9
 801aab4:	4936      	ldr	r1, [pc, #216]	; (801ab90 <_dtoa_r+0x620>)
 801aab6:	2000      	movs	r0, #0
 801aab8:	f7e5 fbfe 	bl	80002b8 <__aeabi_dsub>
 801aabc:	4652      	mov	r2, sl
 801aabe:	465b      	mov	r3, fp
 801aac0:	f7e6 f824 	bl	8000b0c <__aeabi_dcmplt>
 801aac4:	2800      	cmp	r0, #0
 801aac6:	f040 80b5 	bne.w	801ac34 <_dtoa_r+0x6c4>
 801aaca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801aacc:	429d      	cmp	r5, r3
 801aace:	d081      	beq.n	801a9d4 <_dtoa_r+0x464>
 801aad0:	4b30      	ldr	r3, [pc, #192]	; (801ab94 <_dtoa_r+0x624>)
 801aad2:	2200      	movs	r2, #0
 801aad4:	4650      	mov	r0, sl
 801aad6:	4659      	mov	r1, fp
 801aad8:	f7e5 fda6 	bl	8000628 <__aeabi_dmul>
 801aadc:	4b2d      	ldr	r3, [pc, #180]	; (801ab94 <_dtoa_r+0x624>)
 801aade:	4682      	mov	sl, r0
 801aae0:	468b      	mov	fp, r1
 801aae2:	4640      	mov	r0, r8
 801aae4:	4649      	mov	r1, r9
 801aae6:	2200      	movs	r2, #0
 801aae8:	f7e5 fd9e 	bl	8000628 <__aeabi_dmul>
 801aaec:	4680      	mov	r8, r0
 801aaee:	4689      	mov	r9, r1
 801aaf0:	e7c6      	b.n	801aa80 <_dtoa_r+0x510>
 801aaf2:	4650      	mov	r0, sl
 801aaf4:	4659      	mov	r1, fp
 801aaf6:	f7e5 fd97 	bl	8000628 <__aeabi_dmul>
 801aafa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801aafc:	9d01      	ldr	r5, [sp, #4]
 801aafe:	930f      	str	r3, [sp, #60]	; 0x3c
 801ab00:	4682      	mov	sl, r0
 801ab02:	468b      	mov	fp, r1
 801ab04:	4649      	mov	r1, r9
 801ab06:	4640      	mov	r0, r8
 801ab08:	f7e6 f83e 	bl	8000b88 <__aeabi_d2iz>
 801ab0c:	4606      	mov	r6, r0
 801ab0e:	f7e5 fd21 	bl	8000554 <__aeabi_i2d>
 801ab12:	3630      	adds	r6, #48	; 0x30
 801ab14:	4602      	mov	r2, r0
 801ab16:	460b      	mov	r3, r1
 801ab18:	4640      	mov	r0, r8
 801ab1a:	4649      	mov	r1, r9
 801ab1c:	f7e5 fbcc 	bl	80002b8 <__aeabi_dsub>
 801ab20:	f805 6b01 	strb.w	r6, [r5], #1
 801ab24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ab26:	429d      	cmp	r5, r3
 801ab28:	4680      	mov	r8, r0
 801ab2a:	4689      	mov	r9, r1
 801ab2c:	f04f 0200 	mov.w	r2, #0
 801ab30:	d124      	bne.n	801ab7c <_dtoa_r+0x60c>
 801ab32:	4b1b      	ldr	r3, [pc, #108]	; (801aba0 <_dtoa_r+0x630>)
 801ab34:	4650      	mov	r0, sl
 801ab36:	4659      	mov	r1, fp
 801ab38:	f7e5 fbc0 	bl	80002bc <__adddf3>
 801ab3c:	4602      	mov	r2, r0
 801ab3e:	460b      	mov	r3, r1
 801ab40:	4640      	mov	r0, r8
 801ab42:	4649      	mov	r1, r9
 801ab44:	f7e6 f800 	bl	8000b48 <__aeabi_dcmpgt>
 801ab48:	2800      	cmp	r0, #0
 801ab4a:	d173      	bne.n	801ac34 <_dtoa_r+0x6c4>
 801ab4c:	4652      	mov	r2, sl
 801ab4e:	465b      	mov	r3, fp
 801ab50:	4913      	ldr	r1, [pc, #76]	; (801aba0 <_dtoa_r+0x630>)
 801ab52:	2000      	movs	r0, #0
 801ab54:	f7e5 fbb0 	bl	80002b8 <__aeabi_dsub>
 801ab58:	4602      	mov	r2, r0
 801ab5a:	460b      	mov	r3, r1
 801ab5c:	4640      	mov	r0, r8
 801ab5e:	4649      	mov	r1, r9
 801ab60:	f7e5 ffd4 	bl	8000b0c <__aeabi_dcmplt>
 801ab64:	2800      	cmp	r0, #0
 801ab66:	f43f af35 	beq.w	801a9d4 <_dtoa_r+0x464>
 801ab6a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801ab6c:	1e6b      	subs	r3, r5, #1
 801ab6e:	930f      	str	r3, [sp, #60]	; 0x3c
 801ab70:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801ab74:	2b30      	cmp	r3, #48	; 0x30
 801ab76:	d0f8      	beq.n	801ab6a <_dtoa_r+0x5fa>
 801ab78:	9700      	str	r7, [sp, #0]
 801ab7a:	e049      	b.n	801ac10 <_dtoa_r+0x6a0>
 801ab7c:	4b05      	ldr	r3, [pc, #20]	; (801ab94 <_dtoa_r+0x624>)
 801ab7e:	f7e5 fd53 	bl	8000628 <__aeabi_dmul>
 801ab82:	4680      	mov	r8, r0
 801ab84:	4689      	mov	r9, r1
 801ab86:	e7bd      	b.n	801ab04 <_dtoa_r+0x594>
 801ab88:	080246b8 	.word	0x080246b8
 801ab8c:	08024690 	.word	0x08024690
 801ab90:	3ff00000 	.word	0x3ff00000
 801ab94:	40240000 	.word	0x40240000
 801ab98:	401c0000 	.word	0x401c0000
 801ab9c:	40140000 	.word	0x40140000
 801aba0:	3fe00000 	.word	0x3fe00000
 801aba4:	9d01      	ldr	r5, [sp, #4]
 801aba6:	4656      	mov	r6, sl
 801aba8:	465f      	mov	r7, fp
 801abaa:	4642      	mov	r2, r8
 801abac:	464b      	mov	r3, r9
 801abae:	4630      	mov	r0, r6
 801abb0:	4639      	mov	r1, r7
 801abb2:	f7e5 fe63 	bl	800087c <__aeabi_ddiv>
 801abb6:	f7e5 ffe7 	bl	8000b88 <__aeabi_d2iz>
 801abba:	4682      	mov	sl, r0
 801abbc:	f7e5 fcca 	bl	8000554 <__aeabi_i2d>
 801abc0:	4642      	mov	r2, r8
 801abc2:	464b      	mov	r3, r9
 801abc4:	f7e5 fd30 	bl	8000628 <__aeabi_dmul>
 801abc8:	4602      	mov	r2, r0
 801abca:	460b      	mov	r3, r1
 801abcc:	4630      	mov	r0, r6
 801abce:	4639      	mov	r1, r7
 801abd0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801abd4:	f7e5 fb70 	bl	80002b8 <__aeabi_dsub>
 801abd8:	f805 6b01 	strb.w	r6, [r5], #1
 801abdc:	9e01      	ldr	r6, [sp, #4]
 801abde:	9f03      	ldr	r7, [sp, #12]
 801abe0:	1bae      	subs	r6, r5, r6
 801abe2:	42b7      	cmp	r7, r6
 801abe4:	4602      	mov	r2, r0
 801abe6:	460b      	mov	r3, r1
 801abe8:	d135      	bne.n	801ac56 <_dtoa_r+0x6e6>
 801abea:	f7e5 fb67 	bl	80002bc <__adddf3>
 801abee:	4642      	mov	r2, r8
 801abf0:	464b      	mov	r3, r9
 801abf2:	4606      	mov	r6, r0
 801abf4:	460f      	mov	r7, r1
 801abf6:	f7e5 ffa7 	bl	8000b48 <__aeabi_dcmpgt>
 801abfa:	b9d0      	cbnz	r0, 801ac32 <_dtoa_r+0x6c2>
 801abfc:	4642      	mov	r2, r8
 801abfe:	464b      	mov	r3, r9
 801ac00:	4630      	mov	r0, r6
 801ac02:	4639      	mov	r1, r7
 801ac04:	f7e5 ff78 	bl	8000af8 <__aeabi_dcmpeq>
 801ac08:	b110      	cbz	r0, 801ac10 <_dtoa_r+0x6a0>
 801ac0a:	f01a 0f01 	tst.w	sl, #1
 801ac0e:	d110      	bne.n	801ac32 <_dtoa_r+0x6c2>
 801ac10:	4620      	mov	r0, r4
 801ac12:	ee18 1a10 	vmov	r1, s16
 801ac16:	f000 fe67 	bl	801b8e8 <_Bfree>
 801ac1a:	2300      	movs	r3, #0
 801ac1c:	9800      	ldr	r0, [sp, #0]
 801ac1e:	702b      	strb	r3, [r5, #0]
 801ac20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ac22:	3001      	adds	r0, #1
 801ac24:	6018      	str	r0, [r3, #0]
 801ac26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ac28:	2b00      	cmp	r3, #0
 801ac2a:	f43f acf1 	beq.w	801a610 <_dtoa_r+0xa0>
 801ac2e:	601d      	str	r5, [r3, #0]
 801ac30:	e4ee      	b.n	801a610 <_dtoa_r+0xa0>
 801ac32:	9f00      	ldr	r7, [sp, #0]
 801ac34:	462b      	mov	r3, r5
 801ac36:	461d      	mov	r5, r3
 801ac38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ac3c:	2a39      	cmp	r2, #57	; 0x39
 801ac3e:	d106      	bne.n	801ac4e <_dtoa_r+0x6de>
 801ac40:	9a01      	ldr	r2, [sp, #4]
 801ac42:	429a      	cmp	r2, r3
 801ac44:	d1f7      	bne.n	801ac36 <_dtoa_r+0x6c6>
 801ac46:	9901      	ldr	r1, [sp, #4]
 801ac48:	2230      	movs	r2, #48	; 0x30
 801ac4a:	3701      	adds	r7, #1
 801ac4c:	700a      	strb	r2, [r1, #0]
 801ac4e:	781a      	ldrb	r2, [r3, #0]
 801ac50:	3201      	adds	r2, #1
 801ac52:	701a      	strb	r2, [r3, #0]
 801ac54:	e790      	b.n	801ab78 <_dtoa_r+0x608>
 801ac56:	4ba6      	ldr	r3, [pc, #664]	; (801aef0 <_dtoa_r+0x980>)
 801ac58:	2200      	movs	r2, #0
 801ac5a:	f7e5 fce5 	bl	8000628 <__aeabi_dmul>
 801ac5e:	2200      	movs	r2, #0
 801ac60:	2300      	movs	r3, #0
 801ac62:	4606      	mov	r6, r0
 801ac64:	460f      	mov	r7, r1
 801ac66:	f7e5 ff47 	bl	8000af8 <__aeabi_dcmpeq>
 801ac6a:	2800      	cmp	r0, #0
 801ac6c:	d09d      	beq.n	801abaa <_dtoa_r+0x63a>
 801ac6e:	e7cf      	b.n	801ac10 <_dtoa_r+0x6a0>
 801ac70:	9a08      	ldr	r2, [sp, #32]
 801ac72:	2a00      	cmp	r2, #0
 801ac74:	f000 80d7 	beq.w	801ae26 <_dtoa_r+0x8b6>
 801ac78:	9a06      	ldr	r2, [sp, #24]
 801ac7a:	2a01      	cmp	r2, #1
 801ac7c:	f300 80ba 	bgt.w	801adf4 <_dtoa_r+0x884>
 801ac80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ac82:	2a00      	cmp	r2, #0
 801ac84:	f000 80b2 	beq.w	801adec <_dtoa_r+0x87c>
 801ac88:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801ac8c:	9e07      	ldr	r6, [sp, #28]
 801ac8e:	9d04      	ldr	r5, [sp, #16]
 801ac90:	9a04      	ldr	r2, [sp, #16]
 801ac92:	441a      	add	r2, r3
 801ac94:	9204      	str	r2, [sp, #16]
 801ac96:	9a05      	ldr	r2, [sp, #20]
 801ac98:	2101      	movs	r1, #1
 801ac9a:	441a      	add	r2, r3
 801ac9c:	4620      	mov	r0, r4
 801ac9e:	9205      	str	r2, [sp, #20]
 801aca0:	f000 ff24 	bl	801baec <__i2b>
 801aca4:	4607      	mov	r7, r0
 801aca6:	2d00      	cmp	r5, #0
 801aca8:	dd0c      	ble.n	801acc4 <_dtoa_r+0x754>
 801acaa:	9b05      	ldr	r3, [sp, #20]
 801acac:	2b00      	cmp	r3, #0
 801acae:	dd09      	ble.n	801acc4 <_dtoa_r+0x754>
 801acb0:	42ab      	cmp	r3, r5
 801acb2:	9a04      	ldr	r2, [sp, #16]
 801acb4:	bfa8      	it	ge
 801acb6:	462b      	movge	r3, r5
 801acb8:	1ad2      	subs	r2, r2, r3
 801acba:	9204      	str	r2, [sp, #16]
 801acbc:	9a05      	ldr	r2, [sp, #20]
 801acbe:	1aed      	subs	r5, r5, r3
 801acc0:	1ad3      	subs	r3, r2, r3
 801acc2:	9305      	str	r3, [sp, #20]
 801acc4:	9b07      	ldr	r3, [sp, #28]
 801acc6:	b31b      	cbz	r3, 801ad10 <_dtoa_r+0x7a0>
 801acc8:	9b08      	ldr	r3, [sp, #32]
 801acca:	2b00      	cmp	r3, #0
 801accc:	f000 80af 	beq.w	801ae2e <_dtoa_r+0x8be>
 801acd0:	2e00      	cmp	r6, #0
 801acd2:	dd13      	ble.n	801acfc <_dtoa_r+0x78c>
 801acd4:	4639      	mov	r1, r7
 801acd6:	4632      	mov	r2, r6
 801acd8:	4620      	mov	r0, r4
 801acda:	f000 ffc7 	bl	801bc6c <__pow5mult>
 801acde:	ee18 2a10 	vmov	r2, s16
 801ace2:	4601      	mov	r1, r0
 801ace4:	4607      	mov	r7, r0
 801ace6:	4620      	mov	r0, r4
 801ace8:	f000 ff16 	bl	801bb18 <__multiply>
 801acec:	ee18 1a10 	vmov	r1, s16
 801acf0:	4680      	mov	r8, r0
 801acf2:	4620      	mov	r0, r4
 801acf4:	f000 fdf8 	bl	801b8e8 <_Bfree>
 801acf8:	ee08 8a10 	vmov	s16, r8
 801acfc:	9b07      	ldr	r3, [sp, #28]
 801acfe:	1b9a      	subs	r2, r3, r6
 801ad00:	d006      	beq.n	801ad10 <_dtoa_r+0x7a0>
 801ad02:	ee18 1a10 	vmov	r1, s16
 801ad06:	4620      	mov	r0, r4
 801ad08:	f000 ffb0 	bl	801bc6c <__pow5mult>
 801ad0c:	ee08 0a10 	vmov	s16, r0
 801ad10:	2101      	movs	r1, #1
 801ad12:	4620      	mov	r0, r4
 801ad14:	f000 feea 	bl	801baec <__i2b>
 801ad18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ad1a:	2b00      	cmp	r3, #0
 801ad1c:	4606      	mov	r6, r0
 801ad1e:	f340 8088 	ble.w	801ae32 <_dtoa_r+0x8c2>
 801ad22:	461a      	mov	r2, r3
 801ad24:	4601      	mov	r1, r0
 801ad26:	4620      	mov	r0, r4
 801ad28:	f000 ffa0 	bl	801bc6c <__pow5mult>
 801ad2c:	9b06      	ldr	r3, [sp, #24]
 801ad2e:	2b01      	cmp	r3, #1
 801ad30:	4606      	mov	r6, r0
 801ad32:	f340 8081 	ble.w	801ae38 <_dtoa_r+0x8c8>
 801ad36:	f04f 0800 	mov.w	r8, #0
 801ad3a:	6933      	ldr	r3, [r6, #16]
 801ad3c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801ad40:	6918      	ldr	r0, [r3, #16]
 801ad42:	f000 fe83 	bl	801ba4c <__hi0bits>
 801ad46:	f1c0 0020 	rsb	r0, r0, #32
 801ad4a:	9b05      	ldr	r3, [sp, #20]
 801ad4c:	4418      	add	r0, r3
 801ad4e:	f010 001f 	ands.w	r0, r0, #31
 801ad52:	f000 8092 	beq.w	801ae7a <_dtoa_r+0x90a>
 801ad56:	f1c0 0320 	rsb	r3, r0, #32
 801ad5a:	2b04      	cmp	r3, #4
 801ad5c:	f340 808a 	ble.w	801ae74 <_dtoa_r+0x904>
 801ad60:	f1c0 001c 	rsb	r0, r0, #28
 801ad64:	9b04      	ldr	r3, [sp, #16]
 801ad66:	4403      	add	r3, r0
 801ad68:	9304      	str	r3, [sp, #16]
 801ad6a:	9b05      	ldr	r3, [sp, #20]
 801ad6c:	4403      	add	r3, r0
 801ad6e:	4405      	add	r5, r0
 801ad70:	9305      	str	r3, [sp, #20]
 801ad72:	9b04      	ldr	r3, [sp, #16]
 801ad74:	2b00      	cmp	r3, #0
 801ad76:	dd07      	ble.n	801ad88 <_dtoa_r+0x818>
 801ad78:	ee18 1a10 	vmov	r1, s16
 801ad7c:	461a      	mov	r2, r3
 801ad7e:	4620      	mov	r0, r4
 801ad80:	f000 ffce 	bl	801bd20 <__lshift>
 801ad84:	ee08 0a10 	vmov	s16, r0
 801ad88:	9b05      	ldr	r3, [sp, #20]
 801ad8a:	2b00      	cmp	r3, #0
 801ad8c:	dd05      	ble.n	801ad9a <_dtoa_r+0x82a>
 801ad8e:	4631      	mov	r1, r6
 801ad90:	461a      	mov	r2, r3
 801ad92:	4620      	mov	r0, r4
 801ad94:	f000 ffc4 	bl	801bd20 <__lshift>
 801ad98:	4606      	mov	r6, r0
 801ad9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ad9c:	2b00      	cmp	r3, #0
 801ad9e:	d06e      	beq.n	801ae7e <_dtoa_r+0x90e>
 801ada0:	ee18 0a10 	vmov	r0, s16
 801ada4:	4631      	mov	r1, r6
 801ada6:	f001 f82b 	bl	801be00 <__mcmp>
 801adaa:	2800      	cmp	r0, #0
 801adac:	da67      	bge.n	801ae7e <_dtoa_r+0x90e>
 801adae:	9b00      	ldr	r3, [sp, #0]
 801adb0:	3b01      	subs	r3, #1
 801adb2:	ee18 1a10 	vmov	r1, s16
 801adb6:	9300      	str	r3, [sp, #0]
 801adb8:	220a      	movs	r2, #10
 801adba:	2300      	movs	r3, #0
 801adbc:	4620      	mov	r0, r4
 801adbe:	f000 fdb5 	bl	801b92c <__multadd>
 801adc2:	9b08      	ldr	r3, [sp, #32]
 801adc4:	ee08 0a10 	vmov	s16, r0
 801adc8:	2b00      	cmp	r3, #0
 801adca:	f000 81b1 	beq.w	801b130 <_dtoa_r+0xbc0>
 801adce:	2300      	movs	r3, #0
 801add0:	4639      	mov	r1, r7
 801add2:	220a      	movs	r2, #10
 801add4:	4620      	mov	r0, r4
 801add6:	f000 fda9 	bl	801b92c <__multadd>
 801adda:	9b02      	ldr	r3, [sp, #8]
 801addc:	2b00      	cmp	r3, #0
 801adde:	4607      	mov	r7, r0
 801ade0:	f300 808e 	bgt.w	801af00 <_dtoa_r+0x990>
 801ade4:	9b06      	ldr	r3, [sp, #24]
 801ade6:	2b02      	cmp	r3, #2
 801ade8:	dc51      	bgt.n	801ae8e <_dtoa_r+0x91e>
 801adea:	e089      	b.n	801af00 <_dtoa_r+0x990>
 801adec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801adee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801adf2:	e74b      	b.n	801ac8c <_dtoa_r+0x71c>
 801adf4:	9b03      	ldr	r3, [sp, #12]
 801adf6:	1e5e      	subs	r6, r3, #1
 801adf8:	9b07      	ldr	r3, [sp, #28]
 801adfa:	42b3      	cmp	r3, r6
 801adfc:	bfbf      	itttt	lt
 801adfe:	9b07      	ldrlt	r3, [sp, #28]
 801ae00:	9607      	strlt	r6, [sp, #28]
 801ae02:	1af2      	sublt	r2, r6, r3
 801ae04:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801ae06:	bfb6      	itet	lt
 801ae08:	189b      	addlt	r3, r3, r2
 801ae0a:	1b9e      	subge	r6, r3, r6
 801ae0c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801ae0e:	9b03      	ldr	r3, [sp, #12]
 801ae10:	bfb8      	it	lt
 801ae12:	2600      	movlt	r6, #0
 801ae14:	2b00      	cmp	r3, #0
 801ae16:	bfb7      	itett	lt
 801ae18:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801ae1c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 801ae20:	1a9d      	sublt	r5, r3, r2
 801ae22:	2300      	movlt	r3, #0
 801ae24:	e734      	b.n	801ac90 <_dtoa_r+0x720>
 801ae26:	9e07      	ldr	r6, [sp, #28]
 801ae28:	9d04      	ldr	r5, [sp, #16]
 801ae2a:	9f08      	ldr	r7, [sp, #32]
 801ae2c:	e73b      	b.n	801aca6 <_dtoa_r+0x736>
 801ae2e:	9a07      	ldr	r2, [sp, #28]
 801ae30:	e767      	b.n	801ad02 <_dtoa_r+0x792>
 801ae32:	9b06      	ldr	r3, [sp, #24]
 801ae34:	2b01      	cmp	r3, #1
 801ae36:	dc18      	bgt.n	801ae6a <_dtoa_r+0x8fa>
 801ae38:	f1ba 0f00 	cmp.w	sl, #0
 801ae3c:	d115      	bne.n	801ae6a <_dtoa_r+0x8fa>
 801ae3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ae42:	b993      	cbnz	r3, 801ae6a <_dtoa_r+0x8fa>
 801ae44:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801ae48:	0d1b      	lsrs	r3, r3, #20
 801ae4a:	051b      	lsls	r3, r3, #20
 801ae4c:	b183      	cbz	r3, 801ae70 <_dtoa_r+0x900>
 801ae4e:	9b04      	ldr	r3, [sp, #16]
 801ae50:	3301      	adds	r3, #1
 801ae52:	9304      	str	r3, [sp, #16]
 801ae54:	9b05      	ldr	r3, [sp, #20]
 801ae56:	3301      	adds	r3, #1
 801ae58:	9305      	str	r3, [sp, #20]
 801ae5a:	f04f 0801 	mov.w	r8, #1
 801ae5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ae60:	2b00      	cmp	r3, #0
 801ae62:	f47f af6a 	bne.w	801ad3a <_dtoa_r+0x7ca>
 801ae66:	2001      	movs	r0, #1
 801ae68:	e76f      	b.n	801ad4a <_dtoa_r+0x7da>
 801ae6a:	f04f 0800 	mov.w	r8, #0
 801ae6e:	e7f6      	b.n	801ae5e <_dtoa_r+0x8ee>
 801ae70:	4698      	mov	r8, r3
 801ae72:	e7f4      	b.n	801ae5e <_dtoa_r+0x8ee>
 801ae74:	f43f af7d 	beq.w	801ad72 <_dtoa_r+0x802>
 801ae78:	4618      	mov	r0, r3
 801ae7a:	301c      	adds	r0, #28
 801ae7c:	e772      	b.n	801ad64 <_dtoa_r+0x7f4>
 801ae7e:	9b03      	ldr	r3, [sp, #12]
 801ae80:	2b00      	cmp	r3, #0
 801ae82:	dc37      	bgt.n	801aef4 <_dtoa_r+0x984>
 801ae84:	9b06      	ldr	r3, [sp, #24]
 801ae86:	2b02      	cmp	r3, #2
 801ae88:	dd34      	ble.n	801aef4 <_dtoa_r+0x984>
 801ae8a:	9b03      	ldr	r3, [sp, #12]
 801ae8c:	9302      	str	r3, [sp, #8]
 801ae8e:	9b02      	ldr	r3, [sp, #8]
 801ae90:	b96b      	cbnz	r3, 801aeae <_dtoa_r+0x93e>
 801ae92:	4631      	mov	r1, r6
 801ae94:	2205      	movs	r2, #5
 801ae96:	4620      	mov	r0, r4
 801ae98:	f000 fd48 	bl	801b92c <__multadd>
 801ae9c:	4601      	mov	r1, r0
 801ae9e:	4606      	mov	r6, r0
 801aea0:	ee18 0a10 	vmov	r0, s16
 801aea4:	f000 ffac 	bl	801be00 <__mcmp>
 801aea8:	2800      	cmp	r0, #0
 801aeaa:	f73f adbb 	bgt.w	801aa24 <_dtoa_r+0x4b4>
 801aeae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aeb0:	9d01      	ldr	r5, [sp, #4]
 801aeb2:	43db      	mvns	r3, r3
 801aeb4:	9300      	str	r3, [sp, #0]
 801aeb6:	f04f 0800 	mov.w	r8, #0
 801aeba:	4631      	mov	r1, r6
 801aebc:	4620      	mov	r0, r4
 801aebe:	f000 fd13 	bl	801b8e8 <_Bfree>
 801aec2:	2f00      	cmp	r7, #0
 801aec4:	f43f aea4 	beq.w	801ac10 <_dtoa_r+0x6a0>
 801aec8:	f1b8 0f00 	cmp.w	r8, #0
 801aecc:	d005      	beq.n	801aeda <_dtoa_r+0x96a>
 801aece:	45b8      	cmp	r8, r7
 801aed0:	d003      	beq.n	801aeda <_dtoa_r+0x96a>
 801aed2:	4641      	mov	r1, r8
 801aed4:	4620      	mov	r0, r4
 801aed6:	f000 fd07 	bl	801b8e8 <_Bfree>
 801aeda:	4639      	mov	r1, r7
 801aedc:	4620      	mov	r0, r4
 801aede:	f000 fd03 	bl	801b8e8 <_Bfree>
 801aee2:	e695      	b.n	801ac10 <_dtoa_r+0x6a0>
 801aee4:	2600      	movs	r6, #0
 801aee6:	4637      	mov	r7, r6
 801aee8:	e7e1      	b.n	801aeae <_dtoa_r+0x93e>
 801aeea:	9700      	str	r7, [sp, #0]
 801aeec:	4637      	mov	r7, r6
 801aeee:	e599      	b.n	801aa24 <_dtoa_r+0x4b4>
 801aef0:	40240000 	.word	0x40240000
 801aef4:	9b08      	ldr	r3, [sp, #32]
 801aef6:	2b00      	cmp	r3, #0
 801aef8:	f000 80ca 	beq.w	801b090 <_dtoa_r+0xb20>
 801aefc:	9b03      	ldr	r3, [sp, #12]
 801aefe:	9302      	str	r3, [sp, #8]
 801af00:	2d00      	cmp	r5, #0
 801af02:	dd05      	ble.n	801af10 <_dtoa_r+0x9a0>
 801af04:	4639      	mov	r1, r7
 801af06:	462a      	mov	r2, r5
 801af08:	4620      	mov	r0, r4
 801af0a:	f000 ff09 	bl	801bd20 <__lshift>
 801af0e:	4607      	mov	r7, r0
 801af10:	f1b8 0f00 	cmp.w	r8, #0
 801af14:	d05b      	beq.n	801afce <_dtoa_r+0xa5e>
 801af16:	6879      	ldr	r1, [r7, #4]
 801af18:	4620      	mov	r0, r4
 801af1a:	f000 fca5 	bl	801b868 <_Balloc>
 801af1e:	4605      	mov	r5, r0
 801af20:	b928      	cbnz	r0, 801af2e <_dtoa_r+0x9be>
 801af22:	4b87      	ldr	r3, [pc, #540]	; (801b140 <_dtoa_r+0xbd0>)
 801af24:	4602      	mov	r2, r0
 801af26:	f240 21ea 	movw	r1, #746	; 0x2ea
 801af2a:	f7ff bb3b 	b.w	801a5a4 <_dtoa_r+0x34>
 801af2e:	693a      	ldr	r2, [r7, #16]
 801af30:	3202      	adds	r2, #2
 801af32:	0092      	lsls	r2, r2, #2
 801af34:	f107 010c 	add.w	r1, r7, #12
 801af38:	300c      	adds	r0, #12
 801af3a:	f7fd fd2b 	bl	8018994 <memcpy>
 801af3e:	2201      	movs	r2, #1
 801af40:	4629      	mov	r1, r5
 801af42:	4620      	mov	r0, r4
 801af44:	f000 feec 	bl	801bd20 <__lshift>
 801af48:	9b01      	ldr	r3, [sp, #4]
 801af4a:	f103 0901 	add.w	r9, r3, #1
 801af4e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801af52:	4413      	add	r3, r2
 801af54:	9305      	str	r3, [sp, #20]
 801af56:	f00a 0301 	and.w	r3, sl, #1
 801af5a:	46b8      	mov	r8, r7
 801af5c:	9304      	str	r3, [sp, #16]
 801af5e:	4607      	mov	r7, r0
 801af60:	4631      	mov	r1, r6
 801af62:	ee18 0a10 	vmov	r0, s16
 801af66:	f7ff fa77 	bl	801a458 <quorem>
 801af6a:	4641      	mov	r1, r8
 801af6c:	9002      	str	r0, [sp, #8]
 801af6e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801af72:	ee18 0a10 	vmov	r0, s16
 801af76:	f000 ff43 	bl	801be00 <__mcmp>
 801af7a:	463a      	mov	r2, r7
 801af7c:	9003      	str	r0, [sp, #12]
 801af7e:	4631      	mov	r1, r6
 801af80:	4620      	mov	r0, r4
 801af82:	f000 ff59 	bl	801be38 <__mdiff>
 801af86:	68c2      	ldr	r2, [r0, #12]
 801af88:	f109 3bff 	add.w	fp, r9, #4294967295
 801af8c:	4605      	mov	r5, r0
 801af8e:	bb02      	cbnz	r2, 801afd2 <_dtoa_r+0xa62>
 801af90:	4601      	mov	r1, r0
 801af92:	ee18 0a10 	vmov	r0, s16
 801af96:	f000 ff33 	bl	801be00 <__mcmp>
 801af9a:	4602      	mov	r2, r0
 801af9c:	4629      	mov	r1, r5
 801af9e:	4620      	mov	r0, r4
 801afa0:	9207      	str	r2, [sp, #28]
 801afa2:	f000 fca1 	bl	801b8e8 <_Bfree>
 801afa6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801afaa:	ea43 0102 	orr.w	r1, r3, r2
 801afae:	9b04      	ldr	r3, [sp, #16]
 801afb0:	430b      	orrs	r3, r1
 801afb2:	464d      	mov	r5, r9
 801afb4:	d10f      	bne.n	801afd6 <_dtoa_r+0xa66>
 801afb6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801afba:	d02a      	beq.n	801b012 <_dtoa_r+0xaa2>
 801afbc:	9b03      	ldr	r3, [sp, #12]
 801afbe:	2b00      	cmp	r3, #0
 801afc0:	dd02      	ble.n	801afc8 <_dtoa_r+0xa58>
 801afc2:	9b02      	ldr	r3, [sp, #8]
 801afc4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801afc8:	f88b a000 	strb.w	sl, [fp]
 801afcc:	e775      	b.n	801aeba <_dtoa_r+0x94a>
 801afce:	4638      	mov	r0, r7
 801afd0:	e7ba      	b.n	801af48 <_dtoa_r+0x9d8>
 801afd2:	2201      	movs	r2, #1
 801afd4:	e7e2      	b.n	801af9c <_dtoa_r+0xa2c>
 801afd6:	9b03      	ldr	r3, [sp, #12]
 801afd8:	2b00      	cmp	r3, #0
 801afda:	db04      	blt.n	801afe6 <_dtoa_r+0xa76>
 801afdc:	9906      	ldr	r1, [sp, #24]
 801afde:	430b      	orrs	r3, r1
 801afe0:	9904      	ldr	r1, [sp, #16]
 801afe2:	430b      	orrs	r3, r1
 801afe4:	d122      	bne.n	801b02c <_dtoa_r+0xabc>
 801afe6:	2a00      	cmp	r2, #0
 801afe8:	ddee      	ble.n	801afc8 <_dtoa_r+0xa58>
 801afea:	ee18 1a10 	vmov	r1, s16
 801afee:	2201      	movs	r2, #1
 801aff0:	4620      	mov	r0, r4
 801aff2:	f000 fe95 	bl	801bd20 <__lshift>
 801aff6:	4631      	mov	r1, r6
 801aff8:	ee08 0a10 	vmov	s16, r0
 801affc:	f000 ff00 	bl	801be00 <__mcmp>
 801b000:	2800      	cmp	r0, #0
 801b002:	dc03      	bgt.n	801b00c <_dtoa_r+0xa9c>
 801b004:	d1e0      	bne.n	801afc8 <_dtoa_r+0xa58>
 801b006:	f01a 0f01 	tst.w	sl, #1
 801b00a:	d0dd      	beq.n	801afc8 <_dtoa_r+0xa58>
 801b00c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801b010:	d1d7      	bne.n	801afc2 <_dtoa_r+0xa52>
 801b012:	2339      	movs	r3, #57	; 0x39
 801b014:	f88b 3000 	strb.w	r3, [fp]
 801b018:	462b      	mov	r3, r5
 801b01a:	461d      	mov	r5, r3
 801b01c:	3b01      	subs	r3, #1
 801b01e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801b022:	2a39      	cmp	r2, #57	; 0x39
 801b024:	d071      	beq.n	801b10a <_dtoa_r+0xb9a>
 801b026:	3201      	adds	r2, #1
 801b028:	701a      	strb	r2, [r3, #0]
 801b02a:	e746      	b.n	801aeba <_dtoa_r+0x94a>
 801b02c:	2a00      	cmp	r2, #0
 801b02e:	dd07      	ble.n	801b040 <_dtoa_r+0xad0>
 801b030:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801b034:	d0ed      	beq.n	801b012 <_dtoa_r+0xaa2>
 801b036:	f10a 0301 	add.w	r3, sl, #1
 801b03a:	f88b 3000 	strb.w	r3, [fp]
 801b03e:	e73c      	b.n	801aeba <_dtoa_r+0x94a>
 801b040:	9b05      	ldr	r3, [sp, #20]
 801b042:	f809 ac01 	strb.w	sl, [r9, #-1]
 801b046:	4599      	cmp	r9, r3
 801b048:	d047      	beq.n	801b0da <_dtoa_r+0xb6a>
 801b04a:	ee18 1a10 	vmov	r1, s16
 801b04e:	2300      	movs	r3, #0
 801b050:	220a      	movs	r2, #10
 801b052:	4620      	mov	r0, r4
 801b054:	f000 fc6a 	bl	801b92c <__multadd>
 801b058:	45b8      	cmp	r8, r7
 801b05a:	ee08 0a10 	vmov	s16, r0
 801b05e:	f04f 0300 	mov.w	r3, #0
 801b062:	f04f 020a 	mov.w	r2, #10
 801b066:	4641      	mov	r1, r8
 801b068:	4620      	mov	r0, r4
 801b06a:	d106      	bne.n	801b07a <_dtoa_r+0xb0a>
 801b06c:	f000 fc5e 	bl	801b92c <__multadd>
 801b070:	4680      	mov	r8, r0
 801b072:	4607      	mov	r7, r0
 801b074:	f109 0901 	add.w	r9, r9, #1
 801b078:	e772      	b.n	801af60 <_dtoa_r+0x9f0>
 801b07a:	f000 fc57 	bl	801b92c <__multadd>
 801b07e:	4639      	mov	r1, r7
 801b080:	4680      	mov	r8, r0
 801b082:	2300      	movs	r3, #0
 801b084:	220a      	movs	r2, #10
 801b086:	4620      	mov	r0, r4
 801b088:	f000 fc50 	bl	801b92c <__multadd>
 801b08c:	4607      	mov	r7, r0
 801b08e:	e7f1      	b.n	801b074 <_dtoa_r+0xb04>
 801b090:	9b03      	ldr	r3, [sp, #12]
 801b092:	9302      	str	r3, [sp, #8]
 801b094:	9d01      	ldr	r5, [sp, #4]
 801b096:	ee18 0a10 	vmov	r0, s16
 801b09a:	4631      	mov	r1, r6
 801b09c:	f7ff f9dc 	bl	801a458 <quorem>
 801b0a0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801b0a4:	9b01      	ldr	r3, [sp, #4]
 801b0a6:	f805 ab01 	strb.w	sl, [r5], #1
 801b0aa:	1aea      	subs	r2, r5, r3
 801b0ac:	9b02      	ldr	r3, [sp, #8]
 801b0ae:	4293      	cmp	r3, r2
 801b0b0:	dd09      	ble.n	801b0c6 <_dtoa_r+0xb56>
 801b0b2:	ee18 1a10 	vmov	r1, s16
 801b0b6:	2300      	movs	r3, #0
 801b0b8:	220a      	movs	r2, #10
 801b0ba:	4620      	mov	r0, r4
 801b0bc:	f000 fc36 	bl	801b92c <__multadd>
 801b0c0:	ee08 0a10 	vmov	s16, r0
 801b0c4:	e7e7      	b.n	801b096 <_dtoa_r+0xb26>
 801b0c6:	9b02      	ldr	r3, [sp, #8]
 801b0c8:	2b00      	cmp	r3, #0
 801b0ca:	bfc8      	it	gt
 801b0cc:	461d      	movgt	r5, r3
 801b0ce:	9b01      	ldr	r3, [sp, #4]
 801b0d0:	bfd8      	it	le
 801b0d2:	2501      	movle	r5, #1
 801b0d4:	441d      	add	r5, r3
 801b0d6:	f04f 0800 	mov.w	r8, #0
 801b0da:	ee18 1a10 	vmov	r1, s16
 801b0de:	2201      	movs	r2, #1
 801b0e0:	4620      	mov	r0, r4
 801b0e2:	f000 fe1d 	bl	801bd20 <__lshift>
 801b0e6:	4631      	mov	r1, r6
 801b0e8:	ee08 0a10 	vmov	s16, r0
 801b0ec:	f000 fe88 	bl	801be00 <__mcmp>
 801b0f0:	2800      	cmp	r0, #0
 801b0f2:	dc91      	bgt.n	801b018 <_dtoa_r+0xaa8>
 801b0f4:	d102      	bne.n	801b0fc <_dtoa_r+0xb8c>
 801b0f6:	f01a 0f01 	tst.w	sl, #1
 801b0fa:	d18d      	bne.n	801b018 <_dtoa_r+0xaa8>
 801b0fc:	462b      	mov	r3, r5
 801b0fe:	461d      	mov	r5, r3
 801b100:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b104:	2a30      	cmp	r2, #48	; 0x30
 801b106:	d0fa      	beq.n	801b0fe <_dtoa_r+0xb8e>
 801b108:	e6d7      	b.n	801aeba <_dtoa_r+0x94a>
 801b10a:	9a01      	ldr	r2, [sp, #4]
 801b10c:	429a      	cmp	r2, r3
 801b10e:	d184      	bne.n	801b01a <_dtoa_r+0xaaa>
 801b110:	9b00      	ldr	r3, [sp, #0]
 801b112:	3301      	adds	r3, #1
 801b114:	9300      	str	r3, [sp, #0]
 801b116:	2331      	movs	r3, #49	; 0x31
 801b118:	7013      	strb	r3, [r2, #0]
 801b11a:	e6ce      	b.n	801aeba <_dtoa_r+0x94a>
 801b11c:	4b09      	ldr	r3, [pc, #36]	; (801b144 <_dtoa_r+0xbd4>)
 801b11e:	f7ff ba95 	b.w	801a64c <_dtoa_r+0xdc>
 801b122:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b124:	2b00      	cmp	r3, #0
 801b126:	f47f aa6e 	bne.w	801a606 <_dtoa_r+0x96>
 801b12a:	4b07      	ldr	r3, [pc, #28]	; (801b148 <_dtoa_r+0xbd8>)
 801b12c:	f7ff ba8e 	b.w	801a64c <_dtoa_r+0xdc>
 801b130:	9b02      	ldr	r3, [sp, #8]
 801b132:	2b00      	cmp	r3, #0
 801b134:	dcae      	bgt.n	801b094 <_dtoa_r+0xb24>
 801b136:	9b06      	ldr	r3, [sp, #24]
 801b138:	2b02      	cmp	r3, #2
 801b13a:	f73f aea8 	bgt.w	801ae8e <_dtoa_r+0x91e>
 801b13e:	e7a9      	b.n	801b094 <_dtoa_r+0xb24>
 801b140:	080245a8 	.word	0x080245a8
 801b144:	080243ac 	.word	0x080243ac
 801b148:	08024529 	.word	0x08024529

0801b14c <rshift>:
 801b14c:	6903      	ldr	r3, [r0, #16]
 801b14e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801b152:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b156:	ea4f 1261 	mov.w	r2, r1, asr #5
 801b15a:	f100 0414 	add.w	r4, r0, #20
 801b15e:	dd45      	ble.n	801b1ec <rshift+0xa0>
 801b160:	f011 011f 	ands.w	r1, r1, #31
 801b164:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801b168:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801b16c:	d10c      	bne.n	801b188 <rshift+0x3c>
 801b16e:	f100 0710 	add.w	r7, r0, #16
 801b172:	4629      	mov	r1, r5
 801b174:	42b1      	cmp	r1, r6
 801b176:	d334      	bcc.n	801b1e2 <rshift+0x96>
 801b178:	1a9b      	subs	r3, r3, r2
 801b17a:	009b      	lsls	r3, r3, #2
 801b17c:	1eea      	subs	r2, r5, #3
 801b17e:	4296      	cmp	r6, r2
 801b180:	bf38      	it	cc
 801b182:	2300      	movcc	r3, #0
 801b184:	4423      	add	r3, r4
 801b186:	e015      	b.n	801b1b4 <rshift+0x68>
 801b188:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801b18c:	f1c1 0820 	rsb	r8, r1, #32
 801b190:	40cf      	lsrs	r7, r1
 801b192:	f105 0e04 	add.w	lr, r5, #4
 801b196:	46a1      	mov	r9, r4
 801b198:	4576      	cmp	r6, lr
 801b19a:	46f4      	mov	ip, lr
 801b19c:	d815      	bhi.n	801b1ca <rshift+0x7e>
 801b19e:	1a9a      	subs	r2, r3, r2
 801b1a0:	0092      	lsls	r2, r2, #2
 801b1a2:	3a04      	subs	r2, #4
 801b1a4:	3501      	adds	r5, #1
 801b1a6:	42ae      	cmp	r6, r5
 801b1a8:	bf38      	it	cc
 801b1aa:	2200      	movcc	r2, #0
 801b1ac:	18a3      	adds	r3, r4, r2
 801b1ae:	50a7      	str	r7, [r4, r2]
 801b1b0:	b107      	cbz	r7, 801b1b4 <rshift+0x68>
 801b1b2:	3304      	adds	r3, #4
 801b1b4:	1b1a      	subs	r2, r3, r4
 801b1b6:	42a3      	cmp	r3, r4
 801b1b8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801b1bc:	bf08      	it	eq
 801b1be:	2300      	moveq	r3, #0
 801b1c0:	6102      	str	r2, [r0, #16]
 801b1c2:	bf08      	it	eq
 801b1c4:	6143      	streq	r3, [r0, #20]
 801b1c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b1ca:	f8dc c000 	ldr.w	ip, [ip]
 801b1ce:	fa0c fc08 	lsl.w	ip, ip, r8
 801b1d2:	ea4c 0707 	orr.w	r7, ip, r7
 801b1d6:	f849 7b04 	str.w	r7, [r9], #4
 801b1da:	f85e 7b04 	ldr.w	r7, [lr], #4
 801b1de:	40cf      	lsrs	r7, r1
 801b1e0:	e7da      	b.n	801b198 <rshift+0x4c>
 801b1e2:	f851 cb04 	ldr.w	ip, [r1], #4
 801b1e6:	f847 cf04 	str.w	ip, [r7, #4]!
 801b1ea:	e7c3      	b.n	801b174 <rshift+0x28>
 801b1ec:	4623      	mov	r3, r4
 801b1ee:	e7e1      	b.n	801b1b4 <rshift+0x68>

0801b1f0 <__hexdig_fun>:
 801b1f0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801b1f4:	2b09      	cmp	r3, #9
 801b1f6:	d802      	bhi.n	801b1fe <__hexdig_fun+0xe>
 801b1f8:	3820      	subs	r0, #32
 801b1fa:	b2c0      	uxtb	r0, r0
 801b1fc:	4770      	bx	lr
 801b1fe:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801b202:	2b05      	cmp	r3, #5
 801b204:	d801      	bhi.n	801b20a <__hexdig_fun+0x1a>
 801b206:	3847      	subs	r0, #71	; 0x47
 801b208:	e7f7      	b.n	801b1fa <__hexdig_fun+0xa>
 801b20a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801b20e:	2b05      	cmp	r3, #5
 801b210:	d801      	bhi.n	801b216 <__hexdig_fun+0x26>
 801b212:	3827      	subs	r0, #39	; 0x27
 801b214:	e7f1      	b.n	801b1fa <__hexdig_fun+0xa>
 801b216:	2000      	movs	r0, #0
 801b218:	4770      	bx	lr
	...

0801b21c <__gethex>:
 801b21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b220:	ed2d 8b02 	vpush	{d8}
 801b224:	b089      	sub	sp, #36	; 0x24
 801b226:	ee08 0a10 	vmov	s16, r0
 801b22a:	9304      	str	r3, [sp, #16]
 801b22c:	4bb4      	ldr	r3, [pc, #720]	; (801b500 <__gethex+0x2e4>)
 801b22e:	681b      	ldr	r3, [r3, #0]
 801b230:	9301      	str	r3, [sp, #4]
 801b232:	4618      	mov	r0, r3
 801b234:	468b      	mov	fp, r1
 801b236:	4690      	mov	r8, r2
 801b238:	f7e4 ffe2 	bl	8000200 <strlen>
 801b23c:	9b01      	ldr	r3, [sp, #4]
 801b23e:	f8db 2000 	ldr.w	r2, [fp]
 801b242:	4403      	add	r3, r0
 801b244:	4682      	mov	sl, r0
 801b246:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801b24a:	9305      	str	r3, [sp, #20]
 801b24c:	1c93      	adds	r3, r2, #2
 801b24e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801b252:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801b256:	32fe      	adds	r2, #254	; 0xfe
 801b258:	18d1      	adds	r1, r2, r3
 801b25a:	461f      	mov	r7, r3
 801b25c:	f813 0b01 	ldrb.w	r0, [r3], #1
 801b260:	9100      	str	r1, [sp, #0]
 801b262:	2830      	cmp	r0, #48	; 0x30
 801b264:	d0f8      	beq.n	801b258 <__gethex+0x3c>
 801b266:	f7ff ffc3 	bl	801b1f0 <__hexdig_fun>
 801b26a:	4604      	mov	r4, r0
 801b26c:	2800      	cmp	r0, #0
 801b26e:	d13a      	bne.n	801b2e6 <__gethex+0xca>
 801b270:	9901      	ldr	r1, [sp, #4]
 801b272:	4652      	mov	r2, sl
 801b274:	4638      	mov	r0, r7
 801b276:	f001 fa23 	bl	801c6c0 <strncmp>
 801b27a:	4605      	mov	r5, r0
 801b27c:	2800      	cmp	r0, #0
 801b27e:	d168      	bne.n	801b352 <__gethex+0x136>
 801b280:	f817 000a 	ldrb.w	r0, [r7, sl]
 801b284:	eb07 060a 	add.w	r6, r7, sl
 801b288:	f7ff ffb2 	bl	801b1f0 <__hexdig_fun>
 801b28c:	2800      	cmp	r0, #0
 801b28e:	d062      	beq.n	801b356 <__gethex+0x13a>
 801b290:	4633      	mov	r3, r6
 801b292:	7818      	ldrb	r0, [r3, #0]
 801b294:	2830      	cmp	r0, #48	; 0x30
 801b296:	461f      	mov	r7, r3
 801b298:	f103 0301 	add.w	r3, r3, #1
 801b29c:	d0f9      	beq.n	801b292 <__gethex+0x76>
 801b29e:	f7ff ffa7 	bl	801b1f0 <__hexdig_fun>
 801b2a2:	2301      	movs	r3, #1
 801b2a4:	fab0 f480 	clz	r4, r0
 801b2a8:	0964      	lsrs	r4, r4, #5
 801b2aa:	4635      	mov	r5, r6
 801b2ac:	9300      	str	r3, [sp, #0]
 801b2ae:	463a      	mov	r2, r7
 801b2b0:	4616      	mov	r6, r2
 801b2b2:	3201      	adds	r2, #1
 801b2b4:	7830      	ldrb	r0, [r6, #0]
 801b2b6:	f7ff ff9b 	bl	801b1f0 <__hexdig_fun>
 801b2ba:	2800      	cmp	r0, #0
 801b2bc:	d1f8      	bne.n	801b2b0 <__gethex+0x94>
 801b2be:	9901      	ldr	r1, [sp, #4]
 801b2c0:	4652      	mov	r2, sl
 801b2c2:	4630      	mov	r0, r6
 801b2c4:	f001 f9fc 	bl	801c6c0 <strncmp>
 801b2c8:	b980      	cbnz	r0, 801b2ec <__gethex+0xd0>
 801b2ca:	b94d      	cbnz	r5, 801b2e0 <__gethex+0xc4>
 801b2cc:	eb06 050a 	add.w	r5, r6, sl
 801b2d0:	462a      	mov	r2, r5
 801b2d2:	4616      	mov	r6, r2
 801b2d4:	3201      	adds	r2, #1
 801b2d6:	7830      	ldrb	r0, [r6, #0]
 801b2d8:	f7ff ff8a 	bl	801b1f0 <__hexdig_fun>
 801b2dc:	2800      	cmp	r0, #0
 801b2de:	d1f8      	bne.n	801b2d2 <__gethex+0xb6>
 801b2e0:	1bad      	subs	r5, r5, r6
 801b2e2:	00ad      	lsls	r5, r5, #2
 801b2e4:	e004      	b.n	801b2f0 <__gethex+0xd4>
 801b2e6:	2400      	movs	r4, #0
 801b2e8:	4625      	mov	r5, r4
 801b2ea:	e7e0      	b.n	801b2ae <__gethex+0x92>
 801b2ec:	2d00      	cmp	r5, #0
 801b2ee:	d1f7      	bne.n	801b2e0 <__gethex+0xc4>
 801b2f0:	7833      	ldrb	r3, [r6, #0]
 801b2f2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801b2f6:	2b50      	cmp	r3, #80	; 0x50
 801b2f8:	d13b      	bne.n	801b372 <__gethex+0x156>
 801b2fa:	7873      	ldrb	r3, [r6, #1]
 801b2fc:	2b2b      	cmp	r3, #43	; 0x2b
 801b2fe:	d02c      	beq.n	801b35a <__gethex+0x13e>
 801b300:	2b2d      	cmp	r3, #45	; 0x2d
 801b302:	d02e      	beq.n	801b362 <__gethex+0x146>
 801b304:	1c71      	adds	r1, r6, #1
 801b306:	f04f 0900 	mov.w	r9, #0
 801b30a:	7808      	ldrb	r0, [r1, #0]
 801b30c:	f7ff ff70 	bl	801b1f0 <__hexdig_fun>
 801b310:	1e43      	subs	r3, r0, #1
 801b312:	b2db      	uxtb	r3, r3
 801b314:	2b18      	cmp	r3, #24
 801b316:	d82c      	bhi.n	801b372 <__gethex+0x156>
 801b318:	f1a0 0210 	sub.w	r2, r0, #16
 801b31c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801b320:	f7ff ff66 	bl	801b1f0 <__hexdig_fun>
 801b324:	1e43      	subs	r3, r0, #1
 801b326:	b2db      	uxtb	r3, r3
 801b328:	2b18      	cmp	r3, #24
 801b32a:	d91d      	bls.n	801b368 <__gethex+0x14c>
 801b32c:	f1b9 0f00 	cmp.w	r9, #0
 801b330:	d000      	beq.n	801b334 <__gethex+0x118>
 801b332:	4252      	negs	r2, r2
 801b334:	4415      	add	r5, r2
 801b336:	f8cb 1000 	str.w	r1, [fp]
 801b33a:	b1e4      	cbz	r4, 801b376 <__gethex+0x15a>
 801b33c:	9b00      	ldr	r3, [sp, #0]
 801b33e:	2b00      	cmp	r3, #0
 801b340:	bf14      	ite	ne
 801b342:	2700      	movne	r7, #0
 801b344:	2706      	moveq	r7, #6
 801b346:	4638      	mov	r0, r7
 801b348:	b009      	add	sp, #36	; 0x24
 801b34a:	ecbd 8b02 	vpop	{d8}
 801b34e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b352:	463e      	mov	r6, r7
 801b354:	4625      	mov	r5, r4
 801b356:	2401      	movs	r4, #1
 801b358:	e7ca      	b.n	801b2f0 <__gethex+0xd4>
 801b35a:	f04f 0900 	mov.w	r9, #0
 801b35e:	1cb1      	adds	r1, r6, #2
 801b360:	e7d3      	b.n	801b30a <__gethex+0xee>
 801b362:	f04f 0901 	mov.w	r9, #1
 801b366:	e7fa      	b.n	801b35e <__gethex+0x142>
 801b368:	230a      	movs	r3, #10
 801b36a:	fb03 0202 	mla	r2, r3, r2, r0
 801b36e:	3a10      	subs	r2, #16
 801b370:	e7d4      	b.n	801b31c <__gethex+0x100>
 801b372:	4631      	mov	r1, r6
 801b374:	e7df      	b.n	801b336 <__gethex+0x11a>
 801b376:	1bf3      	subs	r3, r6, r7
 801b378:	3b01      	subs	r3, #1
 801b37a:	4621      	mov	r1, r4
 801b37c:	2b07      	cmp	r3, #7
 801b37e:	dc0b      	bgt.n	801b398 <__gethex+0x17c>
 801b380:	ee18 0a10 	vmov	r0, s16
 801b384:	f000 fa70 	bl	801b868 <_Balloc>
 801b388:	4604      	mov	r4, r0
 801b38a:	b940      	cbnz	r0, 801b39e <__gethex+0x182>
 801b38c:	4b5d      	ldr	r3, [pc, #372]	; (801b504 <__gethex+0x2e8>)
 801b38e:	4602      	mov	r2, r0
 801b390:	21de      	movs	r1, #222	; 0xde
 801b392:	485d      	ldr	r0, [pc, #372]	; (801b508 <__gethex+0x2ec>)
 801b394:	f001 f9b6 	bl	801c704 <__assert_func>
 801b398:	3101      	adds	r1, #1
 801b39a:	105b      	asrs	r3, r3, #1
 801b39c:	e7ee      	b.n	801b37c <__gethex+0x160>
 801b39e:	f100 0914 	add.w	r9, r0, #20
 801b3a2:	f04f 0b00 	mov.w	fp, #0
 801b3a6:	f1ca 0301 	rsb	r3, sl, #1
 801b3aa:	f8cd 9008 	str.w	r9, [sp, #8]
 801b3ae:	f8cd b000 	str.w	fp, [sp]
 801b3b2:	9306      	str	r3, [sp, #24]
 801b3b4:	42b7      	cmp	r7, r6
 801b3b6:	d340      	bcc.n	801b43a <__gethex+0x21e>
 801b3b8:	9802      	ldr	r0, [sp, #8]
 801b3ba:	9b00      	ldr	r3, [sp, #0]
 801b3bc:	f840 3b04 	str.w	r3, [r0], #4
 801b3c0:	eba0 0009 	sub.w	r0, r0, r9
 801b3c4:	1080      	asrs	r0, r0, #2
 801b3c6:	0146      	lsls	r6, r0, #5
 801b3c8:	6120      	str	r0, [r4, #16]
 801b3ca:	4618      	mov	r0, r3
 801b3cc:	f000 fb3e 	bl	801ba4c <__hi0bits>
 801b3d0:	1a30      	subs	r0, r6, r0
 801b3d2:	f8d8 6000 	ldr.w	r6, [r8]
 801b3d6:	42b0      	cmp	r0, r6
 801b3d8:	dd63      	ble.n	801b4a2 <__gethex+0x286>
 801b3da:	1b87      	subs	r7, r0, r6
 801b3dc:	4639      	mov	r1, r7
 801b3de:	4620      	mov	r0, r4
 801b3e0:	f000 fee2 	bl	801c1a8 <__any_on>
 801b3e4:	4682      	mov	sl, r0
 801b3e6:	b1a8      	cbz	r0, 801b414 <__gethex+0x1f8>
 801b3e8:	1e7b      	subs	r3, r7, #1
 801b3ea:	1159      	asrs	r1, r3, #5
 801b3ec:	f003 021f 	and.w	r2, r3, #31
 801b3f0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801b3f4:	f04f 0a01 	mov.w	sl, #1
 801b3f8:	fa0a f202 	lsl.w	r2, sl, r2
 801b3fc:	420a      	tst	r2, r1
 801b3fe:	d009      	beq.n	801b414 <__gethex+0x1f8>
 801b400:	4553      	cmp	r3, sl
 801b402:	dd05      	ble.n	801b410 <__gethex+0x1f4>
 801b404:	1eb9      	subs	r1, r7, #2
 801b406:	4620      	mov	r0, r4
 801b408:	f000 fece 	bl	801c1a8 <__any_on>
 801b40c:	2800      	cmp	r0, #0
 801b40e:	d145      	bne.n	801b49c <__gethex+0x280>
 801b410:	f04f 0a02 	mov.w	sl, #2
 801b414:	4639      	mov	r1, r7
 801b416:	4620      	mov	r0, r4
 801b418:	f7ff fe98 	bl	801b14c <rshift>
 801b41c:	443d      	add	r5, r7
 801b41e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b422:	42ab      	cmp	r3, r5
 801b424:	da4c      	bge.n	801b4c0 <__gethex+0x2a4>
 801b426:	ee18 0a10 	vmov	r0, s16
 801b42a:	4621      	mov	r1, r4
 801b42c:	f000 fa5c 	bl	801b8e8 <_Bfree>
 801b430:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b432:	2300      	movs	r3, #0
 801b434:	6013      	str	r3, [r2, #0]
 801b436:	27a3      	movs	r7, #163	; 0xa3
 801b438:	e785      	b.n	801b346 <__gethex+0x12a>
 801b43a:	1e73      	subs	r3, r6, #1
 801b43c:	9a05      	ldr	r2, [sp, #20]
 801b43e:	9303      	str	r3, [sp, #12]
 801b440:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801b444:	4293      	cmp	r3, r2
 801b446:	d019      	beq.n	801b47c <__gethex+0x260>
 801b448:	f1bb 0f20 	cmp.w	fp, #32
 801b44c:	d107      	bne.n	801b45e <__gethex+0x242>
 801b44e:	9b02      	ldr	r3, [sp, #8]
 801b450:	9a00      	ldr	r2, [sp, #0]
 801b452:	f843 2b04 	str.w	r2, [r3], #4
 801b456:	9302      	str	r3, [sp, #8]
 801b458:	2300      	movs	r3, #0
 801b45a:	9300      	str	r3, [sp, #0]
 801b45c:	469b      	mov	fp, r3
 801b45e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801b462:	f7ff fec5 	bl	801b1f0 <__hexdig_fun>
 801b466:	9b00      	ldr	r3, [sp, #0]
 801b468:	f000 000f 	and.w	r0, r0, #15
 801b46c:	fa00 f00b 	lsl.w	r0, r0, fp
 801b470:	4303      	orrs	r3, r0
 801b472:	9300      	str	r3, [sp, #0]
 801b474:	f10b 0b04 	add.w	fp, fp, #4
 801b478:	9b03      	ldr	r3, [sp, #12]
 801b47a:	e00d      	b.n	801b498 <__gethex+0x27c>
 801b47c:	9b03      	ldr	r3, [sp, #12]
 801b47e:	9a06      	ldr	r2, [sp, #24]
 801b480:	4413      	add	r3, r2
 801b482:	42bb      	cmp	r3, r7
 801b484:	d3e0      	bcc.n	801b448 <__gethex+0x22c>
 801b486:	4618      	mov	r0, r3
 801b488:	9901      	ldr	r1, [sp, #4]
 801b48a:	9307      	str	r3, [sp, #28]
 801b48c:	4652      	mov	r2, sl
 801b48e:	f001 f917 	bl	801c6c0 <strncmp>
 801b492:	9b07      	ldr	r3, [sp, #28]
 801b494:	2800      	cmp	r0, #0
 801b496:	d1d7      	bne.n	801b448 <__gethex+0x22c>
 801b498:	461e      	mov	r6, r3
 801b49a:	e78b      	b.n	801b3b4 <__gethex+0x198>
 801b49c:	f04f 0a03 	mov.w	sl, #3
 801b4a0:	e7b8      	b.n	801b414 <__gethex+0x1f8>
 801b4a2:	da0a      	bge.n	801b4ba <__gethex+0x29e>
 801b4a4:	1a37      	subs	r7, r6, r0
 801b4a6:	4621      	mov	r1, r4
 801b4a8:	ee18 0a10 	vmov	r0, s16
 801b4ac:	463a      	mov	r2, r7
 801b4ae:	f000 fc37 	bl	801bd20 <__lshift>
 801b4b2:	1bed      	subs	r5, r5, r7
 801b4b4:	4604      	mov	r4, r0
 801b4b6:	f100 0914 	add.w	r9, r0, #20
 801b4ba:	f04f 0a00 	mov.w	sl, #0
 801b4be:	e7ae      	b.n	801b41e <__gethex+0x202>
 801b4c0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801b4c4:	42a8      	cmp	r0, r5
 801b4c6:	dd72      	ble.n	801b5ae <__gethex+0x392>
 801b4c8:	1b45      	subs	r5, r0, r5
 801b4ca:	42ae      	cmp	r6, r5
 801b4cc:	dc36      	bgt.n	801b53c <__gethex+0x320>
 801b4ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801b4d2:	2b02      	cmp	r3, #2
 801b4d4:	d02a      	beq.n	801b52c <__gethex+0x310>
 801b4d6:	2b03      	cmp	r3, #3
 801b4d8:	d02c      	beq.n	801b534 <__gethex+0x318>
 801b4da:	2b01      	cmp	r3, #1
 801b4dc:	d11c      	bne.n	801b518 <__gethex+0x2fc>
 801b4de:	42ae      	cmp	r6, r5
 801b4e0:	d11a      	bne.n	801b518 <__gethex+0x2fc>
 801b4e2:	2e01      	cmp	r6, #1
 801b4e4:	d112      	bne.n	801b50c <__gethex+0x2f0>
 801b4e6:	9a04      	ldr	r2, [sp, #16]
 801b4e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b4ec:	6013      	str	r3, [r2, #0]
 801b4ee:	2301      	movs	r3, #1
 801b4f0:	6123      	str	r3, [r4, #16]
 801b4f2:	f8c9 3000 	str.w	r3, [r9]
 801b4f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801b4f8:	2762      	movs	r7, #98	; 0x62
 801b4fa:	601c      	str	r4, [r3, #0]
 801b4fc:	e723      	b.n	801b346 <__gethex+0x12a>
 801b4fe:	bf00      	nop
 801b500:	08024620 	.word	0x08024620
 801b504:	080245a8 	.word	0x080245a8
 801b508:	080245b9 	.word	0x080245b9
 801b50c:	1e71      	subs	r1, r6, #1
 801b50e:	4620      	mov	r0, r4
 801b510:	f000 fe4a 	bl	801c1a8 <__any_on>
 801b514:	2800      	cmp	r0, #0
 801b516:	d1e6      	bne.n	801b4e6 <__gethex+0x2ca>
 801b518:	ee18 0a10 	vmov	r0, s16
 801b51c:	4621      	mov	r1, r4
 801b51e:	f000 f9e3 	bl	801b8e8 <_Bfree>
 801b522:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b524:	2300      	movs	r3, #0
 801b526:	6013      	str	r3, [r2, #0]
 801b528:	2750      	movs	r7, #80	; 0x50
 801b52a:	e70c      	b.n	801b346 <__gethex+0x12a>
 801b52c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b52e:	2b00      	cmp	r3, #0
 801b530:	d1f2      	bne.n	801b518 <__gethex+0x2fc>
 801b532:	e7d8      	b.n	801b4e6 <__gethex+0x2ca>
 801b534:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b536:	2b00      	cmp	r3, #0
 801b538:	d1d5      	bne.n	801b4e6 <__gethex+0x2ca>
 801b53a:	e7ed      	b.n	801b518 <__gethex+0x2fc>
 801b53c:	1e6f      	subs	r7, r5, #1
 801b53e:	f1ba 0f00 	cmp.w	sl, #0
 801b542:	d131      	bne.n	801b5a8 <__gethex+0x38c>
 801b544:	b127      	cbz	r7, 801b550 <__gethex+0x334>
 801b546:	4639      	mov	r1, r7
 801b548:	4620      	mov	r0, r4
 801b54a:	f000 fe2d 	bl	801c1a8 <__any_on>
 801b54e:	4682      	mov	sl, r0
 801b550:	117b      	asrs	r3, r7, #5
 801b552:	2101      	movs	r1, #1
 801b554:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801b558:	f007 071f 	and.w	r7, r7, #31
 801b55c:	fa01 f707 	lsl.w	r7, r1, r7
 801b560:	421f      	tst	r7, r3
 801b562:	4629      	mov	r1, r5
 801b564:	4620      	mov	r0, r4
 801b566:	bf18      	it	ne
 801b568:	f04a 0a02 	orrne.w	sl, sl, #2
 801b56c:	1b76      	subs	r6, r6, r5
 801b56e:	f7ff fded 	bl	801b14c <rshift>
 801b572:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801b576:	2702      	movs	r7, #2
 801b578:	f1ba 0f00 	cmp.w	sl, #0
 801b57c:	d048      	beq.n	801b610 <__gethex+0x3f4>
 801b57e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801b582:	2b02      	cmp	r3, #2
 801b584:	d015      	beq.n	801b5b2 <__gethex+0x396>
 801b586:	2b03      	cmp	r3, #3
 801b588:	d017      	beq.n	801b5ba <__gethex+0x39e>
 801b58a:	2b01      	cmp	r3, #1
 801b58c:	d109      	bne.n	801b5a2 <__gethex+0x386>
 801b58e:	f01a 0f02 	tst.w	sl, #2
 801b592:	d006      	beq.n	801b5a2 <__gethex+0x386>
 801b594:	f8d9 0000 	ldr.w	r0, [r9]
 801b598:	ea4a 0a00 	orr.w	sl, sl, r0
 801b59c:	f01a 0f01 	tst.w	sl, #1
 801b5a0:	d10e      	bne.n	801b5c0 <__gethex+0x3a4>
 801b5a2:	f047 0710 	orr.w	r7, r7, #16
 801b5a6:	e033      	b.n	801b610 <__gethex+0x3f4>
 801b5a8:	f04f 0a01 	mov.w	sl, #1
 801b5ac:	e7d0      	b.n	801b550 <__gethex+0x334>
 801b5ae:	2701      	movs	r7, #1
 801b5b0:	e7e2      	b.n	801b578 <__gethex+0x35c>
 801b5b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b5b4:	f1c3 0301 	rsb	r3, r3, #1
 801b5b8:	9315      	str	r3, [sp, #84]	; 0x54
 801b5ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b5bc:	2b00      	cmp	r3, #0
 801b5be:	d0f0      	beq.n	801b5a2 <__gethex+0x386>
 801b5c0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801b5c4:	f104 0314 	add.w	r3, r4, #20
 801b5c8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801b5cc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801b5d0:	f04f 0c00 	mov.w	ip, #0
 801b5d4:	4618      	mov	r0, r3
 801b5d6:	f853 2b04 	ldr.w	r2, [r3], #4
 801b5da:	f1b2 3fff 	cmp.w	r2, #4294967295
 801b5de:	d01c      	beq.n	801b61a <__gethex+0x3fe>
 801b5e0:	3201      	adds	r2, #1
 801b5e2:	6002      	str	r2, [r0, #0]
 801b5e4:	2f02      	cmp	r7, #2
 801b5e6:	f104 0314 	add.w	r3, r4, #20
 801b5ea:	d13f      	bne.n	801b66c <__gethex+0x450>
 801b5ec:	f8d8 2000 	ldr.w	r2, [r8]
 801b5f0:	3a01      	subs	r2, #1
 801b5f2:	42b2      	cmp	r2, r6
 801b5f4:	d10a      	bne.n	801b60c <__gethex+0x3f0>
 801b5f6:	1171      	asrs	r1, r6, #5
 801b5f8:	2201      	movs	r2, #1
 801b5fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801b5fe:	f006 061f 	and.w	r6, r6, #31
 801b602:	fa02 f606 	lsl.w	r6, r2, r6
 801b606:	421e      	tst	r6, r3
 801b608:	bf18      	it	ne
 801b60a:	4617      	movne	r7, r2
 801b60c:	f047 0720 	orr.w	r7, r7, #32
 801b610:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801b612:	601c      	str	r4, [r3, #0]
 801b614:	9b04      	ldr	r3, [sp, #16]
 801b616:	601d      	str	r5, [r3, #0]
 801b618:	e695      	b.n	801b346 <__gethex+0x12a>
 801b61a:	4299      	cmp	r1, r3
 801b61c:	f843 cc04 	str.w	ip, [r3, #-4]
 801b620:	d8d8      	bhi.n	801b5d4 <__gethex+0x3b8>
 801b622:	68a3      	ldr	r3, [r4, #8]
 801b624:	459b      	cmp	fp, r3
 801b626:	db19      	blt.n	801b65c <__gethex+0x440>
 801b628:	6861      	ldr	r1, [r4, #4]
 801b62a:	ee18 0a10 	vmov	r0, s16
 801b62e:	3101      	adds	r1, #1
 801b630:	f000 f91a 	bl	801b868 <_Balloc>
 801b634:	4681      	mov	r9, r0
 801b636:	b918      	cbnz	r0, 801b640 <__gethex+0x424>
 801b638:	4b1a      	ldr	r3, [pc, #104]	; (801b6a4 <__gethex+0x488>)
 801b63a:	4602      	mov	r2, r0
 801b63c:	2184      	movs	r1, #132	; 0x84
 801b63e:	e6a8      	b.n	801b392 <__gethex+0x176>
 801b640:	6922      	ldr	r2, [r4, #16]
 801b642:	3202      	adds	r2, #2
 801b644:	f104 010c 	add.w	r1, r4, #12
 801b648:	0092      	lsls	r2, r2, #2
 801b64a:	300c      	adds	r0, #12
 801b64c:	f7fd f9a2 	bl	8018994 <memcpy>
 801b650:	4621      	mov	r1, r4
 801b652:	ee18 0a10 	vmov	r0, s16
 801b656:	f000 f947 	bl	801b8e8 <_Bfree>
 801b65a:	464c      	mov	r4, r9
 801b65c:	6923      	ldr	r3, [r4, #16]
 801b65e:	1c5a      	adds	r2, r3, #1
 801b660:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801b664:	6122      	str	r2, [r4, #16]
 801b666:	2201      	movs	r2, #1
 801b668:	615a      	str	r2, [r3, #20]
 801b66a:	e7bb      	b.n	801b5e4 <__gethex+0x3c8>
 801b66c:	6922      	ldr	r2, [r4, #16]
 801b66e:	455a      	cmp	r2, fp
 801b670:	dd0b      	ble.n	801b68a <__gethex+0x46e>
 801b672:	2101      	movs	r1, #1
 801b674:	4620      	mov	r0, r4
 801b676:	f7ff fd69 	bl	801b14c <rshift>
 801b67a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b67e:	3501      	adds	r5, #1
 801b680:	42ab      	cmp	r3, r5
 801b682:	f6ff aed0 	blt.w	801b426 <__gethex+0x20a>
 801b686:	2701      	movs	r7, #1
 801b688:	e7c0      	b.n	801b60c <__gethex+0x3f0>
 801b68a:	f016 061f 	ands.w	r6, r6, #31
 801b68e:	d0fa      	beq.n	801b686 <__gethex+0x46a>
 801b690:	4453      	add	r3, sl
 801b692:	f1c6 0620 	rsb	r6, r6, #32
 801b696:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801b69a:	f000 f9d7 	bl	801ba4c <__hi0bits>
 801b69e:	42b0      	cmp	r0, r6
 801b6a0:	dbe7      	blt.n	801b672 <__gethex+0x456>
 801b6a2:	e7f0      	b.n	801b686 <__gethex+0x46a>
 801b6a4:	080245a8 	.word	0x080245a8

0801b6a8 <L_shift>:
 801b6a8:	f1c2 0208 	rsb	r2, r2, #8
 801b6ac:	0092      	lsls	r2, r2, #2
 801b6ae:	b570      	push	{r4, r5, r6, lr}
 801b6b0:	f1c2 0620 	rsb	r6, r2, #32
 801b6b4:	6843      	ldr	r3, [r0, #4]
 801b6b6:	6804      	ldr	r4, [r0, #0]
 801b6b8:	fa03 f506 	lsl.w	r5, r3, r6
 801b6bc:	432c      	orrs	r4, r5
 801b6be:	40d3      	lsrs	r3, r2
 801b6c0:	6004      	str	r4, [r0, #0]
 801b6c2:	f840 3f04 	str.w	r3, [r0, #4]!
 801b6c6:	4288      	cmp	r0, r1
 801b6c8:	d3f4      	bcc.n	801b6b4 <L_shift+0xc>
 801b6ca:	bd70      	pop	{r4, r5, r6, pc}

0801b6cc <__match>:
 801b6cc:	b530      	push	{r4, r5, lr}
 801b6ce:	6803      	ldr	r3, [r0, #0]
 801b6d0:	3301      	adds	r3, #1
 801b6d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b6d6:	b914      	cbnz	r4, 801b6de <__match+0x12>
 801b6d8:	6003      	str	r3, [r0, #0]
 801b6da:	2001      	movs	r0, #1
 801b6dc:	bd30      	pop	{r4, r5, pc}
 801b6de:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b6e2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801b6e6:	2d19      	cmp	r5, #25
 801b6e8:	bf98      	it	ls
 801b6ea:	3220      	addls	r2, #32
 801b6ec:	42a2      	cmp	r2, r4
 801b6ee:	d0f0      	beq.n	801b6d2 <__match+0x6>
 801b6f0:	2000      	movs	r0, #0
 801b6f2:	e7f3      	b.n	801b6dc <__match+0x10>

0801b6f4 <__hexnan>:
 801b6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6f8:	680b      	ldr	r3, [r1, #0]
 801b6fa:	115e      	asrs	r6, r3, #5
 801b6fc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801b700:	f013 031f 	ands.w	r3, r3, #31
 801b704:	b087      	sub	sp, #28
 801b706:	bf18      	it	ne
 801b708:	3604      	addne	r6, #4
 801b70a:	2500      	movs	r5, #0
 801b70c:	1f37      	subs	r7, r6, #4
 801b70e:	4690      	mov	r8, r2
 801b710:	6802      	ldr	r2, [r0, #0]
 801b712:	9301      	str	r3, [sp, #4]
 801b714:	4682      	mov	sl, r0
 801b716:	f846 5c04 	str.w	r5, [r6, #-4]
 801b71a:	46b9      	mov	r9, r7
 801b71c:	463c      	mov	r4, r7
 801b71e:	9502      	str	r5, [sp, #8]
 801b720:	46ab      	mov	fp, r5
 801b722:	7851      	ldrb	r1, [r2, #1]
 801b724:	1c53      	adds	r3, r2, #1
 801b726:	9303      	str	r3, [sp, #12]
 801b728:	b341      	cbz	r1, 801b77c <__hexnan+0x88>
 801b72a:	4608      	mov	r0, r1
 801b72c:	9205      	str	r2, [sp, #20]
 801b72e:	9104      	str	r1, [sp, #16]
 801b730:	f7ff fd5e 	bl	801b1f0 <__hexdig_fun>
 801b734:	2800      	cmp	r0, #0
 801b736:	d14f      	bne.n	801b7d8 <__hexnan+0xe4>
 801b738:	9904      	ldr	r1, [sp, #16]
 801b73a:	9a05      	ldr	r2, [sp, #20]
 801b73c:	2920      	cmp	r1, #32
 801b73e:	d818      	bhi.n	801b772 <__hexnan+0x7e>
 801b740:	9b02      	ldr	r3, [sp, #8]
 801b742:	459b      	cmp	fp, r3
 801b744:	dd13      	ble.n	801b76e <__hexnan+0x7a>
 801b746:	454c      	cmp	r4, r9
 801b748:	d206      	bcs.n	801b758 <__hexnan+0x64>
 801b74a:	2d07      	cmp	r5, #7
 801b74c:	dc04      	bgt.n	801b758 <__hexnan+0x64>
 801b74e:	462a      	mov	r2, r5
 801b750:	4649      	mov	r1, r9
 801b752:	4620      	mov	r0, r4
 801b754:	f7ff ffa8 	bl	801b6a8 <L_shift>
 801b758:	4544      	cmp	r4, r8
 801b75a:	d950      	bls.n	801b7fe <__hexnan+0x10a>
 801b75c:	2300      	movs	r3, #0
 801b75e:	f1a4 0904 	sub.w	r9, r4, #4
 801b762:	f844 3c04 	str.w	r3, [r4, #-4]
 801b766:	f8cd b008 	str.w	fp, [sp, #8]
 801b76a:	464c      	mov	r4, r9
 801b76c:	461d      	mov	r5, r3
 801b76e:	9a03      	ldr	r2, [sp, #12]
 801b770:	e7d7      	b.n	801b722 <__hexnan+0x2e>
 801b772:	2929      	cmp	r1, #41	; 0x29
 801b774:	d156      	bne.n	801b824 <__hexnan+0x130>
 801b776:	3202      	adds	r2, #2
 801b778:	f8ca 2000 	str.w	r2, [sl]
 801b77c:	f1bb 0f00 	cmp.w	fp, #0
 801b780:	d050      	beq.n	801b824 <__hexnan+0x130>
 801b782:	454c      	cmp	r4, r9
 801b784:	d206      	bcs.n	801b794 <__hexnan+0xa0>
 801b786:	2d07      	cmp	r5, #7
 801b788:	dc04      	bgt.n	801b794 <__hexnan+0xa0>
 801b78a:	462a      	mov	r2, r5
 801b78c:	4649      	mov	r1, r9
 801b78e:	4620      	mov	r0, r4
 801b790:	f7ff ff8a 	bl	801b6a8 <L_shift>
 801b794:	4544      	cmp	r4, r8
 801b796:	d934      	bls.n	801b802 <__hexnan+0x10e>
 801b798:	f1a8 0204 	sub.w	r2, r8, #4
 801b79c:	4623      	mov	r3, r4
 801b79e:	f853 1b04 	ldr.w	r1, [r3], #4
 801b7a2:	f842 1f04 	str.w	r1, [r2, #4]!
 801b7a6:	429f      	cmp	r7, r3
 801b7a8:	d2f9      	bcs.n	801b79e <__hexnan+0xaa>
 801b7aa:	1b3b      	subs	r3, r7, r4
 801b7ac:	f023 0303 	bic.w	r3, r3, #3
 801b7b0:	3304      	adds	r3, #4
 801b7b2:	3401      	adds	r4, #1
 801b7b4:	3e03      	subs	r6, #3
 801b7b6:	42b4      	cmp	r4, r6
 801b7b8:	bf88      	it	hi
 801b7ba:	2304      	movhi	r3, #4
 801b7bc:	4443      	add	r3, r8
 801b7be:	2200      	movs	r2, #0
 801b7c0:	f843 2b04 	str.w	r2, [r3], #4
 801b7c4:	429f      	cmp	r7, r3
 801b7c6:	d2fb      	bcs.n	801b7c0 <__hexnan+0xcc>
 801b7c8:	683b      	ldr	r3, [r7, #0]
 801b7ca:	b91b      	cbnz	r3, 801b7d4 <__hexnan+0xe0>
 801b7cc:	4547      	cmp	r7, r8
 801b7ce:	d127      	bne.n	801b820 <__hexnan+0x12c>
 801b7d0:	2301      	movs	r3, #1
 801b7d2:	603b      	str	r3, [r7, #0]
 801b7d4:	2005      	movs	r0, #5
 801b7d6:	e026      	b.n	801b826 <__hexnan+0x132>
 801b7d8:	3501      	adds	r5, #1
 801b7da:	2d08      	cmp	r5, #8
 801b7dc:	f10b 0b01 	add.w	fp, fp, #1
 801b7e0:	dd06      	ble.n	801b7f0 <__hexnan+0xfc>
 801b7e2:	4544      	cmp	r4, r8
 801b7e4:	d9c3      	bls.n	801b76e <__hexnan+0x7a>
 801b7e6:	2300      	movs	r3, #0
 801b7e8:	f844 3c04 	str.w	r3, [r4, #-4]
 801b7ec:	2501      	movs	r5, #1
 801b7ee:	3c04      	subs	r4, #4
 801b7f0:	6822      	ldr	r2, [r4, #0]
 801b7f2:	f000 000f 	and.w	r0, r0, #15
 801b7f6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801b7fa:	6022      	str	r2, [r4, #0]
 801b7fc:	e7b7      	b.n	801b76e <__hexnan+0x7a>
 801b7fe:	2508      	movs	r5, #8
 801b800:	e7b5      	b.n	801b76e <__hexnan+0x7a>
 801b802:	9b01      	ldr	r3, [sp, #4]
 801b804:	2b00      	cmp	r3, #0
 801b806:	d0df      	beq.n	801b7c8 <__hexnan+0xd4>
 801b808:	f04f 32ff 	mov.w	r2, #4294967295
 801b80c:	f1c3 0320 	rsb	r3, r3, #32
 801b810:	fa22 f303 	lsr.w	r3, r2, r3
 801b814:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801b818:	401a      	ands	r2, r3
 801b81a:	f846 2c04 	str.w	r2, [r6, #-4]
 801b81e:	e7d3      	b.n	801b7c8 <__hexnan+0xd4>
 801b820:	3f04      	subs	r7, #4
 801b822:	e7d1      	b.n	801b7c8 <__hexnan+0xd4>
 801b824:	2004      	movs	r0, #4
 801b826:	b007      	add	sp, #28
 801b828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b82c <_localeconv_r>:
 801b82c:	4800      	ldr	r0, [pc, #0]	; (801b830 <_localeconv_r+0x4>)
 801b82e:	4770      	bx	lr
 801b830:	200001fc 	.word	0x200001fc

0801b834 <malloc>:
 801b834:	4b02      	ldr	r3, [pc, #8]	; (801b840 <malloc+0xc>)
 801b836:	4601      	mov	r1, r0
 801b838:	6818      	ldr	r0, [r3, #0]
 801b83a:	f000 bd59 	b.w	801c2f0 <_malloc_r>
 801b83e:	bf00      	nop
 801b840:	200000a4 	.word	0x200000a4

0801b844 <__ascii_mbtowc>:
 801b844:	b082      	sub	sp, #8
 801b846:	b901      	cbnz	r1, 801b84a <__ascii_mbtowc+0x6>
 801b848:	a901      	add	r1, sp, #4
 801b84a:	b142      	cbz	r2, 801b85e <__ascii_mbtowc+0x1a>
 801b84c:	b14b      	cbz	r3, 801b862 <__ascii_mbtowc+0x1e>
 801b84e:	7813      	ldrb	r3, [r2, #0]
 801b850:	600b      	str	r3, [r1, #0]
 801b852:	7812      	ldrb	r2, [r2, #0]
 801b854:	1e10      	subs	r0, r2, #0
 801b856:	bf18      	it	ne
 801b858:	2001      	movne	r0, #1
 801b85a:	b002      	add	sp, #8
 801b85c:	4770      	bx	lr
 801b85e:	4610      	mov	r0, r2
 801b860:	e7fb      	b.n	801b85a <__ascii_mbtowc+0x16>
 801b862:	f06f 0001 	mvn.w	r0, #1
 801b866:	e7f8      	b.n	801b85a <__ascii_mbtowc+0x16>

0801b868 <_Balloc>:
 801b868:	b570      	push	{r4, r5, r6, lr}
 801b86a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801b86c:	4604      	mov	r4, r0
 801b86e:	460d      	mov	r5, r1
 801b870:	b976      	cbnz	r6, 801b890 <_Balloc+0x28>
 801b872:	2010      	movs	r0, #16
 801b874:	f7ff ffde 	bl	801b834 <malloc>
 801b878:	4602      	mov	r2, r0
 801b87a:	6260      	str	r0, [r4, #36]	; 0x24
 801b87c:	b920      	cbnz	r0, 801b888 <_Balloc+0x20>
 801b87e:	4b18      	ldr	r3, [pc, #96]	; (801b8e0 <_Balloc+0x78>)
 801b880:	4818      	ldr	r0, [pc, #96]	; (801b8e4 <_Balloc+0x7c>)
 801b882:	2166      	movs	r1, #102	; 0x66
 801b884:	f000 ff3e 	bl	801c704 <__assert_func>
 801b888:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b88c:	6006      	str	r6, [r0, #0]
 801b88e:	60c6      	str	r6, [r0, #12]
 801b890:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801b892:	68f3      	ldr	r3, [r6, #12]
 801b894:	b183      	cbz	r3, 801b8b8 <_Balloc+0x50>
 801b896:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b898:	68db      	ldr	r3, [r3, #12]
 801b89a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801b89e:	b9b8      	cbnz	r0, 801b8d0 <_Balloc+0x68>
 801b8a0:	2101      	movs	r1, #1
 801b8a2:	fa01 f605 	lsl.w	r6, r1, r5
 801b8a6:	1d72      	adds	r2, r6, #5
 801b8a8:	0092      	lsls	r2, r2, #2
 801b8aa:	4620      	mov	r0, r4
 801b8ac:	f000 fc9d 	bl	801c1ea <_calloc_r>
 801b8b0:	b160      	cbz	r0, 801b8cc <_Balloc+0x64>
 801b8b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801b8b6:	e00e      	b.n	801b8d6 <_Balloc+0x6e>
 801b8b8:	2221      	movs	r2, #33	; 0x21
 801b8ba:	2104      	movs	r1, #4
 801b8bc:	4620      	mov	r0, r4
 801b8be:	f000 fc94 	bl	801c1ea <_calloc_r>
 801b8c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b8c4:	60f0      	str	r0, [r6, #12]
 801b8c6:	68db      	ldr	r3, [r3, #12]
 801b8c8:	2b00      	cmp	r3, #0
 801b8ca:	d1e4      	bne.n	801b896 <_Balloc+0x2e>
 801b8cc:	2000      	movs	r0, #0
 801b8ce:	bd70      	pop	{r4, r5, r6, pc}
 801b8d0:	6802      	ldr	r2, [r0, #0]
 801b8d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801b8d6:	2300      	movs	r3, #0
 801b8d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801b8dc:	e7f7      	b.n	801b8ce <_Balloc+0x66>
 801b8de:	bf00      	nop
 801b8e0:	08024536 	.word	0x08024536
 801b8e4:	08024634 	.word	0x08024634

0801b8e8 <_Bfree>:
 801b8e8:	b570      	push	{r4, r5, r6, lr}
 801b8ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801b8ec:	4605      	mov	r5, r0
 801b8ee:	460c      	mov	r4, r1
 801b8f0:	b976      	cbnz	r6, 801b910 <_Bfree+0x28>
 801b8f2:	2010      	movs	r0, #16
 801b8f4:	f7ff ff9e 	bl	801b834 <malloc>
 801b8f8:	4602      	mov	r2, r0
 801b8fa:	6268      	str	r0, [r5, #36]	; 0x24
 801b8fc:	b920      	cbnz	r0, 801b908 <_Bfree+0x20>
 801b8fe:	4b09      	ldr	r3, [pc, #36]	; (801b924 <_Bfree+0x3c>)
 801b900:	4809      	ldr	r0, [pc, #36]	; (801b928 <_Bfree+0x40>)
 801b902:	218a      	movs	r1, #138	; 0x8a
 801b904:	f000 fefe 	bl	801c704 <__assert_func>
 801b908:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b90c:	6006      	str	r6, [r0, #0]
 801b90e:	60c6      	str	r6, [r0, #12]
 801b910:	b13c      	cbz	r4, 801b922 <_Bfree+0x3a>
 801b912:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801b914:	6862      	ldr	r2, [r4, #4]
 801b916:	68db      	ldr	r3, [r3, #12]
 801b918:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801b91c:	6021      	str	r1, [r4, #0]
 801b91e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801b922:	bd70      	pop	{r4, r5, r6, pc}
 801b924:	08024536 	.word	0x08024536
 801b928:	08024634 	.word	0x08024634

0801b92c <__multadd>:
 801b92c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b930:	690d      	ldr	r5, [r1, #16]
 801b932:	4607      	mov	r7, r0
 801b934:	460c      	mov	r4, r1
 801b936:	461e      	mov	r6, r3
 801b938:	f101 0c14 	add.w	ip, r1, #20
 801b93c:	2000      	movs	r0, #0
 801b93e:	f8dc 3000 	ldr.w	r3, [ip]
 801b942:	b299      	uxth	r1, r3
 801b944:	fb02 6101 	mla	r1, r2, r1, r6
 801b948:	0c1e      	lsrs	r6, r3, #16
 801b94a:	0c0b      	lsrs	r3, r1, #16
 801b94c:	fb02 3306 	mla	r3, r2, r6, r3
 801b950:	b289      	uxth	r1, r1
 801b952:	3001      	adds	r0, #1
 801b954:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801b958:	4285      	cmp	r5, r0
 801b95a:	f84c 1b04 	str.w	r1, [ip], #4
 801b95e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801b962:	dcec      	bgt.n	801b93e <__multadd+0x12>
 801b964:	b30e      	cbz	r6, 801b9aa <__multadd+0x7e>
 801b966:	68a3      	ldr	r3, [r4, #8]
 801b968:	42ab      	cmp	r3, r5
 801b96a:	dc19      	bgt.n	801b9a0 <__multadd+0x74>
 801b96c:	6861      	ldr	r1, [r4, #4]
 801b96e:	4638      	mov	r0, r7
 801b970:	3101      	adds	r1, #1
 801b972:	f7ff ff79 	bl	801b868 <_Balloc>
 801b976:	4680      	mov	r8, r0
 801b978:	b928      	cbnz	r0, 801b986 <__multadd+0x5a>
 801b97a:	4602      	mov	r2, r0
 801b97c:	4b0c      	ldr	r3, [pc, #48]	; (801b9b0 <__multadd+0x84>)
 801b97e:	480d      	ldr	r0, [pc, #52]	; (801b9b4 <__multadd+0x88>)
 801b980:	21b5      	movs	r1, #181	; 0xb5
 801b982:	f000 febf 	bl	801c704 <__assert_func>
 801b986:	6922      	ldr	r2, [r4, #16]
 801b988:	3202      	adds	r2, #2
 801b98a:	f104 010c 	add.w	r1, r4, #12
 801b98e:	0092      	lsls	r2, r2, #2
 801b990:	300c      	adds	r0, #12
 801b992:	f7fc ffff 	bl	8018994 <memcpy>
 801b996:	4621      	mov	r1, r4
 801b998:	4638      	mov	r0, r7
 801b99a:	f7ff ffa5 	bl	801b8e8 <_Bfree>
 801b99e:	4644      	mov	r4, r8
 801b9a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801b9a4:	3501      	adds	r5, #1
 801b9a6:	615e      	str	r6, [r3, #20]
 801b9a8:	6125      	str	r5, [r4, #16]
 801b9aa:	4620      	mov	r0, r4
 801b9ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b9b0:	080245a8 	.word	0x080245a8
 801b9b4:	08024634 	.word	0x08024634

0801b9b8 <__s2b>:
 801b9b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b9bc:	460c      	mov	r4, r1
 801b9be:	4615      	mov	r5, r2
 801b9c0:	461f      	mov	r7, r3
 801b9c2:	2209      	movs	r2, #9
 801b9c4:	3308      	adds	r3, #8
 801b9c6:	4606      	mov	r6, r0
 801b9c8:	fb93 f3f2 	sdiv	r3, r3, r2
 801b9cc:	2100      	movs	r1, #0
 801b9ce:	2201      	movs	r2, #1
 801b9d0:	429a      	cmp	r2, r3
 801b9d2:	db09      	blt.n	801b9e8 <__s2b+0x30>
 801b9d4:	4630      	mov	r0, r6
 801b9d6:	f7ff ff47 	bl	801b868 <_Balloc>
 801b9da:	b940      	cbnz	r0, 801b9ee <__s2b+0x36>
 801b9dc:	4602      	mov	r2, r0
 801b9de:	4b19      	ldr	r3, [pc, #100]	; (801ba44 <__s2b+0x8c>)
 801b9e0:	4819      	ldr	r0, [pc, #100]	; (801ba48 <__s2b+0x90>)
 801b9e2:	21ce      	movs	r1, #206	; 0xce
 801b9e4:	f000 fe8e 	bl	801c704 <__assert_func>
 801b9e8:	0052      	lsls	r2, r2, #1
 801b9ea:	3101      	adds	r1, #1
 801b9ec:	e7f0      	b.n	801b9d0 <__s2b+0x18>
 801b9ee:	9b08      	ldr	r3, [sp, #32]
 801b9f0:	6143      	str	r3, [r0, #20]
 801b9f2:	2d09      	cmp	r5, #9
 801b9f4:	f04f 0301 	mov.w	r3, #1
 801b9f8:	6103      	str	r3, [r0, #16]
 801b9fa:	dd16      	ble.n	801ba2a <__s2b+0x72>
 801b9fc:	f104 0909 	add.w	r9, r4, #9
 801ba00:	46c8      	mov	r8, r9
 801ba02:	442c      	add	r4, r5
 801ba04:	f818 3b01 	ldrb.w	r3, [r8], #1
 801ba08:	4601      	mov	r1, r0
 801ba0a:	3b30      	subs	r3, #48	; 0x30
 801ba0c:	220a      	movs	r2, #10
 801ba0e:	4630      	mov	r0, r6
 801ba10:	f7ff ff8c 	bl	801b92c <__multadd>
 801ba14:	45a0      	cmp	r8, r4
 801ba16:	d1f5      	bne.n	801ba04 <__s2b+0x4c>
 801ba18:	f1a5 0408 	sub.w	r4, r5, #8
 801ba1c:	444c      	add	r4, r9
 801ba1e:	1b2d      	subs	r5, r5, r4
 801ba20:	1963      	adds	r3, r4, r5
 801ba22:	42bb      	cmp	r3, r7
 801ba24:	db04      	blt.n	801ba30 <__s2b+0x78>
 801ba26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ba2a:	340a      	adds	r4, #10
 801ba2c:	2509      	movs	r5, #9
 801ba2e:	e7f6      	b.n	801ba1e <__s2b+0x66>
 801ba30:	f814 3b01 	ldrb.w	r3, [r4], #1
 801ba34:	4601      	mov	r1, r0
 801ba36:	3b30      	subs	r3, #48	; 0x30
 801ba38:	220a      	movs	r2, #10
 801ba3a:	4630      	mov	r0, r6
 801ba3c:	f7ff ff76 	bl	801b92c <__multadd>
 801ba40:	e7ee      	b.n	801ba20 <__s2b+0x68>
 801ba42:	bf00      	nop
 801ba44:	080245a8 	.word	0x080245a8
 801ba48:	08024634 	.word	0x08024634

0801ba4c <__hi0bits>:
 801ba4c:	0c03      	lsrs	r3, r0, #16
 801ba4e:	041b      	lsls	r3, r3, #16
 801ba50:	b9d3      	cbnz	r3, 801ba88 <__hi0bits+0x3c>
 801ba52:	0400      	lsls	r0, r0, #16
 801ba54:	2310      	movs	r3, #16
 801ba56:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801ba5a:	bf04      	itt	eq
 801ba5c:	0200      	lsleq	r0, r0, #8
 801ba5e:	3308      	addeq	r3, #8
 801ba60:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801ba64:	bf04      	itt	eq
 801ba66:	0100      	lsleq	r0, r0, #4
 801ba68:	3304      	addeq	r3, #4
 801ba6a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801ba6e:	bf04      	itt	eq
 801ba70:	0080      	lsleq	r0, r0, #2
 801ba72:	3302      	addeq	r3, #2
 801ba74:	2800      	cmp	r0, #0
 801ba76:	db05      	blt.n	801ba84 <__hi0bits+0x38>
 801ba78:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801ba7c:	f103 0301 	add.w	r3, r3, #1
 801ba80:	bf08      	it	eq
 801ba82:	2320      	moveq	r3, #32
 801ba84:	4618      	mov	r0, r3
 801ba86:	4770      	bx	lr
 801ba88:	2300      	movs	r3, #0
 801ba8a:	e7e4      	b.n	801ba56 <__hi0bits+0xa>

0801ba8c <__lo0bits>:
 801ba8c:	6803      	ldr	r3, [r0, #0]
 801ba8e:	f013 0207 	ands.w	r2, r3, #7
 801ba92:	4601      	mov	r1, r0
 801ba94:	d00b      	beq.n	801baae <__lo0bits+0x22>
 801ba96:	07da      	lsls	r2, r3, #31
 801ba98:	d423      	bmi.n	801bae2 <__lo0bits+0x56>
 801ba9a:	0798      	lsls	r0, r3, #30
 801ba9c:	bf49      	itett	mi
 801ba9e:	085b      	lsrmi	r3, r3, #1
 801baa0:	089b      	lsrpl	r3, r3, #2
 801baa2:	2001      	movmi	r0, #1
 801baa4:	600b      	strmi	r3, [r1, #0]
 801baa6:	bf5c      	itt	pl
 801baa8:	600b      	strpl	r3, [r1, #0]
 801baaa:	2002      	movpl	r0, #2
 801baac:	4770      	bx	lr
 801baae:	b298      	uxth	r0, r3
 801bab0:	b9a8      	cbnz	r0, 801bade <__lo0bits+0x52>
 801bab2:	0c1b      	lsrs	r3, r3, #16
 801bab4:	2010      	movs	r0, #16
 801bab6:	b2da      	uxtb	r2, r3
 801bab8:	b90a      	cbnz	r2, 801babe <__lo0bits+0x32>
 801baba:	3008      	adds	r0, #8
 801babc:	0a1b      	lsrs	r3, r3, #8
 801babe:	071a      	lsls	r2, r3, #28
 801bac0:	bf04      	itt	eq
 801bac2:	091b      	lsreq	r3, r3, #4
 801bac4:	3004      	addeq	r0, #4
 801bac6:	079a      	lsls	r2, r3, #30
 801bac8:	bf04      	itt	eq
 801baca:	089b      	lsreq	r3, r3, #2
 801bacc:	3002      	addeq	r0, #2
 801bace:	07da      	lsls	r2, r3, #31
 801bad0:	d403      	bmi.n	801bada <__lo0bits+0x4e>
 801bad2:	085b      	lsrs	r3, r3, #1
 801bad4:	f100 0001 	add.w	r0, r0, #1
 801bad8:	d005      	beq.n	801bae6 <__lo0bits+0x5a>
 801bada:	600b      	str	r3, [r1, #0]
 801badc:	4770      	bx	lr
 801bade:	4610      	mov	r0, r2
 801bae0:	e7e9      	b.n	801bab6 <__lo0bits+0x2a>
 801bae2:	2000      	movs	r0, #0
 801bae4:	4770      	bx	lr
 801bae6:	2020      	movs	r0, #32
 801bae8:	4770      	bx	lr
	...

0801baec <__i2b>:
 801baec:	b510      	push	{r4, lr}
 801baee:	460c      	mov	r4, r1
 801baf0:	2101      	movs	r1, #1
 801baf2:	f7ff feb9 	bl	801b868 <_Balloc>
 801baf6:	4602      	mov	r2, r0
 801baf8:	b928      	cbnz	r0, 801bb06 <__i2b+0x1a>
 801bafa:	4b05      	ldr	r3, [pc, #20]	; (801bb10 <__i2b+0x24>)
 801bafc:	4805      	ldr	r0, [pc, #20]	; (801bb14 <__i2b+0x28>)
 801bafe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801bb02:	f000 fdff 	bl	801c704 <__assert_func>
 801bb06:	2301      	movs	r3, #1
 801bb08:	6144      	str	r4, [r0, #20]
 801bb0a:	6103      	str	r3, [r0, #16]
 801bb0c:	bd10      	pop	{r4, pc}
 801bb0e:	bf00      	nop
 801bb10:	080245a8 	.word	0x080245a8
 801bb14:	08024634 	.word	0x08024634

0801bb18 <__multiply>:
 801bb18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb1c:	4691      	mov	r9, r2
 801bb1e:	690a      	ldr	r2, [r1, #16]
 801bb20:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801bb24:	429a      	cmp	r2, r3
 801bb26:	bfb8      	it	lt
 801bb28:	460b      	movlt	r3, r1
 801bb2a:	460c      	mov	r4, r1
 801bb2c:	bfbc      	itt	lt
 801bb2e:	464c      	movlt	r4, r9
 801bb30:	4699      	movlt	r9, r3
 801bb32:	6927      	ldr	r7, [r4, #16]
 801bb34:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801bb38:	68a3      	ldr	r3, [r4, #8]
 801bb3a:	6861      	ldr	r1, [r4, #4]
 801bb3c:	eb07 060a 	add.w	r6, r7, sl
 801bb40:	42b3      	cmp	r3, r6
 801bb42:	b085      	sub	sp, #20
 801bb44:	bfb8      	it	lt
 801bb46:	3101      	addlt	r1, #1
 801bb48:	f7ff fe8e 	bl	801b868 <_Balloc>
 801bb4c:	b930      	cbnz	r0, 801bb5c <__multiply+0x44>
 801bb4e:	4602      	mov	r2, r0
 801bb50:	4b44      	ldr	r3, [pc, #272]	; (801bc64 <__multiply+0x14c>)
 801bb52:	4845      	ldr	r0, [pc, #276]	; (801bc68 <__multiply+0x150>)
 801bb54:	f240 115d 	movw	r1, #349	; 0x15d
 801bb58:	f000 fdd4 	bl	801c704 <__assert_func>
 801bb5c:	f100 0514 	add.w	r5, r0, #20
 801bb60:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801bb64:	462b      	mov	r3, r5
 801bb66:	2200      	movs	r2, #0
 801bb68:	4543      	cmp	r3, r8
 801bb6a:	d321      	bcc.n	801bbb0 <__multiply+0x98>
 801bb6c:	f104 0314 	add.w	r3, r4, #20
 801bb70:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801bb74:	f109 0314 	add.w	r3, r9, #20
 801bb78:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801bb7c:	9202      	str	r2, [sp, #8]
 801bb7e:	1b3a      	subs	r2, r7, r4
 801bb80:	3a15      	subs	r2, #21
 801bb82:	f022 0203 	bic.w	r2, r2, #3
 801bb86:	3204      	adds	r2, #4
 801bb88:	f104 0115 	add.w	r1, r4, #21
 801bb8c:	428f      	cmp	r7, r1
 801bb8e:	bf38      	it	cc
 801bb90:	2204      	movcc	r2, #4
 801bb92:	9201      	str	r2, [sp, #4]
 801bb94:	9a02      	ldr	r2, [sp, #8]
 801bb96:	9303      	str	r3, [sp, #12]
 801bb98:	429a      	cmp	r2, r3
 801bb9a:	d80c      	bhi.n	801bbb6 <__multiply+0x9e>
 801bb9c:	2e00      	cmp	r6, #0
 801bb9e:	dd03      	ble.n	801bba8 <__multiply+0x90>
 801bba0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801bba4:	2b00      	cmp	r3, #0
 801bba6:	d05a      	beq.n	801bc5e <__multiply+0x146>
 801bba8:	6106      	str	r6, [r0, #16]
 801bbaa:	b005      	add	sp, #20
 801bbac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bbb0:	f843 2b04 	str.w	r2, [r3], #4
 801bbb4:	e7d8      	b.n	801bb68 <__multiply+0x50>
 801bbb6:	f8b3 a000 	ldrh.w	sl, [r3]
 801bbba:	f1ba 0f00 	cmp.w	sl, #0
 801bbbe:	d024      	beq.n	801bc0a <__multiply+0xf2>
 801bbc0:	f104 0e14 	add.w	lr, r4, #20
 801bbc4:	46a9      	mov	r9, r5
 801bbc6:	f04f 0c00 	mov.w	ip, #0
 801bbca:	f85e 2b04 	ldr.w	r2, [lr], #4
 801bbce:	f8d9 1000 	ldr.w	r1, [r9]
 801bbd2:	fa1f fb82 	uxth.w	fp, r2
 801bbd6:	b289      	uxth	r1, r1
 801bbd8:	fb0a 110b 	mla	r1, sl, fp, r1
 801bbdc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801bbe0:	f8d9 2000 	ldr.w	r2, [r9]
 801bbe4:	4461      	add	r1, ip
 801bbe6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801bbea:	fb0a c20b 	mla	r2, sl, fp, ip
 801bbee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801bbf2:	b289      	uxth	r1, r1
 801bbf4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801bbf8:	4577      	cmp	r7, lr
 801bbfa:	f849 1b04 	str.w	r1, [r9], #4
 801bbfe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801bc02:	d8e2      	bhi.n	801bbca <__multiply+0xb2>
 801bc04:	9a01      	ldr	r2, [sp, #4]
 801bc06:	f845 c002 	str.w	ip, [r5, r2]
 801bc0a:	9a03      	ldr	r2, [sp, #12]
 801bc0c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801bc10:	3304      	adds	r3, #4
 801bc12:	f1b9 0f00 	cmp.w	r9, #0
 801bc16:	d020      	beq.n	801bc5a <__multiply+0x142>
 801bc18:	6829      	ldr	r1, [r5, #0]
 801bc1a:	f104 0c14 	add.w	ip, r4, #20
 801bc1e:	46ae      	mov	lr, r5
 801bc20:	f04f 0a00 	mov.w	sl, #0
 801bc24:	f8bc b000 	ldrh.w	fp, [ip]
 801bc28:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801bc2c:	fb09 220b 	mla	r2, r9, fp, r2
 801bc30:	4492      	add	sl, r2
 801bc32:	b289      	uxth	r1, r1
 801bc34:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801bc38:	f84e 1b04 	str.w	r1, [lr], #4
 801bc3c:	f85c 2b04 	ldr.w	r2, [ip], #4
 801bc40:	f8be 1000 	ldrh.w	r1, [lr]
 801bc44:	0c12      	lsrs	r2, r2, #16
 801bc46:	fb09 1102 	mla	r1, r9, r2, r1
 801bc4a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801bc4e:	4567      	cmp	r7, ip
 801bc50:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801bc54:	d8e6      	bhi.n	801bc24 <__multiply+0x10c>
 801bc56:	9a01      	ldr	r2, [sp, #4]
 801bc58:	50a9      	str	r1, [r5, r2]
 801bc5a:	3504      	adds	r5, #4
 801bc5c:	e79a      	b.n	801bb94 <__multiply+0x7c>
 801bc5e:	3e01      	subs	r6, #1
 801bc60:	e79c      	b.n	801bb9c <__multiply+0x84>
 801bc62:	bf00      	nop
 801bc64:	080245a8 	.word	0x080245a8
 801bc68:	08024634 	.word	0x08024634

0801bc6c <__pow5mult>:
 801bc6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bc70:	4615      	mov	r5, r2
 801bc72:	f012 0203 	ands.w	r2, r2, #3
 801bc76:	4606      	mov	r6, r0
 801bc78:	460f      	mov	r7, r1
 801bc7a:	d007      	beq.n	801bc8c <__pow5mult+0x20>
 801bc7c:	4c25      	ldr	r4, [pc, #148]	; (801bd14 <__pow5mult+0xa8>)
 801bc7e:	3a01      	subs	r2, #1
 801bc80:	2300      	movs	r3, #0
 801bc82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801bc86:	f7ff fe51 	bl	801b92c <__multadd>
 801bc8a:	4607      	mov	r7, r0
 801bc8c:	10ad      	asrs	r5, r5, #2
 801bc8e:	d03d      	beq.n	801bd0c <__pow5mult+0xa0>
 801bc90:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801bc92:	b97c      	cbnz	r4, 801bcb4 <__pow5mult+0x48>
 801bc94:	2010      	movs	r0, #16
 801bc96:	f7ff fdcd 	bl	801b834 <malloc>
 801bc9a:	4602      	mov	r2, r0
 801bc9c:	6270      	str	r0, [r6, #36]	; 0x24
 801bc9e:	b928      	cbnz	r0, 801bcac <__pow5mult+0x40>
 801bca0:	4b1d      	ldr	r3, [pc, #116]	; (801bd18 <__pow5mult+0xac>)
 801bca2:	481e      	ldr	r0, [pc, #120]	; (801bd1c <__pow5mult+0xb0>)
 801bca4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801bca8:	f000 fd2c 	bl	801c704 <__assert_func>
 801bcac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801bcb0:	6004      	str	r4, [r0, #0]
 801bcb2:	60c4      	str	r4, [r0, #12]
 801bcb4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801bcb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801bcbc:	b94c      	cbnz	r4, 801bcd2 <__pow5mult+0x66>
 801bcbe:	f240 2171 	movw	r1, #625	; 0x271
 801bcc2:	4630      	mov	r0, r6
 801bcc4:	f7ff ff12 	bl	801baec <__i2b>
 801bcc8:	2300      	movs	r3, #0
 801bcca:	f8c8 0008 	str.w	r0, [r8, #8]
 801bcce:	4604      	mov	r4, r0
 801bcd0:	6003      	str	r3, [r0, #0]
 801bcd2:	f04f 0900 	mov.w	r9, #0
 801bcd6:	07eb      	lsls	r3, r5, #31
 801bcd8:	d50a      	bpl.n	801bcf0 <__pow5mult+0x84>
 801bcda:	4639      	mov	r1, r7
 801bcdc:	4622      	mov	r2, r4
 801bcde:	4630      	mov	r0, r6
 801bce0:	f7ff ff1a 	bl	801bb18 <__multiply>
 801bce4:	4639      	mov	r1, r7
 801bce6:	4680      	mov	r8, r0
 801bce8:	4630      	mov	r0, r6
 801bcea:	f7ff fdfd 	bl	801b8e8 <_Bfree>
 801bcee:	4647      	mov	r7, r8
 801bcf0:	106d      	asrs	r5, r5, #1
 801bcf2:	d00b      	beq.n	801bd0c <__pow5mult+0xa0>
 801bcf4:	6820      	ldr	r0, [r4, #0]
 801bcf6:	b938      	cbnz	r0, 801bd08 <__pow5mult+0x9c>
 801bcf8:	4622      	mov	r2, r4
 801bcfa:	4621      	mov	r1, r4
 801bcfc:	4630      	mov	r0, r6
 801bcfe:	f7ff ff0b 	bl	801bb18 <__multiply>
 801bd02:	6020      	str	r0, [r4, #0]
 801bd04:	f8c0 9000 	str.w	r9, [r0]
 801bd08:	4604      	mov	r4, r0
 801bd0a:	e7e4      	b.n	801bcd6 <__pow5mult+0x6a>
 801bd0c:	4638      	mov	r0, r7
 801bd0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bd12:	bf00      	nop
 801bd14:	08024780 	.word	0x08024780
 801bd18:	08024536 	.word	0x08024536
 801bd1c:	08024634 	.word	0x08024634

0801bd20 <__lshift>:
 801bd20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bd24:	460c      	mov	r4, r1
 801bd26:	6849      	ldr	r1, [r1, #4]
 801bd28:	6923      	ldr	r3, [r4, #16]
 801bd2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801bd2e:	68a3      	ldr	r3, [r4, #8]
 801bd30:	4607      	mov	r7, r0
 801bd32:	4691      	mov	r9, r2
 801bd34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801bd38:	f108 0601 	add.w	r6, r8, #1
 801bd3c:	42b3      	cmp	r3, r6
 801bd3e:	db0b      	blt.n	801bd58 <__lshift+0x38>
 801bd40:	4638      	mov	r0, r7
 801bd42:	f7ff fd91 	bl	801b868 <_Balloc>
 801bd46:	4605      	mov	r5, r0
 801bd48:	b948      	cbnz	r0, 801bd5e <__lshift+0x3e>
 801bd4a:	4602      	mov	r2, r0
 801bd4c:	4b2a      	ldr	r3, [pc, #168]	; (801bdf8 <__lshift+0xd8>)
 801bd4e:	482b      	ldr	r0, [pc, #172]	; (801bdfc <__lshift+0xdc>)
 801bd50:	f240 11d9 	movw	r1, #473	; 0x1d9
 801bd54:	f000 fcd6 	bl	801c704 <__assert_func>
 801bd58:	3101      	adds	r1, #1
 801bd5a:	005b      	lsls	r3, r3, #1
 801bd5c:	e7ee      	b.n	801bd3c <__lshift+0x1c>
 801bd5e:	2300      	movs	r3, #0
 801bd60:	f100 0114 	add.w	r1, r0, #20
 801bd64:	f100 0210 	add.w	r2, r0, #16
 801bd68:	4618      	mov	r0, r3
 801bd6a:	4553      	cmp	r3, sl
 801bd6c:	db37      	blt.n	801bdde <__lshift+0xbe>
 801bd6e:	6920      	ldr	r0, [r4, #16]
 801bd70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801bd74:	f104 0314 	add.w	r3, r4, #20
 801bd78:	f019 091f 	ands.w	r9, r9, #31
 801bd7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801bd80:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801bd84:	d02f      	beq.n	801bde6 <__lshift+0xc6>
 801bd86:	f1c9 0e20 	rsb	lr, r9, #32
 801bd8a:	468a      	mov	sl, r1
 801bd8c:	f04f 0c00 	mov.w	ip, #0
 801bd90:	681a      	ldr	r2, [r3, #0]
 801bd92:	fa02 f209 	lsl.w	r2, r2, r9
 801bd96:	ea42 020c 	orr.w	r2, r2, ip
 801bd9a:	f84a 2b04 	str.w	r2, [sl], #4
 801bd9e:	f853 2b04 	ldr.w	r2, [r3], #4
 801bda2:	4298      	cmp	r0, r3
 801bda4:	fa22 fc0e 	lsr.w	ip, r2, lr
 801bda8:	d8f2      	bhi.n	801bd90 <__lshift+0x70>
 801bdaa:	1b03      	subs	r3, r0, r4
 801bdac:	3b15      	subs	r3, #21
 801bdae:	f023 0303 	bic.w	r3, r3, #3
 801bdb2:	3304      	adds	r3, #4
 801bdb4:	f104 0215 	add.w	r2, r4, #21
 801bdb8:	4290      	cmp	r0, r2
 801bdba:	bf38      	it	cc
 801bdbc:	2304      	movcc	r3, #4
 801bdbe:	f841 c003 	str.w	ip, [r1, r3]
 801bdc2:	f1bc 0f00 	cmp.w	ip, #0
 801bdc6:	d001      	beq.n	801bdcc <__lshift+0xac>
 801bdc8:	f108 0602 	add.w	r6, r8, #2
 801bdcc:	3e01      	subs	r6, #1
 801bdce:	4638      	mov	r0, r7
 801bdd0:	612e      	str	r6, [r5, #16]
 801bdd2:	4621      	mov	r1, r4
 801bdd4:	f7ff fd88 	bl	801b8e8 <_Bfree>
 801bdd8:	4628      	mov	r0, r5
 801bdda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bdde:	f842 0f04 	str.w	r0, [r2, #4]!
 801bde2:	3301      	adds	r3, #1
 801bde4:	e7c1      	b.n	801bd6a <__lshift+0x4a>
 801bde6:	3904      	subs	r1, #4
 801bde8:	f853 2b04 	ldr.w	r2, [r3], #4
 801bdec:	f841 2f04 	str.w	r2, [r1, #4]!
 801bdf0:	4298      	cmp	r0, r3
 801bdf2:	d8f9      	bhi.n	801bde8 <__lshift+0xc8>
 801bdf4:	e7ea      	b.n	801bdcc <__lshift+0xac>
 801bdf6:	bf00      	nop
 801bdf8:	080245a8 	.word	0x080245a8
 801bdfc:	08024634 	.word	0x08024634

0801be00 <__mcmp>:
 801be00:	b530      	push	{r4, r5, lr}
 801be02:	6902      	ldr	r2, [r0, #16]
 801be04:	690c      	ldr	r4, [r1, #16]
 801be06:	1b12      	subs	r2, r2, r4
 801be08:	d10e      	bne.n	801be28 <__mcmp+0x28>
 801be0a:	f100 0314 	add.w	r3, r0, #20
 801be0e:	3114      	adds	r1, #20
 801be10:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801be14:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801be18:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801be1c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801be20:	42a5      	cmp	r5, r4
 801be22:	d003      	beq.n	801be2c <__mcmp+0x2c>
 801be24:	d305      	bcc.n	801be32 <__mcmp+0x32>
 801be26:	2201      	movs	r2, #1
 801be28:	4610      	mov	r0, r2
 801be2a:	bd30      	pop	{r4, r5, pc}
 801be2c:	4283      	cmp	r3, r0
 801be2e:	d3f3      	bcc.n	801be18 <__mcmp+0x18>
 801be30:	e7fa      	b.n	801be28 <__mcmp+0x28>
 801be32:	f04f 32ff 	mov.w	r2, #4294967295
 801be36:	e7f7      	b.n	801be28 <__mcmp+0x28>

0801be38 <__mdiff>:
 801be38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be3c:	460c      	mov	r4, r1
 801be3e:	4606      	mov	r6, r0
 801be40:	4611      	mov	r1, r2
 801be42:	4620      	mov	r0, r4
 801be44:	4690      	mov	r8, r2
 801be46:	f7ff ffdb 	bl	801be00 <__mcmp>
 801be4a:	1e05      	subs	r5, r0, #0
 801be4c:	d110      	bne.n	801be70 <__mdiff+0x38>
 801be4e:	4629      	mov	r1, r5
 801be50:	4630      	mov	r0, r6
 801be52:	f7ff fd09 	bl	801b868 <_Balloc>
 801be56:	b930      	cbnz	r0, 801be66 <__mdiff+0x2e>
 801be58:	4b3a      	ldr	r3, [pc, #232]	; (801bf44 <__mdiff+0x10c>)
 801be5a:	4602      	mov	r2, r0
 801be5c:	f240 2132 	movw	r1, #562	; 0x232
 801be60:	4839      	ldr	r0, [pc, #228]	; (801bf48 <__mdiff+0x110>)
 801be62:	f000 fc4f 	bl	801c704 <__assert_func>
 801be66:	2301      	movs	r3, #1
 801be68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801be6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be70:	bfa4      	itt	ge
 801be72:	4643      	movge	r3, r8
 801be74:	46a0      	movge	r8, r4
 801be76:	4630      	mov	r0, r6
 801be78:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801be7c:	bfa6      	itte	ge
 801be7e:	461c      	movge	r4, r3
 801be80:	2500      	movge	r5, #0
 801be82:	2501      	movlt	r5, #1
 801be84:	f7ff fcf0 	bl	801b868 <_Balloc>
 801be88:	b920      	cbnz	r0, 801be94 <__mdiff+0x5c>
 801be8a:	4b2e      	ldr	r3, [pc, #184]	; (801bf44 <__mdiff+0x10c>)
 801be8c:	4602      	mov	r2, r0
 801be8e:	f44f 7110 	mov.w	r1, #576	; 0x240
 801be92:	e7e5      	b.n	801be60 <__mdiff+0x28>
 801be94:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801be98:	6926      	ldr	r6, [r4, #16]
 801be9a:	60c5      	str	r5, [r0, #12]
 801be9c:	f104 0914 	add.w	r9, r4, #20
 801bea0:	f108 0514 	add.w	r5, r8, #20
 801bea4:	f100 0e14 	add.w	lr, r0, #20
 801bea8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801beac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801beb0:	f108 0210 	add.w	r2, r8, #16
 801beb4:	46f2      	mov	sl, lr
 801beb6:	2100      	movs	r1, #0
 801beb8:	f859 3b04 	ldr.w	r3, [r9], #4
 801bebc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801bec0:	fa1f f883 	uxth.w	r8, r3
 801bec4:	fa11 f18b 	uxtah	r1, r1, fp
 801bec8:	0c1b      	lsrs	r3, r3, #16
 801beca:	eba1 0808 	sub.w	r8, r1, r8
 801bece:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801bed2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801bed6:	fa1f f888 	uxth.w	r8, r8
 801beda:	1419      	asrs	r1, r3, #16
 801bedc:	454e      	cmp	r6, r9
 801bede:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801bee2:	f84a 3b04 	str.w	r3, [sl], #4
 801bee6:	d8e7      	bhi.n	801beb8 <__mdiff+0x80>
 801bee8:	1b33      	subs	r3, r6, r4
 801beea:	3b15      	subs	r3, #21
 801beec:	f023 0303 	bic.w	r3, r3, #3
 801bef0:	3304      	adds	r3, #4
 801bef2:	3415      	adds	r4, #21
 801bef4:	42a6      	cmp	r6, r4
 801bef6:	bf38      	it	cc
 801bef8:	2304      	movcc	r3, #4
 801befa:	441d      	add	r5, r3
 801befc:	4473      	add	r3, lr
 801befe:	469e      	mov	lr, r3
 801bf00:	462e      	mov	r6, r5
 801bf02:	4566      	cmp	r6, ip
 801bf04:	d30e      	bcc.n	801bf24 <__mdiff+0xec>
 801bf06:	f10c 0203 	add.w	r2, ip, #3
 801bf0a:	1b52      	subs	r2, r2, r5
 801bf0c:	f022 0203 	bic.w	r2, r2, #3
 801bf10:	3d03      	subs	r5, #3
 801bf12:	45ac      	cmp	ip, r5
 801bf14:	bf38      	it	cc
 801bf16:	2200      	movcc	r2, #0
 801bf18:	441a      	add	r2, r3
 801bf1a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801bf1e:	b17b      	cbz	r3, 801bf40 <__mdiff+0x108>
 801bf20:	6107      	str	r7, [r0, #16]
 801bf22:	e7a3      	b.n	801be6c <__mdiff+0x34>
 801bf24:	f856 8b04 	ldr.w	r8, [r6], #4
 801bf28:	fa11 f288 	uxtah	r2, r1, r8
 801bf2c:	1414      	asrs	r4, r2, #16
 801bf2e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801bf32:	b292      	uxth	r2, r2
 801bf34:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801bf38:	f84e 2b04 	str.w	r2, [lr], #4
 801bf3c:	1421      	asrs	r1, r4, #16
 801bf3e:	e7e0      	b.n	801bf02 <__mdiff+0xca>
 801bf40:	3f01      	subs	r7, #1
 801bf42:	e7ea      	b.n	801bf1a <__mdiff+0xe2>
 801bf44:	080245a8 	.word	0x080245a8
 801bf48:	08024634 	.word	0x08024634

0801bf4c <__ulp>:
 801bf4c:	b082      	sub	sp, #8
 801bf4e:	ed8d 0b00 	vstr	d0, [sp]
 801bf52:	9b01      	ldr	r3, [sp, #4]
 801bf54:	4912      	ldr	r1, [pc, #72]	; (801bfa0 <__ulp+0x54>)
 801bf56:	4019      	ands	r1, r3
 801bf58:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801bf5c:	2900      	cmp	r1, #0
 801bf5e:	dd05      	ble.n	801bf6c <__ulp+0x20>
 801bf60:	2200      	movs	r2, #0
 801bf62:	460b      	mov	r3, r1
 801bf64:	ec43 2b10 	vmov	d0, r2, r3
 801bf68:	b002      	add	sp, #8
 801bf6a:	4770      	bx	lr
 801bf6c:	4249      	negs	r1, r1
 801bf6e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801bf72:	ea4f 5021 	mov.w	r0, r1, asr #20
 801bf76:	f04f 0200 	mov.w	r2, #0
 801bf7a:	f04f 0300 	mov.w	r3, #0
 801bf7e:	da04      	bge.n	801bf8a <__ulp+0x3e>
 801bf80:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801bf84:	fa41 f300 	asr.w	r3, r1, r0
 801bf88:	e7ec      	b.n	801bf64 <__ulp+0x18>
 801bf8a:	f1a0 0114 	sub.w	r1, r0, #20
 801bf8e:	291e      	cmp	r1, #30
 801bf90:	bfda      	itte	le
 801bf92:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801bf96:	fa20 f101 	lsrle.w	r1, r0, r1
 801bf9a:	2101      	movgt	r1, #1
 801bf9c:	460a      	mov	r2, r1
 801bf9e:	e7e1      	b.n	801bf64 <__ulp+0x18>
 801bfa0:	7ff00000 	.word	0x7ff00000

0801bfa4 <__b2d>:
 801bfa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bfa6:	6905      	ldr	r5, [r0, #16]
 801bfa8:	f100 0714 	add.w	r7, r0, #20
 801bfac:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801bfb0:	1f2e      	subs	r6, r5, #4
 801bfb2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801bfb6:	4620      	mov	r0, r4
 801bfb8:	f7ff fd48 	bl	801ba4c <__hi0bits>
 801bfbc:	f1c0 0320 	rsb	r3, r0, #32
 801bfc0:	280a      	cmp	r0, #10
 801bfc2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801c040 <__b2d+0x9c>
 801bfc6:	600b      	str	r3, [r1, #0]
 801bfc8:	dc14      	bgt.n	801bff4 <__b2d+0x50>
 801bfca:	f1c0 0e0b 	rsb	lr, r0, #11
 801bfce:	fa24 f10e 	lsr.w	r1, r4, lr
 801bfd2:	42b7      	cmp	r7, r6
 801bfd4:	ea41 030c 	orr.w	r3, r1, ip
 801bfd8:	bf34      	ite	cc
 801bfda:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801bfde:	2100      	movcs	r1, #0
 801bfe0:	3015      	adds	r0, #21
 801bfe2:	fa04 f000 	lsl.w	r0, r4, r0
 801bfe6:	fa21 f10e 	lsr.w	r1, r1, lr
 801bfea:	ea40 0201 	orr.w	r2, r0, r1
 801bfee:	ec43 2b10 	vmov	d0, r2, r3
 801bff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bff4:	42b7      	cmp	r7, r6
 801bff6:	bf3a      	itte	cc
 801bff8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801bffc:	f1a5 0608 	subcc.w	r6, r5, #8
 801c000:	2100      	movcs	r1, #0
 801c002:	380b      	subs	r0, #11
 801c004:	d017      	beq.n	801c036 <__b2d+0x92>
 801c006:	f1c0 0c20 	rsb	ip, r0, #32
 801c00a:	fa04 f500 	lsl.w	r5, r4, r0
 801c00e:	42be      	cmp	r6, r7
 801c010:	fa21 f40c 	lsr.w	r4, r1, ip
 801c014:	ea45 0504 	orr.w	r5, r5, r4
 801c018:	bf8c      	ite	hi
 801c01a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801c01e:	2400      	movls	r4, #0
 801c020:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801c024:	fa01 f000 	lsl.w	r0, r1, r0
 801c028:	fa24 f40c 	lsr.w	r4, r4, ip
 801c02c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801c030:	ea40 0204 	orr.w	r2, r0, r4
 801c034:	e7db      	b.n	801bfee <__b2d+0x4a>
 801c036:	ea44 030c 	orr.w	r3, r4, ip
 801c03a:	460a      	mov	r2, r1
 801c03c:	e7d7      	b.n	801bfee <__b2d+0x4a>
 801c03e:	bf00      	nop
 801c040:	3ff00000 	.word	0x3ff00000

0801c044 <__d2b>:
 801c044:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801c048:	4689      	mov	r9, r1
 801c04a:	2101      	movs	r1, #1
 801c04c:	ec57 6b10 	vmov	r6, r7, d0
 801c050:	4690      	mov	r8, r2
 801c052:	f7ff fc09 	bl	801b868 <_Balloc>
 801c056:	4604      	mov	r4, r0
 801c058:	b930      	cbnz	r0, 801c068 <__d2b+0x24>
 801c05a:	4602      	mov	r2, r0
 801c05c:	4b25      	ldr	r3, [pc, #148]	; (801c0f4 <__d2b+0xb0>)
 801c05e:	4826      	ldr	r0, [pc, #152]	; (801c0f8 <__d2b+0xb4>)
 801c060:	f240 310a 	movw	r1, #778	; 0x30a
 801c064:	f000 fb4e 	bl	801c704 <__assert_func>
 801c068:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801c06c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801c070:	bb35      	cbnz	r5, 801c0c0 <__d2b+0x7c>
 801c072:	2e00      	cmp	r6, #0
 801c074:	9301      	str	r3, [sp, #4]
 801c076:	d028      	beq.n	801c0ca <__d2b+0x86>
 801c078:	4668      	mov	r0, sp
 801c07a:	9600      	str	r6, [sp, #0]
 801c07c:	f7ff fd06 	bl	801ba8c <__lo0bits>
 801c080:	9900      	ldr	r1, [sp, #0]
 801c082:	b300      	cbz	r0, 801c0c6 <__d2b+0x82>
 801c084:	9a01      	ldr	r2, [sp, #4]
 801c086:	f1c0 0320 	rsb	r3, r0, #32
 801c08a:	fa02 f303 	lsl.w	r3, r2, r3
 801c08e:	430b      	orrs	r3, r1
 801c090:	40c2      	lsrs	r2, r0
 801c092:	6163      	str	r3, [r4, #20]
 801c094:	9201      	str	r2, [sp, #4]
 801c096:	9b01      	ldr	r3, [sp, #4]
 801c098:	61a3      	str	r3, [r4, #24]
 801c09a:	2b00      	cmp	r3, #0
 801c09c:	bf14      	ite	ne
 801c09e:	2202      	movne	r2, #2
 801c0a0:	2201      	moveq	r2, #1
 801c0a2:	6122      	str	r2, [r4, #16]
 801c0a4:	b1d5      	cbz	r5, 801c0dc <__d2b+0x98>
 801c0a6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801c0aa:	4405      	add	r5, r0
 801c0ac:	f8c9 5000 	str.w	r5, [r9]
 801c0b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801c0b4:	f8c8 0000 	str.w	r0, [r8]
 801c0b8:	4620      	mov	r0, r4
 801c0ba:	b003      	add	sp, #12
 801c0bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c0c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801c0c4:	e7d5      	b.n	801c072 <__d2b+0x2e>
 801c0c6:	6161      	str	r1, [r4, #20]
 801c0c8:	e7e5      	b.n	801c096 <__d2b+0x52>
 801c0ca:	a801      	add	r0, sp, #4
 801c0cc:	f7ff fcde 	bl	801ba8c <__lo0bits>
 801c0d0:	9b01      	ldr	r3, [sp, #4]
 801c0d2:	6163      	str	r3, [r4, #20]
 801c0d4:	2201      	movs	r2, #1
 801c0d6:	6122      	str	r2, [r4, #16]
 801c0d8:	3020      	adds	r0, #32
 801c0da:	e7e3      	b.n	801c0a4 <__d2b+0x60>
 801c0dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801c0e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801c0e4:	f8c9 0000 	str.w	r0, [r9]
 801c0e8:	6918      	ldr	r0, [r3, #16]
 801c0ea:	f7ff fcaf 	bl	801ba4c <__hi0bits>
 801c0ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801c0f2:	e7df      	b.n	801c0b4 <__d2b+0x70>
 801c0f4:	080245a8 	.word	0x080245a8
 801c0f8:	08024634 	.word	0x08024634

0801c0fc <__ratio>:
 801c0fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c100:	4688      	mov	r8, r1
 801c102:	4669      	mov	r1, sp
 801c104:	4681      	mov	r9, r0
 801c106:	f7ff ff4d 	bl	801bfa4 <__b2d>
 801c10a:	a901      	add	r1, sp, #4
 801c10c:	4640      	mov	r0, r8
 801c10e:	ec55 4b10 	vmov	r4, r5, d0
 801c112:	f7ff ff47 	bl	801bfa4 <__b2d>
 801c116:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801c11a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801c11e:	eba3 0c02 	sub.w	ip, r3, r2
 801c122:	e9dd 3200 	ldrd	r3, r2, [sp]
 801c126:	1a9b      	subs	r3, r3, r2
 801c128:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801c12c:	ec51 0b10 	vmov	r0, r1, d0
 801c130:	2b00      	cmp	r3, #0
 801c132:	bfd6      	itet	le
 801c134:	460a      	movle	r2, r1
 801c136:	462a      	movgt	r2, r5
 801c138:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801c13c:	468b      	mov	fp, r1
 801c13e:	462f      	mov	r7, r5
 801c140:	bfd4      	ite	le
 801c142:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801c146:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801c14a:	4620      	mov	r0, r4
 801c14c:	ee10 2a10 	vmov	r2, s0
 801c150:	465b      	mov	r3, fp
 801c152:	4639      	mov	r1, r7
 801c154:	f7e4 fb92 	bl	800087c <__aeabi_ddiv>
 801c158:	ec41 0b10 	vmov	d0, r0, r1
 801c15c:	b003      	add	sp, #12
 801c15e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c162 <__copybits>:
 801c162:	3901      	subs	r1, #1
 801c164:	b570      	push	{r4, r5, r6, lr}
 801c166:	1149      	asrs	r1, r1, #5
 801c168:	6914      	ldr	r4, [r2, #16]
 801c16a:	3101      	adds	r1, #1
 801c16c:	f102 0314 	add.w	r3, r2, #20
 801c170:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801c174:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801c178:	1f05      	subs	r5, r0, #4
 801c17a:	42a3      	cmp	r3, r4
 801c17c:	d30c      	bcc.n	801c198 <__copybits+0x36>
 801c17e:	1aa3      	subs	r3, r4, r2
 801c180:	3b11      	subs	r3, #17
 801c182:	f023 0303 	bic.w	r3, r3, #3
 801c186:	3211      	adds	r2, #17
 801c188:	42a2      	cmp	r2, r4
 801c18a:	bf88      	it	hi
 801c18c:	2300      	movhi	r3, #0
 801c18e:	4418      	add	r0, r3
 801c190:	2300      	movs	r3, #0
 801c192:	4288      	cmp	r0, r1
 801c194:	d305      	bcc.n	801c1a2 <__copybits+0x40>
 801c196:	bd70      	pop	{r4, r5, r6, pc}
 801c198:	f853 6b04 	ldr.w	r6, [r3], #4
 801c19c:	f845 6f04 	str.w	r6, [r5, #4]!
 801c1a0:	e7eb      	b.n	801c17a <__copybits+0x18>
 801c1a2:	f840 3b04 	str.w	r3, [r0], #4
 801c1a6:	e7f4      	b.n	801c192 <__copybits+0x30>

0801c1a8 <__any_on>:
 801c1a8:	f100 0214 	add.w	r2, r0, #20
 801c1ac:	6900      	ldr	r0, [r0, #16]
 801c1ae:	114b      	asrs	r3, r1, #5
 801c1b0:	4298      	cmp	r0, r3
 801c1b2:	b510      	push	{r4, lr}
 801c1b4:	db11      	blt.n	801c1da <__any_on+0x32>
 801c1b6:	dd0a      	ble.n	801c1ce <__any_on+0x26>
 801c1b8:	f011 011f 	ands.w	r1, r1, #31
 801c1bc:	d007      	beq.n	801c1ce <__any_on+0x26>
 801c1be:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801c1c2:	fa24 f001 	lsr.w	r0, r4, r1
 801c1c6:	fa00 f101 	lsl.w	r1, r0, r1
 801c1ca:	428c      	cmp	r4, r1
 801c1cc:	d10b      	bne.n	801c1e6 <__any_on+0x3e>
 801c1ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c1d2:	4293      	cmp	r3, r2
 801c1d4:	d803      	bhi.n	801c1de <__any_on+0x36>
 801c1d6:	2000      	movs	r0, #0
 801c1d8:	bd10      	pop	{r4, pc}
 801c1da:	4603      	mov	r3, r0
 801c1dc:	e7f7      	b.n	801c1ce <__any_on+0x26>
 801c1de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801c1e2:	2900      	cmp	r1, #0
 801c1e4:	d0f5      	beq.n	801c1d2 <__any_on+0x2a>
 801c1e6:	2001      	movs	r0, #1
 801c1e8:	e7f6      	b.n	801c1d8 <__any_on+0x30>

0801c1ea <_calloc_r>:
 801c1ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c1ec:	fba1 2402 	umull	r2, r4, r1, r2
 801c1f0:	b94c      	cbnz	r4, 801c206 <_calloc_r+0x1c>
 801c1f2:	4611      	mov	r1, r2
 801c1f4:	9201      	str	r2, [sp, #4]
 801c1f6:	f000 f87b 	bl	801c2f0 <_malloc_r>
 801c1fa:	9a01      	ldr	r2, [sp, #4]
 801c1fc:	4605      	mov	r5, r0
 801c1fe:	b930      	cbnz	r0, 801c20e <_calloc_r+0x24>
 801c200:	4628      	mov	r0, r5
 801c202:	b003      	add	sp, #12
 801c204:	bd30      	pop	{r4, r5, pc}
 801c206:	220c      	movs	r2, #12
 801c208:	6002      	str	r2, [r0, #0]
 801c20a:	2500      	movs	r5, #0
 801c20c:	e7f8      	b.n	801c200 <_calloc_r+0x16>
 801c20e:	4621      	mov	r1, r4
 801c210:	f7fc fbce 	bl	80189b0 <memset>
 801c214:	e7f4      	b.n	801c200 <_calloc_r+0x16>
	...

0801c218 <_free_r>:
 801c218:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c21a:	2900      	cmp	r1, #0
 801c21c:	d044      	beq.n	801c2a8 <_free_r+0x90>
 801c21e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c222:	9001      	str	r0, [sp, #4]
 801c224:	2b00      	cmp	r3, #0
 801c226:	f1a1 0404 	sub.w	r4, r1, #4
 801c22a:	bfb8      	it	lt
 801c22c:	18e4      	addlt	r4, r4, r3
 801c22e:	f000 fab3 	bl	801c798 <__malloc_lock>
 801c232:	4a1e      	ldr	r2, [pc, #120]	; (801c2ac <_free_r+0x94>)
 801c234:	9801      	ldr	r0, [sp, #4]
 801c236:	6813      	ldr	r3, [r2, #0]
 801c238:	b933      	cbnz	r3, 801c248 <_free_r+0x30>
 801c23a:	6063      	str	r3, [r4, #4]
 801c23c:	6014      	str	r4, [r2, #0]
 801c23e:	b003      	add	sp, #12
 801c240:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c244:	f000 baae 	b.w	801c7a4 <__malloc_unlock>
 801c248:	42a3      	cmp	r3, r4
 801c24a:	d908      	bls.n	801c25e <_free_r+0x46>
 801c24c:	6825      	ldr	r5, [r4, #0]
 801c24e:	1961      	adds	r1, r4, r5
 801c250:	428b      	cmp	r3, r1
 801c252:	bf01      	itttt	eq
 801c254:	6819      	ldreq	r1, [r3, #0]
 801c256:	685b      	ldreq	r3, [r3, #4]
 801c258:	1949      	addeq	r1, r1, r5
 801c25a:	6021      	streq	r1, [r4, #0]
 801c25c:	e7ed      	b.n	801c23a <_free_r+0x22>
 801c25e:	461a      	mov	r2, r3
 801c260:	685b      	ldr	r3, [r3, #4]
 801c262:	b10b      	cbz	r3, 801c268 <_free_r+0x50>
 801c264:	42a3      	cmp	r3, r4
 801c266:	d9fa      	bls.n	801c25e <_free_r+0x46>
 801c268:	6811      	ldr	r1, [r2, #0]
 801c26a:	1855      	adds	r5, r2, r1
 801c26c:	42a5      	cmp	r5, r4
 801c26e:	d10b      	bne.n	801c288 <_free_r+0x70>
 801c270:	6824      	ldr	r4, [r4, #0]
 801c272:	4421      	add	r1, r4
 801c274:	1854      	adds	r4, r2, r1
 801c276:	42a3      	cmp	r3, r4
 801c278:	6011      	str	r1, [r2, #0]
 801c27a:	d1e0      	bne.n	801c23e <_free_r+0x26>
 801c27c:	681c      	ldr	r4, [r3, #0]
 801c27e:	685b      	ldr	r3, [r3, #4]
 801c280:	6053      	str	r3, [r2, #4]
 801c282:	4421      	add	r1, r4
 801c284:	6011      	str	r1, [r2, #0]
 801c286:	e7da      	b.n	801c23e <_free_r+0x26>
 801c288:	d902      	bls.n	801c290 <_free_r+0x78>
 801c28a:	230c      	movs	r3, #12
 801c28c:	6003      	str	r3, [r0, #0]
 801c28e:	e7d6      	b.n	801c23e <_free_r+0x26>
 801c290:	6825      	ldr	r5, [r4, #0]
 801c292:	1961      	adds	r1, r4, r5
 801c294:	428b      	cmp	r3, r1
 801c296:	bf04      	itt	eq
 801c298:	6819      	ldreq	r1, [r3, #0]
 801c29a:	685b      	ldreq	r3, [r3, #4]
 801c29c:	6063      	str	r3, [r4, #4]
 801c29e:	bf04      	itt	eq
 801c2a0:	1949      	addeq	r1, r1, r5
 801c2a2:	6021      	streq	r1, [r4, #0]
 801c2a4:	6054      	str	r4, [r2, #4]
 801c2a6:	e7ca      	b.n	801c23e <_free_r+0x26>
 801c2a8:	b003      	add	sp, #12
 801c2aa:	bd30      	pop	{r4, r5, pc}
 801c2ac:	20037298 	.word	0x20037298

0801c2b0 <sbrk_aligned>:
 801c2b0:	b570      	push	{r4, r5, r6, lr}
 801c2b2:	4e0e      	ldr	r6, [pc, #56]	; (801c2ec <sbrk_aligned+0x3c>)
 801c2b4:	460c      	mov	r4, r1
 801c2b6:	6831      	ldr	r1, [r6, #0]
 801c2b8:	4605      	mov	r5, r0
 801c2ba:	b911      	cbnz	r1, 801c2c2 <sbrk_aligned+0x12>
 801c2bc:	f000 f9f0 	bl	801c6a0 <_sbrk_r>
 801c2c0:	6030      	str	r0, [r6, #0]
 801c2c2:	4621      	mov	r1, r4
 801c2c4:	4628      	mov	r0, r5
 801c2c6:	f000 f9eb 	bl	801c6a0 <_sbrk_r>
 801c2ca:	1c43      	adds	r3, r0, #1
 801c2cc:	d00a      	beq.n	801c2e4 <sbrk_aligned+0x34>
 801c2ce:	1cc4      	adds	r4, r0, #3
 801c2d0:	f024 0403 	bic.w	r4, r4, #3
 801c2d4:	42a0      	cmp	r0, r4
 801c2d6:	d007      	beq.n	801c2e8 <sbrk_aligned+0x38>
 801c2d8:	1a21      	subs	r1, r4, r0
 801c2da:	4628      	mov	r0, r5
 801c2dc:	f000 f9e0 	bl	801c6a0 <_sbrk_r>
 801c2e0:	3001      	adds	r0, #1
 801c2e2:	d101      	bne.n	801c2e8 <sbrk_aligned+0x38>
 801c2e4:	f04f 34ff 	mov.w	r4, #4294967295
 801c2e8:	4620      	mov	r0, r4
 801c2ea:	bd70      	pop	{r4, r5, r6, pc}
 801c2ec:	2003729c 	.word	0x2003729c

0801c2f0 <_malloc_r>:
 801c2f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c2f4:	1ccd      	adds	r5, r1, #3
 801c2f6:	f025 0503 	bic.w	r5, r5, #3
 801c2fa:	3508      	adds	r5, #8
 801c2fc:	2d0c      	cmp	r5, #12
 801c2fe:	bf38      	it	cc
 801c300:	250c      	movcc	r5, #12
 801c302:	2d00      	cmp	r5, #0
 801c304:	4607      	mov	r7, r0
 801c306:	db01      	blt.n	801c30c <_malloc_r+0x1c>
 801c308:	42a9      	cmp	r1, r5
 801c30a:	d905      	bls.n	801c318 <_malloc_r+0x28>
 801c30c:	230c      	movs	r3, #12
 801c30e:	603b      	str	r3, [r7, #0]
 801c310:	2600      	movs	r6, #0
 801c312:	4630      	mov	r0, r6
 801c314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c318:	4e2e      	ldr	r6, [pc, #184]	; (801c3d4 <_malloc_r+0xe4>)
 801c31a:	f000 fa3d 	bl	801c798 <__malloc_lock>
 801c31e:	6833      	ldr	r3, [r6, #0]
 801c320:	461c      	mov	r4, r3
 801c322:	bb34      	cbnz	r4, 801c372 <_malloc_r+0x82>
 801c324:	4629      	mov	r1, r5
 801c326:	4638      	mov	r0, r7
 801c328:	f7ff ffc2 	bl	801c2b0 <sbrk_aligned>
 801c32c:	1c43      	adds	r3, r0, #1
 801c32e:	4604      	mov	r4, r0
 801c330:	d14d      	bne.n	801c3ce <_malloc_r+0xde>
 801c332:	6834      	ldr	r4, [r6, #0]
 801c334:	4626      	mov	r6, r4
 801c336:	2e00      	cmp	r6, #0
 801c338:	d140      	bne.n	801c3bc <_malloc_r+0xcc>
 801c33a:	6823      	ldr	r3, [r4, #0]
 801c33c:	4631      	mov	r1, r6
 801c33e:	4638      	mov	r0, r7
 801c340:	eb04 0803 	add.w	r8, r4, r3
 801c344:	f000 f9ac 	bl	801c6a0 <_sbrk_r>
 801c348:	4580      	cmp	r8, r0
 801c34a:	d13a      	bne.n	801c3c2 <_malloc_r+0xd2>
 801c34c:	6821      	ldr	r1, [r4, #0]
 801c34e:	3503      	adds	r5, #3
 801c350:	1a6d      	subs	r5, r5, r1
 801c352:	f025 0503 	bic.w	r5, r5, #3
 801c356:	3508      	adds	r5, #8
 801c358:	2d0c      	cmp	r5, #12
 801c35a:	bf38      	it	cc
 801c35c:	250c      	movcc	r5, #12
 801c35e:	4629      	mov	r1, r5
 801c360:	4638      	mov	r0, r7
 801c362:	f7ff ffa5 	bl	801c2b0 <sbrk_aligned>
 801c366:	3001      	adds	r0, #1
 801c368:	d02b      	beq.n	801c3c2 <_malloc_r+0xd2>
 801c36a:	6823      	ldr	r3, [r4, #0]
 801c36c:	442b      	add	r3, r5
 801c36e:	6023      	str	r3, [r4, #0]
 801c370:	e00e      	b.n	801c390 <_malloc_r+0xa0>
 801c372:	6822      	ldr	r2, [r4, #0]
 801c374:	1b52      	subs	r2, r2, r5
 801c376:	d41e      	bmi.n	801c3b6 <_malloc_r+0xc6>
 801c378:	2a0b      	cmp	r2, #11
 801c37a:	d916      	bls.n	801c3aa <_malloc_r+0xba>
 801c37c:	1961      	adds	r1, r4, r5
 801c37e:	42a3      	cmp	r3, r4
 801c380:	6025      	str	r5, [r4, #0]
 801c382:	bf18      	it	ne
 801c384:	6059      	strne	r1, [r3, #4]
 801c386:	6863      	ldr	r3, [r4, #4]
 801c388:	bf08      	it	eq
 801c38a:	6031      	streq	r1, [r6, #0]
 801c38c:	5162      	str	r2, [r4, r5]
 801c38e:	604b      	str	r3, [r1, #4]
 801c390:	4638      	mov	r0, r7
 801c392:	f104 060b 	add.w	r6, r4, #11
 801c396:	f000 fa05 	bl	801c7a4 <__malloc_unlock>
 801c39a:	f026 0607 	bic.w	r6, r6, #7
 801c39e:	1d23      	adds	r3, r4, #4
 801c3a0:	1af2      	subs	r2, r6, r3
 801c3a2:	d0b6      	beq.n	801c312 <_malloc_r+0x22>
 801c3a4:	1b9b      	subs	r3, r3, r6
 801c3a6:	50a3      	str	r3, [r4, r2]
 801c3a8:	e7b3      	b.n	801c312 <_malloc_r+0x22>
 801c3aa:	6862      	ldr	r2, [r4, #4]
 801c3ac:	42a3      	cmp	r3, r4
 801c3ae:	bf0c      	ite	eq
 801c3b0:	6032      	streq	r2, [r6, #0]
 801c3b2:	605a      	strne	r2, [r3, #4]
 801c3b4:	e7ec      	b.n	801c390 <_malloc_r+0xa0>
 801c3b6:	4623      	mov	r3, r4
 801c3b8:	6864      	ldr	r4, [r4, #4]
 801c3ba:	e7b2      	b.n	801c322 <_malloc_r+0x32>
 801c3bc:	4634      	mov	r4, r6
 801c3be:	6876      	ldr	r6, [r6, #4]
 801c3c0:	e7b9      	b.n	801c336 <_malloc_r+0x46>
 801c3c2:	230c      	movs	r3, #12
 801c3c4:	603b      	str	r3, [r7, #0]
 801c3c6:	4638      	mov	r0, r7
 801c3c8:	f000 f9ec 	bl	801c7a4 <__malloc_unlock>
 801c3cc:	e7a1      	b.n	801c312 <_malloc_r+0x22>
 801c3ce:	6025      	str	r5, [r4, #0]
 801c3d0:	e7de      	b.n	801c390 <_malloc_r+0xa0>
 801c3d2:	bf00      	nop
 801c3d4:	20037298 	.word	0x20037298

0801c3d8 <__ssputs_r>:
 801c3d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c3dc:	688e      	ldr	r6, [r1, #8]
 801c3de:	429e      	cmp	r6, r3
 801c3e0:	4682      	mov	sl, r0
 801c3e2:	460c      	mov	r4, r1
 801c3e4:	4690      	mov	r8, r2
 801c3e6:	461f      	mov	r7, r3
 801c3e8:	d838      	bhi.n	801c45c <__ssputs_r+0x84>
 801c3ea:	898a      	ldrh	r2, [r1, #12]
 801c3ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801c3f0:	d032      	beq.n	801c458 <__ssputs_r+0x80>
 801c3f2:	6825      	ldr	r5, [r4, #0]
 801c3f4:	6909      	ldr	r1, [r1, #16]
 801c3f6:	eba5 0901 	sub.w	r9, r5, r1
 801c3fa:	6965      	ldr	r5, [r4, #20]
 801c3fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c400:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801c404:	3301      	adds	r3, #1
 801c406:	444b      	add	r3, r9
 801c408:	106d      	asrs	r5, r5, #1
 801c40a:	429d      	cmp	r5, r3
 801c40c:	bf38      	it	cc
 801c40e:	461d      	movcc	r5, r3
 801c410:	0553      	lsls	r3, r2, #21
 801c412:	d531      	bpl.n	801c478 <__ssputs_r+0xa0>
 801c414:	4629      	mov	r1, r5
 801c416:	f7ff ff6b 	bl	801c2f0 <_malloc_r>
 801c41a:	4606      	mov	r6, r0
 801c41c:	b950      	cbnz	r0, 801c434 <__ssputs_r+0x5c>
 801c41e:	230c      	movs	r3, #12
 801c420:	f8ca 3000 	str.w	r3, [sl]
 801c424:	89a3      	ldrh	r3, [r4, #12]
 801c426:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c42a:	81a3      	strh	r3, [r4, #12]
 801c42c:	f04f 30ff 	mov.w	r0, #4294967295
 801c430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c434:	6921      	ldr	r1, [r4, #16]
 801c436:	464a      	mov	r2, r9
 801c438:	f7fc faac 	bl	8018994 <memcpy>
 801c43c:	89a3      	ldrh	r3, [r4, #12]
 801c43e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801c442:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c446:	81a3      	strh	r3, [r4, #12]
 801c448:	6126      	str	r6, [r4, #16]
 801c44a:	6165      	str	r5, [r4, #20]
 801c44c:	444e      	add	r6, r9
 801c44e:	eba5 0509 	sub.w	r5, r5, r9
 801c452:	6026      	str	r6, [r4, #0]
 801c454:	60a5      	str	r5, [r4, #8]
 801c456:	463e      	mov	r6, r7
 801c458:	42be      	cmp	r6, r7
 801c45a:	d900      	bls.n	801c45e <__ssputs_r+0x86>
 801c45c:	463e      	mov	r6, r7
 801c45e:	6820      	ldr	r0, [r4, #0]
 801c460:	4632      	mov	r2, r6
 801c462:	4641      	mov	r1, r8
 801c464:	f000 f97e 	bl	801c764 <memmove>
 801c468:	68a3      	ldr	r3, [r4, #8]
 801c46a:	1b9b      	subs	r3, r3, r6
 801c46c:	60a3      	str	r3, [r4, #8]
 801c46e:	6823      	ldr	r3, [r4, #0]
 801c470:	4433      	add	r3, r6
 801c472:	6023      	str	r3, [r4, #0]
 801c474:	2000      	movs	r0, #0
 801c476:	e7db      	b.n	801c430 <__ssputs_r+0x58>
 801c478:	462a      	mov	r2, r5
 801c47a:	f000 f999 	bl	801c7b0 <_realloc_r>
 801c47e:	4606      	mov	r6, r0
 801c480:	2800      	cmp	r0, #0
 801c482:	d1e1      	bne.n	801c448 <__ssputs_r+0x70>
 801c484:	6921      	ldr	r1, [r4, #16]
 801c486:	4650      	mov	r0, sl
 801c488:	f7ff fec6 	bl	801c218 <_free_r>
 801c48c:	e7c7      	b.n	801c41e <__ssputs_r+0x46>
	...

0801c490 <_svfiprintf_r>:
 801c490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c494:	4698      	mov	r8, r3
 801c496:	898b      	ldrh	r3, [r1, #12]
 801c498:	061b      	lsls	r3, r3, #24
 801c49a:	b09d      	sub	sp, #116	; 0x74
 801c49c:	4607      	mov	r7, r0
 801c49e:	460d      	mov	r5, r1
 801c4a0:	4614      	mov	r4, r2
 801c4a2:	d50e      	bpl.n	801c4c2 <_svfiprintf_r+0x32>
 801c4a4:	690b      	ldr	r3, [r1, #16]
 801c4a6:	b963      	cbnz	r3, 801c4c2 <_svfiprintf_r+0x32>
 801c4a8:	2140      	movs	r1, #64	; 0x40
 801c4aa:	f7ff ff21 	bl	801c2f0 <_malloc_r>
 801c4ae:	6028      	str	r0, [r5, #0]
 801c4b0:	6128      	str	r0, [r5, #16]
 801c4b2:	b920      	cbnz	r0, 801c4be <_svfiprintf_r+0x2e>
 801c4b4:	230c      	movs	r3, #12
 801c4b6:	603b      	str	r3, [r7, #0]
 801c4b8:	f04f 30ff 	mov.w	r0, #4294967295
 801c4bc:	e0d1      	b.n	801c662 <_svfiprintf_r+0x1d2>
 801c4be:	2340      	movs	r3, #64	; 0x40
 801c4c0:	616b      	str	r3, [r5, #20]
 801c4c2:	2300      	movs	r3, #0
 801c4c4:	9309      	str	r3, [sp, #36]	; 0x24
 801c4c6:	2320      	movs	r3, #32
 801c4c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c4cc:	f8cd 800c 	str.w	r8, [sp, #12]
 801c4d0:	2330      	movs	r3, #48	; 0x30
 801c4d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801c67c <_svfiprintf_r+0x1ec>
 801c4d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c4da:	f04f 0901 	mov.w	r9, #1
 801c4de:	4623      	mov	r3, r4
 801c4e0:	469a      	mov	sl, r3
 801c4e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c4e6:	b10a      	cbz	r2, 801c4ec <_svfiprintf_r+0x5c>
 801c4e8:	2a25      	cmp	r2, #37	; 0x25
 801c4ea:	d1f9      	bne.n	801c4e0 <_svfiprintf_r+0x50>
 801c4ec:	ebba 0b04 	subs.w	fp, sl, r4
 801c4f0:	d00b      	beq.n	801c50a <_svfiprintf_r+0x7a>
 801c4f2:	465b      	mov	r3, fp
 801c4f4:	4622      	mov	r2, r4
 801c4f6:	4629      	mov	r1, r5
 801c4f8:	4638      	mov	r0, r7
 801c4fa:	f7ff ff6d 	bl	801c3d8 <__ssputs_r>
 801c4fe:	3001      	adds	r0, #1
 801c500:	f000 80aa 	beq.w	801c658 <_svfiprintf_r+0x1c8>
 801c504:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c506:	445a      	add	r2, fp
 801c508:	9209      	str	r2, [sp, #36]	; 0x24
 801c50a:	f89a 3000 	ldrb.w	r3, [sl]
 801c50e:	2b00      	cmp	r3, #0
 801c510:	f000 80a2 	beq.w	801c658 <_svfiprintf_r+0x1c8>
 801c514:	2300      	movs	r3, #0
 801c516:	f04f 32ff 	mov.w	r2, #4294967295
 801c51a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c51e:	f10a 0a01 	add.w	sl, sl, #1
 801c522:	9304      	str	r3, [sp, #16]
 801c524:	9307      	str	r3, [sp, #28]
 801c526:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c52a:	931a      	str	r3, [sp, #104]	; 0x68
 801c52c:	4654      	mov	r4, sl
 801c52e:	2205      	movs	r2, #5
 801c530:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c534:	4851      	ldr	r0, [pc, #324]	; (801c67c <_svfiprintf_r+0x1ec>)
 801c536:	f7e3 fe6b 	bl	8000210 <memchr>
 801c53a:	9a04      	ldr	r2, [sp, #16]
 801c53c:	b9d8      	cbnz	r0, 801c576 <_svfiprintf_r+0xe6>
 801c53e:	06d0      	lsls	r0, r2, #27
 801c540:	bf44      	itt	mi
 801c542:	2320      	movmi	r3, #32
 801c544:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c548:	0711      	lsls	r1, r2, #28
 801c54a:	bf44      	itt	mi
 801c54c:	232b      	movmi	r3, #43	; 0x2b
 801c54e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c552:	f89a 3000 	ldrb.w	r3, [sl]
 801c556:	2b2a      	cmp	r3, #42	; 0x2a
 801c558:	d015      	beq.n	801c586 <_svfiprintf_r+0xf6>
 801c55a:	9a07      	ldr	r2, [sp, #28]
 801c55c:	4654      	mov	r4, sl
 801c55e:	2000      	movs	r0, #0
 801c560:	f04f 0c0a 	mov.w	ip, #10
 801c564:	4621      	mov	r1, r4
 801c566:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c56a:	3b30      	subs	r3, #48	; 0x30
 801c56c:	2b09      	cmp	r3, #9
 801c56e:	d94e      	bls.n	801c60e <_svfiprintf_r+0x17e>
 801c570:	b1b0      	cbz	r0, 801c5a0 <_svfiprintf_r+0x110>
 801c572:	9207      	str	r2, [sp, #28]
 801c574:	e014      	b.n	801c5a0 <_svfiprintf_r+0x110>
 801c576:	eba0 0308 	sub.w	r3, r0, r8
 801c57a:	fa09 f303 	lsl.w	r3, r9, r3
 801c57e:	4313      	orrs	r3, r2
 801c580:	9304      	str	r3, [sp, #16]
 801c582:	46a2      	mov	sl, r4
 801c584:	e7d2      	b.n	801c52c <_svfiprintf_r+0x9c>
 801c586:	9b03      	ldr	r3, [sp, #12]
 801c588:	1d19      	adds	r1, r3, #4
 801c58a:	681b      	ldr	r3, [r3, #0]
 801c58c:	9103      	str	r1, [sp, #12]
 801c58e:	2b00      	cmp	r3, #0
 801c590:	bfbb      	ittet	lt
 801c592:	425b      	neglt	r3, r3
 801c594:	f042 0202 	orrlt.w	r2, r2, #2
 801c598:	9307      	strge	r3, [sp, #28]
 801c59a:	9307      	strlt	r3, [sp, #28]
 801c59c:	bfb8      	it	lt
 801c59e:	9204      	strlt	r2, [sp, #16]
 801c5a0:	7823      	ldrb	r3, [r4, #0]
 801c5a2:	2b2e      	cmp	r3, #46	; 0x2e
 801c5a4:	d10c      	bne.n	801c5c0 <_svfiprintf_r+0x130>
 801c5a6:	7863      	ldrb	r3, [r4, #1]
 801c5a8:	2b2a      	cmp	r3, #42	; 0x2a
 801c5aa:	d135      	bne.n	801c618 <_svfiprintf_r+0x188>
 801c5ac:	9b03      	ldr	r3, [sp, #12]
 801c5ae:	1d1a      	adds	r2, r3, #4
 801c5b0:	681b      	ldr	r3, [r3, #0]
 801c5b2:	9203      	str	r2, [sp, #12]
 801c5b4:	2b00      	cmp	r3, #0
 801c5b6:	bfb8      	it	lt
 801c5b8:	f04f 33ff 	movlt.w	r3, #4294967295
 801c5bc:	3402      	adds	r4, #2
 801c5be:	9305      	str	r3, [sp, #20]
 801c5c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801c68c <_svfiprintf_r+0x1fc>
 801c5c4:	7821      	ldrb	r1, [r4, #0]
 801c5c6:	2203      	movs	r2, #3
 801c5c8:	4650      	mov	r0, sl
 801c5ca:	f7e3 fe21 	bl	8000210 <memchr>
 801c5ce:	b140      	cbz	r0, 801c5e2 <_svfiprintf_r+0x152>
 801c5d0:	2340      	movs	r3, #64	; 0x40
 801c5d2:	eba0 000a 	sub.w	r0, r0, sl
 801c5d6:	fa03 f000 	lsl.w	r0, r3, r0
 801c5da:	9b04      	ldr	r3, [sp, #16]
 801c5dc:	4303      	orrs	r3, r0
 801c5de:	3401      	adds	r4, #1
 801c5e0:	9304      	str	r3, [sp, #16]
 801c5e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c5e6:	4826      	ldr	r0, [pc, #152]	; (801c680 <_svfiprintf_r+0x1f0>)
 801c5e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c5ec:	2206      	movs	r2, #6
 801c5ee:	f7e3 fe0f 	bl	8000210 <memchr>
 801c5f2:	2800      	cmp	r0, #0
 801c5f4:	d038      	beq.n	801c668 <_svfiprintf_r+0x1d8>
 801c5f6:	4b23      	ldr	r3, [pc, #140]	; (801c684 <_svfiprintf_r+0x1f4>)
 801c5f8:	bb1b      	cbnz	r3, 801c642 <_svfiprintf_r+0x1b2>
 801c5fa:	9b03      	ldr	r3, [sp, #12]
 801c5fc:	3307      	adds	r3, #7
 801c5fe:	f023 0307 	bic.w	r3, r3, #7
 801c602:	3308      	adds	r3, #8
 801c604:	9303      	str	r3, [sp, #12]
 801c606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c608:	4433      	add	r3, r6
 801c60a:	9309      	str	r3, [sp, #36]	; 0x24
 801c60c:	e767      	b.n	801c4de <_svfiprintf_r+0x4e>
 801c60e:	fb0c 3202 	mla	r2, ip, r2, r3
 801c612:	460c      	mov	r4, r1
 801c614:	2001      	movs	r0, #1
 801c616:	e7a5      	b.n	801c564 <_svfiprintf_r+0xd4>
 801c618:	2300      	movs	r3, #0
 801c61a:	3401      	adds	r4, #1
 801c61c:	9305      	str	r3, [sp, #20]
 801c61e:	4619      	mov	r1, r3
 801c620:	f04f 0c0a 	mov.w	ip, #10
 801c624:	4620      	mov	r0, r4
 801c626:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c62a:	3a30      	subs	r2, #48	; 0x30
 801c62c:	2a09      	cmp	r2, #9
 801c62e:	d903      	bls.n	801c638 <_svfiprintf_r+0x1a8>
 801c630:	2b00      	cmp	r3, #0
 801c632:	d0c5      	beq.n	801c5c0 <_svfiprintf_r+0x130>
 801c634:	9105      	str	r1, [sp, #20]
 801c636:	e7c3      	b.n	801c5c0 <_svfiprintf_r+0x130>
 801c638:	fb0c 2101 	mla	r1, ip, r1, r2
 801c63c:	4604      	mov	r4, r0
 801c63e:	2301      	movs	r3, #1
 801c640:	e7f0      	b.n	801c624 <_svfiprintf_r+0x194>
 801c642:	ab03      	add	r3, sp, #12
 801c644:	9300      	str	r3, [sp, #0]
 801c646:	462a      	mov	r2, r5
 801c648:	4b0f      	ldr	r3, [pc, #60]	; (801c688 <_svfiprintf_r+0x1f8>)
 801c64a:	a904      	add	r1, sp, #16
 801c64c:	4638      	mov	r0, r7
 801c64e:	f7fc fa57 	bl	8018b00 <_printf_float>
 801c652:	1c42      	adds	r2, r0, #1
 801c654:	4606      	mov	r6, r0
 801c656:	d1d6      	bne.n	801c606 <_svfiprintf_r+0x176>
 801c658:	89ab      	ldrh	r3, [r5, #12]
 801c65a:	065b      	lsls	r3, r3, #25
 801c65c:	f53f af2c 	bmi.w	801c4b8 <_svfiprintf_r+0x28>
 801c660:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c662:	b01d      	add	sp, #116	; 0x74
 801c664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c668:	ab03      	add	r3, sp, #12
 801c66a:	9300      	str	r3, [sp, #0]
 801c66c:	462a      	mov	r2, r5
 801c66e:	4b06      	ldr	r3, [pc, #24]	; (801c688 <_svfiprintf_r+0x1f8>)
 801c670:	a904      	add	r1, sp, #16
 801c672:	4638      	mov	r0, r7
 801c674:	f7fc fce8 	bl	8019048 <_printf_i>
 801c678:	e7eb      	b.n	801c652 <_svfiprintf_r+0x1c2>
 801c67a:	bf00      	nop
 801c67c:	0802478c 	.word	0x0802478c
 801c680:	08024796 	.word	0x08024796
 801c684:	08018b01 	.word	0x08018b01
 801c688:	0801c3d9 	.word	0x0801c3d9
 801c68c:	08024792 	.word	0x08024792

0801c690 <nan>:
 801c690:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801c698 <nan+0x8>
 801c694:	4770      	bx	lr
 801c696:	bf00      	nop
 801c698:	00000000 	.word	0x00000000
 801c69c:	7ff80000 	.word	0x7ff80000

0801c6a0 <_sbrk_r>:
 801c6a0:	b538      	push	{r3, r4, r5, lr}
 801c6a2:	4d06      	ldr	r5, [pc, #24]	; (801c6bc <_sbrk_r+0x1c>)
 801c6a4:	2300      	movs	r3, #0
 801c6a6:	4604      	mov	r4, r0
 801c6a8:	4608      	mov	r0, r1
 801c6aa:	602b      	str	r3, [r5, #0]
 801c6ac:	f7f0 fa8e 	bl	800cbcc <_sbrk>
 801c6b0:	1c43      	adds	r3, r0, #1
 801c6b2:	d102      	bne.n	801c6ba <_sbrk_r+0x1a>
 801c6b4:	682b      	ldr	r3, [r5, #0]
 801c6b6:	b103      	cbz	r3, 801c6ba <_sbrk_r+0x1a>
 801c6b8:	6023      	str	r3, [r4, #0]
 801c6ba:	bd38      	pop	{r3, r4, r5, pc}
 801c6bc:	200372a0 	.word	0x200372a0

0801c6c0 <strncmp>:
 801c6c0:	b510      	push	{r4, lr}
 801c6c2:	b17a      	cbz	r2, 801c6e4 <strncmp+0x24>
 801c6c4:	4603      	mov	r3, r0
 801c6c6:	3901      	subs	r1, #1
 801c6c8:	1884      	adds	r4, r0, r2
 801c6ca:	f813 0b01 	ldrb.w	r0, [r3], #1
 801c6ce:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801c6d2:	4290      	cmp	r0, r2
 801c6d4:	d101      	bne.n	801c6da <strncmp+0x1a>
 801c6d6:	42a3      	cmp	r3, r4
 801c6d8:	d101      	bne.n	801c6de <strncmp+0x1e>
 801c6da:	1a80      	subs	r0, r0, r2
 801c6dc:	bd10      	pop	{r4, pc}
 801c6de:	2800      	cmp	r0, #0
 801c6e0:	d1f3      	bne.n	801c6ca <strncmp+0xa>
 801c6e2:	e7fa      	b.n	801c6da <strncmp+0x1a>
 801c6e4:	4610      	mov	r0, r2
 801c6e6:	e7f9      	b.n	801c6dc <strncmp+0x1c>

0801c6e8 <__ascii_wctomb>:
 801c6e8:	b149      	cbz	r1, 801c6fe <__ascii_wctomb+0x16>
 801c6ea:	2aff      	cmp	r2, #255	; 0xff
 801c6ec:	bf85      	ittet	hi
 801c6ee:	238a      	movhi	r3, #138	; 0x8a
 801c6f0:	6003      	strhi	r3, [r0, #0]
 801c6f2:	700a      	strbls	r2, [r1, #0]
 801c6f4:	f04f 30ff 	movhi.w	r0, #4294967295
 801c6f8:	bf98      	it	ls
 801c6fa:	2001      	movls	r0, #1
 801c6fc:	4770      	bx	lr
 801c6fe:	4608      	mov	r0, r1
 801c700:	4770      	bx	lr
	...

0801c704 <__assert_func>:
 801c704:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c706:	4614      	mov	r4, r2
 801c708:	461a      	mov	r2, r3
 801c70a:	4b09      	ldr	r3, [pc, #36]	; (801c730 <__assert_func+0x2c>)
 801c70c:	681b      	ldr	r3, [r3, #0]
 801c70e:	4605      	mov	r5, r0
 801c710:	68d8      	ldr	r0, [r3, #12]
 801c712:	b14c      	cbz	r4, 801c728 <__assert_func+0x24>
 801c714:	4b07      	ldr	r3, [pc, #28]	; (801c734 <__assert_func+0x30>)
 801c716:	9100      	str	r1, [sp, #0]
 801c718:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c71c:	4906      	ldr	r1, [pc, #24]	; (801c738 <__assert_func+0x34>)
 801c71e:	462b      	mov	r3, r5
 801c720:	f000 f80e 	bl	801c740 <fiprintf>
 801c724:	f000 fa8c 	bl	801cc40 <abort>
 801c728:	4b04      	ldr	r3, [pc, #16]	; (801c73c <__assert_func+0x38>)
 801c72a:	461c      	mov	r4, r3
 801c72c:	e7f3      	b.n	801c716 <__assert_func+0x12>
 801c72e:	bf00      	nop
 801c730:	200000a4 	.word	0x200000a4
 801c734:	0802479d 	.word	0x0802479d
 801c738:	080247aa 	.word	0x080247aa
 801c73c:	080247d8 	.word	0x080247d8

0801c740 <fiprintf>:
 801c740:	b40e      	push	{r1, r2, r3}
 801c742:	b503      	push	{r0, r1, lr}
 801c744:	4601      	mov	r1, r0
 801c746:	ab03      	add	r3, sp, #12
 801c748:	4805      	ldr	r0, [pc, #20]	; (801c760 <fiprintf+0x20>)
 801c74a:	f853 2b04 	ldr.w	r2, [r3], #4
 801c74e:	6800      	ldr	r0, [r0, #0]
 801c750:	9301      	str	r3, [sp, #4]
 801c752:	f000 f885 	bl	801c860 <_vfiprintf_r>
 801c756:	b002      	add	sp, #8
 801c758:	f85d eb04 	ldr.w	lr, [sp], #4
 801c75c:	b003      	add	sp, #12
 801c75e:	4770      	bx	lr
 801c760:	200000a4 	.word	0x200000a4

0801c764 <memmove>:
 801c764:	4288      	cmp	r0, r1
 801c766:	b510      	push	{r4, lr}
 801c768:	eb01 0402 	add.w	r4, r1, r2
 801c76c:	d902      	bls.n	801c774 <memmove+0x10>
 801c76e:	4284      	cmp	r4, r0
 801c770:	4623      	mov	r3, r4
 801c772:	d807      	bhi.n	801c784 <memmove+0x20>
 801c774:	1e43      	subs	r3, r0, #1
 801c776:	42a1      	cmp	r1, r4
 801c778:	d008      	beq.n	801c78c <memmove+0x28>
 801c77a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c77e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c782:	e7f8      	b.n	801c776 <memmove+0x12>
 801c784:	4402      	add	r2, r0
 801c786:	4601      	mov	r1, r0
 801c788:	428a      	cmp	r2, r1
 801c78a:	d100      	bne.n	801c78e <memmove+0x2a>
 801c78c:	bd10      	pop	{r4, pc}
 801c78e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c792:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c796:	e7f7      	b.n	801c788 <memmove+0x24>

0801c798 <__malloc_lock>:
 801c798:	4801      	ldr	r0, [pc, #4]	; (801c7a0 <__malloc_lock+0x8>)
 801c79a:	f000 bc11 	b.w	801cfc0 <__retarget_lock_acquire_recursive>
 801c79e:	bf00      	nop
 801c7a0:	200372a4 	.word	0x200372a4

0801c7a4 <__malloc_unlock>:
 801c7a4:	4801      	ldr	r0, [pc, #4]	; (801c7ac <__malloc_unlock+0x8>)
 801c7a6:	f000 bc0c 	b.w	801cfc2 <__retarget_lock_release_recursive>
 801c7aa:	bf00      	nop
 801c7ac:	200372a4 	.word	0x200372a4

0801c7b0 <_realloc_r>:
 801c7b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c7b4:	4680      	mov	r8, r0
 801c7b6:	4614      	mov	r4, r2
 801c7b8:	460e      	mov	r6, r1
 801c7ba:	b921      	cbnz	r1, 801c7c6 <_realloc_r+0x16>
 801c7bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c7c0:	4611      	mov	r1, r2
 801c7c2:	f7ff bd95 	b.w	801c2f0 <_malloc_r>
 801c7c6:	b92a      	cbnz	r2, 801c7d4 <_realloc_r+0x24>
 801c7c8:	f7ff fd26 	bl	801c218 <_free_r>
 801c7cc:	4625      	mov	r5, r4
 801c7ce:	4628      	mov	r0, r5
 801c7d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c7d4:	f000 fc5c 	bl	801d090 <_malloc_usable_size_r>
 801c7d8:	4284      	cmp	r4, r0
 801c7da:	4607      	mov	r7, r0
 801c7dc:	d802      	bhi.n	801c7e4 <_realloc_r+0x34>
 801c7de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801c7e2:	d812      	bhi.n	801c80a <_realloc_r+0x5a>
 801c7e4:	4621      	mov	r1, r4
 801c7e6:	4640      	mov	r0, r8
 801c7e8:	f7ff fd82 	bl	801c2f0 <_malloc_r>
 801c7ec:	4605      	mov	r5, r0
 801c7ee:	2800      	cmp	r0, #0
 801c7f0:	d0ed      	beq.n	801c7ce <_realloc_r+0x1e>
 801c7f2:	42bc      	cmp	r4, r7
 801c7f4:	4622      	mov	r2, r4
 801c7f6:	4631      	mov	r1, r6
 801c7f8:	bf28      	it	cs
 801c7fa:	463a      	movcs	r2, r7
 801c7fc:	f7fc f8ca 	bl	8018994 <memcpy>
 801c800:	4631      	mov	r1, r6
 801c802:	4640      	mov	r0, r8
 801c804:	f7ff fd08 	bl	801c218 <_free_r>
 801c808:	e7e1      	b.n	801c7ce <_realloc_r+0x1e>
 801c80a:	4635      	mov	r5, r6
 801c80c:	e7df      	b.n	801c7ce <_realloc_r+0x1e>

0801c80e <__sfputc_r>:
 801c80e:	6893      	ldr	r3, [r2, #8]
 801c810:	3b01      	subs	r3, #1
 801c812:	2b00      	cmp	r3, #0
 801c814:	b410      	push	{r4}
 801c816:	6093      	str	r3, [r2, #8]
 801c818:	da08      	bge.n	801c82c <__sfputc_r+0x1e>
 801c81a:	6994      	ldr	r4, [r2, #24]
 801c81c:	42a3      	cmp	r3, r4
 801c81e:	db01      	blt.n	801c824 <__sfputc_r+0x16>
 801c820:	290a      	cmp	r1, #10
 801c822:	d103      	bne.n	801c82c <__sfputc_r+0x1e>
 801c824:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c828:	f000 b94a 	b.w	801cac0 <__swbuf_r>
 801c82c:	6813      	ldr	r3, [r2, #0]
 801c82e:	1c58      	adds	r0, r3, #1
 801c830:	6010      	str	r0, [r2, #0]
 801c832:	7019      	strb	r1, [r3, #0]
 801c834:	4608      	mov	r0, r1
 801c836:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c83a:	4770      	bx	lr

0801c83c <__sfputs_r>:
 801c83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c83e:	4606      	mov	r6, r0
 801c840:	460f      	mov	r7, r1
 801c842:	4614      	mov	r4, r2
 801c844:	18d5      	adds	r5, r2, r3
 801c846:	42ac      	cmp	r4, r5
 801c848:	d101      	bne.n	801c84e <__sfputs_r+0x12>
 801c84a:	2000      	movs	r0, #0
 801c84c:	e007      	b.n	801c85e <__sfputs_r+0x22>
 801c84e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c852:	463a      	mov	r2, r7
 801c854:	4630      	mov	r0, r6
 801c856:	f7ff ffda 	bl	801c80e <__sfputc_r>
 801c85a:	1c43      	adds	r3, r0, #1
 801c85c:	d1f3      	bne.n	801c846 <__sfputs_r+0xa>
 801c85e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801c860 <_vfiprintf_r>:
 801c860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c864:	460d      	mov	r5, r1
 801c866:	b09d      	sub	sp, #116	; 0x74
 801c868:	4614      	mov	r4, r2
 801c86a:	4698      	mov	r8, r3
 801c86c:	4606      	mov	r6, r0
 801c86e:	b118      	cbz	r0, 801c878 <_vfiprintf_r+0x18>
 801c870:	6983      	ldr	r3, [r0, #24]
 801c872:	b90b      	cbnz	r3, 801c878 <_vfiprintf_r+0x18>
 801c874:	f000 fb06 	bl	801ce84 <__sinit>
 801c878:	4b89      	ldr	r3, [pc, #548]	; (801caa0 <_vfiprintf_r+0x240>)
 801c87a:	429d      	cmp	r5, r3
 801c87c:	d11b      	bne.n	801c8b6 <_vfiprintf_r+0x56>
 801c87e:	6875      	ldr	r5, [r6, #4]
 801c880:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c882:	07d9      	lsls	r1, r3, #31
 801c884:	d405      	bmi.n	801c892 <_vfiprintf_r+0x32>
 801c886:	89ab      	ldrh	r3, [r5, #12]
 801c888:	059a      	lsls	r2, r3, #22
 801c88a:	d402      	bmi.n	801c892 <_vfiprintf_r+0x32>
 801c88c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c88e:	f000 fb97 	bl	801cfc0 <__retarget_lock_acquire_recursive>
 801c892:	89ab      	ldrh	r3, [r5, #12]
 801c894:	071b      	lsls	r3, r3, #28
 801c896:	d501      	bpl.n	801c89c <_vfiprintf_r+0x3c>
 801c898:	692b      	ldr	r3, [r5, #16]
 801c89a:	b9eb      	cbnz	r3, 801c8d8 <_vfiprintf_r+0x78>
 801c89c:	4629      	mov	r1, r5
 801c89e:	4630      	mov	r0, r6
 801c8a0:	f000 f960 	bl	801cb64 <__swsetup_r>
 801c8a4:	b1c0      	cbz	r0, 801c8d8 <_vfiprintf_r+0x78>
 801c8a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c8a8:	07dc      	lsls	r4, r3, #31
 801c8aa:	d50e      	bpl.n	801c8ca <_vfiprintf_r+0x6a>
 801c8ac:	f04f 30ff 	mov.w	r0, #4294967295
 801c8b0:	b01d      	add	sp, #116	; 0x74
 801c8b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c8b6:	4b7b      	ldr	r3, [pc, #492]	; (801caa4 <_vfiprintf_r+0x244>)
 801c8b8:	429d      	cmp	r5, r3
 801c8ba:	d101      	bne.n	801c8c0 <_vfiprintf_r+0x60>
 801c8bc:	68b5      	ldr	r5, [r6, #8]
 801c8be:	e7df      	b.n	801c880 <_vfiprintf_r+0x20>
 801c8c0:	4b79      	ldr	r3, [pc, #484]	; (801caa8 <_vfiprintf_r+0x248>)
 801c8c2:	429d      	cmp	r5, r3
 801c8c4:	bf08      	it	eq
 801c8c6:	68f5      	ldreq	r5, [r6, #12]
 801c8c8:	e7da      	b.n	801c880 <_vfiprintf_r+0x20>
 801c8ca:	89ab      	ldrh	r3, [r5, #12]
 801c8cc:	0598      	lsls	r0, r3, #22
 801c8ce:	d4ed      	bmi.n	801c8ac <_vfiprintf_r+0x4c>
 801c8d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c8d2:	f000 fb76 	bl	801cfc2 <__retarget_lock_release_recursive>
 801c8d6:	e7e9      	b.n	801c8ac <_vfiprintf_r+0x4c>
 801c8d8:	2300      	movs	r3, #0
 801c8da:	9309      	str	r3, [sp, #36]	; 0x24
 801c8dc:	2320      	movs	r3, #32
 801c8de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c8e2:	f8cd 800c 	str.w	r8, [sp, #12]
 801c8e6:	2330      	movs	r3, #48	; 0x30
 801c8e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801caac <_vfiprintf_r+0x24c>
 801c8ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c8f0:	f04f 0901 	mov.w	r9, #1
 801c8f4:	4623      	mov	r3, r4
 801c8f6:	469a      	mov	sl, r3
 801c8f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c8fc:	b10a      	cbz	r2, 801c902 <_vfiprintf_r+0xa2>
 801c8fe:	2a25      	cmp	r2, #37	; 0x25
 801c900:	d1f9      	bne.n	801c8f6 <_vfiprintf_r+0x96>
 801c902:	ebba 0b04 	subs.w	fp, sl, r4
 801c906:	d00b      	beq.n	801c920 <_vfiprintf_r+0xc0>
 801c908:	465b      	mov	r3, fp
 801c90a:	4622      	mov	r2, r4
 801c90c:	4629      	mov	r1, r5
 801c90e:	4630      	mov	r0, r6
 801c910:	f7ff ff94 	bl	801c83c <__sfputs_r>
 801c914:	3001      	adds	r0, #1
 801c916:	f000 80aa 	beq.w	801ca6e <_vfiprintf_r+0x20e>
 801c91a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c91c:	445a      	add	r2, fp
 801c91e:	9209      	str	r2, [sp, #36]	; 0x24
 801c920:	f89a 3000 	ldrb.w	r3, [sl]
 801c924:	2b00      	cmp	r3, #0
 801c926:	f000 80a2 	beq.w	801ca6e <_vfiprintf_r+0x20e>
 801c92a:	2300      	movs	r3, #0
 801c92c:	f04f 32ff 	mov.w	r2, #4294967295
 801c930:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c934:	f10a 0a01 	add.w	sl, sl, #1
 801c938:	9304      	str	r3, [sp, #16]
 801c93a:	9307      	str	r3, [sp, #28]
 801c93c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c940:	931a      	str	r3, [sp, #104]	; 0x68
 801c942:	4654      	mov	r4, sl
 801c944:	2205      	movs	r2, #5
 801c946:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c94a:	4858      	ldr	r0, [pc, #352]	; (801caac <_vfiprintf_r+0x24c>)
 801c94c:	f7e3 fc60 	bl	8000210 <memchr>
 801c950:	9a04      	ldr	r2, [sp, #16]
 801c952:	b9d8      	cbnz	r0, 801c98c <_vfiprintf_r+0x12c>
 801c954:	06d1      	lsls	r1, r2, #27
 801c956:	bf44      	itt	mi
 801c958:	2320      	movmi	r3, #32
 801c95a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c95e:	0713      	lsls	r3, r2, #28
 801c960:	bf44      	itt	mi
 801c962:	232b      	movmi	r3, #43	; 0x2b
 801c964:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c968:	f89a 3000 	ldrb.w	r3, [sl]
 801c96c:	2b2a      	cmp	r3, #42	; 0x2a
 801c96e:	d015      	beq.n	801c99c <_vfiprintf_r+0x13c>
 801c970:	9a07      	ldr	r2, [sp, #28]
 801c972:	4654      	mov	r4, sl
 801c974:	2000      	movs	r0, #0
 801c976:	f04f 0c0a 	mov.w	ip, #10
 801c97a:	4621      	mov	r1, r4
 801c97c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c980:	3b30      	subs	r3, #48	; 0x30
 801c982:	2b09      	cmp	r3, #9
 801c984:	d94e      	bls.n	801ca24 <_vfiprintf_r+0x1c4>
 801c986:	b1b0      	cbz	r0, 801c9b6 <_vfiprintf_r+0x156>
 801c988:	9207      	str	r2, [sp, #28]
 801c98a:	e014      	b.n	801c9b6 <_vfiprintf_r+0x156>
 801c98c:	eba0 0308 	sub.w	r3, r0, r8
 801c990:	fa09 f303 	lsl.w	r3, r9, r3
 801c994:	4313      	orrs	r3, r2
 801c996:	9304      	str	r3, [sp, #16]
 801c998:	46a2      	mov	sl, r4
 801c99a:	e7d2      	b.n	801c942 <_vfiprintf_r+0xe2>
 801c99c:	9b03      	ldr	r3, [sp, #12]
 801c99e:	1d19      	adds	r1, r3, #4
 801c9a0:	681b      	ldr	r3, [r3, #0]
 801c9a2:	9103      	str	r1, [sp, #12]
 801c9a4:	2b00      	cmp	r3, #0
 801c9a6:	bfbb      	ittet	lt
 801c9a8:	425b      	neglt	r3, r3
 801c9aa:	f042 0202 	orrlt.w	r2, r2, #2
 801c9ae:	9307      	strge	r3, [sp, #28]
 801c9b0:	9307      	strlt	r3, [sp, #28]
 801c9b2:	bfb8      	it	lt
 801c9b4:	9204      	strlt	r2, [sp, #16]
 801c9b6:	7823      	ldrb	r3, [r4, #0]
 801c9b8:	2b2e      	cmp	r3, #46	; 0x2e
 801c9ba:	d10c      	bne.n	801c9d6 <_vfiprintf_r+0x176>
 801c9bc:	7863      	ldrb	r3, [r4, #1]
 801c9be:	2b2a      	cmp	r3, #42	; 0x2a
 801c9c0:	d135      	bne.n	801ca2e <_vfiprintf_r+0x1ce>
 801c9c2:	9b03      	ldr	r3, [sp, #12]
 801c9c4:	1d1a      	adds	r2, r3, #4
 801c9c6:	681b      	ldr	r3, [r3, #0]
 801c9c8:	9203      	str	r2, [sp, #12]
 801c9ca:	2b00      	cmp	r3, #0
 801c9cc:	bfb8      	it	lt
 801c9ce:	f04f 33ff 	movlt.w	r3, #4294967295
 801c9d2:	3402      	adds	r4, #2
 801c9d4:	9305      	str	r3, [sp, #20]
 801c9d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801cabc <_vfiprintf_r+0x25c>
 801c9da:	7821      	ldrb	r1, [r4, #0]
 801c9dc:	2203      	movs	r2, #3
 801c9de:	4650      	mov	r0, sl
 801c9e0:	f7e3 fc16 	bl	8000210 <memchr>
 801c9e4:	b140      	cbz	r0, 801c9f8 <_vfiprintf_r+0x198>
 801c9e6:	2340      	movs	r3, #64	; 0x40
 801c9e8:	eba0 000a 	sub.w	r0, r0, sl
 801c9ec:	fa03 f000 	lsl.w	r0, r3, r0
 801c9f0:	9b04      	ldr	r3, [sp, #16]
 801c9f2:	4303      	orrs	r3, r0
 801c9f4:	3401      	adds	r4, #1
 801c9f6:	9304      	str	r3, [sp, #16]
 801c9f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c9fc:	482c      	ldr	r0, [pc, #176]	; (801cab0 <_vfiprintf_r+0x250>)
 801c9fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ca02:	2206      	movs	r2, #6
 801ca04:	f7e3 fc04 	bl	8000210 <memchr>
 801ca08:	2800      	cmp	r0, #0
 801ca0a:	d03f      	beq.n	801ca8c <_vfiprintf_r+0x22c>
 801ca0c:	4b29      	ldr	r3, [pc, #164]	; (801cab4 <_vfiprintf_r+0x254>)
 801ca0e:	bb1b      	cbnz	r3, 801ca58 <_vfiprintf_r+0x1f8>
 801ca10:	9b03      	ldr	r3, [sp, #12]
 801ca12:	3307      	adds	r3, #7
 801ca14:	f023 0307 	bic.w	r3, r3, #7
 801ca18:	3308      	adds	r3, #8
 801ca1a:	9303      	str	r3, [sp, #12]
 801ca1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ca1e:	443b      	add	r3, r7
 801ca20:	9309      	str	r3, [sp, #36]	; 0x24
 801ca22:	e767      	b.n	801c8f4 <_vfiprintf_r+0x94>
 801ca24:	fb0c 3202 	mla	r2, ip, r2, r3
 801ca28:	460c      	mov	r4, r1
 801ca2a:	2001      	movs	r0, #1
 801ca2c:	e7a5      	b.n	801c97a <_vfiprintf_r+0x11a>
 801ca2e:	2300      	movs	r3, #0
 801ca30:	3401      	adds	r4, #1
 801ca32:	9305      	str	r3, [sp, #20]
 801ca34:	4619      	mov	r1, r3
 801ca36:	f04f 0c0a 	mov.w	ip, #10
 801ca3a:	4620      	mov	r0, r4
 801ca3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ca40:	3a30      	subs	r2, #48	; 0x30
 801ca42:	2a09      	cmp	r2, #9
 801ca44:	d903      	bls.n	801ca4e <_vfiprintf_r+0x1ee>
 801ca46:	2b00      	cmp	r3, #0
 801ca48:	d0c5      	beq.n	801c9d6 <_vfiprintf_r+0x176>
 801ca4a:	9105      	str	r1, [sp, #20]
 801ca4c:	e7c3      	b.n	801c9d6 <_vfiprintf_r+0x176>
 801ca4e:	fb0c 2101 	mla	r1, ip, r1, r2
 801ca52:	4604      	mov	r4, r0
 801ca54:	2301      	movs	r3, #1
 801ca56:	e7f0      	b.n	801ca3a <_vfiprintf_r+0x1da>
 801ca58:	ab03      	add	r3, sp, #12
 801ca5a:	9300      	str	r3, [sp, #0]
 801ca5c:	462a      	mov	r2, r5
 801ca5e:	4b16      	ldr	r3, [pc, #88]	; (801cab8 <_vfiprintf_r+0x258>)
 801ca60:	a904      	add	r1, sp, #16
 801ca62:	4630      	mov	r0, r6
 801ca64:	f7fc f84c 	bl	8018b00 <_printf_float>
 801ca68:	4607      	mov	r7, r0
 801ca6a:	1c78      	adds	r0, r7, #1
 801ca6c:	d1d6      	bne.n	801ca1c <_vfiprintf_r+0x1bc>
 801ca6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ca70:	07d9      	lsls	r1, r3, #31
 801ca72:	d405      	bmi.n	801ca80 <_vfiprintf_r+0x220>
 801ca74:	89ab      	ldrh	r3, [r5, #12]
 801ca76:	059a      	lsls	r2, r3, #22
 801ca78:	d402      	bmi.n	801ca80 <_vfiprintf_r+0x220>
 801ca7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ca7c:	f000 faa1 	bl	801cfc2 <__retarget_lock_release_recursive>
 801ca80:	89ab      	ldrh	r3, [r5, #12]
 801ca82:	065b      	lsls	r3, r3, #25
 801ca84:	f53f af12 	bmi.w	801c8ac <_vfiprintf_r+0x4c>
 801ca88:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ca8a:	e711      	b.n	801c8b0 <_vfiprintf_r+0x50>
 801ca8c:	ab03      	add	r3, sp, #12
 801ca8e:	9300      	str	r3, [sp, #0]
 801ca90:	462a      	mov	r2, r5
 801ca92:	4b09      	ldr	r3, [pc, #36]	; (801cab8 <_vfiprintf_r+0x258>)
 801ca94:	a904      	add	r1, sp, #16
 801ca96:	4630      	mov	r0, r6
 801ca98:	f7fc fad6 	bl	8019048 <_printf_i>
 801ca9c:	e7e4      	b.n	801ca68 <_vfiprintf_r+0x208>
 801ca9e:	bf00      	nop
 801caa0:	080247fc 	.word	0x080247fc
 801caa4:	0802481c 	.word	0x0802481c
 801caa8:	080247dc 	.word	0x080247dc
 801caac:	0802478c 	.word	0x0802478c
 801cab0:	08024796 	.word	0x08024796
 801cab4:	08018b01 	.word	0x08018b01
 801cab8:	0801c83d 	.word	0x0801c83d
 801cabc:	08024792 	.word	0x08024792

0801cac0 <__swbuf_r>:
 801cac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cac2:	460e      	mov	r6, r1
 801cac4:	4614      	mov	r4, r2
 801cac6:	4605      	mov	r5, r0
 801cac8:	b118      	cbz	r0, 801cad2 <__swbuf_r+0x12>
 801caca:	6983      	ldr	r3, [r0, #24]
 801cacc:	b90b      	cbnz	r3, 801cad2 <__swbuf_r+0x12>
 801cace:	f000 f9d9 	bl	801ce84 <__sinit>
 801cad2:	4b21      	ldr	r3, [pc, #132]	; (801cb58 <__swbuf_r+0x98>)
 801cad4:	429c      	cmp	r4, r3
 801cad6:	d12b      	bne.n	801cb30 <__swbuf_r+0x70>
 801cad8:	686c      	ldr	r4, [r5, #4]
 801cada:	69a3      	ldr	r3, [r4, #24]
 801cadc:	60a3      	str	r3, [r4, #8]
 801cade:	89a3      	ldrh	r3, [r4, #12]
 801cae0:	071a      	lsls	r2, r3, #28
 801cae2:	d52f      	bpl.n	801cb44 <__swbuf_r+0x84>
 801cae4:	6923      	ldr	r3, [r4, #16]
 801cae6:	b36b      	cbz	r3, 801cb44 <__swbuf_r+0x84>
 801cae8:	6923      	ldr	r3, [r4, #16]
 801caea:	6820      	ldr	r0, [r4, #0]
 801caec:	1ac0      	subs	r0, r0, r3
 801caee:	6963      	ldr	r3, [r4, #20]
 801caf0:	b2f6      	uxtb	r6, r6
 801caf2:	4283      	cmp	r3, r0
 801caf4:	4637      	mov	r7, r6
 801caf6:	dc04      	bgt.n	801cb02 <__swbuf_r+0x42>
 801caf8:	4621      	mov	r1, r4
 801cafa:	4628      	mov	r0, r5
 801cafc:	f000 f92e 	bl	801cd5c <_fflush_r>
 801cb00:	bb30      	cbnz	r0, 801cb50 <__swbuf_r+0x90>
 801cb02:	68a3      	ldr	r3, [r4, #8]
 801cb04:	3b01      	subs	r3, #1
 801cb06:	60a3      	str	r3, [r4, #8]
 801cb08:	6823      	ldr	r3, [r4, #0]
 801cb0a:	1c5a      	adds	r2, r3, #1
 801cb0c:	6022      	str	r2, [r4, #0]
 801cb0e:	701e      	strb	r6, [r3, #0]
 801cb10:	6963      	ldr	r3, [r4, #20]
 801cb12:	3001      	adds	r0, #1
 801cb14:	4283      	cmp	r3, r0
 801cb16:	d004      	beq.n	801cb22 <__swbuf_r+0x62>
 801cb18:	89a3      	ldrh	r3, [r4, #12]
 801cb1a:	07db      	lsls	r3, r3, #31
 801cb1c:	d506      	bpl.n	801cb2c <__swbuf_r+0x6c>
 801cb1e:	2e0a      	cmp	r6, #10
 801cb20:	d104      	bne.n	801cb2c <__swbuf_r+0x6c>
 801cb22:	4621      	mov	r1, r4
 801cb24:	4628      	mov	r0, r5
 801cb26:	f000 f919 	bl	801cd5c <_fflush_r>
 801cb2a:	b988      	cbnz	r0, 801cb50 <__swbuf_r+0x90>
 801cb2c:	4638      	mov	r0, r7
 801cb2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cb30:	4b0a      	ldr	r3, [pc, #40]	; (801cb5c <__swbuf_r+0x9c>)
 801cb32:	429c      	cmp	r4, r3
 801cb34:	d101      	bne.n	801cb3a <__swbuf_r+0x7a>
 801cb36:	68ac      	ldr	r4, [r5, #8]
 801cb38:	e7cf      	b.n	801cada <__swbuf_r+0x1a>
 801cb3a:	4b09      	ldr	r3, [pc, #36]	; (801cb60 <__swbuf_r+0xa0>)
 801cb3c:	429c      	cmp	r4, r3
 801cb3e:	bf08      	it	eq
 801cb40:	68ec      	ldreq	r4, [r5, #12]
 801cb42:	e7ca      	b.n	801cada <__swbuf_r+0x1a>
 801cb44:	4621      	mov	r1, r4
 801cb46:	4628      	mov	r0, r5
 801cb48:	f000 f80c 	bl	801cb64 <__swsetup_r>
 801cb4c:	2800      	cmp	r0, #0
 801cb4e:	d0cb      	beq.n	801cae8 <__swbuf_r+0x28>
 801cb50:	f04f 37ff 	mov.w	r7, #4294967295
 801cb54:	e7ea      	b.n	801cb2c <__swbuf_r+0x6c>
 801cb56:	bf00      	nop
 801cb58:	080247fc 	.word	0x080247fc
 801cb5c:	0802481c 	.word	0x0802481c
 801cb60:	080247dc 	.word	0x080247dc

0801cb64 <__swsetup_r>:
 801cb64:	4b32      	ldr	r3, [pc, #200]	; (801cc30 <__swsetup_r+0xcc>)
 801cb66:	b570      	push	{r4, r5, r6, lr}
 801cb68:	681d      	ldr	r5, [r3, #0]
 801cb6a:	4606      	mov	r6, r0
 801cb6c:	460c      	mov	r4, r1
 801cb6e:	b125      	cbz	r5, 801cb7a <__swsetup_r+0x16>
 801cb70:	69ab      	ldr	r3, [r5, #24]
 801cb72:	b913      	cbnz	r3, 801cb7a <__swsetup_r+0x16>
 801cb74:	4628      	mov	r0, r5
 801cb76:	f000 f985 	bl	801ce84 <__sinit>
 801cb7a:	4b2e      	ldr	r3, [pc, #184]	; (801cc34 <__swsetup_r+0xd0>)
 801cb7c:	429c      	cmp	r4, r3
 801cb7e:	d10f      	bne.n	801cba0 <__swsetup_r+0x3c>
 801cb80:	686c      	ldr	r4, [r5, #4]
 801cb82:	89a3      	ldrh	r3, [r4, #12]
 801cb84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801cb88:	0719      	lsls	r1, r3, #28
 801cb8a:	d42c      	bmi.n	801cbe6 <__swsetup_r+0x82>
 801cb8c:	06dd      	lsls	r5, r3, #27
 801cb8e:	d411      	bmi.n	801cbb4 <__swsetup_r+0x50>
 801cb90:	2309      	movs	r3, #9
 801cb92:	6033      	str	r3, [r6, #0]
 801cb94:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801cb98:	81a3      	strh	r3, [r4, #12]
 801cb9a:	f04f 30ff 	mov.w	r0, #4294967295
 801cb9e:	e03e      	b.n	801cc1e <__swsetup_r+0xba>
 801cba0:	4b25      	ldr	r3, [pc, #148]	; (801cc38 <__swsetup_r+0xd4>)
 801cba2:	429c      	cmp	r4, r3
 801cba4:	d101      	bne.n	801cbaa <__swsetup_r+0x46>
 801cba6:	68ac      	ldr	r4, [r5, #8]
 801cba8:	e7eb      	b.n	801cb82 <__swsetup_r+0x1e>
 801cbaa:	4b24      	ldr	r3, [pc, #144]	; (801cc3c <__swsetup_r+0xd8>)
 801cbac:	429c      	cmp	r4, r3
 801cbae:	bf08      	it	eq
 801cbb0:	68ec      	ldreq	r4, [r5, #12]
 801cbb2:	e7e6      	b.n	801cb82 <__swsetup_r+0x1e>
 801cbb4:	0758      	lsls	r0, r3, #29
 801cbb6:	d512      	bpl.n	801cbde <__swsetup_r+0x7a>
 801cbb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801cbba:	b141      	cbz	r1, 801cbce <__swsetup_r+0x6a>
 801cbbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801cbc0:	4299      	cmp	r1, r3
 801cbc2:	d002      	beq.n	801cbca <__swsetup_r+0x66>
 801cbc4:	4630      	mov	r0, r6
 801cbc6:	f7ff fb27 	bl	801c218 <_free_r>
 801cbca:	2300      	movs	r3, #0
 801cbcc:	6363      	str	r3, [r4, #52]	; 0x34
 801cbce:	89a3      	ldrh	r3, [r4, #12]
 801cbd0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801cbd4:	81a3      	strh	r3, [r4, #12]
 801cbd6:	2300      	movs	r3, #0
 801cbd8:	6063      	str	r3, [r4, #4]
 801cbda:	6923      	ldr	r3, [r4, #16]
 801cbdc:	6023      	str	r3, [r4, #0]
 801cbde:	89a3      	ldrh	r3, [r4, #12]
 801cbe0:	f043 0308 	orr.w	r3, r3, #8
 801cbe4:	81a3      	strh	r3, [r4, #12]
 801cbe6:	6923      	ldr	r3, [r4, #16]
 801cbe8:	b94b      	cbnz	r3, 801cbfe <__swsetup_r+0x9a>
 801cbea:	89a3      	ldrh	r3, [r4, #12]
 801cbec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801cbf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cbf4:	d003      	beq.n	801cbfe <__swsetup_r+0x9a>
 801cbf6:	4621      	mov	r1, r4
 801cbf8:	4630      	mov	r0, r6
 801cbfa:	f000 fa09 	bl	801d010 <__smakebuf_r>
 801cbfe:	89a0      	ldrh	r0, [r4, #12]
 801cc00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801cc04:	f010 0301 	ands.w	r3, r0, #1
 801cc08:	d00a      	beq.n	801cc20 <__swsetup_r+0xbc>
 801cc0a:	2300      	movs	r3, #0
 801cc0c:	60a3      	str	r3, [r4, #8]
 801cc0e:	6963      	ldr	r3, [r4, #20]
 801cc10:	425b      	negs	r3, r3
 801cc12:	61a3      	str	r3, [r4, #24]
 801cc14:	6923      	ldr	r3, [r4, #16]
 801cc16:	b943      	cbnz	r3, 801cc2a <__swsetup_r+0xc6>
 801cc18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801cc1c:	d1ba      	bne.n	801cb94 <__swsetup_r+0x30>
 801cc1e:	bd70      	pop	{r4, r5, r6, pc}
 801cc20:	0781      	lsls	r1, r0, #30
 801cc22:	bf58      	it	pl
 801cc24:	6963      	ldrpl	r3, [r4, #20]
 801cc26:	60a3      	str	r3, [r4, #8]
 801cc28:	e7f4      	b.n	801cc14 <__swsetup_r+0xb0>
 801cc2a:	2000      	movs	r0, #0
 801cc2c:	e7f7      	b.n	801cc1e <__swsetup_r+0xba>
 801cc2e:	bf00      	nop
 801cc30:	200000a4 	.word	0x200000a4
 801cc34:	080247fc 	.word	0x080247fc
 801cc38:	0802481c 	.word	0x0802481c
 801cc3c:	080247dc 	.word	0x080247dc

0801cc40 <abort>:
 801cc40:	b508      	push	{r3, lr}
 801cc42:	2006      	movs	r0, #6
 801cc44:	f000 fa54 	bl	801d0f0 <raise>
 801cc48:	2001      	movs	r0, #1
 801cc4a:	f7ef ff47 	bl	800cadc <_exit>
	...

0801cc50 <__sflush_r>:
 801cc50:	898a      	ldrh	r2, [r1, #12]
 801cc52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cc56:	4605      	mov	r5, r0
 801cc58:	0710      	lsls	r0, r2, #28
 801cc5a:	460c      	mov	r4, r1
 801cc5c:	d458      	bmi.n	801cd10 <__sflush_r+0xc0>
 801cc5e:	684b      	ldr	r3, [r1, #4]
 801cc60:	2b00      	cmp	r3, #0
 801cc62:	dc05      	bgt.n	801cc70 <__sflush_r+0x20>
 801cc64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801cc66:	2b00      	cmp	r3, #0
 801cc68:	dc02      	bgt.n	801cc70 <__sflush_r+0x20>
 801cc6a:	2000      	movs	r0, #0
 801cc6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cc70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801cc72:	2e00      	cmp	r6, #0
 801cc74:	d0f9      	beq.n	801cc6a <__sflush_r+0x1a>
 801cc76:	2300      	movs	r3, #0
 801cc78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801cc7c:	682f      	ldr	r7, [r5, #0]
 801cc7e:	602b      	str	r3, [r5, #0]
 801cc80:	d032      	beq.n	801cce8 <__sflush_r+0x98>
 801cc82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801cc84:	89a3      	ldrh	r3, [r4, #12]
 801cc86:	075a      	lsls	r2, r3, #29
 801cc88:	d505      	bpl.n	801cc96 <__sflush_r+0x46>
 801cc8a:	6863      	ldr	r3, [r4, #4]
 801cc8c:	1ac0      	subs	r0, r0, r3
 801cc8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801cc90:	b10b      	cbz	r3, 801cc96 <__sflush_r+0x46>
 801cc92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801cc94:	1ac0      	subs	r0, r0, r3
 801cc96:	2300      	movs	r3, #0
 801cc98:	4602      	mov	r2, r0
 801cc9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801cc9c:	6a21      	ldr	r1, [r4, #32]
 801cc9e:	4628      	mov	r0, r5
 801cca0:	47b0      	blx	r6
 801cca2:	1c43      	adds	r3, r0, #1
 801cca4:	89a3      	ldrh	r3, [r4, #12]
 801cca6:	d106      	bne.n	801ccb6 <__sflush_r+0x66>
 801cca8:	6829      	ldr	r1, [r5, #0]
 801ccaa:	291d      	cmp	r1, #29
 801ccac:	d82c      	bhi.n	801cd08 <__sflush_r+0xb8>
 801ccae:	4a2a      	ldr	r2, [pc, #168]	; (801cd58 <__sflush_r+0x108>)
 801ccb0:	40ca      	lsrs	r2, r1
 801ccb2:	07d6      	lsls	r6, r2, #31
 801ccb4:	d528      	bpl.n	801cd08 <__sflush_r+0xb8>
 801ccb6:	2200      	movs	r2, #0
 801ccb8:	6062      	str	r2, [r4, #4]
 801ccba:	04d9      	lsls	r1, r3, #19
 801ccbc:	6922      	ldr	r2, [r4, #16]
 801ccbe:	6022      	str	r2, [r4, #0]
 801ccc0:	d504      	bpl.n	801cccc <__sflush_r+0x7c>
 801ccc2:	1c42      	adds	r2, r0, #1
 801ccc4:	d101      	bne.n	801ccca <__sflush_r+0x7a>
 801ccc6:	682b      	ldr	r3, [r5, #0]
 801ccc8:	b903      	cbnz	r3, 801cccc <__sflush_r+0x7c>
 801ccca:	6560      	str	r0, [r4, #84]	; 0x54
 801cccc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ccce:	602f      	str	r7, [r5, #0]
 801ccd0:	2900      	cmp	r1, #0
 801ccd2:	d0ca      	beq.n	801cc6a <__sflush_r+0x1a>
 801ccd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ccd8:	4299      	cmp	r1, r3
 801ccda:	d002      	beq.n	801cce2 <__sflush_r+0x92>
 801ccdc:	4628      	mov	r0, r5
 801ccde:	f7ff fa9b 	bl	801c218 <_free_r>
 801cce2:	2000      	movs	r0, #0
 801cce4:	6360      	str	r0, [r4, #52]	; 0x34
 801cce6:	e7c1      	b.n	801cc6c <__sflush_r+0x1c>
 801cce8:	6a21      	ldr	r1, [r4, #32]
 801ccea:	2301      	movs	r3, #1
 801ccec:	4628      	mov	r0, r5
 801ccee:	47b0      	blx	r6
 801ccf0:	1c41      	adds	r1, r0, #1
 801ccf2:	d1c7      	bne.n	801cc84 <__sflush_r+0x34>
 801ccf4:	682b      	ldr	r3, [r5, #0]
 801ccf6:	2b00      	cmp	r3, #0
 801ccf8:	d0c4      	beq.n	801cc84 <__sflush_r+0x34>
 801ccfa:	2b1d      	cmp	r3, #29
 801ccfc:	d001      	beq.n	801cd02 <__sflush_r+0xb2>
 801ccfe:	2b16      	cmp	r3, #22
 801cd00:	d101      	bne.n	801cd06 <__sflush_r+0xb6>
 801cd02:	602f      	str	r7, [r5, #0]
 801cd04:	e7b1      	b.n	801cc6a <__sflush_r+0x1a>
 801cd06:	89a3      	ldrh	r3, [r4, #12]
 801cd08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cd0c:	81a3      	strh	r3, [r4, #12]
 801cd0e:	e7ad      	b.n	801cc6c <__sflush_r+0x1c>
 801cd10:	690f      	ldr	r7, [r1, #16]
 801cd12:	2f00      	cmp	r7, #0
 801cd14:	d0a9      	beq.n	801cc6a <__sflush_r+0x1a>
 801cd16:	0793      	lsls	r3, r2, #30
 801cd18:	680e      	ldr	r6, [r1, #0]
 801cd1a:	bf08      	it	eq
 801cd1c:	694b      	ldreq	r3, [r1, #20]
 801cd1e:	600f      	str	r7, [r1, #0]
 801cd20:	bf18      	it	ne
 801cd22:	2300      	movne	r3, #0
 801cd24:	eba6 0807 	sub.w	r8, r6, r7
 801cd28:	608b      	str	r3, [r1, #8]
 801cd2a:	f1b8 0f00 	cmp.w	r8, #0
 801cd2e:	dd9c      	ble.n	801cc6a <__sflush_r+0x1a>
 801cd30:	6a21      	ldr	r1, [r4, #32]
 801cd32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801cd34:	4643      	mov	r3, r8
 801cd36:	463a      	mov	r2, r7
 801cd38:	4628      	mov	r0, r5
 801cd3a:	47b0      	blx	r6
 801cd3c:	2800      	cmp	r0, #0
 801cd3e:	dc06      	bgt.n	801cd4e <__sflush_r+0xfe>
 801cd40:	89a3      	ldrh	r3, [r4, #12]
 801cd42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cd46:	81a3      	strh	r3, [r4, #12]
 801cd48:	f04f 30ff 	mov.w	r0, #4294967295
 801cd4c:	e78e      	b.n	801cc6c <__sflush_r+0x1c>
 801cd4e:	4407      	add	r7, r0
 801cd50:	eba8 0800 	sub.w	r8, r8, r0
 801cd54:	e7e9      	b.n	801cd2a <__sflush_r+0xda>
 801cd56:	bf00      	nop
 801cd58:	20400001 	.word	0x20400001

0801cd5c <_fflush_r>:
 801cd5c:	b538      	push	{r3, r4, r5, lr}
 801cd5e:	690b      	ldr	r3, [r1, #16]
 801cd60:	4605      	mov	r5, r0
 801cd62:	460c      	mov	r4, r1
 801cd64:	b913      	cbnz	r3, 801cd6c <_fflush_r+0x10>
 801cd66:	2500      	movs	r5, #0
 801cd68:	4628      	mov	r0, r5
 801cd6a:	bd38      	pop	{r3, r4, r5, pc}
 801cd6c:	b118      	cbz	r0, 801cd76 <_fflush_r+0x1a>
 801cd6e:	6983      	ldr	r3, [r0, #24]
 801cd70:	b90b      	cbnz	r3, 801cd76 <_fflush_r+0x1a>
 801cd72:	f000 f887 	bl	801ce84 <__sinit>
 801cd76:	4b14      	ldr	r3, [pc, #80]	; (801cdc8 <_fflush_r+0x6c>)
 801cd78:	429c      	cmp	r4, r3
 801cd7a:	d11b      	bne.n	801cdb4 <_fflush_r+0x58>
 801cd7c:	686c      	ldr	r4, [r5, #4]
 801cd7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cd82:	2b00      	cmp	r3, #0
 801cd84:	d0ef      	beq.n	801cd66 <_fflush_r+0xa>
 801cd86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801cd88:	07d0      	lsls	r0, r2, #31
 801cd8a:	d404      	bmi.n	801cd96 <_fflush_r+0x3a>
 801cd8c:	0599      	lsls	r1, r3, #22
 801cd8e:	d402      	bmi.n	801cd96 <_fflush_r+0x3a>
 801cd90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cd92:	f000 f915 	bl	801cfc0 <__retarget_lock_acquire_recursive>
 801cd96:	4628      	mov	r0, r5
 801cd98:	4621      	mov	r1, r4
 801cd9a:	f7ff ff59 	bl	801cc50 <__sflush_r>
 801cd9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801cda0:	07da      	lsls	r2, r3, #31
 801cda2:	4605      	mov	r5, r0
 801cda4:	d4e0      	bmi.n	801cd68 <_fflush_r+0xc>
 801cda6:	89a3      	ldrh	r3, [r4, #12]
 801cda8:	059b      	lsls	r3, r3, #22
 801cdaa:	d4dd      	bmi.n	801cd68 <_fflush_r+0xc>
 801cdac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cdae:	f000 f908 	bl	801cfc2 <__retarget_lock_release_recursive>
 801cdb2:	e7d9      	b.n	801cd68 <_fflush_r+0xc>
 801cdb4:	4b05      	ldr	r3, [pc, #20]	; (801cdcc <_fflush_r+0x70>)
 801cdb6:	429c      	cmp	r4, r3
 801cdb8:	d101      	bne.n	801cdbe <_fflush_r+0x62>
 801cdba:	68ac      	ldr	r4, [r5, #8]
 801cdbc:	e7df      	b.n	801cd7e <_fflush_r+0x22>
 801cdbe:	4b04      	ldr	r3, [pc, #16]	; (801cdd0 <_fflush_r+0x74>)
 801cdc0:	429c      	cmp	r4, r3
 801cdc2:	bf08      	it	eq
 801cdc4:	68ec      	ldreq	r4, [r5, #12]
 801cdc6:	e7da      	b.n	801cd7e <_fflush_r+0x22>
 801cdc8:	080247fc 	.word	0x080247fc
 801cdcc:	0802481c 	.word	0x0802481c
 801cdd0:	080247dc 	.word	0x080247dc

0801cdd4 <std>:
 801cdd4:	2300      	movs	r3, #0
 801cdd6:	b510      	push	{r4, lr}
 801cdd8:	4604      	mov	r4, r0
 801cdda:	e9c0 3300 	strd	r3, r3, [r0]
 801cdde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801cde2:	6083      	str	r3, [r0, #8]
 801cde4:	8181      	strh	r1, [r0, #12]
 801cde6:	6643      	str	r3, [r0, #100]	; 0x64
 801cde8:	81c2      	strh	r2, [r0, #14]
 801cdea:	6183      	str	r3, [r0, #24]
 801cdec:	4619      	mov	r1, r3
 801cdee:	2208      	movs	r2, #8
 801cdf0:	305c      	adds	r0, #92	; 0x5c
 801cdf2:	f7fb fddd 	bl	80189b0 <memset>
 801cdf6:	4b05      	ldr	r3, [pc, #20]	; (801ce0c <std+0x38>)
 801cdf8:	6263      	str	r3, [r4, #36]	; 0x24
 801cdfa:	4b05      	ldr	r3, [pc, #20]	; (801ce10 <std+0x3c>)
 801cdfc:	62a3      	str	r3, [r4, #40]	; 0x28
 801cdfe:	4b05      	ldr	r3, [pc, #20]	; (801ce14 <std+0x40>)
 801ce00:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ce02:	4b05      	ldr	r3, [pc, #20]	; (801ce18 <std+0x44>)
 801ce04:	6224      	str	r4, [r4, #32]
 801ce06:	6323      	str	r3, [r4, #48]	; 0x30
 801ce08:	bd10      	pop	{r4, pc}
 801ce0a:	bf00      	nop
 801ce0c:	0801d129 	.word	0x0801d129
 801ce10:	0801d14b 	.word	0x0801d14b
 801ce14:	0801d183 	.word	0x0801d183
 801ce18:	0801d1a7 	.word	0x0801d1a7

0801ce1c <_cleanup_r>:
 801ce1c:	4901      	ldr	r1, [pc, #4]	; (801ce24 <_cleanup_r+0x8>)
 801ce1e:	f000 b8af 	b.w	801cf80 <_fwalk_reent>
 801ce22:	bf00      	nop
 801ce24:	0801cd5d 	.word	0x0801cd5d

0801ce28 <__sfmoreglue>:
 801ce28:	b570      	push	{r4, r5, r6, lr}
 801ce2a:	2268      	movs	r2, #104	; 0x68
 801ce2c:	1e4d      	subs	r5, r1, #1
 801ce2e:	4355      	muls	r5, r2
 801ce30:	460e      	mov	r6, r1
 801ce32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801ce36:	f7ff fa5b 	bl	801c2f0 <_malloc_r>
 801ce3a:	4604      	mov	r4, r0
 801ce3c:	b140      	cbz	r0, 801ce50 <__sfmoreglue+0x28>
 801ce3e:	2100      	movs	r1, #0
 801ce40:	e9c0 1600 	strd	r1, r6, [r0]
 801ce44:	300c      	adds	r0, #12
 801ce46:	60a0      	str	r0, [r4, #8]
 801ce48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801ce4c:	f7fb fdb0 	bl	80189b0 <memset>
 801ce50:	4620      	mov	r0, r4
 801ce52:	bd70      	pop	{r4, r5, r6, pc}

0801ce54 <__sfp_lock_acquire>:
 801ce54:	4801      	ldr	r0, [pc, #4]	; (801ce5c <__sfp_lock_acquire+0x8>)
 801ce56:	f000 b8b3 	b.w	801cfc0 <__retarget_lock_acquire_recursive>
 801ce5a:	bf00      	nop
 801ce5c:	200372a5 	.word	0x200372a5

0801ce60 <__sfp_lock_release>:
 801ce60:	4801      	ldr	r0, [pc, #4]	; (801ce68 <__sfp_lock_release+0x8>)
 801ce62:	f000 b8ae 	b.w	801cfc2 <__retarget_lock_release_recursive>
 801ce66:	bf00      	nop
 801ce68:	200372a5 	.word	0x200372a5

0801ce6c <__sinit_lock_acquire>:
 801ce6c:	4801      	ldr	r0, [pc, #4]	; (801ce74 <__sinit_lock_acquire+0x8>)
 801ce6e:	f000 b8a7 	b.w	801cfc0 <__retarget_lock_acquire_recursive>
 801ce72:	bf00      	nop
 801ce74:	200372a6 	.word	0x200372a6

0801ce78 <__sinit_lock_release>:
 801ce78:	4801      	ldr	r0, [pc, #4]	; (801ce80 <__sinit_lock_release+0x8>)
 801ce7a:	f000 b8a2 	b.w	801cfc2 <__retarget_lock_release_recursive>
 801ce7e:	bf00      	nop
 801ce80:	200372a6 	.word	0x200372a6

0801ce84 <__sinit>:
 801ce84:	b510      	push	{r4, lr}
 801ce86:	4604      	mov	r4, r0
 801ce88:	f7ff fff0 	bl	801ce6c <__sinit_lock_acquire>
 801ce8c:	69a3      	ldr	r3, [r4, #24]
 801ce8e:	b11b      	cbz	r3, 801ce98 <__sinit+0x14>
 801ce90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ce94:	f7ff bff0 	b.w	801ce78 <__sinit_lock_release>
 801ce98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801ce9c:	6523      	str	r3, [r4, #80]	; 0x50
 801ce9e:	4b13      	ldr	r3, [pc, #76]	; (801ceec <__sinit+0x68>)
 801cea0:	4a13      	ldr	r2, [pc, #76]	; (801cef0 <__sinit+0x6c>)
 801cea2:	681b      	ldr	r3, [r3, #0]
 801cea4:	62a2      	str	r2, [r4, #40]	; 0x28
 801cea6:	42a3      	cmp	r3, r4
 801cea8:	bf04      	itt	eq
 801ceaa:	2301      	moveq	r3, #1
 801ceac:	61a3      	streq	r3, [r4, #24]
 801ceae:	4620      	mov	r0, r4
 801ceb0:	f000 f820 	bl	801cef4 <__sfp>
 801ceb4:	6060      	str	r0, [r4, #4]
 801ceb6:	4620      	mov	r0, r4
 801ceb8:	f000 f81c 	bl	801cef4 <__sfp>
 801cebc:	60a0      	str	r0, [r4, #8]
 801cebe:	4620      	mov	r0, r4
 801cec0:	f000 f818 	bl	801cef4 <__sfp>
 801cec4:	2200      	movs	r2, #0
 801cec6:	60e0      	str	r0, [r4, #12]
 801cec8:	2104      	movs	r1, #4
 801ceca:	6860      	ldr	r0, [r4, #4]
 801cecc:	f7ff ff82 	bl	801cdd4 <std>
 801ced0:	68a0      	ldr	r0, [r4, #8]
 801ced2:	2201      	movs	r2, #1
 801ced4:	2109      	movs	r1, #9
 801ced6:	f7ff ff7d 	bl	801cdd4 <std>
 801ceda:	68e0      	ldr	r0, [r4, #12]
 801cedc:	2202      	movs	r2, #2
 801cede:	2112      	movs	r1, #18
 801cee0:	f7ff ff78 	bl	801cdd4 <std>
 801cee4:	2301      	movs	r3, #1
 801cee6:	61a3      	str	r3, [r4, #24]
 801cee8:	e7d2      	b.n	801ce90 <__sinit+0xc>
 801ceea:	bf00      	nop
 801ceec:	08024398 	.word	0x08024398
 801cef0:	0801ce1d 	.word	0x0801ce1d

0801cef4 <__sfp>:
 801cef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cef6:	4607      	mov	r7, r0
 801cef8:	f7ff ffac 	bl	801ce54 <__sfp_lock_acquire>
 801cefc:	4b1e      	ldr	r3, [pc, #120]	; (801cf78 <__sfp+0x84>)
 801cefe:	681e      	ldr	r6, [r3, #0]
 801cf00:	69b3      	ldr	r3, [r6, #24]
 801cf02:	b913      	cbnz	r3, 801cf0a <__sfp+0x16>
 801cf04:	4630      	mov	r0, r6
 801cf06:	f7ff ffbd 	bl	801ce84 <__sinit>
 801cf0a:	3648      	adds	r6, #72	; 0x48
 801cf0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801cf10:	3b01      	subs	r3, #1
 801cf12:	d503      	bpl.n	801cf1c <__sfp+0x28>
 801cf14:	6833      	ldr	r3, [r6, #0]
 801cf16:	b30b      	cbz	r3, 801cf5c <__sfp+0x68>
 801cf18:	6836      	ldr	r6, [r6, #0]
 801cf1a:	e7f7      	b.n	801cf0c <__sfp+0x18>
 801cf1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801cf20:	b9d5      	cbnz	r5, 801cf58 <__sfp+0x64>
 801cf22:	4b16      	ldr	r3, [pc, #88]	; (801cf7c <__sfp+0x88>)
 801cf24:	60e3      	str	r3, [r4, #12]
 801cf26:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801cf2a:	6665      	str	r5, [r4, #100]	; 0x64
 801cf2c:	f000 f847 	bl	801cfbe <__retarget_lock_init_recursive>
 801cf30:	f7ff ff96 	bl	801ce60 <__sfp_lock_release>
 801cf34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801cf38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801cf3c:	6025      	str	r5, [r4, #0]
 801cf3e:	61a5      	str	r5, [r4, #24]
 801cf40:	2208      	movs	r2, #8
 801cf42:	4629      	mov	r1, r5
 801cf44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801cf48:	f7fb fd32 	bl	80189b0 <memset>
 801cf4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801cf50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801cf54:	4620      	mov	r0, r4
 801cf56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cf58:	3468      	adds	r4, #104	; 0x68
 801cf5a:	e7d9      	b.n	801cf10 <__sfp+0x1c>
 801cf5c:	2104      	movs	r1, #4
 801cf5e:	4638      	mov	r0, r7
 801cf60:	f7ff ff62 	bl	801ce28 <__sfmoreglue>
 801cf64:	4604      	mov	r4, r0
 801cf66:	6030      	str	r0, [r6, #0]
 801cf68:	2800      	cmp	r0, #0
 801cf6a:	d1d5      	bne.n	801cf18 <__sfp+0x24>
 801cf6c:	f7ff ff78 	bl	801ce60 <__sfp_lock_release>
 801cf70:	230c      	movs	r3, #12
 801cf72:	603b      	str	r3, [r7, #0]
 801cf74:	e7ee      	b.n	801cf54 <__sfp+0x60>
 801cf76:	bf00      	nop
 801cf78:	08024398 	.word	0x08024398
 801cf7c:	ffff0001 	.word	0xffff0001

0801cf80 <_fwalk_reent>:
 801cf80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cf84:	4606      	mov	r6, r0
 801cf86:	4688      	mov	r8, r1
 801cf88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801cf8c:	2700      	movs	r7, #0
 801cf8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801cf92:	f1b9 0901 	subs.w	r9, r9, #1
 801cf96:	d505      	bpl.n	801cfa4 <_fwalk_reent+0x24>
 801cf98:	6824      	ldr	r4, [r4, #0]
 801cf9a:	2c00      	cmp	r4, #0
 801cf9c:	d1f7      	bne.n	801cf8e <_fwalk_reent+0xe>
 801cf9e:	4638      	mov	r0, r7
 801cfa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cfa4:	89ab      	ldrh	r3, [r5, #12]
 801cfa6:	2b01      	cmp	r3, #1
 801cfa8:	d907      	bls.n	801cfba <_fwalk_reent+0x3a>
 801cfaa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801cfae:	3301      	adds	r3, #1
 801cfb0:	d003      	beq.n	801cfba <_fwalk_reent+0x3a>
 801cfb2:	4629      	mov	r1, r5
 801cfb4:	4630      	mov	r0, r6
 801cfb6:	47c0      	blx	r8
 801cfb8:	4307      	orrs	r7, r0
 801cfba:	3568      	adds	r5, #104	; 0x68
 801cfbc:	e7e9      	b.n	801cf92 <_fwalk_reent+0x12>

0801cfbe <__retarget_lock_init_recursive>:
 801cfbe:	4770      	bx	lr

0801cfc0 <__retarget_lock_acquire_recursive>:
 801cfc0:	4770      	bx	lr

0801cfc2 <__retarget_lock_release_recursive>:
 801cfc2:	4770      	bx	lr

0801cfc4 <__swhatbuf_r>:
 801cfc4:	b570      	push	{r4, r5, r6, lr}
 801cfc6:	460e      	mov	r6, r1
 801cfc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cfcc:	2900      	cmp	r1, #0
 801cfce:	b096      	sub	sp, #88	; 0x58
 801cfd0:	4614      	mov	r4, r2
 801cfd2:	461d      	mov	r5, r3
 801cfd4:	da08      	bge.n	801cfe8 <__swhatbuf_r+0x24>
 801cfd6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801cfda:	2200      	movs	r2, #0
 801cfdc:	602a      	str	r2, [r5, #0]
 801cfde:	061a      	lsls	r2, r3, #24
 801cfe0:	d410      	bmi.n	801d004 <__swhatbuf_r+0x40>
 801cfe2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801cfe6:	e00e      	b.n	801d006 <__swhatbuf_r+0x42>
 801cfe8:	466a      	mov	r2, sp
 801cfea:	f000 f903 	bl	801d1f4 <_fstat_r>
 801cfee:	2800      	cmp	r0, #0
 801cff0:	dbf1      	blt.n	801cfd6 <__swhatbuf_r+0x12>
 801cff2:	9a01      	ldr	r2, [sp, #4]
 801cff4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801cff8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801cffc:	425a      	negs	r2, r3
 801cffe:	415a      	adcs	r2, r3
 801d000:	602a      	str	r2, [r5, #0]
 801d002:	e7ee      	b.n	801cfe2 <__swhatbuf_r+0x1e>
 801d004:	2340      	movs	r3, #64	; 0x40
 801d006:	2000      	movs	r0, #0
 801d008:	6023      	str	r3, [r4, #0]
 801d00a:	b016      	add	sp, #88	; 0x58
 801d00c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801d010 <__smakebuf_r>:
 801d010:	898b      	ldrh	r3, [r1, #12]
 801d012:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d014:	079d      	lsls	r5, r3, #30
 801d016:	4606      	mov	r6, r0
 801d018:	460c      	mov	r4, r1
 801d01a:	d507      	bpl.n	801d02c <__smakebuf_r+0x1c>
 801d01c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801d020:	6023      	str	r3, [r4, #0]
 801d022:	6123      	str	r3, [r4, #16]
 801d024:	2301      	movs	r3, #1
 801d026:	6163      	str	r3, [r4, #20]
 801d028:	b002      	add	sp, #8
 801d02a:	bd70      	pop	{r4, r5, r6, pc}
 801d02c:	ab01      	add	r3, sp, #4
 801d02e:	466a      	mov	r2, sp
 801d030:	f7ff ffc8 	bl	801cfc4 <__swhatbuf_r>
 801d034:	9900      	ldr	r1, [sp, #0]
 801d036:	4605      	mov	r5, r0
 801d038:	4630      	mov	r0, r6
 801d03a:	f7ff f959 	bl	801c2f0 <_malloc_r>
 801d03e:	b948      	cbnz	r0, 801d054 <__smakebuf_r+0x44>
 801d040:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d044:	059a      	lsls	r2, r3, #22
 801d046:	d4ef      	bmi.n	801d028 <__smakebuf_r+0x18>
 801d048:	f023 0303 	bic.w	r3, r3, #3
 801d04c:	f043 0302 	orr.w	r3, r3, #2
 801d050:	81a3      	strh	r3, [r4, #12]
 801d052:	e7e3      	b.n	801d01c <__smakebuf_r+0xc>
 801d054:	4b0d      	ldr	r3, [pc, #52]	; (801d08c <__smakebuf_r+0x7c>)
 801d056:	62b3      	str	r3, [r6, #40]	; 0x28
 801d058:	89a3      	ldrh	r3, [r4, #12]
 801d05a:	6020      	str	r0, [r4, #0]
 801d05c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d060:	81a3      	strh	r3, [r4, #12]
 801d062:	9b00      	ldr	r3, [sp, #0]
 801d064:	6163      	str	r3, [r4, #20]
 801d066:	9b01      	ldr	r3, [sp, #4]
 801d068:	6120      	str	r0, [r4, #16]
 801d06a:	b15b      	cbz	r3, 801d084 <__smakebuf_r+0x74>
 801d06c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d070:	4630      	mov	r0, r6
 801d072:	f000 f8d1 	bl	801d218 <_isatty_r>
 801d076:	b128      	cbz	r0, 801d084 <__smakebuf_r+0x74>
 801d078:	89a3      	ldrh	r3, [r4, #12]
 801d07a:	f023 0303 	bic.w	r3, r3, #3
 801d07e:	f043 0301 	orr.w	r3, r3, #1
 801d082:	81a3      	strh	r3, [r4, #12]
 801d084:	89a0      	ldrh	r0, [r4, #12]
 801d086:	4305      	orrs	r5, r0
 801d088:	81a5      	strh	r5, [r4, #12]
 801d08a:	e7cd      	b.n	801d028 <__smakebuf_r+0x18>
 801d08c:	0801ce1d 	.word	0x0801ce1d

0801d090 <_malloc_usable_size_r>:
 801d090:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d094:	1f18      	subs	r0, r3, #4
 801d096:	2b00      	cmp	r3, #0
 801d098:	bfbc      	itt	lt
 801d09a:	580b      	ldrlt	r3, [r1, r0]
 801d09c:	18c0      	addlt	r0, r0, r3
 801d09e:	4770      	bx	lr

0801d0a0 <_raise_r>:
 801d0a0:	291f      	cmp	r1, #31
 801d0a2:	b538      	push	{r3, r4, r5, lr}
 801d0a4:	4604      	mov	r4, r0
 801d0a6:	460d      	mov	r5, r1
 801d0a8:	d904      	bls.n	801d0b4 <_raise_r+0x14>
 801d0aa:	2316      	movs	r3, #22
 801d0ac:	6003      	str	r3, [r0, #0]
 801d0ae:	f04f 30ff 	mov.w	r0, #4294967295
 801d0b2:	bd38      	pop	{r3, r4, r5, pc}
 801d0b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801d0b6:	b112      	cbz	r2, 801d0be <_raise_r+0x1e>
 801d0b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d0bc:	b94b      	cbnz	r3, 801d0d2 <_raise_r+0x32>
 801d0be:	4620      	mov	r0, r4
 801d0c0:	f000 f830 	bl	801d124 <_getpid_r>
 801d0c4:	462a      	mov	r2, r5
 801d0c6:	4601      	mov	r1, r0
 801d0c8:	4620      	mov	r0, r4
 801d0ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d0ce:	f000 b817 	b.w	801d100 <_kill_r>
 801d0d2:	2b01      	cmp	r3, #1
 801d0d4:	d00a      	beq.n	801d0ec <_raise_r+0x4c>
 801d0d6:	1c59      	adds	r1, r3, #1
 801d0d8:	d103      	bne.n	801d0e2 <_raise_r+0x42>
 801d0da:	2316      	movs	r3, #22
 801d0dc:	6003      	str	r3, [r0, #0]
 801d0de:	2001      	movs	r0, #1
 801d0e0:	e7e7      	b.n	801d0b2 <_raise_r+0x12>
 801d0e2:	2400      	movs	r4, #0
 801d0e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801d0e8:	4628      	mov	r0, r5
 801d0ea:	4798      	blx	r3
 801d0ec:	2000      	movs	r0, #0
 801d0ee:	e7e0      	b.n	801d0b2 <_raise_r+0x12>

0801d0f0 <raise>:
 801d0f0:	4b02      	ldr	r3, [pc, #8]	; (801d0fc <raise+0xc>)
 801d0f2:	4601      	mov	r1, r0
 801d0f4:	6818      	ldr	r0, [r3, #0]
 801d0f6:	f7ff bfd3 	b.w	801d0a0 <_raise_r>
 801d0fa:	bf00      	nop
 801d0fc:	200000a4 	.word	0x200000a4

0801d100 <_kill_r>:
 801d100:	b538      	push	{r3, r4, r5, lr}
 801d102:	4d07      	ldr	r5, [pc, #28]	; (801d120 <_kill_r+0x20>)
 801d104:	2300      	movs	r3, #0
 801d106:	4604      	mov	r4, r0
 801d108:	4608      	mov	r0, r1
 801d10a:	4611      	mov	r1, r2
 801d10c:	602b      	str	r3, [r5, #0]
 801d10e:	f7ef fcd5 	bl	800cabc <_kill>
 801d112:	1c43      	adds	r3, r0, #1
 801d114:	d102      	bne.n	801d11c <_kill_r+0x1c>
 801d116:	682b      	ldr	r3, [r5, #0]
 801d118:	b103      	cbz	r3, 801d11c <_kill_r+0x1c>
 801d11a:	6023      	str	r3, [r4, #0]
 801d11c:	bd38      	pop	{r3, r4, r5, pc}
 801d11e:	bf00      	nop
 801d120:	200372a0 	.word	0x200372a0

0801d124 <_getpid_r>:
 801d124:	f7ef bcc2 	b.w	800caac <_getpid>

0801d128 <__sread>:
 801d128:	b510      	push	{r4, lr}
 801d12a:	460c      	mov	r4, r1
 801d12c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d130:	f000 f894 	bl	801d25c <_read_r>
 801d134:	2800      	cmp	r0, #0
 801d136:	bfab      	itete	ge
 801d138:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801d13a:	89a3      	ldrhlt	r3, [r4, #12]
 801d13c:	181b      	addge	r3, r3, r0
 801d13e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801d142:	bfac      	ite	ge
 801d144:	6563      	strge	r3, [r4, #84]	; 0x54
 801d146:	81a3      	strhlt	r3, [r4, #12]
 801d148:	bd10      	pop	{r4, pc}

0801d14a <__swrite>:
 801d14a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d14e:	461f      	mov	r7, r3
 801d150:	898b      	ldrh	r3, [r1, #12]
 801d152:	05db      	lsls	r3, r3, #23
 801d154:	4605      	mov	r5, r0
 801d156:	460c      	mov	r4, r1
 801d158:	4616      	mov	r6, r2
 801d15a:	d505      	bpl.n	801d168 <__swrite+0x1e>
 801d15c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d160:	2302      	movs	r3, #2
 801d162:	2200      	movs	r2, #0
 801d164:	f000 f868 	bl	801d238 <_lseek_r>
 801d168:	89a3      	ldrh	r3, [r4, #12]
 801d16a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d16e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d172:	81a3      	strh	r3, [r4, #12]
 801d174:	4632      	mov	r2, r6
 801d176:	463b      	mov	r3, r7
 801d178:	4628      	mov	r0, r5
 801d17a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d17e:	f000 b817 	b.w	801d1b0 <_write_r>

0801d182 <__sseek>:
 801d182:	b510      	push	{r4, lr}
 801d184:	460c      	mov	r4, r1
 801d186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d18a:	f000 f855 	bl	801d238 <_lseek_r>
 801d18e:	1c43      	adds	r3, r0, #1
 801d190:	89a3      	ldrh	r3, [r4, #12]
 801d192:	bf15      	itete	ne
 801d194:	6560      	strne	r0, [r4, #84]	; 0x54
 801d196:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801d19a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801d19e:	81a3      	strheq	r3, [r4, #12]
 801d1a0:	bf18      	it	ne
 801d1a2:	81a3      	strhne	r3, [r4, #12]
 801d1a4:	bd10      	pop	{r4, pc}

0801d1a6 <__sclose>:
 801d1a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d1aa:	f000 b813 	b.w	801d1d4 <_close_r>
	...

0801d1b0 <_write_r>:
 801d1b0:	b538      	push	{r3, r4, r5, lr}
 801d1b2:	4d07      	ldr	r5, [pc, #28]	; (801d1d0 <_write_r+0x20>)
 801d1b4:	4604      	mov	r4, r0
 801d1b6:	4608      	mov	r0, r1
 801d1b8:	4611      	mov	r1, r2
 801d1ba:	2200      	movs	r2, #0
 801d1bc:	602a      	str	r2, [r5, #0]
 801d1be:	461a      	mov	r2, r3
 801d1c0:	f7ef fcb3 	bl	800cb2a <_write>
 801d1c4:	1c43      	adds	r3, r0, #1
 801d1c6:	d102      	bne.n	801d1ce <_write_r+0x1e>
 801d1c8:	682b      	ldr	r3, [r5, #0]
 801d1ca:	b103      	cbz	r3, 801d1ce <_write_r+0x1e>
 801d1cc:	6023      	str	r3, [r4, #0]
 801d1ce:	bd38      	pop	{r3, r4, r5, pc}
 801d1d0:	200372a0 	.word	0x200372a0

0801d1d4 <_close_r>:
 801d1d4:	b538      	push	{r3, r4, r5, lr}
 801d1d6:	4d06      	ldr	r5, [pc, #24]	; (801d1f0 <_close_r+0x1c>)
 801d1d8:	2300      	movs	r3, #0
 801d1da:	4604      	mov	r4, r0
 801d1dc:	4608      	mov	r0, r1
 801d1de:	602b      	str	r3, [r5, #0]
 801d1e0:	f7ef fcbf 	bl	800cb62 <_close>
 801d1e4:	1c43      	adds	r3, r0, #1
 801d1e6:	d102      	bne.n	801d1ee <_close_r+0x1a>
 801d1e8:	682b      	ldr	r3, [r5, #0]
 801d1ea:	b103      	cbz	r3, 801d1ee <_close_r+0x1a>
 801d1ec:	6023      	str	r3, [r4, #0]
 801d1ee:	bd38      	pop	{r3, r4, r5, pc}
 801d1f0:	200372a0 	.word	0x200372a0

0801d1f4 <_fstat_r>:
 801d1f4:	b538      	push	{r3, r4, r5, lr}
 801d1f6:	4d07      	ldr	r5, [pc, #28]	; (801d214 <_fstat_r+0x20>)
 801d1f8:	2300      	movs	r3, #0
 801d1fa:	4604      	mov	r4, r0
 801d1fc:	4608      	mov	r0, r1
 801d1fe:	4611      	mov	r1, r2
 801d200:	602b      	str	r3, [r5, #0]
 801d202:	f7ef fcba 	bl	800cb7a <_fstat>
 801d206:	1c43      	adds	r3, r0, #1
 801d208:	d102      	bne.n	801d210 <_fstat_r+0x1c>
 801d20a:	682b      	ldr	r3, [r5, #0]
 801d20c:	b103      	cbz	r3, 801d210 <_fstat_r+0x1c>
 801d20e:	6023      	str	r3, [r4, #0]
 801d210:	bd38      	pop	{r3, r4, r5, pc}
 801d212:	bf00      	nop
 801d214:	200372a0 	.word	0x200372a0

0801d218 <_isatty_r>:
 801d218:	b538      	push	{r3, r4, r5, lr}
 801d21a:	4d06      	ldr	r5, [pc, #24]	; (801d234 <_isatty_r+0x1c>)
 801d21c:	2300      	movs	r3, #0
 801d21e:	4604      	mov	r4, r0
 801d220:	4608      	mov	r0, r1
 801d222:	602b      	str	r3, [r5, #0]
 801d224:	f7ef fcb9 	bl	800cb9a <_isatty>
 801d228:	1c43      	adds	r3, r0, #1
 801d22a:	d102      	bne.n	801d232 <_isatty_r+0x1a>
 801d22c:	682b      	ldr	r3, [r5, #0]
 801d22e:	b103      	cbz	r3, 801d232 <_isatty_r+0x1a>
 801d230:	6023      	str	r3, [r4, #0]
 801d232:	bd38      	pop	{r3, r4, r5, pc}
 801d234:	200372a0 	.word	0x200372a0

0801d238 <_lseek_r>:
 801d238:	b538      	push	{r3, r4, r5, lr}
 801d23a:	4d07      	ldr	r5, [pc, #28]	; (801d258 <_lseek_r+0x20>)
 801d23c:	4604      	mov	r4, r0
 801d23e:	4608      	mov	r0, r1
 801d240:	4611      	mov	r1, r2
 801d242:	2200      	movs	r2, #0
 801d244:	602a      	str	r2, [r5, #0]
 801d246:	461a      	mov	r2, r3
 801d248:	f7ef fcb2 	bl	800cbb0 <_lseek>
 801d24c:	1c43      	adds	r3, r0, #1
 801d24e:	d102      	bne.n	801d256 <_lseek_r+0x1e>
 801d250:	682b      	ldr	r3, [r5, #0]
 801d252:	b103      	cbz	r3, 801d256 <_lseek_r+0x1e>
 801d254:	6023      	str	r3, [r4, #0]
 801d256:	bd38      	pop	{r3, r4, r5, pc}
 801d258:	200372a0 	.word	0x200372a0

0801d25c <_read_r>:
 801d25c:	b538      	push	{r3, r4, r5, lr}
 801d25e:	4d07      	ldr	r5, [pc, #28]	; (801d27c <_read_r+0x20>)
 801d260:	4604      	mov	r4, r0
 801d262:	4608      	mov	r0, r1
 801d264:	4611      	mov	r1, r2
 801d266:	2200      	movs	r2, #0
 801d268:	602a      	str	r2, [r5, #0]
 801d26a:	461a      	mov	r2, r3
 801d26c:	f7ef fc40 	bl	800caf0 <_read>
 801d270:	1c43      	adds	r3, r0, #1
 801d272:	d102      	bne.n	801d27a <_read_r+0x1e>
 801d274:	682b      	ldr	r3, [r5, #0]
 801d276:	b103      	cbz	r3, 801d27a <_read_r+0x1e>
 801d278:	6023      	str	r3, [r4, #0]
 801d27a:	bd38      	pop	{r3, r4, r5, pc}
 801d27c:	200372a0 	.word	0x200372a0

0801d280 <cos>:
 801d280:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d282:	ec53 2b10 	vmov	r2, r3, d0
 801d286:	4826      	ldr	r0, [pc, #152]	; (801d320 <cos+0xa0>)
 801d288:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801d28c:	4281      	cmp	r1, r0
 801d28e:	dc06      	bgt.n	801d29e <cos+0x1e>
 801d290:	ed9f 1b21 	vldr	d1, [pc, #132]	; 801d318 <cos+0x98>
 801d294:	b005      	add	sp, #20
 801d296:	f85d eb04 	ldr.w	lr, [sp], #4
 801d29a:	f001 b839 	b.w	801e310 <__kernel_cos>
 801d29e:	4821      	ldr	r0, [pc, #132]	; (801d324 <cos+0xa4>)
 801d2a0:	4281      	cmp	r1, r0
 801d2a2:	dd09      	ble.n	801d2b8 <cos+0x38>
 801d2a4:	ee10 0a10 	vmov	r0, s0
 801d2a8:	4619      	mov	r1, r3
 801d2aa:	f7e3 f805 	bl	80002b8 <__aeabi_dsub>
 801d2ae:	ec41 0b10 	vmov	d0, r0, r1
 801d2b2:	b005      	add	sp, #20
 801d2b4:	f85d fb04 	ldr.w	pc, [sp], #4
 801d2b8:	4668      	mov	r0, sp
 801d2ba:	f000 fd69 	bl	801dd90 <__ieee754_rem_pio2>
 801d2be:	f000 0003 	and.w	r0, r0, #3
 801d2c2:	2801      	cmp	r0, #1
 801d2c4:	d00b      	beq.n	801d2de <cos+0x5e>
 801d2c6:	2802      	cmp	r0, #2
 801d2c8:	d016      	beq.n	801d2f8 <cos+0x78>
 801d2ca:	b9e0      	cbnz	r0, 801d306 <cos+0x86>
 801d2cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 801d2d0:	ed9d 0b00 	vldr	d0, [sp]
 801d2d4:	f001 f81c 	bl	801e310 <__kernel_cos>
 801d2d8:	ec51 0b10 	vmov	r0, r1, d0
 801d2dc:	e7e7      	b.n	801d2ae <cos+0x2e>
 801d2de:	ed9d 1b02 	vldr	d1, [sp, #8]
 801d2e2:	ed9d 0b00 	vldr	d0, [sp]
 801d2e6:	f001 fc2b 	bl	801eb40 <__kernel_sin>
 801d2ea:	ec53 2b10 	vmov	r2, r3, d0
 801d2ee:	ee10 0a10 	vmov	r0, s0
 801d2f2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801d2f6:	e7da      	b.n	801d2ae <cos+0x2e>
 801d2f8:	ed9d 1b02 	vldr	d1, [sp, #8]
 801d2fc:	ed9d 0b00 	vldr	d0, [sp]
 801d300:	f001 f806 	bl	801e310 <__kernel_cos>
 801d304:	e7f1      	b.n	801d2ea <cos+0x6a>
 801d306:	ed9d 1b02 	vldr	d1, [sp, #8]
 801d30a:	ed9d 0b00 	vldr	d0, [sp]
 801d30e:	2001      	movs	r0, #1
 801d310:	f001 fc16 	bl	801eb40 <__kernel_sin>
 801d314:	e7e0      	b.n	801d2d8 <cos+0x58>
 801d316:	bf00      	nop
	...
 801d320:	3fe921fb 	.word	0x3fe921fb
 801d324:	7fefffff 	.word	0x7fefffff

0801d328 <sin>:
 801d328:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d32a:	ec53 2b10 	vmov	r2, r3, d0
 801d32e:	4828      	ldr	r0, [pc, #160]	; (801d3d0 <sin+0xa8>)
 801d330:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801d334:	4281      	cmp	r1, r0
 801d336:	dc07      	bgt.n	801d348 <sin+0x20>
 801d338:	ed9f 1b23 	vldr	d1, [pc, #140]	; 801d3c8 <sin+0xa0>
 801d33c:	2000      	movs	r0, #0
 801d33e:	b005      	add	sp, #20
 801d340:	f85d eb04 	ldr.w	lr, [sp], #4
 801d344:	f001 bbfc 	b.w	801eb40 <__kernel_sin>
 801d348:	4822      	ldr	r0, [pc, #136]	; (801d3d4 <sin+0xac>)
 801d34a:	4281      	cmp	r1, r0
 801d34c:	dd09      	ble.n	801d362 <sin+0x3a>
 801d34e:	ee10 0a10 	vmov	r0, s0
 801d352:	4619      	mov	r1, r3
 801d354:	f7e2 ffb0 	bl	80002b8 <__aeabi_dsub>
 801d358:	ec41 0b10 	vmov	d0, r0, r1
 801d35c:	b005      	add	sp, #20
 801d35e:	f85d fb04 	ldr.w	pc, [sp], #4
 801d362:	4668      	mov	r0, sp
 801d364:	f000 fd14 	bl	801dd90 <__ieee754_rem_pio2>
 801d368:	f000 0003 	and.w	r0, r0, #3
 801d36c:	2801      	cmp	r0, #1
 801d36e:	d00c      	beq.n	801d38a <sin+0x62>
 801d370:	2802      	cmp	r0, #2
 801d372:	d011      	beq.n	801d398 <sin+0x70>
 801d374:	b9f0      	cbnz	r0, 801d3b4 <sin+0x8c>
 801d376:	ed9d 1b02 	vldr	d1, [sp, #8]
 801d37a:	ed9d 0b00 	vldr	d0, [sp]
 801d37e:	2001      	movs	r0, #1
 801d380:	f001 fbde 	bl	801eb40 <__kernel_sin>
 801d384:	ec51 0b10 	vmov	r0, r1, d0
 801d388:	e7e6      	b.n	801d358 <sin+0x30>
 801d38a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801d38e:	ed9d 0b00 	vldr	d0, [sp]
 801d392:	f000 ffbd 	bl	801e310 <__kernel_cos>
 801d396:	e7f5      	b.n	801d384 <sin+0x5c>
 801d398:	ed9d 1b02 	vldr	d1, [sp, #8]
 801d39c:	ed9d 0b00 	vldr	d0, [sp]
 801d3a0:	2001      	movs	r0, #1
 801d3a2:	f001 fbcd 	bl	801eb40 <__kernel_sin>
 801d3a6:	ec53 2b10 	vmov	r2, r3, d0
 801d3aa:	ee10 0a10 	vmov	r0, s0
 801d3ae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801d3b2:	e7d1      	b.n	801d358 <sin+0x30>
 801d3b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 801d3b8:	ed9d 0b00 	vldr	d0, [sp]
 801d3bc:	f000 ffa8 	bl	801e310 <__kernel_cos>
 801d3c0:	e7f1      	b.n	801d3a6 <sin+0x7e>
 801d3c2:	bf00      	nop
 801d3c4:	f3af 8000 	nop.w
	...
 801d3d0:	3fe921fb 	.word	0x3fe921fb
 801d3d4:	7fefffff 	.word	0x7fefffff

0801d3d8 <acos>:
 801d3d8:	b538      	push	{r3, r4, r5, lr}
 801d3da:	ed2d 8b02 	vpush	{d8}
 801d3de:	ec55 4b10 	vmov	r4, r5, d0
 801d3e2:	f000 f861 	bl	801d4a8 <__ieee754_acos>
 801d3e6:	4622      	mov	r2, r4
 801d3e8:	462b      	mov	r3, r5
 801d3ea:	4620      	mov	r0, r4
 801d3ec:	4629      	mov	r1, r5
 801d3ee:	eeb0 8a40 	vmov.f32	s16, s0
 801d3f2:	eef0 8a60 	vmov.f32	s17, s1
 801d3f6:	f7e3 fbb1 	bl	8000b5c <__aeabi_dcmpun>
 801d3fa:	b9a8      	cbnz	r0, 801d428 <acos+0x50>
 801d3fc:	ec45 4b10 	vmov	d0, r4, r5
 801d400:	f001 fc5c 	bl	801ecbc <fabs>
 801d404:	4b0c      	ldr	r3, [pc, #48]	; (801d438 <acos+0x60>)
 801d406:	ec51 0b10 	vmov	r0, r1, d0
 801d40a:	2200      	movs	r2, #0
 801d40c:	f7e3 fb9c 	bl	8000b48 <__aeabi_dcmpgt>
 801d410:	b150      	cbz	r0, 801d428 <acos+0x50>
 801d412:	f7fb fa95 	bl	8018940 <__errno>
 801d416:	ecbd 8b02 	vpop	{d8}
 801d41a:	2321      	movs	r3, #33	; 0x21
 801d41c:	6003      	str	r3, [r0, #0]
 801d41e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d422:	4806      	ldr	r0, [pc, #24]	; (801d43c <acos+0x64>)
 801d424:	f7ff b934 	b.w	801c690 <nan>
 801d428:	eeb0 0a48 	vmov.f32	s0, s16
 801d42c:	eef0 0a68 	vmov.f32	s1, s17
 801d430:	ecbd 8b02 	vpop	{d8}
 801d434:	bd38      	pop	{r3, r4, r5, pc}
 801d436:	bf00      	nop
 801d438:	3ff00000 	.word	0x3ff00000
 801d43c:	080247d8 	.word	0x080247d8

0801d440 <asin>:
 801d440:	b538      	push	{r3, r4, r5, lr}
 801d442:	ed2d 8b02 	vpush	{d8}
 801d446:	ec55 4b10 	vmov	r4, r5, d0
 801d44a:	f000 fa8d 	bl	801d968 <__ieee754_asin>
 801d44e:	4622      	mov	r2, r4
 801d450:	462b      	mov	r3, r5
 801d452:	4620      	mov	r0, r4
 801d454:	4629      	mov	r1, r5
 801d456:	eeb0 8a40 	vmov.f32	s16, s0
 801d45a:	eef0 8a60 	vmov.f32	s17, s1
 801d45e:	f7e3 fb7d 	bl	8000b5c <__aeabi_dcmpun>
 801d462:	b9a8      	cbnz	r0, 801d490 <asin+0x50>
 801d464:	ec45 4b10 	vmov	d0, r4, r5
 801d468:	f001 fc28 	bl	801ecbc <fabs>
 801d46c:	4b0c      	ldr	r3, [pc, #48]	; (801d4a0 <asin+0x60>)
 801d46e:	ec51 0b10 	vmov	r0, r1, d0
 801d472:	2200      	movs	r2, #0
 801d474:	f7e3 fb68 	bl	8000b48 <__aeabi_dcmpgt>
 801d478:	b150      	cbz	r0, 801d490 <asin+0x50>
 801d47a:	f7fb fa61 	bl	8018940 <__errno>
 801d47e:	ecbd 8b02 	vpop	{d8}
 801d482:	2321      	movs	r3, #33	; 0x21
 801d484:	6003      	str	r3, [r0, #0]
 801d486:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d48a:	4806      	ldr	r0, [pc, #24]	; (801d4a4 <asin+0x64>)
 801d48c:	f7ff b900 	b.w	801c690 <nan>
 801d490:	eeb0 0a48 	vmov.f32	s0, s16
 801d494:	eef0 0a68 	vmov.f32	s1, s17
 801d498:	ecbd 8b02 	vpop	{d8}
 801d49c:	bd38      	pop	{r3, r4, r5, pc}
 801d49e:	bf00      	nop
 801d4a0:	3ff00000 	.word	0x3ff00000
 801d4a4:	080247d8 	.word	0x080247d8

0801d4a8 <__ieee754_acos>:
 801d4a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d4ac:	ec55 4b10 	vmov	r4, r5, d0
 801d4b0:	49b7      	ldr	r1, [pc, #732]	; (801d790 <__ieee754_acos+0x2e8>)
 801d4b2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801d4b6:	428b      	cmp	r3, r1
 801d4b8:	dd1b      	ble.n	801d4f2 <__ieee754_acos+0x4a>
 801d4ba:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 801d4be:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801d4c2:	4323      	orrs	r3, r4
 801d4c4:	d106      	bne.n	801d4d4 <__ieee754_acos+0x2c>
 801d4c6:	2d00      	cmp	r5, #0
 801d4c8:	f300 8211 	bgt.w	801d8ee <__ieee754_acos+0x446>
 801d4cc:	ed9f 0b96 	vldr	d0, [pc, #600]	; 801d728 <__ieee754_acos+0x280>
 801d4d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d4d4:	ee10 2a10 	vmov	r2, s0
 801d4d8:	462b      	mov	r3, r5
 801d4da:	ee10 0a10 	vmov	r0, s0
 801d4de:	4629      	mov	r1, r5
 801d4e0:	f7e2 feea 	bl	80002b8 <__aeabi_dsub>
 801d4e4:	4602      	mov	r2, r0
 801d4e6:	460b      	mov	r3, r1
 801d4e8:	f7e3 f9c8 	bl	800087c <__aeabi_ddiv>
 801d4ec:	ec41 0b10 	vmov	d0, r0, r1
 801d4f0:	e7ee      	b.n	801d4d0 <__ieee754_acos+0x28>
 801d4f2:	49a8      	ldr	r1, [pc, #672]	; (801d794 <__ieee754_acos+0x2ec>)
 801d4f4:	428b      	cmp	r3, r1
 801d4f6:	f300 8087 	bgt.w	801d608 <__ieee754_acos+0x160>
 801d4fa:	4aa7      	ldr	r2, [pc, #668]	; (801d798 <__ieee754_acos+0x2f0>)
 801d4fc:	4293      	cmp	r3, r2
 801d4fe:	f340 81f9 	ble.w	801d8f4 <__ieee754_acos+0x44c>
 801d502:	ee10 2a10 	vmov	r2, s0
 801d506:	ee10 0a10 	vmov	r0, s0
 801d50a:	462b      	mov	r3, r5
 801d50c:	4629      	mov	r1, r5
 801d50e:	f7e3 f88b 	bl	8000628 <__aeabi_dmul>
 801d512:	a387      	add	r3, pc, #540	; (adr r3, 801d730 <__ieee754_acos+0x288>)
 801d514:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d518:	4606      	mov	r6, r0
 801d51a:	460f      	mov	r7, r1
 801d51c:	f7e3 f884 	bl	8000628 <__aeabi_dmul>
 801d520:	a385      	add	r3, pc, #532	; (adr r3, 801d738 <__ieee754_acos+0x290>)
 801d522:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d526:	f7e2 fec9 	bl	80002bc <__adddf3>
 801d52a:	4632      	mov	r2, r6
 801d52c:	463b      	mov	r3, r7
 801d52e:	f7e3 f87b 	bl	8000628 <__aeabi_dmul>
 801d532:	a383      	add	r3, pc, #524	; (adr r3, 801d740 <__ieee754_acos+0x298>)
 801d534:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d538:	f7e2 febe 	bl	80002b8 <__aeabi_dsub>
 801d53c:	4632      	mov	r2, r6
 801d53e:	463b      	mov	r3, r7
 801d540:	f7e3 f872 	bl	8000628 <__aeabi_dmul>
 801d544:	a380      	add	r3, pc, #512	; (adr r3, 801d748 <__ieee754_acos+0x2a0>)
 801d546:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d54a:	f7e2 feb7 	bl	80002bc <__adddf3>
 801d54e:	4632      	mov	r2, r6
 801d550:	463b      	mov	r3, r7
 801d552:	f7e3 f869 	bl	8000628 <__aeabi_dmul>
 801d556:	a37e      	add	r3, pc, #504	; (adr r3, 801d750 <__ieee754_acos+0x2a8>)
 801d558:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d55c:	f7e2 feac 	bl	80002b8 <__aeabi_dsub>
 801d560:	4632      	mov	r2, r6
 801d562:	463b      	mov	r3, r7
 801d564:	f7e3 f860 	bl	8000628 <__aeabi_dmul>
 801d568:	a37b      	add	r3, pc, #492	; (adr r3, 801d758 <__ieee754_acos+0x2b0>)
 801d56a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d56e:	f7e2 fea5 	bl	80002bc <__adddf3>
 801d572:	4632      	mov	r2, r6
 801d574:	463b      	mov	r3, r7
 801d576:	f7e3 f857 	bl	8000628 <__aeabi_dmul>
 801d57a:	a379      	add	r3, pc, #484	; (adr r3, 801d760 <__ieee754_acos+0x2b8>)
 801d57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d580:	4680      	mov	r8, r0
 801d582:	4689      	mov	r9, r1
 801d584:	4630      	mov	r0, r6
 801d586:	4639      	mov	r1, r7
 801d588:	f7e3 f84e 	bl	8000628 <__aeabi_dmul>
 801d58c:	a376      	add	r3, pc, #472	; (adr r3, 801d768 <__ieee754_acos+0x2c0>)
 801d58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d592:	f7e2 fe91 	bl	80002b8 <__aeabi_dsub>
 801d596:	4632      	mov	r2, r6
 801d598:	463b      	mov	r3, r7
 801d59a:	f7e3 f845 	bl	8000628 <__aeabi_dmul>
 801d59e:	a374      	add	r3, pc, #464	; (adr r3, 801d770 <__ieee754_acos+0x2c8>)
 801d5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d5a4:	f7e2 fe8a 	bl	80002bc <__adddf3>
 801d5a8:	4632      	mov	r2, r6
 801d5aa:	463b      	mov	r3, r7
 801d5ac:	f7e3 f83c 	bl	8000628 <__aeabi_dmul>
 801d5b0:	a371      	add	r3, pc, #452	; (adr r3, 801d778 <__ieee754_acos+0x2d0>)
 801d5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d5b6:	f7e2 fe7f 	bl	80002b8 <__aeabi_dsub>
 801d5ba:	4632      	mov	r2, r6
 801d5bc:	463b      	mov	r3, r7
 801d5be:	f7e3 f833 	bl	8000628 <__aeabi_dmul>
 801d5c2:	4b76      	ldr	r3, [pc, #472]	; (801d79c <__ieee754_acos+0x2f4>)
 801d5c4:	2200      	movs	r2, #0
 801d5c6:	f7e2 fe79 	bl	80002bc <__adddf3>
 801d5ca:	4602      	mov	r2, r0
 801d5cc:	460b      	mov	r3, r1
 801d5ce:	4640      	mov	r0, r8
 801d5d0:	4649      	mov	r1, r9
 801d5d2:	f7e3 f953 	bl	800087c <__aeabi_ddiv>
 801d5d6:	4622      	mov	r2, r4
 801d5d8:	462b      	mov	r3, r5
 801d5da:	f7e3 f825 	bl	8000628 <__aeabi_dmul>
 801d5de:	4602      	mov	r2, r0
 801d5e0:	460b      	mov	r3, r1
 801d5e2:	a167      	add	r1, pc, #412	; (adr r1, 801d780 <__ieee754_acos+0x2d8>)
 801d5e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d5e8:	f7e2 fe66 	bl	80002b8 <__aeabi_dsub>
 801d5ec:	4602      	mov	r2, r0
 801d5ee:	460b      	mov	r3, r1
 801d5f0:	4620      	mov	r0, r4
 801d5f2:	4629      	mov	r1, r5
 801d5f4:	f7e2 fe60 	bl	80002b8 <__aeabi_dsub>
 801d5f8:	4602      	mov	r2, r0
 801d5fa:	460b      	mov	r3, r1
 801d5fc:	a162      	add	r1, pc, #392	; (adr r1, 801d788 <__ieee754_acos+0x2e0>)
 801d5fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d602:	f7e2 fe59 	bl	80002b8 <__aeabi_dsub>
 801d606:	e771      	b.n	801d4ec <__ieee754_acos+0x44>
 801d608:	2d00      	cmp	r5, #0
 801d60a:	f280 80cb 	bge.w	801d7a4 <__ieee754_acos+0x2fc>
 801d60e:	ee10 0a10 	vmov	r0, s0
 801d612:	4b62      	ldr	r3, [pc, #392]	; (801d79c <__ieee754_acos+0x2f4>)
 801d614:	2200      	movs	r2, #0
 801d616:	4629      	mov	r1, r5
 801d618:	f7e2 fe50 	bl	80002bc <__adddf3>
 801d61c:	4b60      	ldr	r3, [pc, #384]	; (801d7a0 <__ieee754_acos+0x2f8>)
 801d61e:	2200      	movs	r2, #0
 801d620:	f7e3 f802 	bl	8000628 <__aeabi_dmul>
 801d624:	a342      	add	r3, pc, #264	; (adr r3, 801d730 <__ieee754_acos+0x288>)
 801d626:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d62a:	4604      	mov	r4, r0
 801d62c:	460d      	mov	r5, r1
 801d62e:	f7e2 fffb 	bl	8000628 <__aeabi_dmul>
 801d632:	a341      	add	r3, pc, #260	; (adr r3, 801d738 <__ieee754_acos+0x290>)
 801d634:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d638:	f7e2 fe40 	bl	80002bc <__adddf3>
 801d63c:	4622      	mov	r2, r4
 801d63e:	462b      	mov	r3, r5
 801d640:	f7e2 fff2 	bl	8000628 <__aeabi_dmul>
 801d644:	a33e      	add	r3, pc, #248	; (adr r3, 801d740 <__ieee754_acos+0x298>)
 801d646:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d64a:	f7e2 fe35 	bl	80002b8 <__aeabi_dsub>
 801d64e:	4622      	mov	r2, r4
 801d650:	462b      	mov	r3, r5
 801d652:	f7e2 ffe9 	bl	8000628 <__aeabi_dmul>
 801d656:	a33c      	add	r3, pc, #240	; (adr r3, 801d748 <__ieee754_acos+0x2a0>)
 801d658:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d65c:	f7e2 fe2e 	bl	80002bc <__adddf3>
 801d660:	4622      	mov	r2, r4
 801d662:	462b      	mov	r3, r5
 801d664:	f7e2 ffe0 	bl	8000628 <__aeabi_dmul>
 801d668:	a339      	add	r3, pc, #228	; (adr r3, 801d750 <__ieee754_acos+0x2a8>)
 801d66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d66e:	f7e2 fe23 	bl	80002b8 <__aeabi_dsub>
 801d672:	4622      	mov	r2, r4
 801d674:	462b      	mov	r3, r5
 801d676:	f7e2 ffd7 	bl	8000628 <__aeabi_dmul>
 801d67a:	a337      	add	r3, pc, #220	; (adr r3, 801d758 <__ieee754_acos+0x2b0>)
 801d67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d680:	f7e2 fe1c 	bl	80002bc <__adddf3>
 801d684:	4622      	mov	r2, r4
 801d686:	462b      	mov	r3, r5
 801d688:	f7e2 ffce 	bl	8000628 <__aeabi_dmul>
 801d68c:	ec45 4b10 	vmov	d0, r4, r5
 801d690:	4680      	mov	r8, r0
 801d692:	4689      	mov	r9, r1
 801d694:	f000 fd88 	bl	801e1a8 <__ieee754_sqrt>
 801d698:	a331      	add	r3, pc, #196	; (adr r3, 801d760 <__ieee754_acos+0x2b8>)
 801d69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d69e:	4620      	mov	r0, r4
 801d6a0:	4629      	mov	r1, r5
 801d6a2:	ec57 6b10 	vmov	r6, r7, d0
 801d6a6:	f7e2 ffbf 	bl	8000628 <__aeabi_dmul>
 801d6aa:	a32f      	add	r3, pc, #188	; (adr r3, 801d768 <__ieee754_acos+0x2c0>)
 801d6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6b0:	f7e2 fe02 	bl	80002b8 <__aeabi_dsub>
 801d6b4:	4622      	mov	r2, r4
 801d6b6:	462b      	mov	r3, r5
 801d6b8:	f7e2 ffb6 	bl	8000628 <__aeabi_dmul>
 801d6bc:	a32c      	add	r3, pc, #176	; (adr r3, 801d770 <__ieee754_acos+0x2c8>)
 801d6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6c2:	f7e2 fdfb 	bl	80002bc <__adddf3>
 801d6c6:	4622      	mov	r2, r4
 801d6c8:	462b      	mov	r3, r5
 801d6ca:	f7e2 ffad 	bl	8000628 <__aeabi_dmul>
 801d6ce:	a32a      	add	r3, pc, #168	; (adr r3, 801d778 <__ieee754_acos+0x2d0>)
 801d6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6d4:	f7e2 fdf0 	bl	80002b8 <__aeabi_dsub>
 801d6d8:	4622      	mov	r2, r4
 801d6da:	462b      	mov	r3, r5
 801d6dc:	f7e2 ffa4 	bl	8000628 <__aeabi_dmul>
 801d6e0:	4b2e      	ldr	r3, [pc, #184]	; (801d79c <__ieee754_acos+0x2f4>)
 801d6e2:	2200      	movs	r2, #0
 801d6e4:	f7e2 fdea 	bl	80002bc <__adddf3>
 801d6e8:	4602      	mov	r2, r0
 801d6ea:	460b      	mov	r3, r1
 801d6ec:	4640      	mov	r0, r8
 801d6ee:	4649      	mov	r1, r9
 801d6f0:	f7e3 f8c4 	bl	800087c <__aeabi_ddiv>
 801d6f4:	4632      	mov	r2, r6
 801d6f6:	463b      	mov	r3, r7
 801d6f8:	f7e2 ff96 	bl	8000628 <__aeabi_dmul>
 801d6fc:	a320      	add	r3, pc, #128	; (adr r3, 801d780 <__ieee754_acos+0x2d8>)
 801d6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d702:	f7e2 fdd9 	bl	80002b8 <__aeabi_dsub>
 801d706:	4632      	mov	r2, r6
 801d708:	463b      	mov	r3, r7
 801d70a:	f7e2 fdd7 	bl	80002bc <__adddf3>
 801d70e:	4602      	mov	r2, r0
 801d710:	460b      	mov	r3, r1
 801d712:	f7e2 fdd3 	bl	80002bc <__adddf3>
 801d716:	4602      	mov	r2, r0
 801d718:	460b      	mov	r3, r1
 801d71a:	a103      	add	r1, pc, #12	; (adr r1, 801d728 <__ieee754_acos+0x280>)
 801d71c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d720:	e76f      	b.n	801d602 <__ieee754_acos+0x15a>
 801d722:	bf00      	nop
 801d724:	f3af 8000 	nop.w
 801d728:	54442d18 	.word	0x54442d18
 801d72c:	400921fb 	.word	0x400921fb
 801d730:	0dfdf709 	.word	0x0dfdf709
 801d734:	3f023de1 	.word	0x3f023de1
 801d738:	7501b288 	.word	0x7501b288
 801d73c:	3f49efe0 	.word	0x3f49efe0
 801d740:	b5688f3b 	.word	0xb5688f3b
 801d744:	3fa48228 	.word	0x3fa48228
 801d748:	0e884455 	.word	0x0e884455
 801d74c:	3fc9c155 	.word	0x3fc9c155
 801d750:	03eb6f7d 	.word	0x03eb6f7d
 801d754:	3fd4d612 	.word	0x3fd4d612
 801d758:	55555555 	.word	0x55555555
 801d75c:	3fc55555 	.word	0x3fc55555
 801d760:	b12e9282 	.word	0xb12e9282
 801d764:	3fb3b8c5 	.word	0x3fb3b8c5
 801d768:	1b8d0159 	.word	0x1b8d0159
 801d76c:	3fe6066c 	.word	0x3fe6066c
 801d770:	9c598ac8 	.word	0x9c598ac8
 801d774:	40002ae5 	.word	0x40002ae5
 801d778:	1c8a2d4b 	.word	0x1c8a2d4b
 801d77c:	40033a27 	.word	0x40033a27
 801d780:	33145c07 	.word	0x33145c07
 801d784:	3c91a626 	.word	0x3c91a626
 801d788:	54442d18 	.word	0x54442d18
 801d78c:	3ff921fb 	.word	0x3ff921fb
 801d790:	3fefffff 	.word	0x3fefffff
 801d794:	3fdfffff 	.word	0x3fdfffff
 801d798:	3c600000 	.word	0x3c600000
 801d79c:	3ff00000 	.word	0x3ff00000
 801d7a0:	3fe00000 	.word	0x3fe00000
 801d7a4:	ee10 2a10 	vmov	r2, s0
 801d7a8:	462b      	mov	r3, r5
 801d7aa:	496d      	ldr	r1, [pc, #436]	; (801d960 <__ieee754_acos+0x4b8>)
 801d7ac:	2000      	movs	r0, #0
 801d7ae:	f7e2 fd83 	bl	80002b8 <__aeabi_dsub>
 801d7b2:	4b6c      	ldr	r3, [pc, #432]	; (801d964 <__ieee754_acos+0x4bc>)
 801d7b4:	2200      	movs	r2, #0
 801d7b6:	f7e2 ff37 	bl	8000628 <__aeabi_dmul>
 801d7ba:	4604      	mov	r4, r0
 801d7bc:	460d      	mov	r5, r1
 801d7be:	ec45 4b10 	vmov	d0, r4, r5
 801d7c2:	f000 fcf1 	bl	801e1a8 <__ieee754_sqrt>
 801d7c6:	a34e      	add	r3, pc, #312	; (adr r3, 801d900 <__ieee754_acos+0x458>)
 801d7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d7cc:	4620      	mov	r0, r4
 801d7ce:	4629      	mov	r1, r5
 801d7d0:	ec59 8b10 	vmov	r8, r9, d0
 801d7d4:	f7e2 ff28 	bl	8000628 <__aeabi_dmul>
 801d7d8:	a34b      	add	r3, pc, #300	; (adr r3, 801d908 <__ieee754_acos+0x460>)
 801d7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d7de:	f7e2 fd6d 	bl	80002bc <__adddf3>
 801d7e2:	4622      	mov	r2, r4
 801d7e4:	462b      	mov	r3, r5
 801d7e6:	f7e2 ff1f 	bl	8000628 <__aeabi_dmul>
 801d7ea:	a349      	add	r3, pc, #292	; (adr r3, 801d910 <__ieee754_acos+0x468>)
 801d7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d7f0:	f7e2 fd62 	bl	80002b8 <__aeabi_dsub>
 801d7f4:	4622      	mov	r2, r4
 801d7f6:	462b      	mov	r3, r5
 801d7f8:	f7e2 ff16 	bl	8000628 <__aeabi_dmul>
 801d7fc:	a346      	add	r3, pc, #280	; (adr r3, 801d918 <__ieee754_acos+0x470>)
 801d7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d802:	f7e2 fd5b 	bl	80002bc <__adddf3>
 801d806:	4622      	mov	r2, r4
 801d808:	462b      	mov	r3, r5
 801d80a:	f7e2 ff0d 	bl	8000628 <__aeabi_dmul>
 801d80e:	a344      	add	r3, pc, #272	; (adr r3, 801d920 <__ieee754_acos+0x478>)
 801d810:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d814:	f7e2 fd50 	bl	80002b8 <__aeabi_dsub>
 801d818:	4622      	mov	r2, r4
 801d81a:	462b      	mov	r3, r5
 801d81c:	f7e2 ff04 	bl	8000628 <__aeabi_dmul>
 801d820:	a341      	add	r3, pc, #260	; (adr r3, 801d928 <__ieee754_acos+0x480>)
 801d822:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d826:	f7e2 fd49 	bl	80002bc <__adddf3>
 801d82a:	4622      	mov	r2, r4
 801d82c:	462b      	mov	r3, r5
 801d82e:	f7e2 fefb 	bl	8000628 <__aeabi_dmul>
 801d832:	a33f      	add	r3, pc, #252	; (adr r3, 801d930 <__ieee754_acos+0x488>)
 801d834:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d838:	4682      	mov	sl, r0
 801d83a:	468b      	mov	fp, r1
 801d83c:	4620      	mov	r0, r4
 801d83e:	4629      	mov	r1, r5
 801d840:	f7e2 fef2 	bl	8000628 <__aeabi_dmul>
 801d844:	a33c      	add	r3, pc, #240	; (adr r3, 801d938 <__ieee754_acos+0x490>)
 801d846:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d84a:	f7e2 fd35 	bl	80002b8 <__aeabi_dsub>
 801d84e:	4622      	mov	r2, r4
 801d850:	462b      	mov	r3, r5
 801d852:	f7e2 fee9 	bl	8000628 <__aeabi_dmul>
 801d856:	a33a      	add	r3, pc, #232	; (adr r3, 801d940 <__ieee754_acos+0x498>)
 801d858:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d85c:	f7e2 fd2e 	bl	80002bc <__adddf3>
 801d860:	4622      	mov	r2, r4
 801d862:	462b      	mov	r3, r5
 801d864:	f7e2 fee0 	bl	8000628 <__aeabi_dmul>
 801d868:	a337      	add	r3, pc, #220	; (adr r3, 801d948 <__ieee754_acos+0x4a0>)
 801d86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d86e:	f7e2 fd23 	bl	80002b8 <__aeabi_dsub>
 801d872:	4622      	mov	r2, r4
 801d874:	462b      	mov	r3, r5
 801d876:	f7e2 fed7 	bl	8000628 <__aeabi_dmul>
 801d87a:	4b39      	ldr	r3, [pc, #228]	; (801d960 <__ieee754_acos+0x4b8>)
 801d87c:	2200      	movs	r2, #0
 801d87e:	f7e2 fd1d 	bl	80002bc <__adddf3>
 801d882:	4602      	mov	r2, r0
 801d884:	460b      	mov	r3, r1
 801d886:	4650      	mov	r0, sl
 801d888:	4659      	mov	r1, fp
 801d88a:	f7e2 fff7 	bl	800087c <__aeabi_ddiv>
 801d88e:	4642      	mov	r2, r8
 801d890:	464b      	mov	r3, r9
 801d892:	f7e2 fec9 	bl	8000628 <__aeabi_dmul>
 801d896:	2600      	movs	r6, #0
 801d898:	4682      	mov	sl, r0
 801d89a:	468b      	mov	fp, r1
 801d89c:	4632      	mov	r2, r6
 801d89e:	464b      	mov	r3, r9
 801d8a0:	4630      	mov	r0, r6
 801d8a2:	4649      	mov	r1, r9
 801d8a4:	f7e2 fec0 	bl	8000628 <__aeabi_dmul>
 801d8a8:	4602      	mov	r2, r0
 801d8aa:	460b      	mov	r3, r1
 801d8ac:	4620      	mov	r0, r4
 801d8ae:	4629      	mov	r1, r5
 801d8b0:	f7e2 fd02 	bl	80002b8 <__aeabi_dsub>
 801d8b4:	4632      	mov	r2, r6
 801d8b6:	4604      	mov	r4, r0
 801d8b8:	460d      	mov	r5, r1
 801d8ba:	464b      	mov	r3, r9
 801d8bc:	4640      	mov	r0, r8
 801d8be:	4649      	mov	r1, r9
 801d8c0:	f7e2 fcfc 	bl	80002bc <__adddf3>
 801d8c4:	4602      	mov	r2, r0
 801d8c6:	460b      	mov	r3, r1
 801d8c8:	4620      	mov	r0, r4
 801d8ca:	4629      	mov	r1, r5
 801d8cc:	f7e2 ffd6 	bl	800087c <__aeabi_ddiv>
 801d8d0:	4602      	mov	r2, r0
 801d8d2:	460b      	mov	r3, r1
 801d8d4:	4650      	mov	r0, sl
 801d8d6:	4659      	mov	r1, fp
 801d8d8:	f7e2 fcf0 	bl	80002bc <__adddf3>
 801d8dc:	4632      	mov	r2, r6
 801d8de:	464b      	mov	r3, r9
 801d8e0:	f7e2 fcec 	bl	80002bc <__adddf3>
 801d8e4:	4602      	mov	r2, r0
 801d8e6:	460b      	mov	r3, r1
 801d8e8:	f7e2 fce8 	bl	80002bc <__adddf3>
 801d8ec:	e5fe      	b.n	801d4ec <__ieee754_acos+0x44>
 801d8ee:	ed9f 0b18 	vldr	d0, [pc, #96]	; 801d950 <__ieee754_acos+0x4a8>
 801d8f2:	e5ed      	b.n	801d4d0 <__ieee754_acos+0x28>
 801d8f4:	ed9f 0b18 	vldr	d0, [pc, #96]	; 801d958 <__ieee754_acos+0x4b0>
 801d8f8:	e5ea      	b.n	801d4d0 <__ieee754_acos+0x28>
 801d8fa:	bf00      	nop
 801d8fc:	f3af 8000 	nop.w
 801d900:	0dfdf709 	.word	0x0dfdf709
 801d904:	3f023de1 	.word	0x3f023de1
 801d908:	7501b288 	.word	0x7501b288
 801d90c:	3f49efe0 	.word	0x3f49efe0
 801d910:	b5688f3b 	.word	0xb5688f3b
 801d914:	3fa48228 	.word	0x3fa48228
 801d918:	0e884455 	.word	0x0e884455
 801d91c:	3fc9c155 	.word	0x3fc9c155
 801d920:	03eb6f7d 	.word	0x03eb6f7d
 801d924:	3fd4d612 	.word	0x3fd4d612
 801d928:	55555555 	.word	0x55555555
 801d92c:	3fc55555 	.word	0x3fc55555
 801d930:	b12e9282 	.word	0xb12e9282
 801d934:	3fb3b8c5 	.word	0x3fb3b8c5
 801d938:	1b8d0159 	.word	0x1b8d0159
 801d93c:	3fe6066c 	.word	0x3fe6066c
 801d940:	9c598ac8 	.word	0x9c598ac8
 801d944:	40002ae5 	.word	0x40002ae5
 801d948:	1c8a2d4b 	.word	0x1c8a2d4b
 801d94c:	40033a27 	.word	0x40033a27
	...
 801d958:	54442d18 	.word	0x54442d18
 801d95c:	3ff921fb 	.word	0x3ff921fb
 801d960:	3ff00000 	.word	0x3ff00000
 801d964:	3fe00000 	.word	0x3fe00000

0801d968 <__ieee754_asin>:
 801d968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d96c:	ed2d 8b04 	vpush	{d8-d9}
 801d970:	ec55 4b10 	vmov	r4, r5, d0
 801d974:	4bcc      	ldr	r3, [pc, #816]	; (801dca8 <__ieee754_asin+0x340>)
 801d976:	b083      	sub	sp, #12
 801d978:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801d97c:	4598      	cmp	r8, r3
 801d97e:	9501      	str	r5, [sp, #4]
 801d980:	dd35      	ble.n	801d9ee <__ieee754_asin+0x86>
 801d982:	ee10 3a10 	vmov	r3, s0
 801d986:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 801d98a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 801d98e:	ea58 0303 	orrs.w	r3, r8, r3
 801d992:	d117      	bne.n	801d9c4 <__ieee754_asin+0x5c>
 801d994:	a3aa      	add	r3, pc, #680	; (adr r3, 801dc40 <__ieee754_asin+0x2d8>)
 801d996:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d99a:	ee10 0a10 	vmov	r0, s0
 801d99e:	4629      	mov	r1, r5
 801d9a0:	f7e2 fe42 	bl	8000628 <__aeabi_dmul>
 801d9a4:	a3a8      	add	r3, pc, #672	; (adr r3, 801dc48 <__ieee754_asin+0x2e0>)
 801d9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d9aa:	4606      	mov	r6, r0
 801d9ac:	460f      	mov	r7, r1
 801d9ae:	4620      	mov	r0, r4
 801d9b0:	4629      	mov	r1, r5
 801d9b2:	f7e2 fe39 	bl	8000628 <__aeabi_dmul>
 801d9b6:	4602      	mov	r2, r0
 801d9b8:	460b      	mov	r3, r1
 801d9ba:	4630      	mov	r0, r6
 801d9bc:	4639      	mov	r1, r7
 801d9be:	f7e2 fc7d 	bl	80002bc <__adddf3>
 801d9c2:	e00b      	b.n	801d9dc <__ieee754_asin+0x74>
 801d9c4:	ee10 2a10 	vmov	r2, s0
 801d9c8:	462b      	mov	r3, r5
 801d9ca:	ee10 0a10 	vmov	r0, s0
 801d9ce:	4629      	mov	r1, r5
 801d9d0:	f7e2 fc72 	bl	80002b8 <__aeabi_dsub>
 801d9d4:	4602      	mov	r2, r0
 801d9d6:	460b      	mov	r3, r1
 801d9d8:	f7e2 ff50 	bl	800087c <__aeabi_ddiv>
 801d9dc:	4604      	mov	r4, r0
 801d9de:	460d      	mov	r5, r1
 801d9e0:	ec45 4b10 	vmov	d0, r4, r5
 801d9e4:	b003      	add	sp, #12
 801d9e6:	ecbd 8b04 	vpop	{d8-d9}
 801d9ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d9ee:	4baf      	ldr	r3, [pc, #700]	; (801dcac <__ieee754_asin+0x344>)
 801d9f0:	4598      	cmp	r8, r3
 801d9f2:	dc11      	bgt.n	801da18 <__ieee754_asin+0xb0>
 801d9f4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 801d9f8:	f280 80ae 	bge.w	801db58 <__ieee754_asin+0x1f0>
 801d9fc:	a394      	add	r3, pc, #592	; (adr r3, 801dc50 <__ieee754_asin+0x2e8>)
 801d9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da02:	ee10 0a10 	vmov	r0, s0
 801da06:	4629      	mov	r1, r5
 801da08:	f7e2 fc58 	bl	80002bc <__adddf3>
 801da0c:	4ba8      	ldr	r3, [pc, #672]	; (801dcb0 <__ieee754_asin+0x348>)
 801da0e:	2200      	movs	r2, #0
 801da10:	f7e3 f89a 	bl	8000b48 <__aeabi_dcmpgt>
 801da14:	2800      	cmp	r0, #0
 801da16:	d1e3      	bne.n	801d9e0 <__ieee754_asin+0x78>
 801da18:	ec45 4b10 	vmov	d0, r4, r5
 801da1c:	f001 f94e 	bl	801ecbc <fabs>
 801da20:	49a3      	ldr	r1, [pc, #652]	; (801dcb0 <__ieee754_asin+0x348>)
 801da22:	ec53 2b10 	vmov	r2, r3, d0
 801da26:	2000      	movs	r0, #0
 801da28:	f7e2 fc46 	bl	80002b8 <__aeabi_dsub>
 801da2c:	4ba1      	ldr	r3, [pc, #644]	; (801dcb4 <__ieee754_asin+0x34c>)
 801da2e:	2200      	movs	r2, #0
 801da30:	f7e2 fdfa 	bl	8000628 <__aeabi_dmul>
 801da34:	a388      	add	r3, pc, #544	; (adr r3, 801dc58 <__ieee754_asin+0x2f0>)
 801da36:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da3a:	4604      	mov	r4, r0
 801da3c:	460d      	mov	r5, r1
 801da3e:	f7e2 fdf3 	bl	8000628 <__aeabi_dmul>
 801da42:	a387      	add	r3, pc, #540	; (adr r3, 801dc60 <__ieee754_asin+0x2f8>)
 801da44:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da48:	f7e2 fc38 	bl	80002bc <__adddf3>
 801da4c:	4622      	mov	r2, r4
 801da4e:	462b      	mov	r3, r5
 801da50:	f7e2 fdea 	bl	8000628 <__aeabi_dmul>
 801da54:	a384      	add	r3, pc, #528	; (adr r3, 801dc68 <__ieee754_asin+0x300>)
 801da56:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da5a:	f7e2 fc2d 	bl	80002b8 <__aeabi_dsub>
 801da5e:	4622      	mov	r2, r4
 801da60:	462b      	mov	r3, r5
 801da62:	f7e2 fde1 	bl	8000628 <__aeabi_dmul>
 801da66:	a382      	add	r3, pc, #520	; (adr r3, 801dc70 <__ieee754_asin+0x308>)
 801da68:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da6c:	f7e2 fc26 	bl	80002bc <__adddf3>
 801da70:	4622      	mov	r2, r4
 801da72:	462b      	mov	r3, r5
 801da74:	f7e2 fdd8 	bl	8000628 <__aeabi_dmul>
 801da78:	a37f      	add	r3, pc, #508	; (adr r3, 801dc78 <__ieee754_asin+0x310>)
 801da7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da7e:	f7e2 fc1b 	bl	80002b8 <__aeabi_dsub>
 801da82:	4622      	mov	r2, r4
 801da84:	462b      	mov	r3, r5
 801da86:	f7e2 fdcf 	bl	8000628 <__aeabi_dmul>
 801da8a:	a37d      	add	r3, pc, #500	; (adr r3, 801dc80 <__ieee754_asin+0x318>)
 801da8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da90:	f7e2 fc14 	bl	80002bc <__adddf3>
 801da94:	4622      	mov	r2, r4
 801da96:	462b      	mov	r3, r5
 801da98:	f7e2 fdc6 	bl	8000628 <__aeabi_dmul>
 801da9c:	a37a      	add	r3, pc, #488	; (adr r3, 801dc88 <__ieee754_asin+0x320>)
 801da9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801daa2:	ec41 0b18 	vmov	d8, r0, r1
 801daa6:	4620      	mov	r0, r4
 801daa8:	4629      	mov	r1, r5
 801daaa:	f7e2 fdbd 	bl	8000628 <__aeabi_dmul>
 801daae:	a378      	add	r3, pc, #480	; (adr r3, 801dc90 <__ieee754_asin+0x328>)
 801dab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dab4:	f7e2 fc00 	bl	80002b8 <__aeabi_dsub>
 801dab8:	4622      	mov	r2, r4
 801daba:	462b      	mov	r3, r5
 801dabc:	f7e2 fdb4 	bl	8000628 <__aeabi_dmul>
 801dac0:	a375      	add	r3, pc, #468	; (adr r3, 801dc98 <__ieee754_asin+0x330>)
 801dac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dac6:	f7e2 fbf9 	bl	80002bc <__adddf3>
 801daca:	4622      	mov	r2, r4
 801dacc:	462b      	mov	r3, r5
 801dace:	f7e2 fdab 	bl	8000628 <__aeabi_dmul>
 801dad2:	a373      	add	r3, pc, #460	; (adr r3, 801dca0 <__ieee754_asin+0x338>)
 801dad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dad8:	f7e2 fbee 	bl	80002b8 <__aeabi_dsub>
 801dadc:	4622      	mov	r2, r4
 801dade:	462b      	mov	r3, r5
 801dae0:	f7e2 fda2 	bl	8000628 <__aeabi_dmul>
 801dae4:	4b72      	ldr	r3, [pc, #456]	; (801dcb0 <__ieee754_asin+0x348>)
 801dae6:	2200      	movs	r2, #0
 801dae8:	f7e2 fbe8 	bl	80002bc <__adddf3>
 801daec:	ec45 4b10 	vmov	d0, r4, r5
 801daf0:	4606      	mov	r6, r0
 801daf2:	460f      	mov	r7, r1
 801daf4:	f000 fb58 	bl	801e1a8 <__ieee754_sqrt>
 801daf8:	4b6f      	ldr	r3, [pc, #444]	; (801dcb8 <__ieee754_asin+0x350>)
 801dafa:	4598      	cmp	r8, r3
 801dafc:	ec5b ab10 	vmov	sl, fp, d0
 801db00:	f340 80dc 	ble.w	801dcbc <__ieee754_asin+0x354>
 801db04:	4632      	mov	r2, r6
 801db06:	463b      	mov	r3, r7
 801db08:	ec51 0b18 	vmov	r0, r1, d8
 801db0c:	f7e2 feb6 	bl	800087c <__aeabi_ddiv>
 801db10:	4652      	mov	r2, sl
 801db12:	465b      	mov	r3, fp
 801db14:	f7e2 fd88 	bl	8000628 <__aeabi_dmul>
 801db18:	4652      	mov	r2, sl
 801db1a:	465b      	mov	r3, fp
 801db1c:	f7e2 fbce 	bl	80002bc <__adddf3>
 801db20:	4602      	mov	r2, r0
 801db22:	460b      	mov	r3, r1
 801db24:	f7e2 fbca 	bl	80002bc <__adddf3>
 801db28:	a347      	add	r3, pc, #284	; (adr r3, 801dc48 <__ieee754_asin+0x2e0>)
 801db2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db2e:	f7e2 fbc3 	bl	80002b8 <__aeabi_dsub>
 801db32:	4602      	mov	r2, r0
 801db34:	460b      	mov	r3, r1
 801db36:	a142      	add	r1, pc, #264	; (adr r1, 801dc40 <__ieee754_asin+0x2d8>)
 801db38:	e9d1 0100 	ldrd	r0, r1, [r1]
 801db3c:	f7e2 fbbc 	bl	80002b8 <__aeabi_dsub>
 801db40:	9b01      	ldr	r3, [sp, #4]
 801db42:	2b00      	cmp	r3, #0
 801db44:	bfdc      	itt	le
 801db46:	4602      	movle	r2, r0
 801db48:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 801db4c:	4604      	mov	r4, r0
 801db4e:	460d      	mov	r5, r1
 801db50:	bfdc      	itt	le
 801db52:	4614      	movle	r4, r2
 801db54:	461d      	movle	r5, r3
 801db56:	e743      	b.n	801d9e0 <__ieee754_asin+0x78>
 801db58:	ee10 2a10 	vmov	r2, s0
 801db5c:	ee10 0a10 	vmov	r0, s0
 801db60:	462b      	mov	r3, r5
 801db62:	4629      	mov	r1, r5
 801db64:	f7e2 fd60 	bl	8000628 <__aeabi_dmul>
 801db68:	a33b      	add	r3, pc, #236	; (adr r3, 801dc58 <__ieee754_asin+0x2f0>)
 801db6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db6e:	4606      	mov	r6, r0
 801db70:	460f      	mov	r7, r1
 801db72:	f7e2 fd59 	bl	8000628 <__aeabi_dmul>
 801db76:	a33a      	add	r3, pc, #232	; (adr r3, 801dc60 <__ieee754_asin+0x2f8>)
 801db78:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db7c:	f7e2 fb9e 	bl	80002bc <__adddf3>
 801db80:	4632      	mov	r2, r6
 801db82:	463b      	mov	r3, r7
 801db84:	f7e2 fd50 	bl	8000628 <__aeabi_dmul>
 801db88:	a337      	add	r3, pc, #220	; (adr r3, 801dc68 <__ieee754_asin+0x300>)
 801db8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db8e:	f7e2 fb93 	bl	80002b8 <__aeabi_dsub>
 801db92:	4632      	mov	r2, r6
 801db94:	463b      	mov	r3, r7
 801db96:	f7e2 fd47 	bl	8000628 <__aeabi_dmul>
 801db9a:	a335      	add	r3, pc, #212	; (adr r3, 801dc70 <__ieee754_asin+0x308>)
 801db9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dba0:	f7e2 fb8c 	bl	80002bc <__adddf3>
 801dba4:	4632      	mov	r2, r6
 801dba6:	463b      	mov	r3, r7
 801dba8:	f7e2 fd3e 	bl	8000628 <__aeabi_dmul>
 801dbac:	a332      	add	r3, pc, #200	; (adr r3, 801dc78 <__ieee754_asin+0x310>)
 801dbae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dbb2:	f7e2 fb81 	bl	80002b8 <__aeabi_dsub>
 801dbb6:	4632      	mov	r2, r6
 801dbb8:	463b      	mov	r3, r7
 801dbba:	f7e2 fd35 	bl	8000628 <__aeabi_dmul>
 801dbbe:	a330      	add	r3, pc, #192	; (adr r3, 801dc80 <__ieee754_asin+0x318>)
 801dbc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dbc4:	f7e2 fb7a 	bl	80002bc <__adddf3>
 801dbc8:	4632      	mov	r2, r6
 801dbca:	463b      	mov	r3, r7
 801dbcc:	f7e2 fd2c 	bl	8000628 <__aeabi_dmul>
 801dbd0:	a32d      	add	r3, pc, #180	; (adr r3, 801dc88 <__ieee754_asin+0x320>)
 801dbd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dbd6:	4680      	mov	r8, r0
 801dbd8:	4689      	mov	r9, r1
 801dbda:	4630      	mov	r0, r6
 801dbdc:	4639      	mov	r1, r7
 801dbde:	f7e2 fd23 	bl	8000628 <__aeabi_dmul>
 801dbe2:	a32b      	add	r3, pc, #172	; (adr r3, 801dc90 <__ieee754_asin+0x328>)
 801dbe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dbe8:	f7e2 fb66 	bl	80002b8 <__aeabi_dsub>
 801dbec:	4632      	mov	r2, r6
 801dbee:	463b      	mov	r3, r7
 801dbf0:	f7e2 fd1a 	bl	8000628 <__aeabi_dmul>
 801dbf4:	a328      	add	r3, pc, #160	; (adr r3, 801dc98 <__ieee754_asin+0x330>)
 801dbf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dbfa:	f7e2 fb5f 	bl	80002bc <__adddf3>
 801dbfe:	4632      	mov	r2, r6
 801dc00:	463b      	mov	r3, r7
 801dc02:	f7e2 fd11 	bl	8000628 <__aeabi_dmul>
 801dc06:	a326      	add	r3, pc, #152	; (adr r3, 801dca0 <__ieee754_asin+0x338>)
 801dc08:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc0c:	f7e2 fb54 	bl	80002b8 <__aeabi_dsub>
 801dc10:	4632      	mov	r2, r6
 801dc12:	463b      	mov	r3, r7
 801dc14:	f7e2 fd08 	bl	8000628 <__aeabi_dmul>
 801dc18:	4b25      	ldr	r3, [pc, #148]	; (801dcb0 <__ieee754_asin+0x348>)
 801dc1a:	2200      	movs	r2, #0
 801dc1c:	f7e2 fb4e 	bl	80002bc <__adddf3>
 801dc20:	4602      	mov	r2, r0
 801dc22:	460b      	mov	r3, r1
 801dc24:	4640      	mov	r0, r8
 801dc26:	4649      	mov	r1, r9
 801dc28:	f7e2 fe28 	bl	800087c <__aeabi_ddiv>
 801dc2c:	4622      	mov	r2, r4
 801dc2e:	462b      	mov	r3, r5
 801dc30:	f7e2 fcfa 	bl	8000628 <__aeabi_dmul>
 801dc34:	4602      	mov	r2, r0
 801dc36:	460b      	mov	r3, r1
 801dc38:	4620      	mov	r0, r4
 801dc3a:	4629      	mov	r1, r5
 801dc3c:	e6bf      	b.n	801d9be <__ieee754_asin+0x56>
 801dc3e:	bf00      	nop
 801dc40:	54442d18 	.word	0x54442d18
 801dc44:	3ff921fb 	.word	0x3ff921fb
 801dc48:	33145c07 	.word	0x33145c07
 801dc4c:	3c91a626 	.word	0x3c91a626
 801dc50:	8800759c 	.word	0x8800759c
 801dc54:	7e37e43c 	.word	0x7e37e43c
 801dc58:	0dfdf709 	.word	0x0dfdf709
 801dc5c:	3f023de1 	.word	0x3f023de1
 801dc60:	7501b288 	.word	0x7501b288
 801dc64:	3f49efe0 	.word	0x3f49efe0
 801dc68:	b5688f3b 	.word	0xb5688f3b
 801dc6c:	3fa48228 	.word	0x3fa48228
 801dc70:	0e884455 	.word	0x0e884455
 801dc74:	3fc9c155 	.word	0x3fc9c155
 801dc78:	03eb6f7d 	.word	0x03eb6f7d
 801dc7c:	3fd4d612 	.word	0x3fd4d612
 801dc80:	55555555 	.word	0x55555555
 801dc84:	3fc55555 	.word	0x3fc55555
 801dc88:	b12e9282 	.word	0xb12e9282
 801dc8c:	3fb3b8c5 	.word	0x3fb3b8c5
 801dc90:	1b8d0159 	.word	0x1b8d0159
 801dc94:	3fe6066c 	.word	0x3fe6066c
 801dc98:	9c598ac8 	.word	0x9c598ac8
 801dc9c:	40002ae5 	.word	0x40002ae5
 801dca0:	1c8a2d4b 	.word	0x1c8a2d4b
 801dca4:	40033a27 	.word	0x40033a27
 801dca8:	3fefffff 	.word	0x3fefffff
 801dcac:	3fdfffff 	.word	0x3fdfffff
 801dcb0:	3ff00000 	.word	0x3ff00000
 801dcb4:	3fe00000 	.word	0x3fe00000
 801dcb8:	3fef3332 	.word	0x3fef3332
 801dcbc:	ee10 2a10 	vmov	r2, s0
 801dcc0:	ee10 0a10 	vmov	r0, s0
 801dcc4:	465b      	mov	r3, fp
 801dcc6:	4659      	mov	r1, fp
 801dcc8:	f7e2 faf8 	bl	80002bc <__adddf3>
 801dccc:	4632      	mov	r2, r6
 801dcce:	463b      	mov	r3, r7
 801dcd0:	ec41 0b19 	vmov	d9, r0, r1
 801dcd4:	ec51 0b18 	vmov	r0, r1, d8
 801dcd8:	f7e2 fdd0 	bl	800087c <__aeabi_ddiv>
 801dcdc:	4602      	mov	r2, r0
 801dcde:	460b      	mov	r3, r1
 801dce0:	ec51 0b19 	vmov	r0, r1, d9
 801dce4:	f7e2 fca0 	bl	8000628 <__aeabi_dmul>
 801dce8:	f04f 0800 	mov.w	r8, #0
 801dcec:	4606      	mov	r6, r0
 801dcee:	460f      	mov	r7, r1
 801dcf0:	4642      	mov	r2, r8
 801dcf2:	465b      	mov	r3, fp
 801dcf4:	4640      	mov	r0, r8
 801dcf6:	4659      	mov	r1, fp
 801dcf8:	f7e2 fc96 	bl	8000628 <__aeabi_dmul>
 801dcfc:	4602      	mov	r2, r0
 801dcfe:	460b      	mov	r3, r1
 801dd00:	4620      	mov	r0, r4
 801dd02:	4629      	mov	r1, r5
 801dd04:	f7e2 fad8 	bl	80002b8 <__aeabi_dsub>
 801dd08:	4642      	mov	r2, r8
 801dd0a:	4604      	mov	r4, r0
 801dd0c:	460d      	mov	r5, r1
 801dd0e:	465b      	mov	r3, fp
 801dd10:	4650      	mov	r0, sl
 801dd12:	4659      	mov	r1, fp
 801dd14:	f7e2 fad2 	bl	80002bc <__adddf3>
 801dd18:	4602      	mov	r2, r0
 801dd1a:	460b      	mov	r3, r1
 801dd1c:	4620      	mov	r0, r4
 801dd1e:	4629      	mov	r1, r5
 801dd20:	f7e2 fdac 	bl	800087c <__aeabi_ddiv>
 801dd24:	4602      	mov	r2, r0
 801dd26:	460b      	mov	r3, r1
 801dd28:	f7e2 fac8 	bl	80002bc <__adddf3>
 801dd2c:	4602      	mov	r2, r0
 801dd2e:	460b      	mov	r3, r1
 801dd30:	a113      	add	r1, pc, #76	; (adr r1, 801dd80 <__ieee754_asin+0x418>)
 801dd32:	e9d1 0100 	ldrd	r0, r1, [r1]
 801dd36:	f7e2 fabf 	bl	80002b8 <__aeabi_dsub>
 801dd3a:	4602      	mov	r2, r0
 801dd3c:	460b      	mov	r3, r1
 801dd3e:	4630      	mov	r0, r6
 801dd40:	4639      	mov	r1, r7
 801dd42:	f7e2 fab9 	bl	80002b8 <__aeabi_dsub>
 801dd46:	4642      	mov	r2, r8
 801dd48:	4604      	mov	r4, r0
 801dd4a:	460d      	mov	r5, r1
 801dd4c:	465b      	mov	r3, fp
 801dd4e:	4640      	mov	r0, r8
 801dd50:	4659      	mov	r1, fp
 801dd52:	f7e2 fab3 	bl	80002bc <__adddf3>
 801dd56:	4602      	mov	r2, r0
 801dd58:	460b      	mov	r3, r1
 801dd5a:	a10b      	add	r1, pc, #44	; (adr r1, 801dd88 <__ieee754_asin+0x420>)
 801dd5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801dd60:	f7e2 faaa 	bl	80002b8 <__aeabi_dsub>
 801dd64:	4602      	mov	r2, r0
 801dd66:	460b      	mov	r3, r1
 801dd68:	4620      	mov	r0, r4
 801dd6a:	4629      	mov	r1, r5
 801dd6c:	f7e2 faa4 	bl	80002b8 <__aeabi_dsub>
 801dd70:	4602      	mov	r2, r0
 801dd72:	460b      	mov	r3, r1
 801dd74:	a104      	add	r1, pc, #16	; (adr r1, 801dd88 <__ieee754_asin+0x420>)
 801dd76:	e9d1 0100 	ldrd	r0, r1, [r1]
 801dd7a:	e6df      	b.n	801db3c <__ieee754_asin+0x1d4>
 801dd7c:	f3af 8000 	nop.w
 801dd80:	33145c07 	.word	0x33145c07
 801dd84:	3c91a626 	.word	0x3c91a626
 801dd88:	54442d18 	.word	0x54442d18
 801dd8c:	3fe921fb 	.word	0x3fe921fb

0801dd90 <__ieee754_rem_pio2>:
 801dd90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd94:	ed2d 8b02 	vpush	{d8}
 801dd98:	ec55 4b10 	vmov	r4, r5, d0
 801dd9c:	4bca      	ldr	r3, [pc, #808]	; (801e0c8 <__ieee754_rem_pio2+0x338>)
 801dd9e:	b08b      	sub	sp, #44	; 0x2c
 801dda0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801dda4:	4598      	cmp	r8, r3
 801dda6:	4682      	mov	sl, r0
 801dda8:	9502      	str	r5, [sp, #8]
 801ddaa:	dc08      	bgt.n	801ddbe <__ieee754_rem_pio2+0x2e>
 801ddac:	2200      	movs	r2, #0
 801ddae:	2300      	movs	r3, #0
 801ddb0:	ed80 0b00 	vstr	d0, [r0]
 801ddb4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801ddb8:	f04f 0b00 	mov.w	fp, #0
 801ddbc:	e028      	b.n	801de10 <__ieee754_rem_pio2+0x80>
 801ddbe:	4bc3      	ldr	r3, [pc, #780]	; (801e0cc <__ieee754_rem_pio2+0x33c>)
 801ddc0:	4598      	cmp	r8, r3
 801ddc2:	dc78      	bgt.n	801deb6 <__ieee754_rem_pio2+0x126>
 801ddc4:	9b02      	ldr	r3, [sp, #8]
 801ddc6:	4ec2      	ldr	r6, [pc, #776]	; (801e0d0 <__ieee754_rem_pio2+0x340>)
 801ddc8:	2b00      	cmp	r3, #0
 801ddca:	ee10 0a10 	vmov	r0, s0
 801ddce:	a3b0      	add	r3, pc, #704	; (adr r3, 801e090 <__ieee754_rem_pio2+0x300>)
 801ddd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ddd4:	4629      	mov	r1, r5
 801ddd6:	dd39      	ble.n	801de4c <__ieee754_rem_pio2+0xbc>
 801ddd8:	f7e2 fa6e 	bl	80002b8 <__aeabi_dsub>
 801dddc:	45b0      	cmp	r8, r6
 801ddde:	4604      	mov	r4, r0
 801dde0:	460d      	mov	r5, r1
 801dde2:	d01b      	beq.n	801de1c <__ieee754_rem_pio2+0x8c>
 801dde4:	a3ac      	add	r3, pc, #688	; (adr r3, 801e098 <__ieee754_rem_pio2+0x308>)
 801dde6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ddea:	f7e2 fa65 	bl	80002b8 <__aeabi_dsub>
 801ddee:	4602      	mov	r2, r0
 801ddf0:	460b      	mov	r3, r1
 801ddf2:	e9ca 2300 	strd	r2, r3, [sl]
 801ddf6:	4620      	mov	r0, r4
 801ddf8:	4629      	mov	r1, r5
 801ddfa:	f7e2 fa5d 	bl	80002b8 <__aeabi_dsub>
 801ddfe:	a3a6      	add	r3, pc, #664	; (adr r3, 801e098 <__ieee754_rem_pio2+0x308>)
 801de00:	e9d3 2300 	ldrd	r2, r3, [r3]
 801de04:	f7e2 fa58 	bl	80002b8 <__aeabi_dsub>
 801de08:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801de0c:	f04f 0b01 	mov.w	fp, #1
 801de10:	4658      	mov	r0, fp
 801de12:	b00b      	add	sp, #44	; 0x2c
 801de14:	ecbd 8b02 	vpop	{d8}
 801de18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de1c:	a3a0      	add	r3, pc, #640	; (adr r3, 801e0a0 <__ieee754_rem_pio2+0x310>)
 801de1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801de22:	f7e2 fa49 	bl	80002b8 <__aeabi_dsub>
 801de26:	a3a0      	add	r3, pc, #640	; (adr r3, 801e0a8 <__ieee754_rem_pio2+0x318>)
 801de28:	e9d3 2300 	ldrd	r2, r3, [r3]
 801de2c:	4604      	mov	r4, r0
 801de2e:	460d      	mov	r5, r1
 801de30:	f7e2 fa42 	bl	80002b8 <__aeabi_dsub>
 801de34:	4602      	mov	r2, r0
 801de36:	460b      	mov	r3, r1
 801de38:	e9ca 2300 	strd	r2, r3, [sl]
 801de3c:	4620      	mov	r0, r4
 801de3e:	4629      	mov	r1, r5
 801de40:	f7e2 fa3a 	bl	80002b8 <__aeabi_dsub>
 801de44:	a398      	add	r3, pc, #608	; (adr r3, 801e0a8 <__ieee754_rem_pio2+0x318>)
 801de46:	e9d3 2300 	ldrd	r2, r3, [r3]
 801de4a:	e7db      	b.n	801de04 <__ieee754_rem_pio2+0x74>
 801de4c:	f7e2 fa36 	bl	80002bc <__adddf3>
 801de50:	45b0      	cmp	r8, r6
 801de52:	4604      	mov	r4, r0
 801de54:	460d      	mov	r5, r1
 801de56:	d016      	beq.n	801de86 <__ieee754_rem_pio2+0xf6>
 801de58:	a38f      	add	r3, pc, #572	; (adr r3, 801e098 <__ieee754_rem_pio2+0x308>)
 801de5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801de5e:	f7e2 fa2d 	bl	80002bc <__adddf3>
 801de62:	4602      	mov	r2, r0
 801de64:	460b      	mov	r3, r1
 801de66:	e9ca 2300 	strd	r2, r3, [sl]
 801de6a:	4620      	mov	r0, r4
 801de6c:	4629      	mov	r1, r5
 801de6e:	f7e2 fa23 	bl	80002b8 <__aeabi_dsub>
 801de72:	a389      	add	r3, pc, #548	; (adr r3, 801e098 <__ieee754_rem_pio2+0x308>)
 801de74:	e9d3 2300 	ldrd	r2, r3, [r3]
 801de78:	f7e2 fa20 	bl	80002bc <__adddf3>
 801de7c:	f04f 3bff 	mov.w	fp, #4294967295
 801de80:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801de84:	e7c4      	b.n	801de10 <__ieee754_rem_pio2+0x80>
 801de86:	a386      	add	r3, pc, #536	; (adr r3, 801e0a0 <__ieee754_rem_pio2+0x310>)
 801de88:	e9d3 2300 	ldrd	r2, r3, [r3]
 801de8c:	f7e2 fa16 	bl	80002bc <__adddf3>
 801de90:	a385      	add	r3, pc, #532	; (adr r3, 801e0a8 <__ieee754_rem_pio2+0x318>)
 801de92:	e9d3 2300 	ldrd	r2, r3, [r3]
 801de96:	4604      	mov	r4, r0
 801de98:	460d      	mov	r5, r1
 801de9a:	f7e2 fa0f 	bl	80002bc <__adddf3>
 801de9e:	4602      	mov	r2, r0
 801dea0:	460b      	mov	r3, r1
 801dea2:	e9ca 2300 	strd	r2, r3, [sl]
 801dea6:	4620      	mov	r0, r4
 801dea8:	4629      	mov	r1, r5
 801deaa:	f7e2 fa05 	bl	80002b8 <__aeabi_dsub>
 801deae:	a37e      	add	r3, pc, #504	; (adr r3, 801e0a8 <__ieee754_rem_pio2+0x318>)
 801deb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801deb4:	e7e0      	b.n	801de78 <__ieee754_rem_pio2+0xe8>
 801deb6:	4b87      	ldr	r3, [pc, #540]	; (801e0d4 <__ieee754_rem_pio2+0x344>)
 801deb8:	4598      	cmp	r8, r3
 801deba:	f300 80d9 	bgt.w	801e070 <__ieee754_rem_pio2+0x2e0>
 801debe:	f000 fefd 	bl	801ecbc <fabs>
 801dec2:	ec55 4b10 	vmov	r4, r5, d0
 801dec6:	ee10 0a10 	vmov	r0, s0
 801deca:	a379      	add	r3, pc, #484	; (adr r3, 801e0b0 <__ieee754_rem_pio2+0x320>)
 801decc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ded0:	4629      	mov	r1, r5
 801ded2:	f7e2 fba9 	bl	8000628 <__aeabi_dmul>
 801ded6:	4b80      	ldr	r3, [pc, #512]	; (801e0d8 <__ieee754_rem_pio2+0x348>)
 801ded8:	2200      	movs	r2, #0
 801deda:	f7e2 f9ef 	bl	80002bc <__adddf3>
 801dede:	f7e2 fe53 	bl	8000b88 <__aeabi_d2iz>
 801dee2:	4683      	mov	fp, r0
 801dee4:	f7e2 fb36 	bl	8000554 <__aeabi_i2d>
 801dee8:	4602      	mov	r2, r0
 801deea:	460b      	mov	r3, r1
 801deec:	ec43 2b18 	vmov	d8, r2, r3
 801def0:	a367      	add	r3, pc, #412	; (adr r3, 801e090 <__ieee754_rem_pio2+0x300>)
 801def2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801def6:	f7e2 fb97 	bl	8000628 <__aeabi_dmul>
 801defa:	4602      	mov	r2, r0
 801defc:	460b      	mov	r3, r1
 801defe:	4620      	mov	r0, r4
 801df00:	4629      	mov	r1, r5
 801df02:	f7e2 f9d9 	bl	80002b8 <__aeabi_dsub>
 801df06:	a364      	add	r3, pc, #400	; (adr r3, 801e098 <__ieee754_rem_pio2+0x308>)
 801df08:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df0c:	4606      	mov	r6, r0
 801df0e:	460f      	mov	r7, r1
 801df10:	ec51 0b18 	vmov	r0, r1, d8
 801df14:	f7e2 fb88 	bl	8000628 <__aeabi_dmul>
 801df18:	f1bb 0f1f 	cmp.w	fp, #31
 801df1c:	4604      	mov	r4, r0
 801df1e:	460d      	mov	r5, r1
 801df20:	dc0d      	bgt.n	801df3e <__ieee754_rem_pio2+0x1ae>
 801df22:	4b6e      	ldr	r3, [pc, #440]	; (801e0dc <__ieee754_rem_pio2+0x34c>)
 801df24:	f10b 32ff 	add.w	r2, fp, #4294967295
 801df28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801df2c:	4543      	cmp	r3, r8
 801df2e:	d006      	beq.n	801df3e <__ieee754_rem_pio2+0x1ae>
 801df30:	4622      	mov	r2, r4
 801df32:	462b      	mov	r3, r5
 801df34:	4630      	mov	r0, r6
 801df36:	4639      	mov	r1, r7
 801df38:	f7e2 f9be 	bl	80002b8 <__aeabi_dsub>
 801df3c:	e00f      	b.n	801df5e <__ieee754_rem_pio2+0x1ce>
 801df3e:	462b      	mov	r3, r5
 801df40:	4622      	mov	r2, r4
 801df42:	4630      	mov	r0, r6
 801df44:	4639      	mov	r1, r7
 801df46:	f7e2 f9b7 	bl	80002b8 <__aeabi_dsub>
 801df4a:	ea4f 5328 	mov.w	r3, r8, asr #20
 801df4e:	9303      	str	r3, [sp, #12]
 801df50:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801df54:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 801df58:	f1b8 0f10 	cmp.w	r8, #16
 801df5c:	dc02      	bgt.n	801df64 <__ieee754_rem_pio2+0x1d4>
 801df5e:	e9ca 0100 	strd	r0, r1, [sl]
 801df62:	e039      	b.n	801dfd8 <__ieee754_rem_pio2+0x248>
 801df64:	a34e      	add	r3, pc, #312	; (adr r3, 801e0a0 <__ieee754_rem_pio2+0x310>)
 801df66:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df6a:	ec51 0b18 	vmov	r0, r1, d8
 801df6e:	f7e2 fb5b 	bl	8000628 <__aeabi_dmul>
 801df72:	4604      	mov	r4, r0
 801df74:	460d      	mov	r5, r1
 801df76:	4602      	mov	r2, r0
 801df78:	460b      	mov	r3, r1
 801df7a:	4630      	mov	r0, r6
 801df7c:	4639      	mov	r1, r7
 801df7e:	f7e2 f99b 	bl	80002b8 <__aeabi_dsub>
 801df82:	4602      	mov	r2, r0
 801df84:	460b      	mov	r3, r1
 801df86:	4680      	mov	r8, r0
 801df88:	4689      	mov	r9, r1
 801df8a:	4630      	mov	r0, r6
 801df8c:	4639      	mov	r1, r7
 801df8e:	f7e2 f993 	bl	80002b8 <__aeabi_dsub>
 801df92:	4622      	mov	r2, r4
 801df94:	462b      	mov	r3, r5
 801df96:	f7e2 f98f 	bl	80002b8 <__aeabi_dsub>
 801df9a:	a343      	add	r3, pc, #268	; (adr r3, 801e0a8 <__ieee754_rem_pio2+0x318>)
 801df9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dfa0:	4604      	mov	r4, r0
 801dfa2:	460d      	mov	r5, r1
 801dfa4:	ec51 0b18 	vmov	r0, r1, d8
 801dfa8:	f7e2 fb3e 	bl	8000628 <__aeabi_dmul>
 801dfac:	4622      	mov	r2, r4
 801dfae:	462b      	mov	r3, r5
 801dfb0:	f7e2 f982 	bl	80002b8 <__aeabi_dsub>
 801dfb4:	4602      	mov	r2, r0
 801dfb6:	460b      	mov	r3, r1
 801dfb8:	4604      	mov	r4, r0
 801dfba:	460d      	mov	r5, r1
 801dfbc:	4640      	mov	r0, r8
 801dfbe:	4649      	mov	r1, r9
 801dfc0:	f7e2 f97a 	bl	80002b8 <__aeabi_dsub>
 801dfc4:	9a03      	ldr	r2, [sp, #12]
 801dfc6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801dfca:	1ad3      	subs	r3, r2, r3
 801dfcc:	2b31      	cmp	r3, #49	; 0x31
 801dfce:	dc24      	bgt.n	801e01a <__ieee754_rem_pio2+0x28a>
 801dfd0:	e9ca 0100 	strd	r0, r1, [sl]
 801dfd4:	4646      	mov	r6, r8
 801dfd6:	464f      	mov	r7, r9
 801dfd8:	e9da 8900 	ldrd	r8, r9, [sl]
 801dfdc:	4630      	mov	r0, r6
 801dfde:	4642      	mov	r2, r8
 801dfe0:	464b      	mov	r3, r9
 801dfe2:	4639      	mov	r1, r7
 801dfe4:	f7e2 f968 	bl	80002b8 <__aeabi_dsub>
 801dfe8:	462b      	mov	r3, r5
 801dfea:	4622      	mov	r2, r4
 801dfec:	f7e2 f964 	bl	80002b8 <__aeabi_dsub>
 801dff0:	9b02      	ldr	r3, [sp, #8]
 801dff2:	2b00      	cmp	r3, #0
 801dff4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801dff8:	f6bf af0a 	bge.w	801de10 <__ieee754_rem_pio2+0x80>
 801dffc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801e000:	f8ca 3004 	str.w	r3, [sl, #4]
 801e004:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e008:	f8ca 8000 	str.w	r8, [sl]
 801e00c:	f8ca 0008 	str.w	r0, [sl, #8]
 801e010:	f8ca 300c 	str.w	r3, [sl, #12]
 801e014:	f1cb 0b00 	rsb	fp, fp, #0
 801e018:	e6fa      	b.n	801de10 <__ieee754_rem_pio2+0x80>
 801e01a:	a327      	add	r3, pc, #156	; (adr r3, 801e0b8 <__ieee754_rem_pio2+0x328>)
 801e01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e020:	ec51 0b18 	vmov	r0, r1, d8
 801e024:	f7e2 fb00 	bl	8000628 <__aeabi_dmul>
 801e028:	4604      	mov	r4, r0
 801e02a:	460d      	mov	r5, r1
 801e02c:	4602      	mov	r2, r0
 801e02e:	460b      	mov	r3, r1
 801e030:	4640      	mov	r0, r8
 801e032:	4649      	mov	r1, r9
 801e034:	f7e2 f940 	bl	80002b8 <__aeabi_dsub>
 801e038:	4602      	mov	r2, r0
 801e03a:	460b      	mov	r3, r1
 801e03c:	4606      	mov	r6, r0
 801e03e:	460f      	mov	r7, r1
 801e040:	4640      	mov	r0, r8
 801e042:	4649      	mov	r1, r9
 801e044:	f7e2 f938 	bl	80002b8 <__aeabi_dsub>
 801e048:	4622      	mov	r2, r4
 801e04a:	462b      	mov	r3, r5
 801e04c:	f7e2 f934 	bl	80002b8 <__aeabi_dsub>
 801e050:	a31b      	add	r3, pc, #108	; (adr r3, 801e0c0 <__ieee754_rem_pio2+0x330>)
 801e052:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e056:	4604      	mov	r4, r0
 801e058:	460d      	mov	r5, r1
 801e05a:	ec51 0b18 	vmov	r0, r1, d8
 801e05e:	f7e2 fae3 	bl	8000628 <__aeabi_dmul>
 801e062:	4622      	mov	r2, r4
 801e064:	462b      	mov	r3, r5
 801e066:	f7e2 f927 	bl	80002b8 <__aeabi_dsub>
 801e06a:	4604      	mov	r4, r0
 801e06c:	460d      	mov	r5, r1
 801e06e:	e75f      	b.n	801df30 <__ieee754_rem_pio2+0x1a0>
 801e070:	4b1b      	ldr	r3, [pc, #108]	; (801e0e0 <__ieee754_rem_pio2+0x350>)
 801e072:	4598      	cmp	r8, r3
 801e074:	dd36      	ble.n	801e0e4 <__ieee754_rem_pio2+0x354>
 801e076:	ee10 2a10 	vmov	r2, s0
 801e07a:	462b      	mov	r3, r5
 801e07c:	4620      	mov	r0, r4
 801e07e:	4629      	mov	r1, r5
 801e080:	f7e2 f91a 	bl	80002b8 <__aeabi_dsub>
 801e084:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801e088:	e9ca 0100 	strd	r0, r1, [sl]
 801e08c:	e694      	b.n	801ddb8 <__ieee754_rem_pio2+0x28>
 801e08e:	bf00      	nop
 801e090:	54400000 	.word	0x54400000
 801e094:	3ff921fb 	.word	0x3ff921fb
 801e098:	1a626331 	.word	0x1a626331
 801e09c:	3dd0b461 	.word	0x3dd0b461
 801e0a0:	1a600000 	.word	0x1a600000
 801e0a4:	3dd0b461 	.word	0x3dd0b461
 801e0a8:	2e037073 	.word	0x2e037073
 801e0ac:	3ba3198a 	.word	0x3ba3198a
 801e0b0:	6dc9c883 	.word	0x6dc9c883
 801e0b4:	3fe45f30 	.word	0x3fe45f30
 801e0b8:	2e000000 	.word	0x2e000000
 801e0bc:	3ba3198a 	.word	0x3ba3198a
 801e0c0:	252049c1 	.word	0x252049c1
 801e0c4:	397b839a 	.word	0x397b839a
 801e0c8:	3fe921fb 	.word	0x3fe921fb
 801e0cc:	4002d97b 	.word	0x4002d97b
 801e0d0:	3ff921fb 	.word	0x3ff921fb
 801e0d4:	413921fb 	.word	0x413921fb
 801e0d8:	3fe00000 	.word	0x3fe00000
 801e0dc:	0802483c 	.word	0x0802483c
 801e0e0:	7fefffff 	.word	0x7fefffff
 801e0e4:	ea4f 5428 	mov.w	r4, r8, asr #20
 801e0e8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 801e0ec:	ee10 0a10 	vmov	r0, s0
 801e0f0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 801e0f4:	ee10 6a10 	vmov	r6, s0
 801e0f8:	460f      	mov	r7, r1
 801e0fa:	f7e2 fd45 	bl	8000b88 <__aeabi_d2iz>
 801e0fe:	f7e2 fa29 	bl	8000554 <__aeabi_i2d>
 801e102:	4602      	mov	r2, r0
 801e104:	460b      	mov	r3, r1
 801e106:	4630      	mov	r0, r6
 801e108:	4639      	mov	r1, r7
 801e10a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801e10e:	f7e2 f8d3 	bl	80002b8 <__aeabi_dsub>
 801e112:	4b23      	ldr	r3, [pc, #140]	; (801e1a0 <__ieee754_rem_pio2+0x410>)
 801e114:	2200      	movs	r2, #0
 801e116:	f7e2 fa87 	bl	8000628 <__aeabi_dmul>
 801e11a:	460f      	mov	r7, r1
 801e11c:	4606      	mov	r6, r0
 801e11e:	f7e2 fd33 	bl	8000b88 <__aeabi_d2iz>
 801e122:	f7e2 fa17 	bl	8000554 <__aeabi_i2d>
 801e126:	4602      	mov	r2, r0
 801e128:	460b      	mov	r3, r1
 801e12a:	4630      	mov	r0, r6
 801e12c:	4639      	mov	r1, r7
 801e12e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801e132:	f7e2 f8c1 	bl	80002b8 <__aeabi_dsub>
 801e136:	4b1a      	ldr	r3, [pc, #104]	; (801e1a0 <__ieee754_rem_pio2+0x410>)
 801e138:	2200      	movs	r2, #0
 801e13a:	f7e2 fa75 	bl	8000628 <__aeabi_dmul>
 801e13e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801e142:	ad04      	add	r5, sp, #16
 801e144:	f04f 0803 	mov.w	r8, #3
 801e148:	46a9      	mov	r9, r5
 801e14a:	2600      	movs	r6, #0
 801e14c:	2700      	movs	r7, #0
 801e14e:	4632      	mov	r2, r6
 801e150:	463b      	mov	r3, r7
 801e152:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 801e156:	46c3      	mov	fp, r8
 801e158:	3d08      	subs	r5, #8
 801e15a:	f108 38ff 	add.w	r8, r8, #4294967295
 801e15e:	f7e2 fccb 	bl	8000af8 <__aeabi_dcmpeq>
 801e162:	2800      	cmp	r0, #0
 801e164:	d1f3      	bne.n	801e14e <__ieee754_rem_pio2+0x3be>
 801e166:	4b0f      	ldr	r3, [pc, #60]	; (801e1a4 <__ieee754_rem_pio2+0x414>)
 801e168:	9301      	str	r3, [sp, #4]
 801e16a:	2302      	movs	r3, #2
 801e16c:	9300      	str	r3, [sp, #0]
 801e16e:	4622      	mov	r2, r4
 801e170:	465b      	mov	r3, fp
 801e172:	4651      	mov	r1, sl
 801e174:	4648      	mov	r0, r9
 801e176:	f000 f993 	bl	801e4a0 <__kernel_rem_pio2>
 801e17a:	9b02      	ldr	r3, [sp, #8]
 801e17c:	2b00      	cmp	r3, #0
 801e17e:	4683      	mov	fp, r0
 801e180:	f6bf ae46 	bge.w	801de10 <__ieee754_rem_pio2+0x80>
 801e184:	e9da 2100 	ldrd	r2, r1, [sl]
 801e188:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e18c:	e9ca 2300 	strd	r2, r3, [sl]
 801e190:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 801e194:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e198:	e9ca 2302 	strd	r2, r3, [sl, #8]
 801e19c:	e73a      	b.n	801e014 <__ieee754_rem_pio2+0x284>
 801e19e:	bf00      	nop
 801e1a0:	41700000 	.word	0x41700000
 801e1a4:	080248bc 	.word	0x080248bc

0801e1a8 <__ieee754_sqrt>:
 801e1a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e1ac:	ec55 4b10 	vmov	r4, r5, d0
 801e1b0:	4e55      	ldr	r6, [pc, #340]	; (801e308 <__ieee754_sqrt+0x160>)
 801e1b2:	43ae      	bics	r6, r5
 801e1b4:	ee10 0a10 	vmov	r0, s0
 801e1b8:	ee10 3a10 	vmov	r3, s0
 801e1bc:	462a      	mov	r2, r5
 801e1be:	4629      	mov	r1, r5
 801e1c0:	d110      	bne.n	801e1e4 <__ieee754_sqrt+0x3c>
 801e1c2:	ee10 2a10 	vmov	r2, s0
 801e1c6:	462b      	mov	r3, r5
 801e1c8:	f7e2 fa2e 	bl	8000628 <__aeabi_dmul>
 801e1cc:	4602      	mov	r2, r0
 801e1ce:	460b      	mov	r3, r1
 801e1d0:	4620      	mov	r0, r4
 801e1d2:	4629      	mov	r1, r5
 801e1d4:	f7e2 f872 	bl	80002bc <__adddf3>
 801e1d8:	4604      	mov	r4, r0
 801e1da:	460d      	mov	r5, r1
 801e1dc:	ec45 4b10 	vmov	d0, r4, r5
 801e1e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e1e4:	2d00      	cmp	r5, #0
 801e1e6:	dc10      	bgt.n	801e20a <__ieee754_sqrt+0x62>
 801e1e8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801e1ec:	4330      	orrs	r0, r6
 801e1ee:	d0f5      	beq.n	801e1dc <__ieee754_sqrt+0x34>
 801e1f0:	b15d      	cbz	r5, 801e20a <__ieee754_sqrt+0x62>
 801e1f2:	ee10 2a10 	vmov	r2, s0
 801e1f6:	462b      	mov	r3, r5
 801e1f8:	ee10 0a10 	vmov	r0, s0
 801e1fc:	f7e2 f85c 	bl	80002b8 <__aeabi_dsub>
 801e200:	4602      	mov	r2, r0
 801e202:	460b      	mov	r3, r1
 801e204:	f7e2 fb3a 	bl	800087c <__aeabi_ddiv>
 801e208:	e7e6      	b.n	801e1d8 <__ieee754_sqrt+0x30>
 801e20a:	1512      	asrs	r2, r2, #20
 801e20c:	d074      	beq.n	801e2f8 <__ieee754_sqrt+0x150>
 801e20e:	07d4      	lsls	r4, r2, #31
 801e210:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801e214:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801e218:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801e21c:	bf5e      	ittt	pl
 801e21e:	0fda      	lsrpl	r2, r3, #31
 801e220:	005b      	lslpl	r3, r3, #1
 801e222:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801e226:	2400      	movs	r4, #0
 801e228:	0fda      	lsrs	r2, r3, #31
 801e22a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801e22e:	107f      	asrs	r7, r7, #1
 801e230:	005b      	lsls	r3, r3, #1
 801e232:	2516      	movs	r5, #22
 801e234:	4620      	mov	r0, r4
 801e236:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801e23a:	1886      	adds	r6, r0, r2
 801e23c:	428e      	cmp	r6, r1
 801e23e:	bfde      	ittt	le
 801e240:	1b89      	suble	r1, r1, r6
 801e242:	18b0      	addle	r0, r6, r2
 801e244:	18a4      	addle	r4, r4, r2
 801e246:	0049      	lsls	r1, r1, #1
 801e248:	3d01      	subs	r5, #1
 801e24a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801e24e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801e252:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801e256:	d1f0      	bne.n	801e23a <__ieee754_sqrt+0x92>
 801e258:	462a      	mov	r2, r5
 801e25a:	f04f 0e20 	mov.w	lr, #32
 801e25e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801e262:	4281      	cmp	r1, r0
 801e264:	eb06 0c05 	add.w	ip, r6, r5
 801e268:	dc02      	bgt.n	801e270 <__ieee754_sqrt+0xc8>
 801e26a:	d113      	bne.n	801e294 <__ieee754_sqrt+0xec>
 801e26c:	459c      	cmp	ip, r3
 801e26e:	d811      	bhi.n	801e294 <__ieee754_sqrt+0xec>
 801e270:	f1bc 0f00 	cmp.w	ip, #0
 801e274:	eb0c 0506 	add.w	r5, ip, r6
 801e278:	da43      	bge.n	801e302 <__ieee754_sqrt+0x15a>
 801e27a:	2d00      	cmp	r5, #0
 801e27c:	db41      	blt.n	801e302 <__ieee754_sqrt+0x15a>
 801e27e:	f100 0801 	add.w	r8, r0, #1
 801e282:	1a09      	subs	r1, r1, r0
 801e284:	459c      	cmp	ip, r3
 801e286:	bf88      	it	hi
 801e288:	f101 31ff 	addhi.w	r1, r1, #4294967295
 801e28c:	eba3 030c 	sub.w	r3, r3, ip
 801e290:	4432      	add	r2, r6
 801e292:	4640      	mov	r0, r8
 801e294:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801e298:	f1be 0e01 	subs.w	lr, lr, #1
 801e29c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801e2a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801e2a4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801e2a8:	d1db      	bne.n	801e262 <__ieee754_sqrt+0xba>
 801e2aa:	430b      	orrs	r3, r1
 801e2ac:	d006      	beq.n	801e2bc <__ieee754_sqrt+0x114>
 801e2ae:	1c50      	adds	r0, r2, #1
 801e2b0:	bf13      	iteet	ne
 801e2b2:	3201      	addne	r2, #1
 801e2b4:	3401      	addeq	r4, #1
 801e2b6:	4672      	moveq	r2, lr
 801e2b8:	f022 0201 	bicne.w	r2, r2, #1
 801e2bc:	1063      	asrs	r3, r4, #1
 801e2be:	0852      	lsrs	r2, r2, #1
 801e2c0:	07e1      	lsls	r1, r4, #31
 801e2c2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801e2c6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801e2ca:	bf48      	it	mi
 801e2cc:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801e2d0:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 801e2d4:	4614      	mov	r4, r2
 801e2d6:	e781      	b.n	801e1dc <__ieee754_sqrt+0x34>
 801e2d8:	0ad9      	lsrs	r1, r3, #11
 801e2da:	3815      	subs	r0, #21
 801e2dc:	055b      	lsls	r3, r3, #21
 801e2de:	2900      	cmp	r1, #0
 801e2e0:	d0fa      	beq.n	801e2d8 <__ieee754_sqrt+0x130>
 801e2e2:	02cd      	lsls	r5, r1, #11
 801e2e4:	d50a      	bpl.n	801e2fc <__ieee754_sqrt+0x154>
 801e2e6:	f1c2 0420 	rsb	r4, r2, #32
 801e2ea:	fa23 f404 	lsr.w	r4, r3, r4
 801e2ee:	1e55      	subs	r5, r2, #1
 801e2f0:	4093      	lsls	r3, r2
 801e2f2:	4321      	orrs	r1, r4
 801e2f4:	1b42      	subs	r2, r0, r5
 801e2f6:	e78a      	b.n	801e20e <__ieee754_sqrt+0x66>
 801e2f8:	4610      	mov	r0, r2
 801e2fa:	e7f0      	b.n	801e2de <__ieee754_sqrt+0x136>
 801e2fc:	0049      	lsls	r1, r1, #1
 801e2fe:	3201      	adds	r2, #1
 801e300:	e7ef      	b.n	801e2e2 <__ieee754_sqrt+0x13a>
 801e302:	4680      	mov	r8, r0
 801e304:	e7bd      	b.n	801e282 <__ieee754_sqrt+0xda>
 801e306:	bf00      	nop
 801e308:	7ff00000 	.word	0x7ff00000
 801e30c:	00000000 	.word	0x00000000

0801e310 <__kernel_cos>:
 801e310:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e314:	ec57 6b10 	vmov	r6, r7, d0
 801e318:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801e31c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 801e320:	ed8d 1b00 	vstr	d1, [sp]
 801e324:	da07      	bge.n	801e336 <__kernel_cos+0x26>
 801e326:	ee10 0a10 	vmov	r0, s0
 801e32a:	4639      	mov	r1, r7
 801e32c:	f7e2 fc2c 	bl	8000b88 <__aeabi_d2iz>
 801e330:	2800      	cmp	r0, #0
 801e332:	f000 8088 	beq.w	801e446 <__kernel_cos+0x136>
 801e336:	4632      	mov	r2, r6
 801e338:	463b      	mov	r3, r7
 801e33a:	4630      	mov	r0, r6
 801e33c:	4639      	mov	r1, r7
 801e33e:	f7e2 f973 	bl	8000628 <__aeabi_dmul>
 801e342:	4b51      	ldr	r3, [pc, #324]	; (801e488 <__kernel_cos+0x178>)
 801e344:	2200      	movs	r2, #0
 801e346:	4604      	mov	r4, r0
 801e348:	460d      	mov	r5, r1
 801e34a:	f7e2 f96d 	bl	8000628 <__aeabi_dmul>
 801e34e:	a340      	add	r3, pc, #256	; (adr r3, 801e450 <__kernel_cos+0x140>)
 801e350:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e354:	4682      	mov	sl, r0
 801e356:	468b      	mov	fp, r1
 801e358:	4620      	mov	r0, r4
 801e35a:	4629      	mov	r1, r5
 801e35c:	f7e2 f964 	bl	8000628 <__aeabi_dmul>
 801e360:	a33d      	add	r3, pc, #244	; (adr r3, 801e458 <__kernel_cos+0x148>)
 801e362:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e366:	f7e1 ffa9 	bl	80002bc <__adddf3>
 801e36a:	4622      	mov	r2, r4
 801e36c:	462b      	mov	r3, r5
 801e36e:	f7e2 f95b 	bl	8000628 <__aeabi_dmul>
 801e372:	a33b      	add	r3, pc, #236	; (adr r3, 801e460 <__kernel_cos+0x150>)
 801e374:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e378:	f7e1 ff9e 	bl	80002b8 <__aeabi_dsub>
 801e37c:	4622      	mov	r2, r4
 801e37e:	462b      	mov	r3, r5
 801e380:	f7e2 f952 	bl	8000628 <__aeabi_dmul>
 801e384:	a338      	add	r3, pc, #224	; (adr r3, 801e468 <__kernel_cos+0x158>)
 801e386:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e38a:	f7e1 ff97 	bl	80002bc <__adddf3>
 801e38e:	4622      	mov	r2, r4
 801e390:	462b      	mov	r3, r5
 801e392:	f7e2 f949 	bl	8000628 <__aeabi_dmul>
 801e396:	a336      	add	r3, pc, #216	; (adr r3, 801e470 <__kernel_cos+0x160>)
 801e398:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e39c:	f7e1 ff8c 	bl	80002b8 <__aeabi_dsub>
 801e3a0:	4622      	mov	r2, r4
 801e3a2:	462b      	mov	r3, r5
 801e3a4:	f7e2 f940 	bl	8000628 <__aeabi_dmul>
 801e3a8:	a333      	add	r3, pc, #204	; (adr r3, 801e478 <__kernel_cos+0x168>)
 801e3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e3ae:	f7e1 ff85 	bl	80002bc <__adddf3>
 801e3b2:	4622      	mov	r2, r4
 801e3b4:	462b      	mov	r3, r5
 801e3b6:	f7e2 f937 	bl	8000628 <__aeabi_dmul>
 801e3ba:	4622      	mov	r2, r4
 801e3bc:	462b      	mov	r3, r5
 801e3be:	f7e2 f933 	bl	8000628 <__aeabi_dmul>
 801e3c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e3c6:	4604      	mov	r4, r0
 801e3c8:	460d      	mov	r5, r1
 801e3ca:	4630      	mov	r0, r6
 801e3cc:	4639      	mov	r1, r7
 801e3ce:	f7e2 f92b 	bl	8000628 <__aeabi_dmul>
 801e3d2:	460b      	mov	r3, r1
 801e3d4:	4602      	mov	r2, r0
 801e3d6:	4629      	mov	r1, r5
 801e3d8:	4620      	mov	r0, r4
 801e3da:	f7e1 ff6d 	bl	80002b8 <__aeabi_dsub>
 801e3de:	4b2b      	ldr	r3, [pc, #172]	; (801e48c <__kernel_cos+0x17c>)
 801e3e0:	4598      	cmp	r8, r3
 801e3e2:	4606      	mov	r6, r0
 801e3e4:	460f      	mov	r7, r1
 801e3e6:	dc10      	bgt.n	801e40a <__kernel_cos+0xfa>
 801e3e8:	4602      	mov	r2, r0
 801e3ea:	460b      	mov	r3, r1
 801e3ec:	4650      	mov	r0, sl
 801e3ee:	4659      	mov	r1, fp
 801e3f0:	f7e1 ff62 	bl	80002b8 <__aeabi_dsub>
 801e3f4:	460b      	mov	r3, r1
 801e3f6:	4926      	ldr	r1, [pc, #152]	; (801e490 <__kernel_cos+0x180>)
 801e3f8:	4602      	mov	r2, r0
 801e3fa:	2000      	movs	r0, #0
 801e3fc:	f7e1 ff5c 	bl	80002b8 <__aeabi_dsub>
 801e400:	ec41 0b10 	vmov	d0, r0, r1
 801e404:	b003      	add	sp, #12
 801e406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e40a:	4b22      	ldr	r3, [pc, #136]	; (801e494 <__kernel_cos+0x184>)
 801e40c:	4920      	ldr	r1, [pc, #128]	; (801e490 <__kernel_cos+0x180>)
 801e40e:	4598      	cmp	r8, r3
 801e410:	bfcc      	ite	gt
 801e412:	4d21      	ldrgt	r5, [pc, #132]	; (801e498 <__kernel_cos+0x188>)
 801e414:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 801e418:	2400      	movs	r4, #0
 801e41a:	4622      	mov	r2, r4
 801e41c:	462b      	mov	r3, r5
 801e41e:	2000      	movs	r0, #0
 801e420:	f7e1 ff4a 	bl	80002b8 <__aeabi_dsub>
 801e424:	4622      	mov	r2, r4
 801e426:	4680      	mov	r8, r0
 801e428:	4689      	mov	r9, r1
 801e42a:	462b      	mov	r3, r5
 801e42c:	4650      	mov	r0, sl
 801e42e:	4659      	mov	r1, fp
 801e430:	f7e1 ff42 	bl	80002b8 <__aeabi_dsub>
 801e434:	4632      	mov	r2, r6
 801e436:	463b      	mov	r3, r7
 801e438:	f7e1 ff3e 	bl	80002b8 <__aeabi_dsub>
 801e43c:	4602      	mov	r2, r0
 801e43e:	460b      	mov	r3, r1
 801e440:	4640      	mov	r0, r8
 801e442:	4649      	mov	r1, r9
 801e444:	e7da      	b.n	801e3fc <__kernel_cos+0xec>
 801e446:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 801e480 <__kernel_cos+0x170>
 801e44a:	e7db      	b.n	801e404 <__kernel_cos+0xf4>
 801e44c:	f3af 8000 	nop.w
 801e450:	be8838d4 	.word	0xbe8838d4
 801e454:	bda8fae9 	.word	0xbda8fae9
 801e458:	bdb4b1c4 	.word	0xbdb4b1c4
 801e45c:	3e21ee9e 	.word	0x3e21ee9e
 801e460:	809c52ad 	.word	0x809c52ad
 801e464:	3e927e4f 	.word	0x3e927e4f
 801e468:	19cb1590 	.word	0x19cb1590
 801e46c:	3efa01a0 	.word	0x3efa01a0
 801e470:	16c15177 	.word	0x16c15177
 801e474:	3f56c16c 	.word	0x3f56c16c
 801e478:	5555554c 	.word	0x5555554c
 801e47c:	3fa55555 	.word	0x3fa55555
 801e480:	00000000 	.word	0x00000000
 801e484:	3ff00000 	.word	0x3ff00000
 801e488:	3fe00000 	.word	0x3fe00000
 801e48c:	3fd33332 	.word	0x3fd33332
 801e490:	3ff00000 	.word	0x3ff00000
 801e494:	3fe90000 	.word	0x3fe90000
 801e498:	3fd20000 	.word	0x3fd20000
 801e49c:	00000000 	.word	0x00000000

0801e4a0 <__kernel_rem_pio2>:
 801e4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e4a4:	ed2d 8b02 	vpush	{d8}
 801e4a8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801e4ac:	f112 0f14 	cmn.w	r2, #20
 801e4b0:	9308      	str	r3, [sp, #32]
 801e4b2:	9101      	str	r1, [sp, #4]
 801e4b4:	4bc4      	ldr	r3, [pc, #784]	; (801e7c8 <__kernel_rem_pio2+0x328>)
 801e4b6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801e4b8:	900b      	str	r0, [sp, #44]	; 0x2c
 801e4ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801e4be:	9302      	str	r3, [sp, #8]
 801e4c0:	9b08      	ldr	r3, [sp, #32]
 801e4c2:	f103 33ff 	add.w	r3, r3, #4294967295
 801e4c6:	bfa8      	it	ge
 801e4c8:	1ed4      	subge	r4, r2, #3
 801e4ca:	9306      	str	r3, [sp, #24]
 801e4cc:	bfb2      	itee	lt
 801e4ce:	2400      	movlt	r4, #0
 801e4d0:	2318      	movge	r3, #24
 801e4d2:	fb94 f4f3 	sdivge	r4, r4, r3
 801e4d6:	f06f 0317 	mvn.w	r3, #23
 801e4da:	fb04 3303 	mla	r3, r4, r3, r3
 801e4de:	eb03 0a02 	add.w	sl, r3, r2
 801e4e2:	9b02      	ldr	r3, [sp, #8]
 801e4e4:	9a06      	ldr	r2, [sp, #24]
 801e4e6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 801e7b8 <__kernel_rem_pio2+0x318>
 801e4ea:	eb03 0802 	add.w	r8, r3, r2
 801e4ee:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801e4f0:	1aa7      	subs	r7, r4, r2
 801e4f2:	ae22      	add	r6, sp, #136	; 0x88
 801e4f4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801e4f8:	2500      	movs	r5, #0
 801e4fa:	4545      	cmp	r5, r8
 801e4fc:	dd13      	ble.n	801e526 <__kernel_rem_pio2+0x86>
 801e4fe:	9b08      	ldr	r3, [sp, #32]
 801e500:	ed9f 8bad 	vldr	d8, [pc, #692]	; 801e7b8 <__kernel_rem_pio2+0x318>
 801e504:	aa22      	add	r2, sp, #136	; 0x88
 801e506:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801e50a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801e50e:	f04f 0800 	mov.w	r8, #0
 801e512:	9b02      	ldr	r3, [sp, #8]
 801e514:	4598      	cmp	r8, r3
 801e516:	dc2f      	bgt.n	801e578 <__kernel_rem_pio2+0xd8>
 801e518:	ed8d 8b04 	vstr	d8, [sp, #16]
 801e51c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 801e520:	462f      	mov	r7, r5
 801e522:	2600      	movs	r6, #0
 801e524:	e01b      	b.n	801e55e <__kernel_rem_pio2+0xbe>
 801e526:	42ef      	cmn	r7, r5
 801e528:	d407      	bmi.n	801e53a <__kernel_rem_pio2+0x9a>
 801e52a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801e52e:	f7e2 f811 	bl	8000554 <__aeabi_i2d>
 801e532:	e8e6 0102 	strd	r0, r1, [r6], #8
 801e536:	3501      	adds	r5, #1
 801e538:	e7df      	b.n	801e4fa <__kernel_rem_pio2+0x5a>
 801e53a:	ec51 0b18 	vmov	r0, r1, d8
 801e53e:	e7f8      	b.n	801e532 <__kernel_rem_pio2+0x92>
 801e540:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e544:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801e548:	f7e2 f86e 	bl	8000628 <__aeabi_dmul>
 801e54c:	4602      	mov	r2, r0
 801e54e:	460b      	mov	r3, r1
 801e550:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801e554:	f7e1 feb2 	bl	80002bc <__adddf3>
 801e558:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801e55c:	3601      	adds	r6, #1
 801e55e:	9b06      	ldr	r3, [sp, #24]
 801e560:	429e      	cmp	r6, r3
 801e562:	f1a7 0708 	sub.w	r7, r7, #8
 801e566:	ddeb      	ble.n	801e540 <__kernel_rem_pio2+0xa0>
 801e568:	ed9d 7b04 	vldr	d7, [sp, #16]
 801e56c:	f108 0801 	add.w	r8, r8, #1
 801e570:	ecab 7b02 	vstmia	fp!, {d7}
 801e574:	3508      	adds	r5, #8
 801e576:	e7cc      	b.n	801e512 <__kernel_rem_pio2+0x72>
 801e578:	9b02      	ldr	r3, [sp, #8]
 801e57a:	aa0e      	add	r2, sp, #56	; 0x38
 801e57c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801e580:	930d      	str	r3, [sp, #52]	; 0x34
 801e582:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801e584:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801e588:	9c02      	ldr	r4, [sp, #8]
 801e58a:	930c      	str	r3, [sp, #48]	; 0x30
 801e58c:	00e3      	lsls	r3, r4, #3
 801e58e:	930a      	str	r3, [sp, #40]	; 0x28
 801e590:	ab9a      	add	r3, sp, #616	; 0x268
 801e592:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801e596:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801e59a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801e59e:	ab72      	add	r3, sp, #456	; 0x1c8
 801e5a0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 801e5a4:	46c3      	mov	fp, r8
 801e5a6:	46a1      	mov	r9, r4
 801e5a8:	f1b9 0f00 	cmp.w	r9, #0
 801e5ac:	f1a5 0508 	sub.w	r5, r5, #8
 801e5b0:	dc77      	bgt.n	801e6a2 <__kernel_rem_pio2+0x202>
 801e5b2:	ec47 6b10 	vmov	d0, r6, r7
 801e5b6:	4650      	mov	r0, sl
 801e5b8:	f000 fc0a 	bl	801edd0 <scalbn>
 801e5bc:	ec57 6b10 	vmov	r6, r7, d0
 801e5c0:	2200      	movs	r2, #0
 801e5c2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801e5c6:	ee10 0a10 	vmov	r0, s0
 801e5ca:	4639      	mov	r1, r7
 801e5cc:	f7e2 f82c 	bl	8000628 <__aeabi_dmul>
 801e5d0:	ec41 0b10 	vmov	d0, r0, r1
 801e5d4:	f000 fb7c 	bl	801ecd0 <floor>
 801e5d8:	4b7c      	ldr	r3, [pc, #496]	; (801e7cc <__kernel_rem_pio2+0x32c>)
 801e5da:	ec51 0b10 	vmov	r0, r1, d0
 801e5de:	2200      	movs	r2, #0
 801e5e0:	f7e2 f822 	bl	8000628 <__aeabi_dmul>
 801e5e4:	4602      	mov	r2, r0
 801e5e6:	460b      	mov	r3, r1
 801e5e8:	4630      	mov	r0, r6
 801e5ea:	4639      	mov	r1, r7
 801e5ec:	f7e1 fe64 	bl	80002b8 <__aeabi_dsub>
 801e5f0:	460f      	mov	r7, r1
 801e5f2:	4606      	mov	r6, r0
 801e5f4:	f7e2 fac8 	bl	8000b88 <__aeabi_d2iz>
 801e5f8:	9004      	str	r0, [sp, #16]
 801e5fa:	f7e1 ffab 	bl	8000554 <__aeabi_i2d>
 801e5fe:	4602      	mov	r2, r0
 801e600:	460b      	mov	r3, r1
 801e602:	4630      	mov	r0, r6
 801e604:	4639      	mov	r1, r7
 801e606:	f7e1 fe57 	bl	80002b8 <__aeabi_dsub>
 801e60a:	f1ba 0f00 	cmp.w	sl, #0
 801e60e:	4606      	mov	r6, r0
 801e610:	460f      	mov	r7, r1
 801e612:	dd6d      	ble.n	801e6f0 <__kernel_rem_pio2+0x250>
 801e614:	1e62      	subs	r2, r4, #1
 801e616:	ab0e      	add	r3, sp, #56	; 0x38
 801e618:	9d04      	ldr	r5, [sp, #16]
 801e61a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801e61e:	f1ca 0118 	rsb	r1, sl, #24
 801e622:	fa40 f301 	asr.w	r3, r0, r1
 801e626:	441d      	add	r5, r3
 801e628:	408b      	lsls	r3, r1
 801e62a:	1ac0      	subs	r0, r0, r3
 801e62c:	ab0e      	add	r3, sp, #56	; 0x38
 801e62e:	9504      	str	r5, [sp, #16]
 801e630:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801e634:	f1ca 0317 	rsb	r3, sl, #23
 801e638:	fa40 fb03 	asr.w	fp, r0, r3
 801e63c:	f1bb 0f00 	cmp.w	fp, #0
 801e640:	dd65      	ble.n	801e70e <__kernel_rem_pio2+0x26e>
 801e642:	9b04      	ldr	r3, [sp, #16]
 801e644:	2200      	movs	r2, #0
 801e646:	3301      	adds	r3, #1
 801e648:	9304      	str	r3, [sp, #16]
 801e64a:	4615      	mov	r5, r2
 801e64c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801e650:	4294      	cmp	r4, r2
 801e652:	f300 809c 	bgt.w	801e78e <__kernel_rem_pio2+0x2ee>
 801e656:	f1ba 0f00 	cmp.w	sl, #0
 801e65a:	dd07      	ble.n	801e66c <__kernel_rem_pio2+0x1cc>
 801e65c:	f1ba 0f01 	cmp.w	sl, #1
 801e660:	f000 80c0 	beq.w	801e7e4 <__kernel_rem_pio2+0x344>
 801e664:	f1ba 0f02 	cmp.w	sl, #2
 801e668:	f000 80c6 	beq.w	801e7f8 <__kernel_rem_pio2+0x358>
 801e66c:	f1bb 0f02 	cmp.w	fp, #2
 801e670:	d14d      	bne.n	801e70e <__kernel_rem_pio2+0x26e>
 801e672:	4632      	mov	r2, r6
 801e674:	463b      	mov	r3, r7
 801e676:	4956      	ldr	r1, [pc, #344]	; (801e7d0 <__kernel_rem_pio2+0x330>)
 801e678:	2000      	movs	r0, #0
 801e67a:	f7e1 fe1d 	bl	80002b8 <__aeabi_dsub>
 801e67e:	4606      	mov	r6, r0
 801e680:	460f      	mov	r7, r1
 801e682:	2d00      	cmp	r5, #0
 801e684:	d043      	beq.n	801e70e <__kernel_rem_pio2+0x26e>
 801e686:	4650      	mov	r0, sl
 801e688:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 801e7c0 <__kernel_rem_pio2+0x320>
 801e68c:	f000 fba0 	bl	801edd0 <scalbn>
 801e690:	4630      	mov	r0, r6
 801e692:	4639      	mov	r1, r7
 801e694:	ec53 2b10 	vmov	r2, r3, d0
 801e698:	f7e1 fe0e 	bl	80002b8 <__aeabi_dsub>
 801e69c:	4606      	mov	r6, r0
 801e69e:	460f      	mov	r7, r1
 801e6a0:	e035      	b.n	801e70e <__kernel_rem_pio2+0x26e>
 801e6a2:	4b4c      	ldr	r3, [pc, #304]	; (801e7d4 <__kernel_rem_pio2+0x334>)
 801e6a4:	2200      	movs	r2, #0
 801e6a6:	4630      	mov	r0, r6
 801e6a8:	4639      	mov	r1, r7
 801e6aa:	f7e1 ffbd 	bl	8000628 <__aeabi_dmul>
 801e6ae:	f7e2 fa6b 	bl	8000b88 <__aeabi_d2iz>
 801e6b2:	f7e1 ff4f 	bl	8000554 <__aeabi_i2d>
 801e6b6:	4602      	mov	r2, r0
 801e6b8:	460b      	mov	r3, r1
 801e6ba:	ec43 2b18 	vmov	d8, r2, r3
 801e6be:	4b46      	ldr	r3, [pc, #280]	; (801e7d8 <__kernel_rem_pio2+0x338>)
 801e6c0:	2200      	movs	r2, #0
 801e6c2:	f7e1 ffb1 	bl	8000628 <__aeabi_dmul>
 801e6c6:	4602      	mov	r2, r0
 801e6c8:	460b      	mov	r3, r1
 801e6ca:	4630      	mov	r0, r6
 801e6cc:	4639      	mov	r1, r7
 801e6ce:	f7e1 fdf3 	bl	80002b8 <__aeabi_dsub>
 801e6d2:	f7e2 fa59 	bl	8000b88 <__aeabi_d2iz>
 801e6d6:	e9d5 2300 	ldrd	r2, r3, [r5]
 801e6da:	f84b 0b04 	str.w	r0, [fp], #4
 801e6de:	ec51 0b18 	vmov	r0, r1, d8
 801e6e2:	f7e1 fdeb 	bl	80002bc <__adddf3>
 801e6e6:	f109 39ff 	add.w	r9, r9, #4294967295
 801e6ea:	4606      	mov	r6, r0
 801e6ec:	460f      	mov	r7, r1
 801e6ee:	e75b      	b.n	801e5a8 <__kernel_rem_pio2+0x108>
 801e6f0:	d106      	bne.n	801e700 <__kernel_rem_pio2+0x260>
 801e6f2:	1e63      	subs	r3, r4, #1
 801e6f4:	aa0e      	add	r2, sp, #56	; 0x38
 801e6f6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801e6fa:	ea4f 5be0 	mov.w	fp, r0, asr #23
 801e6fe:	e79d      	b.n	801e63c <__kernel_rem_pio2+0x19c>
 801e700:	4b36      	ldr	r3, [pc, #216]	; (801e7dc <__kernel_rem_pio2+0x33c>)
 801e702:	2200      	movs	r2, #0
 801e704:	f7e2 fa16 	bl	8000b34 <__aeabi_dcmpge>
 801e708:	2800      	cmp	r0, #0
 801e70a:	d13d      	bne.n	801e788 <__kernel_rem_pio2+0x2e8>
 801e70c:	4683      	mov	fp, r0
 801e70e:	2200      	movs	r2, #0
 801e710:	2300      	movs	r3, #0
 801e712:	4630      	mov	r0, r6
 801e714:	4639      	mov	r1, r7
 801e716:	f7e2 f9ef 	bl	8000af8 <__aeabi_dcmpeq>
 801e71a:	2800      	cmp	r0, #0
 801e71c:	f000 80c0 	beq.w	801e8a0 <__kernel_rem_pio2+0x400>
 801e720:	1e65      	subs	r5, r4, #1
 801e722:	462b      	mov	r3, r5
 801e724:	2200      	movs	r2, #0
 801e726:	9902      	ldr	r1, [sp, #8]
 801e728:	428b      	cmp	r3, r1
 801e72a:	da6c      	bge.n	801e806 <__kernel_rem_pio2+0x366>
 801e72c:	2a00      	cmp	r2, #0
 801e72e:	f000 8089 	beq.w	801e844 <__kernel_rem_pio2+0x3a4>
 801e732:	ab0e      	add	r3, sp, #56	; 0x38
 801e734:	f1aa 0a18 	sub.w	sl, sl, #24
 801e738:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801e73c:	2b00      	cmp	r3, #0
 801e73e:	f000 80ad 	beq.w	801e89c <__kernel_rem_pio2+0x3fc>
 801e742:	4650      	mov	r0, sl
 801e744:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 801e7c0 <__kernel_rem_pio2+0x320>
 801e748:	f000 fb42 	bl	801edd0 <scalbn>
 801e74c:	ab9a      	add	r3, sp, #616	; 0x268
 801e74e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801e752:	ec57 6b10 	vmov	r6, r7, d0
 801e756:	00ec      	lsls	r4, r5, #3
 801e758:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 801e75c:	46aa      	mov	sl, r5
 801e75e:	f1ba 0f00 	cmp.w	sl, #0
 801e762:	f280 80d6 	bge.w	801e912 <__kernel_rem_pio2+0x472>
 801e766:	ed9f 8b14 	vldr	d8, [pc, #80]	; 801e7b8 <__kernel_rem_pio2+0x318>
 801e76a:	462e      	mov	r6, r5
 801e76c:	2e00      	cmp	r6, #0
 801e76e:	f2c0 8104 	blt.w	801e97a <__kernel_rem_pio2+0x4da>
 801e772:	ab72      	add	r3, sp, #456	; 0x1c8
 801e774:	ed8d 8b06 	vstr	d8, [sp, #24]
 801e778:	f8df a064 	ldr.w	sl, [pc, #100]	; 801e7e0 <__kernel_rem_pio2+0x340>
 801e77c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 801e780:	f04f 0800 	mov.w	r8, #0
 801e784:	1baf      	subs	r7, r5, r6
 801e786:	e0ea      	b.n	801e95e <__kernel_rem_pio2+0x4be>
 801e788:	f04f 0b02 	mov.w	fp, #2
 801e78c:	e759      	b.n	801e642 <__kernel_rem_pio2+0x1a2>
 801e78e:	f8d8 3000 	ldr.w	r3, [r8]
 801e792:	b955      	cbnz	r5, 801e7aa <__kernel_rem_pio2+0x30a>
 801e794:	b123      	cbz	r3, 801e7a0 <__kernel_rem_pio2+0x300>
 801e796:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801e79a:	f8c8 3000 	str.w	r3, [r8]
 801e79e:	2301      	movs	r3, #1
 801e7a0:	3201      	adds	r2, #1
 801e7a2:	f108 0804 	add.w	r8, r8, #4
 801e7a6:	461d      	mov	r5, r3
 801e7a8:	e752      	b.n	801e650 <__kernel_rem_pio2+0x1b0>
 801e7aa:	1acb      	subs	r3, r1, r3
 801e7ac:	f8c8 3000 	str.w	r3, [r8]
 801e7b0:	462b      	mov	r3, r5
 801e7b2:	e7f5      	b.n	801e7a0 <__kernel_rem_pio2+0x300>
 801e7b4:	f3af 8000 	nop.w
	...
 801e7c4:	3ff00000 	.word	0x3ff00000
 801e7c8:	08024a08 	.word	0x08024a08
 801e7cc:	40200000 	.word	0x40200000
 801e7d0:	3ff00000 	.word	0x3ff00000
 801e7d4:	3e700000 	.word	0x3e700000
 801e7d8:	41700000 	.word	0x41700000
 801e7dc:	3fe00000 	.word	0x3fe00000
 801e7e0:	080249c8 	.word	0x080249c8
 801e7e4:	1e62      	subs	r2, r4, #1
 801e7e6:	ab0e      	add	r3, sp, #56	; 0x38
 801e7e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e7ec:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801e7f0:	a90e      	add	r1, sp, #56	; 0x38
 801e7f2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801e7f6:	e739      	b.n	801e66c <__kernel_rem_pio2+0x1cc>
 801e7f8:	1e62      	subs	r2, r4, #1
 801e7fa:	ab0e      	add	r3, sp, #56	; 0x38
 801e7fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e800:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801e804:	e7f4      	b.n	801e7f0 <__kernel_rem_pio2+0x350>
 801e806:	a90e      	add	r1, sp, #56	; 0x38
 801e808:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801e80c:	3b01      	subs	r3, #1
 801e80e:	430a      	orrs	r2, r1
 801e810:	e789      	b.n	801e726 <__kernel_rem_pio2+0x286>
 801e812:	3301      	adds	r3, #1
 801e814:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801e818:	2900      	cmp	r1, #0
 801e81a:	d0fa      	beq.n	801e812 <__kernel_rem_pio2+0x372>
 801e81c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e81e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 801e822:	446a      	add	r2, sp
 801e824:	3a98      	subs	r2, #152	; 0x98
 801e826:	920a      	str	r2, [sp, #40]	; 0x28
 801e828:	9a08      	ldr	r2, [sp, #32]
 801e82a:	18e3      	adds	r3, r4, r3
 801e82c:	18a5      	adds	r5, r4, r2
 801e82e:	aa22      	add	r2, sp, #136	; 0x88
 801e830:	f104 0801 	add.w	r8, r4, #1
 801e834:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 801e838:	9304      	str	r3, [sp, #16]
 801e83a:	9b04      	ldr	r3, [sp, #16]
 801e83c:	4543      	cmp	r3, r8
 801e83e:	da04      	bge.n	801e84a <__kernel_rem_pio2+0x3aa>
 801e840:	461c      	mov	r4, r3
 801e842:	e6a3      	b.n	801e58c <__kernel_rem_pio2+0xec>
 801e844:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e846:	2301      	movs	r3, #1
 801e848:	e7e4      	b.n	801e814 <__kernel_rem_pio2+0x374>
 801e84a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e84c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801e850:	f7e1 fe80 	bl	8000554 <__aeabi_i2d>
 801e854:	e8e5 0102 	strd	r0, r1, [r5], #8
 801e858:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e85a:	46ab      	mov	fp, r5
 801e85c:	461c      	mov	r4, r3
 801e85e:	f04f 0900 	mov.w	r9, #0
 801e862:	2600      	movs	r6, #0
 801e864:	2700      	movs	r7, #0
 801e866:	9b06      	ldr	r3, [sp, #24]
 801e868:	4599      	cmp	r9, r3
 801e86a:	dd06      	ble.n	801e87a <__kernel_rem_pio2+0x3da>
 801e86c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e86e:	e8e3 6702 	strd	r6, r7, [r3], #8
 801e872:	f108 0801 	add.w	r8, r8, #1
 801e876:	930a      	str	r3, [sp, #40]	; 0x28
 801e878:	e7df      	b.n	801e83a <__kernel_rem_pio2+0x39a>
 801e87a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801e87e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801e882:	f7e1 fed1 	bl	8000628 <__aeabi_dmul>
 801e886:	4602      	mov	r2, r0
 801e888:	460b      	mov	r3, r1
 801e88a:	4630      	mov	r0, r6
 801e88c:	4639      	mov	r1, r7
 801e88e:	f7e1 fd15 	bl	80002bc <__adddf3>
 801e892:	f109 0901 	add.w	r9, r9, #1
 801e896:	4606      	mov	r6, r0
 801e898:	460f      	mov	r7, r1
 801e89a:	e7e4      	b.n	801e866 <__kernel_rem_pio2+0x3c6>
 801e89c:	3d01      	subs	r5, #1
 801e89e:	e748      	b.n	801e732 <__kernel_rem_pio2+0x292>
 801e8a0:	ec47 6b10 	vmov	d0, r6, r7
 801e8a4:	f1ca 0000 	rsb	r0, sl, #0
 801e8a8:	f000 fa92 	bl	801edd0 <scalbn>
 801e8ac:	ec57 6b10 	vmov	r6, r7, d0
 801e8b0:	4ba0      	ldr	r3, [pc, #640]	; (801eb34 <__kernel_rem_pio2+0x694>)
 801e8b2:	ee10 0a10 	vmov	r0, s0
 801e8b6:	2200      	movs	r2, #0
 801e8b8:	4639      	mov	r1, r7
 801e8ba:	f7e2 f93b 	bl	8000b34 <__aeabi_dcmpge>
 801e8be:	b1f8      	cbz	r0, 801e900 <__kernel_rem_pio2+0x460>
 801e8c0:	4b9d      	ldr	r3, [pc, #628]	; (801eb38 <__kernel_rem_pio2+0x698>)
 801e8c2:	2200      	movs	r2, #0
 801e8c4:	4630      	mov	r0, r6
 801e8c6:	4639      	mov	r1, r7
 801e8c8:	f7e1 feae 	bl	8000628 <__aeabi_dmul>
 801e8cc:	f7e2 f95c 	bl	8000b88 <__aeabi_d2iz>
 801e8d0:	4680      	mov	r8, r0
 801e8d2:	f7e1 fe3f 	bl	8000554 <__aeabi_i2d>
 801e8d6:	4b97      	ldr	r3, [pc, #604]	; (801eb34 <__kernel_rem_pio2+0x694>)
 801e8d8:	2200      	movs	r2, #0
 801e8da:	f7e1 fea5 	bl	8000628 <__aeabi_dmul>
 801e8de:	460b      	mov	r3, r1
 801e8e0:	4602      	mov	r2, r0
 801e8e2:	4639      	mov	r1, r7
 801e8e4:	4630      	mov	r0, r6
 801e8e6:	f7e1 fce7 	bl	80002b8 <__aeabi_dsub>
 801e8ea:	f7e2 f94d 	bl	8000b88 <__aeabi_d2iz>
 801e8ee:	1c65      	adds	r5, r4, #1
 801e8f0:	ab0e      	add	r3, sp, #56	; 0x38
 801e8f2:	f10a 0a18 	add.w	sl, sl, #24
 801e8f6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801e8fa:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801e8fe:	e720      	b.n	801e742 <__kernel_rem_pio2+0x2a2>
 801e900:	4630      	mov	r0, r6
 801e902:	4639      	mov	r1, r7
 801e904:	f7e2 f940 	bl	8000b88 <__aeabi_d2iz>
 801e908:	ab0e      	add	r3, sp, #56	; 0x38
 801e90a:	4625      	mov	r5, r4
 801e90c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801e910:	e717      	b.n	801e742 <__kernel_rem_pio2+0x2a2>
 801e912:	ab0e      	add	r3, sp, #56	; 0x38
 801e914:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 801e918:	f7e1 fe1c 	bl	8000554 <__aeabi_i2d>
 801e91c:	4632      	mov	r2, r6
 801e91e:	463b      	mov	r3, r7
 801e920:	f7e1 fe82 	bl	8000628 <__aeabi_dmul>
 801e924:	4b84      	ldr	r3, [pc, #528]	; (801eb38 <__kernel_rem_pio2+0x698>)
 801e926:	e968 0102 	strd	r0, r1, [r8, #-8]!
 801e92a:	2200      	movs	r2, #0
 801e92c:	4630      	mov	r0, r6
 801e92e:	4639      	mov	r1, r7
 801e930:	f7e1 fe7a 	bl	8000628 <__aeabi_dmul>
 801e934:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e938:	4606      	mov	r6, r0
 801e93a:	460f      	mov	r7, r1
 801e93c:	e70f      	b.n	801e75e <__kernel_rem_pio2+0x2be>
 801e93e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 801e942:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 801e946:	f7e1 fe6f 	bl	8000628 <__aeabi_dmul>
 801e94a:	4602      	mov	r2, r0
 801e94c:	460b      	mov	r3, r1
 801e94e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e952:	f7e1 fcb3 	bl	80002bc <__adddf3>
 801e956:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801e95a:	f108 0801 	add.w	r8, r8, #1
 801e95e:	9b02      	ldr	r3, [sp, #8]
 801e960:	4598      	cmp	r8, r3
 801e962:	dc01      	bgt.n	801e968 <__kernel_rem_pio2+0x4c8>
 801e964:	45b8      	cmp	r8, r7
 801e966:	ddea      	ble.n	801e93e <__kernel_rem_pio2+0x49e>
 801e968:	ed9d 7b06 	vldr	d7, [sp, #24]
 801e96c:	ab4a      	add	r3, sp, #296	; 0x128
 801e96e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801e972:	ed87 7b00 	vstr	d7, [r7]
 801e976:	3e01      	subs	r6, #1
 801e978:	e6f8      	b.n	801e76c <__kernel_rem_pio2+0x2cc>
 801e97a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801e97c:	2b02      	cmp	r3, #2
 801e97e:	dc0b      	bgt.n	801e998 <__kernel_rem_pio2+0x4f8>
 801e980:	2b00      	cmp	r3, #0
 801e982:	dc35      	bgt.n	801e9f0 <__kernel_rem_pio2+0x550>
 801e984:	d059      	beq.n	801ea3a <__kernel_rem_pio2+0x59a>
 801e986:	9b04      	ldr	r3, [sp, #16]
 801e988:	f003 0007 	and.w	r0, r3, #7
 801e98c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 801e990:	ecbd 8b02 	vpop	{d8}
 801e994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e998:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801e99a:	2b03      	cmp	r3, #3
 801e99c:	d1f3      	bne.n	801e986 <__kernel_rem_pio2+0x4e6>
 801e99e:	ab4a      	add	r3, sp, #296	; 0x128
 801e9a0:	4423      	add	r3, r4
 801e9a2:	9306      	str	r3, [sp, #24]
 801e9a4:	461c      	mov	r4, r3
 801e9a6:	469a      	mov	sl, r3
 801e9a8:	9502      	str	r5, [sp, #8]
 801e9aa:	9b02      	ldr	r3, [sp, #8]
 801e9ac:	2b00      	cmp	r3, #0
 801e9ae:	f1aa 0a08 	sub.w	sl, sl, #8
 801e9b2:	dc6b      	bgt.n	801ea8c <__kernel_rem_pio2+0x5ec>
 801e9b4:	46aa      	mov	sl, r5
 801e9b6:	f1ba 0f01 	cmp.w	sl, #1
 801e9ba:	f1a4 0408 	sub.w	r4, r4, #8
 801e9be:	f300 8085 	bgt.w	801eacc <__kernel_rem_pio2+0x62c>
 801e9c2:	9c06      	ldr	r4, [sp, #24]
 801e9c4:	2000      	movs	r0, #0
 801e9c6:	3408      	adds	r4, #8
 801e9c8:	2100      	movs	r1, #0
 801e9ca:	2d01      	cmp	r5, #1
 801e9cc:	f300 809d 	bgt.w	801eb0a <__kernel_rem_pio2+0x66a>
 801e9d0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 801e9d4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 801e9d8:	f1bb 0f00 	cmp.w	fp, #0
 801e9dc:	f040 809b 	bne.w	801eb16 <__kernel_rem_pio2+0x676>
 801e9e0:	9b01      	ldr	r3, [sp, #4]
 801e9e2:	e9c3 5600 	strd	r5, r6, [r3]
 801e9e6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801e9ea:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801e9ee:	e7ca      	b.n	801e986 <__kernel_rem_pio2+0x4e6>
 801e9f0:	3408      	adds	r4, #8
 801e9f2:	ab4a      	add	r3, sp, #296	; 0x128
 801e9f4:	441c      	add	r4, r3
 801e9f6:	462e      	mov	r6, r5
 801e9f8:	2000      	movs	r0, #0
 801e9fa:	2100      	movs	r1, #0
 801e9fc:	2e00      	cmp	r6, #0
 801e9fe:	da36      	bge.n	801ea6e <__kernel_rem_pio2+0x5ce>
 801ea00:	f1bb 0f00 	cmp.w	fp, #0
 801ea04:	d039      	beq.n	801ea7a <__kernel_rem_pio2+0x5da>
 801ea06:	4602      	mov	r2, r0
 801ea08:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ea0c:	9c01      	ldr	r4, [sp, #4]
 801ea0e:	e9c4 2300 	strd	r2, r3, [r4]
 801ea12:	4602      	mov	r2, r0
 801ea14:	460b      	mov	r3, r1
 801ea16:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 801ea1a:	f7e1 fc4d 	bl	80002b8 <__aeabi_dsub>
 801ea1e:	ae4c      	add	r6, sp, #304	; 0x130
 801ea20:	2401      	movs	r4, #1
 801ea22:	42a5      	cmp	r5, r4
 801ea24:	da2c      	bge.n	801ea80 <__kernel_rem_pio2+0x5e0>
 801ea26:	f1bb 0f00 	cmp.w	fp, #0
 801ea2a:	d002      	beq.n	801ea32 <__kernel_rem_pio2+0x592>
 801ea2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ea30:	4619      	mov	r1, r3
 801ea32:	9b01      	ldr	r3, [sp, #4]
 801ea34:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801ea38:	e7a5      	b.n	801e986 <__kernel_rem_pio2+0x4e6>
 801ea3a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 801ea3e:	eb0d 0403 	add.w	r4, sp, r3
 801ea42:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801ea46:	2000      	movs	r0, #0
 801ea48:	2100      	movs	r1, #0
 801ea4a:	2d00      	cmp	r5, #0
 801ea4c:	da09      	bge.n	801ea62 <__kernel_rem_pio2+0x5c2>
 801ea4e:	f1bb 0f00 	cmp.w	fp, #0
 801ea52:	d002      	beq.n	801ea5a <__kernel_rem_pio2+0x5ba>
 801ea54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ea58:	4619      	mov	r1, r3
 801ea5a:	9b01      	ldr	r3, [sp, #4]
 801ea5c:	e9c3 0100 	strd	r0, r1, [r3]
 801ea60:	e791      	b.n	801e986 <__kernel_rem_pio2+0x4e6>
 801ea62:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801ea66:	f7e1 fc29 	bl	80002bc <__adddf3>
 801ea6a:	3d01      	subs	r5, #1
 801ea6c:	e7ed      	b.n	801ea4a <__kernel_rem_pio2+0x5aa>
 801ea6e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801ea72:	f7e1 fc23 	bl	80002bc <__adddf3>
 801ea76:	3e01      	subs	r6, #1
 801ea78:	e7c0      	b.n	801e9fc <__kernel_rem_pio2+0x55c>
 801ea7a:	4602      	mov	r2, r0
 801ea7c:	460b      	mov	r3, r1
 801ea7e:	e7c5      	b.n	801ea0c <__kernel_rem_pio2+0x56c>
 801ea80:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801ea84:	f7e1 fc1a 	bl	80002bc <__adddf3>
 801ea88:	3401      	adds	r4, #1
 801ea8a:	e7ca      	b.n	801ea22 <__kernel_rem_pio2+0x582>
 801ea8c:	e9da 8900 	ldrd	r8, r9, [sl]
 801ea90:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801ea94:	9b02      	ldr	r3, [sp, #8]
 801ea96:	3b01      	subs	r3, #1
 801ea98:	9302      	str	r3, [sp, #8]
 801ea9a:	4632      	mov	r2, r6
 801ea9c:	463b      	mov	r3, r7
 801ea9e:	4640      	mov	r0, r8
 801eaa0:	4649      	mov	r1, r9
 801eaa2:	f7e1 fc0b 	bl	80002bc <__adddf3>
 801eaa6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801eaaa:	4602      	mov	r2, r0
 801eaac:	460b      	mov	r3, r1
 801eaae:	4640      	mov	r0, r8
 801eab0:	4649      	mov	r1, r9
 801eab2:	f7e1 fc01 	bl	80002b8 <__aeabi_dsub>
 801eab6:	4632      	mov	r2, r6
 801eab8:	463b      	mov	r3, r7
 801eaba:	f7e1 fbff 	bl	80002bc <__adddf3>
 801eabe:	ed9d 7b08 	vldr	d7, [sp, #32]
 801eac2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801eac6:	ed8a 7b00 	vstr	d7, [sl]
 801eaca:	e76e      	b.n	801e9aa <__kernel_rem_pio2+0x50a>
 801eacc:	e9d4 8900 	ldrd	r8, r9, [r4]
 801ead0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 801ead4:	4640      	mov	r0, r8
 801ead6:	4632      	mov	r2, r6
 801ead8:	463b      	mov	r3, r7
 801eada:	4649      	mov	r1, r9
 801eadc:	f7e1 fbee 	bl	80002bc <__adddf3>
 801eae0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801eae4:	4602      	mov	r2, r0
 801eae6:	460b      	mov	r3, r1
 801eae8:	4640      	mov	r0, r8
 801eaea:	4649      	mov	r1, r9
 801eaec:	f7e1 fbe4 	bl	80002b8 <__aeabi_dsub>
 801eaf0:	4632      	mov	r2, r6
 801eaf2:	463b      	mov	r3, r7
 801eaf4:	f7e1 fbe2 	bl	80002bc <__adddf3>
 801eaf8:	ed9d 7b02 	vldr	d7, [sp, #8]
 801eafc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801eb00:	ed84 7b00 	vstr	d7, [r4]
 801eb04:	f10a 3aff 	add.w	sl, sl, #4294967295
 801eb08:	e755      	b.n	801e9b6 <__kernel_rem_pio2+0x516>
 801eb0a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801eb0e:	f7e1 fbd5 	bl	80002bc <__adddf3>
 801eb12:	3d01      	subs	r5, #1
 801eb14:	e759      	b.n	801e9ca <__kernel_rem_pio2+0x52a>
 801eb16:	9b01      	ldr	r3, [sp, #4]
 801eb18:	9a01      	ldr	r2, [sp, #4]
 801eb1a:	601d      	str	r5, [r3, #0]
 801eb1c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 801eb20:	605c      	str	r4, [r3, #4]
 801eb22:	609f      	str	r7, [r3, #8]
 801eb24:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 801eb28:	60d3      	str	r3, [r2, #12]
 801eb2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801eb2e:	6110      	str	r0, [r2, #16]
 801eb30:	6153      	str	r3, [r2, #20]
 801eb32:	e728      	b.n	801e986 <__kernel_rem_pio2+0x4e6>
 801eb34:	41700000 	.word	0x41700000
 801eb38:	3e700000 	.word	0x3e700000
 801eb3c:	00000000 	.word	0x00000000

0801eb40 <__kernel_sin>:
 801eb40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb44:	ed2d 8b04 	vpush	{d8-d9}
 801eb48:	eeb0 8a41 	vmov.f32	s16, s2
 801eb4c:	eef0 8a61 	vmov.f32	s17, s3
 801eb50:	ec55 4b10 	vmov	r4, r5, d0
 801eb54:	b083      	sub	sp, #12
 801eb56:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801eb5a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801eb5e:	9001      	str	r0, [sp, #4]
 801eb60:	da06      	bge.n	801eb70 <__kernel_sin+0x30>
 801eb62:	ee10 0a10 	vmov	r0, s0
 801eb66:	4629      	mov	r1, r5
 801eb68:	f7e2 f80e 	bl	8000b88 <__aeabi_d2iz>
 801eb6c:	2800      	cmp	r0, #0
 801eb6e:	d051      	beq.n	801ec14 <__kernel_sin+0xd4>
 801eb70:	4622      	mov	r2, r4
 801eb72:	462b      	mov	r3, r5
 801eb74:	4620      	mov	r0, r4
 801eb76:	4629      	mov	r1, r5
 801eb78:	f7e1 fd56 	bl	8000628 <__aeabi_dmul>
 801eb7c:	4682      	mov	sl, r0
 801eb7e:	468b      	mov	fp, r1
 801eb80:	4602      	mov	r2, r0
 801eb82:	460b      	mov	r3, r1
 801eb84:	4620      	mov	r0, r4
 801eb86:	4629      	mov	r1, r5
 801eb88:	f7e1 fd4e 	bl	8000628 <__aeabi_dmul>
 801eb8c:	a341      	add	r3, pc, #260	; (adr r3, 801ec94 <__kernel_sin+0x154>)
 801eb8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb92:	4680      	mov	r8, r0
 801eb94:	4689      	mov	r9, r1
 801eb96:	4650      	mov	r0, sl
 801eb98:	4659      	mov	r1, fp
 801eb9a:	f7e1 fd45 	bl	8000628 <__aeabi_dmul>
 801eb9e:	a33f      	add	r3, pc, #252	; (adr r3, 801ec9c <__kernel_sin+0x15c>)
 801eba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eba4:	f7e1 fb88 	bl	80002b8 <__aeabi_dsub>
 801eba8:	4652      	mov	r2, sl
 801ebaa:	465b      	mov	r3, fp
 801ebac:	f7e1 fd3c 	bl	8000628 <__aeabi_dmul>
 801ebb0:	a33c      	add	r3, pc, #240	; (adr r3, 801eca4 <__kernel_sin+0x164>)
 801ebb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebb6:	f7e1 fb81 	bl	80002bc <__adddf3>
 801ebba:	4652      	mov	r2, sl
 801ebbc:	465b      	mov	r3, fp
 801ebbe:	f7e1 fd33 	bl	8000628 <__aeabi_dmul>
 801ebc2:	a33a      	add	r3, pc, #232	; (adr r3, 801ecac <__kernel_sin+0x16c>)
 801ebc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebc8:	f7e1 fb76 	bl	80002b8 <__aeabi_dsub>
 801ebcc:	4652      	mov	r2, sl
 801ebce:	465b      	mov	r3, fp
 801ebd0:	f7e1 fd2a 	bl	8000628 <__aeabi_dmul>
 801ebd4:	a337      	add	r3, pc, #220	; (adr r3, 801ecb4 <__kernel_sin+0x174>)
 801ebd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebda:	f7e1 fb6f 	bl	80002bc <__adddf3>
 801ebde:	9b01      	ldr	r3, [sp, #4]
 801ebe0:	4606      	mov	r6, r0
 801ebe2:	460f      	mov	r7, r1
 801ebe4:	b9eb      	cbnz	r3, 801ec22 <__kernel_sin+0xe2>
 801ebe6:	4602      	mov	r2, r0
 801ebe8:	460b      	mov	r3, r1
 801ebea:	4650      	mov	r0, sl
 801ebec:	4659      	mov	r1, fp
 801ebee:	f7e1 fd1b 	bl	8000628 <__aeabi_dmul>
 801ebf2:	a325      	add	r3, pc, #148	; (adr r3, 801ec88 <__kernel_sin+0x148>)
 801ebf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebf8:	f7e1 fb5e 	bl	80002b8 <__aeabi_dsub>
 801ebfc:	4642      	mov	r2, r8
 801ebfe:	464b      	mov	r3, r9
 801ec00:	f7e1 fd12 	bl	8000628 <__aeabi_dmul>
 801ec04:	4602      	mov	r2, r0
 801ec06:	460b      	mov	r3, r1
 801ec08:	4620      	mov	r0, r4
 801ec0a:	4629      	mov	r1, r5
 801ec0c:	f7e1 fb56 	bl	80002bc <__adddf3>
 801ec10:	4604      	mov	r4, r0
 801ec12:	460d      	mov	r5, r1
 801ec14:	ec45 4b10 	vmov	d0, r4, r5
 801ec18:	b003      	add	sp, #12
 801ec1a:	ecbd 8b04 	vpop	{d8-d9}
 801ec1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ec22:	4b1b      	ldr	r3, [pc, #108]	; (801ec90 <__kernel_sin+0x150>)
 801ec24:	ec51 0b18 	vmov	r0, r1, d8
 801ec28:	2200      	movs	r2, #0
 801ec2a:	f7e1 fcfd 	bl	8000628 <__aeabi_dmul>
 801ec2e:	4632      	mov	r2, r6
 801ec30:	ec41 0b19 	vmov	d9, r0, r1
 801ec34:	463b      	mov	r3, r7
 801ec36:	4640      	mov	r0, r8
 801ec38:	4649      	mov	r1, r9
 801ec3a:	f7e1 fcf5 	bl	8000628 <__aeabi_dmul>
 801ec3e:	4602      	mov	r2, r0
 801ec40:	460b      	mov	r3, r1
 801ec42:	ec51 0b19 	vmov	r0, r1, d9
 801ec46:	f7e1 fb37 	bl	80002b8 <__aeabi_dsub>
 801ec4a:	4652      	mov	r2, sl
 801ec4c:	465b      	mov	r3, fp
 801ec4e:	f7e1 fceb 	bl	8000628 <__aeabi_dmul>
 801ec52:	ec53 2b18 	vmov	r2, r3, d8
 801ec56:	f7e1 fb2f 	bl	80002b8 <__aeabi_dsub>
 801ec5a:	a30b      	add	r3, pc, #44	; (adr r3, 801ec88 <__kernel_sin+0x148>)
 801ec5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec60:	4606      	mov	r6, r0
 801ec62:	460f      	mov	r7, r1
 801ec64:	4640      	mov	r0, r8
 801ec66:	4649      	mov	r1, r9
 801ec68:	f7e1 fcde 	bl	8000628 <__aeabi_dmul>
 801ec6c:	4602      	mov	r2, r0
 801ec6e:	460b      	mov	r3, r1
 801ec70:	4630      	mov	r0, r6
 801ec72:	4639      	mov	r1, r7
 801ec74:	f7e1 fb22 	bl	80002bc <__adddf3>
 801ec78:	4602      	mov	r2, r0
 801ec7a:	460b      	mov	r3, r1
 801ec7c:	4620      	mov	r0, r4
 801ec7e:	4629      	mov	r1, r5
 801ec80:	f7e1 fb1a 	bl	80002b8 <__aeabi_dsub>
 801ec84:	e7c4      	b.n	801ec10 <__kernel_sin+0xd0>
 801ec86:	bf00      	nop
 801ec88:	55555549 	.word	0x55555549
 801ec8c:	3fc55555 	.word	0x3fc55555
 801ec90:	3fe00000 	.word	0x3fe00000
 801ec94:	5acfd57c 	.word	0x5acfd57c
 801ec98:	3de5d93a 	.word	0x3de5d93a
 801ec9c:	8a2b9ceb 	.word	0x8a2b9ceb
 801eca0:	3e5ae5e6 	.word	0x3e5ae5e6
 801eca4:	57b1fe7d 	.word	0x57b1fe7d
 801eca8:	3ec71de3 	.word	0x3ec71de3
 801ecac:	19c161d5 	.word	0x19c161d5
 801ecb0:	3f2a01a0 	.word	0x3f2a01a0
 801ecb4:	1110f8a6 	.word	0x1110f8a6
 801ecb8:	3f811111 	.word	0x3f811111

0801ecbc <fabs>:
 801ecbc:	ec51 0b10 	vmov	r0, r1, d0
 801ecc0:	ee10 2a10 	vmov	r2, s0
 801ecc4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801ecc8:	ec43 2b10 	vmov	d0, r2, r3
 801eccc:	4770      	bx	lr
	...

0801ecd0 <floor>:
 801ecd0:	ec51 0b10 	vmov	r0, r1, d0
 801ecd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ecd8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801ecdc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801ece0:	2e13      	cmp	r6, #19
 801ece2:	ee10 5a10 	vmov	r5, s0
 801ece6:	ee10 8a10 	vmov	r8, s0
 801ecea:	460c      	mov	r4, r1
 801ecec:	dc32      	bgt.n	801ed54 <floor+0x84>
 801ecee:	2e00      	cmp	r6, #0
 801ecf0:	da14      	bge.n	801ed1c <floor+0x4c>
 801ecf2:	a333      	add	r3, pc, #204	; (adr r3, 801edc0 <floor+0xf0>)
 801ecf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ecf8:	f7e1 fae0 	bl	80002bc <__adddf3>
 801ecfc:	2200      	movs	r2, #0
 801ecfe:	2300      	movs	r3, #0
 801ed00:	f7e1 ff22 	bl	8000b48 <__aeabi_dcmpgt>
 801ed04:	b138      	cbz	r0, 801ed16 <floor+0x46>
 801ed06:	2c00      	cmp	r4, #0
 801ed08:	da57      	bge.n	801edba <floor+0xea>
 801ed0a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801ed0e:	431d      	orrs	r5, r3
 801ed10:	d001      	beq.n	801ed16 <floor+0x46>
 801ed12:	4c2d      	ldr	r4, [pc, #180]	; (801edc8 <floor+0xf8>)
 801ed14:	2500      	movs	r5, #0
 801ed16:	4621      	mov	r1, r4
 801ed18:	4628      	mov	r0, r5
 801ed1a:	e025      	b.n	801ed68 <floor+0x98>
 801ed1c:	4f2b      	ldr	r7, [pc, #172]	; (801edcc <floor+0xfc>)
 801ed1e:	4137      	asrs	r7, r6
 801ed20:	ea01 0307 	and.w	r3, r1, r7
 801ed24:	4303      	orrs	r3, r0
 801ed26:	d01f      	beq.n	801ed68 <floor+0x98>
 801ed28:	a325      	add	r3, pc, #148	; (adr r3, 801edc0 <floor+0xf0>)
 801ed2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ed2e:	f7e1 fac5 	bl	80002bc <__adddf3>
 801ed32:	2200      	movs	r2, #0
 801ed34:	2300      	movs	r3, #0
 801ed36:	f7e1 ff07 	bl	8000b48 <__aeabi_dcmpgt>
 801ed3a:	2800      	cmp	r0, #0
 801ed3c:	d0eb      	beq.n	801ed16 <floor+0x46>
 801ed3e:	2c00      	cmp	r4, #0
 801ed40:	bfbe      	ittt	lt
 801ed42:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801ed46:	fa43 f606 	asrlt.w	r6, r3, r6
 801ed4a:	19a4      	addlt	r4, r4, r6
 801ed4c:	ea24 0407 	bic.w	r4, r4, r7
 801ed50:	2500      	movs	r5, #0
 801ed52:	e7e0      	b.n	801ed16 <floor+0x46>
 801ed54:	2e33      	cmp	r6, #51	; 0x33
 801ed56:	dd0b      	ble.n	801ed70 <floor+0xa0>
 801ed58:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801ed5c:	d104      	bne.n	801ed68 <floor+0x98>
 801ed5e:	ee10 2a10 	vmov	r2, s0
 801ed62:	460b      	mov	r3, r1
 801ed64:	f7e1 faaa 	bl	80002bc <__adddf3>
 801ed68:	ec41 0b10 	vmov	d0, r0, r1
 801ed6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ed70:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801ed74:	f04f 33ff 	mov.w	r3, #4294967295
 801ed78:	fa23 f707 	lsr.w	r7, r3, r7
 801ed7c:	4207      	tst	r7, r0
 801ed7e:	d0f3      	beq.n	801ed68 <floor+0x98>
 801ed80:	a30f      	add	r3, pc, #60	; (adr r3, 801edc0 <floor+0xf0>)
 801ed82:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ed86:	f7e1 fa99 	bl	80002bc <__adddf3>
 801ed8a:	2200      	movs	r2, #0
 801ed8c:	2300      	movs	r3, #0
 801ed8e:	f7e1 fedb 	bl	8000b48 <__aeabi_dcmpgt>
 801ed92:	2800      	cmp	r0, #0
 801ed94:	d0bf      	beq.n	801ed16 <floor+0x46>
 801ed96:	2c00      	cmp	r4, #0
 801ed98:	da02      	bge.n	801eda0 <floor+0xd0>
 801ed9a:	2e14      	cmp	r6, #20
 801ed9c:	d103      	bne.n	801eda6 <floor+0xd6>
 801ed9e:	3401      	adds	r4, #1
 801eda0:	ea25 0507 	bic.w	r5, r5, r7
 801eda4:	e7b7      	b.n	801ed16 <floor+0x46>
 801eda6:	2301      	movs	r3, #1
 801eda8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801edac:	fa03 f606 	lsl.w	r6, r3, r6
 801edb0:	4435      	add	r5, r6
 801edb2:	4545      	cmp	r5, r8
 801edb4:	bf38      	it	cc
 801edb6:	18e4      	addcc	r4, r4, r3
 801edb8:	e7f2      	b.n	801eda0 <floor+0xd0>
 801edba:	2500      	movs	r5, #0
 801edbc:	462c      	mov	r4, r5
 801edbe:	e7aa      	b.n	801ed16 <floor+0x46>
 801edc0:	8800759c 	.word	0x8800759c
 801edc4:	7e37e43c 	.word	0x7e37e43c
 801edc8:	bff00000 	.word	0xbff00000
 801edcc:	000fffff 	.word	0x000fffff

0801edd0 <scalbn>:
 801edd0:	b570      	push	{r4, r5, r6, lr}
 801edd2:	ec55 4b10 	vmov	r4, r5, d0
 801edd6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801edda:	4606      	mov	r6, r0
 801eddc:	462b      	mov	r3, r5
 801edde:	b99a      	cbnz	r2, 801ee08 <scalbn+0x38>
 801ede0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801ede4:	4323      	orrs	r3, r4
 801ede6:	d036      	beq.n	801ee56 <scalbn+0x86>
 801ede8:	4b39      	ldr	r3, [pc, #228]	; (801eed0 <scalbn+0x100>)
 801edea:	4629      	mov	r1, r5
 801edec:	ee10 0a10 	vmov	r0, s0
 801edf0:	2200      	movs	r2, #0
 801edf2:	f7e1 fc19 	bl	8000628 <__aeabi_dmul>
 801edf6:	4b37      	ldr	r3, [pc, #220]	; (801eed4 <scalbn+0x104>)
 801edf8:	429e      	cmp	r6, r3
 801edfa:	4604      	mov	r4, r0
 801edfc:	460d      	mov	r5, r1
 801edfe:	da10      	bge.n	801ee22 <scalbn+0x52>
 801ee00:	a32b      	add	r3, pc, #172	; (adr r3, 801eeb0 <scalbn+0xe0>)
 801ee02:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee06:	e03a      	b.n	801ee7e <scalbn+0xae>
 801ee08:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801ee0c:	428a      	cmp	r2, r1
 801ee0e:	d10c      	bne.n	801ee2a <scalbn+0x5a>
 801ee10:	ee10 2a10 	vmov	r2, s0
 801ee14:	4620      	mov	r0, r4
 801ee16:	4629      	mov	r1, r5
 801ee18:	f7e1 fa50 	bl	80002bc <__adddf3>
 801ee1c:	4604      	mov	r4, r0
 801ee1e:	460d      	mov	r5, r1
 801ee20:	e019      	b.n	801ee56 <scalbn+0x86>
 801ee22:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801ee26:	460b      	mov	r3, r1
 801ee28:	3a36      	subs	r2, #54	; 0x36
 801ee2a:	4432      	add	r2, r6
 801ee2c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801ee30:	428a      	cmp	r2, r1
 801ee32:	dd08      	ble.n	801ee46 <scalbn+0x76>
 801ee34:	2d00      	cmp	r5, #0
 801ee36:	a120      	add	r1, pc, #128	; (adr r1, 801eeb8 <scalbn+0xe8>)
 801ee38:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ee3c:	da1c      	bge.n	801ee78 <scalbn+0xa8>
 801ee3e:	a120      	add	r1, pc, #128	; (adr r1, 801eec0 <scalbn+0xf0>)
 801ee40:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ee44:	e018      	b.n	801ee78 <scalbn+0xa8>
 801ee46:	2a00      	cmp	r2, #0
 801ee48:	dd08      	ble.n	801ee5c <scalbn+0x8c>
 801ee4a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801ee4e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801ee52:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801ee56:	ec45 4b10 	vmov	d0, r4, r5
 801ee5a:	bd70      	pop	{r4, r5, r6, pc}
 801ee5c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801ee60:	da19      	bge.n	801ee96 <scalbn+0xc6>
 801ee62:	f24c 3350 	movw	r3, #50000	; 0xc350
 801ee66:	429e      	cmp	r6, r3
 801ee68:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801ee6c:	dd0a      	ble.n	801ee84 <scalbn+0xb4>
 801ee6e:	a112      	add	r1, pc, #72	; (adr r1, 801eeb8 <scalbn+0xe8>)
 801ee70:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ee74:	2b00      	cmp	r3, #0
 801ee76:	d1e2      	bne.n	801ee3e <scalbn+0x6e>
 801ee78:	a30f      	add	r3, pc, #60	; (adr r3, 801eeb8 <scalbn+0xe8>)
 801ee7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee7e:	f7e1 fbd3 	bl	8000628 <__aeabi_dmul>
 801ee82:	e7cb      	b.n	801ee1c <scalbn+0x4c>
 801ee84:	a10a      	add	r1, pc, #40	; (adr r1, 801eeb0 <scalbn+0xe0>)
 801ee86:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ee8a:	2b00      	cmp	r3, #0
 801ee8c:	d0b8      	beq.n	801ee00 <scalbn+0x30>
 801ee8e:	a10e      	add	r1, pc, #56	; (adr r1, 801eec8 <scalbn+0xf8>)
 801ee90:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ee94:	e7b4      	b.n	801ee00 <scalbn+0x30>
 801ee96:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801ee9a:	3236      	adds	r2, #54	; 0x36
 801ee9c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801eea0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801eea4:	4620      	mov	r0, r4
 801eea6:	4b0c      	ldr	r3, [pc, #48]	; (801eed8 <scalbn+0x108>)
 801eea8:	2200      	movs	r2, #0
 801eeaa:	e7e8      	b.n	801ee7e <scalbn+0xae>
 801eeac:	f3af 8000 	nop.w
 801eeb0:	c2f8f359 	.word	0xc2f8f359
 801eeb4:	01a56e1f 	.word	0x01a56e1f
 801eeb8:	8800759c 	.word	0x8800759c
 801eebc:	7e37e43c 	.word	0x7e37e43c
 801eec0:	8800759c 	.word	0x8800759c
 801eec4:	fe37e43c 	.word	0xfe37e43c
 801eec8:	c2f8f359 	.word	0xc2f8f359
 801eecc:	81a56e1f 	.word	0x81a56e1f
 801eed0:	43500000 	.word	0x43500000
 801eed4:	ffff3cb0 	.word	0xffff3cb0
 801eed8:	3c900000 	.word	0x3c900000

0801eedc <_init>:
 801eedc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eede:	bf00      	nop
 801eee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801eee2:	bc08      	pop	{r3}
 801eee4:	469e      	mov	lr, r3
 801eee6:	4770      	bx	lr

0801eee8 <_fini>:
 801eee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eeea:	bf00      	nop
 801eeec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801eeee:	bc08      	pop	{r3}
 801eef0:	469e      	mov	lr, r3
 801eef2:	4770      	bx	lr
