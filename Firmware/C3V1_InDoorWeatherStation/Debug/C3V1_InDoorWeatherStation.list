
C3V1_InDoorWeatherStation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000edf8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000884  0800efb8  0800efb8  0001efb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f83c  0800f83c  00020254  2**0
                  CONTENTS
  4 .ARM          00000008  0800f83c  0800f83c  0001f83c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f844  0800f844  00020254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f844  0800f844  0001f844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f848  0800f848  0001f848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000254  20000000  0800f84c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043c8  20000254  0800faa0  00020254  2**2
                  ALLOC
 10 ._user_heap_stack 00000e04  2000461c  0800faa0  0002461c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020e88  00000000  00000000  00020284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046f2  00000000  00000000  0004110c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001978  00000000  00000000  00045800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001760  00000000  00000000  00047178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031822  00000000  00000000  000488d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021935  00000000  00000000  0007a0fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00120b0c  00000000  00000000  0009ba2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001bc53b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d14  00000000  00000000  001bc58c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000254 	.word	0x20000254
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800efa0 	.word	0x0800efa0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000258 	.word	0x20000258
 80001fc:	0800efa0 	.word	0x0800efa0

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9aa 	b.w	8001024 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468e      	mov	lr, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d14d      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d62:	428a      	cmp	r2, r1
 8000d64:	4694      	mov	ip, r2
 8000d66:	d969      	bls.n	8000e3c <__udivmoddi4+0xe8>
 8000d68:	fab2 f282 	clz	r2, r2
 8000d6c:	b152      	cbz	r2, 8000d84 <__udivmoddi4+0x30>
 8000d6e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d72:	f1c2 0120 	rsb	r1, r2, #32
 8000d76:	fa20 f101 	lsr.w	r1, r0, r1
 8000d7a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d82:	4094      	lsls	r4, r2
 8000d84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d88:	0c21      	lsrs	r1, r4, #16
 8000d8a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d8e:	fa1f f78c 	uxth.w	r7, ip
 8000d92:	fb08 e316 	mls	r3, r8, r6, lr
 8000d96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d9a:	fb06 f107 	mul.w	r1, r6, r7
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000daa:	f080 811f 	bcs.w	8000fec <__udivmoddi4+0x298>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 811c 	bls.w	8000fec <__udivmoddi4+0x298>
 8000db4:	3e02      	subs	r6, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 f707 	mul.w	r7, r0, r7
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	d90a      	bls.n	8000de6 <__udivmoddi4+0x92>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd8:	f080 810a 	bcs.w	8000ff0 <__udivmoddi4+0x29c>
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	f240 8107 	bls.w	8000ff0 <__udivmoddi4+0x29c>
 8000de2:	4464      	add	r4, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dea:	1be4      	subs	r4, r4, r7
 8000dec:	2600      	movs	r6, #0
 8000dee:	b11d      	cbz	r5, 8000df8 <__udivmoddi4+0xa4>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c5 4300 	strd	r4, r3, [r5]
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d909      	bls.n	8000e16 <__udivmoddi4+0xc2>
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	f000 80ef 	beq.w	8000fe6 <__udivmoddi4+0x292>
 8000e08:	2600      	movs	r6, #0
 8000e0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e0e:	4630      	mov	r0, r6
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	fab3 f683 	clz	r6, r3
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	d14a      	bne.n	8000eb4 <__udivmoddi4+0x160>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d302      	bcc.n	8000e28 <__udivmoddi4+0xd4>
 8000e22:	4282      	cmp	r2, r0
 8000e24:	f200 80f9 	bhi.w	800101a <__udivmoddi4+0x2c6>
 8000e28:	1a84      	subs	r4, r0, r2
 8000e2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e2e:	2001      	movs	r0, #1
 8000e30:	469e      	mov	lr, r3
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	d0e0      	beq.n	8000df8 <__udivmoddi4+0xa4>
 8000e36:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e3a:	e7dd      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000e3c:	b902      	cbnz	r2, 8000e40 <__udivmoddi4+0xec>
 8000e3e:	deff      	udf	#255	; 0xff
 8000e40:	fab2 f282 	clz	r2, r2
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	f040 8092 	bne.w	8000f6e <__udivmoddi4+0x21a>
 8000e4a:	eba1 010c 	sub.w	r1, r1, ip
 8000e4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	2601      	movs	r6, #1
 8000e58:	0c20      	lsrs	r0, r4, #16
 8000e5a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e5e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e62:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e66:	fb0e f003 	mul.w	r0, lr, r3
 8000e6a:	4288      	cmp	r0, r1
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x12c>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x12a>
 8000e78:	4288      	cmp	r0, r1
 8000e7a:	f200 80cb 	bhi.w	8001014 <__udivmoddi4+0x2c0>
 8000e7e:	4643      	mov	r3, r8
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e88:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e90:	fb0e fe00 	mul.w	lr, lr, r0
 8000e94:	45a6      	cmp	lr, r4
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x156>
 8000e98:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea0:	d202      	bcs.n	8000ea8 <__udivmoddi4+0x154>
 8000ea2:	45a6      	cmp	lr, r4
 8000ea4:	f200 80bb 	bhi.w	800101e <__udivmoddi4+0x2ca>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000eb2:	e79c      	b.n	8000dee <__udivmoddi4+0x9a>
 8000eb4:	f1c6 0720 	rsb	r7, r6, #32
 8000eb8:	40b3      	lsls	r3, r6
 8000eba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ebe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ec2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ec6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eca:	431c      	orrs	r4, r3
 8000ecc:	40f9      	lsrs	r1, r7
 8000ece:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eda:	0c20      	lsrs	r0, r4, #16
 8000edc:	fa1f fe8c 	uxth.w	lr, ip
 8000ee0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ee4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ee8:	fb08 f00e 	mul.w	r0, r8, lr
 8000eec:	4288      	cmp	r0, r1
 8000eee:	fa02 f206 	lsl.w	r2, r2, r6
 8000ef2:	d90b      	bls.n	8000f0c <__udivmoddi4+0x1b8>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000efc:	f080 8088 	bcs.w	8001010 <__udivmoddi4+0x2bc>
 8000f00:	4288      	cmp	r0, r1
 8000f02:	f240 8085 	bls.w	8001010 <__udivmoddi4+0x2bc>
 8000f06:	f1a8 0802 	sub.w	r8, r8, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	1a09      	subs	r1, r1, r0
 8000f0e:	b2a4      	uxth	r4, r4
 8000f10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f14:	fb09 1110 	mls	r1, r9, r0, r1
 8000f18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f20:	458e      	cmp	lr, r1
 8000f22:	d908      	bls.n	8000f36 <__udivmoddi4+0x1e2>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f2c:	d26c      	bcs.n	8001008 <__udivmoddi4+0x2b4>
 8000f2e:	458e      	cmp	lr, r1
 8000f30:	d96a      	bls.n	8001008 <__udivmoddi4+0x2b4>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4461      	add	r1, ip
 8000f36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f3e:	eba1 010e 	sub.w	r1, r1, lr
 8000f42:	42a1      	cmp	r1, r4
 8000f44:	46c8      	mov	r8, r9
 8000f46:	46a6      	mov	lr, r4
 8000f48:	d356      	bcc.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f4a:	d053      	beq.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f4c:	b15d      	cbz	r5, 8000f66 <__udivmoddi4+0x212>
 8000f4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f52:	eb61 010e 	sbc.w	r1, r1, lr
 8000f56:	fa01 f707 	lsl.w	r7, r1, r7
 8000f5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f5e:	40f1      	lsrs	r1, r6
 8000f60:	431f      	orrs	r7, r3
 8000f62:	e9c5 7100 	strd	r7, r1, [r5]
 8000f66:	2600      	movs	r6, #0
 8000f68:	4631      	mov	r1, r6
 8000f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6e:	f1c2 0320 	rsb	r3, r2, #32
 8000f72:	40d8      	lsrs	r0, r3
 8000f74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f78:	fa21 f303 	lsr.w	r3, r1, r3
 8000f7c:	4091      	lsls	r1, r2
 8000f7e:	4301      	orrs	r1, r0
 8000f80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f84:	fa1f fe8c 	uxth.w	lr, ip
 8000f88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f90:	0c0b      	lsrs	r3, r1, #16
 8000f92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f96:	fb00 f60e 	mul.w	r6, r0, lr
 8000f9a:	429e      	cmp	r6, r3
 8000f9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000fa0:	d908      	bls.n	8000fb4 <__udivmoddi4+0x260>
 8000fa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000faa:	d22f      	bcs.n	800100c <__udivmoddi4+0x2b8>
 8000fac:	429e      	cmp	r6, r3
 8000fae:	d92d      	bls.n	800100c <__udivmoddi4+0x2b8>
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	4463      	add	r3, ip
 8000fb4:	1b9b      	subs	r3, r3, r6
 8000fb6:	b289      	uxth	r1, r1
 8000fb8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fbc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fc4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fc8:	428b      	cmp	r3, r1
 8000fca:	d908      	bls.n	8000fde <__udivmoddi4+0x28a>
 8000fcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fd0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fd4:	d216      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fd6:	428b      	cmp	r3, r1
 8000fd8:	d914      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fda:	3e02      	subs	r6, #2
 8000fdc:	4461      	add	r1, ip
 8000fde:	1ac9      	subs	r1, r1, r3
 8000fe0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fe4:	e738      	b.n	8000e58 <__udivmoddi4+0x104>
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e705      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e3      	b.n	8000db8 <__udivmoddi4+0x64>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6f8      	b.n	8000de6 <__udivmoddi4+0x92>
 8000ff4:	454b      	cmp	r3, r9
 8000ff6:	d2a9      	bcs.n	8000f4c <__udivmoddi4+0x1f8>
 8000ff8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ffc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001000:	3801      	subs	r0, #1
 8001002:	e7a3      	b.n	8000f4c <__udivmoddi4+0x1f8>
 8001004:	4646      	mov	r6, r8
 8001006:	e7ea      	b.n	8000fde <__udivmoddi4+0x28a>
 8001008:	4620      	mov	r0, r4
 800100a:	e794      	b.n	8000f36 <__udivmoddi4+0x1e2>
 800100c:	4640      	mov	r0, r8
 800100e:	e7d1      	b.n	8000fb4 <__udivmoddi4+0x260>
 8001010:	46d0      	mov	r8, sl
 8001012:	e77b      	b.n	8000f0c <__udivmoddi4+0x1b8>
 8001014:	3b02      	subs	r3, #2
 8001016:	4461      	add	r1, ip
 8001018:	e732      	b.n	8000e80 <__udivmoddi4+0x12c>
 800101a:	4630      	mov	r0, r6
 800101c:	e709      	b.n	8000e32 <__udivmoddi4+0xde>
 800101e:	4464      	add	r4, ip
 8001020:	3802      	subs	r0, #2
 8001022:	e742      	b.n	8000eaa <__udivmoddi4+0x156>

08001024 <__aeabi_idiv0>:
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <fram_CsLow>:
#include "main.h"
#include "spi.h"
#include "gpio.h"
#include "fram.h"
void fram_CsLow(fram_t *fram)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(fram->cs_port, fram->cs_pin, 0);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6898      	ldr	r0, [r3, #8]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	8a5b      	ldrh	r3, [r3, #18]
 8001038:	2200      	movs	r2, #0
 800103a:	4619      	mov	r1, r3
 800103c:	f003 fc88 	bl	8004950 <HAL_GPIO_WritePin>
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <fram_CsHigh>:
void fram_CsHigh(fram_t *fram)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(fram->cs_port, fram->cs_pin, 1);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6898      	ldr	r0, [r3, #8]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	8a5b      	ldrh	r3, [r3, #18]
 8001058:	2201      	movs	r2, #1
 800105a:	4619      	mov	r1, r3
 800105c:	f003 fc78 	bl	8004950 <HAL_GPIO_WritePin>
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <fram_SetWELBit>:
void fram_SetWELBit(fram_t *fram)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	uint8_t com=WREN;
 8001070:	2306      	movs	r3, #6
 8001072:	73fb      	strb	r3, [r7, #15]
	fram_CsLow(fram);
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff ffd7 	bl	8001028 <fram_CsLow>
	HAL_SPI_Transmit(fram->fram_spi, &com, 1, 1000);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6818      	ldr	r0, [r3, #0]
 800107e:	f107 010f 	add.w	r1, r7, #15
 8001082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001086:	2201      	movs	r2, #1
 8001088:	f005 fd37 	bl	8006afa <HAL_SPI_Transmit>
	fram_CsHigh(fram);
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff ffdb 	bl	8001048 <fram_CsHigh>
}
 8001092:	bf00      	nop
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <fram_SetProtectedBlocs>:
void fram_SetProtectedBlocs(fram_t *fram,uint8_t blocs)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b084      	sub	sp, #16
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
 80010a2:	460b      	mov	r3, r1
 80010a4:	70fb      	strb	r3, [r7, #3]
	if(blocs>3)
 80010a6:	78fb      	ldrb	r3, [r7, #3]
 80010a8:	2b03      	cmp	r3, #3
 80010aa:	d901      	bls.n	80010b0 <fram_SetProtectedBlocs+0x16>
	{
		blocs=3;
 80010ac:	2303      	movs	r3, #3
 80010ae:	70fb      	strb	r3, [r7, #3]
	}
	uint8_t data[2];
	data[0]=WRSR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	733b      	strb	r3, [r7, #12]
	data[1]=(blocs<<2);
 80010b4:	78fb      	ldrb	r3, [r7, #3]
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	737b      	strb	r3, [r7, #13]
	fram_SetWELBit(fram);
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ffd3 	bl	8001068 <fram_SetWELBit>
	fram_CsLow(fram);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff ffb0 	bl	8001028 <fram_CsLow>
	HAL_SPI_Transmit(fram->fram_spi, data, 2, 1000);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6818      	ldr	r0, [r3, #0]
 80010cc:	f107 010c 	add.w	r1, r7, #12
 80010d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d4:	2202      	movs	r2, #2
 80010d6:	f005 fd10 	bl	8006afa <HAL_SPI_Transmit>
	fram_CsHigh(fram);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff ffb4 	bl	8001048 <fram_CsHigh>
}
 80010e0:	bf00      	nop
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <fram_ReadSreg>:
uint8_t fram_ReadSreg(fram_t *fram)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	fram_CsLow(fram);
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff ff99 	bl	8001028 <fram_CsLow>
	uint8_t _sreg;
	uint8_t com=RDSR;
 80010f6:	2305      	movs	r3, #5
 80010f8:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(fram->fram_spi, &com, 1, 1000);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6818      	ldr	r0, [r3, #0]
 80010fe:	f107 010e 	add.w	r1, r7, #14
 8001102:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001106:	2201      	movs	r2, #1
 8001108:	f005 fcf7 	bl	8006afa <HAL_SPI_Transmit>
	HAL_SPI_Receive(fram->fram_spi, &_sreg, 1, 1000);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6818      	ldr	r0, [r3, #0]
 8001110:	f107 010f 	add.w	r1, r7, #15
 8001114:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001118:	2201      	movs	r2, #1
 800111a:	f005 fe5c 	bl	8006dd6 <HAL_SPI_Receive>
	fram_CsHigh(fram);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff ff92 	bl	8001048 <fram_CsHigh>
	return _sreg;
 8001124:	7bfb      	ldrb	r3, [r7, #15]
}
 8001126:	4618      	mov	r0, r3
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <fram_ReadID>:
	HAL_SPI_Transmit(fram->fram_spi, data, 3, 1000);
	HAL_SPI_Receive(fram->fram_spi, buff, length, 1000);
	fram_CsHigh(fram);
}
uint32_t fram_ReadID(fram_t *fram)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b084      	sub	sp, #16
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
	uint8_t com,id[4];
	com=RDID;
 8001136:	239f      	movs	r3, #159	; 0x9f
 8001138:	73fb      	strb	r3, [r7, #15]
	fram_CsLow(fram);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff ff74 	bl	8001028 <fram_CsLow>
	HAL_SPI_Transmit(fram->fram_spi, &com, 1, 1000);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6818      	ldr	r0, [r3, #0]
 8001144:	f107 010f 	add.w	r1, r7, #15
 8001148:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114c:	2201      	movs	r2, #1
 800114e:	f005 fcd4 	bl	8006afa <HAL_SPI_Transmit>
	HAL_SPI_Receive(fram->fram_spi, id, 4, 1000);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6818      	ldr	r0, [r3, #0]
 8001156:	f107 0108 	add.w	r1, r7, #8
 800115a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115e:	2204      	movs	r2, #4
 8001160:	f005 fe39 	bl	8006dd6 <HAL_SPI_Receive>
	fram_CsHigh(fram);
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff ff6f 	bl	8001048 <fram_CsHigh>
	return ((id[0]<<24)|(id[1]<<16)|(id[2]<<8)|id[3]);
 800116a:	7a3b      	ldrb	r3, [r7, #8]
 800116c:	061a      	lsls	r2, r3, #24
 800116e:	7a7b      	ldrb	r3, [r7, #9]
 8001170:	041b      	lsls	r3, r3, #16
 8001172:	431a      	orrs	r2, r3
 8001174:	7abb      	ldrb	r3, [r7, #10]
 8001176:	021b      	lsls	r3, r3, #8
 8001178:	4313      	orrs	r3, r2
 800117a:	7afa      	ldrb	r2, [r7, #11]
 800117c:	4313      	orrs	r3, r2
}
 800117e:	4618      	mov	r0, r3
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <fram_Init>:
void fram_Init(fram_t *fram,SPI_HandleTypeDef *spi,GPIO_TypeDef *_hold_port,GPIO_TypeDef *_cs_port,GPIO_TypeDef *_wp_port,uint16_t _hold_pin,uint16_t _cs_pin,uint16_t _wp_pin)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b084      	sub	sp, #16
 800118a:	af00      	add	r7, sp, #0
 800118c:	60f8      	str	r0, [r7, #12]
 800118e:	60b9      	str	r1, [r7, #8]
 8001190:	607a      	str	r2, [r7, #4]
 8001192:	603b      	str	r3, [r7, #0]
	fram->fram_spi=spi;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	68ba      	ldr	r2, [r7, #8]
 8001198:	601a      	str	r2, [r3, #0]
	fram->hold_port=_hold_port;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	605a      	str	r2, [r3, #4]
	fram->hold_pin=_hold_pin;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	8bba      	ldrh	r2, [r7, #28]
 80011a4:	821a      	strh	r2, [r3, #16]
	fram->cs_port=_cs_port;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	609a      	str	r2, [r3, #8]
	fram->cs_pin=_cs_pin;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	8c3a      	ldrh	r2, [r7, #32]
 80011b0:	825a      	strh	r2, [r3, #18]
	fram->wp_port=_wp_port;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	60da      	str	r2, [r3, #12]
	fram->wp_pin=_wp_pin;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80011bc:	829a      	strh	r2, [r3, #20]
	HAL_GPIO_WritePin(fram->hold_port, fram->hold_pin, 1);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	6858      	ldr	r0, [r3, #4]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	8a1b      	ldrh	r3, [r3, #16]
 80011c6:	2201      	movs	r2, #1
 80011c8:	4619      	mov	r1, r3
 80011ca:	f003 fbc1 	bl	8004950 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fram->wp_port, fram->wp_pin, 1);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	68d8      	ldr	r0, [r3, #12]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	8a9b      	ldrh	r3, [r3, #20]
 80011d6:	2201      	movs	r2, #1
 80011d8:	4619      	mov	r1, r3
 80011da:	f003 fbb9 	bl	8004950 <HAL_GPIO_WritePin>
	fram_SetProtectedBlocs(fram, 0);
 80011de:	2100      	movs	r1, #0
 80011e0:	68f8      	ldr	r0, [r7, #12]
 80011e2:	f7ff ff5a 	bl	800109a <fram_SetProtectedBlocs>
	fram->sreg=fram_ReadSreg(fram);
 80011e6:	68f8      	ldr	r0, [r7, #12]
 80011e8:	f7ff ff7e 	bl	80010e8 <fram_ReadSreg>
 80011ec:	4603      	mov	r3, r0
 80011ee:	461a      	mov	r2, r3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	759a      	strb	r2, [r3, #22]
	fram->framID=fram_ReadID(fram);
 80011f4:	68f8      	ldr	r0, [r7, #12]
 80011f6:	f7ff ff9a 	bl	800112e <fram_ReadID>
 80011fa:	4602      	mov	r2, r0
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	619a      	str	r2, [r3, #24]
}
 8001200:	bf00      	nop
 8001202:	3710      	adds	r7, #16
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <GFX_DrawPixelScreen>:

#if USING_STRINGS == 1
const uint8_t *font;
uint8_t size = 1;
static void GFX_DrawPixelScreen(uint16_t x, uint16_t y, uint8_t color, Screen_TypeDef Screen)
{
 8001208:	b590      	push	{r4, r7, lr}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	4604      	mov	r4, r0
 8001210:	4608      	mov	r0, r1
 8001212:	4611      	mov	r1, r2
 8001214:	461a      	mov	r2, r3
 8001216:	4623      	mov	r3, r4
 8001218:	80fb      	strh	r3, [r7, #6]
 800121a:	4603      	mov	r3, r0
 800121c:	80bb      	strh	r3, [r7, #4]
 800121e:	460b      	mov	r3, r1
 8001220:	70fb      	strb	r3, [r7, #3]
 8001222:	4613      	mov	r3, r2
 8001224:	70bb      	strb	r3, [r7, #2]
   if(Screen == OLED)
 8001226:	78bb      	ldrb	r3, [r7, #2]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d108      	bne.n	800123e <GFX_DrawPixelScreen+0x36>
   {
      GFX_DrawPixelOled(x, y, color);
 800122c:	88fb      	ldrh	r3, [r7, #6]
 800122e:	b2db      	uxtb	r3, r3
 8001230:	88ba      	ldrh	r2, [r7, #4]
 8001232:	b2d1      	uxtb	r1, r2
 8001234:	78fa      	ldrb	r2, [r7, #3]
 8001236:	4618      	mov	r0, r3
 8001238:	f001 fef0 	bl	800301c <ssd1306_set_pixel>
   }
   else if(Screen == E_PAPIER)
   {
      GFX_DrawPixelEpapier(x, y, color);
   }
}
 800123c:	e008      	b.n	8001250 <GFX_DrawPixelScreen+0x48>
   else if(Screen == E_PAPIER)
 800123e:	78bb      	ldrb	r3, [r7, #2]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d105      	bne.n	8001250 <GFX_DrawPixelScreen+0x48>
      GFX_DrawPixelEpapier(x, y, color);
 8001244:	88fb      	ldrh	r3, [r7, #6]
 8001246:	88b9      	ldrh	r1, [r7, #4]
 8001248:	78fa      	ldrb	r2, [r7, #3]
 800124a:	4618      	mov	r0, r3
 800124c:	f000 fb90 	bl	8001970 <e_papier_set_pixel>
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	bd90      	pop	{r4, r7, pc}

08001258 <GFX_SetFont>:
void GFX_SetFont(const uint8_t *font_t)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
   font = font_t;
 8001260:	4a04      	ldr	r2, [pc, #16]	; (8001274 <GFX_SetFont+0x1c>)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6013      	str	r3, [r2, #0]
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	20000270 	.word	0x20000270

08001278 <GFX_DrawChar>:
{
   return size;
}

void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background, Screen_TypeDef Screen)
{
 8001278:	b590      	push	{r4, r7, lr}
 800127a:	b089      	sub	sp, #36	; 0x24
 800127c:	af02      	add	r7, sp, #8
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	4611      	mov	r1, r2
 8001284:	461a      	mov	r2, r3
 8001286:	460b      	mov	r3, r1
 8001288:	71fb      	strb	r3, [r7, #7]
 800128a:	4613      	mov	r3, r2
 800128c:	71bb      	strb	r3, [r7, #6]
   if(chr > 0x7E)
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	2b7e      	cmp	r3, #126	; 0x7e
 8001292:	f200 80a7 	bhi.w	80013e4 <GFX_DrawChar+0x16c>
      return; // chr > '~'

   for(uint8_t i = 0; i < font[1]; i++) // Each column (Width)
 8001296:	2300      	movs	r3, #0
 8001298:	75fb      	strb	r3, [r7, #23]
 800129a:	e09a      	b.n	80013d2 <GFX_DrawChar+0x15a>
   {
      uint8_t line = (uint8_t)font[(chr - 0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 800129c:	4b53      	ldr	r3, [pc, #332]	; (80013ec <GFX_DrawChar+0x174>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	3b20      	subs	r3, #32
 80012a4:	4951      	ldr	r1, [pc, #324]	; (80013ec <GFX_DrawChar+0x174>)
 80012a6:	6809      	ldr	r1, [r1, #0]
 80012a8:	3101      	adds	r1, #1
 80012aa:	7809      	ldrb	r1, [r1, #0]
 80012ac:	fb03 f101 	mul.w	r1, r3, r1
 80012b0:	7dfb      	ldrb	r3, [r7, #23]
 80012b2:	440b      	add	r3, r1
 80012b4:	3302      	adds	r3, #2
 80012b6:	4413      	add	r3, r2
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	75bb      	strb	r3, [r7, #22]

      for(int8_t j = 0; j < font[0]; j++, line >>= 1) // For each pixel in column
 80012bc:	2300      	movs	r3, #0
 80012be:	757b      	strb	r3, [r7, #21]
 80012c0:	e07c      	b.n	80013bc <GFX_DrawChar+0x144>
      {
         if(line & 1) // Check last pixel in line
 80012c2:	7dbb      	ldrb	r3, [r7, #22]
 80012c4:	f003 0301 	and.w	r3, r3, #1
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d034      	beq.n	8001336 <GFX_DrawChar+0xbe>
         {
            if(size == 1)
 80012cc:	4b48      	ldr	r3, [pc, #288]	; (80013f0 <GFX_DrawChar+0x178>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d112      	bne.n	80012fa <GFX_DrawChar+0x82>
               GFX_DrawPixelScreen(x + i, y + j, color, Screen); // Draw this pixel
 80012d4:	7dfb      	ldrb	r3, [r7, #23]
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	b29b      	uxth	r3, r3
 80012dc:	4413      	add	r3, r2
 80012de:	b298      	uxth	r0, r3
 80012e0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80012e4:	b29a      	uxth	r2, r3
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	4413      	add	r3, r2
 80012ec:	b299      	uxth	r1, r3
 80012ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80012f2:	79ba      	ldrb	r2, [r7, #6]
 80012f4:	f7ff ff88 	bl	8001208 <GFX_DrawPixelScreen>
 80012f8:	e057      	b.n	80013aa <GFX_DrawChar+0x132>
            else
               GFX_DrawFillRectangle(x + i * size, y + j * size, size, size, color, Screen); // Or bigger pixel
 80012fa:	7dfb      	ldrb	r3, [r7, #23]
 80012fc:	4a3c      	ldr	r2, [pc, #240]	; (80013f0 <GFX_DrawChar+0x178>)
 80012fe:	7812      	ldrb	r2, [r2, #0]
 8001300:	fb03 f202 	mul.w	r2, r3, r2
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	18d0      	adds	r0, r2, r3
 8001308:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800130c:	4a38      	ldr	r2, [pc, #224]	; (80013f0 <GFX_DrawChar+0x178>)
 800130e:	7812      	ldrb	r2, [r2, #0]
 8001310:	fb03 f202 	mul.w	r2, r3, r2
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	18d1      	adds	r1, r2, r3
 8001318:	4b35      	ldr	r3, [pc, #212]	; (80013f0 <GFX_DrawChar+0x178>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	b29a      	uxth	r2, r3
 800131e:	4b34      	ldr	r3, [pc, #208]	; (80013f0 <GFX_DrawChar+0x178>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	b29c      	uxth	r4, r3
 8001324:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001328:	9301      	str	r3, [sp, #4]
 800132a:	79bb      	ldrb	r3, [r7, #6]
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	4623      	mov	r3, r4
 8001330:	f000 f968 	bl	8001604 <GFX_DrawFillRectangle>
 8001334:	e039      	b.n	80013aa <GFX_DrawChar+0x132>
         }
         else if(background == 0)
 8001336:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800133a:	2b00      	cmp	r3, #0
 800133c:	d135      	bne.n	80013aa <GFX_DrawChar+0x132>
         {
            if(size == 1)
 800133e:	4b2c      	ldr	r3, [pc, #176]	; (80013f0 <GFX_DrawChar+0x178>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d113      	bne.n	800136e <GFX_DrawChar+0xf6>
               GFX_DrawPixelScreen(x + i, y + j, background, Screen); // Draw black BG
 8001346:	7dfb      	ldrb	r3, [r7, #23]
 8001348:	b29a      	uxth	r2, r3
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	b29b      	uxth	r3, r3
 800134e:	4413      	add	r3, r2
 8001350:	b298      	uxth	r0, r3
 8001352:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001356:	b29a      	uxth	r2, r3
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	b29b      	uxth	r3, r3
 800135c:	4413      	add	r3, r2
 800135e:	b299      	uxth	r1, r3
 8001360:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001364:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001368:	f7ff ff4e 	bl	8001208 <GFX_DrawPixelScreen>
 800136c:	e01d      	b.n	80013aa <GFX_DrawChar+0x132>
            else
               GFX_DrawFillRectangle(x + i * size, y + j * size, size, size, background, Screen); // Or bigger
 800136e:	7dfb      	ldrb	r3, [r7, #23]
 8001370:	4a1f      	ldr	r2, [pc, #124]	; (80013f0 <GFX_DrawChar+0x178>)
 8001372:	7812      	ldrb	r2, [r2, #0]
 8001374:	fb03 f202 	mul.w	r2, r3, r2
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	18d0      	adds	r0, r2, r3
 800137c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001380:	4a1b      	ldr	r2, [pc, #108]	; (80013f0 <GFX_DrawChar+0x178>)
 8001382:	7812      	ldrb	r2, [r2, #0]
 8001384:	fb03 f202 	mul.w	r2, r3, r2
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	18d1      	adds	r1, r2, r3
 800138c:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <GFX_DrawChar+0x178>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	b29a      	uxth	r2, r3
 8001392:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <GFX_DrawChar+0x178>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	b29c      	uxth	r4, r3
 8001398:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800139c:	9301      	str	r3, [sp, #4]
 800139e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	4623      	mov	r3, r4
 80013a6:	f000 f92d 	bl	8001604 <GFX_DrawFillRectangle>
      for(int8_t j = 0; j < font[0]; j++, line >>= 1) // For each pixel in column
 80013aa:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	3301      	adds	r3, #1
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	757b      	strb	r3, [r7, #21]
 80013b6:	7dbb      	ldrb	r3, [r7, #22]
 80013b8:	085b      	lsrs	r3, r3, #1
 80013ba:	75bb      	strb	r3, [r7, #22]
 80013bc:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80013c0:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <GFX_DrawChar+0x174>)
 80013c2:	6812      	ldr	r2, [r2, #0]
 80013c4:	7812      	ldrb	r2, [r2, #0]
 80013c6:	4293      	cmp	r3, r2
 80013c8:	f6ff af7b 	blt.w	80012c2 <GFX_DrawChar+0x4a>
   for(uint8_t i = 0; i < font[1]; i++) // Each column (Width)
 80013cc:	7dfb      	ldrb	r3, [r7, #23]
 80013ce:	3301      	adds	r3, #1
 80013d0:	75fb      	strb	r3, [r7, #23]
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <GFX_DrawChar+0x174>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	3301      	adds	r3, #1
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	7dfa      	ldrb	r2, [r7, #23]
 80013dc:	429a      	cmp	r2, r3
 80013de:	f4ff af5d 	bcc.w	800129c <GFX_DrawChar+0x24>
 80013e2:	e000      	b.n	80013e6 <GFX_DrawChar+0x16e>
      return; // chr > '~'
 80013e4:	bf00      	nop
         }
      }
   }
}
 80013e6:	371c      	adds	r7, #28
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd90      	pop	{r4, r7, pc}
 80013ec:	20000270 	.word	0x20000270
 80013f0:	20000000 	.word	0x20000000

080013f4 <GFX_DrawString>:

void GFX_DrawString(int x, int y, char *str, uint8_t color, uint8_t background, Screen_TypeDef Screen)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b088      	sub	sp, #32
 80013f8:	af02      	add	r7, sp, #8
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
 8001400:	70fb      	strb	r3, [r7, #3]
   int x_tmp = x;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	617b      	str	r3, [r7, #20]

   char znak;
   znak = *str;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	74fb      	strb	r3, [r7, #19]

   while(*str++)
 800140c:	e040      	b.n	8001490 <GFX_DrawString+0x9c>
   {
      GFX_DrawChar(x_tmp, y, znak, color, background, Screen); // Draw current char
 800140e:	78f9      	ldrb	r1, [r7, #3]
 8001410:	7cfa      	ldrb	r2, [r7, #19]
 8001412:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001416:	9301      	str	r3, [sp, #4]
 8001418:	f897 3020 	ldrb.w	r3, [r7, #32]
 800141c:	9300      	str	r3, [sp, #0]
 800141e:	460b      	mov	r3, r1
 8001420:	68b9      	ldr	r1, [r7, #8]
 8001422:	6978      	ldr	r0, [r7, #20]
 8001424:	f7ff ff28 	bl	8001278 <GFX_DrawChar>

      x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 8001428:	4b1f      	ldr	r3, [pc, #124]	; (80014a8 <GFX_DrawString+0xb4>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	3301      	adds	r3, #1
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	461a      	mov	r2, r3
 8001432:	4b1e      	ldr	r3, [pc, #120]	; (80014ac <GFX_DrawString+0xb8>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	fb02 f303 	mul.w	r3, r2, r3
 800143a:	3301      	adds	r3, #1
 800143c:	697a      	ldr	r2, [r7, #20]
 800143e:	4413      	add	r3, r2
 8001440:	617b      	str	r3, [r7, #20]

      if(background == 0) // Draw black space if needed
 8001442:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d11f      	bne.n	800148a <GFX_DrawString+0x96>
      {
         for(uint8_t i = 0; i < (font[0] * size); i++)
 800144a:	2300      	movs	r3, #0
 800144c:	74bb      	strb	r3, [r7, #18]
 800144e:	e011      	b.n	8001474 <GFX_DrawString+0x80>
         {
            GFX_DrawPixelScreen(x_tmp - 1, y + i, PIXEL_BLACK, Screen);
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	b29b      	uxth	r3, r3
 8001454:	3b01      	subs	r3, #1
 8001456:	b298      	uxth	r0, r3
 8001458:	7cbb      	ldrb	r3, [r7, #18]
 800145a:	b29a      	uxth	r2, r3
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	b29b      	uxth	r3, r3
 8001460:	4413      	add	r3, r2
 8001462:	b299      	uxth	r1, r3
 8001464:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001468:	2200      	movs	r2, #0
 800146a:	f7ff fecd 	bl	8001208 <GFX_DrawPixelScreen>
         for(uint8_t i = 0; i < (font[0] * size); i++)
 800146e:	7cbb      	ldrb	r3, [r7, #18]
 8001470:	3301      	adds	r3, #1
 8001472:	74bb      	strb	r3, [r7, #18]
 8001474:	7cba      	ldrb	r2, [r7, #18]
 8001476:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <GFX_DrawString+0xb4>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	4619      	mov	r1, r3
 800147e:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <GFX_DrawString+0xb8>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	fb01 f303 	mul.w	r3, r1, r3
 8001486:	429a      	cmp	r2, r3
 8001488:	dbe2      	blt.n	8001450 <GFX_DrawString+0x5c>
         }
      }

      znak = *str; // Next char
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	74fb      	strb	r3, [r7, #19]
   while(*str++)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	1c5a      	adds	r2, r3, #1
 8001494:	607a      	str	r2, [r7, #4]
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1b8      	bne.n	800140e <GFX_DrawString+0x1a>
   }
}
 800149c:	bf00      	nop
 800149e:	bf00      	nop
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000270 	.word	0x20000270
 80014ac:	20000000 	.word	0x20000000

080014b0 <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint8_t color, Screen_TypeDef Screen)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08c      	sub	sp, #48	; 0x30
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
 80014bc:	603b      	str	r3, [r7, #0]
   int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 80014be:	683a      	ldr	r2, [r7, #0]
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80014c8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80014cc:	6879      	ldr	r1, [r7, #4]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	1acb      	subs	r3, r1, r3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	bfb8      	it	lt
 80014d6:	425b      	neglt	r3, r3
 80014d8:	429a      	cmp	r2, r3
 80014da:	bfcc      	ite	gt
 80014dc:	2301      	movgt	r3, #1
 80014de:	2300      	movle	r3, #0
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	857b      	strh	r3, [r7, #42]	; 0x2a

   if(steep)
 80014e4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d00b      	beq.n	8001504 <GFX_WriteLine+0x54>
   {
      _swap_int(x_start, y_start);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f6:	60bb      	str	r3, [r7, #8]
      _swap_int(x_end, y_end);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	623b      	str	r3, [r7, #32]
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	6a3b      	ldr	r3, [r7, #32]
 8001502:	603b      	str	r3, [r7, #0]
   }

   if(x_start > x_end)
 8001504:	68fa      	ldr	r2, [r7, #12]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	429a      	cmp	r2, r3
 800150a:	dd0b      	ble.n	8001524 <GFX_WriteLine+0x74>
   {
      _swap_int(x_start, x_end);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	61fb      	str	r3, [r7, #28]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	607b      	str	r3, [r7, #4]
      _swap_int(y_start, y_end);
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	61bb      	str	r3, [r7, #24]
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	603b      	str	r3, [r7, #0]
   }

   int16_t dx, dy;
   dx = x_end - x_start;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	b29a      	uxth	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	b29b      	uxth	r3, r3
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	b29b      	uxth	r3, r3
 8001530:	82fb      	strh	r3, [r7, #22]
   dy = abs(y_end - y_start);
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b00      	cmp	r3, #0
 800153a:	bfb8      	it	lt
 800153c:	425b      	neglt	r3, r3
 800153e:	82bb      	strh	r3, [r7, #20]

   int16_t err = dx / 2;
 8001540:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001544:	0fda      	lsrs	r2, r3, #31
 8001546:	4413      	add	r3, r2
 8001548:	105b      	asrs	r3, r3, #1
 800154a:	85fb      	strh	r3, [r7, #46]	; 0x2e
   int16_t ystep;

   if(y_start < y_end)
 800154c:	68ba      	ldr	r2, [r7, #8]
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	429a      	cmp	r2, r3
 8001552:	da02      	bge.n	800155a <GFX_WriteLine+0xaa>
   {
      ystep = 1;
 8001554:	2301      	movs	r3, #1
 8001556:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001558:	e032      	b.n	80015c0 <GFX_WriteLine+0x110>
   }
   else
   {
      ystep = -1;
 800155a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800155e:	85bb      	strh	r3, [r7, #44]	; 0x2c
   }

   for(; x_start <= x_end; x_start++)
 8001560:	e02e      	b.n	80015c0 <GFX_WriteLine+0x110>
   {
      if(steep)
 8001562:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001566:	2b00      	cmp	r3, #0
 8001568:	d00a      	beq.n	8001580 <GFX_WriteLine+0xd0>
      {
         GFX_DrawPixelScreen(y_start, x_start, color, Screen);
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	b298      	uxth	r0, r3
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	b299      	uxth	r1, r3
 8001572:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001576:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800157a:	f7ff fe45 	bl	8001208 <GFX_DrawPixelScreen>
 800157e:	e009      	b.n	8001594 <GFX_WriteLine+0xe4>
      }
      else
      {
         GFX_DrawPixelScreen(x_start, y_start, color, Screen);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	b298      	uxth	r0, r3
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	b299      	uxth	r1, r3
 8001588:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800158c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001590:	f7ff fe3a 	bl	8001208 <GFX_DrawPixelScreen>
      }
      err -= dy;
 8001594:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001596:	8abb      	ldrh	r3, [r7, #20]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	b29b      	uxth	r3, r3
 800159c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      if(err < 0)
 800159e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	da09      	bge.n	80015ba <GFX_WriteLine+0x10a>
      {
         y_start += ystep;
 80015a6:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80015aa:	68ba      	ldr	r2, [r7, #8]
 80015ac:	4413      	add	r3, r2
 80015ae:	60bb      	str	r3, [r7, #8]
         err += dx;
 80015b0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80015b2:	8afb      	ldrh	r3, [r7, #22]
 80015b4:	4413      	add	r3, r2
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
   for(; x_start <= x_end; x_start++)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	3301      	adds	r3, #1
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fa      	ldr	r2, [r7, #12]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	ddcc      	ble.n	8001562 <GFX_WriteLine+0xb2>
      }
   }
}
 80015c8:	bf00      	nop
 80015ca:	bf00      	nop
 80015cc:	3730      	adds	r7, #48	; 0x30
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint8_t color, Screen_TypeDef Screen)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b086      	sub	sp, #24
 80015d6:	af02      	add	r7, sp, #8
 80015d8:	60f8      	str	r0, [r7, #12]
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	607a      	str	r2, [r7, #4]
 80015de:	70fb      	strb	r3, [r7, #3]
   GFX_WriteLine(x_start, y_start, x_start, y_start + h - 1, color, Screen);
 80015e0:	68ba      	ldr	r2, [r7, #8]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4413      	add	r3, r2
 80015e6:	1e5a      	subs	r2, r3, #1
 80015e8:	7e3b      	ldrb	r3, [r7, #24]
 80015ea:	9301      	str	r3, [sp, #4]
 80015ec:	78fb      	ldrb	r3, [r7, #3]
 80015ee:	9300      	str	r3, [sp, #0]
 80015f0:	4613      	mov	r3, r2
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	68b9      	ldr	r1, [r7, #8]
 80015f6:	68f8      	ldr	r0, [r7, #12]
 80015f8:	f7ff ff5a 	bl	80014b0 <GFX_WriteLine>
}
 80015fc:	bf00      	nop
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <GFX_DrawFillRectangle>:
   GFX_DrawFastVLine(x + w - 1, y, h, color, Screen);
}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color, Screen_TypeDef Screen)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b088      	sub	sp, #32
 8001608:	af02      	add	r7, sp, #8
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	4611      	mov	r1, r2
 8001610:	461a      	mov	r2, r3
 8001612:	460b      	mov	r3, r1
 8001614:	80fb      	strh	r3, [r7, #6]
 8001616:	4613      	mov	r3, r2
 8001618:	80bb      	strh	r3, [r7, #4]
   for(int i = x; i < x + w; i++)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	617b      	str	r3, [r7, #20]
 800161e:	e00d      	b.n	800163c <GFX_DrawFillRectangle+0x38>
   {
      GFX_DrawFastVLine(i, y, h, color, Screen);
 8001620:	88ba      	ldrh	r2, [r7, #4]
 8001622:	f897 1020 	ldrb.w	r1, [r7, #32]
 8001626:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	460b      	mov	r3, r1
 800162e:	68b9      	ldr	r1, [r7, #8]
 8001630:	6978      	ldr	r0, [r7, #20]
 8001632:	f7ff ffce 	bl	80015d2 <GFX_DrawFastVLine>
   for(int i = x; i < x + w; i++)
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	3301      	adds	r3, #1
 800163a:	617b      	str	r3, [r7, #20]
 800163c:	88fa      	ldrh	r2, [r7, #6]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	4413      	add	r3, r2
 8001642:	697a      	ldr	r2, [r7, #20]
 8001644:	429a      	cmp	r2, r3
 8001646:	dbeb      	blt.n	8001620 <GFX_DrawFillRectangle+0x1c>
   }
}
 8001648:	bf00      	nop
 800164a:	bf00      	nop
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HC12_ExitCommandMode>:
void HC12_EnterCommandMode(void)
{
   HAL_GPIO_WritePin(HC12_SET_GPIO_Port, HC12_SET_Pin, 0);
}
void HC12_ExitCommandMode(void)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(HC12_SET_GPIO_Port, HC12_SET_Pin, 1);
 8001656:	2201      	movs	r2, #1
 8001658:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800165c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001660:	f003 f976 	bl	8004950 <HAL_GPIO_WritePin>
}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}

08001668 <HC12_TransmitData>:
void HC12_TransmitData(uint8_t *Data, uint32_t Length)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
   HAL_UART_Transmit(&huart1, Data, Length, 1000);
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	b29a      	uxth	r2, r3
 8001676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800167a:	6879      	ldr	r1, [r7, #4]
 800167c:	4803      	ldr	r0, [pc, #12]	; (800168c <HC12_TransmitData+0x24>)
 800167e:	f007 fb69 	bl	8008d54 <HAL_UART_Transmit>
}
 8001682:	bf00      	nop
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	20004488 	.word	0x20004488

08001690 <HC12_ReciveToIdleDMA>:
void HC12_ReciveToIdleDMA(uint8_t *Data, uint32_t Length)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
   HAL_UARTEx_ReceiveToIdle_DMA(&huart1, Data, Length);
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	b29b      	uxth	r3, r3
 800169e:	461a      	mov	r2, r3
 80016a0:	6879      	ldr	r1, [r7, #4]
 80016a2:	4803      	ldr	r0, [pc, #12]	; (80016b0 <HC12_ReciveToIdleDMA+0x20>)
 80016a4:	f008 ff30 	bl	800a508 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 80016a8:	bf00      	nop
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20004488 	.word	0x20004488

080016b4 <HC12_Init>:
void HC12_Init(RFP_TypeDef *TempRfp, uint8_t *Buffer)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
   rfp      = TempRfp;
 80016be:	4a06      	ldr	r2, [pc, #24]	; (80016d8 <HC12_Init+0x24>)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6013      	str	r3, [r2, #0]
   HC12Data = Buffer;
 80016c4:	4a05      	ldr	r2, [pc, #20]	; (80016dc <HC12_Init+0x28>)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	6013      	str	r3, [r2, #0]
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	20000274 	.word	0x20000274
 80016dc:	20000278 	.word	0x20000278

080016e0 <Crc>:
#include "crc.h"
#include "main.h"
int RandomNumber[] = { 131456, 215134, 31254, 4135, 516454, 642754, 71363, 85362475, 9144316, 10341957, 11345134, 11354342 };
int k              = 0;
uint32_t Crc(uint32_t PreviuseCRC, uint32_t DataLength, uint8_t *data)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b087      	sub	sp, #28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
   PreviuseCRC ^= data[0];
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	461a      	mov	r2, r3
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	4053      	eors	r3, r2
 80016f6:	60fb      	str	r3, [r7, #12]
   for(uint32_t i = 1; i < DataLength; i++)
 80016f8:	2301      	movs	r3, #1
 80016fa:	617b      	str	r3, [r7, #20]
 80016fc:	e032      	b.n	8001764 <Crc+0x84>
   {
      uint32_t temp = data[i];
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	4413      	add	r3, r2
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	613b      	str	r3, [r7, #16]
      if(temp == 0x00000000 )
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d115      	bne.n	800173a <Crc+0x5a>
      {
         temp = RandomNumber[k % (sizeof(RandomNumber)-1)];
 800170e:	4b1c      	ldr	r3, [pc, #112]	; (8001780 <Crc+0xa0>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4619      	mov	r1, r3
 8001714:	4b1b      	ldr	r3, [pc, #108]	; (8001784 <Crc+0xa4>)
 8001716:	fba3 2301 	umull	r2, r3, r3, r1
 800171a:	095a      	lsrs	r2, r3, #5
 800171c:	4613      	mov	r3, r2
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	4413      	add	r3, r2
 8001722:	011b      	lsls	r3, r3, #4
 8001724:	1a9b      	subs	r3, r3, r2
 8001726:	1aca      	subs	r2, r1, r3
 8001728:	4b17      	ldr	r3, [pc, #92]	; (8001788 <Crc+0xa8>)
 800172a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800172e:	613b      	str	r3, [r7, #16]
         k++;
 8001730:	4b13      	ldr	r3, [pc, #76]	; (8001780 <Crc+0xa0>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	3301      	adds	r3, #1
 8001736:	4a12      	ldr	r2, [pc, #72]	; (8001780 <Crc+0xa0>)
 8001738:	6013      	str	r3, [r2, #0]
      }
      PreviuseCRC ^= ((uint32_t)(temp) * (256 * i));
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	fb02 f303 	mul.w	r3, r2, r3
 8001742:	021b      	lsls	r3, r3, #8
 8001744:	68fa      	ldr	r2, [r7, #12]
 8001746:	4053      	eors	r3, r2
 8001748:	60fb      	str	r3, [r7, #12]
      if(PreviuseCRC & 0x80000000)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2b00      	cmp	r3, #0
 800174e:	da03      	bge.n	8001758 <Crc+0x78>
      {
         PreviuseCRC ^= 0xABC245C2;
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	4b0e      	ldr	r3, [pc, #56]	; (800178c <Crc+0xac>)
 8001754:	4053      	eors	r3, r2
 8001756:	60fb      	str	r3, [r7, #12]
      }
      PreviuseCRC <<= 1;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	60fb      	str	r3, [r7, #12]
   for(uint32_t i = 1; i < DataLength; i++)
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	3301      	adds	r3, #1
 8001762:	617b      	str	r3, [r7, #20]
 8001764:	697a      	ldr	r2, [r7, #20]
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	429a      	cmp	r2, r3
 800176a:	d3c8      	bcc.n	80016fe <Crc+0x1e>
   }
   k = 0;
 800176c:	4b04      	ldr	r3, [pc, #16]	; (8001780 <Crc+0xa0>)
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
   return PreviuseCRC;
 8001772:	68fb      	ldr	r3, [r7, #12]
}
 8001774:	4618      	mov	r0, r3
 8001776:	371c      	adds	r7, #28
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	2000027c 	.word	0x2000027c
 8001784:	ae4c415d 	.word	0xae4c415d
 8001788:	20000004 	.word	0x20000004
 800178c:	abc245c2 	.word	0xabc245c2

08001790 <RepareMessage>:
CRCStatus_TypeDef RepareMessage(uint32_t OryginalCRC, uint8_t *data, uint32_t DataLength)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
   uint8_t temp = 1;
 800179c:	2301      	movs	r3, #1
 800179e:	75fb      	strb	r3, [r7, #23]
   for(int i = 0; i < DataLength; i++)
 80017a0:	2300      	movs	r3, #0
 80017a2:	61fb      	str	r3, [r7, #28]
 80017a4:	e03b      	b.n	800181e <RepareMessage+0x8e>
   {
      for(int j = 0; j < 8; j++)
 80017a6:	2300      	movs	r3, #0
 80017a8:	61bb      	str	r3, [r7, #24]
 80017aa:	e032      	b.n	8001812 <RepareMessage+0x82>
      {
         data[i] ^= (temp << j);
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	68ba      	ldr	r2, [r7, #8]
 80017b0:	4413      	add	r3, r2
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	b25a      	sxtb	r2, r3
 80017b6:	7df9      	ldrb	r1, [r7, #23]
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	fa01 f303 	lsl.w	r3, r1, r3
 80017be:	b25b      	sxtb	r3, r3
 80017c0:	4053      	eors	r3, r2
 80017c2:	b259      	sxtb	r1, r3
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	68ba      	ldr	r2, [r7, #8]
 80017c8:	4413      	add	r3, r2
 80017ca:	b2ca      	uxtb	r2, r1
 80017cc:	701a      	strb	r2, [r3, #0]
         if(OryginalCRC == Crc(CRC_INITIAL_VALUE, DataLength - 4, data))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	3b04      	subs	r3, #4
 80017d2:	68ba      	ldr	r2, [r7, #8]
 80017d4:	4619      	mov	r1, r3
 80017d6:	f04f 30ff 	mov.w	r0, #4294967295
 80017da:	f7ff ff81 	bl	80016e0 <Crc>
 80017de:	4602      	mov	r2, r0
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d101      	bne.n	80017ea <RepareMessage+0x5a>
         {
            return CRC_OK;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e01e      	b.n	8001828 <RepareMessage+0x98>
         }
         else
         {
            data[i] ^= (temp << j);
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	68ba      	ldr	r2, [r7, #8]
 80017ee:	4413      	add	r3, r2
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	b25a      	sxtb	r2, r3
 80017f4:	7df9      	ldrb	r1, [r7, #23]
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	fa01 f303 	lsl.w	r3, r1, r3
 80017fc:	b25b      	sxtb	r3, r3
 80017fe:	4053      	eors	r3, r2
 8001800:	b259      	sxtb	r1, r3
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	68ba      	ldr	r2, [r7, #8]
 8001806:	4413      	add	r3, r2
 8001808:	b2ca      	uxtb	r2, r1
 800180a:	701a      	strb	r2, [r3, #0]
      for(int j = 0; j < 8; j++)
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	3301      	adds	r3, #1
 8001810:	61bb      	str	r3, [r7, #24]
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	2b07      	cmp	r3, #7
 8001816:	ddc9      	ble.n	80017ac <RepareMessage+0x1c>
   for(int i = 0; i < DataLength; i++)
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	3301      	adds	r3, #1
 800181c:	61fb      	str	r3, [r7, #28]
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	429a      	cmp	r2, r3
 8001824:	d8bf      	bhi.n	80017a6 <RepareMessage+0x16>
         }
      }
   }
   return CRC_ERROR;
 8001826:	2300      	movs	r3, #0
}
 8001828:	4618      	mov	r0, r3
 800182a:	3720      	adds	r7, #32
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001836:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <MX_DMA_Init+0x44>)
 8001838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800183a:	4a0e      	ldr	r2, [pc, #56]	; (8001874 <MX_DMA_Init+0x44>)
 800183c:	f043 0304 	orr.w	r3, r3, #4
 8001840:	6493      	str	r3, [r2, #72]	; 0x48
 8001842:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <MX_DMA_Init+0x44>)
 8001844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001846:	f003 0304 	and.w	r3, r3, #4
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800184e:	4b09      	ldr	r3, [pc, #36]	; (8001874 <MX_DMA_Init+0x44>)
 8001850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001852:	4a08      	ldr	r2, [pc, #32]	; (8001874 <MX_DMA_Init+0x44>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	6493      	str	r3, [r2, #72]	; 0x48
 800185a:	4b06      	ldr	r3, [pc, #24]	; (8001874 <MX_DMA_Init+0x44>)
 800185c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	603b      	str	r3, [r7, #0]
 8001864:	683b      	ldr	r3, [r7, #0]

}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	40021000 	.word	0x40021000

08001878 <e_papier_reset>:
0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
void e_papier_reset(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EPAPIER_RST_GPIO_Port, EPAPIER_RST_Pin, 1);
 800187c:	2201      	movs	r2, #1
 800187e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001882:	480d      	ldr	r0, [pc, #52]	; (80018b8 <e_papier_reset+0x40>)
 8001884:	f003 f864 	bl	8004950 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001888:	20c8      	movs	r0, #200	; 0xc8
 800188a:	f002 fa53 	bl	8003d34 <HAL_Delay>
	HAL_GPIO_WritePin(EPAPIER_RST_GPIO_Port, EPAPIER_RST_Pin, 0);
 800188e:	2200      	movs	r2, #0
 8001890:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001894:	4808      	ldr	r0, [pc, #32]	; (80018b8 <e_papier_reset+0x40>)
 8001896:	f003 f85b 	bl	8004950 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800189a:	20c8      	movs	r0, #200	; 0xc8
 800189c:	f002 fa4a 	bl	8003d34 <HAL_Delay>
	HAL_GPIO_WritePin(EPAPIER_RST_GPIO_Port, EPAPIER_RST_Pin, 1);
 80018a0:	2201      	movs	r2, #1
 80018a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018a6:	4804      	ldr	r0, [pc, #16]	; (80018b8 <e_papier_reset+0x40>)
 80018a8:	f003 f852 	bl	8004950 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80018ac:	20c8      	movs	r0, #200	; 0xc8
 80018ae:	f002 fa41 	bl	8003d34 <HAL_Delay>
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	48000400 	.word	0x48000400

080018bc <e_papier_send_command>:
void e_papier_send_command(uint8_t command)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SCREENS_DC_GPIO_Port, SCREENS_DC_Pin, 0);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2101      	movs	r1, #1
 80018ca:	480c      	ldr	r0, [pc, #48]	; (80018fc <e_papier_send_command+0x40>)
 80018cc:	f003 f840 	bl	8004950 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPAPIER_CS_GPIO_Port, EPAPIER_CS_Pin, 0);
 80018d0:	2200      	movs	r2, #0
 80018d2:	2102      	movs	r1, #2
 80018d4:	4809      	ldr	r0, [pc, #36]	; (80018fc <e_papier_send_command+0x40>)
 80018d6:	f003 f83b 	bl	8004950 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(e_papier_spi, &command, 1, 1000);
 80018da:	4b09      	ldr	r3, [pc, #36]	; (8001900 <e_papier_send_command+0x44>)
 80018dc:	6818      	ldr	r0, [r3, #0]
 80018de:	1df9      	adds	r1, r7, #7
 80018e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018e4:	2201      	movs	r2, #1
 80018e6:	f005 f908 	bl	8006afa <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(EPAPIER_CS_GPIO_Port, EPAPIER_CS_Pin, 1);
 80018ea:	2201      	movs	r2, #1
 80018ec:	2102      	movs	r1, #2
 80018ee:	4803      	ldr	r0, [pc, #12]	; (80018fc <e_papier_send_command+0x40>)
 80018f0:	f003 f82e 	bl	8004950 <HAL_GPIO_WritePin>
}
 80018f4:	bf00      	nop
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	48000400 	.word	0x48000400
 8001900:	20000280 	.word	0x20000280

08001904 <e_papier_send_data>:
void e_papier_send_data(uint8_t data)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SCREENS_DC_GPIO_Port, SCREENS_DC_Pin, 1);
 800190e:	2201      	movs	r2, #1
 8001910:	2101      	movs	r1, #1
 8001912:	480c      	ldr	r0, [pc, #48]	; (8001944 <e_papier_send_data+0x40>)
 8001914:	f003 f81c 	bl	8004950 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPAPIER_CS_GPIO_Port, EPAPIER_CS_Pin, 0);
 8001918:	2200      	movs	r2, #0
 800191a:	2102      	movs	r1, #2
 800191c:	4809      	ldr	r0, [pc, #36]	; (8001944 <e_papier_send_data+0x40>)
 800191e:	f003 f817 	bl	8004950 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(e_papier_spi, &data, 1, 1000);
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <e_papier_send_data+0x44>)
 8001924:	6818      	ldr	r0, [r3, #0]
 8001926:	1df9      	adds	r1, r7, #7
 8001928:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800192c:	2201      	movs	r2, #1
 800192e:	f005 f8e4 	bl	8006afa <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(EPAPIER_CS_GPIO_Port, EPAPIER_CS_Pin, 1);
 8001932:	2201      	movs	r2, #1
 8001934:	2102      	movs	r1, #2
 8001936:	4803      	ldr	r0, [pc, #12]	; (8001944 <e_papier_send_data+0x40>)
 8001938:	f003 f80a 	bl	8004950 <HAL_GPIO_WritePin>
}
 800193c:	bf00      	nop
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	48000400 	.word	0x48000400
 8001948:	20000280 	.word	0x20000280

0800194c <e_papier_wait_until_idle>:
void e_papier_wait_until_idle(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
	while(HAL_GPIO_ReadPin(EPAPIER_BUSY_GPIO_Port, EPAPIER_BUSY_Pin)==0)
 8001950:	e002      	b.n	8001958 <e_papier_wait_until_idle+0xc>
	{
		HAL_Delay(200);
 8001952:	20c8      	movs	r0, #200	; 0xc8
 8001954:	f002 f9ee 	bl	8003d34 <HAL_Delay>
	while(HAL_GPIO_ReadPin(EPAPIER_BUSY_GPIO_Port, EPAPIER_BUSY_Pin)==0)
 8001958:	2104      	movs	r1, #4
 800195a:	4804      	ldr	r0, [pc, #16]	; (800196c <e_papier_wait_until_idle+0x20>)
 800195c:	f002 ffe0 	bl	8004920 <HAL_GPIO_ReadPin>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d0f5      	beq.n	8001952 <e_papier_wait_until_idle+0x6>
	}
}
 8001966:	bf00      	nop
 8001968:	bf00      	nop
 800196a:	bd80      	pop	{r7, pc}
 800196c:	48000400 	.word	0x48000400

08001970 <e_papier_set_pixel>:
void e_papier_set_pixel(uint16_t x,uint16_t y, color_t color)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	80fb      	strh	r3, [r7, #6]
 800197a:	460b      	mov	r3, r1
 800197c:	80bb      	strh	r3, [r7, #4]
 800197e:	4613      	mov	r3, r2
 8001980:	70fb      	strb	r3, [r7, #3]
	if(x>=EPD_WIDTH||x<0||y>=EPD_HEIGHT||y<0)
 8001982:	88fb      	ldrh	r3, [r7, #6]
 8001984:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001988:	d247      	bcs.n	8001a1a <e_papier_set_pixel+0xaa>
 800198a:	88bb      	ldrh	r3, [r7, #4]
 800198c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001990:	d243      	bcs.n	8001a1a <e_papier_set_pixel+0xaa>
	{
		return;
	}
	if(color==WHITE)
 8001992:	78fb      	ldrb	r3, [r7, #3]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d120      	bne.n	80019da <e_papier_set_pixel+0x6a>
	{
		buffer[x/8+y*EPD_WIDTH/8]|=(0x80>(x%8));
 8001998:	88fb      	ldrh	r3, [r7, #6]
 800199a:	08db      	lsrs	r3, r3, #3
 800199c:	b299      	uxth	r1, r3
 800199e:	4608      	mov	r0, r1
 80019a0:	88bb      	ldrh	r3, [r7, #4]
 80019a2:	2232      	movs	r2, #50	; 0x32
 80019a4:	fb02 f303 	mul.w	r3, r2, r3
 80019a8:	4403      	add	r3, r0
 80019aa:	4a1f      	ldr	r2, [pc, #124]	; (8001a28 <e_papier_set_pixel+0xb8>)
 80019ac:	5cd3      	ldrb	r3, [r2, r3]
 80019ae:	b25a      	sxtb	r2, r3
 80019b0:	88fb      	ldrh	r3, [r7, #6]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	2b7f      	cmp	r3, #127	; 0x7f
 80019ba:	bf94      	ite	ls
 80019bc:	2301      	movls	r3, #1
 80019be:	2300      	movhi	r3, #0
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	b25b      	sxtb	r3, r3
 80019c4:	4313      	orrs	r3, r2
 80019c6:	b258      	sxtb	r0, r3
 80019c8:	88bb      	ldrh	r3, [r7, #4]
 80019ca:	2232      	movs	r2, #50	; 0x32
 80019cc:	fb02 f303 	mul.w	r3, r2, r3
 80019d0:	440b      	add	r3, r1
 80019d2:	b2c1      	uxtb	r1, r0
 80019d4:	4a14      	ldr	r2, [pc, #80]	; (8001a28 <e_papier_set_pixel+0xb8>)
 80019d6:	54d1      	strb	r1, [r2, r3]
 80019d8:	e020      	b.n	8001a1c <e_papier_set_pixel+0xac>
	}
	else
	{
		buffer[x/8+y*EPD_WIDTH/8]&=~(0x80>>(x%8));
 80019da:	88fb      	ldrh	r3, [r7, #6]
 80019dc:	08db      	lsrs	r3, r3, #3
 80019de:	b298      	uxth	r0, r3
 80019e0:	4601      	mov	r1, r0
 80019e2:	88bb      	ldrh	r3, [r7, #4]
 80019e4:	2232      	movs	r2, #50	; 0x32
 80019e6:	fb02 f303 	mul.w	r3, r2, r3
 80019ea:	440b      	add	r3, r1
 80019ec:	4a0e      	ldr	r2, [pc, #56]	; (8001a28 <e_papier_set_pixel+0xb8>)
 80019ee:	5cd3      	ldrb	r3, [r2, r3]
 80019f0:	b25a      	sxtb	r2, r3
 80019f2:	88fb      	ldrh	r3, [r7, #6]
 80019f4:	f003 0307 	and.w	r3, r3, #7
 80019f8:	2180      	movs	r1, #128	; 0x80
 80019fa:	fa41 f303 	asr.w	r3, r1, r3
 80019fe:	b25b      	sxtb	r3, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	b25b      	sxtb	r3, r3
 8001a04:	4013      	ands	r3, r2
 8001a06:	b259      	sxtb	r1, r3
 8001a08:	88bb      	ldrh	r3, [r7, #4]
 8001a0a:	2232      	movs	r2, #50	; 0x32
 8001a0c:	fb02 f303 	mul.w	r3, r2, r3
 8001a10:	4403      	add	r3, r0
 8001a12:	b2c9      	uxtb	r1, r1
 8001a14:	4a04      	ldr	r2, [pc, #16]	; (8001a28 <e_papier_set_pixel+0xb8>)
 8001a16:	54d1      	strb	r1, [r2, r3]
 8001a18:	e000      	b.n	8001a1c <e_papier_set_pixel+0xac>
		return;
 8001a1a:	bf00      	nop
	}
}
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	20000284 	.word	0x20000284

08001a2c <e_papier_set_lut>:
void e_papier_set_lut(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
    uint16_t count;
    e_papier_send_command(LUT_FOR_VCOM);         //g vcom
 8001a32:	2020      	movs	r0, #32
 8001a34:	f7ff ff42 	bl	80018bc <e_papier_send_command>
    for(count=0; count<44; count++) {
 8001a38:	2300      	movs	r3, #0
 8001a3a:	80fb      	strh	r3, [r7, #6]
 8001a3c:	e008      	b.n	8001a50 <e_papier_set_lut+0x24>
        e_papier_send_data(lut_vcom0[count]);
 8001a3e:	88fb      	ldrh	r3, [r7, #6]
 8001a40:	4a2b      	ldr	r2, [pc, #172]	; (8001af0 <e_papier_set_lut+0xc4>)
 8001a42:	5cd3      	ldrb	r3, [r2, r3]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff ff5d 	bl	8001904 <e_papier_send_data>
    for(count=0; count<44; count++) {
 8001a4a:	88fb      	ldrh	r3, [r7, #6]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	80fb      	strh	r3, [r7, #6]
 8001a50:	88fb      	ldrh	r3, [r7, #6]
 8001a52:	2b2b      	cmp	r3, #43	; 0x2b
 8001a54:	d9f3      	bls.n	8001a3e <e_papier_set_lut+0x12>
    }

    e_papier_send_command(LUT_WHITE_TO_WHITE);
 8001a56:	2021      	movs	r0, #33	; 0x21
 8001a58:	f7ff ff30 	bl	80018bc <e_papier_send_command>
    for(count=0; count<42; count++) {
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	80fb      	strh	r3, [r7, #6]
 8001a60:	e008      	b.n	8001a74 <e_papier_set_lut+0x48>
        e_papier_send_data(lut_ww[count]);
 8001a62:	88fb      	ldrh	r3, [r7, #6]
 8001a64:	4a23      	ldr	r2, [pc, #140]	; (8001af4 <e_papier_set_lut+0xc8>)
 8001a66:	5cd3      	ldrb	r3, [r2, r3]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff ff4b 	bl	8001904 <e_papier_send_data>
    for(count=0; count<42; count++) {
 8001a6e:	88fb      	ldrh	r3, [r7, #6]
 8001a70:	3301      	adds	r3, #1
 8001a72:	80fb      	strh	r3, [r7, #6]
 8001a74:	88fb      	ldrh	r3, [r7, #6]
 8001a76:	2b29      	cmp	r3, #41	; 0x29
 8001a78:	d9f3      	bls.n	8001a62 <e_papier_set_lut+0x36>
    }

    e_papier_send_command(LUT_BLACK_TO_WHITE);
 8001a7a:	2022      	movs	r0, #34	; 0x22
 8001a7c:	f7ff ff1e 	bl	80018bc <e_papier_send_command>
    for(count=0; count<42; count++) {
 8001a80:	2300      	movs	r3, #0
 8001a82:	80fb      	strh	r3, [r7, #6]
 8001a84:	e008      	b.n	8001a98 <e_papier_set_lut+0x6c>
        e_papier_send_data(lut_bw[count]);
 8001a86:	88fb      	ldrh	r3, [r7, #6]
 8001a88:	4a1b      	ldr	r2, [pc, #108]	; (8001af8 <e_papier_set_lut+0xcc>)
 8001a8a:	5cd3      	ldrb	r3, [r2, r3]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff ff39 	bl	8001904 <e_papier_send_data>
    for(count=0; count<42; count++) {
 8001a92:	88fb      	ldrh	r3, [r7, #6]
 8001a94:	3301      	adds	r3, #1
 8001a96:	80fb      	strh	r3, [r7, #6]
 8001a98:	88fb      	ldrh	r3, [r7, #6]
 8001a9a:	2b29      	cmp	r3, #41	; 0x29
 8001a9c:	d9f3      	bls.n	8001a86 <e_papier_set_lut+0x5a>
    }

    e_papier_send_command(LUT_WHITE_TO_BLACK);
 8001a9e:	2023      	movs	r0, #35	; 0x23
 8001aa0:	f7ff ff0c 	bl	80018bc <e_papier_send_command>
    for(count=0; count<42; count++) {
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	80fb      	strh	r3, [r7, #6]
 8001aa8:	e008      	b.n	8001abc <e_papier_set_lut+0x90>
        e_papier_send_data(lut_wb[count]);
 8001aaa:	88fb      	ldrh	r3, [r7, #6]
 8001aac:	4a13      	ldr	r2, [pc, #76]	; (8001afc <e_papier_set_lut+0xd0>)
 8001aae:	5cd3      	ldrb	r3, [r2, r3]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff ff27 	bl	8001904 <e_papier_send_data>
    for(count=0; count<42; count++) {
 8001ab6:	88fb      	ldrh	r3, [r7, #6]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	80fb      	strh	r3, [r7, #6]
 8001abc:	88fb      	ldrh	r3, [r7, #6]
 8001abe:	2b29      	cmp	r3, #41	; 0x29
 8001ac0:	d9f3      	bls.n	8001aaa <e_papier_set_lut+0x7e>
    }

    e_papier_send_command(LUT_BLACK_TO_BLACK);
 8001ac2:	2024      	movs	r0, #36	; 0x24
 8001ac4:	f7ff fefa 	bl	80018bc <e_papier_send_command>
    for(count=0; count<42; count++) {
 8001ac8:	2300      	movs	r3, #0
 8001aca:	80fb      	strh	r3, [r7, #6]
 8001acc:	e008      	b.n	8001ae0 <e_papier_set_lut+0xb4>
        e_papier_send_data(lut_bb[count]);
 8001ace:	88fb      	ldrh	r3, [r7, #6]
 8001ad0:	4a0b      	ldr	r2, [pc, #44]	; (8001b00 <e_papier_set_lut+0xd4>)
 8001ad2:	5cd3      	ldrb	r3, [r2, r3]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff ff15 	bl	8001904 <e_papier_send_data>
    for(count=0; count<42; count++) {
 8001ada:	88fb      	ldrh	r3, [r7, #6]
 8001adc:	3301      	adds	r3, #1
 8001ade:	80fb      	strh	r3, [r7, #6]
 8001ae0:	88fb      	ldrh	r3, [r7, #6]
 8001ae2:	2b29      	cmp	r3, #41	; 0x29
 8001ae4:	d9f3      	bls.n	8001ace <e_papier_set_lut+0xa2>
    }
}
 8001ae6:	bf00      	nop
 8001ae8:	bf00      	nop
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	0800f06c 	.word	0x0800f06c
 8001af4:	0800f098 	.word	0x0800f098
 8001af8:	0800f0c4 	.word	0x0800f0c4
 8001afc:	0800f0f0 	.word	0x0800f0f0
 8001b00:	0800f11c 	.word	0x0800f11c

08001b04 <e_papier_turn_on_display>:
		}
	}
	//e_papier_wait_until_idle();
}
void e_papier_turn_on_display(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
	e_papier_send_command(DISPLAY_REFRESH);
 8001b08:	2012      	movs	r0, #18
 8001b0a:	f7ff fed7 	bl	80018bc <e_papier_send_command>
    e_papier_wait_until_idle();
 8001b0e:	f7ff ff1d 	bl	800194c <e_papier_wait_until_idle>
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
	...

08001b18 <e_papier_display>:
void e_papier_display(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
	uint16_t Width, Height;
    Width = (EPD_WIDTH % 8 == 0)? (EPD_WIDTH / 8 ): (EPD_WIDTH / 8 + 1);
 8001b1e:	2332      	movs	r3, #50	; 0x32
 8001b20:	80fb      	strh	r3, [r7, #6]
    Height = EPD_HEIGHT;
 8001b22:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001b26:	80bb      	strh	r3, [r7, #4]

    e_papier_send_command(DATA_START_TRANSMISSION_1);
 8001b28:	2010      	movs	r0, #16
 8001b2a:	f7ff fec7 	bl	80018bc <e_papier_send_command>
    for (uint16_t j = 0; j < Height; j++) {
 8001b2e:	2300      	movs	r3, #0
 8001b30:	81fb      	strh	r3, [r7, #14]
 8001b32:	e00f      	b.n	8001b54 <e_papier_display+0x3c>
        for (uint16_t i = 0; i < Width; i++) {
 8001b34:	2300      	movs	r3, #0
 8001b36:	81bb      	strh	r3, [r7, #12]
 8001b38:	e005      	b.n	8001b46 <e_papier_display+0x2e>
        	e_papier_send_data(0XFF);
 8001b3a:	20ff      	movs	r0, #255	; 0xff
 8001b3c:	f7ff fee2 	bl	8001904 <e_papier_send_data>
        for (uint16_t i = 0; i < Width; i++) {
 8001b40:	89bb      	ldrh	r3, [r7, #12]
 8001b42:	3301      	adds	r3, #1
 8001b44:	81bb      	strh	r3, [r7, #12]
 8001b46:	89ba      	ldrh	r2, [r7, #12]
 8001b48:	88fb      	ldrh	r3, [r7, #6]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d3f5      	bcc.n	8001b3a <e_papier_display+0x22>
    for (uint16_t j = 0; j < Height; j++) {
 8001b4e:	89fb      	ldrh	r3, [r7, #14]
 8001b50:	3301      	adds	r3, #1
 8001b52:	81fb      	strh	r3, [r7, #14]
 8001b54:	89fa      	ldrh	r2, [r7, #14]
 8001b56:	88bb      	ldrh	r3, [r7, #4]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d3eb      	bcc.n	8001b34 <e_papier_display+0x1c>
        }
    }
    e_papier_send_command(DATA_START_TRANSMISSION_2);
 8001b5c:	2013      	movs	r0, #19
 8001b5e:	f7ff fead 	bl	80018bc <e_papier_send_command>
    for (uint16_t j = 0; j < Height; j++) {
 8001b62:	2300      	movs	r3, #0
 8001b64:	817b      	strh	r3, [r7, #10]
 8001b66:	e017      	b.n	8001b98 <e_papier_display+0x80>
        for (uint16_t i = 0; i < Width; i++) {
 8001b68:	2300      	movs	r3, #0
 8001b6a:	813b      	strh	r3, [r7, #8]
 8001b6c:	e00d      	b.n	8001b8a <e_papier_display+0x72>
        	e_papier_send_data(buffer[i + j * Width]);
 8001b6e:	893a      	ldrh	r2, [r7, #8]
 8001b70:	897b      	ldrh	r3, [r7, #10]
 8001b72:	88f9      	ldrh	r1, [r7, #6]
 8001b74:	fb01 f303 	mul.w	r3, r1, r3
 8001b78:	4413      	add	r3, r2
 8001b7a:	4a0d      	ldr	r2, [pc, #52]	; (8001bb0 <e_papier_display+0x98>)
 8001b7c:	5cd3      	ldrb	r3, [r2, r3]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff fec0 	bl	8001904 <e_papier_send_data>
        for (uint16_t i = 0; i < Width; i++) {
 8001b84:	893b      	ldrh	r3, [r7, #8]
 8001b86:	3301      	adds	r3, #1
 8001b88:	813b      	strh	r3, [r7, #8]
 8001b8a:	893a      	ldrh	r2, [r7, #8]
 8001b8c:	88fb      	ldrh	r3, [r7, #6]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d3ed      	bcc.n	8001b6e <e_papier_display+0x56>
    for (uint16_t j = 0; j < Height; j++) {
 8001b92:	897b      	ldrh	r3, [r7, #10]
 8001b94:	3301      	adds	r3, #1
 8001b96:	817b      	strh	r3, [r7, #10]
 8001b98:	897a      	ldrh	r2, [r7, #10]
 8001b9a:	88bb      	ldrh	r3, [r7, #4]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d3e3      	bcc.n	8001b68 <e_papier_display+0x50>
        }
    }
    e_papier_turn_on_display();
 8001ba0:	f7ff ffb0 	bl	8001b04 <e_papier_turn_on_display>
    e_papier_wait_until_idle();
 8001ba4:	f7ff fed2 	bl	800194c <e_papier_wait_until_idle>
}
 8001ba8:	bf00      	nop
 8001baa:	3710      	adds	r7, #16
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20000284 	.word	0x20000284

08001bb4 <e_papier_clear>:
void e_papier_clear()
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
	memset(buffer,0xff,EPD_HEIGHT*EPD_WIDTH/8);
 8001bb8:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001bbc:	21ff      	movs	r1, #255	; 0xff
 8001bbe:	4802      	ldr	r0, [pc, #8]	; (8001bc8 <e_papier_clear+0x14>)
 8001bc0:	f008 fd76 	bl	800a6b0 <memset>
}
 8001bc4:	bf00      	nop
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	20000284 	.word	0x20000284

08001bcc <e_papier_init>:
void e_papier_init(SPI_HandleTypeDef *spi)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
	e_papier_spi=spi;
 8001bd4:	4a2b      	ldr	r2, [pc, #172]	; (8001c84 <e_papier_init+0xb8>)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6013      	str	r3, [r2, #0]
	e_papier_reset();
 8001bda:	f7ff fe4d 	bl	8001878 <e_papier_reset>

    e_papier_send_command(POWER_SETTING);			//POWER SETTING
 8001bde:	2001      	movs	r0, #1
 8001be0:	f7ff fe6c 	bl	80018bc <e_papier_send_command>
    e_papier_send_data(0x03);
 8001be4:	2003      	movs	r0, #3
 8001be6:	f7ff fe8d 	bl	8001904 <e_papier_send_data>
    e_papier_send_data(0x00);
 8001bea:	2000      	movs	r0, #0
 8001bec:	f7ff fe8a 	bl	8001904 <e_papier_send_data>
    e_papier_send_data(0x2b);
 8001bf0:	202b      	movs	r0, #43	; 0x2b
 8001bf2:	f7ff fe87 	bl	8001904 <e_papier_send_data>
    e_papier_send_data(0x2b);
 8001bf6:	202b      	movs	r0, #43	; 0x2b
 8001bf8:	f7ff fe84 	bl	8001904 <e_papier_send_data>

    e_papier_send_command(BOOSTER_SOFT_START);         //boost soft start
 8001bfc:	2006      	movs	r0, #6
 8001bfe:	f7ff fe5d 	bl	80018bc <e_papier_send_command>
    e_papier_send_data(0x17);		//A
 8001c02:	2017      	movs	r0, #23
 8001c04:	f7ff fe7e 	bl	8001904 <e_papier_send_data>
    e_papier_send_data(0x17);		//B
 8001c08:	2017      	movs	r0, #23
 8001c0a:	f7ff fe7b 	bl	8001904 <e_papier_send_data>
    e_papier_send_data(0x17);		//C
 8001c0e:	2017      	movs	r0, #23
 8001c10:	f7ff fe78 	bl	8001904 <e_papier_send_data>

    e_papier_send_command(POWER_ON);
 8001c14:	2004      	movs	r0, #4
 8001c16:	f7ff fe51 	bl	80018bc <e_papier_send_command>
    e_papier_wait_until_idle();
 8001c1a:	f7ff fe97 	bl	800194c <e_papier_wait_until_idle>

    e_papier_send_command(PANEL_SETTING);			//panel setting
 8001c1e:	2000      	movs	r0, #0
 8001c20:	f7ff fe4c 	bl	80018bc <e_papier_send_command>
    e_papier_send_data(0xbf);		//KW-BF   KWR-AF	BWROTP 0f	BWOTP 1f
 8001c24:	20bf      	movs	r0, #191	; 0xbf
 8001c26:	f7ff fe6d 	bl	8001904 <e_papier_send_data>
    e_papier_send_data(0x0d);
 8001c2a:	200d      	movs	r0, #13
 8001c2c:	f7ff fe6a 	bl	8001904 <e_papier_send_data>

    e_papier_send_command(PLL_CONTROL);			//PLL setting
 8001c30:	2030      	movs	r0, #48	; 0x30
 8001c32:	f7ff fe43 	bl	80018bc <e_papier_send_command>
    e_papier_send_data(0x3C);      	// 3A 100HZ   29 150Hz 39 200HZ	31 171HZ
 8001c36:	203c      	movs	r0, #60	; 0x3c
 8001c38:	f7ff fe64 	bl	8001904 <e_papier_send_data>

    e_papier_send_command(0x61);			//resolution setting
 8001c3c:	2061      	movs	r0, #97	; 0x61
 8001c3e:	f7ff fe3d 	bl	80018bc <e_papier_send_command>
    e_papier_send_data(0x01);
 8001c42:	2001      	movs	r0, #1
 8001c44:	f7ff fe5e 	bl	8001904 <e_papier_send_data>
    e_papier_send_data(0x90);       //128
 8001c48:	2090      	movs	r0, #144	; 0x90
 8001c4a:	f7ff fe5b 	bl	8001904 <e_papier_send_data>
    e_papier_send_data(0x01);		//
 8001c4e:	2001      	movs	r0, #1
 8001c50:	f7ff fe58 	bl	8001904 <e_papier_send_data>
    e_papier_send_data(0x2c);
 8001c54:	202c      	movs	r0, #44	; 0x2c
 8001c56:	f7ff fe55 	bl	8001904 <e_papier_send_data>

    e_papier_send_command(0x82);			//vcom_DC setting
 8001c5a:	2082      	movs	r0, #130	; 0x82
 8001c5c:	f7ff fe2e 	bl	80018bc <e_papier_send_command>
    e_papier_send_data(0x28);
 8001c60:	2028      	movs	r0, #40	; 0x28
 8001c62:	f7ff fe4f 	bl	8001904 <e_papier_send_data>

    e_papier_send_command(0X50);			//VCOM AND DATA INTERVAL SETTING
 8001c66:	2050      	movs	r0, #80	; 0x50
 8001c68:	f7ff fe28 	bl	80018bc <e_papier_send_command>
    e_papier_send_data(0x97);		//97white border 77black border		VBDF 17|D7 VBDW 97 VBDB 57		VBDF F7 VBDW 77 VBDB 37  VBDR B7
 8001c6c:	2097      	movs	r0, #151	; 0x97
 8001c6e:	f7ff fe49 	bl	8001904 <e_papier_send_data>

    e_papier_set_lut();
 8001c72:	f7ff fedb 	bl	8001a2c <e_papier_set_lut>
    e_papier_clear();
 8001c76:	f7ff ff9d 	bl	8001bb4 <e_papier_clear>
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	20000280 	.word	0x20000280

08001c88 <flash_CsLow>:
 *      Author: Marcin
 */
#include"main.h"
#include"flash_spi.h"
void flash_CsLow(flash_t *flash)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(flash->flash_CsPort, flash->flash_CsPin, 0);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68d8      	ldr	r0, [r3, #12]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	891b      	ldrh	r3, [r3, #8]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	f002 fe58 	bl	8004950 <HAL_GPIO_WritePin>
}
 8001ca0:	bf00      	nop
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <flash_CsHigh>:
void flash_CsHigh(flash_t *flash)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(flash->flash_CsPort, flash->flash_CsPin, 1);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	68d8      	ldr	r0, [r3, #12]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	891b      	ldrh	r3, [r3, #8]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	4619      	mov	r1, r3
 8001cbc:	f002 fe48 	bl	8004950 <HAL_GPIO_WritePin>
}
 8001cc0:	bf00      	nop
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <flash_WriteCommand>:
void flash_WriteCommand(flash_t *flash,uint8_t *command,uint8_t size)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(flash->flash_spi, command, size, 1000);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6818      	ldr	r0, [r3, #0]
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ce2:	68b9      	ldr	r1, [r7, #8]
 8001ce4:	f004 ff09 	bl	8006afa <HAL_SPI_Transmit>
}
 8001ce8:	bf00      	nop
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <flash_ReadCommand>:
void flash_ReadCommand(flash_t *flash,uint8_t *command,uint8_t size)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Receive(flash->flash_spi, command, size, 1000);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6818      	ldr	r0, [r3, #0]
 8001d02:	79fb      	ldrb	r3, [r7, #7]
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d0a:	68b9      	ldr	r1, [r7, #8]
 8001d0c:	f005 f863 	bl	8006dd6 <HAL_SPI_Receive>
}
 8001d10:	bf00      	nop
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <flash_Reset>:
	flash_ReadCommand(flash, &command, 1);
	flash_CsHigh(flash);
	return command;
}
void flash_Reset(flash_t *flash)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
	uint8_t command=ENABLE_RESET;
 8001d20:	2366      	movs	r3, #102	; 0x66
 8001d22:	73fb      	strb	r3, [r7, #15]
	flash_CsLow(flash);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff ffaf 	bl	8001c88 <flash_CsLow>
	flash_WriteCommand(flash, &command, 1);
 8001d2a:	f107 030f 	add.w	r3, r7, #15
 8001d2e:	2201      	movs	r2, #1
 8001d30:	4619      	mov	r1, r3
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff ffc8 	bl	8001cc8 <flash_WriteCommand>
	flash_CsHigh(flash);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff ffb5 	bl	8001ca8 <flash_CsHigh>
	command=RESET;
 8001d3e:	2399      	movs	r3, #153	; 0x99
 8001d40:	73fb      	strb	r3, [r7, #15]
	flash_CsLow(flash);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7ff ffa0 	bl	8001c88 <flash_CsLow>
	flash_WriteCommand(flash, &command, 1);
 8001d48:	f107 030f 	add.w	r3, r7, #15
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	4619      	mov	r1, r3
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f7ff ffb9 	bl	8001cc8 <flash_WriteCommand>
	flash_CsHigh(flash);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f7ff ffa6 	bl	8001ca8 <flash_CsHigh>

}
 8001d5c:	bf00      	nop
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <flash_ReadID>:
	uint8_t command=WRITE_ENABLE;
	flash_WriteCommand(flash, &command, 1);
	flash_CsHigh(flash);
}
void flash_ReadID(flash_t *flash)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
	uint8_t id[3],command=JEDEC_ID;
 8001d6c:	239f      	movs	r3, #159	; 0x9f
 8001d6e:	72fb      	strb	r3, [r7, #11]
	flash_CsLow(flash);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7ff ff89 	bl	8001c88 <flash_CsLow>
	flash_WriteCommand(flash, &command, 1);
 8001d76:	f107 030b 	add.w	r3, r7, #11
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7ff ffa2 	bl	8001cc8 <flash_WriteCommand>
	flash_ReadCommand(flash, id, 3);
 8001d84:	f107 030c 	add.w	r3, r7, #12
 8001d88:	2203      	movs	r2, #3
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f7ff ffaf 	bl	8001cf0 <flash_ReadCommand>
	flash_CsHigh(flash);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7ff ff88 	bl	8001ca8 <flash_CsHigh>
	flash->id=((id[0]<<16)|(id[1]<<8)|id[2]);
 8001d98:	7b3b      	ldrb	r3, [r7, #12]
 8001d9a:	041a      	lsls	r2, r3, #16
 8001d9c:	7b7b      	ldrb	r3, [r7, #13]
 8001d9e:	021b      	lsls	r3, r3, #8
 8001da0:	4313      	orrs	r3, r2
 8001da2:	7bba      	ldrb	r2, [r7, #14]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	461a      	mov	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	605a      	str	r2, [r3, #4]
}
 8001dac:	bf00      	nop
 8001dae:	3710      	adds	r7, #16
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <flash_Init>:
	flash_WriteCommand(flash, dataToSend, 4);
	flash_CsHigh(flash);
	flash_WaitForEndProcess(flash);
}
void flash_Init(flash_t *flash,SPI_HandleTypeDef *spi, GPIO_TypeDef* cs_port,uint16_t cs_pin)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
 8001dc0:	807b      	strh	r3, [r7, #2]
	flash->flash_spi=spi;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	68ba      	ldr	r2, [r7, #8]
 8001dc6:	601a      	str	r2, [r3, #0]
	flash->flash_CsPort=cs_port;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	60da      	str	r2, [r3, #12]
	flash->flash_CsPin=cs_pin;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	887a      	ldrh	r2, [r7, #2]
 8001dd2:	811a      	strh	r2, [r3, #8]
	flash_Reset(flash);
 8001dd4:	68f8      	ldr	r0, [r7, #12]
 8001dd6:	f7ff ff9f 	bl	8001d18 <flash_Reset>
	flash_ReadID(flash);
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	f7ff ffc2 	bl	8001d64 <flash_ReadID>
}
 8001de0:	bf00      	nop
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b088      	sub	sp, #32
 8001dec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dee:	f107 030c 	add.w	r3, r7, #12
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	605a      	str	r2, [r3, #4]
 8001df8:	609a      	str	r2, [r3, #8]
 8001dfa:	60da      	str	r2, [r3, #12]
 8001dfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dfe:	4b50      	ldr	r3, [pc, #320]	; (8001f40 <MX_GPIO_Init+0x158>)
 8001e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e02:	4a4f      	ldr	r2, [pc, #316]	; (8001f40 <MX_GPIO_Init+0x158>)
 8001e04:	f043 0304 	orr.w	r3, r3, #4
 8001e08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e0a:	4b4d      	ldr	r3, [pc, #308]	; (8001f40 <MX_GPIO_Init+0x158>)
 8001e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0e:	f003 0304 	and.w	r3, r3, #4
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e16:	4b4a      	ldr	r3, [pc, #296]	; (8001f40 <MX_GPIO_Init+0x158>)
 8001e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1a:	4a49      	ldr	r2, [pc, #292]	; (8001f40 <MX_GPIO_Init+0x158>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e22:	4b47      	ldr	r3, [pc, #284]	; (8001f40 <MX_GPIO_Init+0x158>)
 8001e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	607b      	str	r3, [r7, #4]
 8001e2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2e:	4b44      	ldr	r3, [pc, #272]	; (8001f40 <MX_GPIO_Init+0x158>)
 8001e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e32:	4a43      	ldr	r2, [pc, #268]	; (8001f40 <MX_GPIO_Init+0x158>)
 8001e34:	f043 0302 	orr.w	r3, r3, #2
 8001e38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e3a:	4b41      	ldr	r3, [pc, #260]	; (8001f40 <MX_GPIO_Init+0x158>)
 8001e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	603b      	str	r3, [r7, #0]
 8001e44:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PMS_RST_GPIO_Port, PMS_RST_Pin, GPIO_PIN_RESET);
 8001e46:	2200      	movs	r2, #0
 8001e48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e4c:	483d      	ldr	r0, [pc, #244]	; (8001f44 <MX_GPIO_Init+0x15c>)
 8001e4e:	f002 fd7f 	bl	8004950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SSD1306_CS_Pin|HC12_SET_Pin, GPIO_PIN_SET);
 8001e52:	2201      	movs	r2, #1
 8001e54:	f44f 6101 	mov.w	r1, #2064	; 0x810
 8001e58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e5c:	f002 fd78 	bl	8004950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCREENS_DC_Pin|EPAPIER_CS_Pin|EPAPIER_RST_Pin|SSD1306_RST_Pin
 8001e60:	2201      	movs	r2, #1
 8001e62:	f642 71c3 	movw	r1, #12227	; 0x2fc3
 8001e66:	4838      	ldr	r0, [pc, #224]	; (8001f48 <MX_GPIO_Init+0x160>)
 8001e68:	f002 fd72 	bl	8004950 <HAL_GPIO_WritePin>
                          |BME280_CS_Pin|FRAM_CS_Pin|FRAM_WP_Pin|FRAM_HOLD_Pin
                          |FLASH_CS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HEARTBEAT_Pin|DS18B20_Pin, GPIO_PIN_RESET);
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 8001e72:	4835      	ldr	r0, [pc, #212]	; (8001f48 <MX_GPIO_Init+0x160>)
 8001e74:	f002 fd6c 	bl	8004950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PMS_SET_GPIO_Port, PMS_SET_Pin, GPIO_PIN_RESET);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e82:	f002 fd65 	bl	8004950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PMS_RST_Pin;
 8001e86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e94:	2300      	movs	r3, #0
 8001e96:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PMS_RST_GPIO_Port, &GPIO_InitStruct);
 8001e98:	f107 030c 	add.w	r3, r7, #12
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4829      	ldr	r0, [pc, #164]	; (8001f44 <MX_GPIO_Init+0x15c>)
 8001ea0:	f002 fbac 	bl	80045fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SSD1306_CS_Pin;
 8001ea4:	2310      	movs	r3, #16
 8001ea6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SSD1306_CS_GPIO_Port, &GPIO_InitStruct);
 8001eb4:	f107 030c 	add.w	r3, r7, #12
 8001eb8:	4619      	mov	r1, r3
 8001eba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ebe:	f002 fb9d 	bl	80045fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SCREENS_DC_Pin|EPAPIER_CS_Pin|EPAPIER_RST_Pin|SSD1306_RST_Pin
 8001ec2:	f642 73c3 	movw	r3, #12227	; 0x2fc3
 8001ec6:	60fb      	str	r3, [r7, #12]
                          |BME280_CS_Pin|FRAM_CS_Pin|FRAM_WP_Pin|FRAM_HOLD_Pin
                          |FLASH_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed4:	f107 030c 	add.w	r3, r7, #12
 8001ed8:	4619      	mov	r1, r3
 8001eda:	481b      	ldr	r0, [pc, #108]	; (8001f48 <MX_GPIO_Init+0x160>)
 8001edc:	f002 fb8e 	bl	80045fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = EPAPIER_BUSY_Pin|ENCODER_SWITCH_Pin;
 8001ee0:	f244 0304 	movw	r3, #16388	; 0x4004
 8001ee4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eee:	f107 030c 	add.w	r3, r7, #12
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4814      	ldr	r0, [pc, #80]	; (8001f48 <MX_GPIO_Init+0x160>)
 8001ef6:	f002 fb81 	bl	80045fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = HEARTBEAT_Pin|DS18B20_Pin;
 8001efa:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8001efe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f00:	2301      	movs	r3, #1
 8001f02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f0c:	f107 030c 	add.w	r3, r7, #12
 8001f10:	4619      	mov	r1, r3
 8001f12:	480d      	ldr	r0, [pc, #52]	; (8001f48 <MX_GPIO_Init+0x160>)
 8001f14:	f002 fb72 	bl	80045fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = HC12_SET_Pin|PMS_SET_Pin;
 8001f18:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001f1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f26:	2300      	movs	r3, #0
 8001f28:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f2a:	f107 030c 	add.w	r3, r7, #12
 8001f2e:	4619      	mov	r1, r3
 8001f30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f34:	f002 fb62 	bl	80045fc <HAL_GPIO_Init>

}
 8001f38:	bf00      	nop
 8001f3a:	3720      	adds	r7, #32
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40021000 	.word	0x40021000
 8001f44:	48000800 	.word	0x48000800
 8001f48:	48000400 	.word	0x48000400

08001f4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b0a0      	sub	sp, #128	; 0x80
 8001f50:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f52:	f001 fe7a 	bl	8003c4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f56:	f000 f9e7 	bl	8002328 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f5a:	f7ff ff45 	bl	8001de8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f5e:	f7ff fc67 	bl	8001830 <MX_DMA_Init>
  MX_TIM1_Init();
 8001f62:	f001 fab3 	bl	80034cc <MX_TIM1_Init>
  MX_TIM2_Init();
 8001f66:	f001 fb5d 	bl	8003624 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001f6a:	f001 fcdf 	bl	800392c <MX_USART1_UART_Init>
  MX_TIM5_Init();
 8001f6e:	f001 fba7 	bl	80036c0 <MX_TIM5_Init>
  MX_USART2_UART_Init();
 8001f72:	f001 fd27 	bl	80039c4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001f76:	f000 ffab 	bl	8002ed0 <MX_SPI1_Init>
  MX_RTC_Init();
 8001f7a:	f000 ff33 	bl	8002de4 <MX_RTC_Init>
  MX_RNG_Init();
 8001f7e:	f000 fed7 	bl	8002d30 <MX_RNG_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001f82:	f000 fa31 	bl	80023e8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
   ssd1306_init(&hspi1);
 8001f86:	489e      	ldr	r0, [pc, #632]	; (8002200 <main+0x2b4>)
 8001f88:	f001 f8dc 	bl	8003144 <ssd1306_init>
   ssd1306_clear();
 8001f8c:	f001 f8ce 	bl	800312c <ssd1306_clear>
   ssd1306_display();
 8001f90:	f001 f8a0 	bl	80030d4 <ssd1306_display>
   GFX_SetFont(font_8x5);
 8001f94:	489b      	ldr	r0, [pc, #620]	; (8002204 <main+0x2b8>)
 8001f96:	f7ff f95f 	bl	8001258 <GFX_SetFont>
   GFX_DrawString(0, 50, "abcdef", WHITE, 0, OLED);
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	9301      	str	r3, [sp, #4]
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	9300      	str	r3, [sp, #0]
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	4a98      	ldr	r2, [pc, #608]	; (8002208 <main+0x2bc>)
 8001fa6:	2132      	movs	r1, #50	; 0x32
 8001fa8:	2000      	movs	r0, #0
 8001faa:	f7ff fa23 	bl	80013f4 <GFX_DrawString>
   ssd1306_display();
 8001fae:	f001 f891 	bl	80030d4 <ssd1306_display>
   e_papier_init(&hspi1);
 8001fb2:	4893      	ldr	r0, [pc, #588]	; (8002200 <main+0x2b4>)
 8001fb4:	f7ff fe0a 	bl	8001bcc <e_papier_init>
   e_papier_display();
 8001fb8:	f7ff fdae 	bl	8001b18 <e_papier_display>
   ssd1306_display();
 8001fbc:	f001 f88a 	bl	80030d4 <ssd1306_display>
   fram_Init(&fram1, &hspi1, FRAM_HOLD_GPIO_Port, FRAM_CS_GPIO_Port, FRAM_WP_GPIO_Port, FRAM_HOLD_Pin, FRAM_CS_Pin, FRAM_WP_Pin);
 8001fc0:	2380      	movs	r3, #128	; 0x80
 8001fc2:	9303      	str	r3, [sp, #12]
 8001fc4:	2340      	movs	r3, #64	; 0x40
 8001fc6:	9302      	str	r3, [sp, #8]
 8001fc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fcc:	9301      	str	r3, [sp, #4]
 8001fce:	4b8f      	ldr	r3, [pc, #572]	; (800220c <main+0x2c0>)
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	4b8e      	ldr	r3, [pc, #568]	; (800220c <main+0x2c0>)
 8001fd4:	4a8d      	ldr	r2, [pc, #564]	; (800220c <main+0x2c0>)
 8001fd6:	498a      	ldr	r1, [pc, #552]	; (8002200 <main+0x2b4>)
 8001fd8:	488d      	ldr	r0, [pc, #564]	; (8002210 <main+0x2c4>)
 8001fda:	f7ff f8d4 	bl	8001186 <fram_Init>
   RFP_Init(&rfp, RFP_IDWS);
 8001fde:	2103      	movs	r1, #3
 8001fe0:	488c      	ldr	r0, [pc, #560]	; (8002214 <main+0x2c8>)
 8001fe2:	f000 fb3d 	bl	8002660 <RFP_Init>
   flash_Init(&flash1, &hspi1, FLASH_CS_GPIO_Port, FLASH_CS_Pin);
 8001fe6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fea:	4a88      	ldr	r2, [pc, #544]	; (800220c <main+0x2c0>)
 8001fec:	4984      	ldr	r1, [pc, #528]	; (8002200 <main+0x2b4>)
 8001fee:	488a      	ldr	r0, [pc, #552]	; (8002218 <main+0x2cc>)
 8001ff0:	f7ff fee0 	bl	8001db4 <flash_Init>
   RFP_RegisterDataFunction(RFP_DataFunction);
 8001ff4:	4889      	ldr	r0, [pc, #548]	; (800221c <main+0x2d0>)
 8001ff6:	f000 fbb3 	bl	8002760 <RFP_RegisterDataFunction>
   RFP_RegisterMessageFunction(RFP_EXIT_DEEP_SLEEP, RFP_MessageExitDeepSleep);
 8001ffa:	4989      	ldr	r1, [pc, #548]	; (8002220 <main+0x2d4>)
 8001ffc:	2005      	movs	r0, #5
 8001ffe:	f000 fbbf 	bl	8002780 <RFP_RegisterMessageFunction>
   uint8_t data = RFP_START_MEASURMENT;
 8002002:	2302      	movs	r3, #2
 8002004:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
   RFP_SendData(RFP_ODWS, RFP_COMMAND, &data, 1);
 8002008:	f107 026b 	add.w	r2, r7, #107	; 0x6b
 800200c:	2301      	movs	r3, #1
 800200e:	2101      	movs	r1, #1
 8002010:	2002      	movs	r0, #2
 8002012:	f000 fbd7 	bl	80027c4 <RFP_SendData>
   HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8002016:	213c      	movs	r1, #60	; 0x3c
 8002018:	4882      	ldr	r0, [pc, #520]	; (8002224 <main+0x2d8>)
 800201a:	f005 fd39 	bl	8007a90 <HAL_TIM_Encoder_Start>
   uint32_t Time = 0;
 800201e:	2300      	movs	r3, #0
 8002020:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   while(1)
   {
      if(HAL_GetTick() - Time > 1000)
 8002022:	f001 fe7b 	bl	8003d1c <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002030:	d93b      	bls.n	80020aa <main+0x15e>
      {
         ssd1306_clear();
 8002032:	f001 f87b 	bl	800312c <ssd1306_clear>
         Time = HAL_GetTick();
 8002036:	f001 fe71 	bl	8003d1c <HAL_GetTick>
 800203a:	66f8      	str	r0, [r7, #108]	; 0x6c
         HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 800203c:	2200      	movs	r2, #0
 800203e:	497a      	ldr	r1, [pc, #488]	; (8002228 <main+0x2dc>)
 8002040:	487a      	ldr	r0, [pc, #488]	; (800222c <main+0x2e0>)
 8002042:	f004 fb53 	bl	80066ec <HAL_RTC_GetTime>
         HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 8002046:	2200      	movs	r2, #0
 8002048:	4979      	ldr	r1, [pc, #484]	; (8002230 <main+0x2e4>)
 800204a:	4878      	ldr	r0, [pc, #480]	; (800222c <main+0x2e0>)
 800204c:	f004 fbb0 	bl	80067b0 <HAL_RTC_GetDate>
         char data[100];
         sprintf(data, "%d h %d m %d s", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 8002050:	4b75      	ldr	r3, [pc, #468]	; (8002228 <main+0x2dc>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	461a      	mov	r2, r3
 8002056:	4b74      	ldr	r3, [pc, #464]	; (8002228 <main+0x2dc>)
 8002058:	785b      	ldrb	r3, [r3, #1]
 800205a:	4619      	mov	r1, r3
 800205c:	4b72      	ldr	r3, [pc, #456]	; (8002228 <main+0x2dc>)
 800205e:	789b      	ldrb	r3, [r3, #2]
 8002060:	1d38      	adds	r0, r7, #4
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	460b      	mov	r3, r1
 8002066:	4973      	ldr	r1, [pc, #460]	; (8002234 <main+0x2e8>)
 8002068:	f009 f9aa 	bl	800b3c0 <siprintf>
         GFX_DrawString(0, 0, data, WHITE, 0, OLED);
 800206c:	1d3a      	adds	r2, r7, #4
 800206e:	2300      	movs	r3, #0
 8002070:	9301      	str	r3, [sp, #4]
 8002072:	2300      	movs	r3, #0
 8002074:	9300      	str	r3, [sp, #0]
 8002076:	2301      	movs	r3, #1
 8002078:	2100      	movs	r1, #0
 800207a:	2000      	movs	r0, #0
 800207c:	f7ff f9ba 	bl	80013f4 <GFX_DrawString>
         sprintf(data, "%d : %d ; 2022", RtcDate.Date, RtcDate.Month);
 8002080:	4b6b      	ldr	r3, [pc, #428]	; (8002230 <main+0x2e4>)
 8002082:	789b      	ldrb	r3, [r3, #2]
 8002084:	461a      	mov	r2, r3
 8002086:	4b6a      	ldr	r3, [pc, #424]	; (8002230 <main+0x2e4>)
 8002088:	785b      	ldrb	r3, [r3, #1]
 800208a:	1d38      	adds	r0, r7, #4
 800208c:	496a      	ldr	r1, [pc, #424]	; (8002238 <main+0x2ec>)
 800208e:	f009 f997 	bl	800b3c0 <siprintf>
         GFX_DrawString(0, 10, data, WHITE, 0, OLED);
 8002092:	1d3a      	adds	r2, r7, #4
 8002094:	2300      	movs	r3, #0
 8002096:	9301      	str	r3, [sp, #4]
 8002098:	2300      	movs	r3, #0
 800209a:	9300      	str	r3, [sp, #0]
 800209c:	2301      	movs	r3, #1
 800209e:	210a      	movs	r1, #10
 80020a0:	2000      	movs	r0, #0
 80020a2:	f7ff f9a7 	bl	80013f4 <GFX_DrawString>
         ssd1306_display();
 80020a6:	f001 f815 	bl	80030d4 <ssd1306_display>
      }
      RFP_Handle();
 80020aa:	f000 fabd 	bl	8002628 <RFP_Handle>
      if(f == 1)
 80020ae:	4b63      	ldr	r3, [pc, #396]	; (800223c <main+0x2f0>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d1b5      	bne.n	8002022 <main+0xd6>
      {
         f = 0;
 80020b6:	4b61      	ldr	r3, [pc, #388]	; (800223c <main+0x2f0>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	701a      	strb	r2, [r3, #0]
         char mes[100];
         sprintf(mes, "H %0.2f", h);
 80020bc:	4b60      	ldr	r3, [pc, #384]	; (8002240 <main+0x2f4>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7fe fa59 	bl	8000578 <__aeabi_f2d>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	1d38      	adds	r0, r7, #4
 80020cc:	495d      	ldr	r1, [pc, #372]	; (8002244 <main+0x2f8>)
 80020ce:	f009 f977 	bl	800b3c0 <siprintf>
         GFX_DrawString(0, 0, mes, BLACK, 1, E_PAPIER);
 80020d2:	1d3a      	adds	r2, r7, #4
 80020d4:	2301      	movs	r3, #1
 80020d6:	9301      	str	r3, [sp, #4]
 80020d8:	2301      	movs	r3, #1
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	2300      	movs	r3, #0
 80020de:	2100      	movs	r1, #0
 80020e0:	2000      	movs	r0, #0
 80020e2:	f7ff f987 	bl	80013f4 <GFX_DrawString>
         sprintf(mes, "T %0.2f", t);
 80020e6:	4b58      	ldr	r3, [pc, #352]	; (8002248 <main+0x2fc>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7fe fa44 	bl	8000578 <__aeabi_f2d>
 80020f0:	4602      	mov	r2, r0
 80020f2:	460b      	mov	r3, r1
 80020f4:	1d38      	adds	r0, r7, #4
 80020f6:	4955      	ldr	r1, [pc, #340]	; (800224c <main+0x300>)
 80020f8:	f009 f962 	bl	800b3c0 <siprintf>
         GFX_DrawString(0, 10, mes, BLACK, 1, E_PAPIER);
 80020fc:	1d3a      	adds	r2, r7, #4
 80020fe:	2301      	movs	r3, #1
 8002100:	9301      	str	r3, [sp, #4]
 8002102:	2301      	movs	r3, #1
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	2300      	movs	r3, #0
 8002108:	210a      	movs	r1, #10
 800210a:	2000      	movs	r0, #0
 800210c:	f7ff f972 	bl	80013f4 <GFX_DrawString>
         sprintf(mes, "PM1 %d", pm1);
 8002110:	4b4f      	ldr	r3, [pc, #316]	; (8002250 <main+0x304>)
 8002112:	881b      	ldrh	r3, [r3, #0]
 8002114:	461a      	mov	r2, r3
 8002116:	1d3b      	adds	r3, r7, #4
 8002118:	494e      	ldr	r1, [pc, #312]	; (8002254 <main+0x308>)
 800211a:	4618      	mov	r0, r3
 800211c:	f009 f950 	bl	800b3c0 <siprintf>
         GFX_DrawString(0, 20, mes, BLACK, 1, E_PAPIER);
 8002120:	1d3a      	adds	r2, r7, #4
 8002122:	2301      	movs	r3, #1
 8002124:	9301      	str	r3, [sp, #4]
 8002126:	2301      	movs	r3, #1
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	2300      	movs	r3, #0
 800212c:	2114      	movs	r1, #20
 800212e:	2000      	movs	r0, #0
 8002130:	f7ff f960 	bl	80013f4 <GFX_DrawString>
         sprintf(mes, "PM10 %d", pm10);
 8002134:	4b48      	ldr	r3, [pc, #288]	; (8002258 <main+0x30c>)
 8002136:	881b      	ldrh	r3, [r3, #0]
 8002138:	461a      	mov	r2, r3
 800213a:	1d3b      	adds	r3, r7, #4
 800213c:	4947      	ldr	r1, [pc, #284]	; (800225c <main+0x310>)
 800213e:	4618      	mov	r0, r3
 8002140:	f009 f93e 	bl	800b3c0 <siprintf>
         GFX_DrawString(0, 30, mes, BLACK, 1, E_PAPIER);
 8002144:	1d3a      	adds	r2, r7, #4
 8002146:	2301      	movs	r3, #1
 8002148:	9301      	str	r3, [sp, #4]
 800214a:	2301      	movs	r3, #1
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	2300      	movs	r3, #0
 8002150:	211e      	movs	r1, #30
 8002152:	2000      	movs	r0, #0
 8002154:	f7ff f94e 	bl	80013f4 <GFX_DrawString>
         sprintf(mes, "PM2,5 %d", pm25);
 8002158:	4b41      	ldr	r3, [pc, #260]	; (8002260 <main+0x314>)
 800215a:	881b      	ldrh	r3, [r3, #0]
 800215c:	461a      	mov	r2, r3
 800215e:	1d3b      	adds	r3, r7, #4
 8002160:	4940      	ldr	r1, [pc, #256]	; (8002264 <main+0x318>)
 8002162:	4618      	mov	r0, r3
 8002164:	f009 f92c 	bl	800b3c0 <siprintf>
         GFX_DrawString(0, 40, mes, BLACK, 1, E_PAPIER);
 8002168:	1d3a      	adds	r2, r7, #4
 800216a:	2301      	movs	r3, #1
 800216c:	9301      	str	r3, [sp, #4]
 800216e:	2301      	movs	r3, #1
 8002170:	9300      	str	r3, [sp, #0]
 8002172:	2300      	movs	r3, #0
 8002174:	2128      	movs	r1, #40	; 0x28
 8002176:	2000      	movs	r0, #0
 8002178:	f7ff f93c 	bl	80013f4 <GFX_DrawString>
         sprintf(mes, "Battery Level %0.2f", b);
 800217c:	4b3a      	ldr	r3, [pc, #232]	; (8002268 <main+0x31c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4618      	mov	r0, r3
 8002182:	f7fe f9f9 	bl	8000578 <__aeabi_f2d>
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	1d38      	adds	r0, r7, #4
 800218c:	4937      	ldr	r1, [pc, #220]	; (800226c <main+0x320>)
 800218e:	f009 f917 	bl	800b3c0 <siprintf>
         GFX_DrawString(0, 50, mes, BLACK, 1, E_PAPIER);
 8002192:	1d3a      	adds	r2, r7, #4
 8002194:	2301      	movs	r3, #1
 8002196:	9301      	str	r3, [sp, #4]
 8002198:	2301      	movs	r3, #1
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	2300      	movs	r3, #0
 800219e:	2132      	movs	r1, #50	; 0x32
 80021a0:	2000      	movs	r0, #0
 80021a2:	f7ff f927 	bl	80013f4 <GFX_DrawString>
         if(!(State & 0x01))
 80021a6:	4b32      	ldr	r3, [pc, #200]	; (8002270 <main+0x324>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10a      	bne.n	80021c8 <main+0x27c>
         {
            GFX_DrawString(0, 60, "Battery Charging", BLACK, 1, E_PAPIER);
 80021b2:	2301      	movs	r3, #1
 80021b4:	9301      	str	r3, [sp, #4]
 80021b6:	2301      	movs	r3, #1
 80021b8:	9300      	str	r3, [sp, #0]
 80021ba:	2300      	movs	r3, #0
 80021bc:	4a2d      	ldr	r2, [pc, #180]	; (8002274 <main+0x328>)
 80021be:	213c      	movs	r1, #60	; 0x3c
 80021c0:	2000      	movs	r0, #0
 80021c2:	f7ff f917 	bl	80013f4 <GFX_DrawString>
 80021c6:	e009      	b.n	80021dc <main+0x290>
         }
         else
         {
            GFX_DrawString(0, 60, "Battery No Charging", BLACK, 1, E_PAPIER);
 80021c8:	2301      	movs	r3, #1
 80021ca:	9301      	str	r3, [sp, #4]
 80021cc:	2301      	movs	r3, #1
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	2300      	movs	r3, #0
 80021d2:	4a29      	ldr	r2, [pc, #164]	; (8002278 <main+0x32c>)
 80021d4:	213c      	movs	r1, #60	; 0x3c
 80021d6:	2000      	movs	r0, #0
 80021d8:	f7ff f90c 	bl	80013f4 <GFX_DrawString>
         }
         if(!(State & 0x02))
 80021dc:	4b24      	ldr	r3, [pc, #144]	; (8002270 <main+0x324>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d14b      	bne.n	8002280 <main+0x334>
         {
            GFX_DrawString(0, 70, "Battery Standby", BLACK, 1, E_PAPIER);
 80021e8:	2301      	movs	r3, #1
 80021ea:	9301      	str	r3, [sp, #4]
 80021ec:	2301      	movs	r3, #1
 80021ee:	9300      	str	r3, [sp, #0]
 80021f0:	2300      	movs	r3, #0
 80021f2:	4a22      	ldr	r2, [pc, #136]	; (800227c <main+0x330>)
 80021f4:	2146      	movs	r1, #70	; 0x46
 80021f6:	2000      	movs	r0, #0
 80021f8:	f7ff f8fc 	bl	80013f4 <GFX_DrawString>
 80021fc:	e04a      	b.n	8002294 <main+0x348>
 80021fe:	bf00      	nop
 8002200:	20003ed8 	.word	0x20003ed8
 8002204:	0800f148 	.word	0x0800f148
 8002208:	0800efb8 	.word	0x0800efb8
 800220c:	48000400 	.word	0x48000400
 8002210:	20003d68 	.word	0x20003d68
 8002214:	20003d4c 	.word	0x20003d4c
 8002218:	20003d84 	.word	0x20003d84
 800221c:	08002421 	.word	0x08002421
 8002220:	080025c5 	.word	0x080025c5
 8002224:	200043dc 	.word	0x200043dc
 8002228:	20003d30 	.word	0x20003d30
 800222c:	20003ea4 	.word	0x20003ea4
 8002230:	20003d44 	.word	0x20003d44
 8002234:	0800efc0 	.word	0x0800efc0
 8002238:	0800efd0 	.word	0x0800efd0
 800223c:	20003d2e 	.word	0x20003d2e
 8002240:	20003d1c 	.word	0x20003d1c
 8002244:	0800efe0 	.word	0x0800efe0
 8002248:	20003d20 	.word	0x20003d20
 800224c:	0800efe8 	.word	0x0800efe8
 8002250:	20003d28 	.word	0x20003d28
 8002254:	0800eff0 	.word	0x0800eff0
 8002258:	20003d2c 	.word	0x20003d2c
 800225c:	0800eff8 	.word	0x0800eff8
 8002260:	20003d2a 	.word	0x20003d2a
 8002264:	0800f000 	.word	0x0800f000
 8002268:	20003d24 	.word	0x20003d24
 800226c:	0800f00c 	.word	0x0800f00c
 8002270:	20003d48 	.word	0x20003d48
 8002274:	0800f020 	.word	0x0800f020
 8002278:	0800f034 	.word	0x0800f034
 800227c:	0800f048 	.word	0x0800f048
         }
         else
         {
            GFX_DrawString(0, 70, "Battery No Standby", BLACK, 1, E_PAPIER);
 8002280:	2301      	movs	r3, #1
 8002282:	9301      	str	r3, [sp, #4]
 8002284:	2301      	movs	r3, #1
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	2300      	movs	r3, #0
 800228a:	4a21      	ldr	r2, [pc, #132]	; (8002310 <main+0x3c4>)
 800228c:	2146      	movs	r1, #70	; 0x46
 800228e:	2000      	movs	r0, #0
 8002290:	f7ff f8b0 	bl	80013f4 <GFX_DrawString>
         }
         HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 8002294:	2200      	movs	r2, #0
 8002296:	491f      	ldr	r1, [pc, #124]	; (8002314 <main+0x3c8>)
 8002298:	481f      	ldr	r0, [pc, #124]	; (8002318 <main+0x3cc>)
 800229a:	f004 fa27 	bl	80066ec <HAL_RTC_GetTime>
         HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 800229e:	2200      	movs	r2, #0
 80022a0:	491e      	ldr	r1, [pc, #120]	; (800231c <main+0x3d0>)
 80022a2:	481d      	ldr	r0, [pc, #116]	; (8002318 <main+0x3cc>)
 80022a4:	f004 fa84 	bl	80067b0 <HAL_RTC_GetDate>
         sprintf(mes, "%d h %d m %d s", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 80022a8:	4b1a      	ldr	r3, [pc, #104]	; (8002314 <main+0x3c8>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	461a      	mov	r2, r3
 80022ae:	4b19      	ldr	r3, [pc, #100]	; (8002314 <main+0x3c8>)
 80022b0:	785b      	ldrb	r3, [r3, #1]
 80022b2:	4619      	mov	r1, r3
 80022b4:	4b17      	ldr	r3, [pc, #92]	; (8002314 <main+0x3c8>)
 80022b6:	789b      	ldrb	r3, [r3, #2]
 80022b8:	1d38      	adds	r0, r7, #4
 80022ba:	9300      	str	r3, [sp, #0]
 80022bc:	460b      	mov	r3, r1
 80022be:	4918      	ldr	r1, [pc, #96]	; (8002320 <main+0x3d4>)
 80022c0:	f009 f87e 	bl	800b3c0 <siprintf>
         GFX_DrawString(0, 80, mes, BLACK, 1, E_PAPIER);
 80022c4:	1d3a      	adds	r2, r7, #4
 80022c6:	2301      	movs	r3, #1
 80022c8:	9301      	str	r3, [sp, #4]
 80022ca:	2301      	movs	r3, #1
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	2300      	movs	r3, #0
 80022d0:	2150      	movs	r1, #80	; 0x50
 80022d2:	2000      	movs	r0, #0
 80022d4:	f7ff f88e 	bl	80013f4 <GFX_DrawString>
         sprintf(mes, "%d : %d ; 2022", RtcDate.Date, RtcDate.Month);
 80022d8:	4b10      	ldr	r3, [pc, #64]	; (800231c <main+0x3d0>)
 80022da:	789b      	ldrb	r3, [r3, #2]
 80022dc:	461a      	mov	r2, r3
 80022de:	4b0f      	ldr	r3, [pc, #60]	; (800231c <main+0x3d0>)
 80022e0:	785b      	ldrb	r3, [r3, #1]
 80022e2:	1d38      	adds	r0, r7, #4
 80022e4:	490f      	ldr	r1, [pc, #60]	; (8002324 <main+0x3d8>)
 80022e6:	f009 f86b 	bl	800b3c0 <siprintf>
         GFX_DrawString(0, 90, mes, BLACK, 1, E_PAPIER);
 80022ea:	1d3a      	adds	r2, r7, #4
 80022ec:	2301      	movs	r3, #1
 80022ee:	9301      	str	r3, [sp, #4]
 80022f0:	2301      	movs	r3, #1
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	2300      	movs	r3, #0
 80022f6:	215a      	movs	r1, #90	; 0x5a
 80022f8:	2000      	movs	r0, #0
 80022fa:	f7ff f87b 	bl	80013f4 <GFX_DrawString>
         e_papier_display();
 80022fe:	f7ff fc0b 	bl	8001b18 <e_papier_display>
         e_papier_clear();
 8002302:	f7ff fc57 	bl	8001bb4 <e_papier_clear>
         HAL_Delay(10000);
 8002306:	f242 7010 	movw	r0, #10000	; 0x2710
 800230a:	f001 fd13 	bl	8003d34 <HAL_Delay>
      if(HAL_GetTick() - Time > 1000)
 800230e:	e688      	b.n	8002022 <main+0xd6>
 8002310:	0800f058 	.word	0x0800f058
 8002314:	20003d30 	.word	0x20003d30
 8002318:	20003ea4 	.word	0x20003ea4
 800231c:	20003d44 	.word	0x20003d44
 8002320:	0800efc0 	.word	0x0800efc0
 8002324:	0800efd0 	.word	0x0800efd0

08002328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b098      	sub	sp, #96	; 0x60
 800232c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800232e:	f107 0318 	add.w	r3, r7, #24
 8002332:	2248      	movs	r2, #72	; 0x48
 8002334:	2100      	movs	r1, #0
 8002336:	4618      	mov	r0, r3
 8002338:	f008 f9ba 	bl	800a6b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800233c:	1d3b      	adds	r3, r7, #4
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	605a      	str	r2, [r3, #4]
 8002344:	609a      	str	r2, [r3, #8]
 8002346:	60da      	str	r2, [r3, #12]
 8002348:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800234a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800234e:	f002 fb61 	bl	8004a14 <HAL_PWREx_ControlVoltageScaling>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002358:	f000 f960 	bl	800261c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800235c:	f002 fb2a 	bl	80049b4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002360:	4b20      	ldr	r3, [pc, #128]	; (80023e4 <SystemClock_Config+0xbc>)
 8002362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002366:	4a1f      	ldr	r2, [pc, #124]	; (80023e4 <SystemClock_Config+0xbc>)
 8002368:	f023 0318 	bic.w	r3, r3, #24
 800236c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002370:	2314      	movs	r3, #20
 8002372:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002374:	2301      	movs	r3, #1
 8002376:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002378:	2301      	movs	r3, #1
 800237a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800237c:	2300      	movs	r3, #0
 800237e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002380:	2360      	movs	r3, #96	; 0x60
 8002382:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002384:	2302      	movs	r3, #2
 8002386:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002388:	2301      	movs	r3, #1
 800238a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 800238c:	2301      	movs	r3, #1
 800238e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8002390:	2314      	movs	r3, #20
 8002392:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002394:	2302      	movs	r3, #2
 8002396:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002398:	2302      	movs	r3, #2
 800239a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800239c:	2302      	movs	r3, #2
 800239e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023a0:	f107 0318 	add.w	r3, r7, #24
 80023a4:	4618      	mov	r0, r3
 80023a6:	f002 fbd9 	bl	8004b5c <HAL_RCC_OscConfig>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80023b0:	f000 f934 	bl	800261c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023b4:	230f      	movs	r3, #15
 80023b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023b8:	2303      	movs	r3, #3
 80023ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80023bc:	2390      	movs	r3, #144	; 0x90
 80023be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023c0:	2300      	movs	r3, #0
 80023c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023c4:	2300      	movs	r3, #0
 80023c6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80023c8:	1d3b      	adds	r3, r7, #4
 80023ca:	2100      	movs	r1, #0
 80023cc:	4618      	mov	r0, r3
 80023ce:	f003 f841 	bl	8005454 <HAL_RCC_ClockConfig>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80023d8:	f000 f920 	bl	800261c <Error_Handler>
  }
}
 80023dc:	bf00      	nop
 80023de:	3760      	adds	r7, #96	; 0x60
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40021000 	.word	0x40021000

080023e8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80023ec:	2200      	movs	r2, #0
 80023ee:	2100      	movs	r1, #0
 80023f0:	2025      	movs	r0, #37	; 0x25
 80023f2:	f001 fd9e 	bl	8003f32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023f6:	2025      	movs	r0, #37	; 0x25
 80023f8:	f001 fdb7 	bl	8003f6a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80023fc:	2200      	movs	r2, #0
 80023fe:	2100      	movs	r1, #0
 8002400:	200b      	movs	r0, #11
 8002402:	f001 fd96 	bl	8003f32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002406:	200b      	movs	r0, #11
 8002408:	f001 fdaf 	bl	8003f6a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800240c:	2200      	movs	r2, #0
 800240e:	2100      	movs	r1, #0
 8002410:	200c      	movs	r0, #12
 8002412:	f001 fd8e 	bl	8003f32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002416:	200c      	movs	r0, #12
 8002418:	f001 fda7 	bl	8003f6a <HAL_NVIC_EnableIRQ>
}
 800241c:	bf00      	nop
 800241e:	bd80      	pop	{r7, pc}

08002420 <RFP_DataFunction>:

/* USER CODE BEGIN 4 */
void RFP_DataFunction(uint8_t *Data, uint32_t DataLength, uint32_t DataStart)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
   uint8_t *TempPtr;
   TempPtr  = &h;
 800242c:	4b5d      	ldr	r3, [pc, #372]	; (80025a4 <RFP_DataFunction+0x184>)
 800242e:	617b      	str	r3, [r7, #20]
   *TempPtr = Data[DataStart];
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4413      	add	r3, r2
 8002436:	781a      	ldrb	r2, [r3, #0]
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	3301      	adds	r3, #1
 8002440:	617b      	str	r3, [r7, #20]
   *TempPtr = Data[DataStart + 1];
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	3301      	adds	r3, #1
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	4413      	add	r3, r2
 800244a:	781a      	ldrb	r2, [r3, #0]
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	3301      	adds	r3, #1
 8002454:	617b      	str	r3, [r7, #20]
   *TempPtr = Data[DataStart + 2];
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	3302      	adds	r3, #2
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	4413      	add	r3, r2
 800245e:	781a      	ldrb	r2, [r3, #0]
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	3301      	adds	r3, #1
 8002468:	617b      	str	r3, [r7, #20]
   *TempPtr = Data[DataStart + 3];
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	3303      	adds	r3, #3
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	4413      	add	r3, r2
 8002472:	781a      	ldrb	r2, [r3, #0]
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	3301      	adds	r3, #1
 800247c:	617b      	str	r3, [r7, #20]
   TempPtr  = &t;
 800247e:	4b4a      	ldr	r3, [pc, #296]	; (80025a8 <RFP_DataFunction+0x188>)
 8002480:	617b      	str	r3, [r7, #20]
   *TempPtr = Data[DataStart + 5];
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3305      	adds	r3, #5
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	4413      	add	r3, r2
 800248a:	781a      	ldrb	r2, [r3, #0]
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	3301      	adds	r3, #1
 8002494:	617b      	str	r3, [r7, #20]
   *TempPtr = Data[DataStart + 6];
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	3306      	adds	r3, #6
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	4413      	add	r3, r2
 800249e:	781a      	ldrb	r2, [r3, #0]
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	3301      	adds	r3, #1
 80024a8:	617b      	str	r3, [r7, #20]
   *TempPtr = Data[DataStart + 7];
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	3307      	adds	r3, #7
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	4413      	add	r3, r2
 80024b2:	781a      	ldrb	r2, [r3, #0]
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	3301      	adds	r3, #1
 80024bc:	617b      	str	r3, [r7, #20]
   *TempPtr = Data[DataStart + 8];
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	3308      	adds	r3, #8
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	4413      	add	r3, r2
 80024c6:	781a      	ldrb	r2, [r3, #0]
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	701a      	strb	r2, [r3, #0]
   TempPtr  = &b;
 80024cc:	4b37      	ldr	r3, [pc, #220]	; (80025ac <RFP_DataFunction+0x18c>)
 80024ce:	617b      	str	r3, [r7, #20]
   *TempPtr = Data[DataStart + 13];
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	330d      	adds	r3, #13
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	4413      	add	r3, r2
 80024d8:	781a      	ldrb	r2, [r3, #0]
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	3301      	adds	r3, #1
 80024e2:	617b      	str	r3, [r7, #20]
   *TempPtr = Data[DataStart + 14];
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	330e      	adds	r3, #14
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	4413      	add	r3, r2
 80024ec:	781a      	ldrb	r2, [r3, #0]
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	3301      	adds	r3, #1
 80024f6:	617b      	str	r3, [r7, #20]
   *TempPtr = Data[DataStart + 15];
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	330f      	adds	r3, #15
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	4413      	add	r3, r2
 8002500:	781a      	ldrb	r2, [r3, #0]
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	3301      	adds	r3, #1
 800250a:	617b      	str	r3, [r7, #20]
   *TempPtr        = Data[DataStart + 16];
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3310      	adds	r3, #16
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	4413      	add	r3, r2
 8002514:	781a      	ldrb	r2, [r3, #0]
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	701a      	strb	r2, [r3, #0]
   TempPtr         = NULL;
 800251a:	2300      	movs	r3, #0
 800251c:	617b      	str	r3, [r7, #20]
   pm1             = (Data[22 + 3] | (Data[21 + 3] << 8));
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	3319      	adds	r3, #25
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	b21a      	sxth	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	3318      	adds	r3, #24
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	021b      	lsls	r3, r3, #8
 800252e:	b21b      	sxth	r3, r3
 8002530:	4313      	orrs	r3, r2
 8002532:	b21b      	sxth	r3, r3
 8002534:	b29a      	uxth	r2, r3
 8002536:	4b1e      	ldr	r3, [pc, #120]	; (80025b0 <RFP_DataFunction+0x190>)
 8002538:	801a      	strh	r2, [r3, #0]
   pm25            = (Data[28 + 3] | (Data[27 + 3] << 8));
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	331f      	adds	r3, #31
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	b21a      	sxth	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	331e      	adds	r3, #30
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	021b      	lsls	r3, r3, #8
 800254a:	b21b      	sxth	r3, r3
 800254c:	4313      	orrs	r3, r2
 800254e:	b21b      	sxth	r3, r3
 8002550:	b29a      	uxth	r2, r3
 8002552:	4b18      	ldr	r3, [pc, #96]	; (80025b4 <RFP_DataFunction+0x194>)
 8002554:	801a      	strh	r2, [r3, #0]
   pm10            = (Data[25 + 3] | (Data[24 + 3] << 8));
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	331c      	adds	r3, #28
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	b21a      	sxth	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	331b      	adds	r3, #27
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	021b      	lsls	r3, r3, #8
 8002566:	b21b      	sxth	r3, r3
 8002568:	4313      	orrs	r3, r2
 800256a:	b21b      	sxth	r3, r3
 800256c:	b29a      	uxth	r2, r3
 800256e:	4b12      	ldr	r3, [pc, #72]	; (80025b8 <RFP_DataFunction+0x198>)
 8002570:	801a      	strh	r2, [r3, #0]
   State           = Data[DataStart + 18];
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	3312      	adds	r3, #18
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	4413      	add	r3, r2
 800257a:	781a      	ldrb	r2, [r3, #0]
 800257c:	4b0f      	ldr	r3, [pc, #60]	; (80025bc <RFP_DataFunction+0x19c>)
 800257e:	701a      	strb	r2, [r3, #0]
   f               = 1;
 8002580:	4b0f      	ldr	r3, [pc, #60]	; (80025c0 <RFP_DataFunction+0x1a0>)
 8002582:	2201      	movs	r2, #1
 8002584:	701a      	strb	r2, [r3, #0]
   uint8_t Temp[2] = { RFP_GO_TO_DEEP_SLEEP, 5 };
 8002586:	f240 5303 	movw	r3, #1283	; 0x503
 800258a:	823b      	strh	r3, [r7, #16]
   RFP_SendData(RFP_ODWS, RFP_COMMAND, Temp, 2);
 800258c:	f107 0210 	add.w	r2, r7, #16
 8002590:	2302      	movs	r3, #2
 8002592:	2101      	movs	r1, #1
 8002594:	2002      	movs	r0, #2
 8002596:	f000 f915 	bl	80027c4 <RFP_SendData>
}
 800259a:	bf00      	nop
 800259c:	3718      	adds	r7, #24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	20003d1c 	.word	0x20003d1c
 80025a8:	20003d20 	.word	0x20003d20
 80025ac:	20003d24 	.word	0x20003d24
 80025b0:	20003d28 	.word	0x20003d28
 80025b4:	20003d2a 	.word	0x20003d2a
 80025b8:	20003d2c 	.word	0x20003d2c
 80025bc:	20003d48 	.word	0x20003d48
 80025c0:	20003d2e 	.word	0x20003d2e

080025c4 <RFP_MessageExitDeepSleep>:
void RFP_MessageExitDeepSleep(uint8_t *Data, uint32_t DataLength, uint32_t DataStart)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
   uint8_t data = RFP_START_MEASURMENT;
 80025d0:	2302      	movs	r3, #2
 80025d2:	75fb      	strb	r3, [r7, #23]
   RFP_SendData(RFP_ODWS, RFP_COMMAND, &data, 1);
 80025d4:	f107 0217 	add.w	r2, r7, #23
 80025d8:	2301      	movs	r3, #1
 80025da:	2101      	movs	r1, #1
 80025dc:	2002      	movs	r0, #2
 80025de:	f000 f8f1 	bl	80027c4 <RFP_SendData>
}
 80025e2:	bf00      	nop
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
	...

080025ec <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	807b      	strh	r3, [r7, #2]
   HAL_GPIO_TogglePin(HEARTBEAT_GPIO_Port, HEARTBEAT_Pin);
 80025f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025fc:	4805      	ldr	r0, [pc, #20]	; (8002614 <HAL_UARTEx_RxEventCallback+0x28>)
 80025fe:	f002 f9bf 	bl	8004980 <HAL_GPIO_TogglePin>
   rfp.DataSize = Size;
 8002602:	887b      	ldrh	r3, [r7, #2]
 8002604:	4a04      	ldr	r2, [pc, #16]	; (8002618 <HAL_UARTEx_RxEventCallback+0x2c>)
 8002606:	6093      	str	r3, [r2, #8]
   RFP_InterruptTask();
 8002608:	f000 f8ce 	bl	80027a8 <RFP_InterruptTask>
}
 800260c:	bf00      	nop
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	48000400 	.word	0x48000400
 8002618:	20003d4c 	.word	0x20003d4c

0800261c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002620:	b672      	cpsid	i
}
 8002622:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
   /* User can add his own implementation to report the HAL error return state */
   __disable_irq();
   while(1)
 8002624:	e7fe      	b.n	8002624 <Error_Handler+0x8>
	...

08002628 <RFP_Handle>:
        { RFP_WaitForResponseFunction }, { RFP_ParseResponseFunction } };
RFPCommandFunctions_TypeDef RfpCommandFunction[RFP_COMMAND_CNT];
RFPDataFunctions_TypeDef RfpDataFunctions;
RFPMessageFunctions_TypeDef RfpMessageFunction[RFP_MESSAGE_CNT];
void RFP_Handle(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
   RFP_ChangeState();
 800262c:	f000 f856 	bl	80026dc <RFP_ChangeState>
   if(RfpFunction[Rfp->State].RfpFunction != NULL)
 8002630:	4b09      	ldr	r3, [pc, #36]	; (8002658 <RFP_Handle+0x30>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	461a      	mov	r2, r3
 8002638:	4b08      	ldr	r3, [pc, #32]	; (800265c <RFP_Handle+0x34>)
 800263a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d007      	beq.n	8002652 <RFP_Handle+0x2a>
   {
      RfpFunction[Rfp->State].RfpFunction();
 8002642:	4b05      	ldr	r3, [pc, #20]	; (8002658 <RFP_Handle+0x30>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	461a      	mov	r2, r3
 800264a:	4b04      	ldr	r3, [pc, #16]	; (800265c <RFP_Handle+0x34>)
 800264c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002650:	4798      	blx	r3
   }
}
 8002652:	bf00      	nop
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	20003e5c 	.word	0x20003e5c
 800265c:	20000058 	.word	0x20000058

08002660 <RFP_Init>:
void RFP_Init(RFP_TypeDef *RadioProtocol, RFPDeviceID_TypeDef Device)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	460b      	mov	r3, r1
 800266a:	70fb      	strb	r3, [r7, #3]
   Rfp             = RadioProtocol;
 800266c:	4a17      	ldr	r2, [pc, #92]	; (80026cc <RFP_Init+0x6c>)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6013      	str	r3, [r2, #0]
   Rfp->Initialize = RFP_INITIALIZE;
 8002672:	4b16      	ldr	r3, [pc, #88]	; (80026cc <RFP_Init+0x6c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2201      	movs	r2, #1
 8002678:	70da      	strb	r2, [r3, #3]
   Rfp->DeviceType = Device;
 800267a:	4b14      	ldr	r3, [pc, #80]	; (80026cc <RFP_Init+0x6c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	78fa      	ldrb	r2, [r7, #3]
 8002680:	715a      	strb	r2, [r3, #5]
   for(int i = 0; i < RFP_COMMAND_CNT; i++)
 8002682:	2300      	movs	r3, #0
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	e007      	b.n	8002698 <RFP_Init+0x38>
   {
      RfpCommandFunction[i].RfpCommandFunction = NULL;
 8002688:	4a11      	ldr	r2, [pc, #68]	; (80026d0 <RFP_Init+0x70>)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2100      	movs	r1, #0
 800268e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   for(int i = 0; i < RFP_COMMAND_CNT; i++)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	3301      	adds	r3, #1
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2b05      	cmp	r3, #5
 800269c:	ddf4      	ble.n	8002688 <RFP_Init+0x28>
   }
   for(int i = 0; i < RFP_MESSAGE_CNT; i++)
 800269e:	2300      	movs	r3, #0
 80026a0:	60bb      	str	r3, [r7, #8]
 80026a2:	e007      	b.n	80026b4 <RFP_Init+0x54>
   {
      RfpMessageFunction[i].RfpMessageFunction = NULL;
 80026a4:	4a0b      	ldr	r2, [pc, #44]	; (80026d4 <RFP_Init+0x74>)
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	2100      	movs	r1, #0
 80026aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   for(int i = 0; i < RFP_MESSAGE_CNT; i++)
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	3301      	adds	r3, #1
 80026b2:	60bb      	str	r3, [r7, #8]
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	ddf4      	ble.n	80026a4 <RFP_Init+0x44>
   }
   RfpDataFunctions.RfpDataFunction = NULL;
 80026ba:	4b07      	ldr	r3, [pc, #28]	; (80026d8 <RFP_Init+0x78>)
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
}
 80026c0:	bf00      	nop
 80026c2:	3714      	adds	r7, #20
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	20003e5c 	.word	0x20003e5c
 80026d0:	20003e60 	.word	0x20003e60
 80026d4:	20003e7c 	.word	0x20003e7c
 80026d8:	20003e78 	.word	0x20003e78

080026dc <RFP_ChangeState>:
static void RFP_ChangeState(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
   for(int i = 0; i < RFP_TRANSITION_TABLE_SIZE; i++)
 80026e2:	2300      	movs	r3, #0
 80026e4:	607b      	str	r3, [r7, #4]
 80026e6:	e02b      	b.n	8002740 <RFP_ChangeState+0x64>
   {
      if(Rfp->State == RfpTransitionTable[i].Source && Rfp->NewEvent == RfpTransitionTable[i].Event)
 80026e8:	4b1b      	ldr	r3, [pc, #108]	; (8002758 <RFP_ChangeState+0x7c>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	7819      	ldrb	r1, [r3, #0]
 80026ee:	481b      	ldr	r0, [pc, #108]	; (800275c <RFP_ChangeState+0x80>)
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	4613      	mov	r3, r2
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	4413      	add	r3, r2
 80026f8:	4403      	add	r3, r0
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	4299      	cmp	r1, r3
 80026fe:	d11c      	bne.n	800273a <RFP_ChangeState+0x5e>
 8002700:	4b15      	ldr	r3, [pc, #84]	; (8002758 <RFP_ChangeState+0x7c>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	7859      	ldrb	r1, [r3, #1]
 8002706:	4815      	ldr	r0, [pc, #84]	; (800275c <RFP_ChangeState+0x80>)
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	4613      	mov	r3, r2
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	4413      	add	r3, r2
 8002710:	4403      	add	r3, r0
 8002712:	3302      	adds	r3, #2
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	4299      	cmp	r1, r3
 8002718:	d10f      	bne.n	800273a <RFP_ChangeState+0x5e>
      {
         Rfp->State    = RfpTransitionTable[i].Destination;
 800271a:	4b0f      	ldr	r3, [pc, #60]	; (8002758 <RFP_ChangeState+0x7c>)
 800271c:	6819      	ldr	r1, [r3, #0]
 800271e:	480f      	ldr	r0, [pc, #60]	; (800275c <RFP_ChangeState+0x80>)
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	4613      	mov	r3, r2
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	4413      	add	r3, r2
 8002728:	4403      	add	r3, r0
 800272a:	3301      	adds	r3, #1
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	700b      	strb	r3, [r1, #0]
         Rfp->NewEvent = RFP_EVENT_NOTHING;
 8002730:	4b09      	ldr	r3, [pc, #36]	; (8002758 <RFP_ChangeState+0x7c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2200      	movs	r2, #0
 8002736:	705a      	strb	r2, [r3, #1]
         return;
 8002738:	e009      	b.n	800274e <RFP_ChangeState+0x72>
   for(int i = 0; i < RFP_TRANSITION_TABLE_SIZE; i++)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	3301      	adds	r3, #1
 800273e:	607b      	str	r3, [r7, #4]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b0b      	cmp	r3, #11
 8002744:	d9d0      	bls.n	80026e8 <RFP_ChangeState+0xc>
      }
   }
   Rfp->NewEvent = RFP_EVENT_NOTHING;
 8002746:	4b04      	ldr	r3, [pc, #16]	; (8002758 <RFP_ChangeState+0x7c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2200      	movs	r2, #0
 800274c:	705a      	strb	r2, [r3, #1]
}
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	20003e5c 	.word	0x20003e5c
 800275c:	20000034 	.word	0x20000034

08002760 <RFP_RegisterDataFunction>:
void RFP_RegisterCommandFunction(RFPCommands_TypeDef Command, void (*Callback)(uint8_t *, uint32_t, uint32_t))
{
   RfpCommandFunction[Command - 1].RfpCommandFunction = Callback;
}
void RFP_RegisterDataFunction(void (*Callback)(uint8_t *, uint32_t, uint32_t))
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
   RfpDataFunctions.RfpDataFunction = Callback;
 8002768:	4a04      	ldr	r2, [pc, #16]	; (800277c <RFP_RegisterDataFunction+0x1c>)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6013      	str	r3, [r2, #0]
}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	20003e78 	.word	0x20003e78

08002780 <RFP_RegisterMessageFunction>:
void RFP_RegisterMessageFunction(RFPMessage_TypeDef Message, void (*Callback)(uint8_t *, uint32_t, uint32_t))
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	6039      	str	r1, [r7, #0]
 800278a:	71fb      	strb	r3, [r7, #7]
   RfpMessageFunction[Message - 1].RfpMessageFunction = Callback;
 800278c:	79fb      	ldrb	r3, [r7, #7]
 800278e:	3b01      	subs	r3, #1
 8002790:	4904      	ldr	r1, [pc, #16]	; (80027a4 <RFP_RegisterMessageFunction+0x24>)
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	20003e7c 	.word	0x20003e7c

080027a8 <RFP_InterruptTask>:
void RFP_InterruptTask(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
   Rfp->NewDataFlag = RFP_NEW_DATA_FLAG_SET;
 80027ac:	4b04      	ldr	r3, [pc, #16]	; (80027c0 <RFP_InterruptTask+0x18>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2201      	movs	r2, #1
 80027b2:	711a      	strb	r2, [r3, #4]
}
 80027b4:	bf00      	nop
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	20003e5c 	.word	0x20003e5c

080027c4 <RFP_SendData>:
void RFP_SendData(RFPDeviceID_TypeDef Destination, RFPMessageType_TypeDef Type, uint8_t *Data, uint32_t Length)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60ba      	str	r2, [r7, #8]
 80027cc:	607b      	str	r3, [r7, #4]
 80027ce:	4603      	mov	r3, r0
 80027d0:	73fb      	strb	r3, [r7, #15]
 80027d2:	460b      	mov	r3, r1
 80027d4:	73bb      	strb	r3, [r7, #14]
   RfpDataTransmit[0] = Destination;
 80027d6:	4a27      	ldr	r2, [pc, #156]	; (8002874 <RFP_SendData+0xb0>)
 80027d8:	7bfb      	ldrb	r3, [r7, #15]
 80027da:	7013      	strb	r3, [r2, #0]
   RfpDataTransmit[1] = Rfp->DeviceType;
 80027dc:	4b26      	ldr	r3, [pc, #152]	; (8002878 <RFP_SendData+0xb4>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	795a      	ldrb	r2, [r3, #5]
 80027e2:	4b24      	ldr	r3, [pc, #144]	; (8002874 <RFP_SendData+0xb0>)
 80027e4:	705a      	strb	r2, [r3, #1]
   RfpDataTransmit[2] = Type;
 80027e6:	4a23      	ldr	r2, [pc, #140]	; (8002874 <RFP_SendData+0xb0>)
 80027e8:	7bbb      	ldrb	r3, [r7, #14]
 80027ea:	7093      	strb	r3, [r2, #2]
   for(int i = 0; i < Length; i++)
 80027ec:	2300      	movs	r3, #0
 80027ee:	617b      	str	r3, [r7, #20]
 80027f0:	e00a      	b.n	8002808 <RFP_SendData+0x44>
   {
      RfpDataTransmit[i + 3] = Data[i];
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	68ba      	ldr	r2, [r7, #8]
 80027f6:	441a      	add	r2, r3
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	3303      	adds	r3, #3
 80027fc:	7811      	ldrb	r1, [r2, #0]
 80027fe:	4a1d      	ldr	r2, [pc, #116]	; (8002874 <RFP_SendData+0xb0>)
 8002800:	54d1      	strb	r1, [r2, r3]
   for(int i = 0; i < Length; i++)
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	3301      	adds	r3, #1
 8002806:	617b      	str	r3, [r7, #20]
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	429a      	cmp	r2, r3
 800280e:	d8f0      	bhi.n	80027f2 <RFP_SendData+0x2e>
   }
   uint32_t crc                    = Crc(CRC_INITIAL_VALUE, 3 + Length, RfpDataTransmit);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	3303      	adds	r3, #3
 8002814:	4a17      	ldr	r2, [pc, #92]	; (8002874 <RFP_SendData+0xb0>)
 8002816:	4619      	mov	r1, r3
 8002818:	f04f 30ff 	mov.w	r0, #4294967295
 800281c:	f7fe ff60 	bl	80016e0 <Crc>
 8002820:	6138      	str	r0, [r7, #16]
   RfpDataTransmit[3 + Length]     = ((crc >> 24) & 0xff);
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	0e1a      	lsrs	r2, r3, #24
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	3303      	adds	r3, #3
 800282a:	b2d1      	uxtb	r1, r2
 800282c:	4a11      	ldr	r2, [pc, #68]	; (8002874 <RFP_SendData+0xb0>)
 800282e:	54d1      	strb	r1, [r2, r3]
   RfpDataTransmit[3 + Length + 1] = ((crc >> 16) & 0xff);
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	0c1a      	lsrs	r2, r3, #16
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	3304      	adds	r3, #4
 8002838:	b2d1      	uxtb	r1, r2
 800283a:	4a0e      	ldr	r2, [pc, #56]	; (8002874 <RFP_SendData+0xb0>)
 800283c:	54d1      	strb	r1, [r2, r3]
   RfpDataTransmit[3 + Length + 2] = ((crc >> 8) & 0xff);
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	0a1a      	lsrs	r2, r3, #8
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	3305      	adds	r3, #5
 8002846:	b2d1      	uxtb	r1, r2
 8002848:	4a0a      	ldr	r2, [pc, #40]	; (8002874 <RFP_SendData+0xb0>)
 800284a:	54d1      	strb	r1, [r2, r3]
   RfpDataTransmit[3 + Length + 3] = (crc & 0xff);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	3306      	adds	r3, #6
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	b2d1      	uxtb	r1, r2
 8002854:	4a07      	ldr	r2, [pc, #28]	; (8002874 <RFP_SendData+0xb0>)
 8002856:	54d1      	strb	r1, [r2, r3]
   Rfp->SendFlag                   = RFP_SEND_FLAG_SET;
 8002858:	4b07      	ldr	r3, [pc, #28]	; (8002878 <RFP_SendData+0xb4>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2201      	movs	r2, #1
 800285e:	745a      	strb	r2, [r3, #17]
   Rfp->DataSizeTransmit           = 3 + Length + 4;
 8002860:	4b05      	ldr	r3, [pc, #20]	; (8002878 <RFP_SendData+0xb4>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	3207      	adds	r2, #7
 8002868:	60da      	str	r2, [r3, #12]
}
 800286a:	bf00      	nop
 800286c:	3718      	adds	r7, #24
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	20003df8 	.word	0x20003df8
 8002878:	20003e5c 	.word	0x20003e5c

0800287c <RFP_SendResponseFunction>:
static void RFP_SendResponseFunction(RFPMessageType_TypeDef Response)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	4603      	mov	r3, r0
 8002884:	71fb      	strb	r3, [r7, #7]
   HAL_Delay(200);
 8002886:	20c8      	movs	r0, #200	; 0xc8
 8002888:	f001 fa54 	bl	8003d34 <HAL_Delay>
   RfpDataTransmit[0] = Rfp->SourceMessage;
 800288c:	4b18      	ldr	r3, [pc, #96]	; (80028f0 <RFP_SendResponseFunction+0x74>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	7c1a      	ldrb	r2, [r3, #16]
 8002892:	4b18      	ldr	r3, [pc, #96]	; (80028f4 <RFP_SendResponseFunction+0x78>)
 8002894:	701a      	strb	r2, [r3, #0]
   RfpDataTransmit[1] = Rfp->DeviceType;
 8002896:	4b16      	ldr	r3, [pc, #88]	; (80028f0 <RFP_SendResponseFunction+0x74>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	795a      	ldrb	r2, [r3, #5]
 800289c:	4b15      	ldr	r3, [pc, #84]	; (80028f4 <RFP_SendResponseFunction+0x78>)
 800289e:	705a      	strb	r2, [r3, #1]
   RfpDataTransmit[2] = RFP_MESSAGE;
 80028a0:	4b14      	ldr	r3, [pc, #80]	; (80028f4 <RFP_SendResponseFunction+0x78>)
 80028a2:	2203      	movs	r2, #3
 80028a4:	709a      	strb	r2, [r3, #2]
   RfpDataTransmit[3] = Response;
 80028a6:	4a13      	ldr	r2, [pc, #76]	; (80028f4 <RFP_SendResponseFunction+0x78>)
 80028a8:	79fb      	ldrb	r3, [r7, #7]
 80028aa:	70d3      	strb	r3, [r2, #3]
   uint32_t crc       = Crc(CRC_INITIAL_VALUE, 4, RfpDataTransmit);
 80028ac:	4a11      	ldr	r2, [pc, #68]	; (80028f4 <RFP_SendResponseFunction+0x78>)
 80028ae:	2104      	movs	r1, #4
 80028b0:	f04f 30ff 	mov.w	r0, #4294967295
 80028b4:	f7fe ff14 	bl	80016e0 <Crc>
 80028b8:	60f8      	str	r0, [r7, #12]
   RfpDataTransmit[4] = ((crc >> 24) & 0xff);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	0e1b      	lsrs	r3, r3, #24
 80028be:	b2da      	uxtb	r2, r3
 80028c0:	4b0c      	ldr	r3, [pc, #48]	; (80028f4 <RFP_SendResponseFunction+0x78>)
 80028c2:	711a      	strb	r2, [r3, #4]
   RfpDataTransmit[5] = ((crc >> 16) & 0xff);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	0c1b      	lsrs	r3, r3, #16
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	4b0a      	ldr	r3, [pc, #40]	; (80028f4 <RFP_SendResponseFunction+0x78>)
 80028cc:	715a      	strb	r2, [r3, #5]
   RfpDataTransmit[6] = ((crc >> 8) & 0xff);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	0a1b      	lsrs	r3, r3, #8
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	4b07      	ldr	r3, [pc, #28]	; (80028f4 <RFP_SendResponseFunction+0x78>)
 80028d6:	719a      	strb	r2, [r3, #6]
   RfpDataTransmit[7] = (crc & 0xff);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	b2da      	uxtb	r2, r3
 80028dc:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <RFP_SendResponseFunction+0x78>)
 80028de:	71da      	strb	r2, [r3, #7]
   HC12_TransmitData(RfpDataTransmit, 8);
 80028e0:	2108      	movs	r1, #8
 80028e2:	4804      	ldr	r0, [pc, #16]	; (80028f4 <RFP_SendResponseFunction+0x78>)
 80028e4:	f7fe fec0 	bl	8001668 <HC12_TransmitData>
}
 80028e8:	bf00      	nop
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	20003e5c 	.word	0x20003e5c
 80028f4:	20003df8 	.word	0x20003df8

080028f8 <RFP_InitializeFunction>:
static void RFP_InitializeFunction(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
   Rfp->NewEvent = RFP_EVENT_END_INITIALIZE;
 80028fc:	4b08      	ldr	r3, [pc, #32]	; (8002920 <RFP_InitializeFunction+0x28>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2202      	movs	r2, #2
 8002902:	705a      	strb	r2, [r3, #1]
   HC12_ExitCommandMode();
 8002904:	f7fe fea5 	bl	8001652 <HC12_ExitCommandMode>
   HC12_Init(Rfp, RfpDataRecive);
 8002908:	4b05      	ldr	r3, [pc, #20]	; (8002920 <RFP_InitializeFunction+0x28>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4905      	ldr	r1, [pc, #20]	; (8002924 <RFP_InitializeFunction+0x2c>)
 800290e:	4618      	mov	r0, r3
 8002910:	f7fe fed0 	bl	80016b4 <HC12_Init>
   HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8002914:	2164      	movs	r1, #100	; 0x64
 8002916:	4803      	ldr	r0, [pc, #12]	; (8002924 <RFP_InitializeFunction+0x2c>)
 8002918:	f7fe feba 	bl	8001690 <HC12_ReciveToIdleDMA>
}
 800291c:	bf00      	nop
 800291e:	bd80      	pop	{r7, pc}
 8002920:	20003e5c 	.word	0x20003e5c
 8002924:	20003d94 	.word	0x20003d94

08002928 <RFP_IdleFunction>:
static void RFP_IdleFunction(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
   if(Rfp->NewDataFlag == RFP_NEW_DATA_FLAG_SET)
 800292c:	4b10      	ldr	r3, [pc, #64]	; (8002970 <RFP_IdleFunction+0x48>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	791b      	ldrb	r3, [r3, #4]
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b01      	cmp	r3, #1
 8002936:	d108      	bne.n	800294a <RFP_IdleFunction+0x22>
   {
      Rfp->NewDataFlag = RFP_NEW_DATA_FLAG_RESET;
 8002938:	4b0d      	ldr	r3, [pc, #52]	; (8002970 <RFP_IdleFunction+0x48>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2200      	movs	r2, #0
 800293e:	711a      	strb	r2, [r3, #4]
      Rfp->NewEvent    = RFP_EVENT_NEW_DATA;
 8002940:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <RFP_IdleFunction+0x48>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2201      	movs	r2, #1
 8002946:	705a      	strb	r2, [r3, #1]
   {
      Rfp->SendFlag = RFP_SEND_FLAG_RESET;
      Rfp->NewEvent = RFP_EVENT_SEND;
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
   }
}
 8002948:	e010      	b.n	800296c <RFP_IdleFunction+0x44>
   else if(Rfp->SendFlag == RFP_SEND_FLAG_SET)
 800294a:	4b09      	ldr	r3, [pc, #36]	; (8002970 <RFP_IdleFunction+0x48>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	7c5b      	ldrb	r3, [r3, #17]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d10b      	bne.n	800296c <RFP_IdleFunction+0x44>
      Rfp->SendFlag = RFP_SEND_FLAG_RESET;
 8002954:	4b06      	ldr	r3, [pc, #24]	; (8002970 <RFP_IdleFunction+0x48>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2200      	movs	r2, #0
 800295a:	745a      	strb	r2, [r3, #17]
      Rfp->NewEvent = RFP_EVENT_SEND;
 800295c:	4b04      	ldr	r3, [pc, #16]	; (8002970 <RFP_IdleFunction+0x48>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2206      	movs	r2, #6
 8002962:	705a      	strb	r2, [r3, #1]
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8002964:	2164      	movs	r1, #100	; 0x64
 8002966:	4803      	ldr	r0, [pc, #12]	; (8002974 <RFP_IdleFunction+0x4c>)
 8002968:	f7fe fe92 	bl	8001690 <HC12_ReciveToIdleDMA>
}
 800296c:	bf00      	nop
 800296e:	bd80      	pop	{r7, pc}
 8002970:	20003e5c 	.word	0x20003e5c
 8002974:	20003d94 	.word	0x20003d94

08002978 <RFP_ParseFunction>:
static void RFP_ParseFunction(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
   uint32_t MessageCRC = 0;
 800297e:	2300      	movs	r3, #0
 8002980:	607b      	str	r3, [r7, #4]
   Rfp->SourceMessage  = RfpDataRecive[1];
 8002982:	4b3a      	ldr	r3, [pc, #232]	; (8002a6c <RFP_ParseFunction+0xf4>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a3a      	ldr	r2, [pc, #232]	; (8002a70 <RFP_ParseFunction+0xf8>)
 8002988:	7852      	ldrb	r2, [r2, #1]
 800298a:	741a      	strb	r2, [r3, #16]
   if(RfpDataRecive[0] != Rfp->DeviceType)
 800298c:	4b38      	ldr	r3, [pc, #224]	; (8002a70 <RFP_ParseFunction+0xf8>)
 800298e:	781a      	ldrb	r2, [r3, #0]
 8002990:	4b36      	ldr	r3, [pc, #216]	; (8002a6c <RFP_ParseFunction+0xf4>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	795b      	ldrb	r3, [r3, #5]
 8002996:	429a      	cmp	r2, r3
 8002998:	d00b      	beq.n	80029b2 <RFP_ParseFunction+0x3a>
   {
      Rfp->NewEvent = RFP_EVENT_ERROR;
 800299a:	4b34      	ldr	r3, [pc, #208]	; (8002a6c <RFP_ParseFunction+0xf4>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2203      	movs	r2, #3
 80029a0:	705a      	strb	r2, [r3, #1]
      RFP_SendResponseFunction(RFP_ERROR);
 80029a2:	2001      	movs	r0, #1
 80029a4:	f7ff ff6a 	bl	800287c <RFP_SendResponseFunction>
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 80029a8:	2164      	movs	r1, #100	; 0x64
 80029aa:	4831      	ldr	r0, [pc, #196]	; (8002a70 <RFP_ParseFunction+0xf8>)
 80029ac:	f7fe fe70 	bl	8001690 <HC12_ReciveToIdleDMA>
               HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
            }
         }
      }
   }
}
 80029b0:	e057      	b.n	8002a62 <RFP_ParseFunction+0xea>
      if(Rfp->DataSize != 0)
 80029b2:	4b2e      	ldr	r3, [pc, #184]	; (8002a6c <RFP_ParseFunction+0xf4>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d052      	beq.n	8002a62 <RFP_ParseFunction+0xea>
         MessageCRC = (((uint32_t)RfpDataRecive[Rfp->DataSize - 4] << 24) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 3] << 16)
 80029bc:	4b2b      	ldr	r3, [pc, #172]	; (8002a6c <RFP_ParseFunction+0xf4>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	3b04      	subs	r3, #4
 80029c4:	4a2a      	ldr	r2, [pc, #168]	; (8002a70 <RFP_ParseFunction+0xf8>)
 80029c6:	5cd3      	ldrb	r3, [r2, r3]
 80029c8:	061a      	lsls	r2, r3, #24
 80029ca:	4b28      	ldr	r3, [pc, #160]	; (8002a6c <RFP_ParseFunction+0xf4>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	3b03      	subs	r3, #3
 80029d2:	4927      	ldr	r1, [pc, #156]	; (8002a70 <RFP_ParseFunction+0xf8>)
 80029d4:	5ccb      	ldrb	r3, [r1, r3]
 80029d6:	041b      	lsls	r3, r3, #16
 80029d8:	431a      	orrs	r2, r3
                       | ((uint32_t)RfpDataRecive[Rfp->DataSize - 2] << 8) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 1]));
 80029da:	4b24      	ldr	r3, [pc, #144]	; (8002a6c <RFP_ParseFunction+0xf4>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	3b02      	subs	r3, #2
 80029e2:	4923      	ldr	r1, [pc, #140]	; (8002a70 <RFP_ParseFunction+0xf8>)
 80029e4:	5ccb      	ldrb	r3, [r1, r3]
 80029e6:	021b      	lsls	r3, r3, #8
 80029e8:	4313      	orrs	r3, r2
 80029ea:	4a20      	ldr	r2, [pc, #128]	; (8002a6c <RFP_ParseFunction+0xf4>)
 80029ec:	6812      	ldr	r2, [r2, #0]
 80029ee:	6892      	ldr	r2, [r2, #8]
 80029f0:	3a01      	subs	r2, #1
 80029f2:	491f      	ldr	r1, [pc, #124]	; (8002a70 <RFP_ParseFunction+0xf8>)
 80029f4:	5c8a      	ldrb	r2, [r1, r2]
         MessageCRC = (((uint32_t)RfpDataRecive[Rfp->DataSize - 4] << 24) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 3] << 16)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	607b      	str	r3, [r7, #4]
         if(MessageCRC == Crc(CRC_INITIAL_VALUE, Rfp->DataSize - 4, RfpDataRecive))
 80029fa:	4b1c      	ldr	r3, [pc, #112]	; (8002a6c <RFP_ParseFunction+0xf4>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	3b04      	subs	r3, #4
 8002a02:	4a1b      	ldr	r2, [pc, #108]	; (8002a70 <RFP_ParseFunction+0xf8>)
 8002a04:	4619      	mov	r1, r3
 8002a06:	f04f 30ff 	mov.w	r0, #4294967295
 8002a0a:	f7fe fe69 	bl	80016e0 <Crc>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d107      	bne.n	8002a26 <RFP_ParseFunction+0xae>
            Rfp->NewEvent = RFP_EVENT_DATA_OK;
 8002a16:	4b15      	ldr	r3, [pc, #84]	; (8002a6c <RFP_ParseFunction+0xf4>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2204      	movs	r2, #4
 8002a1c:	705a      	strb	r2, [r3, #1]
            RFP_SendResponseFunction(RFP_OK);
 8002a1e:	2004      	movs	r0, #4
 8002a20:	f7ff ff2c 	bl	800287c <RFP_SendResponseFunction>
}
 8002a24:	e01d      	b.n	8002a62 <RFP_ParseFunction+0xea>
            if(RepareMessage(MessageCRC, RfpDataRecive, Rfp->DataSize) == CRC_OK)
 8002a26:	4b11      	ldr	r3, [pc, #68]	; (8002a6c <RFP_ParseFunction+0xf4>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	4910      	ldr	r1, [pc, #64]	; (8002a70 <RFP_ParseFunction+0xf8>)
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f7fe fead 	bl	8001790 <RepareMessage>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d107      	bne.n	8002a4c <RFP_ParseFunction+0xd4>
               Rfp->NewEvent = RFP_EVENT_DATA_OK;
 8002a3c:	4b0b      	ldr	r3, [pc, #44]	; (8002a6c <RFP_ParseFunction+0xf4>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2204      	movs	r2, #4
 8002a42:	705a      	strb	r2, [r3, #1]
               RFP_SendResponseFunction(RFP_OK);
 8002a44:	2004      	movs	r0, #4
 8002a46:	f7ff ff19 	bl	800287c <RFP_SendResponseFunction>
}
 8002a4a:	e00a      	b.n	8002a62 <RFP_ParseFunction+0xea>
               Rfp->NewEvent = RFP_EVENT_ERROR;
 8002a4c:	4b07      	ldr	r3, [pc, #28]	; (8002a6c <RFP_ParseFunction+0xf4>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2203      	movs	r2, #3
 8002a52:	705a      	strb	r2, [r3, #1]
               RFP_SendResponseFunction(RFP_CRC_ERROR);
 8002a54:	2002      	movs	r0, #2
 8002a56:	f7ff ff11 	bl	800287c <RFP_SendResponseFunction>
               HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8002a5a:	2164      	movs	r1, #100	; 0x64
 8002a5c:	4804      	ldr	r0, [pc, #16]	; (8002a70 <RFP_ParseFunction+0xf8>)
 8002a5e:	f7fe fe17 	bl	8001690 <HC12_ReciveToIdleDMA>
}
 8002a62:	bf00      	nop
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20003e5c 	.word	0x20003e5c
 8002a70:	20003d94 	.word	0x20003d94

08002a74 <RFP_RunningFunction>:
static void RFP_RunningFunction(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
   switch(RfpDataRecive[2])
 8002a78:	4b27      	ldr	r3, [pc, #156]	; (8002b18 <RFP_RunningFunction+0xa4>)
 8002a7a:	789b      	ldrb	r3, [r3, #2]
 8002a7c:	2b03      	cmp	r3, #3
 8002a7e:	d028      	beq.n	8002ad2 <RFP_RunningFunction+0x5e>
 8002a80:	2b03      	cmp	r3, #3
 8002a82:	dc3b      	bgt.n	8002afc <RFP_RunningFunction+0x88>
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d002      	beq.n	8002a8e <RFP_RunningFunction+0x1a>
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d015      	beq.n	8002ab8 <RFP_RunningFunction+0x44>
         }
         break;
      }
      default:
      {
         break;
 8002a8c:	e036      	b.n	8002afc <RFP_RunningFunction+0x88>
         if(RfpCommandFunction[RfpDataRecive[3] - 1].RfpCommandFunction != NULL)
 8002a8e:	4b22      	ldr	r3, [pc, #136]	; (8002b18 <RFP_RunningFunction+0xa4>)
 8002a90:	78db      	ldrb	r3, [r3, #3]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	4a21      	ldr	r2, [pc, #132]	; (8002b1c <RFP_RunningFunction+0xa8>)
 8002a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d030      	beq.n	8002b00 <RFP_RunningFunction+0x8c>
            RfpCommandFunction[RfpDataRecive[3] - 1].RfpCommandFunction(RfpDataRecive, Rfp->DataSize, 4);
 8002a9e:	4b1e      	ldr	r3, [pc, #120]	; (8002b18 <RFP_RunningFunction+0xa4>)
 8002aa0:	78db      	ldrb	r3, [r3, #3]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	4a1d      	ldr	r2, [pc, #116]	; (8002b1c <RFP_RunningFunction+0xa8>)
 8002aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aaa:	4a1d      	ldr	r2, [pc, #116]	; (8002b20 <RFP_RunningFunction+0xac>)
 8002aac:	6812      	ldr	r2, [r2, #0]
 8002aae:	6891      	ldr	r1, [r2, #8]
 8002ab0:	2204      	movs	r2, #4
 8002ab2:	4819      	ldr	r0, [pc, #100]	; (8002b18 <RFP_RunningFunction+0xa4>)
 8002ab4:	4798      	blx	r3
         break;
 8002ab6:	e023      	b.n	8002b00 <RFP_RunningFunction+0x8c>
         if(RfpDataFunctions.RfpDataFunction != NULL)
 8002ab8:	4b1a      	ldr	r3, [pc, #104]	; (8002b24 <RFP_RunningFunction+0xb0>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d021      	beq.n	8002b04 <RFP_RunningFunction+0x90>
            RfpDataFunctions.RfpDataFunction(RfpDataRecive, Rfp->DataSize, 4);
 8002ac0:	4b18      	ldr	r3, [pc, #96]	; (8002b24 <RFP_RunningFunction+0xb0>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a16      	ldr	r2, [pc, #88]	; (8002b20 <RFP_RunningFunction+0xac>)
 8002ac6:	6812      	ldr	r2, [r2, #0]
 8002ac8:	6891      	ldr	r1, [r2, #8]
 8002aca:	2204      	movs	r2, #4
 8002acc:	4812      	ldr	r0, [pc, #72]	; (8002b18 <RFP_RunningFunction+0xa4>)
 8002ace:	4798      	blx	r3
         break;
 8002ad0:	e018      	b.n	8002b04 <RFP_RunningFunction+0x90>
         if(RfpMessageFunction[RfpDataRecive[3] - 1].RfpMessageFunction != NULL)
 8002ad2:	4b11      	ldr	r3, [pc, #68]	; (8002b18 <RFP_RunningFunction+0xa4>)
 8002ad4:	78db      	ldrb	r3, [r3, #3]
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	4a13      	ldr	r2, [pc, #76]	; (8002b28 <RFP_RunningFunction+0xb4>)
 8002ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d012      	beq.n	8002b08 <RFP_RunningFunction+0x94>
            RfpMessageFunction[RfpDataRecive[3] - 1].RfpMessageFunction(RfpDataRecive, Rfp->DataSize, 4);
 8002ae2:	4b0d      	ldr	r3, [pc, #52]	; (8002b18 <RFP_RunningFunction+0xa4>)
 8002ae4:	78db      	ldrb	r3, [r3, #3]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	4a0f      	ldr	r2, [pc, #60]	; (8002b28 <RFP_RunningFunction+0xb4>)
 8002aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aee:	4a0c      	ldr	r2, [pc, #48]	; (8002b20 <RFP_RunningFunction+0xac>)
 8002af0:	6812      	ldr	r2, [r2, #0]
 8002af2:	6891      	ldr	r1, [r2, #8]
 8002af4:	2204      	movs	r2, #4
 8002af6:	4808      	ldr	r0, [pc, #32]	; (8002b18 <RFP_RunningFunction+0xa4>)
 8002af8:	4798      	blx	r3
         break;
 8002afa:	e005      	b.n	8002b08 <RFP_RunningFunction+0x94>
         break;
 8002afc:	bf00      	nop
 8002afe:	e004      	b.n	8002b0a <RFP_RunningFunction+0x96>
         break;
 8002b00:	bf00      	nop
 8002b02:	e002      	b.n	8002b0a <RFP_RunningFunction+0x96>
         break;
 8002b04:	bf00      	nop
 8002b06:	e000      	b.n	8002b0a <RFP_RunningFunction+0x96>
         break;
 8002b08:	bf00      	nop
      }
   }
   HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8002b0a:	2164      	movs	r1, #100	; 0x64
 8002b0c:	4802      	ldr	r0, [pc, #8]	; (8002b18 <RFP_RunningFunction+0xa4>)
 8002b0e:	f7fe fdbf 	bl	8001690 <HC12_ReciveToIdleDMA>
}
 8002b12:	bf00      	nop
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	20003d94 	.word	0x20003d94
 8002b1c:	20003e60 	.word	0x20003e60
 8002b20:	20003e5c 	.word	0x20003e5c
 8002b24:	20003e78 	.word	0x20003e78
 8002b28:	20003e7c 	.word	0x20003e7c

08002b2c <RFP_SendFunction>:
static void RFP_SendFunction(void)
{
 8002b2c:	b598      	push	{r3, r4, r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
   if(Rfp->Cnt < 5)
 8002b30:	4b16      	ldr	r3, [pc, #88]	; (8002b8c <RFP_SendFunction+0x60>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	d819      	bhi.n	8002b6e <RFP_SendFunction+0x42>
   {
      HAL_Delay(200);
 8002b3a:	20c8      	movs	r0, #200	; 0xc8
 8002b3c:	f001 f8fa 	bl	8003d34 <HAL_Delay>
      HC12_TransmitData(RfpDataTransmit, Rfp->DataSizeTransmit);
 8002b40:	4b12      	ldr	r3, [pc, #72]	; (8002b8c <RFP_SendFunction+0x60>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	4619      	mov	r1, r3
 8002b48:	4811      	ldr	r0, [pc, #68]	; (8002b90 <RFP_SendFunction+0x64>)
 8002b4a:	f7fe fd8d 	bl	8001668 <HC12_TransmitData>
      Rfp->Cnt++;
 8002b4e:	4b0f      	ldr	r3, [pc, #60]	; (8002b8c <RFP_SendFunction+0x60>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	695a      	ldr	r2, [r3, #20]
 8002b54:	3201      	adds	r2, #1
 8002b56:	615a      	str	r2, [r3, #20]
      Rfp->NewEvent = RFP_EVENT_WAIT_FOR_RESPONSE;
 8002b58:	4b0c      	ldr	r3, [pc, #48]	; (8002b8c <RFP_SendFunction+0x60>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2205      	movs	r2, #5
 8002b5e:	705a      	strb	r2, [r3, #1]
      Rfp->LastTick = HAL_GetTick();
 8002b60:	4b0a      	ldr	r3, [pc, #40]	; (8002b8c <RFP_SendFunction+0x60>)
 8002b62:	681c      	ldr	r4, [r3, #0]
 8002b64:	f001 f8da 	bl	8003d1c <HAL_GetTick>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	61a3      	str	r3, [r4, #24]
   {
      Rfp->Cnt      = 0;
      Rfp->NewEvent = RFP_EVENT_ERROR;
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
   }
}
 8002b6c:	e00b      	b.n	8002b86 <RFP_SendFunction+0x5a>
      Rfp->Cnt      = 0;
 8002b6e:	4b07      	ldr	r3, [pc, #28]	; (8002b8c <RFP_SendFunction+0x60>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2200      	movs	r2, #0
 8002b74:	615a      	str	r2, [r3, #20]
      Rfp->NewEvent = RFP_EVENT_ERROR;
 8002b76:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <RFP_SendFunction+0x60>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2203      	movs	r2, #3
 8002b7c:	705a      	strb	r2, [r3, #1]
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8002b7e:	2164      	movs	r1, #100	; 0x64
 8002b80:	4804      	ldr	r0, [pc, #16]	; (8002b94 <RFP_SendFunction+0x68>)
 8002b82:	f7fe fd85 	bl	8001690 <HC12_ReciveToIdleDMA>
}
 8002b86:	bf00      	nop
 8002b88:	bd98      	pop	{r3, r4, r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	20003e5c 	.word	0x20003e5c
 8002b90:	20003df8 	.word	0x20003df8
 8002b94:	20003d94 	.word	0x20003d94

08002b98 <RFP_WaitForResponseFunction>:
static void RFP_WaitForResponseFunction(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
   if(HAL_GetTick() - Rfp->LastTick > 2000)
 8002b9c:	f001 f8be 	bl	8003d1c <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	4b0e      	ldr	r3, [pc, #56]	; (8002bdc <RFP_WaitForResponseFunction+0x44>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002bae:	d904      	bls.n	8002bba <RFP_WaitForResponseFunction+0x22>
   {
      Rfp->NewEvent = RFP_EVENT_ERROR;
 8002bb0:	4b0a      	ldr	r3, [pc, #40]	; (8002bdc <RFP_WaitForResponseFunction+0x44>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2203      	movs	r2, #3
 8002bb6:	705a      	strb	r2, [r3, #1]
   else if(Rfp->NewDataFlag == RFP_NEW_DATA_FLAG_SET)
   {
      Rfp->NewDataFlag = RFP_NEW_DATA_FLAG_RESET;
      Rfp->NewEvent    = RFP_EVENT_NEW_DATA;
   }
}
 8002bb8:	e00d      	b.n	8002bd6 <RFP_WaitForResponseFunction+0x3e>
   else if(Rfp->NewDataFlag == RFP_NEW_DATA_FLAG_SET)
 8002bba:	4b08      	ldr	r3, [pc, #32]	; (8002bdc <RFP_WaitForResponseFunction+0x44>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	791b      	ldrb	r3, [r3, #4]
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d107      	bne.n	8002bd6 <RFP_WaitForResponseFunction+0x3e>
      Rfp->NewDataFlag = RFP_NEW_DATA_FLAG_RESET;
 8002bc6:	4b05      	ldr	r3, [pc, #20]	; (8002bdc <RFP_WaitForResponseFunction+0x44>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	711a      	strb	r2, [r3, #4]
      Rfp->NewEvent    = RFP_EVENT_NEW_DATA;
 8002bce:	4b03      	ldr	r3, [pc, #12]	; (8002bdc <RFP_WaitForResponseFunction+0x44>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	705a      	strb	r2, [r3, #1]
}
 8002bd6:	bf00      	nop
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	20003e5c 	.word	0x20003e5c

08002be0 <RFP_ParseResponseFunction>:
static void RFP_ParseResponseFunction(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
   uint32_t MessageCRC = (((uint32_t)RfpDataRecive[Rfp->DataSize - 4] << 24) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 3] << 16)
 8002be6:	4b50      	ldr	r3, [pc, #320]	; (8002d28 <RFP_ParseResponseFunction+0x148>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	3b04      	subs	r3, #4
 8002bee:	4a4f      	ldr	r2, [pc, #316]	; (8002d2c <RFP_ParseResponseFunction+0x14c>)
 8002bf0:	5cd3      	ldrb	r3, [r2, r3]
 8002bf2:	061a      	lsls	r2, r3, #24
 8002bf4:	4b4c      	ldr	r3, [pc, #304]	; (8002d28 <RFP_ParseResponseFunction+0x148>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	3b03      	subs	r3, #3
 8002bfc:	494b      	ldr	r1, [pc, #300]	; (8002d2c <RFP_ParseResponseFunction+0x14c>)
 8002bfe:	5ccb      	ldrb	r3, [r1, r3]
 8002c00:	041b      	lsls	r3, r3, #16
 8002c02:	431a      	orrs	r2, r3
                          | ((uint32_t)RfpDataRecive[Rfp->DataSize - 2] << 8) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 1]));
 8002c04:	4b48      	ldr	r3, [pc, #288]	; (8002d28 <RFP_ParseResponseFunction+0x148>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	3b02      	subs	r3, #2
 8002c0c:	4947      	ldr	r1, [pc, #284]	; (8002d2c <RFP_ParseResponseFunction+0x14c>)
 8002c0e:	5ccb      	ldrb	r3, [r1, r3]
 8002c10:	021b      	lsls	r3, r3, #8
 8002c12:	4313      	orrs	r3, r2
 8002c14:	4a44      	ldr	r2, [pc, #272]	; (8002d28 <RFP_ParseResponseFunction+0x148>)
 8002c16:	6812      	ldr	r2, [r2, #0]
 8002c18:	6892      	ldr	r2, [r2, #8]
 8002c1a:	3a01      	subs	r2, #1
 8002c1c:	4943      	ldr	r1, [pc, #268]	; (8002d2c <RFP_ParseResponseFunction+0x14c>)
 8002c1e:	5c8a      	ldrb	r2, [r1, r2]
   uint32_t MessageCRC = (((uint32_t)RfpDataRecive[Rfp->DataSize - 4] << 24) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 3] << 16)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	607b      	str	r3, [r7, #4]
   if(MessageCRC == Crc(CRC_INITIAL_VALUE, Rfp->DataSize - 4, RfpDataRecive))
 8002c24:	4b40      	ldr	r3, [pc, #256]	; (8002d28 <RFP_ParseResponseFunction+0x148>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	3b04      	subs	r3, #4
 8002c2c:	4a3f      	ldr	r2, [pc, #252]	; (8002d2c <RFP_ParseResponseFunction+0x14c>)
 8002c2e:	4619      	mov	r1, r3
 8002c30:	f04f 30ff 	mov.w	r0, #4294967295
 8002c34:	f7fe fd54 	bl	80016e0 <Crc>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d12d      	bne.n	8002c9c <RFP_ParseResponseFunction+0xbc>
   {
      if(RfpDataRecive[0] == Rfp->DeviceType && RfpDataRecive[2] == RFP_MESSAGE)
 8002c40:	4b3a      	ldr	r3, [pc, #232]	; (8002d2c <RFP_ParseResponseFunction+0x14c>)
 8002c42:	781a      	ldrb	r2, [r3, #0]
 8002c44:	4b38      	ldr	r3, [pc, #224]	; (8002d28 <RFP_ParseResponseFunction+0x148>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	795b      	ldrb	r3, [r3, #5]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d11d      	bne.n	8002c8a <RFP_ParseResponseFunction+0xaa>
 8002c4e:	4b37      	ldr	r3, [pc, #220]	; (8002d2c <RFP_ParseResponseFunction+0x14c>)
 8002c50:	789b      	ldrb	r3, [r3, #2]
 8002c52:	2b03      	cmp	r3, #3
 8002c54:	d119      	bne.n	8002c8a <RFP_ParseResponseFunction+0xaa>
      {
         if(RfpDataRecive[3] == RFP_OK)
 8002c56:	4b35      	ldr	r3, [pc, #212]	; (8002d2c <RFP_ParseResponseFunction+0x14c>)
 8002c58:	78db      	ldrb	r3, [r3, #3]
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	d10c      	bne.n	8002c78 <RFP_ParseResponseFunction+0x98>
         {
            Rfp->NewEvent = RFP_EVENT_DATA_OK;
 8002c5e:	4b32      	ldr	r3, [pc, #200]	; (8002d28 <RFP_ParseResponseFunction+0x148>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2204      	movs	r2, #4
 8002c64:	705a      	strb	r2, [r3, #1]
            Rfp->Cnt      = 0;
 8002c66:	4b30      	ldr	r3, [pc, #192]	; (8002d28 <RFP_ParseResponseFunction+0x148>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	615a      	str	r2, [r3, #20]
            HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8002c6e:	2164      	movs	r1, #100	; 0x64
 8002c70:	482e      	ldr	r0, [pc, #184]	; (8002d2c <RFP_ParseResponseFunction+0x14c>)
 8002c72:	f7fe fd0d 	bl	8001690 <HC12_ReciveToIdleDMA>
         if(RfpDataRecive[3] == RFP_OK)
 8002c76:	e053      	b.n	8002d20 <RFP_ParseResponseFunction+0x140>
         }
         else
         {
            Rfp->NewEvent = RFP_EVENT_ERROR;
 8002c78:	4b2b      	ldr	r3, [pc, #172]	; (8002d28 <RFP_ParseResponseFunction+0x148>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2203      	movs	r2, #3
 8002c7e:	705a      	strb	r2, [r3, #1]
            HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8002c80:	2164      	movs	r1, #100	; 0x64
 8002c82:	482a      	ldr	r0, [pc, #168]	; (8002d2c <RFP_ParseResponseFunction+0x14c>)
 8002c84:	f7fe fd04 	bl	8001690 <HC12_ReciveToIdleDMA>
         if(RfpDataRecive[3] == RFP_OK)
 8002c88:	e04a      	b.n	8002d20 <RFP_ParseResponseFunction+0x140>
         }
      }
      else
      {
         Rfp->NewEvent = RFP_EVENT_ERROR;
 8002c8a:	4b27      	ldr	r3, [pc, #156]	; (8002d28 <RFP_ParseResponseFunction+0x148>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2203      	movs	r2, #3
 8002c90:	705a      	strb	r2, [r3, #1]
         HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8002c92:	2164      	movs	r1, #100	; 0x64
 8002c94:	4825      	ldr	r0, [pc, #148]	; (8002d2c <RFP_ParseResponseFunction+0x14c>)
 8002c96:	f7fe fcfb 	bl	8001690 <HC12_ReciveToIdleDMA>
   else
   {
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
      Rfp->NewEvent = RFP_EVENT_ERROR;
   }
}
 8002c9a:	e041      	b.n	8002d20 <RFP_ParseResponseFunction+0x140>
   else if(RepareMessage(MessageCRC, RfpDataRecive, Rfp->DataSize) == CRC_OK)
 8002c9c:	4b22      	ldr	r3, [pc, #136]	; (8002d28 <RFP_ParseResponseFunction+0x148>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	4921      	ldr	r1, [pc, #132]	; (8002d2c <RFP_ParseResponseFunction+0x14c>)
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f7fe fd72 	bl	8001790 <RepareMessage>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d12d      	bne.n	8002d0e <RFP_ParseResponseFunction+0x12e>
      if(RfpDataRecive[0] == Rfp->DeviceType && RfpDataRecive[2] == RFP_MESSAGE)
 8002cb2:	4b1e      	ldr	r3, [pc, #120]	; (8002d2c <RFP_ParseResponseFunction+0x14c>)
 8002cb4:	781a      	ldrb	r2, [r3, #0]
 8002cb6:	4b1c      	ldr	r3, [pc, #112]	; (8002d28 <RFP_ParseResponseFunction+0x148>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	795b      	ldrb	r3, [r3, #5]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d11d      	bne.n	8002cfc <RFP_ParseResponseFunction+0x11c>
 8002cc0:	4b1a      	ldr	r3, [pc, #104]	; (8002d2c <RFP_ParseResponseFunction+0x14c>)
 8002cc2:	789b      	ldrb	r3, [r3, #2]
 8002cc4:	2b03      	cmp	r3, #3
 8002cc6:	d119      	bne.n	8002cfc <RFP_ParseResponseFunction+0x11c>
         if(RfpDataRecive[3] == RFP_OK)
 8002cc8:	4b18      	ldr	r3, [pc, #96]	; (8002d2c <RFP_ParseResponseFunction+0x14c>)
 8002cca:	78db      	ldrb	r3, [r3, #3]
 8002ccc:	2b04      	cmp	r3, #4
 8002cce:	d10c      	bne.n	8002cea <RFP_ParseResponseFunction+0x10a>
            Rfp->NewEvent = RFP_EVENT_DATA_OK;
 8002cd0:	4b15      	ldr	r3, [pc, #84]	; (8002d28 <RFP_ParseResponseFunction+0x148>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2204      	movs	r2, #4
 8002cd6:	705a      	strb	r2, [r3, #1]
            Rfp->Cnt      = 0;
 8002cd8:	4b13      	ldr	r3, [pc, #76]	; (8002d28 <RFP_ParseResponseFunction+0x148>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	615a      	str	r2, [r3, #20]
            HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8002ce0:	2164      	movs	r1, #100	; 0x64
 8002ce2:	4812      	ldr	r0, [pc, #72]	; (8002d2c <RFP_ParseResponseFunction+0x14c>)
 8002ce4:	f7fe fcd4 	bl	8001690 <HC12_ReciveToIdleDMA>
         if(RfpDataRecive[3] == RFP_OK)
 8002ce8:	e01a      	b.n	8002d20 <RFP_ParseResponseFunction+0x140>
            Rfp->NewEvent = RFP_EVENT_ERROR;
 8002cea:	4b0f      	ldr	r3, [pc, #60]	; (8002d28 <RFP_ParseResponseFunction+0x148>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2203      	movs	r2, #3
 8002cf0:	705a      	strb	r2, [r3, #1]
            HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8002cf2:	2164      	movs	r1, #100	; 0x64
 8002cf4:	480d      	ldr	r0, [pc, #52]	; (8002d2c <RFP_ParseResponseFunction+0x14c>)
 8002cf6:	f7fe fccb 	bl	8001690 <HC12_ReciveToIdleDMA>
         if(RfpDataRecive[3] == RFP_OK)
 8002cfa:	e011      	b.n	8002d20 <RFP_ParseResponseFunction+0x140>
         Rfp->NewEvent = RFP_EVENT_ERROR;
 8002cfc:	4b0a      	ldr	r3, [pc, #40]	; (8002d28 <RFP_ParseResponseFunction+0x148>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2203      	movs	r2, #3
 8002d02:	705a      	strb	r2, [r3, #1]
         HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8002d04:	2164      	movs	r1, #100	; 0x64
 8002d06:	4809      	ldr	r0, [pc, #36]	; (8002d2c <RFP_ParseResponseFunction+0x14c>)
 8002d08:	f7fe fcc2 	bl	8001690 <HC12_ReciveToIdleDMA>
}
 8002d0c:	e008      	b.n	8002d20 <RFP_ParseResponseFunction+0x140>
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8002d0e:	2164      	movs	r1, #100	; 0x64
 8002d10:	4806      	ldr	r0, [pc, #24]	; (8002d2c <RFP_ParseResponseFunction+0x14c>)
 8002d12:	f7fe fcbd 	bl	8001690 <HC12_ReciveToIdleDMA>
      Rfp->NewEvent = RFP_EVENT_ERROR;
 8002d16:	4b04      	ldr	r3, [pc, #16]	; (8002d28 <RFP_ParseResponseFunction+0x148>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2203      	movs	r2, #3
 8002d1c:	705a      	strb	r2, [r3, #1]
}
 8002d1e:	e7ff      	b.n	8002d20 <RFP_ParseResponseFunction+0x140>
 8002d20:	bf00      	nop
 8002d22:	3708      	adds	r7, #8
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	20003e5c 	.word	0x20003e5c
 8002d2c:	20003d94 	.word	0x20003d94

08002d30 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002d34:	4b07      	ldr	r3, [pc, #28]	; (8002d54 <MX_RNG_Init+0x24>)
 8002d36:	4a08      	ldr	r2, [pc, #32]	; (8002d58 <MX_RNG_Init+0x28>)
 8002d38:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8002d3a:	4b06      	ldr	r3, [pc, #24]	; (8002d54 <MX_RNG_Init+0x24>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002d40:	4804      	ldr	r0, [pc, #16]	; (8002d54 <MX_RNG_Init+0x24>)
 8002d42:	f003 fb99 	bl	8006478 <HAL_RNG_Init>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8002d4c:	f7ff fc66 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002d50:	bf00      	nop
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	20003e90 	.word	0x20003e90
 8002d58:	50060800 	.word	0x50060800

08002d5c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b0aa      	sub	sp, #168	; 0xa8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d64:	f107 0310 	add.w	r3, r7, #16
 8002d68:	2298      	movs	r2, #152	; 0x98
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f007 fc9f 	bl	800a6b0 <memset>
  if(rngHandle->Instance==RNG)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a19      	ldr	r2, [pc, #100]	; (8002ddc <HAL_RNG_MspInit+0x80>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d12b      	bne.n	8002dd4 <HAL_RNG_MspInit+0x78>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002d7c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d80:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8002d82:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002d86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8002d92:	2310      	movs	r3, #16
 8002d94:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8002d96:	2302      	movs	r3, #2
 8002d98:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002d9e:	2302      	movs	r3, #2
 8002da0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8002da2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002da6:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002da8:	f107 0310 	add.w	r3, r7, #16
 8002dac:	4618      	mov	r0, r3
 8002dae:	f002 fe0f 	bl	80059d0 <HAL_RCCEx_PeriphCLKConfig>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <HAL_RNG_MspInit+0x60>
    {
      Error_Handler();
 8002db8:	f7ff fc30 	bl	800261c <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002dbc:	4b08      	ldr	r3, [pc, #32]	; (8002de0 <HAL_RNG_MspInit+0x84>)
 8002dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dc0:	4a07      	ldr	r2, [pc, #28]	; (8002de0 <HAL_RNG_MspInit+0x84>)
 8002dc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dc8:	4b05      	ldr	r3, [pc, #20]	; (8002de0 <HAL_RNG_MspInit+0x84>)
 8002dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8002dd4:	bf00      	nop
 8002dd6:	37a8      	adds	r7, #168	; 0xa8
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	50060800 	.word	0x50060800
 8002de0:	40021000 	.word	0x40021000

08002de4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002dea:	1d3b      	adds	r3, r7, #4
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	605a      	str	r2, [r3, #4]
 8002df2:	609a      	str	r2, [r3, #8]
 8002df4:	60da      	str	r2, [r3, #12]
 8002df6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002df8:	2300      	movs	r3, #0
 8002dfa:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002dfc:	4b13      	ldr	r3, [pc, #76]	; (8002e4c <MX_RTC_Init+0x68>)
 8002dfe:	4a14      	ldr	r2, [pc, #80]	; (8002e50 <MX_RTC_Init+0x6c>)
 8002e00:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002e02:	4b12      	ldr	r3, [pc, #72]	; (8002e4c <MX_RTC_Init+0x68>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8002e08:	4b10      	ldr	r3, [pc, #64]	; (8002e4c <MX_RTC_Init+0x68>)
 8002e0a:	227f      	movs	r2, #127	; 0x7f
 8002e0c:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8002e0e:	4b0f      	ldr	r3, [pc, #60]	; (8002e4c <MX_RTC_Init+0x68>)
 8002e10:	22ff      	movs	r2, #255	; 0xff
 8002e12:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002e14:	4b0d      	ldr	r3, [pc, #52]	; (8002e4c <MX_RTC_Init+0x68>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002e1a:	4b0c      	ldr	r3, [pc, #48]	; (8002e4c <MX_RTC_Init+0x68>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002e20:	4b0a      	ldr	r3, [pc, #40]	; (8002e4c <MX_RTC_Init+0x68>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002e26:	4b09      	ldr	r3, [pc, #36]	; (8002e4c <MX_RTC_Init+0x68>)
 8002e28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e2c:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8002e2e:	4b07      	ldr	r3, [pc, #28]	; (8002e4c <MX_RTC_Init+0x68>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002e34:	4805      	ldr	r0, [pc, #20]	; (8002e4c <MX_RTC_Init+0x68>)
 8002e36:	f003 fbc9 	bl	80065cc <HAL_RTC_Init>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8002e40:	f7ff fbec 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002e44:	3718      	adds	r7, #24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	20003ea4 	.word	0x20003ea4
 8002e50:	40002800 	.word	0x40002800

08002e54 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b0aa      	sub	sp, #168	; 0xa8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e5c:	f107 0310 	add.w	r3, r7, #16
 8002e60:	2298      	movs	r2, #152	; 0x98
 8002e62:	2100      	movs	r1, #0
 8002e64:	4618      	mov	r0, r3
 8002e66:	f007 fc23 	bl	800a6b0 <memset>
  if(rtcHandle->Instance==RTC)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a16      	ldr	r2, [pc, #88]	; (8002ec8 <HAL_RTC_MspInit+0x74>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d124      	bne.n	8002ebe <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002e74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e78:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002e7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e82:	f107 0310 	add.w	r3, r7, #16
 8002e86:	4618      	mov	r0, r3
 8002e88:	f002 fda2 	bl	80059d0 <HAL_RCCEx_PeriphCLKConfig>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002e92:	f7ff fbc3 	bl	800261c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002e96:	4b0d      	ldr	r3, [pc, #52]	; (8002ecc <HAL_RTC_MspInit+0x78>)
 8002e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e9c:	4a0b      	ldr	r2, [pc, #44]	; (8002ecc <HAL_RTC_MspInit+0x78>)
 8002e9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ea2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002ea6:	4b09      	ldr	r3, [pc, #36]	; (8002ecc <HAL_RTC_MspInit+0x78>)
 8002ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eaa:	4a08      	ldr	r2, [pc, #32]	; (8002ecc <HAL_RTC_MspInit+0x78>)
 8002eac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002eb0:	6593      	str	r3, [r2, #88]	; 0x58
 8002eb2:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <HAL_RTC_MspInit+0x78>)
 8002eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eba:	60fb      	str	r3, [r7, #12]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002ebe:	bf00      	nop
 8002ec0:	37a8      	adds	r7, #168	; 0xa8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40002800 	.word	0x40002800
 8002ecc:	40021000 	.word	0x40021000

08002ed0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002ed4:	4b1b      	ldr	r3, [pc, #108]	; (8002f44 <MX_SPI1_Init+0x74>)
 8002ed6:	4a1c      	ldr	r2, [pc, #112]	; (8002f48 <MX_SPI1_Init+0x78>)
 8002ed8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002eda:	4b1a      	ldr	r3, [pc, #104]	; (8002f44 <MX_SPI1_Init+0x74>)
 8002edc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ee0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002ee2:	4b18      	ldr	r3, [pc, #96]	; (8002f44 <MX_SPI1_Init+0x74>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ee8:	4b16      	ldr	r3, [pc, #88]	; (8002f44 <MX_SPI1_Init+0x74>)
 8002eea:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002eee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ef0:	4b14      	ldr	r3, [pc, #80]	; (8002f44 <MX_SPI1_Init+0x74>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ef6:	4b13      	ldr	r3, [pc, #76]	; (8002f44 <MX_SPI1_Init+0x74>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002efc:	4b11      	ldr	r3, [pc, #68]	; (8002f44 <MX_SPI1_Init+0x74>)
 8002efe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f02:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002f04:	4b0f      	ldr	r3, [pc, #60]	; (8002f44 <MX_SPI1_Init+0x74>)
 8002f06:	2228      	movs	r2, #40	; 0x28
 8002f08:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f0a:	4b0e      	ldr	r3, [pc, #56]	; (8002f44 <MX_SPI1_Init+0x74>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f10:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <MX_SPI1_Init+0x74>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f16:	4b0b      	ldr	r3, [pc, #44]	; (8002f44 <MX_SPI1_Init+0x74>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002f1c:	4b09      	ldr	r3, [pc, #36]	; (8002f44 <MX_SPI1_Init+0x74>)
 8002f1e:	2207      	movs	r2, #7
 8002f20:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002f22:	4b08      	ldr	r3, [pc, #32]	; (8002f44 <MX_SPI1_Init+0x74>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002f28:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <MX_SPI1_Init+0x74>)
 8002f2a:	2208      	movs	r2, #8
 8002f2c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002f2e:	4805      	ldr	r0, [pc, #20]	; (8002f44 <MX_SPI1_Init+0x74>)
 8002f30:	f003 fd40 	bl	80069b4 <HAL_SPI_Init>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002f3a:	f7ff fb6f 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002f3e:	bf00      	nop
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	20003ed8 	.word	0x20003ed8
 8002f48:	40013000 	.word	0x40013000

08002f4c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b08a      	sub	sp, #40	; 0x28
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f54:	f107 0314 	add.w	r3, r7, #20
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	605a      	str	r2, [r3, #4]
 8002f5e:	609a      	str	r2, [r3, #8]
 8002f60:	60da      	str	r2, [r3, #12]
 8002f62:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a17      	ldr	r2, [pc, #92]	; (8002fc8 <HAL_SPI_MspInit+0x7c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d128      	bne.n	8002fc0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f6e:	4b17      	ldr	r3, [pc, #92]	; (8002fcc <HAL_SPI_MspInit+0x80>)
 8002f70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f72:	4a16      	ldr	r2, [pc, #88]	; (8002fcc <HAL_SPI_MspInit+0x80>)
 8002f74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f78:	6613      	str	r3, [r2, #96]	; 0x60
 8002f7a:	4b14      	ldr	r3, [pc, #80]	; (8002fcc <HAL_SPI_MspInit+0x80>)
 8002f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f82:	613b      	str	r3, [r7, #16]
 8002f84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f86:	4b11      	ldr	r3, [pc, #68]	; (8002fcc <HAL_SPI_MspInit+0x80>)
 8002f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f8a:	4a10      	ldr	r2, [pc, #64]	; (8002fcc <HAL_SPI_MspInit+0x80>)
 8002f8c:	f043 0301 	orr.w	r3, r3, #1
 8002f90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f92:	4b0e      	ldr	r3, [pc, #56]	; (8002fcc <HAL_SPI_MspInit+0x80>)
 8002f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	60fb      	str	r3, [r7, #12]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002f9e:	23e0      	movs	r3, #224	; 0xe0
 8002fa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002faa:	2303      	movs	r3, #3
 8002fac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002fae:	2305      	movs	r3, #5
 8002fb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fb2:	f107 0314 	add.w	r3, r7, #20
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fbc:	f001 fb1e 	bl	80045fc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002fc0:	bf00      	nop
 8002fc2:	3728      	adds	r7, #40	; 0x28
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	40013000 	.word	0x40013000
 8002fcc:	40021000 	.word	0x40021000

08002fd0 <ssd1306_command>:
#include "main.h"
#include "string.h"
SPI_HandleTypeDef *ssd1306_spi;
static uint8_t buffer[(SSD1306_LCDWIDTH * SSD1306_LCDHEIGHT) / 8];
static void ssd1306_command(uint8_t command)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	71fb      	strb	r3, [r7, #7]
   HAL_GPIO_WritePin(ssd1306_dc_GPIO_Port, ssd1306_dc_Pin, GPIO_PIN_RESET);
 8002fda:	2200      	movs	r2, #0
 8002fdc:	2101      	movs	r1, #1
 8002fde:	480d      	ldr	r0, [pc, #52]	; (8003014 <ssd1306_command+0x44>)
 8002fe0:	f001 fcb6 	bl	8004950 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_RESET);
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	2110      	movs	r1, #16
 8002fe8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fec:	f001 fcb0 	bl	8004950 <HAL_GPIO_WritePin>
   HAL_SPI_Transmit(ssd1306_spi, &command, 1, 10);
 8002ff0:	4b09      	ldr	r3, [pc, #36]	; (8003018 <ssd1306_command+0x48>)
 8002ff2:	6818      	ldr	r0, [r3, #0]
 8002ff4:	1df9      	adds	r1, r7, #7
 8002ff6:	230a      	movs	r3, #10
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f003 fd7e 	bl	8006afa <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_SET);
 8002ffe:	2201      	movs	r2, #1
 8003000:	2110      	movs	r1, #16
 8003002:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003006:	f001 fca3 	bl	8004950 <HAL_GPIO_WritePin>
}
 800300a:	bf00      	nop
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	48000400 	.word	0x48000400
 8003018:	20003f3c 	.word	0x20003f3c

0800301c <ssd1306_set_pixel>:
   HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_RESET);
   HAL_SPI_Transmit(ssd1306_spi, &data, 1, 10);
   HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_SET);
}
void ssd1306_set_pixel(uint8_t x, uint8_t y, uint8_t color)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	4603      	mov	r3, r0
 8003024:	71fb      	strb	r3, [r7, #7]
 8003026:	460b      	mov	r3, r1
 8003028:	71bb      	strb	r3, [r7, #6]
 800302a:	4613      	mov	r3, r2
 800302c:	717b      	strb	r3, [r7, #5]
   if((x < 0) || (x >= SSD1306_LCDWIDTH) || (y < 0) || (y >= SSD1306_LCDHEIGHT))
 800302e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003032:	2b00      	cmp	r3, #0
 8003034:	db43      	blt.n	80030be <ssd1306_set_pixel+0xa2>
 8003036:	79bb      	ldrb	r3, [r7, #6]
 8003038:	2b3f      	cmp	r3, #63	; 0x3f
 800303a:	d840      	bhi.n	80030be <ssd1306_set_pixel+0xa2>
   {
      return;
   }
   if(color != 0 && color != 1)
 800303c:	797b      	ldrb	r3, [r7, #5]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d002      	beq.n	8003048 <ssd1306_set_pixel+0x2c>
 8003042:	797b      	ldrb	r3, [r7, #5]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d13c      	bne.n	80030c2 <ssd1306_set_pixel+0xa6>
   {
      return;
   }
   if(color == 0)
 8003048:	797b      	ldrb	r3, [r7, #5]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d11c      	bne.n	8003088 <ssd1306_set_pixel+0x6c>
   {
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y & 7));
 800304e:	79fa      	ldrb	r2, [r7, #7]
 8003050:	79bb      	ldrb	r3, [r7, #6]
 8003052:	08db      	lsrs	r3, r3, #3
 8003054:	b2d8      	uxtb	r0, r3
 8003056:	4603      	mov	r3, r0
 8003058:	01db      	lsls	r3, r3, #7
 800305a:	4413      	add	r3, r2
 800305c:	4a1c      	ldr	r2, [pc, #112]	; (80030d0 <ssd1306_set_pixel+0xb4>)
 800305e:	5cd3      	ldrb	r3, [r2, r3]
 8003060:	b25a      	sxtb	r2, r3
 8003062:	79bb      	ldrb	r3, [r7, #6]
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	2101      	movs	r1, #1
 800306a:	fa01 f303 	lsl.w	r3, r1, r3
 800306e:	b25b      	sxtb	r3, r3
 8003070:	43db      	mvns	r3, r3
 8003072:	b25b      	sxtb	r3, r3
 8003074:	4013      	ands	r3, r2
 8003076:	b259      	sxtb	r1, r3
 8003078:	79fa      	ldrb	r2, [r7, #7]
 800307a:	4603      	mov	r3, r0
 800307c:	01db      	lsls	r3, r3, #7
 800307e:	4413      	add	r3, r2
 8003080:	b2c9      	uxtb	r1, r1
 8003082:	4a13      	ldr	r2, [pc, #76]	; (80030d0 <ssd1306_set_pixel+0xb4>)
 8003084:	54d1      	strb	r1, [r2, r3]
 8003086:	e01d      	b.n	80030c4 <ssd1306_set_pixel+0xa8>
   }
   else
   {
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= (1 << (y & 7));
 8003088:	79fa      	ldrb	r2, [r7, #7]
 800308a:	79bb      	ldrb	r3, [r7, #6]
 800308c:	08db      	lsrs	r3, r3, #3
 800308e:	b2d8      	uxtb	r0, r3
 8003090:	4603      	mov	r3, r0
 8003092:	01db      	lsls	r3, r3, #7
 8003094:	4413      	add	r3, r2
 8003096:	4a0e      	ldr	r2, [pc, #56]	; (80030d0 <ssd1306_set_pixel+0xb4>)
 8003098:	5cd3      	ldrb	r3, [r2, r3]
 800309a:	b25a      	sxtb	r2, r3
 800309c:	79bb      	ldrb	r3, [r7, #6]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	2101      	movs	r1, #1
 80030a4:	fa01 f303 	lsl.w	r3, r1, r3
 80030a8:	b25b      	sxtb	r3, r3
 80030aa:	4313      	orrs	r3, r2
 80030ac:	b259      	sxtb	r1, r3
 80030ae:	79fa      	ldrb	r2, [r7, #7]
 80030b0:	4603      	mov	r3, r0
 80030b2:	01db      	lsls	r3, r3, #7
 80030b4:	4413      	add	r3, r2
 80030b6:	b2c9      	uxtb	r1, r1
 80030b8:	4a05      	ldr	r2, [pc, #20]	; (80030d0 <ssd1306_set_pixel+0xb4>)
 80030ba:	54d1      	strb	r1, [r2, r3]
 80030bc:	e002      	b.n	80030c4 <ssd1306_set_pixel+0xa8>
      return;
 80030be:	bf00      	nop
 80030c0:	e000      	b.n	80030c4 <ssd1306_set_pixel+0xa8>
      return;
 80030c2:	bf00      	nop
   }
}
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	20003f40 	.word	0x20003f40

080030d4 <ssd1306_display>:
void ssd1306_display()
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
   ssd1306_command(0x22);
 80030d8:	2022      	movs	r0, #34	; 0x22
 80030da:	f7ff ff79 	bl	8002fd0 <ssd1306_command>
   ssd1306_command(0x00);
 80030de:	2000      	movs	r0, #0
 80030e0:	f7ff ff76 	bl	8002fd0 <ssd1306_command>
   ssd1306_command(0x07);
 80030e4:	2007      	movs	r0, #7
 80030e6:	f7ff ff73 	bl	8002fd0 <ssd1306_command>
   HAL_GPIO_WritePin(ssd1306_dc_GPIO_Port, ssd1306_dc_Pin, GPIO_PIN_SET);
 80030ea:	2201      	movs	r2, #1
 80030ec:	2101      	movs	r1, #1
 80030ee:	480c      	ldr	r0, [pc, #48]	; (8003120 <ssd1306_display+0x4c>)
 80030f0:	f001 fc2e 	bl	8004950 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_RESET);
 80030f4:	2200      	movs	r2, #0
 80030f6:	2110      	movs	r1, #16
 80030f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030fc:	f001 fc28 	bl	8004950 <HAL_GPIO_WritePin>
   HAL_SPI_Transmit(ssd1306_spi, (uint8_t *)&buffer, (SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8), 100);
 8003100:	4b08      	ldr	r3, [pc, #32]	; (8003124 <ssd1306_display+0x50>)
 8003102:	6818      	ldr	r0, [r3, #0]
 8003104:	2364      	movs	r3, #100	; 0x64
 8003106:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800310a:	4907      	ldr	r1, [pc, #28]	; (8003128 <ssd1306_display+0x54>)
 800310c:	f003 fcf5 	bl	8006afa <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_SET);
 8003110:	2201      	movs	r2, #1
 8003112:	2110      	movs	r1, #16
 8003114:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003118:	f001 fc1a 	bl	8004950 <HAL_GPIO_WritePin>
}
 800311c:	bf00      	nop
 800311e:	bd80      	pop	{r7, pc}
 8003120:	48000400 	.word	0x48000400
 8003124:	20003f3c 	.word	0x20003f3c
 8003128:	20003f40 	.word	0x20003f40

0800312c <ssd1306_clear>:
void ssd1306_clear()
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
   memset(buffer, 0x00, (SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8));
 8003130:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003134:	2100      	movs	r1, #0
 8003136:	4802      	ldr	r0, [pc, #8]	; (8003140 <ssd1306_clear+0x14>)
 8003138:	f007 faba 	bl	800a6b0 <memset>
}
 800313c:	bf00      	nop
 800313e:	bd80      	pop	{r7, pc}
 8003140:	20003f40 	.word	0x20003f40

08003144 <ssd1306_init>:
void ssd1306_init(SPI_HandleTypeDef *spi)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(ssd1306_res_GPIO_Port, ssd1306_res_Pin, GPIO_PIN_RESET);
 800314c:	2200      	movs	r2, #0
 800314e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003152:	4833      	ldr	r0, [pc, #204]	; (8003220 <ssd1306_init+0xdc>)
 8003154:	f001 fbfc 	bl	8004950 <HAL_GPIO_WritePin>
   HAL_Delay(150);
 8003158:	2096      	movs	r0, #150	; 0x96
 800315a:	f000 fdeb 	bl	8003d34 <HAL_Delay>
   HAL_GPIO_WritePin(ssd1306_res_GPIO_Port, ssd1306_res_Pin, GPIO_PIN_SET);
 800315e:	2201      	movs	r2, #1
 8003160:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003164:	482e      	ldr	r0, [pc, #184]	; (8003220 <ssd1306_init+0xdc>)
 8003166:	f001 fbf3 	bl	8004950 <HAL_GPIO_WritePin>
   HAL_Delay(100);
 800316a:	2064      	movs	r0, #100	; 0x64
 800316c:	f000 fde2 	bl	8003d34 <HAL_Delay>
   ssd1306_spi = spi;
 8003170:	4a2c      	ldr	r2, [pc, #176]	; (8003224 <ssd1306_init+0xe0>)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6013      	str	r3, [r2, #0]
   ssd1306_command(0xAE); // Display Off
 8003176:	20ae      	movs	r0, #174	; 0xae
 8003178:	f7ff ff2a 	bl	8002fd0 <ssd1306_command>

   ssd1306_command(0x00);
 800317c:	2000      	movs	r0, #0
 800317e:	f7ff ff27 	bl	8002fd0 <ssd1306_command>
   ssd1306_command(0x10);
 8003182:	2010      	movs	r0, #16
 8003184:	f7ff ff24 	bl	8002fd0 <ssd1306_command>
   ssd1306_command(0x40);
 8003188:	2040      	movs	r0, #64	; 0x40
 800318a:	f7ff ff21 	bl	8002fd0 <ssd1306_command>
   ssd1306_command(0x20); // Set addressing mode
 800318e:	2020      	movs	r0, #32
 8003190:	f7ff ff1e 	bl	8002fd0 <ssd1306_command>
   ssd1306_command(0x00); // Horizontal Addressing Mode
 8003194:	2000      	movs	r0, #0
 8003196:	f7ff ff1b 	bl	8002fd0 <ssd1306_command>

   ssd1306_command(0x81); // Set Contrast Control
 800319a:	2081      	movs	r0, #129	; 0x81
 800319c:	f7ff ff18 	bl	8002fd0 <ssd1306_command>
   ssd1306_command(0xff);
 80031a0:	20ff      	movs	r0, #255	; 0xff
 80031a2:	f7ff ff15 	bl	8002fd0 <ssd1306_command>
   ssd1306_command(0xA0 | (0x01 & 1));
 80031a6:	20a1      	movs	r0, #161	; 0xa1
 80031a8:	f7ff ff12 	bl	8002fd0 <ssd1306_command>
   ssd1306_command(0xC0 | (0x08 & (1 << 3)));
 80031ac:	20c8      	movs	r0, #200	; 0xc8
 80031ae:	f7ff ff0f 	bl	8002fd0 <ssd1306_command>

   ssd1306_command(0xA6); // Set Normal Display
 80031b2:	20a6      	movs	r0, #166	; 0xa6
 80031b4:	f7ff ff0c 	bl	8002fd0 <ssd1306_command>

   ssd1306_command(0xA8); // Select Multiplex Ratio
 80031b8:	20a8      	movs	r0, #168	; 0xa8
 80031ba:	f7ff ff09 	bl	8002fd0 <ssd1306_command>
   ssd1306_command(0x3F); // Default => 0x3F (1/64 Duty)	0x1F(1/32 Duty)
 80031be:	203f      	movs	r0, #63	; 0x3f
 80031c0:	f7ff ff06 	bl	8002fd0 <ssd1306_command>

   ssd1306_command(0xD3); // Setting Display Offset
 80031c4:	20d3      	movs	r0, #211	; 0xd3
 80031c6:	f7ff ff03 	bl	8002fd0 <ssd1306_command>
   ssd1306_command(0x00); // 00H Reset
 80031ca:	2000      	movs	r0, #0
 80031cc:	f7ff ff00 	bl	8002fd0 <ssd1306_command>

   ssd1306_command(0xD5); // SET DISPLAY CLOCK
 80031d0:	20d5      	movs	r0, #213	; 0xd5
 80031d2:	f7ff fefd 	bl	8002fd0 <ssd1306_command>
   ssd1306_command(0x80); // 105HZ
 80031d6:	2080      	movs	r0, #128	; 0x80
 80031d8:	f7ff fefa 	bl	8002fd0 <ssd1306_command>

   ssd1306_command(0xD9); // Set Pre-Charge period
 80031dc:	20d9      	movs	r0, #217	; 0xd9
 80031de:	f7ff fef7 	bl	8002fd0 <ssd1306_command>
   ssd1306_command(0x22);
 80031e2:	2022      	movs	r0, #34	; 0x22
 80031e4:	f7ff fef4 	bl	8002fd0 <ssd1306_command>

   ssd1306_command(0xDA); // Set COM Hardware Configuration
 80031e8:	20da      	movs	r0, #218	; 0xda
 80031ea:	f7ff fef1 	bl	8002fd0 <ssd1306_command>
   ssd1306_command(0x12); // Alternative COM Pin---See IC Spec page 34
 80031ee:	2012      	movs	r0, #18
 80031f0:	f7ff feee 	bl	8002fd0 <ssd1306_command>
                          // (0x02)=> A4=0;Sequential COM pin configuration;A5=0;Disable COM Left/Right remap

   ssd1306_command(0xDB); // Set Deselect Vcomh level
 80031f4:	20db      	movs	r0, #219	; 0xdb
 80031f6:	f7ff feeb 	bl	8002fd0 <ssd1306_command>
   ssd1306_command(0x40);
 80031fa:	2040      	movs	r0, #64	; 0x40
 80031fc:	f7ff fee8 	bl	8002fd0 <ssd1306_command>

   ssd1306_command(0x8D); // Set Charge Pump
 8003200:	208d      	movs	r0, #141	; 0x8d
 8003202:	f7ff fee5 	bl	8002fd0 <ssd1306_command>
   // ssd1306_command(0x10);  // Disable Charge Pump
   ssd1306_command(0x14); // Endable Charge Pump
 8003206:	2014      	movs	r0, #20
 8003208:	f7ff fee2 	bl	8002fd0 <ssd1306_command>

   ssd1306_command(0xA4); // Entire Display ON
 800320c:	20a4      	movs	r0, #164	; 0xa4
 800320e:	f7ff fedf 	bl	8002fd0 <ssd1306_command>
   ssd1306_command(SSD1306_DISPLAYON);
 8003212:	20af      	movs	r0, #175	; 0xaf
 8003214:	f7ff fedc 	bl	8002fd0 <ssd1306_command>
}
 8003218:	bf00      	nop
 800321a:	3708      	adds	r7, #8
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	48000400 	.word	0x48000400
 8003224:	20003f3c 	.word	0x20003f3c

08003228 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800322e:	4b0f      	ldr	r3, [pc, #60]	; (800326c <HAL_MspInit+0x44>)
 8003230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003232:	4a0e      	ldr	r2, [pc, #56]	; (800326c <HAL_MspInit+0x44>)
 8003234:	f043 0301 	orr.w	r3, r3, #1
 8003238:	6613      	str	r3, [r2, #96]	; 0x60
 800323a:	4b0c      	ldr	r3, [pc, #48]	; (800326c <HAL_MspInit+0x44>)
 800323c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	607b      	str	r3, [r7, #4]
 8003244:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003246:	4b09      	ldr	r3, [pc, #36]	; (800326c <HAL_MspInit+0x44>)
 8003248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800324a:	4a08      	ldr	r2, [pc, #32]	; (800326c <HAL_MspInit+0x44>)
 800324c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003250:	6593      	str	r3, [r2, #88]	; 0x58
 8003252:	4b06      	ldr	r3, [pc, #24]	; (800326c <HAL_MspInit+0x44>)
 8003254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800325a:	603b      	str	r3, [r7, #0]
 800325c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800325e:	bf00      	nop
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	40021000 	.word	0x40021000

08003270 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003274:	e7fe      	b.n	8003274 <NMI_Handler+0x4>

08003276 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003276:	b480      	push	{r7}
 8003278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800327a:	e7fe      	b.n	800327a <HardFault_Handler+0x4>

0800327c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003280:	e7fe      	b.n	8003280 <MemManage_Handler+0x4>

08003282 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003282:	b480      	push	{r7}
 8003284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003286:	e7fe      	b.n	8003286 <BusFault_Handler+0x4>

08003288 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800328c:	e7fe      	b.n	800328c <UsageFault_Handler+0x4>

0800328e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800328e:	b480      	push	{r7}
 8003290:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003292:	bf00      	nop
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032a0:	bf00      	nop
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr

080032aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032aa:	b480      	push	{r7}
 80032ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032ae:	bf00      	nop
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032bc:	f000 fd1a 	bl	8003cf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032c0:	bf00      	nop
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80032c8:	4802      	ldr	r0, [pc, #8]	; (80032d4 <DMA1_Channel1_IRQHandler+0x10>)
 80032ca:	f001 f847 	bl	800435c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80032ce:	bf00      	nop
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	20004428 	.word	0x20004428

080032d8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80032dc:	4802      	ldr	r0, [pc, #8]	; (80032e8 <DMA1_Channel2_IRQHandler+0x10>)
 80032de:	f001 f83d 	bl	800435c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80032e2:	bf00      	nop
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	200045a8 	.word	0x200045a8

080032ec <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80032f0:	4802      	ldr	r0, [pc, #8]	; (80032fc <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80032f2:	f004 fc5b 	bl	8007bac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80032f6:	bf00      	nop
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	20004344 	.word	0x20004344

08003300 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003304:	4802      	ldr	r0, [pc, #8]	; (8003310 <USART1_IRQHandler+0x10>)
 8003306:	f005 fdbb 	bl	8008e80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800330a:	bf00      	nop
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	20004488 	.word	0x20004488

08003314 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
	return 1;
 8003318:	2301      	movs	r3, #1
}
 800331a:	4618      	mov	r0, r3
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <_kill>:

int _kill(int pid, int sig)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800332e:	f007 f995 	bl	800a65c <__errno>
 8003332:	4603      	mov	r3, r0
 8003334:	2216      	movs	r2, #22
 8003336:	601a      	str	r2, [r3, #0]
	return -1;
 8003338:	f04f 33ff 	mov.w	r3, #4294967295
}
 800333c:	4618      	mov	r0, r3
 800333e:	3708      	adds	r7, #8
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <_exit>:

void _exit (int status)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800334c:	f04f 31ff 	mov.w	r1, #4294967295
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f7ff ffe7 	bl	8003324 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003356:	e7fe      	b.n	8003356 <_exit+0x12>

08003358 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003364:	2300      	movs	r3, #0
 8003366:	617b      	str	r3, [r7, #20]
 8003368:	e00a      	b.n	8003380 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800336a:	f3af 8000 	nop.w
 800336e:	4601      	mov	r1, r0
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	1c5a      	adds	r2, r3, #1
 8003374:	60ba      	str	r2, [r7, #8]
 8003376:	b2ca      	uxtb	r2, r1
 8003378:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	3301      	adds	r3, #1
 800337e:	617b      	str	r3, [r7, #20]
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	429a      	cmp	r2, r3
 8003386:	dbf0      	blt.n	800336a <_read+0x12>
	}

return len;
 8003388:	687b      	ldr	r3, [r7, #4]
}
 800338a:	4618      	mov	r0, r3
 800338c:	3718      	adds	r7, #24
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b086      	sub	sp, #24
 8003396:	af00      	add	r7, sp, #0
 8003398:	60f8      	str	r0, [r7, #12]
 800339a:	60b9      	str	r1, [r7, #8]
 800339c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800339e:	2300      	movs	r3, #0
 80033a0:	617b      	str	r3, [r7, #20]
 80033a2:	e009      	b.n	80033b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	1c5a      	adds	r2, r3, #1
 80033a8:	60ba      	str	r2, [r7, #8]
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	3301      	adds	r3, #1
 80033b6:	617b      	str	r3, [r7, #20]
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	429a      	cmp	r2, r3
 80033be:	dbf1      	blt.n	80033a4 <_write+0x12>
	}
	return len;
 80033c0:	687b      	ldr	r3, [r7, #4]
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3718      	adds	r7, #24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <_close>:

int _close(int file)
{
 80033ca:	b480      	push	{r7}
 80033cc:	b083      	sub	sp, #12
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
	return -1;
 80033d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b083      	sub	sp, #12
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
 80033ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033f2:	605a      	str	r2, [r3, #4]
	return 0;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr

08003402 <_isatty>:

int _isatty(int file)
{
 8003402:	b480      	push	{r7}
 8003404:	b083      	sub	sp, #12
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
	return 1;
 800340a:	2301      	movs	r3, #1
}
 800340c:	4618      	mov	r0, r3
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
	return 0;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3714      	adds	r7, #20
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
	...

08003434 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800343c:	4a14      	ldr	r2, [pc, #80]	; (8003490 <_sbrk+0x5c>)
 800343e:	4b15      	ldr	r3, [pc, #84]	; (8003494 <_sbrk+0x60>)
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003448:	4b13      	ldr	r3, [pc, #76]	; (8003498 <_sbrk+0x64>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d102      	bne.n	8003456 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003450:	4b11      	ldr	r3, [pc, #68]	; (8003498 <_sbrk+0x64>)
 8003452:	4a12      	ldr	r2, [pc, #72]	; (800349c <_sbrk+0x68>)
 8003454:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003456:	4b10      	ldr	r3, [pc, #64]	; (8003498 <_sbrk+0x64>)
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4413      	add	r3, r2
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	429a      	cmp	r2, r3
 8003462:	d207      	bcs.n	8003474 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003464:	f007 f8fa 	bl	800a65c <__errno>
 8003468:	4603      	mov	r3, r0
 800346a:	220c      	movs	r2, #12
 800346c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800346e:	f04f 33ff 	mov.w	r3, #4294967295
 8003472:	e009      	b.n	8003488 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003474:	4b08      	ldr	r3, [pc, #32]	; (8003498 <_sbrk+0x64>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800347a:	4b07      	ldr	r3, [pc, #28]	; (8003498 <_sbrk+0x64>)
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4413      	add	r3, r2
 8003482:	4a05      	ldr	r2, [pc, #20]	; (8003498 <_sbrk+0x64>)
 8003484:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003486:	68fb      	ldr	r3, [r7, #12]
}
 8003488:	4618      	mov	r0, r3
 800348a:	3718      	adds	r7, #24
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	20050000 	.word	0x20050000
 8003494:	00000c00 	.word	0x00000c00
 8003498:	20004340 	.word	0x20004340
 800349c:	20004620 	.word	0x20004620

080034a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
#if defined(USER_VECT_TAB_ADDRESS)
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 80034a4:	4b08      	ldr	r3, [pc, #32]	; (80034c8 <SystemInit+0x28>)
 80034a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80034aa:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80034ac:	4b06      	ldr	r3, [pc, #24]	; (80034c8 <SystemInit+0x28>)
 80034ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b2:	4a05      	ldr	r2, [pc, #20]	; (80034c8 <SystemInit+0x28>)
 80034b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80034bc:	bf00      	nop
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	e000ed00 	.word	0xe000ed00

080034cc <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b09a      	sub	sp, #104	; 0x68
 80034d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80034d6:	2200      	movs	r2, #0
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	605a      	str	r2, [r3, #4]
 80034dc:	609a      	str	r2, [r3, #8]
 80034de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	605a      	str	r2, [r3, #4]
 80034ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80034ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80034f0:	2200      	movs	r2, #0
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	605a      	str	r2, [r3, #4]
 80034f6:	609a      	str	r2, [r3, #8]
 80034f8:	60da      	str	r2, [r3, #12]
 80034fa:	611a      	str	r2, [r3, #16]
 80034fc:	615a      	str	r2, [r3, #20]
 80034fe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003500:	1d3b      	adds	r3, r7, #4
 8003502:	222c      	movs	r2, #44	; 0x2c
 8003504:	2100      	movs	r1, #0
 8003506:	4618      	mov	r0, r3
 8003508:	f007 f8d2 	bl	800a6b0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800350c:	4b43      	ldr	r3, [pc, #268]	; (800361c <MX_TIM1_Init+0x150>)
 800350e:	4a44      	ldr	r2, [pc, #272]	; (8003620 <MX_TIM1_Init+0x154>)
 8003510:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003512:	4b42      	ldr	r3, [pc, #264]	; (800361c <MX_TIM1_Init+0x150>)
 8003514:	2200      	movs	r2, #0
 8003516:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003518:	4b40      	ldr	r3, [pc, #256]	; (800361c <MX_TIM1_Init+0x150>)
 800351a:	2200      	movs	r2, #0
 800351c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800351e:	4b3f      	ldr	r3, [pc, #252]	; (800361c <MX_TIM1_Init+0x150>)
 8003520:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003524:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003526:	4b3d      	ldr	r3, [pc, #244]	; (800361c <MX_TIM1_Init+0x150>)
 8003528:	2200      	movs	r2, #0
 800352a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800352c:	4b3b      	ldr	r3, [pc, #236]	; (800361c <MX_TIM1_Init+0x150>)
 800352e:	2200      	movs	r2, #0
 8003530:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003532:	4b3a      	ldr	r3, [pc, #232]	; (800361c <MX_TIM1_Init+0x150>)
 8003534:	2200      	movs	r2, #0
 8003536:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003538:	4838      	ldr	r0, [pc, #224]	; (800361c <MX_TIM1_Init+0x150>)
 800353a:	f004 f94b 	bl	80077d4 <HAL_TIM_Base_Init>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d001      	beq.n	8003548 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003544:	f7ff f86a 	bl	800261c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003548:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800354c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800354e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003552:	4619      	mov	r1, r3
 8003554:	4831      	ldr	r0, [pc, #196]	; (800361c <MX_TIM1_Init+0x150>)
 8003556:	f004 fd5d 	bl	8008014 <HAL_TIM_ConfigClockSource>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003560:	f7ff f85c 	bl	800261c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003564:	482d      	ldr	r0, [pc, #180]	; (800361c <MX_TIM1_Init+0x150>)
 8003566:	f004 f98c 	bl	8007882 <HAL_TIM_PWM_Init>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d001      	beq.n	8003574 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003570:	f7ff f854 	bl	800261c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003574:	2300      	movs	r3, #0
 8003576:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003578:	2300      	movs	r3, #0
 800357a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800357c:	2300      	movs	r3, #0
 800357e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003580:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003584:	4619      	mov	r1, r3
 8003586:	4825      	ldr	r0, [pc, #148]	; (800361c <MX_TIM1_Init+0x150>)
 8003588:	f005 fa70 	bl	8008a6c <HAL_TIMEx_MasterConfigSynchronization>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8003592:	f7ff f843 	bl	800261c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003596:	2360      	movs	r3, #96	; 0x60
 8003598:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800359a:	2300      	movs	r3, #0
 800359c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800359e:	2300      	movs	r3, #0
 80035a0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80035a2:	2300      	movs	r3, #0
 80035a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035a6:	2300      	movs	r3, #0
 80035a8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80035aa:	2300      	movs	r3, #0
 80035ac:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80035ae:	2300      	movs	r3, #0
 80035b0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80035b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80035b6:	2200      	movs	r2, #0
 80035b8:	4619      	mov	r1, r3
 80035ba:	4818      	ldr	r0, [pc, #96]	; (800361c <MX_TIM1_Init+0x150>)
 80035bc:	f004 fc16 	bl	8007dec <HAL_TIM_PWM_ConfigChannel>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80035c6:	f7ff f829 	bl	800261c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80035ca:	2300      	movs	r3, #0
 80035cc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80035ce:	2300      	movs	r3, #0
 80035d0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80035d2:	2300      	movs	r3, #0
 80035d4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80035d6:	2300      	movs	r3, #0
 80035d8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80035da:	2300      	movs	r3, #0
 80035dc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80035de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035e2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80035e4:	2300      	movs	r3, #0
 80035e6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80035e8:	2300      	movs	r3, #0
 80035ea:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80035ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035f0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80035f2:	2300      	movs	r3, #0
 80035f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80035f6:	2300      	movs	r3, #0
 80035f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80035fa:	1d3b      	adds	r3, r7, #4
 80035fc:	4619      	mov	r1, r3
 80035fe:	4807      	ldr	r0, [pc, #28]	; (800361c <MX_TIM1_Init+0x150>)
 8003600:	f005 fabc 	bl	8008b7c <HAL_TIMEx_ConfigBreakDeadTime>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800360a:	f7ff f807 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800360e:	4803      	ldr	r0, [pc, #12]	; (800361c <MX_TIM1_Init+0x150>)
 8003610:	f000 f954 	bl	80038bc <HAL_TIM_MspPostInit>

}
 8003614:	bf00      	nop
 8003616:	3768      	adds	r7, #104	; 0x68
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	20004344 	.word	0x20004344
 8003620:	40012c00 	.word	0x40012c00

08003624 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b088      	sub	sp, #32
 8003628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800362a:	f107 0310 	add.w	r3, r7, #16
 800362e:	2200      	movs	r2, #0
 8003630:	601a      	str	r2, [r3, #0]
 8003632:	605a      	str	r2, [r3, #4]
 8003634:	609a      	str	r2, [r3, #8]
 8003636:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003638:	1d3b      	adds	r3, r7, #4
 800363a:	2200      	movs	r2, #0
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	605a      	str	r2, [r3, #4]
 8003640:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003642:	4b1e      	ldr	r3, [pc, #120]	; (80036bc <MX_TIM2_Init+0x98>)
 8003644:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003648:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800364a:	4b1c      	ldr	r3, [pc, #112]	; (80036bc <MX_TIM2_Init+0x98>)
 800364c:	2200      	movs	r2, #0
 800364e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003650:	4b1a      	ldr	r3, [pc, #104]	; (80036bc <MX_TIM2_Init+0x98>)
 8003652:	2200      	movs	r2, #0
 8003654:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003656:	4b19      	ldr	r3, [pc, #100]	; (80036bc <MX_TIM2_Init+0x98>)
 8003658:	f04f 32ff 	mov.w	r2, #4294967295
 800365c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800365e:	4b17      	ldr	r3, [pc, #92]	; (80036bc <MX_TIM2_Init+0x98>)
 8003660:	2200      	movs	r2, #0
 8003662:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003664:	4b15      	ldr	r3, [pc, #84]	; (80036bc <MX_TIM2_Init+0x98>)
 8003666:	2200      	movs	r2, #0
 8003668:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800366a:	4814      	ldr	r0, [pc, #80]	; (80036bc <MX_TIM2_Init+0x98>)
 800366c:	f004 f8b2 	bl	80077d4 <HAL_TIM_Base_Init>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003676:	f7fe ffd1 	bl	800261c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800367a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800367e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003680:	f107 0310 	add.w	r3, r7, #16
 8003684:	4619      	mov	r1, r3
 8003686:	480d      	ldr	r0, [pc, #52]	; (80036bc <MX_TIM2_Init+0x98>)
 8003688:	f004 fcc4 	bl	8008014 <HAL_TIM_ConfigClockSource>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003692:	f7fe ffc3 	bl	800261c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003696:	2300      	movs	r3, #0
 8003698:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800369a:	2300      	movs	r3, #0
 800369c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800369e:	1d3b      	adds	r3, r7, #4
 80036a0:	4619      	mov	r1, r3
 80036a2:	4806      	ldr	r0, [pc, #24]	; (80036bc <MX_TIM2_Init+0x98>)
 80036a4:	f005 f9e2 	bl	8008a6c <HAL_TIMEx_MasterConfigSynchronization>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80036ae:	f7fe ffb5 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80036b2:	bf00      	nop
 80036b4:	3720      	adds	r7, #32
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	20004390 	.word	0x20004390

080036c0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b08c      	sub	sp, #48	; 0x30
 80036c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80036c6:	f107 030c 	add.w	r3, r7, #12
 80036ca:	2224      	movs	r2, #36	; 0x24
 80036cc:	2100      	movs	r1, #0
 80036ce:	4618      	mov	r0, r3
 80036d0:	f006 ffee 	bl	800a6b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036d4:	463b      	mov	r3, r7
 80036d6:	2200      	movs	r2, #0
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	605a      	str	r2, [r3, #4]
 80036dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80036de:	4b21      	ldr	r3, [pc, #132]	; (8003764 <MX_TIM5_Init+0xa4>)
 80036e0:	4a21      	ldr	r2, [pc, #132]	; (8003768 <MX_TIM5_Init+0xa8>)
 80036e2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80036e4:	4b1f      	ldr	r3, [pc, #124]	; (8003764 <MX_TIM5_Init+0xa4>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036ea:	4b1e      	ldr	r3, [pc, #120]	; (8003764 <MX_TIM5_Init+0xa4>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80036f0:	4b1c      	ldr	r3, [pc, #112]	; (8003764 <MX_TIM5_Init+0xa4>)
 80036f2:	f04f 32ff 	mov.w	r2, #4294967295
 80036f6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036f8:	4b1a      	ldr	r3, [pc, #104]	; (8003764 <MX_TIM5_Init+0xa4>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036fe:	4b19      	ldr	r3, [pc, #100]	; (8003764 <MX_TIM5_Init+0xa4>)
 8003700:	2200      	movs	r2, #0
 8003702:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003704:	2301      	movs	r3, #1
 8003706:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003708:	2300      	movs	r3, #0
 800370a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800370c:	2301      	movs	r3, #1
 800370e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003710:	2300      	movs	r3, #0
 8003712:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8003714:	230f      	movs	r3, #15
 8003716:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003718:	2300      	movs	r3, #0
 800371a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800371c:	2301      	movs	r3, #1
 800371e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003720:	2300      	movs	r3, #0
 8003722:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003724:	2300      	movs	r3, #0
 8003726:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8003728:	f107 030c 	add.w	r3, r7, #12
 800372c:	4619      	mov	r1, r3
 800372e:	480d      	ldr	r0, [pc, #52]	; (8003764 <MX_TIM5_Init+0xa4>)
 8003730:	f004 f908 	bl	8007944 <HAL_TIM_Encoder_Init>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800373a:	f7fe ff6f 	bl	800261c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800373e:	2300      	movs	r3, #0
 8003740:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003742:	2300      	movs	r3, #0
 8003744:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003746:	463b      	mov	r3, r7
 8003748:	4619      	mov	r1, r3
 800374a:	4806      	ldr	r0, [pc, #24]	; (8003764 <MX_TIM5_Init+0xa4>)
 800374c:	f005 f98e 	bl	8008a6c <HAL_TIMEx_MasterConfigSynchronization>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8003756:	f7fe ff61 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800375a:	bf00      	nop
 800375c:	3730      	adds	r7, #48	; 0x30
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	200043dc 	.word	0x200043dc
 8003768:	40000c00 	.word	0x40000c00

0800376c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a2b      	ldr	r2, [pc, #172]	; (8003828 <HAL_TIM_Base_MspInit+0xbc>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d13f      	bne.n	80037fe <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800377e:	4b2b      	ldr	r3, [pc, #172]	; (800382c <HAL_TIM_Base_MspInit+0xc0>)
 8003780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003782:	4a2a      	ldr	r2, [pc, #168]	; (800382c <HAL_TIM_Base_MspInit+0xc0>)
 8003784:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003788:	6613      	str	r3, [r2, #96]	; 0x60
 800378a:	4b28      	ldr	r3, [pc, #160]	; (800382c <HAL_TIM_Base_MspInit+0xc0>)
 800378c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800378e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003792:	60fb      	str	r3, [r7, #12]
 8003794:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel1;
 8003796:	4b26      	ldr	r3, [pc, #152]	; (8003830 <HAL_TIM_Base_MspInit+0xc4>)
 8003798:	4a26      	ldr	r2, [pc, #152]	; (8003834 <HAL_TIM_Base_MspInit+0xc8>)
 800379a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 800379c:	4b24      	ldr	r3, [pc, #144]	; (8003830 <HAL_TIM_Base_MspInit+0xc4>)
 800379e:	222b      	movs	r2, #43	; 0x2b
 80037a0:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037a2:	4b23      	ldr	r3, [pc, #140]	; (8003830 <HAL_TIM_Base_MspInit+0xc4>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80037a8:	4b21      	ldr	r3, [pc, #132]	; (8003830 <HAL_TIM_Base_MspInit+0xc4>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80037ae:	4b20      	ldr	r3, [pc, #128]	; (8003830 <HAL_TIM_Base_MspInit+0xc4>)
 80037b0:	2280      	movs	r2, #128	; 0x80
 80037b2:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80037b4:	4b1e      	ldr	r3, [pc, #120]	; (8003830 <HAL_TIM_Base_MspInit+0xc4>)
 80037b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037ba:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80037bc:	4b1c      	ldr	r3, [pc, #112]	; (8003830 <HAL_TIM_Base_MspInit+0xc4>)
 80037be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037c2:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80037c4:	4b1a      	ldr	r3, [pc, #104]	; (8003830 <HAL_TIM_Base_MspInit+0xc4>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80037ca:	4b19      	ldr	r3, [pc, #100]	; (8003830 <HAL_TIM_Base_MspInit+0xc4>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80037d0:	4817      	ldr	r0, [pc, #92]	; (8003830 <HAL_TIM_Base_MspInit+0xc4>)
 80037d2:	f000 fbe5 	bl	8003fa0 <HAL_DMA_Init>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d001      	beq.n	80037e0 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 80037dc:	f7fe ff1e 	bl	800261c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a13      	ldr	r2, [pc, #76]	; (8003830 <HAL_TIM_Base_MspInit+0xc4>)
 80037e4:	625a      	str	r2, [r3, #36]	; 0x24
 80037e6:	4a12      	ldr	r2, [pc, #72]	; (8003830 <HAL_TIM_Base_MspInit+0xc4>)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 15, 0);
 80037ec:	2200      	movs	r2, #0
 80037ee:	210f      	movs	r1, #15
 80037f0:	201a      	movs	r0, #26
 80037f2:	f000 fb9e 	bl	8003f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80037f6:	201a      	movs	r0, #26
 80037f8:	f000 fbb7 	bl	8003f6a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80037fc:	e010      	b.n	8003820 <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM2)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003806:	d10b      	bne.n	8003820 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003808:	4b08      	ldr	r3, [pc, #32]	; (800382c <HAL_TIM_Base_MspInit+0xc0>)
 800380a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380c:	4a07      	ldr	r2, [pc, #28]	; (800382c <HAL_TIM_Base_MspInit+0xc0>)
 800380e:	f043 0301 	orr.w	r3, r3, #1
 8003812:	6593      	str	r3, [r2, #88]	; 0x58
 8003814:	4b05      	ldr	r3, [pc, #20]	; (800382c <HAL_TIM_Base_MspInit+0xc0>)
 8003816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	60bb      	str	r3, [r7, #8]
 800381e:	68bb      	ldr	r3, [r7, #8]
}
 8003820:	bf00      	nop
 8003822:	3710      	adds	r7, #16
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	40012c00 	.word	0x40012c00
 800382c:	40021000 	.word	0x40021000
 8003830:	20004428 	.word	0x20004428
 8003834:	40020008 	.word	0x40020008

08003838 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b08a      	sub	sp, #40	; 0x28
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003840:	f107 0314 	add.w	r3, r7, #20
 8003844:	2200      	movs	r2, #0
 8003846:	601a      	str	r2, [r3, #0]
 8003848:	605a      	str	r2, [r3, #4]
 800384a:	609a      	str	r2, [r3, #8]
 800384c:	60da      	str	r2, [r3, #12]
 800384e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM5)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a17      	ldr	r2, [pc, #92]	; (80038b4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d128      	bne.n	80038ac <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800385a:	4b17      	ldr	r3, [pc, #92]	; (80038b8 <HAL_TIM_Encoder_MspInit+0x80>)
 800385c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800385e:	4a16      	ldr	r2, [pc, #88]	; (80038b8 <HAL_TIM_Encoder_MspInit+0x80>)
 8003860:	f043 0308 	orr.w	r3, r3, #8
 8003864:	6593      	str	r3, [r2, #88]	; 0x58
 8003866:	4b14      	ldr	r3, [pc, #80]	; (80038b8 <HAL_TIM_Encoder_MspInit+0x80>)
 8003868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800386a:	f003 0308 	and.w	r3, r3, #8
 800386e:	613b      	str	r3, [r7, #16]
 8003870:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003872:	4b11      	ldr	r3, [pc, #68]	; (80038b8 <HAL_TIM_Encoder_MspInit+0x80>)
 8003874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003876:	4a10      	ldr	r2, [pc, #64]	; (80038b8 <HAL_TIM_Encoder_MspInit+0x80>)
 8003878:	f043 0301 	orr.w	r3, r3, #1
 800387c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800387e:	4b0e      	ldr	r3, [pc, #56]	; (80038b8 <HAL_TIM_Encoder_MspInit+0x80>)
 8003880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	60fb      	str	r3, [r7, #12]
 8003888:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800388a:	2303      	movs	r3, #3
 800388c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800388e:	2302      	movs	r3, #2
 8003890:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003892:	2300      	movs	r3, #0
 8003894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003896:	2300      	movs	r3, #0
 8003898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800389a:	2302      	movs	r3, #2
 800389c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800389e:	f107 0314 	add.w	r3, r7, #20
 80038a2:	4619      	mov	r1, r3
 80038a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038a8:	f000 fea8 	bl	80045fc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80038ac:	bf00      	nop
 80038ae:	3728      	adds	r7, #40	; 0x28
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	40000c00 	.word	0x40000c00
 80038b8:	40021000 	.word	0x40021000

080038bc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b088      	sub	sp, #32
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038c4:	f107 030c 	add.w	r3, r7, #12
 80038c8:	2200      	movs	r2, #0
 80038ca:	601a      	str	r2, [r3, #0]
 80038cc:	605a      	str	r2, [r3, #4]
 80038ce:	609a      	str	r2, [r3, #8]
 80038d0:	60da      	str	r2, [r3, #12]
 80038d2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a12      	ldr	r2, [pc, #72]	; (8003924 <HAL_TIM_MspPostInit+0x68>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d11d      	bne.n	800391a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038de:	4b12      	ldr	r3, [pc, #72]	; (8003928 <HAL_TIM_MspPostInit+0x6c>)
 80038e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038e2:	4a11      	ldr	r2, [pc, #68]	; (8003928 <HAL_TIM_MspPostInit+0x6c>)
 80038e4:	f043 0301 	orr.w	r3, r3, #1
 80038e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038ea:	4b0f      	ldr	r3, [pc, #60]	; (8003928 <HAL_TIM_MspPostInit+0x6c>)
 80038ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	60bb      	str	r3, [r7, #8]
 80038f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80038f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038fa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038fc:	2302      	movs	r3, #2
 80038fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003900:	2300      	movs	r3, #0
 8003902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003904:	2300      	movs	r3, #0
 8003906:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003908:	2301      	movs	r3, #1
 800390a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800390c:	f107 030c 	add.w	r3, r7, #12
 8003910:	4619      	mov	r1, r3
 8003912:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003916:	f000 fe71 	bl	80045fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800391a:	bf00      	nop
 800391c:	3720      	adds	r7, #32
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	40012c00 	.word	0x40012c00
 8003928:	40021000 	.word	0x40021000

0800392c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003930:	4b22      	ldr	r3, [pc, #136]	; (80039bc <MX_USART1_UART_Init+0x90>)
 8003932:	4a23      	ldr	r2, [pc, #140]	; (80039c0 <MX_USART1_UART_Init+0x94>)
 8003934:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2400;
 8003936:	4b21      	ldr	r3, [pc, #132]	; (80039bc <MX_USART1_UART_Init+0x90>)
 8003938:	f44f 6216 	mov.w	r2, #2400	; 0x960
 800393c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800393e:	4b1f      	ldr	r3, [pc, #124]	; (80039bc <MX_USART1_UART_Init+0x90>)
 8003940:	2200      	movs	r2, #0
 8003942:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003944:	4b1d      	ldr	r3, [pc, #116]	; (80039bc <MX_USART1_UART_Init+0x90>)
 8003946:	2200      	movs	r2, #0
 8003948:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800394a:	4b1c      	ldr	r3, [pc, #112]	; (80039bc <MX_USART1_UART_Init+0x90>)
 800394c:	2200      	movs	r2, #0
 800394e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003950:	4b1a      	ldr	r3, [pc, #104]	; (80039bc <MX_USART1_UART_Init+0x90>)
 8003952:	220c      	movs	r2, #12
 8003954:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003956:	4b19      	ldr	r3, [pc, #100]	; (80039bc <MX_USART1_UART_Init+0x90>)
 8003958:	2200      	movs	r2, #0
 800395a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800395c:	4b17      	ldr	r3, [pc, #92]	; (80039bc <MX_USART1_UART_Init+0x90>)
 800395e:	2200      	movs	r2, #0
 8003960:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003962:	4b16      	ldr	r3, [pc, #88]	; (80039bc <MX_USART1_UART_Init+0x90>)
 8003964:	2200      	movs	r2, #0
 8003966:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003968:	4b14      	ldr	r3, [pc, #80]	; (80039bc <MX_USART1_UART_Init+0x90>)
 800396a:	2200      	movs	r2, #0
 800396c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800396e:	4b13      	ldr	r3, [pc, #76]	; (80039bc <MX_USART1_UART_Init+0x90>)
 8003970:	2200      	movs	r2, #0
 8003972:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003974:	4811      	ldr	r0, [pc, #68]	; (80039bc <MX_USART1_UART_Init+0x90>)
 8003976:	f005 f99d 	bl	8008cb4 <HAL_UART_Init>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003980:	f7fe fe4c 	bl	800261c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003984:	2100      	movs	r1, #0
 8003986:	480d      	ldr	r0, [pc, #52]	; (80039bc <MX_USART1_UART_Init+0x90>)
 8003988:	f006 fd42 	bl	800a410 <HAL_UARTEx_SetTxFifoThreshold>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003992:	f7fe fe43 	bl	800261c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003996:	2100      	movs	r1, #0
 8003998:	4808      	ldr	r0, [pc, #32]	; (80039bc <MX_USART1_UART_Init+0x90>)
 800399a:	f006 fd77 	bl	800a48c <HAL_UARTEx_SetRxFifoThreshold>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80039a4:	f7fe fe3a 	bl	800261c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80039a8:	4804      	ldr	r0, [pc, #16]	; (80039bc <MX_USART1_UART_Init+0x90>)
 80039aa:	f006 fcf8 	bl	800a39e <HAL_UARTEx_DisableFifoMode>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d001      	beq.n	80039b8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80039b4:	f7fe fe32 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80039b8:	bf00      	nop
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	20004488 	.word	0x20004488
 80039c0:	40013800 	.word	0x40013800

080039c4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80039c8:	4b22      	ldr	r3, [pc, #136]	; (8003a54 <MX_USART2_UART_Init+0x90>)
 80039ca:	4a23      	ldr	r2, [pc, #140]	; (8003a58 <MX_USART2_UART_Init+0x94>)
 80039cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80039ce:	4b21      	ldr	r3, [pc, #132]	; (8003a54 <MX_USART2_UART_Init+0x90>)
 80039d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80039d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80039d6:	4b1f      	ldr	r3, [pc, #124]	; (8003a54 <MX_USART2_UART_Init+0x90>)
 80039d8:	2200      	movs	r2, #0
 80039da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80039dc:	4b1d      	ldr	r3, [pc, #116]	; (8003a54 <MX_USART2_UART_Init+0x90>)
 80039de:	2200      	movs	r2, #0
 80039e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80039e2:	4b1c      	ldr	r3, [pc, #112]	; (8003a54 <MX_USART2_UART_Init+0x90>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80039e8:	4b1a      	ldr	r3, [pc, #104]	; (8003a54 <MX_USART2_UART_Init+0x90>)
 80039ea:	220c      	movs	r2, #12
 80039ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039ee:	4b19      	ldr	r3, [pc, #100]	; (8003a54 <MX_USART2_UART_Init+0x90>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80039f4:	4b17      	ldr	r3, [pc, #92]	; (8003a54 <MX_USART2_UART_Init+0x90>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80039fa:	4b16      	ldr	r3, [pc, #88]	; (8003a54 <MX_USART2_UART_Init+0x90>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003a00:	4b14      	ldr	r3, [pc, #80]	; (8003a54 <MX_USART2_UART_Init+0x90>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a06:	4b13      	ldr	r3, [pc, #76]	; (8003a54 <MX_USART2_UART_Init+0x90>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003a0c:	4811      	ldr	r0, [pc, #68]	; (8003a54 <MX_USART2_UART_Init+0x90>)
 8003a0e:	f005 f951 	bl	8008cb4 <HAL_UART_Init>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003a18:	f7fe fe00 	bl	800261c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	480d      	ldr	r0, [pc, #52]	; (8003a54 <MX_USART2_UART_Init+0x90>)
 8003a20:	f006 fcf6 	bl	800a410 <HAL_UARTEx_SetTxFifoThreshold>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8003a2a:	f7fe fdf7 	bl	800261c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003a2e:	2100      	movs	r1, #0
 8003a30:	4808      	ldr	r0, [pc, #32]	; (8003a54 <MX_USART2_UART_Init+0x90>)
 8003a32:	f006 fd2b 	bl	800a48c <HAL_UARTEx_SetRxFifoThreshold>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003a3c:	f7fe fdee 	bl	800261c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003a40:	4804      	ldr	r0, [pc, #16]	; (8003a54 <MX_USART2_UART_Init+0x90>)
 8003a42:	f006 fcac 	bl	800a39e <HAL_UARTEx_DisableFifoMode>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d001      	beq.n	8003a50 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003a4c:	f7fe fde6 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003a50:	bf00      	nop
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	20004518 	.word	0x20004518
 8003a58:	40004400 	.word	0x40004400

08003a5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b0b2      	sub	sp, #200	; 0xc8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a64:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	605a      	str	r2, [r3, #4]
 8003a6e:	609a      	str	r2, [r3, #8]
 8003a70:	60da      	str	r2, [r3, #12]
 8003a72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a74:	f107 031c 	add.w	r3, r7, #28
 8003a78:	2298      	movs	r2, #152	; 0x98
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f006 fe17 	bl	800a6b0 <memset>
  if(uartHandle->Instance==USART1)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a57      	ldr	r2, [pc, #348]	; (8003be4 <HAL_UART_MspInit+0x188>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d166      	bne.n	8003b5a <HAL_UART_MspInit+0xfe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003a90:	2300      	movs	r3, #0
 8003a92:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a94:	f107 031c 	add.w	r3, r7, #28
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f001 ff99 	bl	80059d0 <HAL_RCCEx_PeriphCLKConfig>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d001      	beq.n	8003aa8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003aa4:	f7fe fdba 	bl	800261c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003aa8:	4b4f      	ldr	r3, [pc, #316]	; (8003be8 <HAL_UART_MspInit+0x18c>)
 8003aaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aac:	4a4e      	ldr	r2, [pc, #312]	; (8003be8 <HAL_UART_MspInit+0x18c>)
 8003aae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ab2:	6613      	str	r3, [r2, #96]	; 0x60
 8003ab4:	4b4c      	ldr	r3, [pc, #304]	; (8003be8 <HAL_UART_MspInit+0x18c>)
 8003ab6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ab8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003abc:	61bb      	str	r3, [r7, #24]
 8003abe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ac0:	4b49      	ldr	r3, [pc, #292]	; (8003be8 <HAL_UART_MspInit+0x18c>)
 8003ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ac4:	4a48      	ldr	r2, [pc, #288]	; (8003be8 <HAL_UART_MspInit+0x18c>)
 8003ac6:	f043 0301 	orr.w	r3, r3, #1
 8003aca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003acc:	4b46      	ldr	r3, [pc, #280]	; (8003be8 <HAL_UART_MspInit+0x18c>)
 8003ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad0:	f003 0301 	and.w	r3, r3, #1
 8003ad4:	617b      	str	r3, [r7, #20]
 8003ad6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003ad8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003adc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aec:	2303      	movs	r3, #3
 8003aee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003af2:	2307      	movs	r3, #7
 8003af4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003af8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003afc:	4619      	mov	r1, r3
 8003afe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b02:	f000 fd7b 	bl	80045fc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8003b06:	4b39      	ldr	r3, [pc, #228]	; (8003bec <HAL_UART_MspInit+0x190>)
 8003b08:	4a39      	ldr	r2, [pc, #228]	; (8003bf0 <HAL_UART_MspInit+0x194>)
 8003b0a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003b0c:	4b37      	ldr	r3, [pc, #220]	; (8003bec <HAL_UART_MspInit+0x190>)
 8003b0e:	2219      	movs	r2, #25
 8003b10:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b12:	4b36      	ldr	r3, [pc, #216]	; (8003bec <HAL_UART_MspInit+0x190>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b18:	4b34      	ldr	r3, [pc, #208]	; (8003bec <HAL_UART_MspInit+0x190>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b1e:	4b33      	ldr	r3, [pc, #204]	; (8003bec <HAL_UART_MspInit+0x190>)
 8003b20:	2280      	movs	r2, #128	; 0x80
 8003b22:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b24:	4b31      	ldr	r3, [pc, #196]	; (8003bec <HAL_UART_MspInit+0x190>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b2a:	4b30      	ldr	r3, [pc, #192]	; (8003bec <HAL_UART_MspInit+0x190>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003b30:	4b2e      	ldr	r3, [pc, #184]	; (8003bec <HAL_UART_MspInit+0x190>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003b36:	4b2d      	ldr	r3, [pc, #180]	; (8003bec <HAL_UART_MspInit+0x190>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003b3c:	482b      	ldr	r0, [pc, #172]	; (8003bec <HAL_UART_MspInit+0x190>)
 8003b3e:	f000 fa2f 	bl	8003fa0 <HAL_DMA_Init>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8003b48:	f7fe fd68 	bl	800261c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a27      	ldr	r2, [pc, #156]	; (8003bec <HAL_UART_MspInit+0x190>)
 8003b50:	67da      	str	r2, [r3, #124]	; 0x7c
 8003b52:	4a26      	ldr	r2, [pc, #152]	; (8003bec <HAL_UART_MspInit+0x190>)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003b58:	e040      	b.n	8003bdc <HAL_UART_MspInit+0x180>
  else if(uartHandle->Instance==USART2)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a25      	ldr	r2, [pc, #148]	; (8003bf4 <HAL_UART_MspInit+0x198>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d13b      	bne.n	8003bdc <HAL_UART_MspInit+0x180>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003b64:	2302      	movs	r3, #2
 8003b66:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b6c:	f107 031c 	add.w	r3, r7, #28
 8003b70:	4618      	mov	r0, r3
 8003b72:	f001 ff2d 	bl	80059d0 <HAL_RCCEx_PeriphCLKConfig>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d001      	beq.n	8003b80 <HAL_UART_MspInit+0x124>
      Error_Handler();
 8003b7c:	f7fe fd4e 	bl	800261c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b80:	4b19      	ldr	r3, [pc, #100]	; (8003be8 <HAL_UART_MspInit+0x18c>)
 8003b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b84:	4a18      	ldr	r2, [pc, #96]	; (8003be8 <HAL_UART_MspInit+0x18c>)
 8003b86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b8a:	6593      	str	r3, [r2, #88]	; 0x58
 8003b8c:	4b16      	ldr	r3, [pc, #88]	; (8003be8 <HAL_UART_MspInit+0x18c>)
 8003b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b94:	613b      	str	r3, [r7, #16]
 8003b96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b98:	4b13      	ldr	r3, [pc, #76]	; (8003be8 <HAL_UART_MspInit+0x18c>)
 8003b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b9c:	4a12      	ldr	r2, [pc, #72]	; (8003be8 <HAL_UART_MspInit+0x18c>)
 8003b9e:	f043 0301 	orr.w	r3, r3, #1
 8003ba2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ba4:	4b10      	ldr	r3, [pc, #64]	; (8003be8 <HAL_UART_MspInit+0x18c>)
 8003ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	60fb      	str	r3, [r7, #12]
 8003bae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003bb0:	230c      	movs	r3, #12
 8003bb2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003bc8:	2307      	movs	r3, #7
 8003bca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bce:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bd8:	f000 fd10 	bl	80045fc <HAL_GPIO_Init>
}
 8003bdc:	bf00      	nop
 8003bde:	37c8      	adds	r7, #200	; 0xc8
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	40013800 	.word	0x40013800
 8003be8:	40021000 	.word	0x40021000
 8003bec:	200045a8 	.word	0x200045a8
 8003bf0:	4002001c 	.word	0x4002001c
 8003bf4:	40004400 	.word	0x40004400

08003bf8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003bf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c30 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003bfc:	f7ff fc50 	bl	80034a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c00:	480c      	ldr	r0, [pc, #48]	; (8003c34 <LoopForever+0x6>)
  ldr r1, =_edata
 8003c02:	490d      	ldr	r1, [pc, #52]	; (8003c38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003c04:	4a0d      	ldr	r2, [pc, #52]	; (8003c3c <LoopForever+0xe>)
  movs r3, #0
 8003c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c08:	e002      	b.n	8003c10 <LoopCopyDataInit>

08003c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c0e:	3304      	adds	r3, #4

08003c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c14:	d3f9      	bcc.n	8003c0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c16:	4a0a      	ldr	r2, [pc, #40]	; (8003c40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003c18:	4c0a      	ldr	r4, [pc, #40]	; (8003c44 <LoopForever+0x16>)
  movs r3, #0
 8003c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c1c:	e001      	b.n	8003c22 <LoopFillZerobss>

08003c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c20:	3204      	adds	r2, #4

08003c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c24:	d3fb      	bcc.n	8003c1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003c26:	f006 fd1f 	bl	800a668 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003c2a:	f7fe f98f 	bl	8001f4c <main>

08003c2e <LoopForever>:

LoopForever:
    b LoopForever
 8003c2e:	e7fe      	b.n	8003c2e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003c30:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c38:	20000254 	.word	0x20000254
  ldr r2, =_sidata
 8003c3c:	0800f84c 	.word	0x0800f84c
  ldr r2, =_sbss
 8003c40:	20000254 	.word	0x20000254
  ldr r4, =_ebss
 8003c44:	2000461c 	.word	0x2000461c

08003c48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003c48:	e7fe      	b.n	8003c48 <ADC1_2_IRQHandler>

08003c4a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b082      	sub	sp, #8
 8003c4e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003c50:	2300      	movs	r3, #0
 8003c52:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c54:	2003      	movs	r0, #3
 8003c56:	f000 f961 	bl	8003f1c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c5a:	200f      	movs	r0, #15
 8003c5c:	f000 f80e 	bl	8003c7c <HAL_InitTick>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d002      	beq.n	8003c6c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	71fb      	strb	r3, [r7, #7]
 8003c6a:	e001      	b.n	8003c70 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003c6c:	f7ff fadc 	bl	8003228 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003c70:	79fb      	ldrb	r3, [r7, #7]
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3708      	adds	r7, #8
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
	...

08003c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003c84:	2300      	movs	r3, #0
 8003c86:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003c88:	4b17      	ldr	r3, [pc, #92]	; (8003ce8 <HAL_InitTick+0x6c>)
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d023      	beq.n	8003cd8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003c90:	4b16      	ldr	r3, [pc, #88]	; (8003cec <HAL_InitTick+0x70>)
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	4b14      	ldr	r3, [pc, #80]	; (8003ce8 <HAL_InitTick+0x6c>)
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	4619      	mov	r1, r3
 8003c9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f000 f96d 	bl	8003f86 <HAL_SYSTICK_Config>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10f      	bne.n	8003cd2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b0f      	cmp	r3, #15
 8003cb6:	d809      	bhi.n	8003ccc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cb8:	2200      	movs	r2, #0
 8003cba:	6879      	ldr	r1, [r7, #4]
 8003cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003cc0:	f000 f937 	bl	8003f32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003cc4:	4a0a      	ldr	r2, [pc, #40]	; (8003cf0 <HAL_InitTick+0x74>)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6013      	str	r3, [r2, #0]
 8003cca:	e007      	b.n	8003cdc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	73fb      	strb	r3, [r7, #15]
 8003cd0:	e004      	b.n	8003cdc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	73fb      	strb	r3, [r7, #15]
 8003cd6:	e001      	b.n	8003cdc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	2000007c 	.word	0x2000007c
 8003cec:	20000074 	.word	0x20000074
 8003cf0:	20000078 	.word	0x20000078

08003cf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003cf8:	4b06      	ldr	r3, [pc, #24]	; (8003d14 <HAL_IncTick+0x20>)
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	4b06      	ldr	r3, [pc, #24]	; (8003d18 <HAL_IncTick+0x24>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4413      	add	r3, r2
 8003d04:	4a04      	ldr	r2, [pc, #16]	; (8003d18 <HAL_IncTick+0x24>)
 8003d06:	6013      	str	r3, [r2, #0]
}
 8003d08:	bf00      	nop
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	2000007c 	.word	0x2000007c
 8003d18:	20004608 	.word	0x20004608

08003d1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0
  return uwTick;
 8003d20:	4b03      	ldr	r3, [pc, #12]	; (8003d30 <HAL_GetTick+0x14>)
 8003d22:	681b      	ldr	r3, [r3, #0]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	20004608 	.word	0x20004608

08003d34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d3c:	f7ff ffee 	bl	8003d1c <HAL_GetTick>
 8003d40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d4c:	d005      	beq.n	8003d5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003d4e:	4b0a      	ldr	r3, [pc, #40]	; (8003d78 <HAL_Delay+0x44>)
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	461a      	mov	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	4413      	add	r3, r2
 8003d58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d5a:	bf00      	nop
 8003d5c:	f7ff ffde 	bl	8003d1c <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d8f7      	bhi.n	8003d5c <HAL_Delay+0x28>
  {
  }
}
 8003d6c:	bf00      	nop
 8003d6e:	bf00      	nop
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	2000007c 	.word	0x2000007c

08003d7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f003 0307 	and.w	r3, r3, #7
 8003d8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d8c:	4b0c      	ldr	r3, [pc, #48]	; (8003dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d92:	68ba      	ldr	r2, [r7, #8]
 8003d94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d98:	4013      	ands	r3, r2
 8003d9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003da4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dae:	4a04      	ldr	r2, [pc, #16]	; (8003dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	60d3      	str	r3, [r2, #12]
}
 8003db4:	bf00      	nop
 8003db6:	3714      	adds	r7, #20
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	e000ed00 	.word	0xe000ed00

08003dc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dc8:	4b04      	ldr	r3, [pc, #16]	; (8003ddc <__NVIC_GetPriorityGrouping+0x18>)
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	0a1b      	lsrs	r3, r3, #8
 8003dce:	f003 0307 	and.w	r3, r3, #7
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr
 8003ddc:	e000ed00 	.word	0xe000ed00

08003de0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	4603      	mov	r3, r0
 8003de8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	db0b      	blt.n	8003e0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003df2:	79fb      	ldrb	r3, [r7, #7]
 8003df4:	f003 021f 	and.w	r2, r3, #31
 8003df8:	4907      	ldr	r1, [pc, #28]	; (8003e18 <__NVIC_EnableIRQ+0x38>)
 8003dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dfe:	095b      	lsrs	r3, r3, #5
 8003e00:	2001      	movs	r0, #1
 8003e02:	fa00 f202 	lsl.w	r2, r0, r2
 8003e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e0a:	bf00      	nop
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	e000e100 	.word	0xe000e100

08003e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	4603      	mov	r3, r0
 8003e24:	6039      	str	r1, [r7, #0]
 8003e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	db0a      	blt.n	8003e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	490c      	ldr	r1, [pc, #48]	; (8003e68 <__NVIC_SetPriority+0x4c>)
 8003e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e3a:	0112      	lsls	r2, r2, #4
 8003e3c:	b2d2      	uxtb	r2, r2
 8003e3e:	440b      	add	r3, r1
 8003e40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e44:	e00a      	b.n	8003e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	b2da      	uxtb	r2, r3
 8003e4a:	4908      	ldr	r1, [pc, #32]	; (8003e6c <__NVIC_SetPriority+0x50>)
 8003e4c:	79fb      	ldrb	r3, [r7, #7]
 8003e4e:	f003 030f 	and.w	r3, r3, #15
 8003e52:	3b04      	subs	r3, #4
 8003e54:	0112      	lsls	r2, r2, #4
 8003e56:	b2d2      	uxtb	r2, r2
 8003e58:	440b      	add	r3, r1
 8003e5a:	761a      	strb	r2, [r3, #24]
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr
 8003e68:	e000e100 	.word	0xe000e100
 8003e6c:	e000ed00 	.word	0xe000ed00

08003e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b089      	sub	sp, #36	; 0x24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f003 0307 	and.w	r3, r3, #7
 8003e82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	f1c3 0307 	rsb	r3, r3, #7
 8003e8a:	2b04      	cmp	r3, #4
 8003e8c:	bf28      	it	cs
 8003e8e:	2304      	movcs	r3, #4
 8003e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	3304      	adds	r3, #4
 8003e96:	2b06      	cmp	r3, #6
 8003e98:	d902      	bls.n	8003ea0 <NVIC_EncodePriority+0x30>
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	3b03      	subs	r3, #3
 8003e9e:	e000      	b.n	8003ea2 <NVIC_EncodePriority+0x32>
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003eae:	43da      	mvns	r2, r3
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	401a      	ands	r2, r3
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec2:	43d9      	mvns	r1, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ec8:	4313      	orrs	r3, r2
         );
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3724      	adds	r7, #36	; 0x24
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
	...

08003ed8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ee8:	d301      	bcc.n	8003eee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003eea:	2301      	movs	r3, #1
 8003eec:	e00f      	b.n	8003f0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003eee:	4a0a      	ldr	r2, [pc, #40]	; (8003f18 <SysTick_Config+0x40>)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ef6:	210f      	movs	r1, #15
 8003ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8003efc:	f7ff ff8e 	bl	8003e1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f00:	4b05      	ldr	r3, [pc, #20]	; (8003f18 <SysTick_Config+0x40>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f06:	4b04      	ldr	r3, [pc, #16]	; (8003f18 <SysTick_Config+0x40>)
 8003f08:	2207      	movs	r2, #7
 8003f0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	e000e010 	.word	0xe000e010

08003f1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f7ff ff29 	bl	8003d7c <__NVIC_SetPriorityGrouping>
}
 8003f2a:	bf00      	nop
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b086      	sub	sp, #24
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	4603      	mov	r3, r0
 8003f3a:	60b9      	str	r1, [r7, #8]
 8003f3c:	607a      	str	r2, [r7, #4]
 8003f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003f40:	2300      	movs	r3, #0
 8003f42:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f44:	f7ff ff3e 	bl	8003dc4 <__NVIC_GetPriorityGrouping>
 8003f48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	68b9      	ldr	r1, [r7, #8]
 8003f4e:	6978      	ldr	r0, [r7, #20]
 8003f50:	f7ff ff8e 	bl	8003e70 <NVIC_EncodePriority>
 8003f54:	4602      	mov	r2, r0
 8003f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f5a:	4611      	mov	r1, r2
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7ff ff5d 	bl	8003e1c <__NVIC_SetPriority>
}
 8003f62:	bf00      	nop
 8003f64:	3718      	adds	r7, #24
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b082      	sub	sp, #8
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	4603      	mov	r3, r0
 8003f72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7ff ff31 	bl	8003de0 <__NVIC_EnableIRQ>
}
 8003f7e:	bf00      	nop
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b082      	sub	sp, #8
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7ff ffa2 	bl	8003ed8 <SysTick_Config>
 8003f94:	4603      	mov	r3, r0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3708      	adds	r7, #8
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
	...

08003fa0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e08d      	b.n	80040ce <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	4b47      	ldr	r3, [pc, #284]	; (80040d8 <HAL_DMA_Init+0x138>)
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d80f      	bhi.n	8003fde <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	4b45      	ldr	r3, [pc, #276]	; (80040dc <HAL_DMA_Init+0x13c>)
 8003fc6:	4413      	add	r3, r2
 8003fc8:	4a45      	ldr	r2, [pc, #276]	; (80040e0 <HAL_DMA_Init+0x140>)
 8003fca:	fba2 2303 	umull	r2, r3, r2, r3
 8003fce:	091b      	lsrs	r3, r3, #4
 8003fd0:	009a      	lsls	r2, r3, #2
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a42      	ldr	r2, [pc, #264]	; (80040e4 <HAL_DMA_Init+0x144>)
 8003fda:	641a      	str	r2, [r3, #64]	; 0x40
 8003fdc:	e00e      	b.n	8003ffc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	4b40      	ldr	r3, [pc, #256]	; (80040e8 <HAL_DMA_Init+0x148>)
 8003fe6:	4413      	add	r3, r2
 8003fe8:	4a3d      	ldr	r2, [pc, #244]	; (80040e0 <HAL_DMA_Init+0x140>)
 8003fea:	fba2 2303 	umull	r2, r3, r2, r3
 8003fee:	091b      	lsrs	r3, r3, #4
 8003ff0:	009a      	lsls	r2, r3, #2
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a3c      	ldr	r2, [pc, #240]	; (80040ec <HAL_DMA_Init+0x14c>)
 8003ffa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2202      	movs	r2, #2
 8004000:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004016:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004020:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800402c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004038:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	4313      	orrs	r3, r2
 8004044:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 fa72 	bl	8004538 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800405c:	d102      	bne.n	8004064 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800406c:	b2d2      	uxtb	r2, r2
 800406e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004078:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d010      	beq.n	80040a4 <HAL_DMA_Init+0x104>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	2b04      	cmp	r3, #4
 8004088:	d80c      	bhi.n	80040a4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 fa92 	bl	80045b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004094:	2200      	movs	r2, #0
 8004096:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80040a0:	605a      	str	r2, [r3, #4]
 80040a2:	e008      	b.n	80040b6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	40020407 	.word	0x40020407
 80040dc:	bffdfff8 	.word	0xbffdfff8
 80040e0:	cccccccd 	.word	0xcccccccd
 80040e4:	40020000 	.word	0x40020000
 80040e8:	bffdfbf8 	.word	0xbffdfbf8
 80040ec:	40020400 	.word	0x40020400

080040f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
 80040fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040fe:	2300      	movs	r3, #0
 8004100:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004108:	2b01      	cmp	r3, #1
 800410a:	d101      	bne.n	8004110 <HAL_DMA_Start_IT+0x20>
 800410c:	2302      	movs	r3, #2
 800410e:	e066      	b.n	80041de <HAL_DMA_Start_IT+0xee>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b01      	cmp	r3, #1
 8004122:	d155      	bne.n	80041d0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2202      	movs	r2, #2
 8004128:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f022 0201 	bic.w	r2, r2, #1
 8004140:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	68b9      	ldr	r1, [r7, #8]
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	f000 f9b6 	bl	80044ba <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004152:	2b00      	cmp	r3, #0
 8004154:	d008      	beq.n	8004168 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f042 020e 	orr.w	r2, r2, #14
 8004164:	601a      	str	r2, [r3, #0]
 8004166:	e00f      	b.n	8004188 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f022 0204 	bic.w	r2, r2, #4
 8004176:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f042 020a 	orr.w	r2, r2, #10
 8004186:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d007      	beq.n	80041a6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041a4:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d007      	beq.n	80041be <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041bc:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f042 0201 	orr.w	r2, r2, #1
 80041cc:	601a      	str	r2, [r3, #0]
 80041ce:	e005      	b.n	80041dc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80041d8:	2302      	movs	r3, #2
 80041da:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80041dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3718      	adds	r7, #24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041e6:	b480      	push	{r7}
 80041e8:	b085      	sub	sp, #20
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041ee:	2300      	movs	r3, #0
 80041f0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d008      	beq.n	8004210 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2204      	movs	r2, #4
 8004202:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e040      	b.n	8004292 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f022 020e 	bic.w	r2, r2, #14
 800421e:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800422a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800422e:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f022 0201 	bic.w	r2, r2, #1
 800423e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004244:	f003 021c 	and.w	r2, r3, #28
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424c:	2101      	movs	r1, #1
 800424e:	fa01 f202 	lsl.w	r2, r1, r2
 8004252:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800425c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00c      	beq.n	8004280 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004270:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004274:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800427e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8004290:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004292:	4618      	mov	r0, r3
 8004294:	3714      	adds	r7, #20
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b084      	sub	sp, #16
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042a6:	2300      	movs	r3, #0
 80042a8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d005      	beq.n	80042c2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2204      	movs	r2, #4
 80042ba:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	73fb      	strb	r3, [r7, #15]
 80042c0:	e047      	b.n	8004352 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 020e 	bic.w	r2, r2, #14
 80042d0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 0201 	bic.w	r2, r2, #1
 80042e0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f6:	f003 021c 	and.w	r2, r3, #28
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	2101      	movs	r1, #1
 8004300:	fa01 f202 	lsl.w	r2, r1, r2
 8004304:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800430e:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00c      	beq.n	8004332 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004322:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004326:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004330:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	4798      	blx	r3
    }
  }
  return status;
 8004352:	7bfb      	ldrb	r3, [r7, #15]
}
 8004354:	4618      	mov	r0, r3
 8004356:	3710      	adds	r7, #16
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004378:	f003 031c 	and.w	r3, r3, #28
 800437c:	2204      	movs	r2, #4
 800437e:	409a      	lsls	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	4013      	ands	r3, r2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d026      	beq.n	80043d6 <HAL_DMA_IRQHandler+0x7a>
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	f003 0304 	and.w	r3, r3, #4
 800438e:	2b00      	cmp	r3, #0
 8004390:	d021      	beq.n	80043d6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0320 	and.w	r3, r3, #32
 800439c:	2b00      	cmp	r3, #0
 800439e:	d107      	bne.n	80043b0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 0204 	bic.w	r2, r2, #4
 80043ae:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b4:	f003 021c 	and.w	r2, r3, #28
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043bc:	2104      	movs	r1, #4
 80043be:	fa01 f202 	lsl.w	r2, r1, r2
 80043c2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d071      	beq.n	80044b0 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80043d4:	e06c      	b.n	80044b0 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043da:	f003 031c 	and.w	r3, r3, #28
 80043de:	2202      	movs	r2, #2
 80043e0:	409a      	lsls	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	4013      	ands	r3, r2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d02e      	beq.n	8004448 <HAL_DMA_IRQHandler+0xec>
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d029      	beq.n	8004448 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0320 	and.w	r3, r3, #32
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d10b      	bne.n	800441a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f022 020a 	bic.w	r2, r2, #10
 8004410:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441e:	f003 021c 	and.w	r2, r3, #28
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	2102      	movs	r1, #2
 8004428:	fa01 f202 	lsl.w	r2, r1, r2
 800442c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443a:	2b00      	cmp	r3, #0
 800443c:	d038      	beq.n	80044b0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004446:	e033      	b.n	80044b0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800444c:	f003 031c 	and.w	r3, r3, #28
 8004450:	2208      	movs	r2, #8
 8004452:	409a      	lsls	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4013      	ands	r3, r2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d02a      	beq.n	80044b2 <HAL_DMA_IRQHandler+0x156>
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	f003 0308 	and.w	r3, r3, #8
 8004462:	2b00      	cmp	r3, #0
 8004464:	d025      	beq.n	80044b2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f022 020e 	bic.w	r2, r2, #14
 8004474:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800447a:	f003 021c 	and.w	r2, r3, #28
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004482:	2101      	movs	r1, #1
 8004484:	fa01 f202 	lsl.w	r2, r1, r2
 8004488:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2201      	movs	r2, #1
 800448e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d004      	beq.n	80044b2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80044b0:	bf00      	nop
 80044b2:	bf00      	nop
}
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044ba:	b480      	push	{r7}
 80044bc:	b085      	sub	sp, #20
 80044be:	af00      	add	r7, sp, #0
 80044c0:	60f8      	str	r0, [r7, #12]
 80044c2:	60b9      	str	r1, [r7, #8]
 80044c4:	607a      	str	r2, [r7, #4]
 80044c6:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80044d0:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d004      	beq.n	80044e4 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80044e2:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e8:	f003 021c 	and.w	r2, r3, #28
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f0:	2101      	movs	r1, #1
 80044f2:	fa01 f202 	lsl.w	r2, r1, r2
 80044f6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	683a      	ldr	r2, [r7, #0]
 80044fe:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	2b10      	cmp	r3, #16
 8004506:	d108      	bne.n	800451a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004518:	e007      	b.n	800452a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68ba      	ldr	r2, [r7, #8]
 8004520:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	60da      	str	r2, [r3, #12]
}
 800452a:	bf00      	nop
 800452c:	3714      	adds	r7, #20
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
	...

08004538 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004538:	b480      	push	{r7}
 800453a:	b085      	sub	sp, #20
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	461a      	mov	r2, r3
 8004546:	4b17      	ldr	r3, [pc, #92]	; (80045a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004548:	429a      	cmp	r2, r3
 800454a:	d80a      	bhi.n	8004562 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004550:	089b      	lsrs	r3, r3, #2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004558:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	6493      	str	r3, [r2, #72]	; 0x48
 8004560:	e007      	b.n	8004572 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004566:	089b      	lsrs	r3, r3, #2
 8004568:	009a      	lsls	r2, r3, #2
 800456a:	4b0f      	ldr	r3, [pc, #60]	; (80045a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800456c:	4413      	add	r3, r2
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	b2db      	uxtb	r3, r3
 8004578:	3b08      	subs	r3, #8
 800457a:	4a0c      	ldr	r2, [pc, #48]	; (80045ac <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800457c:	fba2 2303 	umull	r2, r3, r2, r3
 8004580:	091b      	lsrs	r3, r3, #4
 8004582:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a0a      	ldr	r2, [pc, #40]	; (80045b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004588:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f003 031f 	and.w	r3, r3, #31
 8004590:	2201      	movs	r2, #1
 8004592:	409a      	lsls	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004598:	bf00      	nop
 800459a:	3714      	adds	r7, #20
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	40020407 	.word	0x40020407
 80045a8:	4002081c 	.word	0x4002081c
 80045ac:	cccccccd 	.word	0xcccccccd
 80045b0:	40020880 	.word	0x40020880

080045b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	4b0b      	ldr	r3, [pc, #44]	; (80045f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80045c8:	4413      	add	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	461a      	mov	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a08      	ldr	r2, [pc, #32]	; (80045f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80045d6:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	3b01      	subs	r3, #1
 80045dc:	f003 0303 	and.w	r3, r3, #3
 80045e0:	2201      	movs	r2, #1
 80045e2:	409a      	lsls	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80045e8:	bf00      	nop
 80045ea:	3714      	adds	r7, #20
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr
 80045f4:	1000823f 	.word	0x1000823f
 80045f8:	40020940 	.word	0x40020940

080045fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b087      	sub	sp, #28
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004606:	2300      	movs	r3, #0
 8004608:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800460a:	e166      	b.n	80048da <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	2101      	movs	r1, #1
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	fa01 f303 	lsl.w	r3, r1, r3
 8004618:	4013      	ands	r3, r2
 800461a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2b00      	cmp	r3, #0
 8004620:	f000 8158 	beq.w	80048d4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f003 0303 	and.w	r3, r3, #3
 800462c:	2b01      	cmp	r3, #1
 800462e:	d005      	beq.n	800463c <HAL_GPIO_Init+0x40>
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f003 0303 	and.w	r3, r3, #3
 8004638:	2b02      	cmp	r3, #2
 800463a:	d130      	bne.n	800469e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	005b      	lsls	r3, r3, #1
 8004646:	2203      	movs	r2, #3
 8004648:	fa02 f303 	lsl.w	r3, r2, r3
 800464c:	43db      	mvns	r3, r3
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	4013      	ands	r3, r2
 8004652:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	68da      	ldr	r2, [r3, #12]
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	005b      	lsls	r3, r3, #1
 800465c:	fa02 f303 	lsl.w	r3, r2, r3
 8004660:	693a      	ldr	r2, [r7, #16]
 8004662:	4313      	orrs	r3, r2
 8004664:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004672:	2201      	movs	r2, #1
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	fa02 f303 	lsl.w	r3, r2, r3
 800467a:	43db      	mvns	r3, r3
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	4013      	ands	r3, r2
 8004680:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	091b      	lsrs	r3, r3, #4
 8004688:	f003 0201 	and.w	r2, r3, #1
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	fa02 f303 	lsl.w	r3, r2, r3
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	4313      	orrs	r3, r2
 8004696:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f003 0303 	and.w	r3, r3, #3
 80046a6:	2b03      	cmp	r3, #3
 80046a8:	d017      	beq.n	80046da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	005b      	lsls	r3, r3, #1
 80046b4:	2203      	movs	r2, #3
 80046b6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ba:	43db      	mvns	r3, r3
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	4013      	ands	r3, r2
 80046c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	689a      	ldr	r2, [r3, #8]
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	005b      	lsls	r3, r3, #1
 80046ca:	fa02 f303 	lsl.w	r3, r2, r3
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	693a      	ldr	r2, [r7, #16]
 80046d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f003 0303 	and.w	r3, r3, #3
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d123      	bne.n	800472e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	08da      	lsrs	r2, r3, #3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	3208      	adds	r2, #8
 80046ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	f003 0307 	and.w	r3, r3, #7
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	220f      	movs	r2, #15
 80046fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004702:	43db      	mvns	r3, r3
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	4013      	ands	r3, r2
 8004708:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	691a      	ldr	r2, [r3, #16]
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	f003 0307 	and.w	r3, r3, #7
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	fa02 f303 	lsl.w	r3, r2, r3
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	4313      	orrs	r3, r2
 800471e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	08da      	lsrs	r2, r3, #3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	3208      	adds	r2, #8
 8004728:	6939      	ldr	r1, [r7, #16]
 800472a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	005b      	lsls	r3, r3, #1
 8004738:	2203      	movs	r2, #3
 800473a:	fa02 f303 	lsl.w	r3, r2, r3
 800473e:	43db      	mvns	r3, r3
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	4013      	ands	r3, r2
 8004744:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f003 0203 	and.w	r2, r3, #3
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	005b      	lsls	r3, r3, #1
 8004752:	fa02 f303 	lsl.w	r3, r2, r3
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	4313      	orrs	r3, r2
 800475a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800476a:	2b00      	cmp	r3, #0
 800476c:	f000 80b2 	beq.w	80048d4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004770:	4b61      	ldr	r3, [pc, #388]	; (80048f8 <HAL_GPIO_Init+0x2fc>)
 8004772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004774:	4a60      	ldr	r2, [pc, #384]	; (80048f8 <HAL_GPIO_Init+0x2fc>)
 8004776:	f043 0301 	orr.w	r3, r3, #1
 800477a:	6613      	str	r3, [r2, #96]	; 0x60
 800477c:	4b5e      	ldr	r3, [pc, #376]	; (80048f8 <HAL_GPIO_Init+0x2fc>)
 800477e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004780:	f003 0301 	and.w	r3, r3, #1
 8004784:	60bb      	str	r3, [r7, #8]
 8004786:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004788:	4a5c      	ldr	r2, [pc, #368]	; (80048fc <HAL_GPIO_Init+0x300>)
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	089b      	lsrs	r3, r3, #2
 800478e:	3302      	adds	r3, #2
 8004790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004794:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	f003 0303 	and.w	r3, r3, #3
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	220f      	movs	r2, #15
 80047a0:	fa02 f303 	lsl.w	r3, r2, r3
 80047a4:	43db      	mvns	r3, r3
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	4013      	ands	r3, r2
 80047aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80047b2:	d02b      	beq.n	800480c <HAL_GPIO_Init+0x210>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a52      	ldr	r2, [pc, #328]	; (8004900 <HAL_GPIO_Init+0x304>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d025      	beq.n	8004808 <HAL_GPIO_Init+0x20c>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a51      	ldr	r2, [pc, #324]	; (8004904 <HAL_GPIO_Init+0x308>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d01f      	beq.n	8004804 <HAL_GPIO_Init+0x208>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a50      	ldr	r2, [pc, #320]	; (8004908 <HAL_GPIO_Init+0x30c>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d019      	beq.n	8004800 <HAL_GPIO_Init+0x204>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a4f      	ldr	r2, [pc, #316]	; (800490c <HAL_GPIO_Init+0x310>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d013      	beq.n	80047fc <HAL_GPIO_Init+0x200>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a4e      	ldr	r2, [pc, #312]	; (8004910 <HAL_GPIO_Init+0x314>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d00d      	beq.n	80047f8 <HAL_GPIO_Init+0x1fc>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a4d      	ldr	r2, [pc, #308]	; (8004914 <HAL_GPIO_Init+0x318>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d007      	beq.n	80047f4 <HAL_GPIO_Init+0x1f8>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a4c      	ldr	r2, [pc, #304]	; (8004918 <HAL_GPIO_Init+0x31c>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d101      	bne.n	80047f0 <HAL_GPIO_Init+0x1f4>
 80047ec:	2307      	movs	r3, #7
 80047ee:	e00e      	b.n	800480e <HAL_GPIO_Init+0x212>
 80047f0:	2308      	movs	r3, #8
 80047f2:	e00c      	b.n	800480e <HAL_GPIO_Init+0x212>
 80047f4:	2306      	movs	r3, #6
 80047f6:	e00a      	b.n	800480e <HAL_GPIO_Init+0x212>
 80047f8:	2305      	movs	r3, #5
 80047fa:	e008      	b.n	800480e <HAL_GPIO_Init+0x212>
 80047fc:	2304      	movs	r3, #4
 80047fe:	e006      	b.n	800480e <HAL_GPIO_Init+0x212>
 8004800:	2303      	movs	r3, #3
 8004802:	e004      	b.n	800480e <HAL_GPIO_Init+0x212>
 8004804:	2302      	movs	r3, #2
 8004806:	e002      	b.n	800480e <HAL_GPIO_Init+0x212>
 8004808:	2301      	movs	r3, #1
 800480a:	e000      	b.n	800480e <HAL_GPIO_Init+0x212>
 800480c:	2300      	movs	r3, #0
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	f002 0203 	and.w	r2, r2, #3
 8004814:	0092      	lsls	r2, r2, #2
 8004816:	4093      	lsls	r3, r2
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	4313      	orrs	r3, r2
 800481c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800481e:	4937      	ldr	r1, [pc, #220]	; (80048fc <HAL_GPIO_Init+0x300>)
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	089b      	lsrs	r3, r3, #2
 8004824:	3302      	adds	r3, #2
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800482c:	4b3b      	ldr	r3, [pc, #236]	; (800491c <HAL_GPIO_Init+0x320>)
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	43db      	mvns	r3, r3
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	4013      	ands	r3, r2
 800483a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d003      	beq.n	8004850 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	4313      	orrs	r3, r2
 800484e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004850:	4a32      	ldr	r2, [pc, #200]	; (800491c <HAL_GPIO_Init+0x320>)
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004856:	4b31      	ldr	r3, [pc, #196]	; (800491c <HAL_GPIO_Init+0x320>)
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	43db      	mvns	r3, r3
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	4013      	ands	r3, r2
 8004864:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d003      	beq.n	800487a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004872:	693a      	ldr	r2, [r7, #16]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	4313      	orrs	r3, r2
 8004878:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800487a:	4a28      	ldr	r2, [pc, #160]	; (800491c <HAL_GPIO_Init+0x320>)
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004880:	4b26      	ldr	r3, [pc, #152]	; (800491c <HAL_GPIO_Init+0x320>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	43db      	mvns	r3, r3
 800488a:	693a      	ldr	r2, [r7, #16]
 800488c:	4013      	ands	r3, r2
 800488e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d003      	beq.n	80048a4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800489c:	693a      	ldr	r2, [r7, #16]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80048a4:	4a1d      	ldr	r2, [pc, #116]	; (800491c <HAL_GPIO_Init+0x320>)
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80048aa:	4b1c      	ldr	r3, [pc, #112]	; (800491c <HAL_GPIO_Init+0x320>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	43db      	mvns	r3, r3
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	4013      	ands	r3, r2
 80048b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d003      	beq.n	80048ce <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80048ce:	4a13      	ldr	r2, [pc, #76]	; (800491c <HAL_GPIO_Init+0x320>)
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	3301      	adds	r3, #1
 80048d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	fa22 f303 	lsr.w	r3, r2, r3
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f47f ae91 	bne.w	800460c <HAL_GPIO_Init+0x10>
  }
}
 80048ea:	bf00      	nop
 80048ec:	bf00      	nop
 80048ee:	371c      	adds	r7, #28
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr
 80048f8:	40021000 	.word	0x40021000
 80048fc:	40010000 	.word	0x40010000
 8004900:	48000400 	.word	0x48000400
 8004904:	48000800 	.word	0x48000800
 8004908:	48000c00 	.word	0x48000c00
 800490c:	48001000 	.word	0x48001000
 8004910:	48001400 	.word	0x48001400
 8004914:	48001800 	.word	0x48001800
 8004918:	48001c00 	.word	0x48001c00
 800491c:	40010400 	.word	0x40010400

08004920 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	460b      	mov	r3, r1
 800492a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	691a      	ldr	r2, [r3, #16]
 8004930:	887b      	ldrh	r3, [r7, #2]
 8004932:	4013      	ands	r3, r2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d002      	beq.n	800493e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004938:	2301      	movs	r3, #1
 800493a:	73fb      	strb	r3, [r7, #15]
 800493c:	e001      	b.n	8004942 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800493e:	2300      	movs	r3, #0
 8004940:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004942:	7bfb      	ldrb	r3, [r7, #15]
}
 8004944:	4618      	mov	r0, r3
 8004946:	3714      	adds	r7, #20
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	460b      	mov	r3, r1
 800495a:	807b      	strh	r3, [r7, #2]
 800495c:	4613      	mov	r3, r2
 800495e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004960:	787b      	ldrb	r3, [r7, #1]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d003      	beq.n	800496e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004966:	887a      	ldrh	r2, [r7, #2]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800496c:	e002      	b.n	8004974 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800496e:	887a      	ldrh	r2, [r7, #2]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004974:	bf00      	nop
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	460b      	mov	r3, r1
 800498a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	695b      	ldr	r3, [r3, #20]
 8004990:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004992:	887a      	ldrh	r2, [r7, #2]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	4013      	ands	r3, r2
 8004998:	041a      	lsls	r2, r3, #16
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	43d9      	mvns	r1, r3
 800499e:	887b      	ldrh	r3, [r7, #2]
 80049a0:	400b      	ands	r3, r1
 80049a2:	431a      	orrs	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	619a      	str	r2, [r3, #24]
}
 80049a8:	bf00      	nop
 80049aa:	3714      	adds	r7, #20
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80049b4:	b480      	push	{r7}
 80049b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049b8:	4b05      	ldr	r3, [pc, #20]	; (80049d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a04      	ldr	r2, [pc, #16]	; (80049d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80049be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049c2:	6013      	str	r3, [r2, #0]
}
 80049c4:	bf00      	nop
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	40007000 	.word	0x40007000

080049d4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80049d4:	b480      	push	{r7}
 80049d6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80049d8:	4b0d      	ldr	r3, [pc, #52]	; (8004a10 <HAL_PWREx_GetVoltageRange+0x3c>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80049e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049e4:	d102      	bne.n	80049ec <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80049e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049ea:	e00b      	b.n	8004a04 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80049ec:	4b08      	ldr	r3, [pc, #32]	; (8004a10 <HAL_PWREx_GetVoltageRange+0x3c>)
 80049ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049fa:	d102      	bne.n	8004a02 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80049fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a00:	e000      	b.n	8004a04 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004a02:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	40007000 	.word	0x40007000

08004a14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d141      	bne.n	8004aa6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a22:	4b4b      	ldr	r3, [pc, #300]	; (8004b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a2e:	d131      	bne.n	8004a94 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a30:	4b47      	ldr	r3, [pc, #284]	; (8004b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a36:	4a46      	ldr	r2, [pc, #280]	; (8004b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a40:	4b43      	ldr	r3, [pc, #268]	; (8004b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a48:	4a41      	ldr	r2, [pc, #260]	; (8004b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a4e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004a50:	4b40      	ldr	r3, [pc, #256]	; (8004b54 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2232      	movs	r2, #50	; 0x32
 8004a56:	fb02 f303 	mul.w	r3, r2, r3
 8004a5a:	4a3f      	ldr	r2, [pc, #252]	; (8004b58 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a60:	0c9b      	lsrs	r3, r3, #18
 8004a62:	3301      	adds	r3, #1
 8004a64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a66:	e002      	b.n	8004a6e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a6e:	4b38      	ldr	r3, [pc, #224]	; (8004b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a7a:	d102      	bne.n	8004a82 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d1f2      	bne.n	8004a68 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a82:	4b33      	ldr	r3, [pc, #204]	; (8004b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a8e:	d158      	bne.n	8004b42 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e057      	b.n	8004b44 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a94:	4b2e      	ldr	r3, [pc, #184]	; (8004b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a9a:	4a2d      	ldr	r2, [pc, #180]	; (8004b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004aa0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004aa4:	e04d      	b.n	8004b42 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aac:	d141      	bne.n	8004b32 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004aae:	4b28      	ldr	r3, [pc, #160]	; (8004b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aba:	d131      	bne.n	8004b20 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004abc:	4b24      	ldr	r3, [pc, #144]	; (8004b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ac2:	4a23      	ldr	r2, [pc, #140]	; (8004b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ac8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004acc:	4b20      	ldr	r3, [pc, #128]	; (8004b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004ad4:	4a1e      	ldr	r2, [pc, #120]	; (8004b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ad6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ada:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004adc:	4b1d      	ldr	r3, [pc, #116]	; (8004b54 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2232      	movs	r2, #50	; 0x32
 8004ae2:	fb02 f303 	mul.w	r3, r2, r3
 8004ae6:	4a1c      	ldr	r2, [pc, #112]	; (8004b58 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8004aec:	0c9b      	lsrs	r3, r3, #18
 8004aee:	3301      	adds	r3, #1
 8004af0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004af2:	e002      	b.n	8004afa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	3b01      	subs	r3, #1
 8004af8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004afa:	4b15      	ldr	r3, [pc, #84]	; (8004b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b06:	d102      	bne.n	8004b0e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1f2      	bne.n	8004af4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b0e:	4b10      	ldr	r3, [pc, #64]	; (8004b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b1a:	d112      	bne.n	8004b42 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e011      	b.n	8004b44 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b20:	4b0b      	ldr	r3, [pc, #44]	; (8004b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b26:	4a0a      	ldr	r2, [pc, #40]	; (8004b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004b30:	e007      	b.n	8004b42 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004b32:	4b07      	ldr	r3, [pc, #28]	; (8004b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b3a:	4a05      	ldr	r2, [pc, #20]	; (8004b50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b40:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3714      	adds	r7, #20
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr
 8004b50:	40007000 	.word	0x40007000
 8004b54:	20000074 	.word	0x20000074
 8004b58:	431bde83 	.word	0x431bde83

08004b5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b08a      	sub	sp, #40	; 0x28
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d102      	bne.n	8004b70 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	f000 bc68 	b.w	8005440 <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b70:	4b97      	ldr	r3, [pc, #604]	; (8004dd0 <HAL_RCC_OscConfig+0x274>)
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f003 030c 	and.w	r3, r3, #12
 8004b78:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b7a:	4b95      	ldr	r3, [pc, #596]	; (8004dd0 <HAL_RCC_OscConfig+0x274>)
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	f003 0303 	and.w	r3, r3, #3
 8004b82:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0310 	and.w	r3, r3, #16
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f000 80e6 	beq.w	8004d5e <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b92:	6a3b      	ldr	r3, [r7, #32]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d007      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x4c>
 8004b98:	6a3b      	ldr	r3, [r7, #32]
 8004b9a:	2b0c      	cmp	r3, #12
 8004b9c:	f040 808d 	bne.w	8004cba <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	f040 8089 	bne.w	8004cba <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ba8:	4b89      	ldr	r3, [pc, #548]	; (8004dd0 <HAL_RCC_OscConfig+0x274>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0302 	and.w	r3, r3, #2
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d006      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x66>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	69db      	ldr	r3, [r3, #28]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d102      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	f000 bc3f 	b.w	8005440 <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bc6:	4b82      	ldr	r3, [pc, #520]	; (8004dd0 <HAL_RCC_OscConfig+0x274>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0308 	and.w	r3, r3, #8
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d004      	beq.n	8004bdc <HAL_RCC_OscConfig+0x80>
 8004bd2:	4b7f      	ldr	r3, [pc, #508]	; (8004dd0 <HAL_RCC_OscConfig+0x274>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bda:	e005      	b.n	8004be8 <HAL_RCC_OscConfig+0x8c>
 8004bdc:	4b7c      	ldr	r3, [pc, #496]	; (8004dd0 <HAL_RCC_OscConfig+0x274>)
 8004bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004be2:	091b      	lsrs	r3, r3, #4
 8004be4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d224      	bcs.n	8004c36 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f000 fe2d 	bl	8005850 <RCC_SetFlashLatencyFromMSIRange>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d002      	beq.n	8004c02 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	f000 bc1f 	b.w	8005440 <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c02:	4b73      	ldr	r3, [pc, #460]	; (8004dd0 <HAL_RCC_OscConfig+0x274>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a72      	ldr	r2, [pc, #456]	; (8004dd0 <HAL_RCC_OscConfig+0x274>)
 8004c08:	f043 0308 	orr.w	r3, r3, #8
 8004c0c:	6013      	str	r3, [r2, #0]
 8004c0e:	4b70      	ldr	r3, [pc, #448]	; (8004dd0 <HAL_RCC_OscConfig+0x274>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	496d      	ldr	r1, [pc, #436]	; (8004dd0 <HAL_RCC_OscConfig+0x274>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c20:	4b6b      	ldr	r3, [pc, #428]	; (8004dd0 <HAL_RCC_OscConfig+0x274>)
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a1b      	ldr	r3, [r3, #32]
 8004c2c:	021b      	lsls	r3, r3, #8
 8004c2e:	4968      	ldr	r1, [pc, #416]	; (8004dd0 <HAL_RCC_OscConfig+0x274>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	604b      	str	r3, [r1, #4]
 8004c34:	e025      	b.n	8004c82 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c36:	4b66      	ldr	r3, [pc, #408]	; (8004dd0 <HAL_RCC_OscConfig+0x274>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a65      	ldr	r2, [pc, #404]	; (8004dd0 <HAL_RCC_OscConfig+0x274>)
 8004c3c:	f043 0308 	orr.w	r3, r3, #8
 8004c40:	6013      	str	r3, [r2, #0]
 8004c42:	4b63      	ldr	r3, [pc, #396]	; (8004dd0 <HAL_RCC_OscConfig+0x274>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4e:	4960      	ldr	r1, [pc, #384]	; (8004dd0 <HAL_RCC_OscConfig+0x274>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c54:	4b5e      	ldr	r3, [pc, #376]	; (8004dd0 <HAL_RCC_OscConfig+0x274>)
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6a1b      	ldr	r3, [r3, #32]
 8004c60:	021b      	lsls	r3, r3, #8
 8004c62:	495b      	ldr	r1, [pc, #364]	; (8004dd0 <HAL_RCC_OscConfig+0x274>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c68:	6a3b      	ldr	r3, [r7, #32]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d109      	bne.n	8004c82 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c72:	4618      	mov	r0, r3
 8004c74:	f000 fdec 	bl	8005850 <RCC_SetFlashLatencyFromMSIRange>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d001      	beq.n	8004c82 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e3de      	b.n	8005440 <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c82:	f000 fd21 	bl	80056c8 <HAL_RCC_GetSysClockFreq>
 8004c86:	4602      	mov	r2, r0
 8004c88:	4b51      	ldr	r3, [pc, #324]	; (8004dd0 <HAL_RCC_OscConfig+0x274>)
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	091b      	lsrs	r3, r3, #4
 8004c8e:	f003 030f 	and.w	r3, r3, #15
 8004c92:	4950      	ldr	r1, [pc, #320]	; (8004dd4 <HAL_RCC_OscConfig+0x278>)
 8004c94:	5ccb      	ldrb	r3, [r1, r3]
 8004c96:	f003 031f 	and.w	r3, r3, #31
 8004c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c9e:	4a4e      	ldr	r2, [pc, #312]	; (8004dd8 <HAL_RCC_OscConfig+0x27c>)
 8004ca0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004ca2:	4b4e      	ldr	r3, [pc, #312]	; (8004ddc <HAL_RCC_OscConfig+0x280>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7fe ffe8 	bl	8003c7c <HAL_InitTick>
 8004cac:	4603      	mov	r3, r0
 8004cae:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8004cb0:	7dfb      	ldrb	r3, [r7, #23]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d052      	beq.n	8004d5c <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8004cb6:	7dfb      	ldrb	r3, [r7, #23]
 8004cb8:	e3c2      	b.n	8005440 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d032      	beq.n	8004d28 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004cc2:	4b43      	ldr	r3, [pc, #268]	; (8004dd0 <HAL_RCC_OscConfig+0x274>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a42      	ldr	r2, [pc, #264]	; (8004dd0 <HAL_RCC_OscConfig+0x274>)
 8004cc8:	f043 0301 	orr.w	r3, r3, #1
 8004ccc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004cce:	f7ff f825 	bl	8003d1c <HAL_GetTick>
 8004cd2:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004cd4:	e008      	b.n	8004ce8 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004cd6:	f7ff f821 	bl	8003d1c <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d901      	bls.n	8004ce8 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e3ab      	b.n	8005440 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ce8:	4b39      	ldr	r3, [pc, #228]	; (8004dd0 <HAL_RCC_OscConfig+0x274>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0302 	and.w	r3, r3, #2
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d0f0      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004cf4:	4b36      	ldr	r3, [pc, #216]	; (8004dd0 <HAL_RCC_OscConfig+0x274>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a35      	ldr	r2, [pc, #212]	; (8004dd0 <HAL_RCC_OscConfig+0x274>)
 8004cfa:	f043 0308 	orr.w	r3, r3, #8
 8004cfe:	6013      	str	r3, [r2, #0]
 8004d00:	4b33      	ldr	r3, [pc, #204]	; (8004dd0 <HAL_RCC_OscConfig+0x274>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0c:	4930      	ldr	r1, [pc, #192]	; (8004dd0 <HAL_RCC_OscConfig+0x274>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d12:	4b2f      	ldr	r3, [pc, #188]	; (8004dd0 <HAL_RCC_OscConfig+0x274>)
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a1b      	ldr	r3, [r3, #32]
 8004d1e:	021b      	lsls	r3, r3, #8
 8004d20:	492b      	ldr	r1, [pc, #172]	; (8004dd0 <HAL_RCC_OscConfig+0x274>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	604b      	str	r3, [r1, #4]
 8004d26:	e01a      	b.n	8004d5e <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004d28:	4b29      	ldr	r3, [pc, #164]	; (8004dd0 <HAL_RCC_OscConfig+0x274>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a28      	ldr	r2, [pc, #160]	; (8004dd0 <HAL_RCC_OscConfig+0x274>)
 8004d2e:	f023 0301 	bic.w	r3, r3, #1
 8004d32:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d34:	f7fe fff2 	bl	8003d1c <HAL_GetTick>
 8004d38:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d3a:	e008      	b.n	8004d4e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d3c:	f7fe ffee 	bl	8003d1c <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e378      	b.n	8005440 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d4e:	4b20      	ldr	r3, [pc, #128]	; (8004dd0 <HAL_RCC_OscConfig+0x274>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1f0      	bne.n	8004d3c <HAL_RCC_OscConfig+0x1e0>
 8004d5a:	e000      	b.n	8004d5e <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d5c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d073      	beq.n	8004e52 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004d6a:	6a3b      	ldr	r3, [r7, #32]
 8004d6c:	2b08      	cmp	r3, #8
 8004d6e:	d005      	beq.n	8004d7c <HAL_RCC_OscConfig+0x220>
 8004d70:	6a3b      	ldr	r3, [r7, #32]
 8004d72:	2b0c      	cmp	r3, #12
 8004d74:	d10e      	bne.n	8004d94 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	2b03      	cmp	r3, #3
 8004d7a:	d10b      	bne.n	8004d94 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d7c:	4b14      	ldr	r3, [pc, #80]	; (8004dd0 <HAL_RCC_OscConfig+0x274>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d063      	beq.n	8004e50 <HAL_RCC_OscConfig+0x2f4>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d15f      	bne.n	8004e50 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e355      	b.n	8005440 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d9c:	d106      	bne.n	8004dac <HAL_RCC_OscConfig+0x250>
 8004d9e:	4b0c      	ldr	r3, [pc, #48]	; (8004dd0 <HAL_RCC_OscConfig+0x274>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a0b      	ldr	r2, [pc, #44]	; (8004dd0 <HAL_RCC_OscConfig+0x274>)
 8004da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004da8:	6013      	str	r3, [r2, #0]
 8004daa:	e025      	b.n	8004df8 <HAL_RCC_OscConfig+0x29c>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004db4:	d114      	bne.n	8004de0 <HAL_RCC_OscConfig+0x284>
 8004db6:	4b06      	ldr	r3, [pc, #24]	; (8004dd0 <HAL_RCC_OscConfig+0x274>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a05      	ldr	r2, [pc, #20]	; (8004dd0 <HAL_RCC_OscConfig+0x274>)
 8004dbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004dc0:	6013      	str	r3, [r2, #0]
 8004dc2:	4b03      	ldr	r3, [pc, #12]	; (8004dd0 <HAL_RCC_OscConfig+0x274>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a02      	ldr	r2, [pc, #8]	; (8004dd0 <HAL_RCC_OscConfig+0x274>)
 8004dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dcc:	6013      	str	r3, [r2, #0]
 8004dce:	e013      	b.n	8004df8 <HAL_RCC_OscConfig+0x29c>
 8004dd0:	40021000 	.word	0x40021000
 8004dd4:	0800f328 	.word	0x0800f328
 8004dd8:	20000074 	.word	0x20000074
 8004ddc:	20000078 	.word	0x20000078
 8004de0:	4b8f      	ldr	r3, [pc, #572]	; (8005020 <HAL_RCC_OscConfig+0x4c4>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a8e      	ldr	r2, [pc, #568]	; (8005020 <HAL_RCC_OscConfig+0x4c4>)
 8004de6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dea:	6013      	str	r3, [r2, #0]
 8004dec:	4b8c      	ldr	r3, [pc, #560]	; (8005020 <HAL_RCC_OscConfig+0x4c4>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a8b      	ldr	r2, [pc, #556]	; (8005020 <HAL_RCC_OscConfig+0x4c4>)
 8004df2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004df6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d013      	beq.n	8004e28 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e00:	f7fe ff8c 	bl	8003d1c <HAL_GetTick>
 8004e04:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e06:	e008      	b.n	8004e1a <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e08:	f7fe ff88 	bl	8003d1c <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	2b64      	cmp	r3, #100	; 0x64
 8004e14:	d901      	bls.n	8004e1a <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e312      	b.n	8005440 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e1a:	4b81      	ldr	r3, [pc, #516]	; (8005020 <HAL_RCC_OscConfig+0x4c4>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d0f0      	beq.n	8004e08 <HAL_RCC_OscConfig+0x2ac>
 8004e26:	e014      	b.n	8004e52 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e28:	f7fe ff78 	bl	8003d1c <HAL_GetTick>
 8004e2c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e2e:	e008      	b.n	8004e42 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e30:	f7fe ff74 	bl	8003d1c <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b64      	cmp	r3, #100	; 0x64
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e2fe      	b.n	8005440 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e42:	4b77      	ldr	r3, [pc, #476]	; (8005020 <HAL_RCC_OscConfig+0x4c4>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1f0      	bne.n	8004e30 <HAL_RCC_OscConfig+0x2d4>
 8004e4e:	e000      	b.n	8004e52 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d060      	beq.n	8004f20 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004e5e:	6a3b      	ldr	r3, [r7, #32]
 8004e60:	2b04      	cmp	r3, #4
 8004e62:	d005      	beq.n	8004e70 <HAL_RCC_OscConfig+0x314>
 8004e64:	6a3b      	ldr	r3, [r7, #32]
 8004e66:	2b0c      	cmp	r3, #12
 8004e68:	d119      	bne.n	8004e9e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d116      	bne.n	8004e9e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e70:	4b6b      	ldr	r3, [pc, #428]	; (8005020 <HAL_RCC_OscConfig+0x4c4>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d005      	beq.n	8004e88 <HAL_RCC_OscConfig+0x32c>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d101      	bne.n	8004e88 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e2db      	b.n	8005440 <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e88:	4b65      	ldr	r3, [pc, #404]	; (8005020 <HAL_RCC_OscConfig+0x4c4>)
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	061b      	lsls	r3, r3, #24
 8004e96:	4962      	ldr	r1, [pc, #392]	; (8005020 <HAL_RCC_OscConfig+0x4c4>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e9c:	e040      	b.n	8004f20 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d023      	beq.n	8004eee <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ea6:	4b5e      	ldr	r3, [pc, #376]	; (8005020 <HAL_RCC_OscConfig+0x4c4>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a5d      	ldr	r2, [pc, #372]	; (8005020 <HAL_RCC_OscConfig+0x4c4>)
 8004eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb2:	f7fe ff33 	bl	8003d1c <HAL_GetTick>
 8004eb6:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004eb8:	e008      	b.n	8004ecc <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eba:	f7fe ff2f 	bl	8003d1c <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d901      	bls.n	8004ecc <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e2b9      	b.n	8005440 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ecc:	4b54      	ldr	r3, [pc, #336]	; (8005020 <HAL_RCC_OscConfig+0x4c4>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d0f0      	beq.n	8004eba <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ed8:	4b51      	ldr	r3, [pc, #324]	; (8005020 <HAL_RCC_OscConfig+0x4c4>)
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	061b      	lsls	r3, r3, #24
 8004ee6:	494e      	ldr	r1, [pc, #312]	; (8005020 <HAL_RCC_OscConfig+0x4c4>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	604b      	str	r3, [r1, #4]
 8004eec:	e018      	b.n	8004f20 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004eee:	4b4c      	ldr	r3, [pc, #304]	; (8005020 <HAL_RCC_OscConfig+0x4c4>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a4b      	ldr	r2, [pc, #300]	; (8005020 <HAL_RCC_OscConfig+0x4c4>)
 8004ef4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ef8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004efa:	f7fe ff0f 	bl	8003d1c <HAL_GetTick>
 8004efe:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f00:	e008      	b.n	8004f14 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f02:	f7fe ff0b 	bl	8003d1c <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d901      	bls.n	8004f14 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e295      	b.n	8005440 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f14:	4b42      	ldr	r3, [pc, #264]	; (8005020 <HAL_RCC_OscConfig+0x4c4>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1f0      	bne.n	8004f02 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0308 	and.w	r3, r3, #8
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f000 8082 	beq.w	8005032 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d05f      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8004f36:	4b3a      	ldr	r3, [pc, #232]	; (8005020 <HAL_RCC_OscConfig+0x4c4>)
 8004f38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f3c:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	699a      	ldr	r2, [r3, #24]
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	f003 0310 	and.w	r3, r3, #16
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d037      	beq.n	8004fbc <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d006      	beq.n	8004f64 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d101      	bne.n	8004f64 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e26d      	b.n	8005440 <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d01b      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8004f6e:	4b2c      	ldr	r3, [pc, #176]	; (8005020 <HAL_RCC_OscConfig+0x4c4>)
 8004f70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f74:	4a2a      	ldr	r2, [pc, #168]	; (8005020 <HAL_RCC_OscConfig+0x4c4>)
 8004f76:	f023 0301 	bic.w	r3, r3, #1
 8004f7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f7e:	f7fe fecd 	bl	8003d1c <HAL_GetTick>
 8004f82:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f84:	e008      	b.n	8004f98 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f86:	f7fe fec9 	bl	8003d1c <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	2b11      	cmp	r3, #17
 8004f92:	d901      	bls.n	8004f98 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e253      	b.n	8005440 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f98:	4b21      	ldr	r3, [pc, #132]	; (8005020 <HAL_RCC_OscConfig+0x4c4>)
 8004f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1ef      	bne.n	8004f86 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8004fa6:	4b1e      	ldr	r3, [pc, #120]	; (8005020 <HAL_RCC_OscConfig+0x4c4>)
 8004fa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fac:	f023 0210 	bic.w	r2, r3, #16
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	491a      	ldr	r1, [pc, #104]	; (8005020 <HAL_RCC_OscConfig+0x4c4>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fbc:	4b18      	ldr	r3, [pc, #96]	; (8005020 <HAL_RCC_OscConfig+0x4c4>)
 8004fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fc2:	4a17      	ldr	r2, [pc, #92]	; (8005020 <HAL_RCC_OscConfig+0x4c4>)
 8004fc4:	f043 0301 	orr.w	r3, r3, #1
 8004fc8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fcc:	f7fe fea6 	bl	8003d1c <HAL_GetTick>
 8004fd0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fd2:	e008      	b.n	8004fe6 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fd4:	f7fe fea2 	bl	8003d1c <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	2b11      	cmp	r3, #17
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e22c      	b.n	8005440 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fe6:	4b0e      	ldr	r3, [pc, #56]	; (8005020 <HAL_RCC_OscConfig+0x4c4>)
 8004fe8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fec:	f003 0302 	and.w	r3, r3, #2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d0ef      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x478>
 8004ff4:	e01d      	b.n	8005032 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ff6:	4b0a      	ldr	r3, [pc, #40]	; (8005020 <HAL_RCC_OscConfig+0x4c4>)
 8004ff8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ffc:	4a08      	ldr	r2, [pc, #32]	; (8005020 <HAL_RCC_OscConfig+0x4c4>)
 8004ffe:	f023 0301 	bic.w	r3, r3, #1
 8005002:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005006:	f7fe fe89 	bl	8003d1c <HAL_GetTick>
 800500a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800500c:	e00a      	b.n	8005024 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800500e:	f7fe fe85 	bl	8003d1c <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	2b11      	cmp	r3, #17
 800501a:	d903      	bls.n	8005024 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e20f      	b.n	8005440 <HAL_RCC_OscConfig+0x8e4>
 8005020:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005024:	4b83      	ldr	r3, [pc, #524]	; (8005234 <HAL_RCC_OscConfig+0x6d8>)
 8005026:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1ed      	bne.n	800500e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0304 	and.w	r3, r3, #4
 800503a:	2b00      	cmp	r3, #0
 800503c:	f000 80bd 	beq.w	80051ba <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005040:	2300      	movs	r3, #0
 8005042:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005046:	4b7b      	ldr	r3, [pc, #492]	; (8005234 <HAL_RCC_OscConfig+0x6d8>)
 8005048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800504a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10e      	bne.n	8005070 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005052:	4b78      	ldr	r3, [pc, #480]	; (8005234 <HAL_RCC_OscConfig+0x6d8>)
 8005054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005056:	4a77      	ldr	r2, [pc, #476]	; (8005234 <HAL_RCC_OscConfig+0x6d8>)
 8005058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800505c:	6593      	str	r3, [r2, #88]	; 0x58
 800505e:	4b75      	ldr	r3, [pc, #468]	; (8005234 <HAL_RCC_OscConfig+0x6d8>)
 8005060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005066:	60fb      	str	r3, [r7, #12]
 8005068:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800506a:	2301      	movs	r3, #1
 800506c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005070:	4b71      	ldr	r3, [pc, #452]	; (8005238 <HAL_RCC_OscConfig+0x6dc>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005078:	2b00      	cmp	r3, #0
 800507a:	d118      	bne.n	80050ae <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800507c:	4b6e      	ldr	r3, [pc, #440]	; (8005238 <HAL_RCC_OscConfig+0x6dc>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a6d      	ldr	r2, [pc, #436]	; (8005238 <HAL_RCC_OscConfig+0x6dc>)
 8005082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005086:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005088:	f7fe fe48 	bl	8003d1c <HAL_GetTick>
 800508c:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800508e:	e008      	b.n	80050a2 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005090:	f7fe fe44 	bl	8003d1c <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	2b02      	cmp	r3, #2
 800509c:	d901      	bls.n	80050a2 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e1ce      	b.n	8005440 <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050a2:	4b65      	ldr	r3, [pc, #404]	; (8005238 <HAL_RCC_OscConfig+0x6dc>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d0f0      	beq.n	8005090 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d02c      	beq.n	8005114 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80050ba:	4b5e      	ldr	r3, [pc, #376]	; (8005234 <HAL_RCC_OscConfig+0x6d8>)
 80050bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050cc:	4959      	ldr	r1, [pc, #356]	; (8005234 <HAL_RCC_OscConfig+0x6d8>)
 80050ce:	4313      	orrs	r3, r2
 80050d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	f003 0304 	and.w	r3, r3, #4
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d010      	beq.n	8005102 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80050e0:	4b54      	ldr	r3, [pc, #336]	; (8005234 <HAL_RCC_OscConfig+0x6d8>)
 80050e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050e6:	4a53      	ldr	r2, [pc, #332]	; (8005234 <HAL_RCC_OscConfig+0x6d8>)
 80050e8:	f043 0304 	orr.w	r3, r3, #4
 80050ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80050f0:	4b50      	ldr	r3, [pc, #320]	; (8005234 <HAL_RCC_OscConfig+0x6d8>)
 80050f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f6:	4a4f      	ldr	r2, [pc, #316]	; (8005234 <HAL_RCC_OscConfig+0x6d8>)
 80050f8:	f043 0301 	orr.w	r3, r3, #1
 80050fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005100:	e018      	b.n	8005134 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005102:	4b4c      	ldr	r3, [pc, #304]	; (8005234 <HAL_RCC_OscConfig+0x6d8>)
 8005104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005108:	4a4a      	ldr	r2, [pc, #296]	; (8005234 <HAL_RCC_OscConfig+0x6d8>)
 800510a:	f043 0301 	orr.w	r3, r3, #1
 800510e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005112:	e00f      	b.n	8005134 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005114:	4b47      	ldr	r3, [pc, #284]	; (8005234 <HAL_RCC_OscConfig+0x6d8>)
 8005116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800511a:	4a46      	ldr	r2, [pc, #280]	; (8005234 <HAL_RCC_OscConfig+0x6d8>)
 800511c:	f023 0301 	bic.w	r3, r3, #1
 8005120:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005124:	4b43      	ldr	r3, [pc, #268]	; (8005234 <HAL_RCC_OscConfig+0x6d8>)
 8005126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800512a:	4a42      	ldr	r2, [pc, #264]	; (8005234 <HAL_RCC_OscConfig+0x6d8>)
 800512c:	f023 0304 	bic.w	r3, r3, #4
 8005130:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d016      	beq.n	800516a <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800513c:	f7fe fdee 	bl	8003d1c <HAL_GetTick>
 8005140:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005142:	e00a      	b.n	800515a <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005144:	f7fe fdea 	bl	8003d1c <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005152:	4293      	cmp	r3, r2
 8005154:	d901      	bls.n	800515a <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e172      	b.n	8005440 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800515a:	4b36      	ldr	r3, [pc, #216]	; (8005234 <HAL_RCC_OscConfig+0x6d8>)
 800515c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005160:	f003 0302 	and.w	r3, r3, #2
 8005164:	2b00      	cmp	r3, #0
 8005166:	d0ed      	beq.n	8005144 <HAL_RCC_OscConfig+0x5e8>
 8005168:	e01d      	b.n	80051a6 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800516a:	f7fe fdd7 	bl	8003d1c <HAL_GetTick>
 800516e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005170:	e00a      	b.n	8005188 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005172:	f7fe fdd3 	bl	8003d1c <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005180:	4293      	cmp	r3, r2
 8005182:	d901      	bls.n	8005188 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	e15b      	b.n	8005440 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005188:	4b2a      	ldr	r3, [pc, #168]	; (8005234 <HAL_RCC_OscConfig+0x6d8>)
 800518a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800518e:	f003 0302 	and.w	r3, r3, #2
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1ed      	bne.n	8005172 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8005196:	4b27      	ldr	r3, [pc, #156]	; (8005234 <HAL_RCC_OscConfig+0x6d8>)
 8005198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800519c:	4a25      	ldr	r2, [pc, #148]	; (8005234 <HAL_RCC_OscConfig+0x6d8>)
 800519e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d105      	bne.n	80051ba <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051ae:	4b21      	ldr	r3, [pc, #132]	; (8005234 <HAL_RCC_OscConfig+0x6d8>)
 80051b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b2:	4a20      	ldr	r2, [pc, #128]	; (8005234 <HAL_RCC_OscConfig+0x6d8>)
 80051b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051b8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0320 	and.w	r3, r3, #32
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d041      	beq.n	800524a <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d01c      	beq.n	8005208 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80051ce:	4b19      	ldr	r3, [pc, #100]	; (8005234 <HAL_RCC_OscConfig+0x6d8>)
 80051d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051d4:	4a17      	ldr	r2, [pc, #92]	; (8005234 <HAL_RCC_OscConfig+0x6d8>)
 80051d6:	f043 0301 	orr.w	r3, r3, #1
 80051da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051de:	f7fe fd9d 	bl	8003d1c <HAL_GetTick>
 80051e2:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80051e4:	e008      	b.n	80051f8 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051e6:	f7fe fd99 	bl	8003d1c <HAL_GetTick>
 80051ea:	4602      	mov	r2, r0
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d901      	bls.n	80051f8 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e123      	b.n	8005440 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80051f8:	4b0e      	ldr	r3, [pc, #56]	; (8005234 <HAL_RCC_OscConfig+0x6d8>)
 80051fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b00      	cmp	r3, #0
 8005204:	d0ef      	beq.n	80051e6 <HAL_RCC_OscConfig+0x68a>
 8005206:	e020      	b.n	800524a <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005208:	4b0a      	ldr	r3, [pc, #40]	; (8005234 <HAL_RCC_OscConfig+0x6d8>)
 800520a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800520e:	4a09      	ldr	r2, [pc, #36]	; (8005234 <HAL_RCC_OscConfig+0x6d8>)
 8005210:	f023 0301 	bic.w	r3, r3, #1
 8005214:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005218:	f7fe fd80 	bl	8003d1c <HAL_GetTick>
 800521c:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800521e:	e00d      	b.n	800523c <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005220:	f7fe fd7c 	bl	8003d1c <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	2b02      	cmp	r3, #2
 800522c:	d906      	bls.n	800523c <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e106      	b.n	8005440 <HAL_RCC_OscConfig+0x8e4>
 8005232:	bf00      	nop
 8005234:	40021000 	.word	0x40021000
 8005238:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800523c:	4b82      	ldr	r3, [pc, #520]	; (8005448 <HAL_RCC_OscConfig+0x8ec>)
 800523e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005242:	f003 0302 	and.w	r3, r3, #2
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1ea      	bne.n	8005220 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524e:	2b00      	cmp	r3, #0
 8005250:	f000 80f5 	beq.w	800543e <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005258:	2b02      	cmp	r3, #2
 800525a:	f040 80cb 	bne.w	80053f4 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800525e:	4b7a      	ldr	r3, [pc, #488]	; (8005448 <HAL_RCC_OscConfig+0x8ec>)
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	f003 0203 	and.w	r2, r3, #3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526e:	429a      	cmp	r2, r3
 8005270:	d12c      	bne.n	80052cc <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800527c:	3b01      	subs	r3, #1
 800527e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005280:	429a      	cmp	r2, r3
 8005282:	d123      	bne.n	80052cc <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005290:	429a      	cmp	r2, r3
 8005292:	d11b      	bne.n	80052cc <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800529e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d113      	bne.n	80052cc <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ae:	085b      	lsrs	r3, r3, #1
 80052b0:	3b01      	subs	r3, #1
 80052b2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d109      	bne.n	80052cc <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052c2:	085b      	lsrs	r3, r3, #1
 80052c4:	3b01      	subs	r3, #1
 80052c6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d06d      	beq.n	80053a8 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80052cc:	6a3b      	ldr	r3, [r7, #32]
 80052ce:	2b0c      	cmp	r3, #12
 80052d0:	d068      	beq.n	80053a4 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80052d2:	4b5d      	ldr	r3, [pc, #372]	; (8005448 <HAL_RCC_OscConfig+0x8ec>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d105      	bne.n	80052ea <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80052de:	4b5a      	ldr	r3, [pc, #360]	; (8005448 <HAL_RCC_OscConfig+0x8ec>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d001      	beq.n	80052ee <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e0a8      	b.n	8005440 <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80052ee:	4b56      	ldr	r3, [pc, #344]	; (8005448 <HAL_RCC_OscConfig+0x8ec>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a55      	ldr	r2, [pc, #340]	; (8005448 <HAL_RCC_OscConfig+0x8ec>)
 80052f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052f8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80052fa:	f7fe fd0f 	bl	8003d1c <HAL_GetTick>
 80052fe:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005300:	e008      	b.n	8005314 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005302:	f7fe fd0b 	bl	8003d1c <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	2b02      	cmp	r3, #2
 800530e:	d901      	bls.n	8005314 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e095      	b.n	8005440 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005314:	4b4c      	ldr	r3, [pc, #304]	; (8005448 <HAL_RCC_OscConfig+0x8ec>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d1f0      	bne.n	8005302 <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005320:	4b49      	ldr	r3, [pc, #292]	; (8005448 <HAL_RCC_OscConfig+0x8ec>)
 8005322:	68da      	ldr	r2, [r3, #12]
 8005324:	4b49      	ldr	r3, [pc, #292]	; (800544c <HAL_RCC_OscConfig+0x8f0>)
 8005326:	4013      	ands	r3, r2
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005330:	3a01      	subs	r2, #1
 8005332:	0112      	lsls	r2, r2, #4
 8005334:	4311      	orrs	r1, r2
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800533a:	0212      	lsls	r2, r2, #8
 800533c:	4311      	orrs	r1, r2
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005342:	0852      	lsrs	r2, r2, #1
 8005344:	3a01      	subs	r2, #1
 8005346:	0552      	lsls	r2, r2, #21
 8005348:	4311      	orrs	r1, r2
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800534e:	0852      	lsrs	r2, r2, #1
 8005350:	3a01      	subs	r2, #1
 8005352:	0652      	lsls	r2, r2, #25
 8005354:	4311      	orrs	r1, r2
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800535a:	06d2      	lsls	r2, r2, #27
 800535c:	430a      	orrs	r2, r1
 800535e:	493a      	ldr	r1, [pc, #232]	; (8005448 <HAL_RCC_OscConfig+0x8ec>)
 8005360:	4313      	orrs	r3, r2
 8005362:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005364:	4b38      	ldr	r3, [pc, #224]	; (8005448 <HAL_RCC_OscConfig+0x8ec>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a37      	ldr	r2, [pc, #220]	; (8005448 <HAL_RCC_OscConfig+0x8ec>)
 800536a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800536e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005370:	4b35      	ldr	r3, [pc, #212]	; (8005448 <HAL_RCC_OscConfig+0x8ec>)
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	4a34      	ldr	r2, [pc, #208]	; (8005448 <HAL_RCC_OscConfig+0x8ec>)
 8005376:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800537a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800537c:	f7fe fcce 	bl	8003d1c <HAL_GetTick>
 8005380:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005382:	e008      	b.n	8005396 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005384:	f7fe fcca 	bl	8003d1c <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	2b02      	cmp	r3, #2
 8005390:	d901      	bls.n	8005396 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e054      	b.n	8005440 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005396:	4b2c      	ldr	r3, [pc, #176]	; (8005448 <HAL_RCC_OscConfig+0x8ec>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d0f0      	beq.n	8005384 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80053a2:	e04c      	b.n	800543e <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e04b      	b.n	8005440 <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053a8:	4b27      	ldr	r3, [pc, #156]	; (8005448 <HAL_RCC_OscConfig+0x8ec>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d144      	bne.n	800543e <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80053b4:	4b24      	ldr	r3, [pc, #144]	; (8005448 <HAL_RCC_OscConfig+0x8ec>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a23      	ldr	r2, [pc, #140]	; (8005448 <HAL_RCC_OscConfig+0x8ec>)
 80053ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80053c0:	4b21      	ldr	r3, [pc, #132]	; (8005448 <HAL_RCC_OscConfig+0x8ec>)
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	4a20      	ldr	r2, [pc, #128]	; (8005448 <HAL_RCC_OscConfig+0x8ec>)
 80053c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80053cc:	f7fe fca6 	bl	8003d1c <HAL_GetTick>
 80053d0:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053d2:	e008      	b.n	80053e6 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053d4:	f7fe fca2 	bl	8003d1c <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d901      	bls.n	80053e6 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e02c      	b.n	8005440 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053e6:	4b18      	ldr	r3, [pc, #96]	; (8005448 <HAL_RCC_OscConfig+0x8ec>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d0f0      	beq.n	80053d4 <HAL_RCC_OscConfig+0x878>
 80053f2:	e024      	b.n	800543e <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80053f4:	6a3b      	ldr	r3, [r7, #32]
 80053f6:	2b0c      	cmp	r3, #12
 80053f8:	d01f      	beq.n	800543a <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053fa:	4b13      	ldr	r3, [pc, #76]	; (8005448 <HAL_RCC_OscConfig+0x8ec>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a12      	ldr	r2, [pc, #72]	; (8005448 <HAL_RCC_OscConfig+0x8ec>)
 8005400:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005404:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005406:	f7fe fc89 	bl	8003d1c <HAL_GetTick>
 800540a:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800540c:	e008      	b.n	8005420 <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800540e:	f7fe fc85 	bl	8003d1c <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	2b02      	cmp	r3, #2
 800541a:	d901      	bls.n	8005420 <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e00f      	b.n	8005440 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005420:	4b09      	ldr	r3, [pc, #36]	; (8005448 <HAL_RCC_OscConfig+0x8ec>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1f0      	bne.n	800540e <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800542c:	4b06      	ldr	r3, [pc, #24]	; (8005448 <HAL_RCC_OscConfig+0x8ec>)
 800542e:	68da      	ldr	r2, [r3, #12]
 8005430:	4905      	ldr	r1, [pc, #20]	; (8005448 <HAL_RCC_OscConfig+0x8ec>)
 8005432:	4b07      	ldr	r3, [pc, #28]	; (8005450 <HAL_RCC_OscConfig+0x8f4>)
 8005434:	4013      	ands	r3, r2
 8005436:	60cb      	str	r3, [r1, #12]
 8005438:	e001      	b.n	800543e <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e000      	b.n	8005440 <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3728      	adds	r7, #40	; 0x28
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	40021000 	.word	0x40021000
 800544c:	019d800c 	.word	0x019d800c
 8005450:	feeefffc 	.word	0xfeeefffc

08005454 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b086      	sub	sp, #24
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800545e:	2300      	movs	r3, #0
 8005460:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d101      	bne.n	800546c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e11d      	b.n	80056a8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800546c:	4b90      	ldr	r3, [pc, #576]	; (80056b0 <HAL_RCC_ClockConfig+0x25c>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 030f 	and.w	r3, r3, #15
 8005474:	683a      	ldr	r2, [r7, #0]
 8005476:	429a      	cmp	r2, r3
 8005478:	d910      	bls.n	800549c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800547a:	4b8d      	ldr	r3, [pc, #564]	; (80056b0 <HAL_RCC_ClockConfig+0x25c>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f023 020f 	bic.w	r2, r3, #15
 8005482:	498b      	ldr	r1, [pc, #556]	; (80056b0 <HAL_RCC_ClockConfig+0x25c>)
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	4313      	orrs	r3, r2
 8005488:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800548a:	4b89      	ldr	r3, [pc, #548]	; (80056b0 <HAL_RCC_ClockConfig+0x25c>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 030f 	and.w	r3, r3, #15
 8005492:	683a      	ldr	r2, [r7, #0]
 8005494:	429a      	cmp	r2, r3
 8005496:	d001      	beq.n	800549c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e105      	b.n	80056a8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0302 	and.w	r3, r3, #2
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d010      	beq.n	80054ca <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	689a      	ldr	r2, [r3, #8]
 80054ac:	4b81      	ldr	r3, [pc, #516]	; (80056b4 <HAL_RCC_ClockConfig+0x260>)
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d908      	bls.n	80054ca <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054b8:	4b7e      	ldr	r3, [pc, #504]	; (80056b4 <HAL_RCC_ClockConfig+0x260>)
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	497b      	ldr	r1, [pc, #492]	; (80056b4 <HAL_RCC_ClockConfig+0x260>)
 80054c6:	4313      	orrs	r3, r2
 80054c8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0301 	and.w	r3, r3, #1
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d079      	beq.n	80055ca <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	2b03      	cmp	r3, #3
 80054dc:	d11e      	bne.n	800551c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054de:	4b75      	ldr	r3, [pc, #468]	; (80056b4 <HAL_RCC_ClockConfig+0x260>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d101      	bne.n	80054ee <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e0dc      	b.n	80056a8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80054ee:	f000 fa09 	bl	8005904 <RCC_GetSysClockFreqFromPLLSource>
 80054f2:	4603      	mov	r3, r0
 80054f4:	4a70      	ldr	r2, [pc, #448]	; (80056b8 <HAL_RCC_ClockConfig+0x264>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d946      	bls.n	8005588 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80054fa:	4b6e      	ldr	r3, [pc, #440]	; (80056b4 <HAL_RCC_ClockConfig+0x260>)
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d140      	bne.n	8005588 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005506:	4b6b      	ldr	r3, [pc, #428]	; (80056b4 <HAL_RCC_ClockConfig+0x260>)
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800550e:	4a69      	ldr	r2, [pc, #420]	; (80056b4 <HAL_RCC_ClockConfig+0x260>)
 8005510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005514:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005516:	2380      	movs	r3, #128	; 0x80
 8005518:	617b      	str	r3, [r7, #20]
 800551a:	e035      	b.n	8005588 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	2b02      	cmp	r3, #2
 8005522:	d107      	bne.n	8005534 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005524:	4b63      	ldr	r3, [pc, #396]	; (80056b4 <HAL_RCC_ClockConfig+0x260>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d115      	bne.n	800555c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e0b9      	b.n	80056a8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d107      	bne.n	800554c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800553c:	4b5d      	ldr	r3, [pc, #372]	; (80056b4 <HAL_RCC_ClockConfig+0x260>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0302 	and.w	r3, r3, #2
 8005544:	2b00      	cmp	r3, #0
 8005546:	d109      	bne.n	800555c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e0ad      	b.n	80056a8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800554c:	4b59      	ldr	r3, [pc, #356]	; (80056b4 <HAL_RCC_ClockConfig+0x260>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005554:	2b00      	cmp	r3, #0
 8005556:	d101      	bne.n	800555c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e0a5      	b.n	80056a8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800555c:	f000 f8b4 	bl	80056c8 <HAL_RCC_GetSysClockFreq>
 8005560:	4603      	mov	r3, r0
 8005562:	4a55      	ldr	r2, [pc, #340]	; (80056b8 <HAL_RCC_ClockConfig+0x264>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d90f      	bls.n	8005588 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005568:	4b52      	ldr	r3, [pc, #328]	; (80056b4 <HAL_RCC_ClockConfig+0x260>)
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d109      	bne.n	8005588 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005574:	4b4f      	ldr	r3, [pc, #316]	; (80056b4 <HAL_RCC_ClockConfig+0x260>)
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800557c:	4a4d      	ldr	r2, [pc, #308]	; (80056b4 <HAL_RCC_ClockConfig+0x260>)
 800557e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005582:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005584:	2380      	movs	r3, #128	; 0x80
 8005586:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005588:	4b4a      	ldr	r3, [pc, #296]	; (80056b4 <HAL_RCC_ClockConfig+0x260>)
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	f023 0203 	bic.w	r2, r3, #3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	4947      	ldr	r1, [pc, #284]	; (80056b4 <HAL_RCC_ClockConfig+0x260>)
 8005596:	4313      	orrs	r3, r2
 8005598:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800559a:	f7fe fbbf 	bl	8003d1c <HAL_GetTick>
 800559e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055a0:	e00a      	b.n	80055b8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055a2:	f7fe fbbb 	bl	8003d1c <HAL_GetTick>
 80055a6:	4602      	mov	r2, r0
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d901      	bls.n	80055b8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	e077      	b.n	80056a8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055b8:	4b3e      	ldr	r3, [pc, #248]	; (80056b4 <HAL_RCC_ClockConfig+0x260>)
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f003 020c 	and.w	r2, r3, #12
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d1eb      	bne.n	80055a2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	2b80      	cmp	r3, #128	; 0x80
 80055ce:	d105      	bne.n	80055dc <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80055d0:	4b38      	ldr	r3, [pc, #224]	; (80056b4 <HAL_RCC_ClockConfig+0x260>)
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	4a37      	ldr	r2, [pc, #220]	; (80056b4 <HAL_RCC_ClockConfig+0x260>)
 80055d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055da:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0302 	and.w	r3, r3, #2
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d010      	beq.n	800560a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	689a      	ldr	r2, [r3, #8]
 80055ec:	4b31      	ldr	r3, [pc, #196]	; (80056b4 <HAL_RCC_ClockConfig+0x260>)
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d208      	bcs.n	800560a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055f8:	4b2e      	ldr	r3, [pc, #184]	; (80056b4 <HAL_RCC_ClockConfig+0x260>)
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	492b      	ldr	r1, [pc, #172]	; (80056b4 <HAL_RCC_ClockConfig+0x260>)
 8005606:	4313      	orrs	r3, r2
 8005608:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800560a:	4b29      	ldr	r3, [pc, #164]	; (80056b0 <HAL_RCC_ClockConfig+0x25c>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 030f 	and.w	r3, r3, #15
 8005612:	683a      	ldr	r2, [r7, #0]
 8005614:	429a      	cmp	r2, r3
 8005616:	d210      	bcs.n	800563a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005618:	4b25      	ldr	r3, [pc, #148]	; (80056b0 <HAL_RCC_ClockConfig+0x25c>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f023 020f 	bic.w	r2, r3, #15
 8005620:	4923      	ldr	r1, [pc, #140]	; (80056b0 <HAL_RCC_ClockConfig+0x25c>)
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	4313      	orrs	r3, r2
 8005626:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005628:	4b21      	ldr	r3, [pc, #132]	; (80056b0 <HAL_RCC_ClockConfig+0x25c>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 030f 	and.w	r3, r3, #15
 8005630:	683a      	ldr	r2, [r7, #0]
 8005632:	429a      	cmp	r2, r3
 8005634:	d001      	beq.n	800563a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e036      	b.n	80056a8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0304 	and.w	r3, r3, #4
 8005642:	2b00      	cmp	r3, #0
 8005644:	d008      	beq.n	8005658 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005646:	4b1b      	ldr	r3, [pc, #108]	; (80056b4 <HAL_RCC_ClockConfig+0x260>)
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	4918      	ldr	r1, [pc, #96]	; (80056b4 <HAL_RCC_ClockConfig+0x260>)
 8005654:	4313      	orrs	r3, r2
 8005656:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0308 	and.w	r3, r3, #8
 8005660:	2b00      	cmp	r3, #0
 8005662:	d009      	beq.n	8005678 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005664:	4b13      	ldr	r3, [pc, #76]	; (80056b4 <HAL_RCC_ClockConfig+0x260>)
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	00db      	lsls	r3, r3, #3
 8005672:	4910      	ldr	r1, [pc, #64]	; (80056b4 <HAL_RCC_ClockConfig+0x260>)
 8005674:	4313      	orrs	r3, r2
 8005676:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005678:	f000 f826 	bl	80056c8 <HAL_RCC_GetSysClockFreq>
 800567c:	4602      	mov	r2, r0
 800567e:	4b0d      	ldr	r3, [pc, #52]	; (80056b4 <HAL_RCC_ClockConfig+0x260>)
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	091b      	lsrs	r3, r3, #4
 8005684:	f003 030f 	and.w	r3, r3, #15
 8005688:	490c      	ldr	r1, [pc, #48]	; (80056bc <HAL_RCC_ClockConfig+0x268>)
 800568a:	5ccb      	ldrb	r3, [r1, r3]
 800568c:	f003 031f 	and.w	r3, r3, #31
 8005690:	fa22 f303 	lsr.w	r3, r2, r3
 8005694:	4a0a      	ldr	r2, [pc, #40]	; (80056c0 <HAL_RCC_ClockConfig+0x26c>)
 8005696:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005698:	4b0a      	ldr	r3, [pc, #40]	; (80056c4 <HAL_RCC_ClockConfig+0x270>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4618      	mov	r0, r3
 800569e:	f7fe faed 	bl	8003c7c <HAL_InitTick>
 80056a2:	4603      	mov	r3, r0
 80056a4:	73fb      	strb	r3, [r7, #15]

  return status;
 80056a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3718      	adds	r7, #24
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	40022000 	.word	0x40022000
 80056b4:	40021000 	.word	0x40021000
 80056b8:	04c4b400 	.word	0x04c4b400
 80056bc:	0800f328 	.word	0x0800f328
 80056c0:	20000074 	.word	0x20000074
 80056c4:	20000078 	.word	0x20000078

080056c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b089      	sub	sp, #36	; 0x24
 80056cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80056ce:	2300      	movs	r3, #0
 80056d0:	61fb      	str	r3, [r7, #28]
 80056d2:	2300      	movs	r3, #0
 80056d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056d6:	4b3e      	ldr	r3, [pc, #248]	; (80057d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f003 030c 	and.w	r3, r3, #12
 80056de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056e0:	4b3b      	ldr	r3, [pc, #236]	; (80057d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	f003 0303 	and.w	r3, r3, #3
 80056e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d005      	beq.n	80056fc <HAL_RCC_GetSysClockFreq+0x34>
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	2b0c      	cmp	r3, #12
 80056f4:	d121      	bne.n	800573a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d11e      	bne.n	800573a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80056fc:	4b34      	ldr	r3, [pc, #208]	; (80057d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 0308 	and.w	r3, r3, #8
 8005704:	2b00      	cmp	r3, #0
 8005706:	d107      	bne.n	8005718 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005708:	4b31      	ldr	r3, [pc, #196]	; (80057d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800570a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800570e:	0a1b      	lsrs	r3, r3, #8
 8005710:	f003 030f 	and.w	r3, r3, #15
 8005714:	61fb      	str	r3, [r7, #28]
 8005716:	e005      	b.n	8005724 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005718:	4b2d      	ldr	r3, [pc, #180]	; (80057d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	091b      	lsrs	r3, r3, #4
 800571e:	f003 030f 	and.w	r3, r3, #15
 8005722:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005724:	4a2b      	ldr	r2, [pc, #172]	; (80057d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800572c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d10d      	bne.n	8005750 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005738:	e00a      	b.n	8005750 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	2b04      	cmp	r3, #4
 800573e:	d102      	bne.n	8005746 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005740:	4b25      	ldr	r3, [pc, #148]	; (80057d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005742:	61bb      	str	r3, [r7, #24]
 8005744:	e004      	b.n	8005750 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	2b08      	cmp	r3, #8
 800574a:	d101      	bne.n	8005750 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800574c:	4b23      	ldr	r3, [pc, #140]	; (80057dc <HAL_RCC_GetSysClockFreq+0x114>)
 800574e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	2b0c      	cmp	r3, #12
 8005754:	d134      	bne.n	80057c0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005756:	4b1e      	ldr	r3, [pc, #120]	; (80057d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	f003 0303 	and.w	r3, r3, #3
 800575e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	2b02      	cmp	r3, #2
 8005764:	d003      	beq.n	800576e <HAL_RCC_GetSysClockFreq+0xa6>
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	2b03      	cmp	r3, #3
 800576a:	d003      	beq.n	8005774 <HAL_RCC_GetSysClockFreq+0xac>
 800576c:	e005      	b.n	800577a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800576e:	4b1a      	ldr	r3, [pc, #104]	; (80057d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005770:	617b      	str	r3, [r7, #20]
      break;
 8005772:	e005      	b.n	8005780 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005774:	4b19      	ldr	r3, [pc, #100]	; (80057dc <HAL_RCC_GetSysClockFreq+0x114>)
 8005776:	617b      	str	r3, [r7, #20]
      break;
 8005778:	e002      	b.n	8005780 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	617b      	str	r3, [r7, #20]
      break;
 800577e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005780:	4b13      	ldr	r3, [pc, #76]	; (80057d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	091b      	lsrs	r3, r3, #4
 8005786:	f003 030f 	and.w	r3, r3, #15
 800578a:	3301      	adds	r3, #1
 800578c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800578e:	4b10      	ldr	r3, [pc, #64]	; (80057d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	0a1b      	lsrs	r3, r3, #8
 8005794:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	fb03 f202 	mul.w	r2, r3, r2
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80057a6:	4b0a      	ldr	r3, [pc, #40]	; (80057d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	0e5b      	lsrs	r3, r3, #25
 80057ac:	f003 0303 	and.w	r3, r3, #3
 80057b0:	3301      	adds	r3, #1
 80057b2:	005b      	lsls	r3, r3, #1
 80057b4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80057b6:	697a      	ldr	r2, [r7, #20]
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80057be:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80057c0:	69bb      	ldr	r3, [r7, #24]
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3724      	adds	r7, #36	; 0x24
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	40021000 	.word	0x40021000
 80057d4:	0800f340 	.word	0x0800f340
 80057d8:	00f42400 	.word	0x00f42400
 80057dc:	007a1200 	.word	0x007a1200

080057e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057e0:	b480      	push	{r7}
 80057e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057e4:	4b03      	ldr	r3, [pc, #12]	; (80057f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80057e6:	681b      	ldr	r3, [r3, #0]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	20000074 	.word	0x20000074

080057f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80057fc:	f7ff fff0 	bl	80057e0 <HAL_RCC_GetHCLKFreq>
 8005800:	4602      	mov	r2, r0
 8005802:	4b06      	ldr	r3, [pc, #24]	; (800581c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	0a1b      	lsrs	r3, r3, #8
 8005808:	f003 0307 	and.w	r3, r3, #7
 800580c:	4904      	ldr	r1, [pc, #16]	; (8005820 <HAL_RCC_GetPCLK1Freq+0x28>)
 800580e:	5ccb      	ldrb	r3, [r1, r3]
 8005810:	f003 031f 	and.w	r3, r3, #31
 8005814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005818:	4618      	mov	r0, r3
 800581a:	bd80      	pop	{r7, pc}
 800581c:	40021000 	.word	0x40021000
 8005820:	0800f338 	.word	0x0800f338

08005824 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005828:	f7ff ffda 	bl	80057e0 <HAL_RCC_GetHCLKFreq>
 800582c:	4602      	mov	r2, r0
 800582e:	4b06      	ldr	r3, [pc, #24]	; (8005848 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	0adb      	lsrs	r3, r3, #11
 8005834:	f003 0307 	and.w	r3, r3, #7
 8005838:	4904      	ldr	r1, [pc, #16]	; (800584c <HAL_RCC_GetPCLK2Freq+0x28>)
 800583a:	5ccb      	ldrb	r3, [r1, r3]
 800583c:	f003 031f 	and.w	r3, r3, #31
 8005840:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005844:	4618      	mov	r0, r3
 8005846:	bd80      	pop	{r7, pc}
 8005848:	40021000 	.word	0x40021000
 800584c:	0800f338 	.word	0x0800f338

08005850 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b086      	sub	sp, #24
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005858:	2300      	movs	r3, #0
 800585a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800585c:	4b27      	ldr	r3, [pc, #156]	; (80058fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800585e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d003      	beq.n	8005870 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005868:	f7ff f8b4 	bl	80049d4 <HAL_PWREx_GetVoltageRange>
 800586c:	6178      	str	r0, [r7, #20]
 800586e:	e014      	b.n	800589a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005870:	4b22      	ldr	r3, [pc, #136]	; (80058fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005874:	4a21      	ldr	r2, [pc, #132]	; (80058fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800587a:	6593      	str	r3, [r2, #88]	; 0x58
 800587c:	4b1f      	ldr	r3, [pc, #124]	; (80058fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800587e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005884:	60fb      	str	r3, [r7, #12]
 8005886:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005888:	f7ff f8a4 	bl	80049d4 <HAL_PWREx_GetVoltageRange>
 800588c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800588e:	4b1b      	ldr	r3, [pc, #108]	; (80058fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005892:	4a1a      	ldr	r2, [pc, #104]	; (80058fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005894:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005898:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058a0:	d10b      	bne.n	80058ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2b80      	cmp	r3, #128	; 0x80
 80058a6:	d913      	bls.n	80058d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2ba0      	cmp	r3, #160	; 0xa0
 80058ac:	d902      	bls.n	80058b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80058ae:	2302      	movs	r3, #2
 80058b0:	613b      	str	r3, [r7, #16]
 80058b2:	e00d      	b.n	80058d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80058b4:	2301      	movs	r3, #1
 80058b6:	613b      	str	r3, [r7, #16]
 80058b8:	e00a      	b.n	80058d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2b7f      	cmp	r3, #127	; 0x7f
 80058be:	d902      	bls.n	80058c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80058c0:	2302      	movs	r3, #2
 80058c2:	613b      	str	r3, [r7, #16]
 80058c4:	e004      	b.n	80058d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2b70      	cmp	r3, #112	; 0x70
 80058ca:	d101      	bne.n	80058d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80058cc:	2301      	movs	r3, #1
 80058ce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80058d0:	4b0b      	ldr	r3, [pc, #44]	; (8005900 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f023 020f 	bic.w	r2, r3, #15
 80058d8:	4909      	ldr	r1, [pc, #36]	; (8005900 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	4313      	orrs	r3, r2
 80058de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80058e0:	4b07      	ldr	r3, [pc, #28]	; (8005900 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 030f 	and.w	r3, r3, #15
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d001      	beq.n	80058f2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e000      	b.n	80058f4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80058f2:	2300      	movs	r3, #0
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3718      	adds	r7, #24
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	40021000 	.word	0x40021000
 8005900:	40022000 	.word	0x40022000

08005904 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005904:	b480      	push	{r7}
 8005906:	b087      	sub	sp, #28
 8005908:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800590a:	4b2d      	ldr	r3, [pc, #180]	; (80059c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	f003 0303 	and.w	r3, r3, #3
 8005912:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2b03      	cmp	r3, #3
 8005918:	d00b      	beq.n	8005932 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2b03      	cmp	r3, #3
 800591e:	d825      	bhi.n	800596c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2b01      	cmp	r3, #1
 8005924:	d008      	beq.n	8005938 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2b02      	cmp	r3, #2
 800592a:	d11f      	bne.n	800596c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800592c:	4b25      	ldr	r3, [pc, #148]	; (80059c4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800592e:	613b      	str	r3, [r7, #16]
    break;
 8005930:	e01f      	b.n	8005972 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005932:	4b25      	ldr	r3, [pc, #148]	; (80059c8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005934:	613b      	str	r3, [r7, #16]
    break;
 8005936:	e01c      	b.n	8005972 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005938:	4b21      	ldr	r3, [pc, #132]	; (80059c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0308 	and.w	r3, r3, #8
 8005940:	2b00      	cmp	r3, #0
 8005942:	d107      	bne.n	8005954 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005944:	4b1e      	ldr	r3, [pc, #120]	; (80059c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005946:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800594a:	0a1b      	lsrs	r3, r3, #8
 800594c:	f003 030f 	and.w	r3, r3, #15
 8005950:	617b      	str	r3, [r7, #20]
 8005952:	e005      	b.n	8005960 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005954:	4b1a      	ldr	r3, [pc, #104]	; (80059c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	091b      	lsrs	r3, r3, #4
 800595a:	f003 030f 	and.w	r3, r3, #15
 800595e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005960:	4a1a      	ldr	r2, [pc, #104]	; (80059cc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005968:	613b      	str	r3, [r7, #16]
    break;
 800596a:	e002      	b.n	8005972 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800596c:	2300      	movs	r3, #0
 800596e:	613b      	str	r3, [r7, #16]
    break;
 8005970:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005972:	4b13      	ldr	r3, [pc, #76]	; (80059c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	091b      	lsrs	r3, r3, #4
 8005978:	f003 030f 	and.w	r3, r3, #15
 800597c:	3301      	adds	r3, #1
 800597e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005980:	4b0f      	ldr	r3, [pc, #60]	; (80059c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	0a1b      	lsrs	r3, r3, #8
 8005986:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	fb03 f202 	mul.w	r2, r3, r2
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	fbb2 f3f3 	udiv	r3, r2, r3
 8005996:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005998:	4b09      	ldr	r3, [pc, #36]	; (80059c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	0e5b      	lsrs	r3, r3, #25
 800599e:	f003 0303 	and.w	r3, r3, #3
 80059a2:	3301      	adds	r3, #1
 80059a4:	005b      	lsls	r3, r3, #1
 80059a6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80059b0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80059b2:	683b      	ldr	r3, [r7, #0]
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	371c      	adds	r7, #28
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr
 80059c0:	40021000 	.word	0x40021000
 80059c4:	00f42400 	.word	0x00f42400
 80059c8:	007a1200 	.word	0x007a1200
 80059cc:	0800f340 	.word	0x0800f340

080059d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b086      	sub	sp, #24
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80059d8:	2300      	movs	r3, #0
 80059da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80059dc:	2300      	movs	r3, #0
 80059de:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d040      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059f0:	2b80      	cmp	r3, #128	; 0x80
 80059f2:	d02a      	beq.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80059f4:	2b80      	cmp	r3, #128	; 0x80
 80059f6:	d825      	bhi.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80059f8:	2b60      	cmp	r3, #96	; 0x60
 80059fa:	d026      	beq.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80059fc:	2b60      	cmp	r3, #96	; 0x60
 80059fe:	d821      	bhi.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005a00:	2b40      	cmp	r3, #64	; 0x40
 8005a02:	d006      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005a04:	2b40      	cmp	r3, #64	; 0x40
 8005a06:	d81d      	bhi.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d009      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005a0c:	2b20      	cmp	r3, #32
 8005a0e:	d010      	beq.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005a10:	e018      	b.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005a12:	4b89      	ldr	r3, [pc, #548]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	4a88      	ldr	r2, [pc, #544]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a1c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005a1e:	e015      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	3304      	adds	r3, #4
 8005a24:	2100      	movs	r1, #0
 8005a26:	4618      	mov	r0, r3
 8005a28:	f000 fb3e 	bl	80060a8 <RCCEx_PLLSAI1_Config>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005a30:	e00c      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	3320      	adds	r3, #32
 8005a36:	2100      	movs	r1, #0
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f000 fc29 	bl	8006290 <RCCEx_PLLSAI2_Config>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005a42:	e003      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	74fb      	strb	r3, [r7, #19]
      break;
 8005a48:	e000      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005a4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a4c:	7cfb      	ldrb	r3, [r7, #19]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d10b      	bne.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a52:	4b79      	ldr	r3, [pc, #484]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005a54:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a58:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a60:	4975      	ldr	r1, [pc, #468]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005a68:	e001      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a6a:	7cfb      	ldrb	r3, [r7, #19]
 8005a6c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d047      	beq.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a82:	d030      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005a84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a88:	d82a      	bhi.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005a8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a8e:	d02a      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005a90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a94:	d824      	bhi.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005a96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a9a:	d008      	beq.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005a9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005aa0:	d81e      	bhi.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d00a      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005aa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005aaa:	d010      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005aac:	e018      	b.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005aae:	4b62      	ldr	r3, [pc, #392]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	4a61      	ldr	r2, [pc, #388]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ab8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005aba:	e015      	b.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	3304      	adds	r3, #4
 8005ac0:	2100      	movs	r1, #0
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f000 faf0 	bl	80060a8 <RCCEx_PLLSAI1_Config>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005acc:	e00c      	b.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	3320      	adds	r3, #32
 8005ad2:	2100      	movs	r1, #0
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f000 fbdb 	bl	8006290 <RCCEx_PLLSAI2_Config>
 8005ada:	4603      	mov	r3, r0
 8005adc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005ade:	e003      	b.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	74fb      	strb	r3, [r7, #19]
      break;
 8005ae4:	e000      	b.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005ae6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ae8:	7cfb      	ldrb	r3, [r7, #19]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d10b      	bne.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005aee:	4b52      	ldr	r3, [pc, #328]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005af0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005af4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005afc:	494e      	ldr	r1, [pc, #312]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005afe:	4313      	orrs	r3, r2
 8005b00:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005b04:	e001      	b.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b06:	7cfb      	ldrb	r3, [r7, #19]
 8005b08:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	f000 809f 	beq.w	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005b1c:	4b46      	ldr	r3, [pc, #280]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d101      	bne.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e000      	b.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00d      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b32:	4b41      	ldr	r3, [pc, #260]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b36:	4a40      	ldr	r2, [pc, #256]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b3c:	6593      	str	r3, [r2, #88]	; 0x58
 8005b3e:	4b3e      	ldr	r3, [pc, #248]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b46:	60bb      	str	r3, [r7, #8]
 8005b48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b4e:	4b3b      	ldr	r3, [pc, #236]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a3a      	ldr	r2, [pc, #232]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b58:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b5a:	f7fe f8df 	bl	8003d1c <HAL_GetTick>
 8005b5e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005b60:	e009      	b.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b62:	f7fe f8db 	bl	8003d1c <HAL_GetTick>
 8005b66:	4602      	mov	r2, r0
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d902      	bls.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	74fb      	strb	r3, [r7, #19]
        break;
 8005b74:	e005      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005b76:	4b31      	ldr	r3, [pc, #196]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d0ef      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005b82:	7cfb      	ldrb	r3, [r7, #19]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d15b      	bne.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005b88:	4b2b      	ldr	r3, [pc, #172]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b92:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d01f      	beq.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ba0:	697a      	ldr	r2, [r7, #20]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d019      	beq.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005ba6:	4b24      	ldr	r3, [pc, #144]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bb0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005bb2:	4b21      	ldr	r3, [pc, #132]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bb8:	4a1f      	ldr	r2, [pc, #124]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005bba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005bc2:	4b1d      	ldr	r3, [pc, #116]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bc8:	4a1b      	ldr	r2, [pc, #108]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005bca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005bd2:	4a19      	ldr	r2, [pc, #100]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f003 0301 	and.w	r3, r3, #1
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d016      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005be4:	f7fe f89a 	bl	8003d1c <HAL_GetTick>
 8005be8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bea:	e00b      	b.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bec:	f7fe f896 	bl	8003d1c <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d902      	bls.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	74fb      	strb	r3, [r7, #19]
            break;
 8005c02:	e006      	b.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c04:	4b0c      	ldr	r3, [pc, #48]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c0a:	f003 0302 	and.w	r3, r3, #2
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d0ec      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005c12:	7cfb      	ldrb	r3, [r7, #19]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d10c      	bne.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c18:	4b07      	ldr	r3, [pc, #28]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c1e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c28:	4903      	ldr	r1, [pc, #12]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005c30:	e008      	b.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c32:	7cfb      	ldrb	r3, [r7, #19]
 8005c34:	74bb      	strb	r3, [r7, #18]
 8005c36:	e005      	b.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005c38:	40021000 	.word	0x40021000
 8005c3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c40:	7cfb      	ldrb	r3, [r7, #19]
 8005c42:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c44:	7c7b      	ldrb	r3, [r7, #17]
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d105      	bne.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c4a:	4ba0      	ldr	r3, [pc, #640]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c4e:	4a9f      	ldr	r2, [pc, #636]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c54:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 0301 	and.w	r3, r3, #1
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00a      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c62:	4b9a      	ldr	r3, [pc, #616]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c68:	f023 0203 	bic.w	r2, r3, #3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c70:	4996      	ldr	r1, [pc, #600]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c72:	4313      	orrs	r3, r2
 8005c74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 0302 	and.w	r3, r3, #2
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d00a      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c84:	4b91      	ldr	r3, [pc, #580]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c8a:	f023 020c 	bic.w	r2, r3, #12
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c92:	498e      	ldr	r1, [pc, #568]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c94:	4313      	orrs	r3, r2
 8005c96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0304 	and.w	r3, r3, #4
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d00a      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005ca6:	4b89      	ldr	r3, [pc, #548]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cb4:	4985      	ldr	r1, [pc, #532]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 0308 	and.w	r3, r3, #8
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00a      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005cc8:	4b80      	ldr	r3, [pc, #512]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cd6:	497d      	ldr	r1, [pc, #500]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0310 	and.w	r3, r3, #16
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00a      	beq.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005cea:	4b78      	ldr	r3, [pc, #480]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cf0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cf8:	4974      	ldr	r1, [pc, #464]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0320 	and.w	r3, r3, #32
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d00a      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d0c:	4b6f      	ldr	r3, [pc, #444]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d12:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d1a:	496c      	ldr	r1, [pc, #432]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00a      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d2e:	4b67      	ldr	r3, [pc, #412]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d3c:	4963      	ldr	r1, [pc, #396]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00a      	beq.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005d50:	4b5e      	ldr	r3, [pc, #376]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d5e:	495b      	ldr	r1, [pc, #364]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d60:	4313      	orrs	r3, r2
 8005d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00a      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d72:	4b56      	ldr	r3, [pc, #344]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d78:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d80:	4952      	ldr	r1, [pc, #328]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d82:	4313      	orrs	r3, r2
 8005d84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d00a      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005d94:	4b4d      	ldr	r3, [pc, #308]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d9a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005da2:	494a      	ldr	r1, [pc, #296]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005da4:	4313      	orrs	r3, r2
 8005da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00a      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005db6:	4b45      	ldr	r3, [pc, #276]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dbc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dc4:	4941      	ldr	r1, [pc, #260]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00a      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005dd8:	4b3c      	ldr	r3, [pc, #240]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005dda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005dde:	f023 0203 	bic.w	r2, r3, #3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005de6:	4939      	ldr	r1, [pc, #228]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005de8:	4313      	orrs	r3, r2
 8005dea:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d028      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005dfa:	4b34      	ldr	r3, [pc, #208]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e00:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e08:	4930      	ldr	r1, [pc, #192]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e18:	d106      	bne.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e1a:	4b2c      	ldr	r3, [pc, #176]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	4a2b      	ldr	r2, [pc, #172]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e24:	60d3      	str	r3, [r2, #12]
 8005e26:	e011      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e30:	d10c      	bne.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	3304      	adds	r3, #4
 8005e36:	2101      	movs	r1, #1
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f000 f935 	bl	80060a8 <RCCEx_PLLSAI1_Config>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005e42:	7cfb      	ldrb	r3, [r7, #19]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d001      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005e48:	7cfb      	ldrb	r3, [r7, #19]
 8005e4a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d04d      	beq.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e60:	d108      	bne.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005e62:	4b1a      	ldr	r3, [pc, #104]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e64:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e68:	4a18      	ldr	r2, [pc, #96]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e6e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005e72:	e012      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005e74:	4b15      	ldr	r3, [pc, #84]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e7a:	4a14      	ldr	r2, [pc, #80]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e80:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005e84:	4b11      	ldr	r3, [pc, #68]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e92:	490e      	ldr	r1, [pc, #56]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e94:	4313      	orrs	r3, r2
 8005e96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ea2:	d106      	bne.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ea4:	4b09      	ldr	r3, [pc, #36]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	4a08      	ldr	r2, [pc, #32]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005eaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005eae:	60d3      	str	r3, [r2, #12]
 8005eb0:	e020      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005eb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005eba:	d109      	bne.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005ebc:	4b03      	ldr	r3, [pc, #12]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	4a02      	ldr	r2, [pc, #8]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ec2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ec6:	60d3      	str	r3, [r2, #12]
 8005ec8:	e014      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005eca:	bf00      	nop
 8005ecc:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ed4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ed8:	d10c      	bne.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	3304      	adds	r3, #4
 8005ede:	2101      	movs	r1, #1
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f000 f8e1 	bl	80060a8 <RCCEx_PLLSAI1_Config>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005eea:	7cfb      	ldrb	r3, [r7, #19]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d001      	beq.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005ef0:	7cfb      	ldrb	r3, [r7, #19]
 8005ef2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d028      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f00:	4b68      	ldr	r3, [pc, #416]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f0e:	4965      	ldr	r1, [pc, #404]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005f10:	4313      	orrs	r3, r2
 8005f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f1e:	d106      	bne.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f20:	4b60      	ldr	r3, [pc, #384]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	4a5f      	ldr	r2, [pc, #380]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005f26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f2a:	60d3      	str	r3, [r2, #12]
 8005f2c:	e011      	b.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f36:	d10c      	bne.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	3304      	adds	r3, #4
 8005f3c:	2101      	movs	r1, #1
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f000 f8b2 	bl	80060a8 <RCCEx_PLLSAI1_Config>
 8005f44:	4603      	mov	r3, r0
 8005f46:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f48:	7cfb      	ldrb	r3, [r7, #19]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d001      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005f4e:	7cfb      	ldrb	r3, [r7, #19]
 8005f50:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d01e      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f5e:	4b51      	ldr	r3, [pc, #324]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f64:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f6e:	494d      	ldr	r1, [pc, #308]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005f70:	4313      	orrs	r3, r2
 8005f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f80:	d10c      	bne.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	3304      	adds	r3, #4
 8005f86:	2102      	movs	r1, #2
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f000 f88d 	bl	80060a8 <RCCEx_PLLSAI1_Config>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f92:	7cfb      	ldrb	r3, [r7, #19]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d001      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005f98:	7cfb      	ldrb	r3, [r7, #19]
 8005f9a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00b      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005fa8:	4b3e      	ldr	r3, [pc, #248]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005faa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005fae:	f023 0204 	bic.w	r2, r3, #4
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fb8:	493a      	ldr	r1, [pc, #232]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00b      	beq.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005fcc:	4b35      	ldr	r3, [pc, #212]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005fce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005fd2:	f023 0218 	bic.w	r2, r3, #24
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fdc:	4931      	ldr	r1, [pc, #196]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d035      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005ff0:	4b2c      	ldr	r3, [pc, #176]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a2b      	ldr	r2, [pc, #172]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005ff6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ffa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ffc:	f7fd fe8e 	bl	8003d1c <HAL_GetTick>
 8006000:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006002:	e009      	b.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006004:	f7fd fe8a 	bl	8003d1c <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	2b02      	cmp	r3, #2
 8006010:	d902      	bls.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	74fb      	strb	r3, [r7, #19]
        break;
 8006016:	e005      	b.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006018:	4b22      	ldr	r3, [pc, #136]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006020:	2b00      	cmp	r3, #0
 8006022:	d1ef      	bne.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8006024:	7cfb      	ldrb	r3, [r7, #19]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d113      	bne.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800602a:	4b1e      	ldr	r3, [pc, #120]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800602c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006030:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800603a:	491a      	ldr	r1, [pc, #104]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800603c:	4313      	orrs	r3, r2
 800603e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	3320      	adds	r3, #32
 8006046:	2102      	movs	r1, #2
 8006048:	4618      	mov	r0, r3
 800604a:	f000 f921 	bl	8006290 <RCCEx_PLLSAI2_Config>
 800604e:	4603      	mov	r3, r0
 8006050:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8006052:	7cfb      	ldrb	r3, [r7, #19]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d001      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8006058:	7cfb      	ldrb	r3, [r7, #19]
 800605a:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006064:	2b00      	cmp	r3, #0
 8006066:	d017      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006068:	4b0e      	ldr	r3, [pc, #56]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800606a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800606e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006078:	490a      	ldr	r1, [pc, #40]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800607a:	4313      	orrs	r3, r2
 800607c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006086:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800608a:	d105      	bne.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800608c:	4b05      	ldr	r3, [pc, #20]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	4a04      	ldr	r2, [pc, #16]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8006092:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006096:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006098:	7cbb      	ldrb	r3, [r7, #18]
}
 800609a:	4618      	mov	r0, r3
 800609c:	3718      	adds	r7, #24
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	40021000 	.word	0x40021000

080060a8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80060b2:	2300      	movs	r3, #0
 80060b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80060b6:	4b72      	ldr	r3, [pc, #456]	; (8006280 <RCCEx_PLLSAI1_Config+0x1d8>)
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	f003 0303 	and.w	r3, r3, #3
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d00e      	beq.n	80060e0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80060c2:	4b6f      	ldr	r3, [pc, #444]	; (8006280 <RCCEx_PLLSAI1_Config+0x1d8>)
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	f003 0203 	and.w	r2, r3, #3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d103      	bne.n	80060da <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
       ||
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d142      	bne.n	8006160 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	73fb      	strb	r3, [r7, #15]
 80060de:	e03f      	b.n	8006160 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2b03      	cmp	r3, #3
 80060e6:	d018      	beq.n	800611a <RCCEx_PLLSAI1_Config+0x72>
 80060e8:	2b03      	cmp	r3, #3
 80060ea:	d825      	bhi.n	8006138 <RCCEx_PLLSAI1_Config+0x90>
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d002      	beq.n	80060f6 <RCCEx_PLLSAI1_Config+0x4e>
 80060f0:	2b02      	cmp	r3, #2
 80060f2:	d009      	beq.n	8006108 <RCCEx_PLLSAI1_Config+0x60>
 80060f4:	e020      	b.n	8006138 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80060f6:	4b62      	ldr	r3, [pc, #392]	; (8006280 <RCCEx_PLLSAI1_Config+0x1d8>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 0302 	and.w	r3, r3, #2
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d11d      	bne.n	800613e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006106:	e01a      	b.n	800613e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006108:	4b5d      	ldr	r3, [pc, #372]	; (8006280 <RCCEx_PLLSAI1_Config+0x1d8>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006110:	2b00      	cmp	r3, #0
 8006112:	d116      	bne.n	8006142 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006118:	e013      	b.n	8006142 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800611a:	4b59      	ldr	r3, [pc, #356]	; (8006280 <RCCEx_PLLSAI1_Config+0x1d8>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d10f      	bne.n	8006146 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006126:	4b56      	ldr	r3, [pc, #344]	; (8006280 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800612e:	2b00      	cmp	r3, #0
 8006130:	d109      	bne.n	8006146 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006136:	e006      	b.n	8006146 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	73fb      	strb	r3, [r7, #15]
      break;
 800613c:	e004      	b.n	8006148 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800613e:	bf00      	nop
 8006140:	e002      	b.n	8006148 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006142:	bf00      	nop
 8006144:	e000      	b.n	8006148 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006146:	bf00      	nop
    }

    if(status == HAL_OK)
 8006148:	7bfb      	ldrb	r3, [r7, #15]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d108      	bne.n	8006160 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800614e:	4b4c      	ldr	r3, [pc, #304]	; (8006280 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	f023 0203 	bic.w	r2, r3, #3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4949      	ldr	r1, [pc, #292]	; (8006280 <RCCEx_PLLSAI1_Config+0x1d8>)
 800615c:	4313      	orrs	r3, r2
 800615e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006160:	7bfb      	ldrb	r3, [r7, #15]
 8006162:	2b00      	cmp	r3, #0
 8006164:	f040 8086 	bne.w	8006274 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006168:	4b45      	ldr	r3, [pc, #276]	; (8006280 <RCCEx_PLLSAI1_Config+0x1d8>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a44      	ldr	r2, [pc, #272]	; (8006280 <RCCEx_PLLSAI1_Config+0x1d8>)
 800616e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006172:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006174:	f7fd fdd2 	bl	8003d1c <HAL_GetTick>
 8006178:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800617a:	e009      	b.n	8006190 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800617c:	f7fd fdce 	bl	8003d1c <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	2b02      	cmp	r3, #2
 8006188:	d902      	bls.n	8006190 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	73fb      	strb	r3, [r7, #15]
        break;
 800618e:	e005      	b.n	800619c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006190:	4b3b      	ldr	r3, [pc, #236]	; (8006280 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006198:	2b00      	cmp	r3, #0
 800619a:	d1ef      	bne.n	800617c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800619c:	7bfb      	ldrb	r3, [r7, #15]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d168      	bne.n	8006274 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d113      	bne.n	80061d0 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80061a8:	4b35      	ldr	r3, [pc, #212]	; (8006280 <RCCEx_PLLSAI1_Config+0x1d8>)
 80061aa:	691a      	ldr	r2, [r3, #16]
 80061ac:	4b35      	ldr	r3, [pc, #212]	; (8006284 <RCCEx_PLLSAI1_Config+0x1dc>)
 80061ae:	4013      	ands	r3, r2
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	6892      	ldr	r2, [r2, #8]
 80061b4:	0211      	lsls	r1, r2, #8
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	68d2      	ldr	r2, [r2, #12]
 80061ba:	06d2      	lsls	r2, r2, #27
 80061bc:	4311      	orrs	r1, r2
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	6852      	ldr	r2, [r2, #4]
 80061c2:	3a01      	subs	r2, #1
 80061c4:	0112      	lsls	r2, r2, #4
 80061c6:	430a      	orrs	r2, r1
 80061c8:	492d      	ldr	r1, [pc, #180]	; (8006280 <RCCEx_PLLSAI1_Config+0x1d8>)
 80061ca:	4313      	orrs	r3, r2
 80061cc:	610b      	str	r3, [r1, #16]
 80061ce:	e02d      	b.n	800622c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d115      	bne.n	8006202 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80061d6:	4b2a      	ldr	r3, [pc, #168]	; (8006280 <RCCEx_PLLSAI1_Config+0x1d8>)
 80061d8:	691a      	ldr	r2, [r3, #16]
 80061da:	4b2b      	ldr	r3, [pc, #172]	; (8006288 <RCCEx_PLLSAI1_Config+0x1e0>)
 80061dc:	4013      	ands	r3, r2
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	6892      	ldr	r2, [r2, #8]
 80061e2:	0211      	lsls	r1, r2, #8
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	6912      	ldr	r2, [r2, #16]
 80061e8:	0852      	lsrs	r2, r2, #1
 80061ea:	3a01      	subs	r2, #1
 80061ec:	0552      	lsls	r2, r2, #21
 80061ee:	4311      	orrs	r1, r2
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	6852      	ldr	r2, [r2, #4]
 80061f4:	3a01      	subs	r2, #1
 80061f6:	0112      	lsls	r2, r2, #4
 80061f8:	430a      	orrs	r2, r1
 80061fa:	4921      	ldr	r1, [pc, #132]	; (8006280 <RCCEx_PLLSAI1_Config+0x1d8>)
 80061fc:	4313      	orrs	r3, r2
 80061fe:	610b      	str	r3, [r1, #16]
 8006200:	e014      	b.n	800622c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006202:	4b1f      	ldr	r3, [pc, #124]	; (8006280 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006204:	691a      	ldr	r2, [r3, #16]
 8006206:	4b21      	ldr	r3, [pc, #132]	; (800628c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006208:	4013      	ands	r3, r2
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	6892      	ldr	r2, [r2, #8]
 800620e:	0211      	lsls	r1, r2, #8
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	6952      	ldr	r2, [r2, #20]
 8006214:	0852      	lsrs	r2, r2, #1
 8006216:	3a01      	subs	r2, #1
 8006218:	0652      	lsls	r2, r2, #25
 800621a:	4311      	orrs	r1, r2
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	6852      	ldr	r2, [r2, #4]
 8006220:	3a01      	subs	r2, #1
 8006222:	0112      	lsls	r2, r2, #4
 8006224:	430a      	orrs	r2, r1
 8006226:	4916      	ldr	r1, [pc, #88]	; (8006280 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006228:	4313      	orrs	r3, r2
 800622a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800622c:	4b14      	ldr	r3, [pc, #80]	; (8006280 <RCCEx_PLLSAI1_Config+0x1d8>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a13      	ldr	r2, [pc, #76]	; (8006280 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006232:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006236:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006238:	f7fd fd70 	bl	8003d1c <HAL_GetTick>
 800623c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800623e:	e009      	b.n	8006254 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006240:	f7fd fd6c 	bl	8003d1c <HAL_GetTick>
 8006244:	4602      	mov	r2, r0
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	2b02      	cmp	r3, #2
 800624c:	d902      	bls.n	8006254 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	73fb      	strb	r3, [r7, #15]
          break;
 8006252:	e005      	b.n	8006260 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006254:	4b0a      	ldr	r3, [pc, #40]	; (8006280 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800625c:	2b00      	cmp	r3, #0
 800625e:	d0ef      	beq.n	8006240 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006260:	7bfb      	ldrb	r3, [r7, #15]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d106      	bne.n	8006274 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006266:	4b06      	ldr	r3, [pc, #24]	; (8006280 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006268:	691a      	ldr	r2, [r3, #16]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	699b      	ldr	r3, [r3, #24]
 800626e:	4904      	ldr	r1, [pc, #16]	; (8006280 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006270:	4313      	orrs	r3, r2
 8006272:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006274:	7bfb      	ldrb	r3, [r7, #15]
}
 8006276:	4618      	mov	r0, r3
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	40021000 	.word	0x40021000
 8006284:	07ff800f 	.word	0x07ff800f
 8006288:	ff9f800f 	.word	0xff9f800f
 800628c:	f9ff800f 	.word	0xf9ff800f

08006290 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800629a:	2300      	movs	r3, #0
 800629c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800629e:	4b72      	ldr	r3, [pc, #456]	; (8006468 <RCCEx_PLLSAI2_Config+0x1d8>)
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	f003 0303 	and.w	r3, r3, #3
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00e      	beq.n	80062c8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80062aa:	4b6f      	ldr	r3, [pc, #444]	; (8006468 <RCCEx_PLLSAI2_Config+0x1d8>)
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	f003 0203 	and.w	r2, r3, #3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d103      	bne.n	80062c2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
       ||
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d142      	bne.n	8006348 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	73fb      	strb	r3, [r7, #15]
 80062c6:	e03f      	b.n	8006348 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	2b03      	cmp	r3, #3
 80062ce:	d018      	beq.n	8006302 <RCCEx_PLLSAI2_Config+0x72>
 80062d0:	2b03      	cmp	r3, #3
 80062d2:	d825      	bhi.n	8006320 <RCCEx_PLLSAI2_Config+0x90>
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d002      	beq.n	80062de <RCCEx_PLLSAI2_Config+0x4e>
 80062d8:	2b02      	cmp	r3, #2
 80062da:	d009      	beq.n	80062f0 <RCCEx_PLLSAI2_Config+0x60>
 80062dc:	e020      	b.n	8006320 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80062de:	4b62      	ldr	r3, [pc, #392]	; (8006468 <RCCEx_PLLSAI2_Config+0x1d8>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 0302 	and.w	r3, r3, #2
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d11d      	bne.n	8006326 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062ee:	e01a      	b.n	8006326 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80062f0:	4b5d      	ldr	r3, [pc, #372]	; (8006468 <RCCEx_PLLSAI2_Config+0x1d8>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d116      	bne.n	800632a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006300:	e013      	b.n	800632a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006302:	4b59      	ldr	r3, [pc, #356]	; (8006468 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800630a:	2b00      	cmp	r3, #0
 800630c:	d10f      	bne.n	800632e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800630e:	4b56      	ldr	r3, [pc, #344]	; (8006468 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006316:	2b00      	cmp	r3, #0
 8006318:	d109      	bne.n	800632e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800631e:	e006      	b.n	800632e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	73fb      	strb	r3, [r7, #15]
      break;
 8006324:	e004      	b.n	8006330 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006326:	bf00      	nop
 8006328:	e002      	b.n	8006330 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800632a:	bf00      	nop
 800632c:	e000      	b.n	8006330 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800632e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006330:	7bfb      	ldrb	r3, [r7, #15]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d108      	bne.n	8006348 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006336:	4b4c      	ldr	r3, [pc, #304]	; (8006468 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	f023 0203 	bic.w	r2, r3, #3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4949      	ldr	r1, [pc, #292]	; (8006468 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006344:	4313      	orrs	r3, r2
 8006346:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006348:	7bfb      	ldrb	r3, [r7, #15]
 800634a:	2b00      	cmp	r3, #0
 800634c:	f040 8086 	bne.w	800645c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006350:	4b45      	ldr	r3, [pc, #276]	; (8006468 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a44      	ldr	r2, [pc, #272]	; (8006468 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006356:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800635a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800635c:	f7fd fcde 	bl	8003d1c <HAL_GetTick>
 8006360:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006362:	e009      	b.n	8006378 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006364:	f7fd fcda 	bl	8003d1c <HAL_GetTick>
 8006368:	4602      	mov	r2, r0
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	2b02      	cmp	r3, #2
 8006370:	d902      	bls.n	8006378 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006372:	2303      	movs	r3, #3
 8006374:	73fb      	strb	r3, [r7, #15]
        break;
 8006376:	e005      	b.n	8006384 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006378:	4b3b      	ldr	r3, [pc, #236]	; (8006468 <RCCEx_PLLSAI2_Config+0x1d8>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d1ef      	bne.n	8006364 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006384:	7bfb      	ldrb	r3, [r7, #15]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d168      	bne.n	800645c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d113      	bne.n	80063b8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006390:	4b35      	ldr	r3, [pc, #212]	; (8006468 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006392:	695a      	ldr	r2, [r3, #20]
 8006394:	4b35      	ldr	r3, [pc, #212]	; (800646c <RCCEx_PLLSAI2_Config+0x1dc>)
 8006396:	4013      	ands	r3, r2
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	6892      	ldr	r2, [r2, #8]
 800639c:	0211      	lsls	r1, r2, #8
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	68d2      	ldr	r2, [r2, #12]
 80063a2:	06d2      	lsls	r2, r2, #27
 80063a4:	4311      	orrs	r1, r2
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	6852      	ldr	r2, [r2, #4]
 80063aa:	3a01      	subs	r2, #1
 80063ac:	0112      	lsls	r2, r2, #4
 80063ae:	430a      	orrs	r2, r1
 80063b0:	492d      	ldr	r1, [pc, #180]	; (8006468 <RCCEx_PLLSAI2_Config+0x1d8>)
 80063b2:	4313      	orrs	r3, r2
 80063b4:	614b      	str	r3, [r1, #20]
 80063b6:	e02d      	b.n	8006414 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d115      	bne.n	80063ea <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80063be:	4b2a      	ldr	r3, [pc, #168]	; (8006468 <RCCEx_PLLSAI2_Config+0x1d8>)
 80063c0:	695a      	ldr	r2, [r3, #20]
 80063c2:	4b2b      	ldr	r3, [pc, #172]	; (8006470 <RCCEx_PLLSAI2_Config+0x1e0>)
 80063c4:	4013      	ands	r3, r2
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	6892      	ldr	r2, [r2, #8]
 80063ca:	0211      	lsls	r1, r2, #8
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	6912      	ldr	r2, [r2, #16]
 80063d0:	0852      	lsrs	r2, r2, #1
 80063d2:	3a01      	subs	r2, #1
 80063d4:	0552      	lsls	r2, r2, #21
 80063d6:	4311      	orrs	r1, r2
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	6852      	ldr	r2, [r2, #4]
 80063dc:	3a01      	subs	r2, #1
 80063de:	0112      	lsls	r2, r2, #4
 80063e0:	430a      	orrs	r2, r1
 80063e2:	4921      	ldr	r1, [pc, #132]	; (8006468 <RCCEx_PLLSAI2_Config+0x1d8>)
 80063e4:	4313      	orrs	r3, r2
 80063e6:	614b      	str	r3, [r1, #20]
 80063e8:	e014      	b.n	8006414 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80063ea:	4b1f      	ldr	r3, [pc, #124]	; (8006468 <RCCEx_PLLSAI2_Config+0x1d8>)
 80063ec:	695a      	ldr	r2, [r3, #20]
 80063ee:	4b21      	ldr	r3, [pc, #132]	; (8006474 <RCCEx_PLLSAI2_Config+0x1e4>)
 80063f0:	4013      	ands	r3, r2
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	6892      	ldr	r2, [r2, #8]
 80063f6:	0211      	lsls	r1, r2, #8
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	6952      	ldr	r2, [r2, #20]
 80063fc:	0852      	lsrs	r2, r2, #1
 80063fe:	3a01      	subs	r2, #1
 8006400:	0652      	lsls	r2, r2, #25
 8006402:	4311      	orrs	r1, r2
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	6852      	ldr	r2, [r2, #4]
 8006408:	3a01      	subs	r2, #1
 800640a:	0112      	lsls	r2, r2, #4
 800640c:	430a      	orrs	r2, r1
 800640e:	4916      	ldr	r1, [pc, #88]	; (8006468 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006410:	4313      	orrs	r3, r2
 8006412:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006414:	4b14      	ldr	r3, [pc, #80]	; (8006468 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a13      	ldr	r2, [pc, #76]	; (8006468 <RCCEx_PLLSAI2_Config+0x1d8>)
 800641a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800641e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006420:	f7fd fc7c 	bl	8003d1c <HAL_GetTick>
 8006424:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006426:	e009      	b.n	800643c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006428:	f7fd fc78 	bl	8003d1c <HAL_GetTick>
 800642c:	4602      	mov	r2, r0
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	2b02      	cmp	r3, #2
 8006434:	d902      	bls.n	800643c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006436:	2303      	movs	r3, #3
 8006438:	73fb      	strb	r3, [r7, #15]
          break;
 800643a:	e005      	b.n	8006448 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800643c:	4b0a      	ldr	r3, [pc, #40]	; (8006468 <RCCEx_PLLSAI2_Config+0x1d8>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d0ef      	beq.n	8006428 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006448:	7bfb      	ldrb	r3, [r7, #15]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d106      	bne.n	800645c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800644e:	4b06      	ldr	r3, [pc, #24]	; (8006468 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006450:	695a      	ldr	r2, [r3, #20]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	4904      	ldr	r1, [pc, #16]	; (8006468 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006458:	4313      	orrs	r3, r2
 800645a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800645c:	7bfb      	ldrb	r3, [r7, #15]
}
 800645e:	4618      	mov	r0, r3
 8006460:	3710      	adds	r7, #16
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	40021000 	.word	0x40021000
 800646c:	07ff800f 	.word	0x07ff800f
 8006470:	ff9f800f 	.word	0xff9f800f
 8006474:	f9ff800f 	.word	0xf9ff800f

08006478 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d101      	bne.n	800648a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e096      	b.n	80065b8 <HAL_RNG_Init+0x140>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	7a5b      	ldrb	r3, [r3, #9]
 800648e:	b2db      	uxtb	r3, r3
 8006490:	2b00      	cmp	r3, #0
 8006492:	d105      	bne.n	80064a0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f7fc fc5e 	bl	8002d5c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2202      	movs	r2, #2
 80064a4:	725a      	strb	r2, [r3, #9]

#if defined(RNG_CR_CONDRST)
  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f022 0204 	bic.w	r2, r2, #4
 80064b4:	601a      	str	r2, [r3, #0]

  /* RNG CR register configuration. Set value in CR register for CONFIG 1, CONFIG 2 and CONFIG 3 values */
  cr_value = (uint32_t) (RNG_CR_CONFIG_VAL);
 80064b6:	4b42      	ldr	r3, [pc, #264]	; (80065c0 <HAL_RNG_Init+0x148>)
 80064b8:	60fb      	str	r3, [r7, #12]

  /* Configuration of 
     - Clock Error Detection 
     - CONFIG1, CONFIG2, CONFIG3 fields
     when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST | RNG_CR_RNG_CONFIG1
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	4b40      	ldr	r3, [pc, #256]	; (80065c4 <HAL_RNG_Init+0x14c>)
 80064c2:	4013      	ands	r3, r2
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	6851      	ldr	r1, [r2, #4]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	430a      	orrs	r2, r1
 80064cc:	431a      	orrs	r2, r3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80064d6:	601a      	str	r2, [r3, #0]
                                 | RNG_CR_RNG_CONFIG2 | RNG_CR_RNG_CONFIG3,
                                 (uint32_t) (RNG_CR_CONDRST | hrng->Init.ClockErrorDetection | cr_value));

#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a3a      	ldr	r2, [pc, #232]	; (80065c8 <HAL_RNG_Init+0x150>)
 80064de:	611a      	str	r2, [r3, #16]
  /* for best latency and to be compliant with NIST */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f64a 2274 	movw	r2, #43636	; 0xaa74
 80064e8:	611a      	str	r2, [r3, #16]
#endif /* RNG_VER_3_2 || RNG_VER_3_1 || RNG_VER_3_0 */

  /* Writing bits CONDRST=0*/
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80064f8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80064fa:	f7fd fc0f 	bl	8003d1c <HAL_GetTick>
 80064fe:	60b8      	str	r0, [r7, #8]

  /* Wait for conditioning reset process to be completed */
  while(HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8006500:	e016      	b.n	8006530 <HAL_RNG_Init+0xb8>
  {
    if((HAL_GetTick() - tickstart ) > RNG_TIMEOUT_VALUE)
 8006502:	f7fd fc0b 	bl	8003d1c <HAL_GetTick>
 8006506:	4602      	mov	r2, r0
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	2b02      	cmp	r3, #2
 800650e:	d90f      	bls.n	8006530 <HAL_RNG_Init+0xb8>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800651a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800651e:	d107      	bne.n	8006530 <HAL_RNG_Init+0xb8>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2202      	movs	r2, #2
 800652a:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	e043      	b.n	80065b8 <HAL_RNG_Init+0x140>
  while(HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800653a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800653e:	d0e0      	beq.n	8006502 <HAL_RNG_Init+0x8a>
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f042 0204 	orr.w	r2, r2, #4
 800654e:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800655a:	2b40      	cmp	r3, #64	; 0x40
 800655c:	d104      	bne.n	8006568 <HAL_RNG_Init+0xf0>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2204      	movs	r2, #4
 8006562:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	e027      	b.n	80065b8 <HAL_RNG_Init+0x140>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8006568:	f7fd fbd8 	bl	8003d1c <HAL_GetTick>
 800656c:	60b8      	str	r0, [r7, #8]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800656e:	e015      	b.n	800659c <HAL_RNG_Init+0x124>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8006570:	f7fd fbd4 	bl	8003d1c <HAL_GetTick>
 8006574:	4602      	mov	r2, r0
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	2b02      	cmp	r3, #2
 800657c:	d90e      	bls.n	800659c <HAL_RNG_Init+0x124>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	f003 0304 	and.w	r3, r3, #4
 8006588:	2b04      	cmp	r3, #4
 800658a:	d107      	bne.n	800659c <HAL_RNG_Init+0x124>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2204      	movs	r2, #4
 8006590:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2202      	movs	r2, #2
 8006596:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	e00d      	b.n	80065b8 <HAL_RNG_Init+0x140>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	f003 0304 	and.w	r3, r3, #4
 80065a6:	2b04      	cmp	r3, #4
 80065a8:	d0e2      	beq.n	8006570 <HAL_RNG_Init+0xf8>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2201      	movs	r2, #1
 80065ae:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3710      	adds	r7, #16
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	00f00d00 	.word	0x00f00d00
 80065c4:	bc0f10df 	.word	0xbc0f10df
 80065c8:	17590abc 	.word	0x17590abc

080065cc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d07f      	beq.n	80066de <HAL_RTC_Init+0x112>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d106      	bne.n	80065f8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f7fc fc2e 	bl	8002e54 <HAL_RTC_MspInit>
    }
#endif /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80065fe:	605a      	str	r2, [r3, #4]
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2202      	movs	r2, #2
 8006604:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	22ca      	movs	r2, #202	; 0xca
 800660e:	625a      	str	r2, [r3, #36]	; 0x24
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2253      	movs	r2, #83	; 0x53
 8006616:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 f93d 	bl	8006898 <RTC_EnterInitMode>
 800661e:	4603      	mov	r3, r0
 8006620:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006622:	7bfb      	ldrb	r3, [r7, #15]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d15a      	bne.n	80066de <HAL_RTC_Init+0x112>
    {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	699b      	ldr	r3, [r3, #24]
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	6812      	ldr	r2, [r2, #0]
 8006632:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8006636:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800663a:	6193      	str	r3, [r2, #24]
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	6999      	ldr	r1, [r3, #24]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	689a      	ldr	r2, [r3, #8]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	695b      	ldr	r3, [r3, #20]
 800664a:	431a      	orrs	r2, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	69db      	ldr	r3, [r3, #28]
 8006650:	431a      	orrs	r2, r3
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	430a      	orrs	r2, r1
 8006658:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	6912      	ldr	r2, [r2, #16]
 8006662:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	6919      	ldr	r1, [r3, #16]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	041a      	lsls	r2, r3, #16
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	430a      	orrs	r2, r1
 8006676:	611a      	str	r2, [r3, #16]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8006678:	4b1b      	ldr	r3, [pc, #108]	; (80066e8 <HAL_RTC_Init+0x11c>)
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006688:	430b      	orrs	r3, r1
 800668a:	4917      	ldr	r1, [pc, #92]	; (80066e8 <HAL_RTC_Init+0x11c>)
 800668c:	4313      	orrs	r3, r2
 800668e:	60cb      	str	r3, [r1, #12]
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 f937 	bl	8006904 <RTC_ExitInitMode>
 8006696:	4603      	mov	r3, r0
 8006698:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800669a:	7bfb      	ldrb	r3, [r7, #15]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d11e      	bne.n	80066de <HAL_RTC_Init+0x112>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	699a      	ldr	r2, [r3, #24]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 80066ae:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	6999      	ldr	r1, [r3, #24]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a1b      	ldr	r3, [r3, #32]
 80066be:	431a      	orrs	r2, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	699b      	ldr	r3, [r3, #24]
 80066c4:	431a      	orrs	r2, r3
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	430a      	orrs	r2, r1
 80066cc:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	22ff      	movs	r2, #255	; 0xff
 80066d4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2201      	movs	r2, #1
 80066da:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      }
    }
  }

  return status;
 80066de:	7bfb      	ldrb	r3, [r7, #15]
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3710      	adds	r7, #16
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	40002800 	.word	0x40002800

080066ec <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b086      	sub	sp, #24
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 80066f8:	4b2c      	ldr	r3, [pc, #176]	; (80067ac <HAL_RTC_GetTime+0xc0>)
 80066fa:	689a      	ldr	r2, [r3, #8]
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8006700:	4b2a      	ldr	r3, [pc, #168]	; (80067ac <HAL_RTC_GetTime+0xc0>)
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006708:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800670c:	d049      	beq.n	80067a2 <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 800670e:	4b27      	ldr	r3, [pc, #156]	; (80067ac <HAL_RTC_GetTime+0xc0>)
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 800671a:	4b24      	ldr	r3, [pc, #144]	; (80067ac <HAL_RTC_GetTime+0xc0>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006722:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006726:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	0c1b      	lsrs	r3, r3, #16
 800672c:	b2db      	uxtb	r3, r3
 800672e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006732:	b2da      	uxtb	r2, r3
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	0a1b      	lsrs	r3, r3, #8
 800673c:	b2db      	uxtb	r3, r3
 800673e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006742:	b2da      	uxtb	r2, r3
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	b2db      	uxtb	r3, r3
 800674c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006750:	b2da      	uxtb	r2, r3
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	0d9b      	lsrs	r3, r3, #22
 800675a:	b2db      	uxtb	r3, r3
 800675c:	f003 0301 	and.w	r3, r3, #1
 8006760:	b2da      	uxtb	r2, r3
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d11a      	bne.n	80067a2 <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	4618      	mov	r0, r3
 8006772:	f000 f905 	bl	8006980 <RTC_Bcd2ToByte>
 8006776:	4603      	mov	r3, r0
 8006778:	461a      	mov	r2, r3
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	785b      	ldrb	r3, [r3, #1]
 8006782:	4618      	mov	r0, r3
 8006784:	f000 f8fc 	bl	8006980 <RTC_Bcd2ToByte>
 8006788:	4603      	mov	r3, r0
 800678a:	461a      	mov	r2, r3
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	789b      	ldrb	r3, [r3, #2]
 8006794:	4618      	mov	r0, r3
 8006796:	f000 f8f3 	bl	8006980 <RTC_Bcd2ToByte>
 800679a:	4603      	mov	r3, r0
 800679c:	461a      	mov	r2, r3
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3718      	adds	r7, #24
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	40002800 	.word	0x40002800

080067b0 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b086      	sub	sp, #24
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 80067bc:	4b22      	ldr	r3, [pc, #136]	; (8006848 <HAL_RTC_GetDate+0x98>)
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80067c4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80067c8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	0c1b      	lsrs	r3, r3, #16
 80067ce:	b2da      	uxtb	r2, r3
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	0a1b      	lsrs	r3, r3, #8
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	f003 031f 	and.w	r3, r3, #31
 80067de:	b2da      	uxtb	r2, r3
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067ec:	b2da      	uxtb	r2, r3
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	0b5b      	lsrs	r3, r3, #13
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	f003 0307 	and.w	r3, r3, #7
 80067fc:	b2da      	uxtb	r2, r3
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d11a      	bne.n	800683e <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	78db      	ldrb	r3, [r3, #3]
 800680c:	4618      	mov	r0, r3
 800680e:	f000 f8b7 	bl	8006980 <RTC_Bcd2ToByte>
 8006812:	4603      	mov	r3, r0
 8006814:	461a      	mov	r2, r3
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	785b      	ldrb	r3, [r3, #1]
 800681e:	4618      	mov	r0, r3
 8006820:	f000 f8ae 	bl	8006980 <RTC_Bcd2ToByte>
 8006824:	4603      	mov	r3, r0
 8006826:	461a      	mov	r2, r3
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	789b      	ldrb	r3, [r3, #2]
 8006830:	4618      	mov	r0, r3
 8006832:	f000 f8a5 	bl	8006980 <RTC_Bcd2ToByte>
 8006836:	4603      	mov	r3, r0
 8006838:	461a      	mov	r2, r3
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3718      	adds	r7, #24
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}
 8006848:	40002800 	.word	0x40002800

0800684c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68da      	ldr	r2, [r3, #12]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006862:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
#endif

  tickstart = HAL_GetTick();
 8006864:	f7fd fa5a 	bl	8003d1c <HAL_GetTick>
 8006868:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800686a:	e009      	b.n	8006880 <HAL_RTC_WaitForSynchro+0x34>
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800686c:	f7fd fa56 	bl	8003d1c <HAL_GetTick>
 8006870:	4602      	mov	r2, r0
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800687a:	d901      	bls.n	8006880 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800687c:	2303      	movs	r3, #3
 800687e:	e007      	b.n	8006890 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	f003 0320 	and.w	r3, r3, #32
 800688a:	2b00      	cmp	r3, #0
 800688c:	d0ee      	beq.n	800686c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800688e:	2300      	movs	r3, #0
}
 8006890:	4618      	mov	r0, r3
 8006892:	3710      	adds	r7, #16
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80068a0:	2300      	movs	r3, #0
 80068a2:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d123      	bne.n	80068fa <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68da      	ldr	r2, [r3, #12]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80068c0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80068c2:	f7fd fa2b 	bl	8003d1c <HAL_GetTick>
 80068c6:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80068c8:	e00d      	b.n	80068e6 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80068ca:	f7fd fa27 	bl	8003d1c <HAL_GetTick>
 80068ce:	4602      	mov	r2, r0
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	1ad3      	subs	r3, r2, r3
 80068d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068d8:	d905      	bls.n	80068e6 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 80068da:	2303      	movs	r3, #3
 80068dc:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2203      	movs	r2, #3
 80068e2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d102      	bne.n	80068fa <RTC_EnterInitMode+0x62>
 80068f4:	7bfb      	ldrb	r3, [r7, #15]
 80068f6:	2b03      	cmp	r3, #3
 80068f8:	d1e7      	bne.n	80068ca <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80068fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3710      	adds	r7, #16
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800690c:	2300      	movs	r3, #0
 800690e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006910:	4b1a      	ldr	r3, [pc, #104]	; (800697c <RTC_ExitInitMode+0x78>)
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	4a19      	ldr	r2, [pc, #100]	; (800697c <RTC_ExitInitMode+0x78>)
 8006916:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800691a:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800691c:	4b17      	ldr	r3, [pc, #92]	; (800697c <RTC_ExitInitMode+0x78>)
 800691e:	699b      	ldr	r3, [r3, #24]
 8006920:	f003 0320 	and.w	r3, r3, #32
 8006924:	2b00      	cmp	r3, #0
 8006926:	d10c      	bne.n	8006942 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f7ff ff8f 	bl	800684c <HAL_RTC_WaitForSynchro>
 800692e:	4603      	mov	r3, r0
 8006930:	2b00      	cmp	r3, #0
 8006932:	d01e      	beq.n	8006972 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2203      	movs	r2, #3
 8006938:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 800693c:	2303      	movs	r3, #3
 800693e:	73fb      	strb	r3, [r7, #15]
 8006940:	e017      	b.n	8006972 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006942:	4b0e      	ldr	r3, [pc, #56]	; (800697c <RTC_ExitInitMode+0x78>)
 8006944:	699b      	ldr	r3, [r3, #24]
 8006946:	4a0d      	ldr	r2, [pc, #52]	; (800697c <RTC_ExitInitMode+0x78>)
 8006948:	f023 0320 	bic.w	r3, r3, #32
 800694c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f7ff ff7c 	bl	800684c <HAL_RTC_WaitForSynchro>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d005      	beq.n	8006966 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2203      	movs	r2, #3
 800695e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006966:	4b05      	ldr	r3, [pc, #20]	; (800697c <RTC_ExitInitMode+0x78>)
 8006968:	699b      	ldr	r3, [r3, #24]
 800696a:	4a04      	ldr	r2, [pc, #16]	; (800697c <RTC_ExitInitMode+0x78>)
 800696c:	f043 0320 	orr.w	r3, r3, #32
 8006970:	6193      	str	r3, [r2, #24]
  }

  return status;
 8006972:	7bfb      	ldrb	r3, [r7, #15]
}
 8006974:	4618      	mov	r0, r3
 8006976:	3710      	adds	r7, #16
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}
 800697c:	40002800 	.word	0x40002800

08006980 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006980:	b480      	push	{r7}
 8006982:	b085      	sub	sp, #20
 8006984:	af00      	add	r7, sp, #0
 8006986:	4603      	mov	r3, r0
 8006988:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800698a:	79fb      	ldrb	r3, [r7, #7]
 800698c:	091b      	lsrs	r3, r3, #4
 800698e:	b2db      	uxtb	r3, r3
 8006990:	461a      	mov	r2, r3
 8006992:	0092      	lsls	r2, r2, #2
 8006994:	4413      	add	r3, r2
 8006996:	005b      	lsls	r3, r3, #1
 8006998:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800699a:	79fb      	ldrb	r3, [r7, #7]
 800699c:	f003 030f 	and.w	r3, r3, #15
 80069a0:	b2da      	uxtb	r2, r3
 80069a2:	7bfb      	ldrb	r3, [r7, #15]
 80069a4:	4413      	add	r3, r2
 80069a6:	b2db      	uxtb	r3, r3
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3714      	adds	r7, #20
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d101      	bne.n	80069c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e095      	b.n	8006af2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d108      	bne.n	80069e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069d6:	d009      	beq.n	80069ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	61da      	str	r2, [r3, #28]
 80069de:	e005      	b.n	80069ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d106      	bne.n	8006a0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f7fc faa0 	bl	8002f4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2202      	movs	r2, #2
 8006a10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a22:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a2c:	d902      	bls.n	8006a34 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	60fb      	str	r3, [r7, #12]
 8006a32:	e002      	b.n	8006a3a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006a34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a38:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006a42:	d007      	beq.n	8006a54 <HAL_SPI_Init+0xa0>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a4c:	d002      	beq.n	8006a54 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006a64:	431a      	orrs	r2, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	f003 0302 	and.w	r3, r3, #2
 8006a6e:	431a      	orrs	r2, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	695b      	ldr	r3, [r3, #20]
 8006a74:	f003 0301 	and.w	r3, r3, #1
 8006a78:	431a      	orrs	r2, r3
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	699b      	ldr	r3, [r3, #24]
 8006a7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a82:	431a      	orrs	r2, r3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	69db      	ldr	r3, [r3, #28]
 8006a88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a8c:	431a      	orrs	r2, r3
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a1b      	ldr	r3, [r3, #32]
 8006a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a96:	ea42 0103 	orr.w	r1, r2, r3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a9e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	430a      	orrs	r2, r1
 8006aa8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	699b      	ldr	r3, [r3, #24]
 8006aae:	0c1b      	lsrs	r3, r3, #16
 8006ab0:	f003 0204 	and.w	r2, r3, #4
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab8:	f003 0310 	and.w	r3, r3, #16
 8006abc:	431a      	orrs	r2, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ac2:	f003 0308 	and.w	r3, r3, #8
 8006ac6:	431a      	orrs	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006ad0:	ea42 0103 	orr.w	r1, r2, r3
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	430a      	orrs	r2, r1
 8006ae0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b088      	sub	sp, #32
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	60f8      	str	r0, [r7, #12]
 8006b02:	60b9      	str	r1, [r7, #8]
 8006b04:	603b      	str	r3, [r7, #0]
 8006b06:	4613      	mov	r3, r2
 8006b08:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d101      	bne.n	8006b1c <HAL_SPI_Transmit+0x22>
 8006b18:	2302      	movs	r3, #2
 8006b1a:	e158      	b.n	8006dce <HAL_SPI_Transmit+0x2d4>
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b24:	f7fd f8fa 	bl	8003d1c <HAL_GetTick>
 8006b28:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006b2a:	88fb      	ldrh	r3, [r7, #6]
 8006b2c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d002      	beq.n	8006b40 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006b3a:	2302      	movs	r3, #2
 8006b3c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006b3e:	e13d      	b.n	8006dbc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d002      	beq.n	8006b4c <HAL_SPI_Transmit+0x52>
 8006b46:	88fb      	ldrh	r3, [r7, #6]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d102      	bne.n	8006b52 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006b50:	e134      	b.n	8006dbc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2203      	movs	r2, #3
 8006b56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	68ba      	ldr	r2, [r7, #8]
 8006b64:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	88fa      	ldrh	r2, [r7, #6]
 8006b6a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	88fa      	ldrh	r2, [r7, #6]
 8006b70:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2200      	movs	r2, #0
 8006b76:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2200      	movs	r2, #0
 8006b92:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b9c:	d10f      	bne.n	8006bbe <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006bbc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bc8:	2b40      	cmp	r3, #64	; 0x40
 8006bca:	d007      	beq.n	8006bdc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bda:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006be4:	d94b      	bls.n	8006c7e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d002      	beq.n	8006bf4 <HAL_SPI_Transmit+0xfa>
 8006bee:	8afb      	ldrh	r3, [r7, #22]
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d13e      	bne.n	8006c72 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf8:	881a      	ldrh	r2, [r3, #0]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c04:	1c9a      	adds	r2, r3, #2
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	3b01      	subs	r3, #1
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006c18:	e02b      	b.n	8006c72 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	f003 0302 	and.w	r3, r3, #2
 8006c24:	2b02      	cmp	r3, #2
 8006c26:	d112      	bne.n	8006c4e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c2c:	881a      	ldrh	r2, [r3, #0]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c38:	1c9a      	adds	r2, r3, #2
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	3b01      	subs	r3, #1
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c4c:	e011      	b.n	8006c72 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c4e:	f7fd f865 	bl	8003d1c <HAL_GetTick>
 8006c52:	4602      	mov	r2, r0
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	1ad3      	subs	r3, r2, r3
 8006c58:	683a      	ldr	r2, [r7, #0]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d803      	bhi.n	8006c66 <HAL_SPI_Transmit+0x16c>
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c64:	d102      	bne.n	8006c6c <HAL_SPI_Transmit+0x172>
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d102      	bne.n	8006c72 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006c70:	e0a4      	b.n	8006dbc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d1ce      	bne.n	8006c1a <HAL_SPI_Transmit+0x120>
 8006c7c:	e07c      	b.n	8006d78 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d002      	beq.n	8006c8c <HAL_SPI_Transmit+0x192>
 8006c86:	8afb      	ldrh	r3, [r7, #22]
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d170      	bne.n	8006d6e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d912      	bls.n	8006cbc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c9a:	881a      	ldrh	r2, [r3, #0]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca6:	1c9a      	adds	r2, r3, #2
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	3b02      	subs	r3, #2
 8006cb4:	b29a      	uxth	r2, r3
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006cba:	e058      	b.n	8006d6e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	330c      	adds	r3, #12
 8006cc6:	7812      	ldrb	r2, [r2, #0]
 8006cc8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cce:	1c5a      	adds	r2, r3, #1
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	b29a      	uxth	r2, r3
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006ce2:	e044      	b.n	8006d6e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	f003 0302 	and.w	r3, r3, #2
 8006cee:	2b02      	cmp	r3, #2
 8006cf0:	d12b      	bne.n	8006d4a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d912      	bls.n	8006d22 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d00:	881a      	ldrh	r2, [r3, #0]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d0c:	1c9a      	adds	r2, r3, #2
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	3b02      	subs	r3, #2
 8006d1a:	b29a      	uxth	r2, r3
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006d20:	e025      	b.n	8006d6e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	330c      	adds	r3, #12
 8006d2c:	7812      	ldrb	r2, [r2, #0]
 8006d2e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d34:	1c5a      	adds	r2, r3, #1
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	3b01      	subs	r3, #1
 8006d42:	b29a      	uxth	r2, r3
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006d48:	e011      	b.n	8006d6e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d4a:	f7fc ffe7 	bl	8003d1c <HAL_GetTick>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	1ad3      	subs	r3, r2, r3
 8006d54:	683a      	ldr	r2, [r7, #0]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d803      	bhi.n	8006d62 <HAL_SPI_Transmit+0x268>
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d60:	d102      	bne.n	8006d68 <HAL_SPI_Transmit+0x26e>
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d102      	bne.n	8006d6e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006d68:	2303      	movs	r3, #3
 8006d6a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006d6c:	e026      	b.n	8006dbc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d1b5      	bne.n	8006ce4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d78:	69ba      	ldr	r2, [r7, #24]
 8006d7a:	6839      	ldr	r1, [r7, #0]
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f000 fce3 	bl	8007748 <SPI_EndRxTxTransaction>
 8006d82:	4603      	mov	r3, r0
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d002      	beq.n	8006d8e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2220      	movs	r2, #32
 8006d8c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d10a      	bne.n	8006dac <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d96:	2300      	movs	r3, #0
 8006d98:	613b      	str	r3, [r7, #16]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	613b      	str	r3, [r7, #16]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	613b      	str	r3, [r7, #16]
 8006daa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d002      	beq.n	8006dba <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	77fb      	strb	r3, [r7, #31]
 8006db8:	e000      	b.n	8006dbc <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006dba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006dcc:	7ffb      	ldrb	r3, [r7, #31]
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3720      	adds	r7, #32
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}

08006dd6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b088      	sub	sp, #32
 8006dda:	af02      	add	r7, sp, #8
 8006ddc:	60f8      	str	r0, [r7, #12]
 8006dde:	60b9      	str	r1, [r7, #8]
 8006de0:	603b      	str	r3, [r7, #0]
 8006de2:	4613      	mov	r3, r2
 8006de4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006de6:	2300      	movs	r3, #0
 8006de8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006df2:	d112      	bne.n	8006e1a <HAL_SPI_Receive+0x44>
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d10e      	bne.n	8006e1a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2204      	movs	r2, #4
 8006e00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006e04:	88fa      	ldrh	r2, [r7, #6]
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	9300      	str	r3, [sp, #0]
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	68ba      	ldr	r2, [r7, #8]
 8006e0e:	68b9      	ldr	r1, [r7, #8]
 8006e10:	68f8      	ldr	r0, [r7, #12]
 8006e12:	f000 f910 	bl	8007036 <HAL_SPI_TransmitReceive>
 8006e16:	4603      	mov	r3, r0
 8006e18:	e109      	b.n	800702e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d101      	bne.n	8006e28 <HAL_SPI_Receive+0x52>
 8006e24:	2302      	movs	r3, #2
 8006e26:	e102      	b.n	800702e <HAL_SPI_Receive+0x258>
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e30:	f7fc ff74 	bl	8003d1c <HAL_GetTick>
 8006e34:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d002      	beq.n	8006e48 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006e42:	2302      	movs	r3, #2
 8006e44:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006e46:	e0e9      	b.n	800701c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d002      	beq.n	8006e54 <HAL_SPI_Receive+0x7e>
 8006e4e:	88fb      	ldrh	r3, [r7, #6]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d102      	bne.n	8006e5a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006e58:	e0e0      	b.n	800701c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2204      	movs	r2, #4
 8006e5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2200      	movs	r2, #0
 8006e66:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	68ba      	ldr	r2, [r7, #8]
 8006e6c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	88fa      	ldrh	r2, [r7, #6]
 8006e72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	88fa      	ldrh	r2, [r7, #6]
 8006e7a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2200      	movs	r2, #0
 8006e82:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2200      	movs	r2, #0
 8006e88:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2200      	movs	r2, #0
 8006e94:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ea4:	d908      	bls.n	8006eb8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	685a      	ldr	r2, [r3, #4]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006eb4:	605a      	str	r2, [r3, #4]
 8006eb6:	e007      	b.n	8006ec8 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	685a      	ldr	r2, [r3, #4]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ec6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ed0:	d10f      	bne.n	8006ef2 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ee0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006ef0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006efc:	2b40      	cmp	r3, #64	; 0x40
 8006efe:	d007      	beq.n	8006f10 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f0e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f18:	d867      	bhi.n	8006fea <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006f1a:	e030      	b.n	8006f7e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	f003 0301 	and.w	r3, r3, #1
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d117      	bne.n	8006f5a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f103 020c 	add.w	r2, r3, #12
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f36:	7812      	ldrb	r2, [r2, #0]
 8006f38:	b2d2      	uxtb	r2, r2
 8006f3a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f40:	1c5a      	adds	r2, r3, #1
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	b29a      	uxth	r2, r3
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006f58:	e011      	b.n	8006f7e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f5a:	f7fc fedf 	bl	8003d1c <HAL_GetTick>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	1ad3      	subs	r3, r2, r3
 8006f64:	683a      	ldr	r2, [r7, #0]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d803      	bhi.n	8006f72 <HAL_SPI_Receive+0x19c>
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f70:	d102      	bne.n	8006f78 <HAL_SPI_Receive+0x1a2>
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d102      	bne.n	8006f7e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006f7c:	e04e      	b.n	800701c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d1c8      	bne.n	8006f1c <HAL_SPI_Receive+0x146>
 8006f8a:	e034      	b.n	8006ff6 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	f003 0301 	and.w	r3, r3, #1
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d115      	bne.n	8006fc6 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	68da      	ldr	r2, [r3, #12]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa4:	b292      	uxth	r2, r2
 8006fa6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fac:	1c9a      	adds	r2, r3, #2
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	3b01      	subs	r3, #1
 8006fbc:	b29a      	uxth	r2, r3
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006fc4:	e011      	b.n	8006fea <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fc6:	f7fc fea9 	bl	8003d1c <HAL_GetTick>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	1ad3      	subs	r3, r2, r3
 8006fd0:	683a      	ldr	r2, [r7, #0]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d803      	bhi.n	8006fde <HAL_SPI_Receive+0x208>
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fdc:	d102      	bne.n	8006fe4 <HAL_SPI_Receive+0x20e>
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d102      	bne.n	8006fea <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8006fe4:	2303      	movs	r3, #3
 8006fe6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006fe8:	e018      	b.n	800701c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d1ca      	bne.n	8006f8c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ff6:	693a      	ldr	r2, [r7, #16]
 8006ff8:	6839      	ldr	r1, [r7, #0]
 8006ffa:	68f8      	ldr	r0, [r7, #12]
 8006ffc:	f000 fb4c 	bl	8007698 <SPI_EndRxTransaction>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d002      	beq.n	800700c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2220      	movs	r2, #32
 800700a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007010:	2b00      	cmp	r3, #0
 8007012:	d002      	beq.n	800701a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	75fb      	strb	r3, [r7, #23]
 8007018:	e000      	b.n	800701c <HAL_SPI_Receive+0x246>
  }

error :
 800701a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2201      	movs	r2, #1
 8007020:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2200      	movs	r2, #0
 8007028:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800702c:	7dfb      	ldrb	r3, [r7, #23]
}
 800702e:	4618      	mov	r0, r3
 8007030:	3718      	adds	r7, #24
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}

08007036 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007036:	b580      	push	{r7, lr}
 8007038:	b08a      	sub	sp, #40	; 0x28
 800703a:	af00      	add	r7, sp, #0
 800703c:	60f8      	str	r0, [r7, #12]
 800703e:	60b9      	str	r1, [r7, #8]
 8007040:	607a      	str	r2, [r7, #4]
 8007042:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007044:	2301      	movs	r3, #1
 8007046:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007048:	2300      	movs	r3, #0
 800704a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007054:	2b01      	cmp	r3, #1
 8007056:	d101      	bne.n	800705c <HAL_SPI_TransmitReceive+0x26>
 8007058:	2302      	movs	r3, #2
 800705a:	e1fb      	b.n	8007454 <HAL_SPI_TransmitReceive+0x41e>
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007064:	f7fc fe5a 	bl	8003d1c <HAL_GetTick>
 8007068:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007070:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007078:	887b      	ldrh	r3, [r7, #2]
 800707a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800707c:	887b      	ldrh	r3, [r7, #2]
 800707e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007080:	7efb      	ldrb	r3, [r7, #27]
 8007082:	2b01      	cmp	r3, #1
 8007084:	d00e      	beq.n	80070a4 <HAL_SPI_TransmitReceive+0x6e>
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800708c:	d106      	bne.n	800709c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d102      	bne.n	800709c <HAL_SPI_TransmitReceive+0x66>
 8007096:	7efb      	ldrb	r3, [r7, #27]
 8007098:	2b04      	cmp	r3, #4
 800709a:	d003      	beq.n	80070a4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800709c:	2302      	movs	r3, #2
 800709e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80070a2:	e1cd      	b.n	8007440 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d005      	beq.n	80070b6 <HAL_SPI_TransmitReceive+0x80>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d002      	beq.n	80070b6 <HAL_SPI_TransmitReceive+0x80>
 80070b0:	887b      	ldrh	r3, [r7, #2]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d103      	bne.n	80070be <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80070bc:	e1c0      	b.n	8007440 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	2b04      	cmp	r3, #4
 80070c8:	d003      	beq.n	80070d2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2205      	movs	r2, #5
 80070ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2200      	movs	r2, #0
 80070d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	887a      	ldrh	r2, [r7, #2]
 80070e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	887a      	ldrh	r2, [r7, #2]
 80070ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	68ba      	ldr	r2, [r7, #8]
 80070f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	887a      	ldrh	r2, [r7, #2]
 80070f8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	887a      	ldrh	r2, [r7, #2]
 80070fe:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2200      	movs	r2, #0
 8007104:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007114:	d802      	bhi.n	800711c <HAL_SPI_TransmitReceive+0xe6>
 8007116:	8a3b      	ldrh	r3, [r7, #16]
 8007118:	2b01      	cmp	r3, #1
 800711a:	d908      	bls.n	800712e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	685a      	ldr	r2, [r3, #4]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800712a:	605a      	str	r2, [r3, #4]
 800712c:	e007      	b.n	800713e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	685a      	ldr	r2, [r3, #4]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800713c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007148:	2b40      	cmp	r3, #64	; 0x40
 800714a:	d007      	beq.n	800715c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800715a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007164:	d97c      	bls.n	8007260 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d002      	beq.n	8007174 <HAL_SPI_TransmitReceive+0x13e>
 800716e:	8a7b      	ldrh	r3, [r7, #18]
 8007170:	2b01      	cmp	r3, #1
 8007172:	d169      	bne.n	8007248 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007178:	881a      	ldrh	r2, [r3, #0]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007184:	1c9a      	adds	r2, r3, #2
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800718e:	b29b      	uxth	r3, r3
 8007190:	3b01      	subs	r3, #1
 8007192:	b29a      	uxth	r2, r3
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007198:	e056      	b.n	8007248 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	f003 0302 	and.w	r3, r3, #2
 80071a4:	2b02      	cmp	r3, #2
 80071a6:	d11b      	bne.n	80071e0 <HAL_SPI_TransmitReceive+0x1aa>
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d016      	beq.n	80071e0 <HAL_SPI_TransmitReceive+0x1aa>
 80071b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d113      	bne.n	80071e0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071bc:	881a      	ldrh	r2, [r3, #0]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c8:	1c9a      	adds	r2, r3, #2
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	3b01      	subs	r3, #1
 80071d6:	b29a      	uxth	r2, r3
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80071dc:	2300      	movs	r3, #0
 80071de:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	f003 0301 	and.w	r3, r3, #1
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d11c      	bne.n	8007228 <HAL_SPI_TransmitReceive+0x1f2>
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d016      	beq.n	8007228 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	68da      	ldr	r2, [r3, #12]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007204:	b292      	uxth	r2, r2
 8007206:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800720c:	1c9a      	adds	r2, r3, #2
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007218:	b29b      	uxth	r3, r3
 800721a:	3b01      	subs	r3, #1
 800721c:	b29a      	uxth	r2, r3
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007224:	2301      	movs	r3, #1
 8007226:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007228:	f7fc fd78 	bl	8003d1c <HAL_GetTick>
 800722c:	4602      	mov	r2, r0
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	1ad3      	subs	r3, r2, r3
 8007232:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007234:	429a      	cmp	r2, r3
 8007236:	d807      	bhi.n	8007248 <HAL_SPI_TransmitReceive+0x212>
 8007238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800723e:	d003      	beq.n	8007248 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8007240:	2303      	movs	r3, #3
 8007242:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007246:	e0fb      	b.n	8007440 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800724c:	b29b      	uxth	r3, r3
 800724e:	2b00      	cmp	r3, #0
 8007250:	d1a3      	bne.n	800719a <HAL_SPI_TransmitReceive+0x164>
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007258:	b29b      	uxth	r3, r3
 800725a:	2b00      	cmp	r3, #0
 800725c:	d19d      	bne.n	800719a <HAL_SPI_TransmitReceive+0x164>
 800725e:	e0df      	b.n	8007420 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d003      	beq.n	8007270 <HAL_SPI_TransmitReceive+0x23a>
 8007268:	8a7b      	ldrh	r3, [r7, #18]
 800726a:	2b01      	cmp	r3, #1
 800726c:	f040 80cb 	bne.w	8007406 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007274:	b29b      	uxth	r3, r3
 8007276:	2b01      	cmp	r3, #1
 8007278:	d912      	bls.n	80072a0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800727e:	881a      	ldrh	r2, [r3, #0]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800728a:	1c9a      	adds	r2, r3, #2
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007294:	b29b      	uxth	r3, r3
 8007296:	3b02      	subs	r3, #2
 8007298:	b29a      	uxth	r2, r3
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800729e:	e0b2      	b.n	8007406 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	330c      	adds	r3, #12
 80072aa:	7812      	ldrb	r2, [r2, #0]
 80072ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b2:	1c5a      	adds	r2, r3, #1
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072bc:	b29b      	uxth	r3, r3
 80072be:	3b01      	subs	r3, #1
 80072c0:	b29a      	uxth	r2, r3
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072c6:	e09e      	b.n	8007406 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	f003 0302 	and.w	r3, r3, #2
 80072d2:	2b02      	cmp	r3, #2
 80072d4:	d134      	bne.n	8007340 <HAL_SPI_TransmitReceive+0x30a>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072da:	b29b      	uxth	r3, r3
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d02f      	beq.n	8007340 <HAL_SPI_TransmitReceive+0x30a>
 80072e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d12c      	bne.n	8007340 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d912      	bls.n	8007316 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f4:	881a      	ldrh	r2, [r3, #0]
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007300:	1c9a      	adds	r2, r3, #2
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800730a:	b29b      	uxth	r3, r3
 800730c:	3b02      	subs	r3, #2
 800730e:	b29a      	uxth	r2, r3
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007314:	e012      	b.n	800733c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	330c      	adds	r3, #12
 8007320:	7812      	ldrb	r2, [r2, #0]
 8007322:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007328:	1c5a      	adds	r2, r3, #1
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007332:	b29b      	uxth	r3, r3
 8007334:	3b01      	subs	r3, #1
 8007336:	b29a      	uxth	r2, r3
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800733c:	2300      	movs	r3, #0
 800733e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	f003 0301 	and.w	r3, r3, #1
 800734a:	2b01      	cmp	r3, #1
 800734c:	d148      	bne.n	80073e0 <HAL_SPI_TransmitReceive+0x3aa>
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007354:	b29b      	uxth	r3, r3
 8007356:	2b00      	cmp	r3, #0
 8007358:	d042      	beq.n	80073e0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007360:	b29b      	uxth	r3, r3
 8007362:	2b01      	cmp	r3, #1
 8007364:	d923      	bls.n	80073ae <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	68da      	ldr	r2, [r3, #12]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007370:	b292      	uxth	r2, r2
 8007372:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007378:	1c9a      	adds	r2, r3, #2
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007384:	b29b      	uxth	r3, r3
 8007386:	3b02      	subs	r3, #2
 8007388:	b29a      	uxth	r2, r3
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007396:	b29b      	uxth	r3, r3
 8007398:	2b01      	cmp	r3, #1
 800739a:	d81f      	bhi.n	80073dc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	685a      	ldr	r2, [r3, #4]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80073aa:	605a      	str	r2, [r3, #4]
 80073ac:	e016      	b.n	80073dc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f103 020c 	add.w	r2, r3, #12
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ba:	7812      	ldrb	r2, [r2, #0]
 80073bc:	b2d2      	uxtb	r2, r2
 80073be:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c4:	1c5a      	adds	r2, r3, #1
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	3b01      	subs	r3, #1
 80073d4:	b29a      	uxth	r2, r3
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80073dc:	2301      	movs	r3, #1
 80073de:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80073e0:	f7fc fc9c 	bl	8003d1c <HAL_GetTick>
 80073e4:	4602      	mov	r2, r0
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	1ad3      	subs	r3, r2, r3
 80073ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d803      	bhi.n	80073f8 <HAL_SPI_TransmitReceive+0x3c2>
 80073f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073f6:	d102      	bne.n	80073fe <HAL_SPI_TransmitReceive+0x3c8>
 80073f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d103      	bne.n	8007406 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80073fe:	2303      	movs	r3, #3
 8007400:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007404:	e01c      	b.n	8007440 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800740a:	b29b      	uxth	r3, r3
 800740c:	2b00      	cmp	r3, #0
 800740e:	f47f af5b 	bne.w	80072c8 <HAL_SPI_TransmitReceive+0x292>
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007418:	b29b      	uxth	r3, r3
 800741a:	2b00      	cmp	r3, #0
 800741c:	f47f af54 	bne.w	80072c8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007420:	69fa      	ldr	r2, [r7, #28]
 8007422:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007424:	68f8      	ldr	r0, [r7, #12]
 8007426:	f000 f98f 	bl	8007748 <SPI_EndRxTxTransaction>
 800742a:	4603      	mov	r3, r0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d006      	beq.n	800743e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8007430:	2301      	movs	r3, #1
 8007432:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2220      	movs	r2, #32
 800743a:	661a      	str	r2, [r3, #96]	; 0x60
 800743c:	e000      	b.n	8007440 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800743e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2200      	movs	r2, #0
 800744c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007450:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007454:	4618      	mov	r0, r3
 8007456:	3728      	adds	r7, #40	; 0x28
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b088      	sub	sp, #32
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	603b      	str	r3, [r7, #0]
 8007468:	4613      	mov	r3, r2
 800746a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800746c:	f7fc fc56 	bl	8003d1c <HAL_GetTick>
 8007470:	4602      	mov	r2, r0
 8007472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007474:	1a9b      	subs	r3, r3, r2
 8007476:	683a      	ldr	r2, [r7, #0]
 8007478:	4413      	add	r3, r2
 800747a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800747c:	f7fc fc4e 	bl	8003d1c <HAL_GetTick>
 8007480:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007482:	4b39      	ldr	r3, [pc, #228]	; (8007568 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	015b      	lsls	r3, r3, #5
 8007488:	0d1b      	lsrs	r3, r3, #20
 800748a:	69fa      	ldr	r2, [r7, #28]
 800748c:	fb02 f303 	mul.w	r3, r2, r3
 8007490:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007492:	e054      	b.n	800753e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800749a:	d050      	beq.n	800753e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800749c:	f7fc fc3e 	bl	8003d1c <HAL_GetTick>
 80074a0:	4602      	mov	r2, r0
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	1ad3      	subs	r3, r2, r3
 80074a6:	69fa      	ldr	r2, [r7, #28]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d902      	bls.n	80074b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d13d      	bne.n	800752e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	685a      	ldr	r2, [r3, #4]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80074c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074ca:	d111      	bne.n	80074f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074d4:	d004      	beq.n	80074e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074de:	d107      	bne.n	80074f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074f8:	d10f      	bne.n	800751a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007508:	601a      	str	r2, [r3, #0]
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007518:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2201      	movs	r2, #1
 800751e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2200      	movs	r2, #0
 8007526:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800752a:	2303      	movs	r3, #3
 800752c:	e017      	b.n	800755e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d101      	bne.n	8007538 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007534:	2300      	movs	r3, #0
 8007536:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	3b01      	subs	r3, #1
 800753c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	689a      	ldr	r2, [r3, #8]
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	4013      	ands	r3, r2
 8007548:	68ba      	ldr	r2, [r7, #8]
 800754a:	429a      	cmp	r2, r3
 800754c:	bf0c      	ite	eq
 800754e:	2301      	moveq	r3, #1
 8007550:	2300      	movne	r3, #0
 8007552:	b2db      	uxtb	r3, r3
 8007554:	461a      	mov	r2, r3
 8007556:	79fb      	ldrb	r3, [r7, #7]
 8007558:	429a      	cmp	r2, r3
 800755a:	d19b      	bne.n	8007494 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800755c:	2300      	movs	r3, #0
}
 800755e:	4618      	mov	r0, r3
 8007560:	3720      	adds	r7, #32
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	20000074 	.word	0x20000074

0800756c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b08a      	sub	sp, #40	; 0x28
 8007570:	af00      	add	r7, sp, #0
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	607a      	str	r2, [r7, #4]
 8007578:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800757a:	2300      	movs	r3, #0
 800757c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800757e:	f7fc fbcd 	bl	8003d1c <HAL_GetTick>
 8007582:	4602      	mov	r2, r0
 8007584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007586:	1a9b      	subs	r3, r3, r2
 8007588:	683a      	ldr	r2, [r7, #0]
 800758a:	4413      	add	r3, r2
 800758c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800758e:	f7fc fbc5 	bl	8003d1c <HAL_GetTick>
 8007592:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	330c      	adds	r3, #12
 800759a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800759c:	4b3d      	ldr	r3, [pc, #244]	; (8007694 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	4613      	mov	r3, r2
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	4413      	add	r3, r2
 80075a6:	00da      	lsls	r2, r3, #3
 80075a8:	1ad3      	subs	r3, r2, r3
 80075aa:	0d1b      	lsrs	r3, r3, #20
 80075ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075ae:	fb02 f303 	mul.w	r3, r2, r3
 80075b2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80075b4:	e060      	b.n	8007678 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80075bc:	d107      	bne.n	80075ce <SPI_WaitFifoStateUntilTimeout+0x62>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d104      	bne.n	80075ce <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80075c4:	69fb      	ldr	r3, [r7, #28]
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80075cc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075d4:	d050      	beq.n	8007678 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80075d6:	f7fc fba1 	bl	8003d1c <HAL_GetTick>
 80075da:	4602      	mov	r2, r0
 80075dc:	6a3b      	ldr	r3, [r7, #32]
 80075de:	1ad3      	subs	r3, r2, r3
 80075e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d902      	bls.n	80075ec <SPI_WaitFifoStateUntilTimeout+0x80>
 80075e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d13d      	bne.n	8007668 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	685a      	ldr	r2, [r3, #4]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80075fa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007604:	d111      	bne.n	800762a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800760e:	d004      	beq.n	800761a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007618:	d107      	bne.n	800762a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007628:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800762e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007632:	d10f      	bne.n	8007654 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007642:	601a      	str	r2, [r3, #0]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007652:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2201      	movs	r2, #1
 8007658:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2200      	movs	r2, #0
 8007660:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007664:	2303      	movs	r3, #3
 8007666:	e010      	b.n	800768a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d101      	bne.n	8007672 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800766e:	2300      	movs	r3, #0
 8007670:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007672:	69bb      	ldr	r3, [r7, #24]
 8007674:	3b01      	subs	r3, #1
 8007676:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	689a      	ldr	r2, [r3, #8]
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	4013      	ands	r3, r2
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	429a      	cmp	r2, r3
 8007686:	d196      	bne.n	80075b6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	3728      	adds	r7, #40	; 0x28
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	20000074 	.word	0x20000074

08007698 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b086      	sub	sp, #24
 800769c:	af02      	add	r7, sp, #8
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	60b9      	str	r1, [r7, #8]
 80076a2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076ac:	d111      	bne.n	80076d2 <SPI_EndRxTransaction+0x3a>
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076b6:	d004      	beq.n	80076c2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076c0:	d107      	bne.n	80076d2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076d0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	9300      	str	r3, [sp, #0]
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	2200      	movs	r2, #0
 80076da:	2180      	movs	r1, #128	; 0x80
 80076dc:	68f8      	ldr	r0, [r7, #12]
 80076de:	f7ff febd 	bl	800745c <SPI_WaitFlagStateUntilTimeout>
 80076e2:	4603      	mov	r3, r0
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d007      	beq.n	80076f8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076ec:	f043 0220 	orr.w	r2, r3, #32
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80076f4:	2303      	movs	r3, #3
 80076f6:	e023      	b.n	8007740 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007700:	d11d      	bne.n	800773e <SPI_EndRxTransaction+0xa6>
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800770a:	d004      	beq.n	8007716 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007714:	d113      	bne.n	800773e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	9300      	str	r3, [sp, #0]
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	2200      	movs	r2, #0
 800771e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007722:	68f8      	ldr	r0, [r7, #12]
 8007724:	f7ff ff22 	bl	800756c <SPI_WaitFifoStateUntilTimeout>
 8007728:	4603      	mov	r3, r0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d007      	beq.n	800773e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007732:	f043 0220 	orr.w	r2, r3, #32
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800773a:	2303      	movs	r3, #3
 800773c:	e000      	b.n	8007740 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800773e:	2300      	movs	r3, #0
}
 8007740:	4618      	mov	r0, r3
 8007742:	3710      	adds	r7, #16
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b086      	sub	sp, #24
 800774c:	af02      	add	r7, sp, #8
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	9300      	str	r3, [sp, #0]
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	2200      	movs	r2, #0
 800775c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007760:	68f8      	ldr	r0, [r7, #12]
 8007762:	f7ff ff03 	bl	800756c <SPI_WaitFifoStateUntilTimeout>
 8007766:	4603      	mov	r3, r0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d007      	beq.n	800777c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007770:	f043 0220 	orr.w	r2, r3, #32
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007778:	2303      	movs	r3, #3
 800777a:	e027      	b.n	80077cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	9300      	str	r3, [sp, #0]
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	2200      	movs	r2, #0
 8007784:	2180      	movs	r1, #128	; 0x80
 8007786:	68f8      	ldr	r0, [r7, #12]
 8007788:	f7ff fe68 	bl	800745c <SPI_WaitFlagStateUntilTimeout>
 800778c:	4603      	mov	r3, r0
 800778e:	2b00      	cmp	r3, #0
 8007790:	d007      	beq.n	80077a2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007796:	f043 0220 	orr.w	r2, r3, #32
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800779e:	2303      	movs	r3, #3
 80077a0:	e014      	b.n	80077cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	9300      	str	r3, [sp, #0]
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80077ae:	68f8      	ldr	r0, [r7, #12]
 80077b0:	f7ff fedc 	bl	800756c <SPI_WaitFifoStateUntilTimeout>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d007      	beq.n	80077ca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077be:	f043 0220 	orr.w	r2, r3, #32
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80077c6:	2303      	movs	r3, #3
 80077c8:	e000      	b.n	80077cc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80077ca:	2300      	movs	r3, #0
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3710      	adds	r7, #16
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b082      	sub	sp, #8
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d101      	bne.n	80077e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e049      	b.n	800787a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d106      	bne.n	8007800 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f7fb ffb6 	bl	800376c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2202      	movs	r2, #2
 8007804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	3304      	adds	r3, #4
 8007810:	4619      	mov	r1, r3
 8007812:	4610      	mov	r0, r2
 8007814:	f000 fcfa 	bl	800820c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2201      	movs	r2, #1
 800784c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007878:	2300      	movs	r3, #0
}
 800787a:	4618      	mov	r0, r3
 800787c:	3708      	adds	r7, #8
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}

08007882 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007882:	b580      	push	{r7, lr}
 8007884:	b082      	sub	sp, #8
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d101      	bne.n	8007894 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	e049      	b.n	8007928 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800789a:	b2db      	uxtb	r3, r3
 800789c:	2b00      	cmp	r3, #0
 800789e:	d106      	bne.n	80078ae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 f841 	bl	8007930 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2202      	movs	r2, #2
 80078b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	3304      	adds	r3, #4
 80078be:	4619      	mov	r1, r3
 80078c0:	4610      	mov	r0, r2
 80078c2:	f000 fca3 	bl	800820c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2201      	movs	r2, #1
 80078ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2201      	movs	r2, #1
 80078d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2201      	movs	r2, #1
 80078da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2201      	movs	r2, #1
 80078e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2201      	movs	r2, #1
 80078ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2201      	movs	r2, #1
 80078f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2201      	movs	r2, #1
 80078fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2201      	movs	r2, #1
 8007902:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2201      	movs	r2, #1
 800790a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2201      	movs	r2, #1
 8007912:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2201      	movs	r2, #1
 800791a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2201      	movs	r2, #1
 8007922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007926:	2300      	movs	r3, #0
}
 8007928:	4618      	mov	r0, r3
 800792a:	3708      	adds	r7, #8
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007938:	bf00      	nop
 800793a:	370c      	adds	r7, #12
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b086      	sub	sp, #24
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d101      	bne.n	8007958 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007954:	2301      	movs	r3, #1
 8007956:	e097      	b.n	8007a88 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800795e:	b2db      	uxtb	r3, r3
 8007960:	2b00      	cmp	r3, #0
 8007962:	d106      	bne.n	8007972 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2200      	movs	r2, #0
 8007968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f7fb ff63 	bl	8003838 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2202      	movs	r2, #2
 8007976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	6812      	ldr	r2, [r2, #0]
 8007984:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8007988:	f023 0307 	bic.w	r3, r3, #7
 800798c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	3304      	adds	r3, #4
 8007996:	4619      	mov	r1, r3
 8007998:	4610      	mov	r0, r2
 800799a:	f000 fc37 	bl	800820c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	699b      	ldr	r3, [r3, #24]
 80079ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	6a1b      	ldr	r3, [r3, #32]
 80079b4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	697a      	ldr	r2, [r7, #20]
 80079bc:	4313      	orrs	r3, r2
 80079be:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079c6:	f023 0303 	bic.w	r3, r3, #3
 80079ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	689a      	ldr	r2, [r3, #8]
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	699b      	ldr	r3, [r3, #24]
 80079d4:	021b      	lsls	r3, r3, #8
 80079d6:	4313      	orrs	r3, r2
 80079d8:	693a      	ldr	r2, [r7, #16]
 80079da:	4313      	orrs	r3, r2
 80079dc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80079e4:	f023 030c 	bic.w	r3, r3, #12
 80079e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80079f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	68da      	ldr	r2, [r3, #12]
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	69db      	ldr	r3, [r3, #28]
 80079fe:	021b      	lsls	r3, r3, #8
 8007a00:	4313      	orrs	r3, r2
 8007a02:	693a      	ldr	r2, [r7, #16]
 8007a04:	4313      	orrs	r3, r2
 8007a06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	691b      	ldr	r3, [r3, #16]
 8007a0c:	011a      	lsls	r2, r3, #4
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	6a1b      	ldr	r3, [r3, #32]
 8007a12:	031b      	lsls	r3, r3, #12
 8007a14:	4313      	orrs	r3, r2
 8007a16:	693a      	ldr	r2, [r7, #16]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007a22:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007a2a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	685a      	ldr	r2, [r3, #4]
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	695b      	ldr	r3, [r3, #20]
 8007a34:	011b      	lsls	r3, r3, #4
 8007a36:	4313      	orrs	r3, r2
 8007a38:	68fa      	ldr	r2, [r7, #12]
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	697a      	ldr	r2, [r7, #20]
 8007a44:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	693a      	ldr	r2, [r7, #16]
 8007a4c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68fa      	ldr	r2, [r7, #12]
 8007a54:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2201      	movs	r2, #1
 8007a5a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2201      	movs	r2, #1
 8007a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2201      	movs	r2, #1
 8007a72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2201      	movs	r2, #1
 8007a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a86:	2300      	movs	r3, #0
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3718      	adds	r7, #24
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007aa0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007aa8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ab0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ab8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d110      	bne.n	8007ae2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ac0:	7bfb      	ldrb	r3, [r7, #15]
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d102      	bne.n	8007acc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007ac6:	7b7b      	ldrb	r3, [r7, #13]
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d001      	beq.n	8007ad0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007acc:	2301      	movs	r3, #1
 8007ace:	e069      	b.n	8007ba4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2202      	movs	r2, #2
 8007ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2202      	movs	r2, #2
 8007adc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ae0:	e031      	b.n	8007b46 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	2b04      	cmp	r3, #4
 8007ae6:	d110      	bne.n	8007b0a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ae8:	7bbb      	ldrb	r3, [r7, #14]
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d102      	bne.n	8007af4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007aee:	7b3b      	ldrb	r3, [r7, #12]
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d001      	beq.n	8007af8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	e055      	b.n	8007ba4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2202      	movs	r2, #2
 8007afc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2202      	movs	r2, #2
 8007b04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b08:	e01d      	b.n	8007b46 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b0a:	7bfb      	ldrb	r3, [r7, #15]
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d108      	bne.n	8007b22 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b10:	7bbb      	ldrb	r3, [r7, #14]
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d105      	bne.n	8007b22 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b16:	7b7b      	ldrb	r3, [r7, #13]
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d102      	bne.n	8007b22 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007b1c:	7b3b      	ldrb	r3, [r7, #12]
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d001      	beq.n	8007b26 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	e03e      	b.n	8007ba4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2202      	movs	r2, #2
 8007b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2202      	movs	r2, #2
 8007b32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2202      	movs	r2, #2
 8007b3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2202      	movs	r2, #2
 8007b42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d003      	beq.n	8007b54 <HAL_TIM_Encoder_Start+0xc4>
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	2b04      	cmp	r3, #4
 8007b50:	d008      	beq.n	8007b64 <HAL_TIM_Encoder_Start+0xd4>
 8007b52:	e00f      	b.n	8007b74 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	2100      	movs	r1, #0
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f000 ff5f 	bl	8008a20 <TIM_CCxChannelCmd>
      break;
 8007b62:	e016      	b.n	8007b92 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	2104      	movs	r1, #4
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f000 ff57 	bl	8008a20 <TIM_CCxChannelCmd>
      break;
 8007b72:	e00e      	b.n	8007b92 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	2100      	movs	r1, #0
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f000 ff4f 	bl	8008a20 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	2201      	movs	r2, #1
 8007b88:	2104      	movs	r1, #4
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f000 ff48 	bl	8008a20 <TIM_CCxChannelCmd>
      break;
 8007b90:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f042 0201 	orr.w	r2, r2, #1
 8007ba0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007ba2:	2300      	movs	r3, #0
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3710      	adds	r7, #16
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b082      	sub	sp, #8
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	691b      	ldr	r3, [r3, #16]
 8007bba:	f003 0302 	and.w	r3, r3, #2
 8007bbe:	2b02      	cmp	r3, #2
 8007bc0:	d122      	bne.n	8007c08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	f003 0302 	and.w	r3, r3, #2
 8007bcc:	2b02      	cmp	r3, #2
 8007bce:	d11b      	bne.n	8007c08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f06f 0202 	mvn.w	r2, #2
 8007bd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2201      	movs	r2, #1
 8007bde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	699b      	ldr	r3, [r3, #24]
 8007be6:	f003 0303 	and.w	r3, r3, #3
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d003      	beq.n	8007bf6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 faed 	bl	80081ce <HAL_TIM_IC_CaptureCallback>
 8007bf4:	e005      	b.n	8007c02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 fadf 	bl	80081ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 faf0 	bl	80081e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	691b      	ldr	r3, [r3, #16]
 8007c0e:	f003 0304 	and.w	r3, r3, #4
 8007c12:	2b04      	cmp	r3, #4
 8007c14:	d122      	bne.n	8007c5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	f003 0304 	and.w	r3, r3, #4
 8007c20:	2b04      	cmp	r3, #4
 8007c22:	d11b      	bne.n	8007c5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f06f 0204 	mvn.w	r2, #4
 8007c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2202      	movs	r2, #2
 8007c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	699b      	ldr	r3, [r3, #24]
 8007c3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d003      	beq.n	8007c4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 fac3 	bl	80081ce <HAL_TIM_IC_CaptureCallback>
 8007c48:	e005      	b.n	8007c56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 fab5 	bl	80081ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 fac6 	bl	80081e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	691b      	ldr	r3, [r3, #16]
 8007c62:	f003 0308 	and.w	r3, r3, #8
 8007c66:	2b08      	cmp	r3, #8
 8007c68:	d122      	bne.n	8007cb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	f003 0308 	and.w	r3, r3, #8
 8007c74:	2b08      	cmp	r3, #8
 8007c76:	d11b      	bne.n	8007cb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f06f 0208 	mvn.w	r2, #8
 8007c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2204      	movs	r2, #4
 8007c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	69db      	ldr	r3, [r3, #28]
 8007c8e:	f003 0303 	and.w	r3, r3, #3
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d003      	beq.n	8007c9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 fa99 	bl	80081ce <HAL_TIM_IC_CaptureCallback>
 8007c9c:	e005      	b.n	8007caa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 fa8b 	bl	80081ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 fa9c 	bl	80081e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2200      	movs	r2, #0
 8007cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	691b      	ldr	r3, [r3, #16]
 8007cb6:	f003 0310 	and.w	r3, r3, #16
 8007cba:	2b10      	cmp	r3, #16
 8007cbc:	d122      	bne.n	8007d04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	f003 0310 	and.w	r3, r3, #16
 8007cc8:	2b10      	cmp	r3, #16
 8007cca:	d11b      	bne.n	8007d04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f06f 0210 	mvn.w	r2, #16
 8007cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2208      	movs	r2, #8
 8007cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	69db      	ldr	r3, [r3, #28]
 8007ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d003      	beq.n	8007cf2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 fa6f 	bl	80081ce <HAL_TIM_IC_CaptureCallback>
 8007cf0:	e005      	b.n	8007cfe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 fa61 	bl	80081ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 fa72 	bl	80081e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	691b      	ldr	r3, [r3, #16]
 8007d0a:	f003 0301 	and.w	r3, r3, #1
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d10e      	bne.n	8007d30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	f003 0301 	and.w	r3, r3, #1
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d107      	bne.n	8007d30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f06f 0201 	mvn.w	r2, #1
 8007d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 fa3b 	bl	80081a6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	691b      	ldr	r3, [r3, #16]
 8007d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d3a:	2b80      	cmp	r3, #128	; 0x80
 8007d3c:	d10e      	bne.n	8007d5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d48:	2b80      	cmp	r3, #128	; 0x80
 8007d4a:	d107      	bne.n	8007d5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 ff98 	bl	8008c8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	691b      	ldr	r3, [r3, #16]
 8007d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d6a:	d10e      	bne.n	8007d8a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	68db      	ldr	r3, [r3, #12]
 8007d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d76:	2b80      	cmp	r3, #128	; 0x80
 8007d78:	d107      	bne.n	8007d8a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007d82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 ff8b 	bl	8008ca0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	691b      	ldr	r3, [r3, #16]
 8007d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d94:	2b40      	cmp	r3, #64	; 0x40
 8007d96:	d10e      	bne.n	8007db6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	68db      	ldr	r3, [r3, #12]
 8007d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007da2:	2b40      	cmp	r3, #64	; 0x40
 8007da4:	d107      	bne.n	8007db6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007dae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 fa20 	bl	80081f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	691b      	ldr	r3, [r3, #16]
 8007dbc:	f003 0320 	and.w	r3, r3, #32
 8007dc0:	2b20      	cmp	r3, #32
 8007dc2:	d10e      	bne.n	8007de2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	f003 0320 	and.w	r3, r3, #32
 8007dce:	2b20      	cmp	r3, #32
 8007dd0:	d107      	bne.n	8007de2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f06f 0220 	mvn.w	r2, #32
 8007dda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 ff4b 	bl	8008c78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007de2:	bf00      	nop
 8007de4:	3708      	adds	r7, #8
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
	...

08007dec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b086      	sub	sp, #24
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	60b9      	str	r1, [r7, #8]
 8007df6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d101      	bne.n	8007e0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007e06:	2302      	movs	r3, #2
 8007e08:	e0ff      	b.n	800800a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2b14      	cmp	r3, #20
 8007e16:	f200 80f0 	bhi.w	8007ffa <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007e1a:	a201      	add	r2, pc, #4	; (adr r2, 8007e20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e20:	08007e75 	.word	0x08007e75
 8007e24:	08007ffb 	.word	0x08007ffb
 8007e28:	08007ffb 	.word	0x08007ffb
 8007e2c:	08007ffb 	.word	0x08007ffb
 8007e30:	08007eb5 	.word	0x08007eb5
 8007e34:	08007ffb 	.word	0x08007ffb
 8007e38:	08007ffb 	.word	0x08007ffb
 8007e3c:	08007ffb 	.word	0x08007ffb
 8007e40:	08007ef7 	.word	0x08007ef7
 8007e44:	08007ffb 	.word	0x08007ffb
 8007e48:	08007ffb 	.word	0x08007ffb
 8007e4c:	08007ffb 	.word	0x08007ffb
 8007e50:	08007f37 	.word	0x08007f37
 8007e54:	08007ffb 	.word	0x08007ffb
 8007e58:	08007ffb 	.word	0x08007ffb
 8007e5c:	08007ffb 	.word	0x08007ffb
 8007e60:	08007f79 	.word	0x08007f79
 8007e64:	08007ffb 	.word	0x08007ffb
 8007e68:	08007ffb 	.word	0x08007ffb
 8007e6c:	08007ffb 	.word	0x08007ffb
 8007e70:	08007fb9 	.word	0x08007fb9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	68b9      	ldr	r1, [r7, #8]
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f000 fa60 	bl	8008340 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	699a      	ldr	r2, [r3, #24]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f042 0208 	orr.w	r2, r2, #8
 8007e8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	699a      	ldr	r2, [r3, #24]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f022 0204 	bic.w	r2, r2, #4
 8007e9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	6999      	ldr	r1, [r3, #24]
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	691a      	ldr	r2, [r3, #16]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	430a      	orrs	r2, r1
 8007eb0:	619a      	str	r2, [r3, #24]
      break;
 8007eb2:	e0a5      	b.n	8008000 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	68b9      	ldr	r1, [r7, #8]
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f000 fad0 	bl	8008460 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	699a      	ldr	r2, [r3, #24]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ece:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	699a      	ldr	r2, [r3, #24]
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ede:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	6999      	ldr	r1, [r3, #24]
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	691b      	ldr	r3, [r3, #16]
 8007eea:	021a      	lsls	r2, r3, #8
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	430a      	orrs	r2, r1
 8007ef2:	619a      	str	r2, [r3, #24]
      break;
 8007ef4:	e084      	b.n	8008000 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	68b9      	ldr	r1, [r7, #8]
 8007efc:	4618      	mov	r0, r3
 8007efe:	f000 fb39 	bl	8008574 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	69da      	ldr	r2, [r3, #28]
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f042 0208 	orr.w	r2, r2, #8
 8007f10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	69da      	ldr	r2, [r3, #28]
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f022 0204 	bic.w	r2, r2, #4
 8007f20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	69d9      	ldr	r1, [r3, #28]
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	691a      	ldr	r2, [r3, #16]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	430a      	orrs	r2, r1
 8007f32:	61da      	str	r2, [r3, #28]
      break;
 8007f34:	e064      	b.n	8008000 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	68b9      	ldr	r1, [r7, #8]
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f000 fba1 	bl	8008684 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	69da      	ldr	r2, [r3, #28]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	69da      	ldr	r2, [r3, #28]
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	69d9      	ldr	r1, [r3, #28]
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	691b      	ldr	r3, [r3, #16]
 8007f6c:	021a      	lsls	r2, r3, #8
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	430a      	orrs	r2, r1
 8007f74:	61da      	str	r2, [r3, #28]
      break;
 8007f76:	e043      	b.n	8008000 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	68b9      	ldr	r1, [r7, #8]
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f000 fbea 	bl	8008758 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f042 0208 	orr.w	r2, r2, #8
 8007f92:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f022 0204 	bic.w	r2, r2, #4
 8007fa2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	691a      	ldr	r2, [r3, #16]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	430a      	orrs	r2, r1
 8007fb4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007fb6:	e023      	b.n	8008000 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	68b9      	ldr	r1, [r7, #8]
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f000 fc2e 	bl	8008820 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fd2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fe2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	691b      	ldr	r3, [r3, #16]
 8007fee:	021a      	lsls	r2, r3, #8
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	430a      	orrs	r2, r1
 8007ff6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007ff8:	e002      	b.n	8008000 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	75fb      	strb	r3, [r7, #23]
      break;
 8007ffe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2200      	movs	r2, #0
 8008004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008008:	7dfb      	ldrb	r3, [r7, #23]
}
 800800a:	4618      	mov	r0, r3
 800800c:	3718      	adds	r7, #24
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
 8008012:	bf00      	nop

08008014 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800801e:	2300      	movs	r3, #0
 8008020:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008028:	2b01      	cmp	r3, #1
 800802a:	d101      	bne.n	8008030 <HAL_TIM_ConfigClockSource+0x1c>
 800802c:	2302      	movs	r3, #2
 800802e:	e0b6      	b.n	800819e <HAL_TIM_ConfigClockSource+0x18a>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2201      	movs	r2, #1
 8008034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2202      	movs	r2, #2
 800803c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800804e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008052:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800805a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	68ba      	ldr	r2, [r7, #8]
 8008062:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800806c:	d03e      	beq.n	80080ec <HAL_TIM_ConfigClockSource+0xd8>
 800806e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008072:	f200 8087 	bhi.w	8008184 <HAL_TIM_ConfigClockSource+0x170>
 8008076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800807a:	f000 8086 	beq.w	800818a <HAL_TIM_ConfigClockSource+0x176>
 800807e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008082:	d87f      	bhi.n	8008184 <HAL_TIM_ConfigClockSource+0x170>
 8008084:	2b70      	cmp	r3, #112	; 0x70
 8008086:	d01a      	beq.n	80080be <HAL_TIM_ConfigClockSource+0xaa>
 8008088:	2b70      	cmp	r3, #112	; 0x70
 800808a:	d87b      	bhi.n	8008184 <HAL_TIM_ConfigClockSource+0x170>
 800808c:	2b60      	cmp	r3, #96	; 0x60
 800808e:	d050      	beq.n	8008132 <HAL_TIM_ConfigClockSource+0x11e>
 8008090:	2b60      	cmp	r3, #96	; 0x60
 8008092:	d877      	bhi.n	8008184 <HAL_TIM_ConfigClockSource+0x170>
 8008094:	2b50      	cmp	r3, #80	; 0x50
 8008096:	d03c      	beq.n	8008112 <HAL_TIM_ConfigClockSource+0xfe>
 8008098:	2b50      	cmp	r3, #80	; 0x50
 800809a:	d873      	bhi.n	8008184 <HAL_TIM_ConfigClockSource+0x170>
 800809c:	2b40      	cmp	r3, #64	; 0x40
 800809e:	d058      	beq.n	8008152 <HAL_TIM_ConfigClockSource+0x13e>
 80080a0:	2b40      	cmp	r3, #64	; 0x40
 80080a2:	d86f      	bhi.n	8008184 <HAL_TIM_ConfigClockSource+0x170>
 80080a4:	2b30      	cmp	r3, #48	; 0x30
 80080a6:	d064      	beq.n	8008172 <HAL_TIM_ConfigClockSource+0x15e>
 80080a8:	2b30      	cmp	r3, #48	; 0x30
 80080aa:	d86b      	bhi.n	8008184 <HAL_TIM_ConfigClockSource+0x170>
 80080ac:	2b20      	cmp	r3, #32
 80080ae:	d060      	beq.n	8008172 <HAL_TIM_ConfigClockSource+0x15e>
 80080b0:	2b20      	cmp	r3, #32
 80080b2:	d867      	bhi.n	8008184 <HAL_TIM_ConfigClockSource+0x170>
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d05c      	beq.n	8008172 <HAL_TIM_ConfigClockSource+0x15e>
 80080b8:	2b10      	cmp	r3, #16
 80080ba:	d05a      	beq.n	8008172 <HAL_TIM_ConfigClockSource+0x15e>
 80080bc:	e062      	b.n	8008184 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6818      	ldr	r0, [r3, #0]
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	6899      	ldr	r1, [r3, #8]
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	685a      	ldr	r2, [r3, #4]
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	68db      	ldr	r3, [r3, #12]
 80080ce:	f000 fc87 	bl	80089e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80080e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	68ba      	ldr	r2, [r7, #8]
 80080e8:	609a      	str	r2, [r3, #8]
      break;
 80080ea:	e04f      	b.n	800818c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6818      	ldr	r0, [r3, #0]
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	6899      	ldr	r1, [r3, #8]
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	685a      	ldr	r2, [r3, #4]
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	f000 fc70 	bl	80089e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	689a      	ldr	r2, [r3, #8]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800810e:	609a      	str	r2, [r3, #8]
      break;
 8008110:	e03c      	b.n	800818c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6818      	ldr	r0, [r3, #0]
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	6859      	ldr	r1, [r3, #4]
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	68db      	ldr	r3, [r3, #12]
 800811e:	461a      	mov	r2, r3
 8008120:	f000 fbe4 	bl	80088ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	2150      	movs	r1, #80	; 0x50
 800812a:	4618      	mov	r0, r3
 800812c:	f000 fc3d 	bl	80089aa <TIM_ITRx_SetConfig>
      break;
 8008130:	e02c      	b.n	800818c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6818      	ldr	r0, [r3, #0]
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	6859      	ldr	r1, [r3, #4]
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	68db      	ldr	r3, [r3, #12]
 800813e:	461a      	mov	r2, r3
 8008140:	f000 fc03 	bl	800894a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	2160      	movs	r1, #96	; 0x60
 800814a:	4618      	mov	r0, r3
 800814c:	f000 fc2d 	bl	80089aa <TIM_ITRx_SetConfig>
      break;
 8008150:	e01c      	b.n	800818c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6818      	ldr	r0, [r3, #0]
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	6859      	ldr	r1, [r3, #4]
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	68db      	ldr	r3, [r3, #12]
 800815e:	461a      	mov	r2, r3
 8008160:	f000 fbc4 	bl	80088ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2140      	movs	r1, #64	; 0x40
 800816a:	4618      	mov	r0, r3
 800816c:	f000 fc1d 	bl	80089aa <TIM_ITRx_SetConfig>
      break;
 8008170:	e00c      	b.n	800818c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4619      	mov	r1, r3
 800817c:	4610      	mov	r0, r2
 800817e:	f000 fc14 	bl	80089aa <TIM_ITRx_SetConfig>
      break;
 8008182:	e003      	b.n	800818c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008184:	2301      	movs	r3, #1
 8008186:	73fb      	strb	r3, [r7, #15]
      break;
 8008188:	e000      	b.n	800818c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800818a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2200      	movs	r2, #0
 8008198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800819c:	7bfb      	ldrb	r3, [r7, #15]
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3710      	adds	r7, #16
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}

080081a6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081a6:	b480      	push	{r7}
 80081a8:	b083      	sub	sp, #12
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80081ae:	bf00      	nop
 80081b0:	370c      	adds	r7, #12
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr

080081ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081ba:	b480      	push	{r7}
 80081bc:	b083      	sub	sp, #12
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80081c2:	bf00      	nop
 80081c4:	370c      	adds	r7, #12
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr

080081ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80081ce:	b480      	push	{r7}
 80081d0:	b083      	sub	sp, #12
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80081d6:	bf00      	nop
 80081d8:	370c      	adds	r7, #12
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr

080081e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80081e2:	b480      	push	{r7}
 80081e4:	b083      	sub	sp, #12
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80081ea:	bf00      	nop
 80081ec:	370c      	adds	r7, #12
 80081ee:	46bd      	mov	sp, r7
 80081f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f4:	4770      	bx	lr

080081f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80081f6:	b480      	push	{r7}
 80081f8:	b083      	sub	sp, #12
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80081fe:	bf00      	nop
 8008200:	370c      	adds	r7, #12
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr
	...

0800820c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800820c:	b480      	push	{r7}
 800820e:	b085      	sub	sp, #20
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	4a40      	ldr	r2, [pc, #256]	; (8008320 <TIM_Base_SetConfig+0x114>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d013      	beq.n	800824c <TIM_Base_SetConfig+0x40>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800822a:	d00f      	beq.n	800824c <TIM_Base_SetConfig+0x40>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	4a3d      	ldr	r2, [pc, #244]	; (8008324 <TIM_Base_SetConfig+0x118>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d00b      	beq.n	800824c <TIM_Base_SetConfig+0x40>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	4a3c      	ldr	r2, [pc, #240]	; (8008328 <TIM_Base_SetConfig+0x11c>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d007      	beq.n	800824c <TIM_Base_SetConfig+0x40>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	4a3b      	ldr	r2, [pc, #236]	; (800832c <TIM_Base_SetConfig+0x120>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d003      	beq.n	800824c <TIM_Base_SetConfig+0x40>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	4a3a      	ldr	r2, [pc, #232]	; (8008330 <TIM_Base_SetConfig+0x124>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d108      	bne.n	800825e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008252:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	68fa      	ldr	r2, [r7, #12]
 800825a:	4313      	orrs	r3, r2
 800825c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	4a2f      	ldr	r2, [pc, #188]	; (8008320 <TIM_Base_SetConfig+0x114>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d01f      	beq.n	80082a6 <TIM_Base_SetConfig+0x9a>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800826c:	d01b      	beq.n	80082a6 <TIM_Base_SetConfig+0x9a>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	4a2c      	ldr	r2, [pc, #176]	; (8008324 <TIM_Base_SetConfig+0x118>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d017      	beq.n	80082a6 <TIM_Base_SetConfig+0x9a>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	4a2b      	ldr	r2, [pc, #172]	; (8008328 <TIM_Base_SetConfig+0x11c>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d013      	beq.n	80082a6 <TIM_Base_SetConfig+0x9a>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	4a2a      	ldr	r2, [pc, #168]	; (800832c <TIM_Base_SetConfig+0x120>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d00f      	beq.n	80082a6 <TIM_Base_SetConfig+0x9a>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	4a29      	ldr	r2, [pc, #164]	; (8008330 <TIM_Base_SetConfig+0x124>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d00b      	beq.n	80082a6 <TIM_Base_SetConfig+0x9a>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	4a28      	ldr	r2, [pc, #160]	; (8008334 <TIM_Base_SetConfig+0x128>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d007      	beq.n	80082a6 <TIM_Base_SetConfig+0x9a>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	4a27      	ldr	r2, [pc, #156]	; (8008338 <TIM_Base_SetConfig+0x12c>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d003      	beq.n	80082a6 <TIM_Base_SetConfig+0x9a>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	4a26      	ldr	r2, [pc, #152]	; (800833c <TIM_Base_SetConfig+0x130>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d108      	bne.n	80082b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	68db      	ldr	r3, [r3, #12]
 80082b2:	68fa      	ldr	r2, [r7, #12]
 80082b4:	4313      	orrs	r3, r2
 80082b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	695b      	ldr	r3, [r3, #20]
 80082c2:	4313      	orrs	r3, r2
 80082c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	689a      	ldr	r2, [r3, #8]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	4a10      	ldr	r2, [pc, #64]	; (8008320 <TIM_Base_SetConfig+0x114>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d00f      	beq.n	8008304 <TIM_Base_SetConfig+0xf8>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	4a12      	ldr	r2, [pc, #72]	; (8008330 <TIM_Base_SetConfig+0x124>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d00b      	beq.n	8008304 <TIM_Base_SetConfig+0xf8>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	4a11      	ldr	r2, [pc, #68]	; (8008334 <TIM_Base_SetConfig+0x128>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d007      	beq.n	8008304 <TIM_Base_SetConfig+0xf8>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	4a10      	ldr	r2, [pc, #64]	; (8008338 <TIM_Base_SetConfig+0x12c>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d003      	beq.n	8008304 <TIM_Base_SetConfig+0xf8>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	4a0f      	ldr	r2, [pc, #60]	; (800833c <TIM_Base_SetConfig+0x130>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d103      	bne.n	800830c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	691a      	ldr	r2, [r3, #16]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	615a      	str	r2, [r3, #20]
}
 8008312:	bf00      	nop
 8008314:	3714      	adds	r7, #20
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr
 800831e:	bf00      	nop
 8008320:	40012c00 	.word	0x40012c00
 8008324:	40000400 	.word	0x40000400
 8008328:	40000800 	.word	0x40000800
 800832c:	40000c00 	.word	0x40000c00
 8008330:	40013400 	.word	0x40013400
 8008334:	40014000 	.word	0x40014000
 8008338:	40014400 	.word	0x40014400
 800833c:	40014800 	.word	0x40014800

08008340 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008340:	b480      	push	{r7}
 8008342:	b087      	sub	sp, #28
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6a1b      	ldr	r3, [r3, #32]
 800834e:	f023 0201 	bic.w	r2, r3, #1
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6a1b      	ldr	r3, [r3, #32]
 800835a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	699b      	ldr	r3, [r3, #24]
 8008366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800836e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f023 0303 	bic.w	r3, r3, #3
 800837a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	68fa      	ldr	r2, [r7, #12]
 8008382:	4313      	orrs	r3, r2
 8008384:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	f023 0302 	bic.w	r3, r3, #2
 800838c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	697a      	ldr	r2, [r7, #20]
 8008394:	4313      	orrs	r3, r2
 8008396:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a2c      	ldr	r2, [pc, #176]	; (800844c <TIM_OC1_SetConfig+0x10c>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d00f      	beq.n	80083c0 <TIM_OC1_SetConfig+0x80>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4a2b      	ldr	r2, [pc, #172]	; (8008450 <TIM_OC1_SetConfig+0x110>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d00b      	beq.n	80083c0 <TIM_OC1_SetConfig+0x80>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4a2a      	ldr	r2, [pc, #168]	; (8008454 <TIM_OC1_SetConfig+0x114>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d007      	beq.n	80083c0 <TIM_OC1_SetConfig+0x80>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4a29      	ldr	r2, [pc, #164]	; (8008458 <TIM_OC1_SetConfig+0x118>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d003      	beq.n	80083c0 <TIM_OC1_SetConfig+0x80>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4a28      	ldr	r2, [pc, #160]	; (800845c <TIM_OC1_SetConfig+0x11c>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d10c      	bne.n	80083da <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	f023 0308 	bic.w	r3, r3, #8
 80083c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	68db      	ldr	r3, [r3, #12]
 80083cc:	697a      	ldr	r2, [r7, #20]
 80083ce:	4313      	orrs	r3, r2
 80083d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	f023 0304 	bic.w	r3, r3, #4
 80083d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4a1b      	ldr	r2, [pc, #108]	; (800844c <TIM_OC1_SetConfig+0x10c>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d00f      	beq.n	8008402 <TIM_OC1_SetConfig+0xc2>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4a1a      	ldr	r2, [pc, #104]	; (8008450 <TIM_OC1_SetConfig+0x110>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d00b      	beq.n	8008402 <TIM_OC1_SetConfig+0xc2>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4a19      	ldr	r2, [pc, #100]	; (8008454 <TIM_OC1_SetConfig+0x114>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d007      	beq.n	8008402 <TIM_OC1_SetConfig+0xc2>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4a18      	ldr	r2, [pc, #96]	; (8008458 <TIM_OC1_SetConfig+0x118>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d003      	beq.n	8008402 <TIM_OC1_SetConfig+0xc2>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4a17      	ldr	r2, [pc, #92]	; (800845c <TIM_OC1_SetConfig+0x11c>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d111      	bne.n	8008426 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008408:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008410:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	695b      	ldr	r3, [r3, #20]
 8008416:	693a      	ldr	r2, [r7, #16]
 8008418:	4313      	orrs	r3, r2
 800841a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	699b      	ldr	r3, [r3, #24]
 8008420:	693a      	ldr	r2, [r7, #16]
 8008422:	4313      	orrs	r3, r2
 8008424:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	693a      	ldr	r2, [r7, #16]
 800842a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	68fa      	ldr	r2, [r7, #12]
 8008430:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	685a      	ldr	r2, [r3, #4]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	697a      	ldr	r2, [r7, #20]
 800843e:	621a      	str	r2, [r3, #32]
}
 8008440:	bf00      	nop
 8008442:	371c      	adds	r7, #28
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr
 800844c:	40012c00 	.word	0x40012c00
 8008450:	40013400 	.word	0x40013400
 8008454:	40014000 	.word	0x40014000
 8008458:	40014400 	.word	0x40014400
 800845c:	40014800 	.word	0x40014800

08008460 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008460:	b480      	push	{r7}
 8008462:	b087      	sub	sp, #28
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6a1b      	ldr	r3, [r3, #32]
 800846e:	f023 0210 	bic.w	r2, r3, #16
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6a1b      	ldr	r3, [r3, #32]
 800847a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	699b      	ldr	r3, [r3, #24]
 8008486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800848e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800849a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	021b      	lsls	r3, r3, #8
 80084a2:	68fa      	ldr	r2, [r7, #12]
 80084a4:	4313      	orrs	r3, r2
 80084a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	f023 0320 	bic.w	r3, r3, #32
 80084ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	011b      	lsls	r3, r3, #4
 80084b6:	697a      	ldr	r2, [r7, #20]
 80084b8:	4313      	orrs	r3, r2
 80084ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	4a28      	ldr	r2, [pc, #160]	; (8008560 <TIM_OC2_SetConfig+0x100>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d003      	beq.n	80084cc <TIM_OC2_SetConfig+0x6c>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	4a27      	ldr	r2, [pc, #156]	; (8008564 <TIM_OC2_SetConfig+0x104>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d10d      	bne.n	80084e8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	68db      	ldr	r3, [r3, #12]
 80084d8:	011b      	lsls	r3, r3, #4
 80084da:	697a      	ldr	r2, [r7, #20]
 80084dc:	4313      	orrs	r3, r2
 80084de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	4a1d      	ldr	r2, [pc, #116]	; (8008560 <TIM_OC2_SetConfig+0x100>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d00f      	beq.n	8008510 <TIM_OC2_SetConfig+0xb0>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	4a1c      	ldr	r2, [pc, #112]	; (8008564 <TIM_OC2_SetConfig+0x104>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d00b      	beq.n	8008510 <TIM_OC2_SetConfig+0xb0>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	4a1b      	ldr	r2, [pc, #108]	; (8008568 <TIM_OC2_SetConfig+0x108>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d007      	beq.n	8008510 <TIM_OC2_SetConfig+0xb0>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	4a1a      	ldr	r2, [pc, #104]	; (800856c <TIM_OC2_SetConfig+0x10c>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d003      	beq.n	8008510 <TIM_OC2_SetConfig+0xb0>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	4a19      	ldr	r2, [pc, #100]	; (8008570 <TIM_OC2_SetConfig+0x110>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d113      	bne.n	8008538 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008516:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800851e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	695b      	ldr	r3, [r3, #20]
 8008524:	009b      	lsls	r3, r3, #2
 8008526:	693a      	ldr	r2, [r7, #16]
 8008528:	4313      	orrs	r3, r2
 800852a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	699b      	ldr	r3, [r3, #24]
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	693a      	ldr	r2, [r7, #16]
 8008534:	4313      	orrs	r3, r2
 8008536:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	693a      	ldr	r2, [r7, #16]
 800853c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	68fa      	ldr	r2, [r7, #12]
 8008542:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	685a      	ldr	r2, [r3, #4]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	697a      	ldr	r2, [r7, #20]
 8008550:	621a      	str	r2, [r3, #32]
}
 8008552:	bf00      	nop
 8008554:	371c      	adds	r7, #28
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr
 800855e:	bf00      	nop
 8008560:	40012c00 	.word	0x40012c00
 8008564:	40013400 	.word	0x40013400
 8008568:	40014000 	.word	0x40014000
 800856c:	40014400 	.word	0x40014400
 8008570:	40014800 	.word	0x40014800

08008574 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008574:	b480      	push	{r7}
 8008576:	b087      	sub	sp, #28
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6a1b      	ldr	r3, [r3, #32]
 8008582:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6a1b      	ldr	r3, [r3, #32]
 800858e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	69db      	ldr	r3, [r3, #28]
 800859a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f023 0303 	bic.w	r3, r3, #3
 80085ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	68fa      	ldr	r2, [r7, #12]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80085c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	021b      	lsls	r3, r3, #8
 80085c8:	697a      	ldr	r2, [r7, #20]
 80085ca:	4313      	orrs	r3, r2
 80085cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	4a27      	ldr	r2, [pc, #156]	; (8008670 <TIM_OC3_SetConfig+0xfc>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d003      	beq.n	80085de <TIM_OC3_SetConfig+0x6a>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	4a26      	ldr	r2, [pc, #152]	; (8008674 <TIM_OC3_SetConfig+0x100>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d10d      	bne.n	80085fa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80085e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	68db      	ldr	r3, [r3, #12]
 80085ea:	021b      	lsls	r3, r3, #8
 80085ec:	697a      	ldr	r2, [r7, #20]
 80085ee:	4313      	orrs	r3, r2
 80085f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80085f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	4a1c      	ldr	r2, [pc, #112]	; (8008670 <TIM_OC3_SetConfig+0xfc>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d00f      	beq.n	8008622 <TIM_OC3_SetConfig+0xae>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	4a1b      	ldr	r2, [pc, #108]	; (8008674 <TIM_OC3_SetConfig+0x100>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d00b      	beq.n	8008622 <TIM_OC3_SetConfig+0xae>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	4a1a      	ldr	r2, [pc, #104]	; (8008678 <TIM_OC3_SetConfig+0x104>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d007      	beq.n	8008622 <TIM_OC3_SetConfig+0xae>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	4a19      	ldr	r2, [pc, #100]	; (800867c <TIM_OC3_SetConfig+0x108>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d003      	beq.n	8008622 <TIM_OC3_SetConfig+0xae>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	4a18      	ldr	r2, [pc, #96]	; (8008680 <TIM_OC3_SetConfig+0x10c>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d113      	bne.n	800864a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008628:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008630:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	695b      	ldr	r3, [r3, #20]
 8008636:	011b      	lsls	r3, r3, #4
 8008638:	693a      	ldr	r2, [r7, #16]
 800863a:	4313      	orrs	r3, r2
 800863c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	699b      	ldr	r3, [r3, #24]
 8008642:	011b      	lsls	r3, r3, #4
 8008644:	693a      	ldr	r2, [r7, #16]
 8008646:	4313      	orrs	r3, r2
 8008648:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	693a      	ldr	r2, [r7, #16]
 800864e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	68fa      	ldr	r2, [r7, #12]
 8008654:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	685a      	ldr	r2, [r3, #4]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	697a      	ldr	r2, [r7, #20]
 8008662:	621a      	str	r2, [r3, #32]
}
 8008664:	bf00      	nop
 8008666:	371c      	adds	r7, #28
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr
 8008670:	40012c00 	.word	0x40012c00
 8008674:	40013400 	.word	0x40013400
 8008678:	40014000 	.word	0x40014000
 800867c:	40014400 	.word	0x40014400
 8008680:	40014800 	.word	0x40014800

08008684 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008684:	b480      	push	{r7}
 8008686:	b087      	sub	sp, #28
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6a1b      	ldr	r3, [r3, #32]
 8008692:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6a1b      	ldr	r3, [r3, #32]
 800869e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	69db      	ldr	r3, [r3, #28]
 80086aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80086b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	021b      	lsls	r3, r3, #8
 80086c6:	68fa      	ldr	r2, [r7, #12]
 80086c8:	4313      	orrs	r3, r2
 80086ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80086d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	689b      	ldr	r3, [r3, #8]
 80086d8:	031b      	lsls	r3, r3, #12
 80086da:	693a      	ldr	r2, [r7, #16]
 80086dc:	4313      	orrs	r3, r2
 80086de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	4a18      	ldr	r2, [pc, #96]	; (8008744 <TIM_OC4_SetConfig+0xc0>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d00f      	beq.n	8008708 <TIM_OC4_SetConfig+0x84>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	4a17      	ldr	r2, [pc, #92]	; (8008748 <TIM_OC4_SetConfig+0xc4>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d00b      	beq.n	8008708 <TIM_OC4_SetConfig+0x84>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	4a16      	ldr	r2, [pc, #88]	; (800874c <TIM_OC4_SetConfig+0xc8>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d007      	beq.n	8008708 <TIM_OC4_SetConfig+0x84>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	4a15      	ldr	r2, [pc, #84]	; (8008750 <TIM_OC4_SetConfig+0xcc>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d003      	beq.n	8008708 <TIM_OC4_SetConfig+0x84>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	4a14      	ldr	r2, [pc, #80]	; (8008754 <TIM_OC4_SetConfig+0xd0>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d109      	bne.n	800871c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800870e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	695b      	ldr	r3, [r3, #20]
 8008714:	019b      	lsls	r3, r3, #6
 8008716:	697a      	ldr	r2, [r7, #20]
 8008718:	4313      	orrs	r3, r2
 800871a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	697a      	ldr	r2, [r7, #20]
 8008720:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	68fa      	ldr	r2, [r7, #12]
 8008726:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	685a      	ldr	r2, [r3, #4]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	693a      	ldr	r2, [r7, #16]
 8008734:	621a      	str	r2, [r3, #32]
}
 8008736:	bf00      	nop
 8008738:	371c      	adds	r7, #28
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr
 8008742:	bf00      	nop
 8008744:	40012c00 	.word	0x40012c00
 8008748:	40013400 	.word	0x40013400
 800874c:	40014000 	.word	0x40014000
 8008750:	40014400 	.word	0x40014400
 8008754:	40014800 	.word	0x40014800

08008758 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008758:	b480      	push	{r7}
 800875a:	b087      	sub	sp, #28
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6a1b      	ldr	r3, [r3, #32]
 8008766:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6a1b      	ldr	r3, [r3, #32]
 8008772:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800877e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800878a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	68fa      	ldr	r2, [r7, #12]
 8008792:	4313      	orrs	r3, r2
 8008794:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800879c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	689b      	ldr	r3, [r3, #8]
 80087a2:	041b      	lsls	r3, r3, #16
 80087a4:	693a      	ldr	r2, [r7, #16]
 80087a6:	4313      	orrs	r3, r2
 80087a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	4a17      	ldr	r2, [pc, #92]	; (800880c <TIM_OC5_SetConfig+0xb4>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d00f      	beq.n	80087d2 <TIM_OC5_SetConfig+0x7a>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4a16      	ldr	r2, [pc, #88]	; (8008810 <TIM_OC5_SetConfig+0xb8>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d00b      	beq.n	80087d2 <TIM_OC5_SetConfig+0x7a>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	4a15      	ldr	r2, [pc, #84]	; (8008814 <TIM_OC5_SetConfig+0xbc>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d007      	beq.n	80087d2 <TIM_OC5_SetConfig+0x7a>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	4a14      	ldr	r2, [pc, #80]	; (8008818 <TIM_OC5_SetConfig+0xc0>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d003      	beq.n	80087d2 <TIM_OC5_SetConfig+0x7a>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	4a13      	ldr	r2, [pc, #76]	; (800881c <TIM_OC5_SetConfig+0xc4>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d109      	bne.n	80087e6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	695b      	ldr	r3, [r3, #20]
 80087de:	021b      	lsls	r3, r3, #8
 80087e0:	697a      	ldr	r2, [r7, #20]
 80087e2:	4313      	orrs	r3, r2
 80087e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	697a      	ldr	r2, [r7, #20]
 80087ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	68fa      	ldr	r2, [r7, #12]
 80087f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	685a      	ldr	r2, [r3, #4]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	693a      	ldr	r2, [r7, #16]
 80087fe:	621a      	str	r2, [r3, #32]
}
 8008800:	bf00      	nop
 8008802:	371c      	adds	r7, #28
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr
 800880c:	40012c00 	.word	0x40012c00
 8008810:	40013400 	.word	0x40013400
 8008814:	40014000 	.word	0x40014000
 8008818:	40014400 	.word	0x40014400
 800881c:	40014800 	.word	0x40014800

08008820 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008820:	b480      	push	{r7}
 8008822:	b087      	sub	sp, #28
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6a1b      	ldr	r3, [r3, #32]
 800882e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6a1b      	ldr	r3, [r3, #32]
 800883a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800884e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008852:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	021b      	lsls	r3, r3, #8
 800885a:	68fa      	ldr	r2, [r7, #12]
 800885c:	4313      	orrs	r3, r2
 800885e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008866:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	051b      	lsls	r3, r3, #20
 800886e:	693a      	ldr	r2, [r7, #16]
 8008870:	4313      	orrs	r3, r2
 8008872:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	4a18      	ldr	r2, [pc, #96]	; (80088d8 <TIM_OC6_SetConfig+0xb8>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d00f      	beq.n	800889c <TIM_OC6_SetConfig+0x7c>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	4a17      	ldr	r2, [pc, #92]	; (80088dc <TIM_OC6_SetConfig+0xbc>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d00b      	beq.n	800889c <TIM_OC6_SetConfig+0x7c>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	4a16      	ldr	r2, [pc, #88]	; (80088e0 <TIM_OC6_SetConfig+0xc0>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d007      	beq.n	800889c <TIM_OC6_SetConfig+0x7c>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	4a15      	ldr	r2, [pc, #84]	; (80088e4 <TIM_OC6_SetConfig+0xc4>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d003      	beq.n	800889c <TIM_OC6_SetConfig+0x7c>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	4a14      	ldr	r2, [pc, #80]	; (80088e8 <TIM_OC6_SetConfig+0xc8>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d109      	bne.n	80088b0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80088a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	695b      	ldr	r3, [r3, #20]
 80088a8:	029b      	lsls	r3, r3, #10
 80088aa:	697a      	ldr	r2, [r7, #20]
 80088ac:	4313      	orrs	r3, r2
 80088ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	697a      	ldr	r2, [r7, #20]
 80088b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	68fa      	ldr	r2, [r7, #12]
 80088ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	685a      	ldr	r2, [r3, #4]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	693a      	ldr	r2, [r7, #16]
 80088c8:	621a      	str	r2, [r3, #32]
}
 80088ca:	bf00      	nop
 80088cc:	371c      	adds	r7, #28
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr
 80088d6:	bf00      	nop
 80088d8:	40012c00 	.word	0x40012c00
 80088dc:	40013400 	.word	0x40013400
 80088e0:	40014000 	.word	0x40014000
 80088e4:	40014400 	.word	0x40014400
 80088e8:	40014800 	.word	0x40014800

080088ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b087      	sub	sp, #28
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	60b9      	str	r1, [r7, #8]
 80088f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	6a1b      	ldr	r3, [r3, #32]
 80088fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	6a1b      	ldr	r3, [r3, #32]
 8008902:	f023 0201 	bic.w	r2, r3, #1
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	699b      	ldr	r3, [r3, #24]
 800890e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008916:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	011b      	lsls	r3, r3, #4
 800891c:	693a      	ldr	r2, [r7, #16]
 800891e:	4313      	orrs	r3, r2
 8008920:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	f023 030a 	bic.w	r3, r3, #10
 8008928:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800892a:	697a      	ldr	r2, [r7, #20]
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	4313      	orrs	r3, r2
 8008930:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	693a      	ldr	r2, [r7, #16]
 8008936:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	697a      	ldr	r2, [r7, #20]
 800893c:	621a      	str	r2, [r3, #32]
}
 800893e:	bf00      	nop
 8008940:	371c      	adds	r7, #28
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr

0800894a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800894a:	b480      	push	{r7}
 800894c:	b087      	sub	sp, #28
 800894e:	af00      	add	r7, sp, #0
 8008950:	60f8      	str	r0, [r7, #12]
 8008952:	60b9      	str	r1, [r7, #8]
 8008954:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	6a1b      	ldr	r3, [r3, #32]
 800895a:	f023 0210 	bic.w	r2, r3, #16
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	699b      	ldr	r3, [r3, #24]
 8008966:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	6a1b      	ldr	r3, [r3, #32]
 800896c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008974:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	031b      	lsls	r3, r3, #12
 800897a:	697a      	ldr	r2, [r7, #20]
 800897c:	4313      	orrs	r3, r2
 800897e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008986:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	011b      	lsls	r3, r3, #4
 800898c:	693a      	ldr	r2, [r7, #16]
 800898e:	4313      	orrs	r3, r2
 8008990:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	697a      	ldr	r2, [r7, #20]
 8008996:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	693a      	ldr	r2, [r7, #16]
 800899c:	621a      	str	r2, [r3, #32]
}
 800899e:	bf00      	nop
 80089a0:	371c      	adds	r7, #28
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr

080089aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80089aa:	b480      	push	{r7}
 80089ac:	b085      	sub	sp, #20
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
 80089b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	689b      	ldr	r3, [r3, #8]
 80089b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80089c2:	683a      	ldr	r2, [r7, #0]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	4313      	orrs	r3, r2
 80089c8:	f043 0307 	orr.w	r3, r3, #7
 80089cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	68fa      	ldr	r2, [r7, #12]
 80089d2:	609a      	str	r2, [r3, #8]
}
 80089d4:	bf00      	nop
 80089d6:	3714      	adds	r7, #20
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr

080089e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b087      	sub	sp, #28
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	607a      	str	r2, [r7, #4]
 80089ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80089fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	021a      	lsls	r2, r3, #8
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	431a      	orrs	r2, r3
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	4313      	orrs	r3, r2
 8008a08:	697a      	ldr	r2, [r7, #20]
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	697a      	ldr	r2, [r7, #20]
 8008a12:	609a      	str	r2, [r3, #8]
}
 8008a14:	bf00      	nop
 8008a16:	371c      	adds	r7, #28
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr

08008a20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b087      	sub	sp, #28
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	60f8      	str	r0, [r7, #12]
 8008a28:	60b9      	str	r1, [r7, #8]
 8008a2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	f003 031f 	and.w	r3, r3, #31
 8008a32:	2201      	movs	r2, #1
 8008a34:	fa02 f303 	lsl.w	r3, r2, r3
 8008a38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	6a1a      	ldr	r2, [r3, #32]
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	43db      	mvns	r3, r3
 8008a42:	401a      	ands	r2, r3
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6a1a      	ldr	r2, [r3, #32]
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	f003 031f 	and.w	r3, r3, #31
 8008a52:	6879      	ldr	r1, [r7, #4]
 8008a54:	fa01 f303 	lsl.w	r3, r1, r3
 8008a58:	431a      	orrs	r2, r3
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	621a      	str	r2, [r3, #32]
}
 8008a5e:	bf00      	nop
 8008a60:	371c      	adds	r7, #28
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr
	...

08008a6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b085      	sub	sp, #20
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d101      	bne.n	8008a84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a80:	2302      	movs	r3, #2
 8008a82:	e068      	b.n	8008b56 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2201      	movs	r2, #1
 8008a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2202      	movs	r2, #2
 8008a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a2e      	ldr	r2, [pc, #184]	; (8008b64 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d004      	beq.n	8008ab8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a2d      	ldr	r2, [pc, #180]	; (8008b68 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d108      	bne.n	8008aca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008abe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	68fa      	ldr	r2, [r7, #12]
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ad0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	68fa      	ldr	r2, [r7, #12]
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	68fa      	ldr	r2, [r7, #12]
 8008ae2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a1e      	ldr	r2, [pc, #120]	; (8008b64 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d01d      	beq.n	8008b2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008af6:	d018      	beq.n	8008b2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a1b      	ldr	r2, [pc, #108]	; (8008b6c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d013      	beq.n	8008b2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a1a      	ldr	r2, [pc, #104]	; (8008b70 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d00e      	beq.n	8008b2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a18      	ldr	r2, [pc, #96]	; (8008b74 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d009      	beq.n	8008b2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a13      	ldr	r2, [pc, #76]	; (8008b68 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d004      	beq.n	8008b2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a14      	ldr	r2, [pc, #80]	; (8008b78 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d10c      	bne.n	8008b44 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	68ba      	ldr	r2, [r7, #8]
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	68ba      	ldr	r2, [r7, #8]
 8008b42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2201      	movs	r2, #1
 8008b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b54:	2300      	movs	r3, #0
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3714      	adds	r7, #20
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr
 8008b62:	bf00      	nop
 8008b64:	40012c00 	.word	0x40012c00
 8008b68:	40013400 	.word	0x40013400
 8008b6c:	40000400 	.word	0x40000400
 8008b70:	40000800 	.word	0x40000800
 8008b74:	40000c00 	.word	0x40000c00
 8008b78:	40014000 	.word	0x40014000

08008b7c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b085      	sub	sp, #20
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008b86:	2300      	movs	r3, #0
 8008b88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d101      	bne.n	8008b98 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008b94:	2302      	movs	r3, #2
 8008b96:	e065      	b.n	8008c64 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	68db      	ldr	r3, [r3, #12]
 8008baa:	4313      	orrs	r3, r2
 8008bac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	689b      	ldr	r3, [r3, #8]
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	691b      	ldr	r3, [r3, #16]
 8008be2:	4313      	orrs	r3, r2
 8008be4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	695b      	ldr	r3, [r3, #20]
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	699b      	ldr	r3, [r3, #24]
 8008c0c:	041b      	lsls	r3, r3, #16
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a16      	ldr	r2, [pc, #88]	; (8008c70 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d004      	beq.n	8008c26 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a14      	ldr	r2, [pc, #80]	; (8008c74 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d115      	bne.n	8008c52 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c30:	051b      	lsls	r3, r3, #20
 8008c32:	4313      	orrs	r3, r2
 8008c34:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	69db      	ldr	r3, [r3, #28]
 8008c40:	4313      	orrs	r3, r2
 8008c42:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	6a1b      	ldr	r3, [r3, #32]
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	68fa      	ldr	r2, [r7, #12]
 8008c58:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c62:	2300      	movs	r3, #0
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3714      	adds	r7, #20
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr
 8008c70:	40012c00 	.word	0x40012c00
 8008c74:	40013400 	.word	0x40013400

08008c78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008c80:	bf00      	nop
 8008c82:	370c      	adds	r7, #12
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b083      	sub	sp, #12
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008c94:	bf00      	nop
 8008c96:	370c      	adds	r7, #12
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr

08008ca0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b083      	sub	sp, #12
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008ca8:	bf00      	nop
 8008caa:	370c      	adds	r7, #12
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr

08008cb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b082      	sub	sp, #8
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d101      	bne.n	8008cc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	e042      	b.n	8008d4c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d106      	bne.n	8008cde <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f7fa febf 	bl	8003a5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2224      	movs	r2, #36	; 0x24
 8008ce2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	681a      	ldr	r2, [r3, #0]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f022 0201 	bic.w	r2, r2, #1
 8008cf4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 fc02 	bl	8009500 <UART_SetConfig>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b01      	cmp	r3, #1
 8008d00:	d101      	bne.n	8008d06 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008d02:	2301      	movs	r3, #1
 8008d04:	e022      	b.n	8008d4c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d002      	beq.n	8008d14 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 fef2 	bl	8009af8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	685a      	ldr	r2, [r3, #4]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008d22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	689a      	ldr	r2, [r3, #8]
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008d32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	681a      	ldr	r2, [r3, #0]
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f042 0201 	orr.w	r2, r2, #1
 8008d42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f000 ff79 	bl	8009c3c <UART_CheckIdleState>
 8008d4a:	4603      	mov	r3, r0
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3708      	adds	r7, #8
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b08a      	sub	sp, #40	; 0x28
 8008d58:	af02      	add	r7, sp, #8
 8008d5a:	60f8      	str	r0, [r7, #12]
 8008d5c:	60b9      	str	r1, [r7, #8]
 8008d5e:	603b      	str	r3, [r7, #0]
 8008d60:	4613      	mov	r3, r2
 8008d62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d6a:	2b20      	cmp	r3, #32
 8008d6c:	f040 8083 	bne.w	8008e76 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d002      	beq.n	8008d7c <HAL_UART_Transmit+0x28>
 8008d76:	88fb      	ldrh	r3, [r7, #6]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d101      	bne.n	8008d80 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	e07b      	b.n	8008e78 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	d101      	bne.n	8008d8e <HAL_UART_Transmit+0x3a>
 8008d8a:	2302      	movs	r3, #2
 8008d8c:	e074      	b.n	8008e78 <HAL_UART_Transmit+0x124>
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2201      	movs	r2, #1
 8008d92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2221      	movs	r2, #33	; 0x21
 8008da2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008da6:	f7fa ffb9 	bl	8003d1c <HAL_GetTick>
 8008daa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	88fa      	ldrh	r2, [r7, #6]
 8008db0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	88fa      	ldrh	r2, [r7, #6]
 8008db8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dc4:	d108      	bne.n	8008dd8 <HAL_UART_Transmit+0x84>
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	691b      	ldr	r3, [r3, #16]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d104      	bne.n	8008dd8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	61bb      	str	r3, [r7, #24]
 8008dd6:	e003      	b.n	8008de0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2200      	movs	r2, #0
 8008de4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8008de8:	e02c      	b.n	8008e44 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	9300      	str	r3, [sp, #0]
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	2200      	movs	r2, #0
 8008df2:	2180      	movs	r1, #128	; 0x80
 8008df4:	68f8      	ldr	r0, [r7, #12]
 8008df6:	f000 ff6c 	bl	8009cd2 <UART_WaitOnFlagUntilTimeout>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d001      	beq.n	8008e04 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8008e00:	2303      	movs	r3, #3
 8008e02:	e039      	b.n	8008e78 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008e04:	69fb      	ldr	r3, [r7, #28]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d10b      	bne.n	8008e22 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008e0a:	69bb      	ldr	r3, [r7, #24]
 8008e0c:	881b      	ldrh	r3, [r3, #0]
 8008e0e:	461a      	mov	r2, r3
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e18:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008e1a:	69bb      	ldr	r3, [r7, #24]
 8008e1c:	3302      	adds	r3, #2
 8008e1e:	61bb      	str	r3, [r7, #24]
 8008e20:	e007      	b.n	8008e32 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008e22:	69fb      	ldr	r3, [r7, #28]
 8008e24:	781a      	ldrb	r2, [r3, #0]
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008e2c:	69fb      	ldr	r3, [r7, #28]
 8008e2e:	3301      	adds	r3, #1
 8008e30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008e38:	b29b      	uxth	r3, r3
 8008e3a:	3b01      	subs	r3, #1
 8008e3c:	b29a      	uxth	r2, r3
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d1cc      	bne.n	8008dea <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	9300      	str	r3, [sp, #0]
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	2200      	movs	r2, #0
 8008e58:	2140      	movs	r1, #64	; 0x40
 8008e5a:	68f8      	ldr	r0, [r7, #12]
 8008e5c:	f000 ff39 	bl	8009cd2 <UART_WaitOnFlagUntilTimeout>
 8008e60:	4603      	mov	r3, r0
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d001      	beq.n	8008e6a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008e66:	2303      	movs	r3, #3
 8008e68:	e006      	b.n	8008e78 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2220      	movs	r2, #32
 8008e6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008e72:	2300      	movs	r3, #0
 8008e74:	e000      	b.n	8008e78 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008e76:	2302      	movs	r3, #2
  }
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3720      	adds	r7, #32
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b0ba      	sub	sp, #232	; 0xe8
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	69db      	ldr	r3, [r3, #28]
 8008e8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	689b      	ldr	r3, [r3, #8]
 8008ea2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008ea6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008eaa:	f640 030f 	movw	r3, #2063	; 0x80f
 8008eae:	4013      	ands	r3, r2
 8008eb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008eb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d11b      	bne.n	8008ef4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ec0:	f003 0320 	and.w	r3, r3, #32
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d015      	beq.n	8008ef4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ecc:	f003 0320 	and.w	r3, r3, #32
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d105      	bne.n	8008ee0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008ed4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d009      	beq.n	8008ef4 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	f000 82d6 	beq.w	8009496 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	4798      	blx	r3
      }
      return;
 8008ef2:	e2d0      	b.n	8009496 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8008ef4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	f000 811f 	beq.w	800913c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008efe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008f02:	4b8b      	ldr	r3, [pc, #556]	; (8009130 <HAL_UART_IRQHandler+0x2b0>)
 8008f04:	4013      	ands	r3, r2
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d106      	bne.n	8008f18 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008f0a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008f0e:	4b89      	ldr	r3, [pc, #548]	; (8009134 <HAL_UART_IRQHandler+0x2b4>)
 8008f10:	4013      	ands	r3, r2
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	f000 8112 	beq.w	800913c <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008f18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f1c:	f003 0301 	and.w	r3, r3, #1
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d011      	beq.n	8008f48 <HAL_UART_IRQHandler+0xc8>
 8008f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d00b      	beq.n	8008f48 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	2201      	movs	r2, #1
 8008f36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f3e:	f043 0201 	orr.w	r2, r3, #1
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f4c:	f003 0302 	and.w	r3, r3, #2
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d011      	beq.n	8008f78 <HAL_UART_IRQHandler+0xf8>
 8008f54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f58:	f003 0301 	and.w	r3, r3, #1
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d00b      	beq.n	8008f78 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	2202      	movs	r2, #2
 8008f66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f6e:	f043 0204 	orr.w	r2, r3, #4
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f7c:	f003 0304 	and.w	r3, r3, #4
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d011      	beq.n	8008fa8 <HAL_UART_IRQHandler+0x128>
 8008f84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f88:	f003 0301 	and.w	r3, r3, #1
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d00b      	beq.n	8008fa8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	2204      	movs	r2, #4
 8008f96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f9e:	f043 0202 	orr.w	r2, r3, #2
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fac:	f003 0308 	and.w	r3, r3, #8
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d017      	beq.n	8008fe4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fb8:	f003 0320 	and.w	r3, r3, #32
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d105      	bne.n	8008fcc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008fc0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008fc4:	4b5a      	ldr	r3, [pc, #360]	; (8009130 <HAL_UART_IRQHandler+0x2b0>)
 8008fc6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d00b      	beq.n	8008fe4 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	2208      	movs	r2, #8
 8008fd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fda:	f043 0208 	orr.w	r2, r3, #8
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fe8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d012      	beq.n	8009016 <HAL_UART_IRQHandler+0x196>
 8008ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ff4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d00c      	beq.n	8009016 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009004:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800900c:	f043 0220 	orr.w	r2, r3, #32
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800901c:	2b00      	cmp	r3, #0
 800901e:	f000 823c 	beq.w	800949a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009026:	f003 0320 	and.w	r3, r3, #32
 800902a:	2b00      	cmp	r3, #0
 800902c:	d013      	beq.n	8009056 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800902e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009032:	f003 0320 	and.w	r3, r3, #32
 8009036:	2b00      	cmp	r3, #0
 8009038:	d105      	bne.n	8009046 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800903a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800903e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009042:	2b00      	cmp	r3, #0
 8009044:	d007      	beq.n	8009056 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800904a:	2b00      	cmp	r3, #0
 800904c:	d003      	beq.n	8009056 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800905c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	689b      	ldr	r3, [r3, #8]
 8009066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800906a:	2b40      	cmp	r3, #64	; 0x40
 800906c:	d005      	beq.n	800907a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800906e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009072:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009076:	2b00      	cmp	r3, #0
 8009078:	d04f      	beq.n	800911a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 ffdb 	bl	800a036 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800908a:	2b40      	cmp	r3, #64	; 0x40
 800908c:	d141      	bne.n	8009112 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	3308      	adds	r3, #8
 8009094:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009098:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800909c:	e853 3f00 	ldrex	r3, [r3]
 80090a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80090a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80090a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	3308      	adds	r3, #8
 80090b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80090ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80090be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80090c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80090ca:	e841 2300 	strex	r3, r2, [r1]
 80090ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80090d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d1d9      	bne.n	800908e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d013      	beq.n	800910a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090e6:	4a14      	ldr	r2, [pc, #80]	; (8009138 <HAL_UART_IRQHandler+0x2b8>)
 80090e8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7fb f8d5 	bl	800429e <HAL_DMA_Abort_IT>
 80090f4:	4603      	mov	r3, r0
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d017      	beq.n	800912a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8009104:	4610      	mov	r0, r2
 8009106:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009108:	e00f      	b.n	800912a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f000 f9ee 	bl	80094ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009110:	e00b      	b.n	800912a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 f9ea 	bl	80094ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009118:	e007      	b.n	800912a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 f9e6 	bl	80094ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8009128:	e1b7      	b.n	800949a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800912a:	bf00      	nop
    return;
 800912c:	e1b5      	b.n	800949a <HAL_UART_IRQHandler+0x61a>
 800912e:	bf00      	nop
 8009130:	10000001 	.word	0x10000001
 8009134:	04000120 	.word	0x04000120
 8009138:	0800a2e1 	.word	0x0800a2e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009140:	2b01      	cmp	r3, #1
 8009142:	f040 814a 	bne.w	80093da <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800914a:	f003 0310 	and.w	r3, r3, #16
 800914e:	2b00      	cmp	r3, #0
 8009150:	f000 8143 	beq.w	80093da <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009158:	f003 0310 	and.w	r3, r3, #16
 800915c:	2b00      	cmp	r3, #0
 800915e:	f000 813c 	beq.w	80093da <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	2210      	movs	r2, #16
 8009168:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	689b      	ldr	r3, [r3, #8]
 8009170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009174:	2b40      	cmp	r3, #64	; 0x40
 8009176:	f040 80b5 	bne.w	80092e4 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009186:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800918a:	2b00      	cmp	r3, #0
 800918c:	f000 8187 	beq.w	800949e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009196:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800919a:	429a      	cmp	r2, r3
 800919c:	f080 817f 	bcs.w	800949e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80091a6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f003 0320 	and.w	r3, r3, #32
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	f040 8086 	bne.w	80092c8 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80091c8:	e853 3f00 	ldrex	r3, [r3]
 80091cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80091d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80091d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	461a      	mov	r2, r3
 80091e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80091e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80091ea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80091f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80091f6:	e841 2300 	strex	r3, r2, [r1]
 80091fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80091fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009202:	2b00      	cmp	r3, #0
 8009204:	d1da      	bne.n	80091bc <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	3308      	adds	r3, #8
 800920c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800920e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009210:	e853 3f00 	ldrex	r3, [r3]
 8009214:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009216:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009218:	f023 0301 	bic.w	r3, r3, #1
 800921c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	3308      	adds	r3, #8
 8009226:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800922a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800922e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009230:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009232:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009236:	e841 2300 	strex	r3, r2, [r1]
 800923a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800923c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800923e:	2b00      	cmp	r3, #0
 8009240:	d1e1      	bne.n	8009206 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	3308      	adds	r3, #8
 8009248:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800924a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800924c:	e853 3f00 	ldrex	r3, [r3]
 8009250:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009252:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009254:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009258:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	3308      	adds	r3, #8
 8009262:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009266:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009268:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800926a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800926c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800926e:	e841 2300 	strex	r3, r2, [r1]
 8009272:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009274:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009276:	2b00      	cmp	r3, #0
 8009278:	d1e3      	bne.n	8009242 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2220      	movs	r2, #32
 800927e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2200      	movs	r2, #0
 8009286:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800928e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009290:	e853 3f00 	ldrex	r3, [r3]
 8009294:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009298:	f023 0310 	bic.w	r3, r3, #16
 800929c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	461a      	mov	r2, r3
 80092a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80092aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80092ac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80092b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80092b2:	e841 2300 	strex	r3, r2, [r1]
 80092b6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80092b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d1e4      	bne.n	8009288 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092c2:	4618      	mov	r0, r3
 80092c4:	f7fa ff8f 	bl	80041e6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	1ad3      	subs	r3, r2, r3
 80092d8:	b29b      	uxth	r3, r3
 80092da:	4619      	mov	r1, r3
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f7f9 f985 	bl	80025ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80092e2:	e0dc      	b.n	800949e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	1ad3      	subs	r3, r2, r3
 80092f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80092fe:	b29b      	uxth	r3, r3
 8009300:	2b00      	cmp	r3, #0
 8009302:	f000 80ce 	beq.w	80094a2 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8009306:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800930a:	2b00      	cmp	r3, #0
 800930c:	f000 80c9 	beq.w	80094a2 <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009318:	e853 3f00 	ldrex	r3, [r3]
 800931c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800931e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009320:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009324:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	461a      	mov	r2, r3
 800932e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009332:	647b      	str	r3, [r7, #68]	; 0x44
 8009334:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009336:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009338:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800933a:	e841 2300 	strex	r3, r2, [r1]
 800933e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009342:	2b00      	cmp	r3, #0
 8009344:	d1e4      	bne.n	8009310 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	3308      	adds	r3, #8
 800934c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800934e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009350:	e853 3f00 	ldrex	r3, [r3]
 8009354:	623b      	str	r3, [r7, #32]
   return(result);
 8009356:	6a3b      	ldr	r3, [r7, #32]
 8009358:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800935c:	f023 0301 	bic.w	r3, r3, #1
 8009360:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	3308      	adds	r3, #8
 800936a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800936e:	633a      	str	r2, [r7, #48]	; 0x30
 8009370:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009372:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009376:	e841 2300 	strex	r3, r2, [r1]
 800937a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800937c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800937e:	2b00      	cmp	r3, #0
 8009380:	d1e1      	bne.n	8009346 <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2220      	movs	r2, #32
 8009386:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2200      	movs	r2, #0
 800938e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2200      	movs	r2, #0
 8009394:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	e853 3f00 	ldrex	r3, [r3]
 80093a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	f023 0310 	bic.w	r3, r3, #16
 80093aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	461a      	mov	r2, r3
 80093b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80093b8:	61fb      	str	r3, [r7, #28]
 80093ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093bc:	69b9      	ldr	r1, [r7, #24]
 80093be:	69fa      	ldr	r2, [r7, #28]
 80093c0:	e841 2300 	strex	r3, r2, [r1]
 80093c4:	617b      	str	r3, [r7, #20]
   return(result);
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d1e4      	bne.n	8009396 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80093cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80093d0:	4619      	mov	r1, r3
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f7f9 f90a 	bl	80025ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80093d8:	e063      	b.n	80094a2 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80093da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d00e      	beq.n	8009404 <HAL_UART_IRQHandler+0x584>
 80093e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d008      	beq.n	8009404 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80093fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f000 ffb0 	bl	800a362 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009402:	e051      	b.n	80094a8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800940c:	2b00      	cmp	r3, #0
 800940e:	d014      	beq.n	800943a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009418:	2b00      	cmp	r3, #0
 800941a:	d105      	bne.n	8009428 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800941c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009420:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009424:	2b00      	cmp	r3, #0
 8009426:	d008      	beq.n	800943a <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800942c:	2b00      	cmp	r3, #0
 800942e:	d03a      	beq.n	80094a6 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	4798      	blx	r3
    }
    return;
 8009438:	e035      	b.n	80094a6 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800943a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800943e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009442:	2b00      	cmp	r3, #0
 8009444:	d009      	beq.n	800945a <HAL_UART_IRQHandler+0x5da>
 8009446:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800944a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800944e:	2b00      	cmp	r3, #0
 8009450:	d003      	beq.n	800945a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f000 ff5a 	bl	800a30c <UART_EndTransmit_IT>
    return;
 8009458:	e026      	b.n	80094a8 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800945a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800945e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009462:	2b00      	cmp	r3, #0
 8009464:	d009      	beq.n	800947a <HAL_UART_IRQHandler+0x5fa>
 8009466:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800946a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800946e:	2b00      	cmp	r3, #0
 8009470:	d003      	beq.n	800947a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 ff89 	bl	800a38a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009478:	e016      	b.n	80094a8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800947a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800947e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009482:	2b00      	cmp	r3, #0
 8009484:	d010      	beq.n	80094a8 <HAL_UART_IRQHandler+0x628>
 8009486:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800948a:	2b00      	cmp	r3, #0
 800948c:	da0c      	bge.n	80094a8 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f000 ff71 	bl	800a376 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009494:	e008      	b.n	80094a8 <HAL_UART_IRQHandler+0x628>
      return;
 8009496:	bf00      	nop
 8009498:	e006      	b.n	80094a8 <HAL_UART_IRQHandler+0x628>
    return;
 800949a:	bf00      	nop
 800949c:	e004      	b.n	80094a8 <HAL_UART_IRQHandler+0x628>
      return;
 800949e:	bf00      	nop
 80094a0:	e002      	b.n	80094a8 <HAL_UART_IRQHandler+0x628>
      return;
 80094a2:	bf00      	nop
 80094a4:	e000      	b.n	80094a8 <HAL_UART_IRQHandler+0x628>
    return;
 80094a6:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 80094a8:	37e8      	adds	r7, #232	; 0xe8
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
 80094ae:	bf00      	nop

080094b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b083      	sub	sp, #12
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80094b8:	bf00      	nop
 80094ba:	370c      	adds	r7, #12
 80094bc:	46bd      	mov	sp, r7
 80094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c2:	4770      	bx	lr

080094c4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b083      	sub	sp, #12
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80094cc:	bf00      	nop
 80094ce:	370c      	adds	r7, #12
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr

080094d8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80094d8:	b480      	push	{r7}
 80094da:	b083      	sub	sp, #12
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80094e0:	bf00      	nop
 80094e2:	370c      	adds	r7, #12
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr

080094ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b083      	sub	sp, #12
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80094f4:	bf00      	nop
 80094f6:	370c      	adds	r7, #12
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr

08009500 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009500:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009504:	b08c      	sub	sp, #48	; 0x30
 8009506:	af00      	add	r7, sp, #0
 8009508:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800950a:	2300      	movs	r3, #0
 800950c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	689a      	ldr	r2, [r3, #8]
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	691b      	ldr	r3, [r3, #16]
 8009518:	431a      	orrs	r2, r3
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	695b      	ldr	r3, [r3, #20]
 800951e:	431a      	orrs	r2, r3
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	69db      	ldr	r3, [r3, #28]
 8009524:	4313      	orrs	r3, r2
 8009526:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	681a      	ldr	r2, [r3, #0]
 800952e:	4baa      	ldr	r3, [pc, #680]	; (80097d8 <UART_SetConfig+0x2d8>)
 8009530:	4013      	ands	r3, r2
 8009532:	697a      	ldr	r2, [r7, #20]
 8009534:	6812      	ldr	r2, [r2, #0]
 8009536:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009538:	430b      	orrs	r3, r1
 800953a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	68da      	ldr	r2, [r3, #12]
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	430a      	orrs	r2, r1
 8009550:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	699b      	ldr	r3, [r3, #24]
 8009556:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a9f      	ldr	r2, [pc, #636]	; (80097dc <UART_SetConfig+0x2dc>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d004      	beq.n	800956c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	6a1b      	ldr	r3, [r3, #32]
 8009566:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009568:	4313      	orrs	r3, r2
 800956a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	689b      	ldr	r3, [r3, #8]
 8009572:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009576:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800957a:	697a      	ldr	r2, [r7, #20]
 800957c:	6812      	ldr	r2, [r2, #0]
 800957e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009580:	430b      	orrs	r3, r1
 8009582:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800958a:	f023 010f 	bic.w	r1, r3, #15
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	430a      	orrs	r2, r1
 8009598:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	4a90      	ldr	r2, [pc, #576]	; (80097e0 <UART_SetConfig+0x2e0>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d125      	bne.n	80095f0 <UART_SetConfig+0xf0>
 80095a4:	4b8f      	ldr	r3, [pc, #572]	; (80097e4 <UART_SetConfig+0x2e4>)
 80095a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095aa:	f003 0303 	and.w	r3, r3, #3
 80095ae:	2b03      	cmp	r3, #3
 80095b0:	d81a      	bhi.n	80095e8 <UART_SetConfig+0xe8>
 80095b2:	a201      	add	r2, pc, #4	; (adr r2, 80095b8 <UART_SetConfig+0xb8>)
 80095b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095b8:	080095c9 	.word	0x080095c9
 80095bc:	080095d9 	.word	0x080095d9
 80095c0:	080095d1 	.word	0x080095d1
 80095c4:	080095e1 	.word	0x080095e1
 80095c8:	2301      	movs	r3, #1
 80095ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095ce:	e116      	b.n	80097fe <UART_SetConfig+0x2fe>
 80095d0:	2302      	movs	r3, #2
 80095d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095d6:	e112      	b.n	80097fe <UART_SetConfig+0x2fe>
 80095d8:	2304      	movs	r3, #4
 80095da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095de:	e10e      	b.n	80097fe <UART_SetConfig+0x2fe>
 80095e0:	2308      	movs	r3, #8
 80095e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095e6:	e10a      	b.n	80097fe <UART_SetConfig+0x2fe>
 80095e8:	2310      	movs	r3, #16
 80095ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095ee:	e106      	b.n	80097fe <UART_SetConfig+0x2fe>
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	4a7c      	ldr	r2, [pc, #496]	; (80097e8 <UART_SetConfig+0x2e8>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d138      	bne.n	800966c <UART_SetConfig+0x16c>
 80095fa:	4b7a      	ldr	r3, [pc, #488]	; (80097e4 <UART_SetConfig+0x2e4>)
 80095fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009600:	f003 030c 	and.w	r3, r3, #12
 8009604:	2b0c      	cmp	r3, #12
 8009606:	d82d      	bhi.n	8009664 <UART_SetConfig+0x164>
 8009608:	a201      	add	r2, pc, #4	; (adr r2, 8009610 <UART_SetConfig+0x110>)
 800960a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800960e:	bf00      	nop
 8009610:	08009645 	.word	0x08009645
 8009614:	08009665 	.word	0x08009665
 8009618:	08009665 	.word	0x08009665
 800961c:	08009665 	.word	0x08009665
 8009620:	08009655 	.word	0x08009655
 8009624:	08009665 	.word	0x08009665
 8009628:	08009665 	.word	0x08009665
 800962c:	08009665 	.word	0x08009665
 8009630:	0800964d 	.word	0x0800964d
 8009634:	08009665 	.word	0x08009665
 8009638:	08009665 	.word	0x08009665
 800963c:	08009665 	.word	0x08009665
 8009640:	0800965d 	.word	0x0800965d
 8009644:	2300      	movs	r3, #0
 8009646:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800964a:	e0d8      	b.n	80097fe <UART_SetConfig+0x2fe>
 800964c:	2302      	movs	r3, #2
 800964e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009652:	e0d4      	b.n	80097fe <UART_SetConfig+0x2fe>
 8009654:	2304      	movs	r3, #4
 8009656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800965a:	e0d0      	b.n	80097fe <UART_SetConfig+0x2fe>
 800965c:	2308      	movs	r3, #8
 800965e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009662:	e0cc      	b.n	80097fe <UART_SetConfig+0x2fe>
 8009664:	2310      	movs	r3, #16
 8009666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800966a:	e0c8      	b.n	80097fe <UART_SetConfig+0x2fe>
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4a5e      	ldr	r2, [pc, #376]	; (80097ec <UART_SetConfig+0x2ec>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d125      	bne.n	80096c2 <UART_SetConfig+0x1c2>
 8009676:	4b5b      	ldr	r3, [pc, #364]	; (80097e4 <UART_SetConfig+0x2e4>)
 8009678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800967c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009680:	2b30      	cmp	r3, #48	; 0x30
 8009682:	d016      	beq.n	80096b2 <UART_SetConfig+0x1b2>
 8009684:	2b30      	cmp	r3, #48	; 0x30
 8009686:	d818      	bhi.n	80096ba <UART_SetConfig+0x1ba>
 8009688:	2b20      	cmp	r3, #32
 800968a:	d00a      	beq.n	80096a2 <UART_SetConfig+0x1a2>
 800968c:	2b20      	cmp	r3, #32
 800968e:	d814      	bhi.n	80096ba <UART_SetConfig+0x1ba>
 8009690:	2b00      	cmp	r3, #0
 8009692:	d002      	beq.n	800969a <UART_SetConfig+0x19a>
 8009694:	2b10      	cmp	r3, #16
 8009696:	d008      	beq.n	80096aa <UART_SetConfig+0x1aa>
 8009698:	e00f      	b.n	80096ba <UART_SetConfig+0x1ba>
 800969a:	2300      	movs	r3, #0
 800969c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096a0:	e0ad      	b.n	80097fe <UART_SetConfig+0x2fe>
 80096a2:	2302      	movs	r3, #2
 80096a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096a8:	e0a9      	b.n	80097fe <UART_SetConfig+0x2fe>
 80096aa:	2304      	movs	r3, #4
 80096ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096b0:	e0a5      	b.n	80097fe <UART_SetConfig+0x2fe>
 80096b2:	2308      	movs	r3, #8
 80096b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096b8:	e0a1      	b.n	80097fe <UART_SetConfig+0x2fe>
 80096ba:	2310      	movs	r3, #16
 80096bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096c0:	e09d      	b.n	80097fe <UART_SetConfig+0x2fe>
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	4a4a      	ldr	r2, [pc, #296]	; (80097f0 <UART_SetConfig+0x2f0>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d125      	bne.n	8009718 <UART_SetConfig+0x218>
 80096cc:	4b45      	ldr	r3, [pc, #276]	; (80097e4 <UART_SetConfig+0x2e4>)
 80096ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80096d6:	2bc0      	cmp	r3, #192	; 0xc0
 80096d8:	d016      	beq.n	8009708 <UART_SetConfig+0x208>
 80096da:	2bc0      	cmp	r3, #192	; 0xc0
 80096dc:	d818      	bhi.n	8009710 <UART_SetConfig+0x210>
 80096de:	2b80      	cmp	r3, #128	; 0x80
 80096e0:	d00a      	beq.n	80096f8 <UART_SetConfig+0x1f8>
 80096e2:	2b80      	cmp	r3, #128	; 0x80
 80096e4:	d814      	bhi.n	8009710 <UART_SetConfig+0x210>
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d002      	beq.n	80096f0 <UART_SetConfig+0x1f0>
 80096ea:	2b40      	cmp	r3, #64	; 0x40
 80096ec:	d008      	beq.n	8009700 <UART_SetConfig+0x200>
 80096ee:	e00f      	b.n	8009710 <UART_SetConfig+0x210>
 80096f0:	2300      	movs	r3, #0
 80096f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096f6:	e082      	b.n	80097fe <UART_SetConfig+0x2fe>
 80096f8:	2302      	movs	r3, #2
 80096fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096fe:	e07e      	b.n	80097fe <UART_SetConfig+0x2fe>
 8009700:	2304      	movs	r3, #4
 8009702:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009706:	e07a      	b.n	80097fe <UART_SetConfig+0x2fe>
 8009708:	2308      	movs	r3, #8
 800970a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800970e:	e076      	b.n	80097fe <UART_SetConfig+0x2fe>
 8009710:	2310      	movs	r3, #16
 8009712:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009716:	e072      	b.n	80097fe <UART_SetConfig+0x2fe>
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	4a35      	ldr	r2, [pc, #212]	; (80097f4 <UART_SetConfig+0x2f4>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d12a      	bne.n	8009778 <UART_SetConfig+0x278>
 8009722:	4b30      	ldr	r3, [pc, #192]	; (80097e4 <UART_SetConfig+0x2e4>)
 8009724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009728:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800972c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009730:	d01a      	beq.n	8009768 <UART_SetConfig+0x268>
 8009732:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009736:	d81b      	bhi.n	8009770 <UART_SetConfig+0x270>
 8009738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800973c:	d00c      	beq.n	8009758 <UART_SetConfig+0x258>
 800973e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009742:	d815      	bhi.n	8009770 <UART_SetConfig+0x270>
 8009744:	2b00      	cmp	r3, #0
 8009746:	d003      	beq.n	8009750 <UART_SetConfig+0x250>
 8009748:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800974c:	d008      	beq.n	8009760 <UART_SetConfig+0x260>
 800974e:	e00f      	b.n	8009770 <UART_SetConfig+0x270>
 8009750:	2300      	movs	r3, #0
 8009752:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009756:	e052      	b.n	80097fe <UART_SetConfig+0x2fe>
 8009758:	2302      	movs	r3, #2
 800975a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800975e:	e04e      	b.n	80097fe <UART_SetConfig+0x2fe>
 8009760:	2304      	movs	r3, #4
 8009762:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009766:	e04a      	b.n	80097fe <UART_SetConfig+0x2fe>
 8009768:	2308      	movs	r3, #8
 800976a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800976e:	e046      	b.n	80097fe <UART_SetConfig+0x2fe>
 8009770:	2310      	movs	r3, #16
 8009772:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009776:	e042      	b.n	80097fe <UART_SetConfig+0x2fe>
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	4a17      	ldr	r2, [pc, #92]	; (80097dc <UART_SetConfig+0x2dc>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d13a      	bne.n	80097f8 <UART_SetConfig+0x2f8>
 8009782:	4b18      	ldr	r3, [pc, #96]	; (80097e4 <UART_SetConfig+0x2e4>)
 8009784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009788:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800978c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009790:	d01a      	beq.n	80097c8 <UART_SetConfig+0x2c8>
 8009792:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009796:	d81b      	bhi.n	80097d0 <UART_SetConfig+0x2d0>
 8009798:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800979c:	d00c      	beq.n	80097b8 <UART_SetConfig+0x2b8>
 800979e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097a2:	d815      	bhi.n	80097d0 <UART_SetConfig+0x2d0>
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d003      	beq.n	80097b0 <UART_SetConfig+0x2b0>
 80097a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097ac:	d008      	beq.n	80097c0 <UART_SetConfig+0x2c0>
 80097ae:	e00f      	b.n	80097d0 <UART_SetConfig+0x2d0>
 80097b0:	2300      	movs	r3, #0
 80097b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097b6:	e022      	b.n	80097fe <UART_SetConfig+0x2fe>
 80097b8:	2302      	movs	r3, #2
 80097ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097be:	e01e      	b.n	80097fe <UART_SetConfig+0x2fe>
 80097c0:	2304      	movs	r3, #4
 80097c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097c6:	e01a      	b.n	80097fe <UART_SetConfig+0x2fe>
 80097c8:	2308      	movs	r3, #8
 80097ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097ce:	e016      	b.n	80097fe <UART_SetConfig+0x2fe>
 80097d0:	2310      	movs	r3, #16
 80097d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097d6:	e012      	b.n	80097fe <UART_SetConfig+0x2fe>
 80097d8:	cfff69f3 	.word	0xcfff69f3
 80097dc:	40008000 	.word	0x40008000
 80097e0:	40013800 	.word	0x40013800
 80097e4:	40021000 	.word	0x40021000
 80097e8:	40004400 	.word	0x40004400
 80097ec:	40004800 	.word	0x40004800
 80097f0:	40004c00 	.word	0x40004c00
 80097f4:	40005000 	.word	0x40005000
 80097f8:	2310      	movs	r3, #16
 80097fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4aae      	ldr	r2, [pc, #696]	; (8009abc <UART_SetConfig+0x5bc>)
 8009804:	4293      	cmp	r3, r2
 8009806:	f040 8097 	bne.w	8009938 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800980a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800980e:	2b08      	cmp	r3, #8
 8009810:	d823      	bhi.n	800985a <UART_SetConfig+0x35a>
 8009812:	a201      	add	r2, pc, #4	; (adr r2, 8009818 <UART_SetConfig+0x318>)
 8009814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009818:	0800983d 	.word	0x0800983d
 800981c:	0800985b 	.word	0x0800985b
 8009820:	08009845 	.word	0x08009845
 8009824:	0800985b 	.word	0x0800985b
 8009828:	0800984b 	.word	0x0800984b
 800982c:	0800985b 	.word	0x0800985b
 8009830:	0800985b 	.word	0x0800985b
 8009834:	0800985b 	.word	0x0800985b
 8009838:	08009853 	.word	0x08009853
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800983c:	f7fb ffdc 	bl	80057f8 <HAL_RCC_GetPCLK1Freq>
 8009840:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009842:	e010      	b.n	8009866 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009844:	4b9e      	ldr	r3, [pc, #632]	; (8009ac0 <UART_SetConfig+0x5c0>)
 8009846:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009848:	e00d      	b.n	8009866 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800984a:	f7fb ff3d 	bl	80056c8 <HAL_RCC_GetSysClockFreq>
 800984e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009850:	e009      	b.n	8009866 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009852:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009856:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009858:	e005      	b.n	8009866 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800985a:	2300      	movs	r3, #0
 800985c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800985e:	2301      	movs	r3, #1
 8009860:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009864:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009868:	2b00      	cmp	r3, #0
 800986a:	f000 8130 	beq.w	8009ace <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009872:	4a94      	ldr	r2, [pc, #592]	; (8009ac4 <UART_SetConfig+0x5c4>)
 8009874:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009878:	461a      	mov	r2, r3
 800987a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800987c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009880:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	685a      	ldr	r2, [r3, #4]
 8009886:	4613      	mov	r3, r2
 8009888:	005b      	lsls	r3, r3, #1
 800988a:	4413      	add	r3, r2
 800988c:	69ba      	ldr	r2, [r7, #24]
 800988e:	429a      	cmp	r2, r3
 8009890:	d305      	bcc.n	800989e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009898:	69ba      	ldr	r2, [r7, #24]
 800989a:	429a      	cmp	r2, r3
 800989c:	d903      	bls.n	80098a6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800989e:	2301      	movs	r3, #1
 80098a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80098a4:	e113      	b.n	8009ace <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80098a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a8:	2200      	movs	r2, #0
 80098aa:	60bb      	str	r3, [r7, #8]
 80098ac:	60fa      	str	r2, [r7, #12]
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b2:	4a84      	ldr	r2, [pc, #528]	; (8009ac4 <UART_SetConfig+0x5c4>)
 80098b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80098b8:	b29b      	uxth	r3, r3
 80098ba:	2200      	movs	r2, #0
 80098bc:	603b      	str	r3, [r7, #0]
 80098be:	607a      	str	r2, [r7, #4]
 80098c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80098c8:	f7f7 f9f6 	bl	8000cb8 <__aeabi_uldivmod>
 80098cc:	4602      	mov	r2, r0
 80098ce:	460b      	mov	r3, r1
 80098d0:	4610      	mov	r0, r2
 80098d2:	4619      	mov	r1, r3
 80098d4:	f04f 0200 	mov.w	r2, #0
 80098d8:	f04f 0300 	mov.w	r3, #0
 80098dc:	020b      	lsls	r3, r1, #8
 80098de:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80098e2:	0202      	lsls	r2, r0, #8
 80098e4:	6979      	ldr	r1, [r7, #20]
 80098e6:	6849      	ldr	r1, [r1, #4]
 80098e8:	0849      	lsrs	r1, r1, #1
 80098ea:	2000      	movs	r0, #0
 80098ec:	460c      	mov	r4, r1
 80098ee:	4605      	mov	r5, r0
 80098f0:	eb12 0804 	adds.w	r8, r2, r4
 80098f4:	eb43 0905 	adc.w	r9, r3, r5
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	2200      	movs	r2, #0
 80098fe:	469a      	mov	sl, r3
 8009900:	4693      	mov	fp, r2
 8009902:	4652      	mov	r2, sl
 8009904:	465b      	mov	r3, fp
 8009906:	4640      	mov	r0, r8
 8009908:	4649      	mov	r1, r9
 800990a:	f7f7 f9d5 	bl	8000cb8 <__aeabi_uldivmod>
 800990e:	4602      	mov	r2, r0
 8009910:	460b      	mov	r3, r1
 8009912:	4613      	mov	r3, r2
 8009914:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009916:	6a3b      	ldr	r3, [r7, #32]
 8009918:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800991c:	d308      	bcc.n	8009930 <UART_SetConfig+0x430>
 800991e:	6a3b      	ldr	r3, [r7, #32]
 8009920:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009924:	d204      	bcs.n	8009930 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	6a3a      	ldr	r2, [r7, #32]
 800992c:	60da      	str	r2, [r3, #12]
 800992e:	e0ce      	b.n	8009ace <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009930:	2301      	movs	r3, #1
 8009932:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009936:	e0ca      	b.n	8009ace <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	69db      	ldr	r3, [r3, #28]
 800993c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009940:	d166      	bne.n	8009a10 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009942:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009946:	2b08      	cmp	r3, #8
 8009948:	d827      	bhi.n	800999a <UART_SetConfig+0x49a>
 800994a:	a201      	add	r2, pc, #4	; (adr r2, 8009950 <UART_SetConfig+0x450>)
 800994c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009950:	08009975 	.word	0x08009975
 8009954:	0800997d 	.word	0x0800997d
 8009958:	08009985 	.word	0x08009985
 800995c:	0800999b 	.word	0x0800999b
 8009960:	0800998b 	.word	0x0800998b
 8009964:	0800999b 	.word	0x0800999b
 8009968:	0800999b 	.word	0x0800999b
 800996c:	0800999b 	.word	0x0800999b
 8009970:	08009993 	.word	0x08009993
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009974:	f7fb ff40 	bl	80057f8 <HAL_RCC_GetPCLK1Freq>
 8009978:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800997a:	e014      	b.n	80099a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800997c:	f7fb ff52 	bl	8005824 <HAL_RCC_GetPCLK2Freq>
 8009980:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009982:	e010      	b.n	80099a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009984:	4b4e      	ldr	r3, [pc, #312]	; (8009ac0 <UART_SetConfig+0x5c0>)
 8009986:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009988:	e00d      	b.n	80099a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800998a:	f7fb fe9d 	bl	80056c8 <HAL_RCC_GetSysClockFreq>
 800998e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009990:	e009      	b.n	80099a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009992:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009996:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009998:	e005      	b.n	80099a6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800999a:	2300      	movs	r3, #0
 800999c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800999e:	2301      	movs	r3, #1
 80099a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80099a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80099a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	f000 8090 	beq.w	8009ace <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b2:	4a44      	ldr	r2, [pc, #272]	; (8009ac4 <UART_SetConfig+0x5c4>)
 80099b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099b8:	461a      	mov	r2, r3
 80099ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80099c0:	005a      	lsls	r2, r3, #1
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	685b      	ldr	r3, [r3, #4]
 80099c6:	085b      	lsrs	r3, r3, #1
 80099c8:	441a      	add	r2, r3
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80099d2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80099d4:	6a3b      	ldr	r3, [r7, #32]
 80099d6:	2b0f      	cmp	r3, #15
 80099d8:	d916      	bls.n	8009a08 <UART_SetConfig+0x508>
 80099da:	6a3b      	ldr	r3, [r7, #32]
 80099dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099e0:	d212      	bcs.n	8009a08 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80099e2:	6a3b      	ldr	r3, [r7, #32]
 80099e4:	b29b      	uxth	r3, r3
 80099e6:	f023 030f 	bic.w	r3, r3, #15
 80099ea:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80099ec:	6a3b      	ldr	r3, [r7, #32]
 80099ee:	085b      	lsrs	r3, r3, #1
 80099f0:	b29b      	uxth	r3, r3
 80099f2:	f003 0307 	and.w	r3, r3, #7
 80099f6:	b29a      	uxth	r2, r3
 80099f8:	8bfb      	ldrh	r3, [r7, #30]
 80099fa:	4313      	orrs	r3, r2
 80099fc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	8bfa      	ldrh	r2, [r7, #30]
 8009a04:	60da      	str	r2, [r3, #12]
 8009a06:	e062      	b.n	8009ace <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009a08:	2301      	movs	r3, #1
 8009a0a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009a0e:	e05e      	b.n	8009ace <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009a10:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009a14:	2b08      	cmp	r3, #8
 8009a16:	d828      	bhi.n	8009a6a <UART_SetConfig+0x56a>
 8009a18:	a201      	add	r2, pc, #4	; (adr r2, 8009a20 <UART_SetConfig+0x520>)
 8009a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a1e:	bf00      	nop
 8009a20:	08009a45 	.word	0x08009a45
 8009a24:	08009a4d 	.word	0x08009a4d
 8009a28:	08009a55 	.word	0x08009a55
 8009a2c:	08009a6b 	.word	0x08009a6b
 8009a30:	08009a5b 	.word	0x08009a5b
 8009a34:	08009a6b 	.word	0x08009a6b
 8009a38:	08009a6b 	.word	0x08009a6b
 8009a3c:	08009a6b 	.word	0x08009a6b
 8009a40:	08009a63 	.word	0x08009a63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a44:	f7fb fed8 	bl	80057f8 <HAL_RCC_GetPCLK1Freq>
 8009a48:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009a4a:	e014      	b.n	8009a76 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a4c:	f7fb feea 	bl	8005824 <HAL_RCC_GetPCLK2Freq>
 8009a50:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009a52:	e010      	b.n	8009a76 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009a54:	4b1a      	ldr	r3, [pc, #104]	; (8009ac0 <UART_SetConfig+0x5c0>)
 8009a56:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009a58:	e00d      	b.n	8009a76 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a5a:	f7fb fe35 	bl	80056c8 <HAL_RCC_GetSysClockFreq>
 8009a5e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009a60:	e009      	b.n	8009a76 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009a68:	e005      	b.n	8009a76 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009a6e:	2301      	movs	r3, #1
 8009a70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009a74:	bf00      	nop
    }

    if (pclk != 0U)
 8009a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d028      	beq.n	8009ace <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a80:	4a10      	ldr	r2, [pc, #64]	; (8009ac4 <UART_SetConfig+0x5c4>)
 8009a82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a86:	461a      	mov	r2, r3
 8009a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a8a:	fbb3 f2f2 	udiv	r2, r3, r2
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	085b      	lsrs	r3, r3, #1
 8009a94:	441a      	add	r2, r3
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	685b      	ldr	r3, [r3, #4]
 8009a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a9e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009aa0:	6a3b      	ldr	r3, [r7, #32]
 8009aa2:	2b0f      	cmp	r3, #15
 8009aa4:	d910      	bls.n	8009ac8 <UART_SetConfig+0x5c8>
 8009aa6:	6a3b      	ldr	r3, [r7, #32]
 8009aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009aac:	d20c      	bcs.n	8009ac8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009aae:	6a3b      	ldr	r3, [r7, #32]
 8009ab0:	b29a      	uxth	r2, r3
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	60da      	str	r2, [r3, #12]
 8009ab8:	e009      	b.n	8009ace <UART_SetConfig+0x5ce>
 8009aba:	bf00      	nop
 8009abc:	40008000 	.word	0x40008000
 8009ac0:	00f42400 	.word	0x00f42400
 8009ac4:	0800f370 	.word	0x0800f370
      }
      else
      {
        ret = HAL_ERROR;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	2201      	movs	r2, #1
 8009ad2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	2201      	movs	r2, #1
 8009ada:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009aea:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3730      	adds	r7, #48	; 0x30
 8009af2:	46bd      	mov	sp, r7
 8009af4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009af8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009af8:	b480      	push	{r7}
 8009afa:	b083      	sub	sp, #12
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b04:	f003 0301 	and.w	r3, r3, #1
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d00a      	beq.n	8009b22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	430a      	orrs	r2, r1
 8009b20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b26:	f003 0302 	and.w	r3, r3, #2
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d00a      	beq.n	8009b44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	430a      	orrs	r2, r1
 8009b42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b48:	f003 0304 	and.w	r3, r3, #4
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d00a      	beq.n	8009b66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	685b      	ldr	r3, [r3, #4]
 8009b56:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	430a      	orrs	r2, r1
 8009b64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b6a:	f003 0308 	and.w	r3, r3, #8
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d00a      	beq.n	8009b88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	430a      	orrs	r2, r1
 8009b86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b8c:	f003 0310 	and.w	r3, r3, #16
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d00a      	beq.n	8009baa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	689b      	ldr	r3, [r3, #8]
 8009b9a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	430a      	orrs	r2, r1
 8009ba8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bae:	f003 0320 	and.w	r3, r3, #32
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d00a      	beq.n	8009bcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	689b      	ldr	r3, [r3, #8]
 8009bbc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	430a      	orrs	r2, r1
 8009bca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d01a      	beq.n	8009c0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	430a      	orrs	r2, r1
 8009bec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009bf6:	d10a      	bne.n	8009c0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	430a      	orrs	r2, r1
 8009c0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d00a      	beq.n	8009c30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	685b      	ldr	r3, [r3, #4]
 8009c20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	430a      	orrs	r2, r1
 8009c2e:	605a      	str	r2, [r3, #4]
  }
}
 8009c30:	bf00      	nop
 8009c32:	370c      	adds	r7, #12
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr

08009c3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b086      	sub	sp, #24
 8009c40:	af02      	add	r7, sp, #8
 8009c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2200      	movs	r2, #0
 8009c48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009c4c:	f7fa f866 	bl	8003d1c <HAL_GetTick>
 8009c50:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f003 0308 	and.w	r3, r3, #8
 8009c5c:	2b08      	cmp	r3, #8
 8009c5e:	d10e      	bne.n	8009c7e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009c64:	9300      	str	r3, [sp, #0]
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f000 f82f 	bl	8009cd2 <UART_WaitOnFlagUntilTimeout>
 8009c74:	4603      	mov	r3, r0
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d001      	beq.n	8009c7e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c7a:	2303      	movs	r3, #3
 8009c7c:	e025      	b.n	8009cca <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f003 0304 	and.w	r3, r3, #4
 8009c88:	2b04      	cmp	r3, #4
 8009c8a:	d10e      	bne.n	8009caa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009c90:	9300      	str	r3, [sp, #0]
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	2200      	movs	r2, #0
 8009c96:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f000 f819 	bl	8009cd2 <UART_WaitOnFlagUntilTimeout>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d001      	beq.n	8009caa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ca6:	2303      	movs	r3, #3
 8009ca8:	e00f      	b.n	8009cca <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2220      	movs	r2, #32
 8009cae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2220      	movs	r2, #32
 8009cb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009cc8:	2300      	movs	r3, #0
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3710      	adds	r7, #16
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}

08009cd2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009cd2:	b580      	push	{r7, lr}
 8009cd4:	b09c      	sub	sp, #112	; 0x70
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	60f8      	str	r0, [r7, #12]
 8009cda:	60b9      	str	r1, [r7, #8]
 8009cdc:	603b      	str	r3, [r7, #0]
 8009cde:	4613      	mov	r3, r2
 8009ce0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ce2:	e0a9      	b.n	8009e38 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ce4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cea:	f000 80a5 	beq.w	8009e38 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009cee:	f7fa f815 	bl	8003d1c <HAL_GetTick>
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	1ad3      	subs	r3, r2, r3
 8009cf8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d302      	bcc.n	8009d04 <UART_WaitOnFlagUntilTimeout+0x32>
 8009cfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d140      	bne.n	8009d86 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d0c:	e853 3f00 	ldrex	r3, [r3]
 8009d10:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d14:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009d18:	667b      	str	r3, [r7, #100]	; 0x64
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	461a      	mov	r2, r3
 8009d20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d24:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d26:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009d28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009d2a:	e841 2300 	strex	r3, r2, [r1]
 8009d2e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009d30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d1e6      	bne.n	8009d04 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	3308      	adds	r3, #8
 8009d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d40:	e853 3f00 	ldrex	r3, [r3]
 8009d44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d48:	f023 0301 	bic.w	r3, r3, #1
 8009d4c:	663b      	str	r3, [r7, #96]	; 0x60
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	3308      	adds	r3, #8
 8009d54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009d56:	64ba      	str	r2, [r7, #72]	; 0x48
 8009d58:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009d5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d5e:	e841 2300 	strex	r3, r2, [r1]
 8009d62:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009d64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d1e5      	bne.n	8009d36 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	2220      	movs	r2, #32
 8009d6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2220      	movs	r2, #32
 8009d76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009d82:	2303      	movs	r3, #3
 8009d84:	e069      	b.n	8009e5a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f003 0304 	and.w	r3, r3, #4
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d051      	beq.n	8009e38 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	69db      	ldr	r3, [r3, #28]
 8009d9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009da2:	d149      	bne.n	8009e38 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009dac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db6:	e853 3f00 	ldrex	r3, [r3]
 8009dba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dbe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009dc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	461a      	mov	r2, r3
 8009dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009dcc:	637b      	str	r3, [r7, #52]	; 0x34
 8009dce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009dd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009dd4:	e841 2300 	strex	r3, r2, [r1]
 8009dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d1e6      	bne.n	8009dae <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	3308      	adds	r3, #8
 8009de6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	e853 3f00 	ldrex	r3, [r3]
 8009dee:	613b      	str	r3, [r7, #16]
   return(result);
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	f023 0301 	bic.w	r3, r3, #1
 8009df6:	66bb      	str	r3, [r7, #104]	; 0x68
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	3308      	adds	r3, #8
 8009dfe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009e00:	623a      	str	r2, [r7, #32]
 8009e02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e04:	69f9      	ldr	r1, [r7, #28]
 8009e06:	6a3a      	ldr	r2, [r7, #32]
 8009e08:	e841 2300 	strex	r3, r2, [r1]
 8009e0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8009e0e:	69bb      	ldr	r3, [r7, #24]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d1e5      	bne.n	8009de0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2220      	movs	r2, #32
 8009e18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2220      	movs	r2, #32
 8009e20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	2220      	movs	r2, #32
 8009e28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009e34:	2303      	movs	r3, #3
 8009e36:	e010      	b.n	8009e5a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	69da      	ldr	r2, [r3, #28]
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	4013      	ands	r3, r2
 8009e42:	68ba      	ldr	r2, [r7, #8]
 8009e44:	429a      	cmp	r2, r3
 8009e46:	bf0c      	ite	eq
 8009e48:	2301      	moveq	r3, #1
 8009e4a:	2300      	movne	r3, #0
 8009e4c:	b2db      	uxtb	r3, r3
 8009e4e:	461a      	mov	r2, r3
 8009e50:	79fb      	ldrb	r3, [r7, #7]
 8009e52:	429a      	cmp	r2, r3
 8009e54:	f43f af46 	beq.w	8009ce4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009e58:	2300      	movs	r3, #0
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3770      	adds	r7, #112	; 0x70
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}
	...

08009e64 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b096      	sub	sp, #88	; 0x58
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	60f8      	str	r0, [r7, #12]
 8009e6c:	60b9      	str	r1, [r7, #8]
 8009e6e:	4613      	mov	r3, r2
 8009e70:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	68ba      	ldr	r2, [r7, #8]
 8009e76:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	88fa      	ldrh	r2, [r7, #6]
 8009e7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2200      	movs	r2, #0
 8009e84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	2222      	movs	r2, #34	; 0x22
 8009e8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d02c      	beq.n	8009ef2 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e9c:	4a42      	ldr	r2, [pc, #264]	; (8009fa8 <UART_Start_Receive_DMA+0x144>)
 8009e9e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ea4:	4a41      	ldr	r2, [pc, #260]	; (8009fac <UART_Start_Receive_DMA+0x148>)
 8009ea6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009eac:	4a40      	ldr	r2, [pc, #256]	; (8009fb0 <UART_Start_Receive_DMA+0x14c>)
 8009eae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	3324      	adds	r3, #36	; 0x24
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ec8:	461a      	mov	r2, r3
 8009eca:	88fb      	ldrh	r3, [r7, #6]
 8009ecc:	f7fa f910 	bl	80040f0 <HAL_DMA_Start_IT>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d00d      	beq.n	8009ef2 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2210      	movs	r2, #16
 8009eda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2220      	movs	r2, #32
 8009eea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 8009eee:	2301      	movs	r3, #1
 8009ef0:	e055      	b.n	8009f9e <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	691b      	ldr	r3, [r3, #16]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d018      	beq.n	8009f34 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f0a:	e853 3f00 	ldrex	r3, [r3]
 8009f0e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f16:	657b      	str	r3, [r7, #84]	; 0x54
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	461a      	mov	r2, r3
 8009f1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f20:	64bb      	str	r3, [r7, #72]	; 0x48
 8009f22:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f24:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009f26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f28:	e841 2300 	strex	r3, r2, [r1]
 8009f2c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009f2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d1e6      	bne.n	8009f02 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	3308      	adds	r3, #8
 8009f3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f3e:	e853 3f00 	ldrex	r3, [r3]
 8009f42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f46:	f043 0301 	orr.w	r3, r3, #1
 8009f4a:	653b      	str	r3, [r7, #80]	; 0x50
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	3308      	adds	r3, #8
 8009f52:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009f54:	637a      	str	r2, [r7, #52]	; 0x34
 8009f56:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009f5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f5c:	e841 2300 	strex	r3, r2, [r1]
 8009f60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d1e5      	bne.n	8009f34 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	3308      	adds	r3, #8
 8009f6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	e853 3f00 	ldrex	r3, [r3]
 8009f76:	613b      	str	r3, [r7, #16]
   return(result);
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	3308      	adds	r3, #8
 8009f86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009f88:	623a      	str	r2, [r7, #32]
 8009f8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f8c:	69f9      	ldr	r1, [r7, #28]
 8009f8e:	6a3a      	ldr	r2, [r7, #32]
 8009f90:	e841 2300 	strex	r3, r2, [r1]
 8009f94:	61bb      	str	r3, [r7, #24]
   return(result);
 8009f96:	69bb      	ldr	r3, [r7, #24]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d1e5      	bne.n	8009f68 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 8009f9c:	2300      	movs	r3, #0
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3758      	adds	r7, #88	; 0x58
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
 8009fa6:	bf00      	nop
 8009fa8:	0800a103 	.word	0x0800a103
 8009fac:	0800a229 	.word	0x0800a229
 8009fb0:	0800a261 	.word	0x0800a261

08009fb4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b08f      	sub	sp, #60	; 0x3c
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
#if defined(USART_CR1_FIFOEN)
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fc2:	6a3b      	ldr	r3, [r7, #32]
 8009fc4:	e853 3f00 	ldrex	r3, [r3]
 8009fc8:	61fb      	str	r3, [r7, #28]
   return(result);
 8009fca:	69fb      	ldr	r3, [r7, #28]
 8009fcc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009fd0:	637b      	str	r3, [r7, #52]	; 0x34
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009fdc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009fe0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fe2:	e841 2300 	strex	r3, r2, [r1]
 8009fe6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d1e6      	bne.n	8009fbc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	3308      	adds	r3, #8
 8009ff4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	e853 3f00 	ldrex	r3, [r3]
 8009ffc:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a004:	633b      	str	r3, [r7, #48]	; 0x30
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	3308      	adds	r3, #8
 800a00c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a00e:	61ba      	str	r2, [r7, #24]
 800a010:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a012:	6979      	ldr	r1, [r7, #20]
 800a014:	69ba      	ldr	r2, [r7, #24]
 800a016:	e841 2300 	strex	r3, r2, [r1]
 800a01a:	613b      	str	r3, [r7, #16]
   return(result);
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d1e5      	bne.n	8009fee <UART_EndTxTransfer+0x3a>
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2220      	movs	r2, #32
 800a026:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800a02a:	bf00      	nop
 800a02c:	373c      	adds	r7, #60	; 0x3c
 800a02e:	46bd      	mov	sp, r7
 800a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a034:	4770      	bx	lr

0800a036 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a036:	b480      	push	{r7}
 800a038:	b095      	sub	sp, #84	; 0x54
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a046:	e853 3f00 	ldrex	r3, [r3]
 800a04a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a04e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a052:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	461a      	mov	r2, r3
 800a05a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a05c:	643b      	str	r3, [r7, #64]	; 0x40
 800a05e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a060:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a062:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a064:	e841 2300 	strex	r3, r2, [r1]
 800a068:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a06a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d1e6      	bne.n	800a03e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	3308      	adds	r3, #8
 800a076:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a078:	6a3b      	ldr	r3, [r7, #32]
 800a07a:	e853 3f00 	ldrex	r3, [r3]
 800a07e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a080:	69fb      	ldr	r3, [r7, #28]
 800a082:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a086:	f023 0301 	bic.w	r3, r3, #1
 800a08a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	3308      	adds	r3, #8
 800a092:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a094:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a096:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a098:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a09a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a09c:	e841 2300 	strex	r3, r2, [r1]
 800a0a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d1e3      	bne.n	800a070 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	d118      	bne.n	800a0e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	e853 3f00 	ldrex	r3, [r3]
 800a0bc:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	f023 0310 	bic.w	r3, r3, #16
 800a0c4:	647b      	str	r3, [r7, #68]	; 0x44
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0ce:	61bb      	str	r3, [r7, #24]
 800a0d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0d2:	6979      	ldr	r1, [r7, #20]
 800a0d4:	69ba      	ldr	r2, [r7, #24]
 800a0d6:	e841 2300 	strex	r3, r2, [r1]
 800a0da:	613b      	str	r3, [r7, #16]
   return(result);
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d1e6      	bne.n	800a0b0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2220      	movs	r2, #32
 800a0e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a0f6:	bf00      	nop
 800a0f8:	3754      	adds	r7, #84	; 0x54
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a100:	4770      	bx	lr

0800a102 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a102:	b580      	push	{r7, lr}
 800a104:	b09c      	sub	sp, #112	; 0x70
 800a106:	af00      	add	r7, sp, #0
 800a108:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a10e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f003 0320 	and.w	r3, r3, #32
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d171      	bne.n	800a202 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800a11e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a120:	2200      	movs	r2, #0
 800a122:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a12c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a12e:	e853 3f00 	ldrex	r3, [r3]
 800a132:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a134:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a136:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a13a:	66bb      	str	r3, [r7, #104]	; 0x68
 800a13c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	461a      	mov	r2, r3
 800a142:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a144:	65bb      	str	r3, [r7, #88]	; 0x58
 800a146:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a148:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a14a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a14c:	e841 2300 	strex	r3, r2, [r1]
 800a150:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a152:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a154:	2b00      	cmp	r3, #0
 800a156:	d1e6      	bne.n	800a126 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	3308      	adds	r3, #8
 800a15e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a162:	e853 3f00 	ldrex	r3, [r3]
 800a166:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a16a:	f023 0301 	bic.w	r3, r3, #1
 800a16e:	667b      	str	r3, [r7, #100]	; 0x64
 800a170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	3308      	adds	r3, #8
 800a176:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a178:	647a      	str	r2, [r7, #68]	; 0x44
 800a17a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a17c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a17e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a180:	e841 2300 	strex	r3, r2, [r1]
 800a184:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d1e5      	bne.n	800a158 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a18c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	3308      	adds	r3, #8
 800a192:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a196:	e853 3f00 	ldrex	r3, [r3]
 800a19a:	623b      	str	r3, [r7, #32]
   return(result);
 800a19c:	6a3b      	ldr	r3, [r7, #32]
 800a19e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1a2:	663b      	str	r3, [r7, #96]	; 0x60
 800a1a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	3308      	adds	r3, #8
 800a1aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a1ac:	633a      	str	r2, [r7, #48]	; 0x30
 800a1ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a1b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1b4:	e841 2300 	strex	r3, r2, [r1]
 800a1b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d1e5      	bne.n	800a18c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a1c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1c2:	2220      	movs	r2, #32
 800a1c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	d118      	bne.n	800a202 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	e853 3f00 	ldrex	r3, [r3]
 800a1dc:	60fb      	str	r3, [r7, #12]
   return(result);
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	f023 0310 	bic.w	r3, r3, #16
 800a1e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a1e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1ee:	61fb      	str	r3, [r7, #28]
 800a1f0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1f2:	69b9      	ldr	r1, [r7, #24]
 800a1f4:	69fa      	ldr	r2, [r7, #28]
 800a1f6:	e841 2300 	strex	r3, r2, [r1]
 800a1fa:	617b      	str	r3, [r7, #20]
   return(result);
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d1e6      	bne.n	800a1d0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a204:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a206:	2b01      	cmp	r3, #1
 800a208:	d107      	bne.n	800a21a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a20a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a20c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a210:	4619      	mov	r1, r3
 800a212:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a214:	f7f8 f9ea 	bl	80025ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a218:	e002      	b.n	800a220 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800a21a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a21c:	f7ff f952 	bl	80094c4 <HAL_UART_RxCpltCallback>
}
 800a220:	bf00      	nop
 800a222:	3770      	adds	r7, #112	; 0x70
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b084      	sub	sp, #16
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a234:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a23a:	2b01      	cmp	r3, #1
 800a23c:	d109      	bne.n	800a252 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a244:	085b      	lsrs	r3, r3, #1
 800a246:	b29b      	uxth	r3, r3
 800a248:	4619      	mov	r1, r3
 800a24a:	68f8      	ldr	r0, [r7, #12]
 800a24c:	f7f8 f9ce 	bl	80025ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a250:	e002      	b.n	800a258 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800a252:	68f8      	ldr	r0, [r7, #12]
 800a254:	f7ff f940 	bl	80094d8 <HAL_UART_RxHalfCpltCallback>
}
 800a258:	bf00      	nop
 800a25a:	3710      	adds	r7, #16
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}

0800a260 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b086      	sub	sp, #24
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a26c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a274:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a27c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	689b      	ldr	r3, [r3, #8]
 800a284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a288:	2b80      	cmp	r3, #128	; 0x80
 800a28a:	d109      	bne.n	800a2a0 <UART_DMAError+0x40>
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	2b21      	cmp	r3, #33	; 0x21
 800a290:	d106      	bne.n	800a2a0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	2200      	movs	r2, #0
 800a296:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800a29a:	6978      	ldr	r0, [r7, #20]
 800a29c:	f7ff fe8a 	bl	8009fb4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	689b      	ldr	r3, [r3, #8]
 800a2a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2aa:	2b40      	cmp	r3, #64	; 0x40
 800a2ac:	d109      	bne.n	800a2c2 <UART_DMAError+0x62>
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	2b22      	cmp	r3, #34	; 0x22
 800a2b2:	d106      	bne.n	800a2c2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800a2bc:	6978      	ldr	r0, [r7, #20]
 800a2be:	f7ff feba 	bl	800a036 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2c8:	f043 0210 	orr.w	r2, r3, #16
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a2d2:	6978      	ldr	r0, [r7, #20]
 800a2d4:	f7ff f90a 	bl	80094ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2d8:	bf00      	nop
 800a2da:	3718      	adds	r7, #24
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}

0800a2e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b084      	sub	sp, #16
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a2fe:	68f8      	ldr	r0, [r7, #12]
 800a300:	f7ff f8f4 	bl	80094ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a304:	bf00      	nop
 800a306:	3710      	adds	r7, #16
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b088      	sub	sp, #32
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	e853 3f00 	ldrex	r3, [r3]
 800a320:	60bb      	str	r3, [r7, #8]
   return(result);
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a328:	61fb      	str	r3, [r7, #28]
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	461a      	mov	r2, r3
 800a330:	69fb      	ldr	r3, [r7, #28]
 800a332:	61bb      	str	r3, [r7, #24]
 800a334:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a336:	6979      	ldr	r1, [r7, #20]
 800a338:	69ba      	ldr	r2, [r7, #24]
 800a33a:	e841 2300 	strex	r3, r2, [r1]
 800a33e:	613b      	str	r3, [r7, #16]
   return(result);
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d1e6      	bne.n	800a314 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2220      	movs	r2, #32
 800a34a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2200      	movs	r2, #0
 800a352:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f7ff f8ab 	bl	80094b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a35a:	bf00      	nop
 800a35c:	3720      	adds	r7, #32
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}

0800a362 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a362:	b480      	push	{r7}
 800a364:	b083      	sub	sp, #12
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a36a:	bf00      	nop
 800a36c:	370c      	adds	r7, #12
 800a36e:	46bd      	mov	sp, r7
 800a370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a374:	4770      	bx	lr

0800a376 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a376:	b480      	push	{r7}
 800a378:	b083      	sub	sp, #12
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a37e:	bf00      	nop
 800a380:	370c      	adds	r7, #12
 800a382:	46bd      	mov	sp, r7
 800a384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a388:	4770      	bx	lr

0800a38a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a38a:	b480      	push	{r7}
 800a38c:	b083      	sub	sp, #12
 800a38e:	af00      	add	r7, sp, #0
 800a390:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a392:	bf00      	nop
 800a394:	370c      	adds	r7, #12
 800a396:	46bd      	mov	sp, r7
 800a398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39c:	4770      	bx	lr

0800a39e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a39e:	b480      	push	{r7}
 800a3a0:	b085      	sub	sp, #20
 800a3a2:	af00      	add	r7, sp, #0
 800a3a4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	d101      	bne.n	800a3b4 <HAL_UARTEx_DisableFifoMode+0x16>
 800a3b0:	2302      	movs	r3, #2
 800a3b2:	e027      	b.n	800a404 <HAL_UARTEx_DisableFifoMode+0x66>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2224      	movs	r2, #36	; 0x24
 800a3c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	681a      	ldr	r2, [r3, #0]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f022 0201 	bic.w	r2, r2, #1
 800a3da:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a3e2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	68fa      	ldr	r2, [r7, #12]
 800a3f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2220      	movs	r2, #32
 800a3f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a402:	2300      	movs	r3, #0
}
 800a404:	4618      	mov	r0, r3
 800a406:	3714      	adds	r7, #20
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr

0800a410 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a420:	2b01      	cmp	r3, #1
 800a422:	d101      	bne.n	800a428 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a424:	2302      	movs	r3, #2
 800a426:	e02d      	b.n	800a484 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2201      	movs	r2, #1
 800a42c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2224      	movs	r2, #36	; 0x24
 800a434:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	681a      	ldr	r2, [r3, #0]
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f022 0201 	bic.w	r2, r2, #1
 800a44e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	689b      	ldr	r3, [r3, #8]
 800a456:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	683a      	ldr	r2, [r7, #0]
 800a460:	430a      	orrs	r2, r1
 800a462:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f000 f8ab 	bl	800a5c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	68fa      	ldr	r2, [r7, #12]
 800a470:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2220      	movs	r2, #32
 800a476:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2200      	movs	r2, #0
 800a47e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a482:	2300      	movs	r3, #0
}
 800a484:	4618      	mov	r0, r3
 800a486:	3710      	adds	r7, #16
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b084      	sub	sp, #16
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	d101      	bne.n	800a4a4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a4a0:	2302      	movs	r3, #2
 800a4a2:	e02d      	b.n	800a500 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2224      	movs	r2, #36	; 0x24
 800a4b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	681a      	ldr	r2, [r3, #0]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f022 0201 	bic.w	r2, r2, #1
 800a4ca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	689b      	ldr	r3, [r3, #8]
 800a4d2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	683a      	ldr	r2, [r7, #0]
 800a4dc:	430a      	orrs	r2, r1
 800a4de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f000 f86d 	bl	800a5c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	68fa      	ldr	r2, [r7, #12]
 800a4ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2220      	movs	r2, #32
 800a4f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a4fe:	2300      	movs	r3, #0
}
 800a500:	4618      	mov	r0, r3
 800a502:	3710      	adds	r7, #16
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}

0800a508 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b08c      	sub	sp, #48	; 0x30
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	60f8      	str	r0, [r7, #12]
 800a510:	60b9      	str	r1, [r7, #8]
 800a512:	4613      	mov	r3, r2
 800a514:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a51c:	2b20      	cmp	r3, #32
 800a51e:	d14a      	bne.n	800a5b6 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d002      	beq.n	800a52c <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800a526:	88fb      	ldrh	r3, [r7, #6]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d101      	bne.n	800a530 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800a52c:	2301      	movs	r3, #1
 800a52e:	e043      	b.n	800a5b8 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a536:	2b01      	cmp	r3, #1
 800a538:	d101      	bne.n	800a53e <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 800a53a:	2302      	movs	r3, #2
 800a53c:	e03c      	b.n	800a5b8 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	2201      	movs	r2, #1
 800a542:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2201      	movs	r2, #1
 800a54a:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800a54c:	88fb      	ldrh	r3, [r7, #6]
 800a54e:	461a      	mov	r2, r3
 800a550:	68b9      	ldr	r1, [r7, #8]
 800a552:	68f8      	ldr	r0, [r7, #12]
 800a554:	f7ff fc86 	bl	8009e64 <UART_Start_Receive_DMA>
 800a558:	4603      	mov	r3, r0
 800a55a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a55e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a562:	2b00      	cmp	r3, #0
 800a564:	d124      	bne.n	800a5b0 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a56a:	2b01      	cmp	r3, #1
 800a56c:	d11d      	bne.n	800a5aa <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	2210      	movs	r2, #16
 800a574:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a57c:	69bb      	ldr	r3, [r7, #24]
 800a57e:	e853 3f00 	ldrex	r3, [r3]
 800a582:	617b      	str	r3, [r7, #20]
   return(result);
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	f043 0310 	orr.w	r3, r3, #16
 800a58a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	461a      	mov	r2, r3
 800a592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a594:	627b      	str	r3, [r7, #36]	; 0x24
 800a596:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a598:	6a39      	ldr	r1, [r7, #32]
 800a59a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a59c:	e841 2300 	strex	r3, r2, [r1]
 800a5a0:	61fb      	str	r3, [r7, #28]
   return(result);
 800a5a2:	69fb      	ldr	r3, [r7, #28]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d1e6      	bne.n	800a576 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800a5a8:	e002      	b.n	800a5b0 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800a5b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a5b4:	e000      	b.n	800a5b8 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800a5b6:	2302      	movs	r3, #2
  }
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3730      	adds	r7, #48	; 0x30
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}

0800a5c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b085      	sub	sp, #20
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d108      	bne.n	800a5e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2201      	movs	r2, #1
 800a5dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a5e0:	e031      	b.n	800a646 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a5e2:	2308      	movs	r3, #8
 800a5e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a5e6:	2308      	movs	r3, #8
 800a5e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	689b      	ldr	r3, [r3, #8]
 800a5f0:	0e5b      	lsrs	r3, r3, #25
 800a5f2:	b2db      	uxtb	r3, r3
 800a5f4:	f003 0307 	and.w	r3, r3, #7
 800a5f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	689b      	ldr	r3, [r3, #8]
 800a600:	0f5b      	lsrs	r3, r3, #29
 800a602:	b2db      	uxtb	r3, r3
 800a604:	f003 0307 	and.w	r3, r3, #7
 800a608:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a60a:	7bbb      	ldrb	r3, [r7, #14]
 800a60c:	7b3a      	ldrb	r2, [r7, #12]
 800a60e:	4911      	ldr	r1, [pc, #68]	; (800a654 <UARTEx_SetNbDataToProcess+0x94>)
 800a610:	5c8a      	ldrb	r2, [r1, r2]
 800a612:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a616:	7b3a      	ldrb	r2, [r7, #12]
 800a618:	490f      	ldr	r1, [pc, #60]	; (800a658 <UARTEx_SetNbDataToProcess+0x98>)
 800a61a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a61c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a620:	b29a      	uxth	r2, r3
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a628:	7bfb      	ldrb	r3, [r7, #15]
 800a62a:	7b7a      	ldrb	r2, [r7, #13]
 800a62c:	4909      	ldr	r1, [pc, #36]	; (800a654 <UARTEx_SetNbDataToProcess+0x94>)
 800a62e:	5c8a      	ldrb	r2, [r1, r2]
 800a630:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a634:	7b7a      	ldrb	r2, [r7, #13]
 800a636:	4908      	ldr	r1, [pc, #32]	; (800a658 <UARTEx_SetNbDataToProcess+0x98>)
 800a638:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a63a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a63e:	b29a      	uxth	r2, r3
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a646:	bf00      	nop
 800a648:	3714      	adds	r7, #20
 800a64a:	46bd      	mov	sp, r7
 800a64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a650:	4770      	bx	lr
 800a652:	bf00      	nop
 800a654:	0800f388 	.word	0x0800f388
 800a658:	0800f390 	.word	0x0800f390

0800a65c <__errno>:
 800a65c:	4b01      	ldr	r3, [pc, #4]	; (800a664 <__errno+0x8>)
 800a65e:	6818      	ldr	r0, [r3, #0]
 800a660:	4770      	bx	lr
 800a662:	bf00      	nop
 800a664:	20000080 	.word	0x20000080

0800a668 <__libc_init_array>:
 800a668:	b570      	push	{r4, r5, r6, lr}
 800a66a:	4d0d      	ldr	r5, [pc, #52]	; (800a6a0 <__libc_init_array+0x38>)
 800a66c:	4c0d      	ldr	r4, [pc, #52]	; (800a6a4 <__libc_init_array+0x3c>)
 800a66e:	1b64      	subs	r4, r4, r5
 800a670:	10a4      	asrs	r4, r4, #2
 800a672:	2600      	movs	r6, #0
 800a674:	42a6      	cmp	r6, r4
 800a676:	d109      	bne.n	800a68c <__libc_init_array+0x24>
 800a678:	4d0b      	ldr	r5, [pc, #44]	; (800a6a8 <__libc_init_array+0x40>)
 800a67a:	4c0c      	ldr	r4, [pc, #48]	; (800a6ac <__libc_init_array+0x44>)
 800a67c:	f004 fc90 	bl	800efa0 <_init>
 800a680:	1b64      	subs	r4, r4, r5
 800a682:	10a4      	asrs	r4, r4, #2
 800a684:	2600      	movs	r6, #0
 800a686:	42a6      	cmp	r6, r4
 800a688:	d105      	bne.n	800a696 <__libc_init_array+0x2e>
 800a68a:	bd70      	pop	{r4, r5, r6, pc}
 800a68c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a690:	4798      	blx	r3
 800a692:	3601      	adds	r6, #1
 800a694:	e7ee      	b.n	800a674 <__libc_init_array+0xc>
 800a696:	f855 3b04 	ldr.w	r3, [r5], #4
 800a69a:	4798      	blx	r3
 800a69c:	3601      	adds	r6, #1
 800a69e:	e7f2      	b.n	800a686 <__libc_init_array+0x1e>
 800a6a0:	0800f844 	.word	0x0800f844
 800a6a4:	0800f844 	.word	0x0800f844
 800a6a8:	0800f844 	.word	0x0800f844
 800a6ac:	0800f848 	.word	0x0800f848

0800a6b0 <memset>:
 800a6b0:	4402      	add	r2, r0
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d100      	bne.n	800a6ba <memset+0xa>
 800a6b8:	4770      	bx	lr
 800a6ba:	f803 1b01 	strb.w	r1, [r3], #1
 800a6be:	e7f9      	b.n	800a6b4 <memset+0x4>

0800a6c0 <__cvt>:
 800a6c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a6c4:	ec55 4b10 	vmov	r4, r5, d0
 800a6c8:	2d00      	cmp	r5, #0
 800a6ca:	460e      	mov	r6, r1
 800a6cc:	4619      	mov	r1, r3
 800a6ce:	462b      	mov	r3, r5
 800a6d0:	bfbb      	ittet	lt
 800a6d2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a6d6:	461d      	movlt	r5, r3
 800a6d8:	2300      	movge	r3, #0
 800a6da:	232d      	movlt	r3, #45	; 0x2d
 800a6dc:	700b      	strb	r3, [r1, #0]
 800a6de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6e0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a6e4:	4691      	mov	r9, r2
 800a6e6:	f023 0820 	bic.w	r8, r3, #32
 800a6ea:	bfbc      	itt	lt
 800a6ec:	4622      	movlt	r2, r4
 800a6ee:	4614      	movlt	r4, r2
 800a6f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a6f4:	d005      	beq.n	800a702 <__cvt+0x42>
 800a6f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a6fa:	d100      	bne.n	800a6fe <__cvt+0x3e>
 800a6fc:	3601      	adds	r6, #1
 800a6fe:	2102      	movs	r1, #2
 800a700:	e000      	b.n	800a704 <__cvt+0x44>
 800a702:	2103      	movs	r1, #3
 800a704:	ab03      	add	r3, sp, #12
 800a706:	9301      	str	r3, [sp, #4]
 800a708:	ab02      	add	r3, sp, #8
 800a70a:	9300      	str	r3, [sp, #0]
 800a70c:	ec45 4b10 	vmov	d0, r4, r5
 800a710:	4653      	mov	r3, sl
 800a712:	4632      	mov	r2, r6
 800a714:	f001 fdac 	bl	800c270 <_dtoa_r>
 800a718:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a71c:	4607      	mov	r7, r0
 800a71e:	d102      	bne.n	800a726 <__cvt+0x66>
 800a720:	f019 0f01 	tst.w	r9, #1
 800a724:	d022      	beq.n	800a76c <__cvt+0xac>
 800a726:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a72a:	eb07 0906 	add.w	r9, r7, r6
 800a72e:	d110      	bne.n	800a752 <__cvt+0x92>
 800a730:	783b      	ldrb	r3, [r7, #0]
 800a732:	2b30      	cmp	r3, #48	; 0x30
 800a734:	d10a      	bne.n	800a74c <__cvt+0x8c>
 800a736:	2200      	movs	r2, #0
 800a738:	2300      	movs	r3, #0
 800a73a:	4620      	mov	r0, r4
 800a73c:	4629      	mov	r1, r5
 800a73e:	f7f6 f9db 	bl	8000af8 <__aeabi_dcmpeq>
 800a742:	b918      	cbnz	r0, 800a74c <__cvt+0x8c>
 800a744:	f1c6 0601 	rsb	r6, r6, #1
 800a748:	f8ca 6000 	str.w	r6, [sl]
 800a74c:	f8da 3000 	ldr.w	r3, [sl]
 800a750:	4499      	add	r9, r3
 800a752:	2200      	movs	r2, #0
 800a754:	2300      	movs	r3, #0
 800a756:	4620      	mov	r0, r4
 800a758:	4629      	mov	r1, r5
 800a75a:	f7f6 f9cd 	bl	8000af8 <__aeabi_dcmpeq>
 800a75e:	b108      	cbz	r0, 800a764 <__cvt+0xa4>
 800a760:	f8cd 900c 	str.w	r9, [sp, #12]
 800a764:	2230      	movs	r2, #48	; 0x30
 800a766:	9b03      	ldr	r3, [sp, #12]
 800a768:	454b      	cmp	r3, r9
 800a76a:	d307      	bcc.n	800a77c <__cvt+0xbc>
 800a76c:	9b03      	ldr	r3, [sp, #12]
 800a76e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a770:	1bdb      	subs	r3, r3, r7
 800a772:	4638      	mov	r0, r7
 800a774:	6013      	str	r3, [r2, #0]
 800a776:	b004      	add	sp, #16
 800a778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a77c:	1c59      	adds	r1, r3, #1
 800a77e:	9103      	str	r1, [sp, #12]
 800a780:	701a      	strb	r2, [r3, #0]
 800a782:	e7f0      	b.n	800a766 <__cvt+0xa6>

0800a784 <__exponent>:
 800a784:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a786:	4603      	mov	r3, r0
 800a788:	2900      	cmp	r1, #0
 800a78a:	bfb8      	it	lt
 800a78c:	4249      	neglt	r1, r1
 800a78e:	f803 2b02 	strb.w	r2, [r3], #2
 800a792:	bfb4      	ite	lt
 800a794:	222d      	movlt	r2, #45	; 0x2d
 800a796:	222b      	movge	r2, #43	; 0x2b
 800a798:	2909      	cmp	r1, #9
 800a79a:	7042      	strb	r2, [r0, #1]
 800a79c:	dd2a      	ble.n	800a7f4 <__exponent+0x70>
 800a79e:	f10d 0407 	add.w	r4, sp, #7
 800a7a2:	46a4      	mov	ip, r4
 800a7a4:	270a      	movs	r7, #10
 800a7a6:	46a6      	mov	lr, r4
 800a7a8:	460a      	mov	r2, r1
 800a7aa:	fb91 f6f7 	sdiv	r6, r1, r7
 800a7ae:	fb07 1516 	mls	r5, r7, r6, r1
 800a7b2:	3530      	adds	r5, #48	; 0x30
 800a7b4:	2a63      	cmp	r2, #99	; 0x63
 800a7b6:	f104 34ff 	add.w	r4, r4, #4294967295
 800a7ba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a7be:	4631      	mov	r1, r6
 800a7c0:	dcf1      	bgt.n	800a7a6 <__exponent+0x22>
 800a7c2:	3130      	adds	r1, #48	; 0x30
 800a7c4:	f1ae 0502 	sub.w	r5, lr, #2
 800a7c8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a7cc:	1c44      	adds	r4, r0, #1
 800a7ce:	4629      	mov	r1, r5
 800a7d0:	4561      	cmp	r1, ip
 800a7d2:	d30a      	bcc.n	800a7ea <__exponent+0x66>
 800a7d4:	f10d 0209 	add.w	r2, sp, #9
 800a7d8:	eba2 020e 	sub.w	r2, r2, lr
 800a7dc:	4565      	cmp	r5, ip
 800a7de:	bf88      	it	hi
 800a7e0:	2200      	movhi	r2, #0
 800a7e2:	4413      	add	r3, r2
 800a7e4:	1a18      	subs	r0, r3, r0
 800a7e6:	b003      	add	sp, #12
 800a7e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a7ee:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a7f2:	e7ed      	b.n	800a7d0 <__exponent+0x4c>
 800a7f4:	2330      	movs	r3, #48	; 0x30
 800a7f6:	3130      	adds	r1, #48	; 0x30
 800a7f8:	7083      	strb	r3, [r0, #2]
 800a7fa:	70c1      	strb	r1, [r0, #3]
 800a7fc:	1d03      	adds	r3, r0, #4
 800a7fe:	e7f1      	b.n	800a7e4 <__exponent+0x60>

0800a800 <_printf_float>:
 800a800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a804:	ed2d 8b02 	vpush	{d8}
 800a808:	b08d      	sub	sp, #52	; 0x34
 800a80a:	460c      	mov	r4, r1
 800a80c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a810:	4616      	mov	r6, r2
 800a812:	461f      	mov	r7, r3
 800a814:	4605      	mov	r5, r0
 800a816:	f002 fe89 	bl	800d52c <_localeconv_r>
 800a81a:	f8d0 a000 	ldr.w	sl, [r0]
 800a81e:	4650      	mov	r0, sl
 800a820:	f7f5 fcee 	bl	8000200 <strlen>
 800a824:	2300      	movs	r3, #0
 800a826:	930a      	str	r3, [sp, #40]	; 0x28
 800a828:	6823      	ldr	r3, [r4, #0]
 800a82a:	9305      	str	r3, [sp, #20]
 800a82c:	f8d8 3000 	ldr.w	r3, [r8]
 800a830:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a834:	3307      	adds	r3, #7
 800a836:	f023 0307 	bic.w	r3, r3, #7
 800a83a:	f103 0208 	add.w	r2, r3, #8
 800a83e:	f8c8 2000 	str.w	r2, [r8]
 800a842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a846:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a84a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a84e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a852:	9307      	str	r3, [sp, #28]
 800a854:	f8cd 8018 	str.w	r8, [sp, #24]
 800a858:	ee08 0a10 	vmov	s16, r0
 800a85c:	4b9f      	ldr	r3, [pc, #636]	; (800aadc <_printf_float+0x2dc>)
 800a85e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a862:	f04f 32ff 	mov.w	r2, #4294967295
 800a866:	f7f6 f979 	bl	8000b5c <__aeabi_dcmpun>
 800a86a:	bb88      	cbnz	r0, 800a8d0 <_printf_float+0xd0>
 800a86c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a870:	4b9a      	ldr	r3, [pc, #616]	; (800aadc <_printf_float+0x2dc>)
 800a872:	f04f 32ff 	mov.w	r2, #4294967295
 800a876:	f7f6 f953 	bl	8000b20 <__aeabi_dcmple>
 800a87a:	bb48      	cbnz	r0, 800a8d0 <_printf_float+0xd0>
 800a87c:	2200      	movs	r2, #0
 800a87e:	2300      	movs	r3, #0
 800a880:	4640      	mov	r0, r8
 800a882:	4649      	mov	r1, r9
 800a884:	f7f6 f942 	bl	8000b0c <__aeabi_dcmplt>
 800a888:	b110      	cbz	r0, 800a890 <_printf_float+0x90>
 800a88a:	232d      	movs	r3, #45	; 0x2d
 800a88c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a890:	4b93      	ldr	r3, [pc, #588]	; (800aae0 <_printf_float+0x2e0>)
 800a892:	4894      	ldr	r0, [pc, #592]	; (800aae4 <_printf_float+0x2e4>)
 800a894:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a898:	bf94      	ite	ls
 800a89a:	4698      	movls	r8, r3
 800a89c:	4680      	movhi	r8, r0
 800a89e:	2303      	movs	r3, #3
 800a8a0:	6123      	str	r3, [r4, #16]
 800a8a2:	9b05      	ldr	r3, [sp, #20]
 800a8a4:	f023 0204 	bic.w	r2, r3, #4
 800a8a8:	6022      	str	r2, [r4, #0]
 800a8aa:	f04f 0900 	mov.w	r9, #0
 800a8ae:	9700      	str	r7, [sp, #0]
 800a8b0:	4633      	mov	r3, r6
 800a8b2:	aa0b      	add	r2, sp, #44	; 0x2c
 800a8b4:	4621      	mov	r1, r4
 800a8b6:	4628      	mov	r0, r5
 800a8b8:	f000 f9d8 	bl	800ac6c <_printf_common>
 800a8bc:	3001      	adds	r0, #1
 800a8be:	f040 8090 	bne.w	800a9e2 <_printf_float+0x1e2>
 800a8c2:	f04f 30ff 	mov.w	r0, #4294967295
 800a8c6:	b00d      	add	sp, #52	; 0x34
 800a8c8:	ecbd 8b02 	vpop	{d8}
 800a8cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8d0:	4642      	mov	r2, r8
 800a8d2:	464b      	mov	r3, r9
 800a8d4:	4640      	mov	r0, r8
 800a8d6:	4649      	mov	r1, r9
 800a8d8:	f7f6 f940 	bl	8000b5c <__aeabi_dcmpun>
 800a8dc:	b140      	cbz	r0, 800a8f0 <_printf_float+0xf0>
 800a8de:	464b      	mov	r3, r9
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	bfbc      	itt	lt
 800a8e4:	232d      	movlt	r3, #45	; 0x2d
 800a8e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a8ea:	487f      	ldr	r0, [pc, #508]	; (800aae8 <_printf_float+0x2e8>)
 800a8ec:	4b7f      	ldr	r3, [pc, #508]	; (800aaec <_printf_float+0x2ec>)
 800a8ee:	e7d1      	b.n	800a894 <_printf_float+0x94>
 800a8f0:	6863      	ldr	r3, [r4, #4]
 800a8f2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a8f6:	9206      	str	r2, [sp, #24]
 800a8f8:	1c5a      	adds	r2, r3, #1
 800a8fa:	d13f      	bne.n	800a97c <_printf_float+0x17c>
 800a8fc:	2306      	movs	r3, #6
 800a8fe:	6063      	str	r3, [r4, #4]
 800a900:	9b05      	ldr	r3, [sp, #20]
 800a902:	6861      	ldr	r1, [r4, #4]
 800a904:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a908:	2300      	movs	r3, #0
 800a90a:	9303      	str	r3, [sp, #12]
 800a90c:	ab0a      	add	r3, sp, #40	; 0x28
 800a90e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a912:	ab09      	add	r3, sp, #36	; 0x24
 800a914:	ec49 8b10 	vmov	d0, r8, r9
 800a918:	9300      	str	r3, [sp, #0]
 800a91a:	6022      	str	r2, [r4, #0]
 800a91c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a920:	4628      	mov	r0, r5
 800a922:	f7ff fecd 	bl	800a6c0 <__cvt>
 800a926:	9b06      	ldr	r3, [sp, #24]
 800a928:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a92a:	2b47      	cmp	r3, #71	; 0x47
 800a92c:	4680      	mov	r8, r0
 800a92e:	d108      	bne.n	800a942 <_printf_float+0x142>
 800a930:	1cc8      	adds	r0, r1, #3
 800a932:	db02      	blt.n	800a93a <_printf_float+0x13a>
 800a934:	6863      	ldr	r3, [r4, #4]
 800a936:	4299      	cmp	r1, r3
 800a938:	dd41      	ble.n	800a9be <_printf_float+0x1be>
 800a93a:	f1ab 0b02 	sub.w	fp, fp, #2
 800a93e:	fa5f fb8b 	uxtb.w	fp, fp
 800a942:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a946:	d820      	bhi.n	800a98a <_printf_float+0x18a>
 800a948:	3901      	subs	r1, #1
 800a94a:	465a      	mov	r2, fp
 800a94c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a950:	9109      	str	r1, [sp, #36]	; 0x24
 800a952:	f7ff ff17 	bl	800a784 <__exponent>
 800a956:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a958:	1813      	adds	r3, r2, r0
 800a95a:	2a01      	cmp	r2, #1
 800a95c:	4681      	mov	r9, r0
 800a95e:	6123      	str	r3, [r4, #16]
 800a960:	dc02      	bgt.n	800a968 <_printf_float+0x168>
 800a962:	6822      	ldr	r2, [r4, #0]
 800a964:	07d2      	lsls	r2, r2, #31
 800a966:	d501      	bpl.n	800a96c <_printf_float+0x16c>
 800a968:	3301      	adds	r3, #1
 800a96a:	6123      	str	r3, [r4, #16]
 800a96c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a970:	2b00      	cmp	r3, #0
 800a972:	d09c      	beq.n	800a8ae <_printf_float+0xae>
 800a974:	232d      	movs	r3, #45	; 0x2d
 800a976:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a97a:	e798      	b.n	800a8ae <_printf_float+0xae>
 800a97c:	9a06      	ldr	r2, [sp, #24]
 800a97e:	2a47      	cmp	r2, #71	; 0x47
 800a980:	d1be      	bne.n	800a900 <_printf_float+0x100>
 800a982:	2b00      	cmp	r3, #0
 800a984:	d1bc      	bne.n	800a900 <_printf_float+0x100>
 800a986:	2301      	movs	r3, #1
 800a988:	e7b9      	b.n	800a8fe <_printf_float+0xfe>
 800a98a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a98e:	d118      	bne.n	800a9c2 <_printf_float+0x1c2>
 800a990:	2900      	cmp	r1, #0
 800a992:	6863      	ldr	r3, [r4, #4]
 800a994:	dd0b      	ble.n	800a9ae <_printf_float+0x1ae>
 800a996:	6121      	str	r1, [r4, #16]
 800a998:	b913      	cbnz	r3, 800a9a0 <_printf_float+0x1a0>
 800a99a:	6822      	ldr	r2, [r4, #0]
 800a99c:	07d0      	lsls	r0, r2, #31
 800a99e:	d502      	bpl.n	800a9a6 <_printf_float+0x1a6>
 800a9a0:	3301      	adds	r3, #1
 800a9a2:	440b      	add	r3, r1
 800a9a4:	6123      	str	r3, [r4, #16]
 800a9a6:	65a1      	str	r1, [r4, #88]	; 0x58
 800a9a8:	f04f 0900 	mov.w	r9, #0
 800a9ac:	e7de      	b.n	800a96c <_printf_float+0x16c>
 800a9ae:	b913      	cbnz	r3, 800a9b6 <_printf_float+0x1b6>
 800a9b0:	6822      	ldr	r2, [r4, #0]
 800a9b2:	07d2      	lsls	r2, r2, #31
 800a9b4:	d501      	bpl.n	800a9ba <_printf_float+0x1ba>
 800a9b6:	3302      	adds	r3, #2
 800a9b8:	e7f4      	b.n	800a9a4 <_printf_float+0x1a4>
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	e7f2      	b.n	800a9a4 <_printf_float+0x1a4>
 800a9be:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a9c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9c4:	4299      	cmp	r1, r3
 800a9c6:	db05      	blt.n	800a9d4 <_printf_float+0x1d4>
 800a9c8:	6823      	ldr	r3, [r4, #0]
 800a9ca:	6121      	str	r1, [r4, #16]
 800a9cc:	07d8      	lsls	r0, r3, #31
 800a9ce:	d5ea      	bpl.n	800a9a6 <_printf_float+0x1a6>
 800a9d0:	1c4b      	adds	r3, r1, #1
 800a9d2:	e7e7      	b.n	800a9a4 <_printf_float+0x1a4>
 800a9d4:	2900      	cmp	r1, #0
 800a9d6:	bfd4      	ite	le
 800a9d8:	f1c1 0202 	rsble	r2, r1, #2
 800a9dc:	2201      	movgt	r2, #1
 800a9de:	4413      	add	r3, r2
 800a9e0:	e7e0      	b.n	800a9a4 <_printf_float+0x1a4>
 800a9e2:	6823      	ldr	r3, [r4, #0]
 800a9e4:	055a      	lsls	r2, r3, #21
 800a9e6:	d407      	bmi.n	800a9f8 <_printf_float+0x1f8>
 800a9e8:	6923      	ldr	r3, [r4, #16]
 800a9ea:	4642      	mov	r2, r8
 800a9ec:	4631      	mov	r1, r6
 800a9ee:	4628      	mov	r0, r5
 800a9f0:	47b8      	blx	r7
 800a9f2:	3001      	adds	r0, #1
 800a9f4:	d12c      	bne.n	800aa50 <_printf_float+0x250>
 800a9f6:	e764      	b.n	800a8c2 <_printf_float+0xc2>
 800a9f8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a9fc:	f240 80e0 	bls.w	800abc0 <_printf_float+0x3c0>
 800aa00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aa04:	2200      	movs	r2, #0
 800aa06:	2300      	movs	r3, #0
 800aa08:	f7f6 f876 	bl	8000af8 <__aeabi_dcmpeq>
 800aa0c:	2800      	cmp	r0, #0
 800aa0e:	d034      	beq.n	800aa7a <_printf_float+0x27a>
 800aa10:	4a37      	ldr	r2, [pc, #220]	; (800aaf0 <_printf_float+0x2f0>)
 800aa12:	2301      	movs	r3, #1
 800aa14:	4631      	mov	r1, r6
 800aa16:	4628      	mov	r0, r5
 800aa18:	47b8      	blx	r7
 800aa1a:	3001      	adds	r0, #1
 800aa1c:	f43f af51 	beq.w	800a8c2 <_printf_float+0xc2>
 800aa20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa24:	429a      	cmp	r2, r3
 800aa26:	db02      	blt.n	800aa2e <_printf_float+0x22e>
 800aa28:	6823      	ldr	r3, [r4, #0]
 800aa2a:	07d8      	lsls	r0, r3, #31
 800aa2c:	d510      	bpl.n	800aa50 <_printf_float+0x250>
 800aa2e:	ee18 3a10 	vmov	r3, s16
 800aa32:	4652      	mov	r2, sl
 800aa34:	4631      	mov	r1, r6
 800aa36:	4628      	mov	r0, r5
 800aa38:	47b8      	blx	r7
 800aa3a:	3001      	adds	r0, #1
 800aa3c:	f43f af41 	beq.w	800a8c2 <_printf_float+0xc2>
 800aa40:	f04f 0800 	mov.w	r8, #0
 800aa44:	f104 091a 	add.w	r9, r4, #26
 800aa48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa4a:	3b01      	subs	r3, #1
 800aa4c:	4543      	cmp	r3, r8
 800aa4e:	dc09      	bgt.n	800aa64 <_printf_float+0x264>
 800aa50:	6823      	ldr	r3, [r4, #0]
 800aa52:	079b      	lsls	r3, r3, #30
 800aa54:	f100 8105 	bmi.w	800ac62 <_printf_float+0x462>
 800aa58:	68e0      	ldr	r0, [r4, #12]
 800aa5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa5c:	4298      	cmp	r0, r3
 800aa5e:	bfb8      	it	lt
 800aa60:	4618      	movlt	r0, r3
 800aa62:	e730      	b.n	800a8c6 <_printf_float+0xc6>
 800aa64:	2301      	movs	r3, #1
 800aa66:	464a      	mov	r2, r9
 800aa68:	4631      	mov	r1, r6
 800aa6a:	4628      	mov	r0, r5
 800aa6c:	47b8      	blx	r7
 800aa6e:	3001      	adds	r0, #1
 800aa70:	f43f af27 	beq.w	800a8c2 <_printf_float+0xc2>
 800aa74:	f108 0801 	add.w	r8, r8, #1
 800aa78:	e7e6      	b.n	800aa48 <_printf_float+0x248>
 800aa7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	dc39      	bgt.n	800aaf4 <_printf_float+0x2f4>
 800aa80:	4a1b      	ldr	r2, [pc, #108]	; (800aaf0 <_printf_float+0x2f0>)
 800aa82:	2301      	movs	r3, #1
 800aa84:	4631      	mov	r1, r6
 800aa86:	4628      	mov	r0, r5
 800aa88:	47b8      	blx	r7
 800aa8a:	3001      	adds	r0, #1
 800aa8c:	f43f af19 	beq.w	800a8c2 <_printf_float+0xc2>
 800aa90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa94:	4313      	orrs	r3, r2
 800aa96:	d102      	bne.n	800aa9e <_printf_float+0x29e>
 800aa98:	6823      	ldr	r3, [r4, #0]
 800aa9a:	07d9      	lsls	r1, r3, #31
 800aa9c:	d5d8      	bpl.n	800aa50 <_printf_float+0x250>
 800aa9e:	ee18 3a10 	vmov	r3, s16
 800aaa2:	4652      	mov	r2, sl
 800aaa4:	4631      	mov	r1, r6
 800aaa6:	4628      	mov	r0, r5
 800aaa8:	47b8      	blx	r7
 800aaaa:	3001      	adds	r0, #1
 800aaac:	f43f af09 	beq.w	800a8c2 <_printf_float+0xc2>
 800aab0:	f04f 0900 	mov.w	r9, #0
 800aab4:	f104 0a1a 	add.w	sl, r4, #26
 800aab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaba:	425b      	negs	r3, r3
 800aabc:	454b      	cmp	r3, r9
 800aabe:	dc01      	bgt.n	800aac4 <_printf_float+0x2c4>
 800aac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aac2:	e792      	b.n	800a9ea <_printf_float+0x1ea>
 800aac4:	2301      	movs	r3, #1
 800aac6:	4652      	mov	r2, sl
 800aac8:	4631      	mov	r1, r6
 800aaca:	4628      	mov	r0, r5
 800aacc:	47b8      	blx	r7
 800aace:	3001      	adds	r0, #1
 800aad0:	f43f aef7 	beq.w	800a8c2 <_printf_float+0xc2>
 800aad4:	f109 0901 	add.w	r9, r9, #1
 800aad8:	e7ee      	b.n	800aab8 <_printf_float+0x2b8>
 800aada:	bf00      	nop
 800aadc:	7fefffff 	.word	0x7fefffff
 800aae0:	0800f39c 	.word	0x0800f39c
 800aae4:	0800f3a0 	.word	0x0800f3a0
 800aae8:	0800f3a8 	.word	0x0800f3a8
 800aaec:	0800f3a4 	.word	0x0800f3a4
 800aaf0:	0800f3ac 	.word	0x0800f3ac
 800aaf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aaf6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	bfa8      	it	ge
 800aafc:	461a      	movge	r2, r3
 800aafe:	2a00      	cmp	r2, #0
 800ab00:	4691      	mov	r9, r2
 800ab02:	dc37      	bgt.n	800ab74 <_printf_float+0x374>
 800ab04:	f04f 0b00 	mov.w	fp, #0
 800ab08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab0c:	f104 021a 	add.w	r2, r4, #26
 800ab10:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ab12:	9305      	str	r3, [sp, #20]
 800ab14:	eba3 0309 	sub.w	r3, r3, r9
 800ab18:	455b      	cmp	r3, fp
 800ab1a:	dc33      	bgt.n	800ab84 <_printf_float+0x384>
 800ab1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ab20:	429a      	cmp	r2, r3
 800ab22:	db3b      	blt.n	800ab9c <_printf_float+0x39c>
 800ab24:	6823      	ldr	r3, [r4, #0]
 800ab26:	07da      	lsls	r2, r3, #31
 800ab28:	d438      	bmi.n	800ab9c <_printf_float+0x39c>
 800ab2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab2c:	9a05      	ldr	r2, [sp, #20]
 800ab2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab30:	1a9a      	subs	r2, r3, r2
 800ab32:	eba3 0901 	sub.w	r9, r3, r1
 800ab36:	4591      	cmp	r9, r2
 800ab38:	bfa8      	it	ge
 800ab3a:	4691      	movge	r9, r2
 800ab3c:	f1b9 0f00 	cmp.w	r9, #0
 800ab40:	dc35      	bgt.n	800abae <_printf_float+0x3ae>
 800ab42:	f04f 0800 	mov.w	r8, #0
 800ab46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab4a:	f104 0a1a 	add.w	sl, r4, #26
 800ab4e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ab52:	1a9b      	subs	r3, r3, r2
 800ab54:	eba3 0309 	sub.w	r3, r3, r9
 800ab58:	4543      	cmp	r3, r8
 800ab5a:	f77f af79 	ble.w	800aa50 <_printf_float+0x250>
 800ab5e:	2301      	movs	r3, #1
 800ab60:	4652      	mov	r2, sl
 800ab62:	4631      	mov	r1, r6
 800ab64:	4628      	mov	r0, r5
 800ab66:	47b8      	blx	r7
 800ab68:	3001      	adds	r0, #1
 800ab6a:	f43f aeaa 	beq.w	800a8c2 <_printf_float+0xc2>
 800ab6e:	f108 0801 	add.w	r8, r8, #1
 800ab72:	e7ec      	b.n	800ab4e <_printf_float+0x34e>
 800ab74:	4613      	mov	r3, r2
 800ab76:	4631      	mov	r1, r6
 800ab78:	4642      	mov	r2, r8
 800ab7a:	4628      	mov	r0, r5
 800ab7c:	47b8      	blx	r7
 800ab7e:	3001      	adds	r0, #1
 800ab80:	d1c0      	bne.n	800ab04 <_printf_float+0x304>
 800ab82:	e69e      	b.n	800a8c2 <_printf_float+0xc2>
 800ab84:	2301      	movs	r3, #1
 800ab86:	4631      	mov	r1, r6
 800ab88:	4628      	mov	r0, r5
 800ab8a:	9205      	str	r2, [sp, #20]
 800ab8c:	47b8      	blx	r7
 800ab8e:	3001      	adds	r0, #1
 800ab90:	f43f ae97 	beq.w	800a8c2 <_printf_float+0xc2>
 800ab94:	9a05      	ldr	r2, [sp, #20]
 800ab96:	f10b 0b01 	add.w	fp, fp, #1
 800ab9a:	e7b9      	b.n	800ab10 <_printf_float+0x310>
 800ab9c:	ee18 3a10 	vmov	r3, s16
 800aba0:	4652      	mov	r2, sl
 800aba2:	4631      	mov	r1, r6
 800aba4:	4628      	mov	r0, r5
 800aba6:	47b8      	blx	r7
 800aba8:	3001      	adds	r0, #1
 800abaa:	d1be      	bne.n	800ab2a <_printf_float+0x32a>
 800abac:	e689      	b.n	800a8c2 <_printf_float+0xc2>
 800abae:	9a05      	ldr	r2, [sp, #20]
 800abb0:	464b      	mov	r3, r9
 800abb2:	4442      	add	r2, r8
 800abb4:	4631      	mov	r1, r6
 800abb6:	4628      	mov	r0, r5
 800abb8:	47b8      	blx	r7
 800abba:	3001      	adds	r0, #1
 800abbc:	d1c1      	bne.n	800ab42 <_printf_float+0x342>
 800abbe:	e680      	b.n	800a8c2 <_printf_float+0xc2>
 800abc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800abc2:	2a01      	cmp	r2, #1
 800abc4:	dc01      	bgt.n	800abca <_printf_float+0x3ca>
 800abc6:	07db      	lsls	r3, r3, #31
 800abc8:	d538      	bpl.n	800ac3c <_printf_float+0x43c>
 800abca:	2301      	movs	r3, #1
 800abcc:	4642      	mov	r2, r8
 800abce:	4631      	mov	r1, r6
 800abd0:	4628      	mov	r0, r5
 800abd2:	47b8      	blx	r7
 800abd4:	3001      	adds	r0, #1
 800abd6:	f43f ae74 	beq.w	800a8c2 <_printf_float+0xc2>
 800abda:	ee18 3a10 	vmov	r3, s16
 800abde:	4652      	mov	r2, sl
 800abe0:	4631      	mov	r1, r6
 800abe2:	4628      	mov	r0, r5
 800abe4:	47b8      	blx	r7
 800abe6:	3001      	adds	r0, #1
 800abe8:	f43f ae6b 	beq.w	800a8c2 <_printf_float+0xc2>
 800abec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800abf0:	2200      	movs	r2, #0
 800abf2:	2300      	movs	r3, #0
 800abf4:	f7f5 ff80 	bl	8000af8 <__aeabi_dcmpeq>
 800abf8:	b9d8      	cbnz	r0, 800ac32 <_printf_float+0x432>
 800abfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abfc:	f108 0201 	add.w	r2, r8, #1
 800ac00:	3b01      	subs	r3, #1
 800ac02:	4631      	mov	r1, r6
 800ac04:	4628      	mov	r0, r5
 800ac06:	47b8      	blx	r7
 800ac08:	3001      	adds	r0, #1
 800ac0a:	d10e      	bne.n	800ac2a <_printf_float+0x42a>
 800ac0c:	e659      	b.n	800a8c2 <_printf_float+0xc2>
 800ac0e:	2301      	movs	r3, #1
 800ac10:	4652      	mov	r2, sl
 800ac12:	4631      	mov	r1, r6
 800ac14:	4628      	mov	r0, r5
 800ac16:	47b8      	blx	r7
 800ac18:	3001      	adds	r0, #1
 800ac1a:	f43f ae52 	beq.w	800a8c2 <_printf_float+0xc2>
 800ac1e:	f108 0801 	add.w	r8, r8, #1
 800ac22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac24:	3b01      	subs	r3, #1
 800ac26:	4543      	cmp	r3, r8
 800ac28:	dcf1      	bgt.n	800ac0e <_printf_float+0x40e>
 800ac2a:	464b      	mov	r3, r9
 800ac2c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ac30:	e6dc      	b.n	800a9ec <_printf_float+0x1ec>
 800ac32:	f04f 0800 	mov.w	r8, #0
 800ac36:	f104 0a1a 	add.w	sl, r4, #26
 800ac3a:	e7f2      	b.n	800ac22 <_printf_float+0x422>
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	4642      	mov	r2, r8
 800ac40:	e7df      	b.n	800ac02 <_printf_float+0x402>
 800ac42:	2301      	movs	r3, #1
 800ac44:	464a      	mov	r2, r9
 800ac46:	4631      	mov	r1, r6
 800ac48:	4628      	mov	r0, r5
 800ac4a:	47b8      	blx	r7
 800ac4c:	3001      	adds	r0, #1
 800ac4e:	f43f ae38 	beq.w	800a8c2 <_printf_float+0xc2>
 800ac52:	f108 0801 	add.w	r8, r8, #1
 800ac56:	68e3      	ldr	r3, [r4, #12]
 800ac58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ac5a:	1a5b      	subs	r3, r3, r1
 800ac5c:	4543      	cmp	r3, r8
 800ac5e:	dcf0      	bgt.n	800ac42 <_printf_float+0x442>
 800ac60:	e6fa      	b.n	800aa58 <_printf_float+0x258>
 800ac62:	f04f 0800 	mov.w	r8, #0
 800ac66:	f104 0919 	add.w	r9, r4, #25
 800ac6a:	e7f4      	b.n	800ac56 <_printf_float+0x456>

0800ac6c <_printf_common>:
 800ac6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac70:	4616      	mov	r6, r2
 800ac72:	4699      	mov	r9, r3
 800ac74:	688a      	ldr	r2, [r1, #8]
 800ac76:	690b      	ldr	r3, [r1, #16]
 800ac78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ac7c:	4293      	cmp	r3, r2
 800ac7e:	bfb8      	it	lt
 800ac80:	4613      	movlt	r3, r2
 800ac82:	6033      	str	r3, [r6, #0]
 800ac84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ac88:	4607      	mov	r7, r0
 800ac8a:	460c      	mov	r4, r1
 800ac8c:	b10a      	cbz	r2, 800ac92 <_printf_common+0x26>
 800ac8e:	3301      	adds	r3, #1
 800ac90:	6033      	str	r3, [r6, #0]
 800ac92:	6823      	ldr	r3, [r4, #0]
 800ac94:	0699      	lsls	r1, r3, #26
 800ac96:	bf42      	ittt	mi
 800ac98:	6833      	ldrmi	r3, [r6, #0]
 800ac9a:	3302      	addmi	r3, #2
 800ac9c:	6033      	strmi	r3, [r6, #0]
 800ac9e:	6825      	ldr	r5, [r4, #0]
 800aca0:	f015 0506 	ands.w	r5, r5, #6
 800aca4:	d106      	bne.n	800acb4 <_printf_common+0x48>
 800aca6:	f104 0a19 	add.w	sl, r4, #25
 800acaa:	68e3      	ldr	r3, [r4, #12]
 800acac:	6832      	ldr	r2, [r6, #0]
 800acae:	1a9b      	subs	r3, r3, r2
 800acb0:	42ab      	cmp	r3, r5
 800acb2:	dc26      	bgt.n	800ad02 <_printf_common+0x96>
 800acb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800acb8:	1e13      	subs	r3, r2, #0
 800acba:	6822      	ldr	r2, [r4, #0]
 800acbc:	bf18      	it	ne
 800acbe:	2301      	movne	r3, #1
 800acc0:	0692      	lsls	r2, r2, #26
 800acc2:	d42b      	bmi.n	800ad1c <_printf_common+0xb0>
 800acc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800acc8:	4649      	mov	r1, r9
 800acca:	4638      	mov	r0, r7
 800accc:	47c0      	blx	r8
 800acce:	3001      	adds	r0, #1
 800acd0:	d01e      	beq.n	800ad10 <_printf_common+0xa4>
 800acd2:	6823      	ldr	r3, [r4, #0]
 800acd4:	68e5      	ldr	r5, [r4, #12]
 800acd6:	6832      	ldr	r2, [r6, #0]
 800acd8:	f003 0306 	and.w	r3, r3, #6
 800acdc:	2b04      	cmp	r3, #4
 800acde:	bf08      	it	eq
 800ace0:	1aad      	subeq	r5, r5, r2
 800ace2:	68a3      	ldr	r3, [r4, #8]
 800ace4:	6922      	ldr	r2, [r4, #16]
 800ace6:	bf0c      	ite	eq
 800ace8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800acec:	2500      	movne	r5, #0
 800acee:	4293      	cmp	r3, r2
 800acf0:	bfc4      	itt	gt
 800acf2:	1a9b      	subgt	r3, r3, r2
 800acf4:	18ed      	addgt	r5, r5, r3
 800acf6:	2600      	movs	r6, #0
 800acf8:	341a      	adds	r4, #26
 800acfa:	42b5      	cmp	r5, r6
 800acfc:	d11a      	bne.n	800ad34 <_printf_common+0xc8>
 800acfe:	2000      	movs	r0, #0
 800ad00:	e008      	b.n	800ad14 <_printf_common+0xa8>
 800ad02:	2301      	movs	r3, #1
 800ad04:	4652      	mov	r2, sl
 800ad06:	4649      	mov	r1, r9
 800ad08:	4638      	mov	r0, r7
 800ad0a:	47c0      	blx	r8
 800ad0c:	3001      	adds	r0, #1
 800ad0e:	d103      	bne.n	800ad18 <_printf_common+0xac>
 800ad10:	f04f 30ff 	mov.w	r0, #4294967295
 800ad14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad18:	3501      	adds	r5, #1
 800ad1a:	e7c6      	b.n	800acaa <_printf_common+0x3e>
 800ad1c:	18e1      	adds	r1, r4, r3
 800ad1e:	1c5a      	adds	r2, r3, #1
 800ad20:	2030      	movs	r0, #48	; 0x30
 800ad22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ad26:	4422      	add	r2, r4
 800ad28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ad2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ad30:	3302      	adds	r3, #2
 800ad32:	e7c7      	b.n	800acc4 <_printf_common+0x58>
 800ad34:	2301      	movs	r3, #1
 800ad36:	4622      	mov	r2, r4
 800ad38:	4649      	mov	r1, r9
 800ad3a:	4638      	mov	r0, r7
 800ad3c:	47c0      	blx	r8
 800ad3e:	3001      	adds	r0, #1
 800ad40:	d0e6      	beq.n	800ad10 <_printf_common+0xa4>
 800ad42:	3601      	adds	r6, #1
 800ad44:	e7d9      	b.n	800acfa <_printf_common+0x8e>
	...

0800ad48 <_printf_i>:
 800ad48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad4c:	7e0f      	ldrb	r7, [r1, #24]
 800ad4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ad50:	2f78      	cmp	r7, #120	; 0x78
 800ad52:	4691      	mov	r9, r2
 800ad54:	4680      	mov	r8, r0
 800ad56:	460c      	mov	r4, r1
 800ad58:	469a      	mov	sl, r3
 800ad5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ad5e:	d807      	bhi.n	800ad70 <_printf_i+0x28>
 800ad60:	2f62      	cmp	r7, #98	; 0x62
 800ad62:	d80a      	bhi.n	800ad7a <_printf_i+0x32>
 800ad64:	2f00      	cmp	r7, #0
 800ad66:	f000 80d8 	beq.w	800af1a <_printf_i+0x1d2>
 800ad6a:	2f58      	cmp	r7, #88	; 0x58
 800ad6c:	f000 80a3 	beq.w	800aeb6 <_printf_i+0x16e>
 800ad70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ad78:	e03a      	b.n	800adf0 <_printf_i+0xa8>
 800ad7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ad7e:	2b15      	cmp	r3, #21
 800ad80:	d8f6      	bhi.n	800ad70 <_printf_i+0x28>
 800ad82:	a101      	add	r1, pc, #4	; (adr r1, 800ad88 <_printf_i+0x40>)
 800ad84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad88:	0800ade1 	.word	0x0800ade1
 800ad8c:	0800adf5 	.word	0x0800adf5
 800ad90:	0800ad71 	.word	0x0800ad71
 800ad94:	0800ad71 	.word	0x0800ad71
 800ad98:	0800ad71 	.word	0x0800ad71
 800ad9c:	0800ad71 	.word	0x0800ad71
 800ada0:	0800adf5 	.word	0x0800adf5
 800ada4:	0800ad71 	.word	0x0800ad71
 800ada8:	0800ad71 	.word	0x0800ad71
 800adac:	0800ad71 	.word	0x0800ad71
 800adb0:	0800ad71 	.word	0x0800ad71
 800adb4:	0800af01 	.word	0x0800af01
 800adb8:	0800ae25 	.word	0x0800ae25
 800adbc:	0800aee3 	.word	0x0800aee3
 800adc0:	0800ad71 	.word	0x0800ad71
 800adc4:	0800ad71 	.word	0x0800ad71
 800adc8:	0800af23 	.word	0x0800af23
 800adcc:	0800ad71 	.word	0x0800ad71
 800add0:	0800ae25 	.word	0x0800ae25
 800add4:	0800ad71 	.word	0x0800ad71
 800add8:	0800ad71 	.word	0x0800ad71
 800addc:	0800aeeb 	.word	0x0800aeeb
 800ade0:	682b      	ldr	r3, [r5, #0]
 800ade2:	1d1a      	adds	r2, r3, #4
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	602a      	str	r2, [r5, #0]
 800ade8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800adec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800adf0:	2301      	movs	r3, #1
 800adf2:	e0a3      	b.n	800af3c <_printf_i+0x1f4>
 800adf4:	6820      	ldr	r0, [r4, #0]
 800adf6:	6829      	ldr	r1, [r5, #0]
 800adf8:	0606      	lsls	r6, r0, #24
 800adfa:	f101 0304 	add.w	r3, r1, #4
 800adfe:	d50a      	bpl.n	800ae16 <_printf_i+0xce>
 800ae00:	680e      	ldr	r6, [r1, #0]
 800ae02:	602b      	str	r3, [r5, #0]
 800ae04:	2e00      	cmp	r6, #0
 800ae06:	da03      	bge.n	800ae10 <_printf_i+0xc8>
 800ae08:	232d      	movs	r3, #45	; 0x2d
 800ae0a:	4276      	negs	r6, r6
 800ae0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae10:	485e      	ldr	r0, [pc, #376]	; (800af8c <_printf_i+0x244>)
 800ae12:	230a      	movs	r3, #10
 800ae14:	e019      	b.n	800ae4a <_printf_i+0x102>
 800ae16:	680e      	ldr	r6, [r1, #0]
 800ae18:	602b      	str	r3, [r5, #0]
 800ae1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ae1e:	bf18      	it	ne
 800ae20:	b236      	sxthne	r6, r6
 800ae22:	e7ef      	b.n	800ae04 <_printf_i+0xbc>
 800ae24:	682b      	ldr	r3, [r5, #0]
 800ae26:	6820      	ldr	r0, [r4, #0]
 800ae28:	1d19      	adds	r1, r3, #4
 800ae2a:	6029      	str	r1, [r5, #0]
 800ae2c:	0601      	lsls	r1, r0, #24
 800ae2e:	d501      	bpl.n	800ae34 <_printf_i+0xec>
 800ae30:	681e      	ldr	r6, [r3, #0]
 800ae32:	e002      	b.n	800ae3a <_printf_i+0xf2>
 800ae34:	0646      	lsls	r6, r0, #25
 800ae36:	d5fb      	bpl.n	800ae30 <_printf_i+0xe8>
 800ae38:	881e      	ldrh	r6, [r3, #0]
 800ae3a:	4854      	ldr	r0, [pc, #336]	; (800af8c <_printf_i+0x244>)
 800ae3c:	2f6f      	cmp	r7, #111	; 0x6f
 800ae3e:	bf0c      	ite	eq
 800ae40:	2308      	moveq	r3, #8
 800ae42:	230a      	movne	r3, #10
 800ae44:	2100      	movs	r1, #0
 800ae46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ae4a:	6865      	ldr	r5, [r4, #4]
 800ae4c:	60a5      	str	r5, [r4, #8]
 800ae4e:	2d00      	cmp	r5, #0
 800ae50:	bfa2      	ittt	ge
 800ae52:	6821      	ldrge	r1, [r4, #0]
 800ae54:	f021 0104 	bicge.w	r1, r1, #4
 800ae58:	6021      	strge	r1, [r4, #0]
 800ae5a:	b90e      	cbnz	r6, 800ae60 <_printf_i+0x118>
 800ae5c:	2d00      	cmp	r5, #0
 800ae5e:	d04d      	beq.n	800aefc <_printf_i+0x1b4>
 800ae60:	4615      	mov	r5, r2
 800ae62:	fbb6 f1f3 	udiv	r1, r6, r3
 800ae66:	fb03 6711 	mls	r7, r3, r1, r6
 800ae6a:	5dc7      	ldrb	r7, [r0, r7]
 800ae6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ae70:	4637      	mov	r7, r6
 800ae72:	42bb      	cmp	r3, r7
 800ae74:	460e      	mov	r6, r1
 800ae76:	d9f4      	bls.n	800ae62 <_printf_i+0x11a>
 800ae78:	2b08      	cmp	r3, #8
 800ae7a:	d10b      	bne.n	800ae94 <_printf_i+0x14c>
 800ae7c:	6823      	ldr	r3, [r4, #0]
 800ae7e:	07de      	lsls	r6, r3, #31
 800ae80:	d508      	bpl.n	800ae94 <_printf_i+0x14c>
 800ae82:	6923      	ldr	r3, [r4, #16]
 800ae84:	6861      	ldr	r1, [r4, #4]
 800ae86:	4299      	cmp	r1, r3
 800ae88:	bfde      	ittt	le
 800ae8a:	2330      	movle	r3, #48	; 0x30
 800ae8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ae90:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ae94:	1b52      	subs	r2, r2, r5
 800ae96:	6122      	str	r2, [r4, #16]
 800ae98:	f8cd a000 	str.w	sl, [sp]
 800ae9c:	464b      	mov	r3, r9
 800ae9e:	aa03      	add	r2, sp, #12
 800aea0:	4621      	mov	r1, r4
 800aea2:	4640      	mov	r0, r8
 800aea4:	f7ff fee2 	bl	800ac6c <_printf_common>
 800aea8:	3001      	adds	r0, #1
 800aeaa:	d14c      	bne.n	800af46 <_printf_i+0x1fe>
 800aeac:	f04f 30ff 	mov.w	r0, #4294967295
 800aeb0:	b004      	add	sp, #16
 800aeb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeb6:	4835      	ldr	r0, [pc, #212]	; (800af8c <_printf_i+0x244>)
 800aeb8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800aebc:	6829      	ldr	r1, [r5, #0]
 800aebe:	6823      	ldr	r3, [r4, #0]
 800aec0:	f851 6b04 	ldr.w	r6, [r1], #4
 800aec4:	6029      	str	r1, [r5, #0]
 800aec6:	061d      	lsls	r5, r3, #24
 800aec8:	d514      	bpl.n	800aef4 <_printf_i+0x1ac>
 800aeca:	07df      	lsls	r7, r3, #31
 800aecc:	bf44      	itt	mi
 800aece:	f043 0320 	orrmi.w	r3, r3, #32
 800aed2:	6023      	strmi	r3, [r4, #0]
 800aed4:	b91e      	cbnz	r6, 800aede <_printf_i+0x196>
 800aed6:	6823      	ldr	r3, [r4, #0]
 800aed8:	f023 0320 	bic.w	r3, r3, #32
 800aedc:	6023      	str	r3, [r4, #0]
 800aede:	2310      	movs	r3, #16
 800aee0:	e7b0      	b.n	800ae44 <_printf_i+0xfc>
 800aee2:	6823      	ldr	r3, [r4, #0]
 800aee4:	f043 0320 	orr.w	r3, r3, #32
 800aee8:	6023      	str	r3, [r4, #0]
 800aeea:	2378      	movs	r3, #120	; 0x78
 800aeec:	4828      	ldr	r0, [pc, #160]	; (800af90 <_printf_i+0x248>)
 800aeee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aef2:	e7e3      	b.n	800aebc <_printf_i+0x174>
 800aef4:	0659      	lsls	r1, r3, #25
 800aef6:	bf48      	it	mi
 800aef8:	b2b6      	uxthmi	r6, r6
 800aefa:	e7e6      	b.n	800aeca <_printf_i+0x182>
 800aefc:	4615      	mov	r5, r2
 800aefe:	e7bb      	b.n	800ae78 <_printf_i+0x130>
 800af00:	682b      	ldr	r3, [r5, #0]
 800af02:	6826      	ldr	r6, [r4, #0]
 800af04:	6961      	ldr	r1, [r4, #20]
 800af06:	1d18      	adds	r0, r3, #4
 800af08:	6028      	str	r0, [r5, #0]
 800af0a:	0635      	lsls	r5, r6, #24
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	d501      	bpl.n	800af14 <_printf_i+0x1cc>
 800af10:	6019      	str	r1, [r3, #0]
 800af12:	e002      	b.n	800af1a <_printf_i+0x1d2>
 800af14:	0670      	lsls	r0, r6, #25
 800af16:	d5fb      	bpl.n	800af10 <_printf_i+0x1c8>
 800af18:	8019      	strh	r1, [r3, #0]
 800af1a:	2300      	movs	r3, #0
 800af1c:	6123      	str	r3, [r4, #16]
 800af1e:	4615      	mov	r5, r2
 800af20:	e7ba      	b.n	800ae98 <_printf_i+0x150>
 800af22:	682b      	ldr	r3, [r5, #0]
 800af24:	1d1a      	adds	r2, r3, #4
 800af26:	602a      	str	r2, [r5, #0]
 800af28:	681d      	ldr	r5, [r3, #0]
 800af2a:	6862      	ldr	r2, [r4, #4]
 800af2c:	2100      	movs	r1, #0
 800af2e:	4628      	mov	r0, r5
 800af30:	f7f5 f96e 	bl	8000210 <memchr>
 800af34:	b108      	cbz	r0, 800af3a <_printf_i+0x1f2>
 800af36:	1b40      	subs	r0, r0, r5
 800af38:	6060      	str	r0, [r4, #4]
 800af3a:	6863      	ldr	r3, [r4, #4]
 800af3c:	6123      	str	r3, [r4, #16]
 800af3e:	2300      	movs	r3, #0
 800af40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af44:	e7a8      	b.n	800ae98 <_printf_i+0x150>
 800af46:	6923      	ldr	r3, [r4, #16]
 800af48:	462a      	mov	r2, r5
 800af4a:	4649      	mov	r1, r9
 800af4c:	4640      	mov	r0, r8
 800af4e:	47d0      	blx	sl
 800af50:	3001      	adds	r0, #1
 800af52:	d0ab      	beq.n	800aeac <_printf_i+0x164>
 800af54:	6823      	ldr	r3, [r4, #0]
 800af56:	079b      	lsls	r3, r3, #30
 800af58:	d413      	bmi.n	800af82 <_printf_i+0x23a>
 800af5a:	68e0      	ldr	r0, [r4, #12]
 800af5c:	9b03      	ldr	r3, [sp, #12]
 800af5e:	4298      	cmp	r0, r3
 800af60:	bfb8      	it	lt
 800af62:	4618      	movlt	r0, r3
 800af64:	e7a4      	b.n	800aeb0 <_printf_i+0x168>
 800af66:	2301      	movs	r3, #1
 800af68:	4632      	mov	r2, r6
 800af6a:	4649      	mov	r1, r9
 800af6c:	4640      	mov	r0, r8
 800af6e:	47d0      	blx	sl
 800af70:	3001      	adds	r0, #1
 800af72:	d09b      	beq.n	800aeac <_printf_i+0x164>
 800af74:	3501      	adds	r5, #1
 800af76:	68e3      	ldr	r3, [r4, #12]
 800af78:	9903      	ldr	r1, [sp, #12]
 800af7a:	1a5b      	subs	r3, r3, r1
 800af7c:	42ab      	cmp	r3, r5
 800af7e:	dcf2      	bgt.n	800af66 <_printf_i+0x21e>
 800af80:	e7eb      	b.n	800af5a <_printf_i+0x212>
 800af82:	2500      	movs	r5, #0
 800af84:	f104 0619 	add.w	r6, r4, #25
 800af88:	e7f5      	b.n	800af76 <_printf_i+0x22e>
 800af8a:	bf00      	nop
 800af8c:	0800f3ae 	.word	0x0800f3ae
 800af90:	0800f3bf 	.word	0x0800f3bf

0800af94 <_scanf_float>:
 800af94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af98:	b087      	sub	sp, #28
 800af9a:	4617      	mov	r7, r2
 800af9c:	9303      	str	r3, [sp, #12]
 800af9e:	688b      	ldr	r3, [r1, #8]
 800afa0:	1e5a      	subs	r2, r3, #1
 800afa2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800afa6:	bf83      	ittte	hi
 800afa8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800afac:	195b      	addhi	r3, r3, r5
 800afae:	9302      	strhi	r3, [sp, #8]
 800afb0:	2300      	movls	r3, #0
 800afb2:	bf86      	itte	hi
 800afb4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800afb8:	608b      	strhi	r3, [r1, #8]
 800afba:	9302      	strls	r3, [sp, #8]
 800afbc:	680b      	ldr	r3, [r1, #0]
 800afbe:	468b      	mov	fp, r1
 800afc0:	2500      	movs	r5, #0
 800afc2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800afc6:	f84b 3b1c 	str.w	r3, [fp], #28
 800afca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800afce:	4680      	mov	r8, r0
 800afd0:	460c      	mov	r4, r1
 800afd2:	465e      	mov	r6, fp
 800afd4:	46aa      	mov	sl, r5
 800afd6:	46a9      	mov	r9, r5
 800afd8:	9501      	str	r5, [sp, #4]
 800afda:	68a2      	ldr	r2, [r4, #8]
 800afdc:	b152      	cbz	r2, 800aff4 <_scanf_float+0x60>
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	781b      	ldrb	r3, [r3, #0]
 800afe2:	2b4e      	cmp	r3, #78	; 0x4e
 800afe4:	d864      	bhi.n	800b0b0 <_scanf_float+0x11c>
 800afe6:	2b40      	cmp	r3, #64	; 0x40
 800afe8:	d83c      	bhi.n	800b064 <_scanf_float+0xd0>
 800afea:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800afee:	b2c8      	uxtb	r0, r1
 800aff0:	280e      	cmp	r0, #14
 800aff2:	d93a      	bls.n	800b06a <_scanf_float+0xd6>
 800aff4:	f1b9 0f00 	cmp.w	r9, #0
 800aff8:	d003      	beq.n	800b002 <_scanf_float+0x6e>
 800affa:	6823      	ldr	r3, [r4, #0]
 800affc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b000:	6023      	str	r3, [r4, #0]
 800b002:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b006:	f1ba 0f01 	cmp.w	sl, #1
 800b00a:	f200 8113 	bhi.w	800b234 <_scanf_float+0x2a0>
 800b00e:	455e      	cmp	r6, fp
 800b010:	f200 8105 	bhi.w	800b21e <_scanf_float+0x28a>
 800b014:	2501      	movs	r5, #1
 800b016:	4628      	mov	r0, r5
 800b018:	b007      	add	sp, #28
 800b01a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b01e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b022:	2a0d      	cmp	r2, #13
 800b024:	d8e6      	bhi.n	800aff4 <_scanf_float+0x60>
 800b026:	a101      	add	r1, pc, #4	; (adr r1, 800b02c <_scanf_float+0x98>)
 800b028:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b02c:	0800b16b 	.word	0x0800b16b
 800b030:	0800aff5 	.word	0x0800aff5
 800b034:	0800aff5 	.word	0x0800aff5
 800b038:	0800aff5 	.word	0x0800aff5
 800b03c:	0800b1cb 	.word	0x0800b1cb
 800b040:	0800b1a3 	.word	0x0800b1a3
 800b044:	0800aff5 	.word	0x0800aff5
 800b048:	0800aff5 	.word	0x0800aff5
 800b04c:	0800b179 	.word	0x0800b179
 800b050:	0800aff5 	.word	0x0800aff5
 800b054:	0800aff5 	.word	0x0800aff5
 800b058:	0800aff5 	.word	0x0800aff5
 800b05c:	0800aff5 	.word	0x0800aff5
 800b060:	0800b131 	.word	0x0800b131
 800b064:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b068:	e7db      	b.n	800b022 <_scanf_float+0x8e>
 800b06a:	290e      	cmp	r1, #14
 800b06c:	d8c2      	bhi.n	800aff4 <_scanf_float+0x60>
 800b06e:	a001      	add	r0, pc, #4	; (adr r0, 800b074 <_scanf_float+0xe0>)
 800b070:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b074:	0800b123 	.word	0x0800b123
 800b078:	0800aff5 	.word	0x0800aff5
 800b07c:	0800b123 	.word	0x0800b123
 800b080:	0800b1b7 	.word	0x0800b1b7
 800b084:	0800aff5 	.word	0x0800aff5
 800b088:	0800b0d1 	.word	0x0800b0d1
 800b08c:	0800b10d 	.word	0x0800b10d
 800b090:	0800b10d 	.word	0x0800b10d
 800b094:	0800b10d 	.word	0x0800b10d
 800b098:	0800b10d 	.word	0x0800b10d
 800b09c:	0800b10d 	.word	0x0800b10d
 800b0a0:	0800b10d 	.word	0x0800b10d
 800b0a4:	0800b10d 	.word	0x0800b10d
 800b0a8:	0800b10d 	.word	0x0800b10d
 800b0ac:	0800b10d 	.word	0x0800b10d
 800b0b0:	2b6e      	cmp	r3, #110	; 0x6e
 800b0b2:	d809      	bhi.n	800b0c8 <_scanf_float+0x134>
 800b0b4:	2b60      	cmp	r3, #96	; 0x60
 800b0b6:	d8b2      	bhi.n	800b01e <_scanf_float+0x8a>
 800b0b8:	2b54      	cmp	r3, #84	; 0x54
 800b0ba:	d077      	beq.n	800b1ac <_scanf_float+0x218>
 800b0bc:	2b59      	cmp	r3, #89	; 0x59
 800b0be:	d199      	bne.n	800aff4 <_scanf_float+0x60>
 800b0c0:	2d07      	cmp	r5, #7
 800b0c2:	d197      	bne.n	800aff4 <_scanf_float+0x60>
 800b0c4:	2508      	movs	r5, #8
 800b0c6:	e029      	b.n	800b11c <_scanf_float+0x188>
 800b0c8:	2b74      	cmp	r3, #116	; 0x74
 800b0ca:	d06f      	beq.n	800b1ac <_scanf_float+0x218>
 800b0cc:	2b79      	cmp	r3, #121	; 0x79
 800b0ce:	e7f6      	b.n	800b0be <_scanf_float+0x12a>
 800b0d0:	6821      	ldr	r1, [r4, #0]
 800b0d2:	05c8      	lsls	r0, r1, #23
 800b0d4:	d51a      	bpl.n	800b10c <_scanf_float+0x178>
 800b0d6:	9b02      	ldr	r3, [sp, #8]
 800b0d8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b0dc:	6021      	str	r1, [r4, #0]
 800b0de:	f109 0901 	add.w	r9, r9, #1
 800b0e2:	b11b      	cbz	r3, 800b0ec <_scanf_float+0x158>
 800b0e4:	3b01      	subs	r3, #1
 800b0e6:	3201      	adds	r2, #1
 800b0e8:	9302      	str	r3, [sp, #8]
 800b0ea:	60a2      	str	r2, [r4, #8]
 800b0ec:	68a3      	ldr	r3, [r4, #8]
 800b0ee:	3b01      	subs	r3, #1
 800b0f0:	60a3      	str	r3, [r4, #8]
 800b0f2:	6923      	ldr	r3, [r4, #16]
 800b0f4:	3301      	adds	r3, #1
 800b0f6:	6123      	str	r3, [r4, #16]
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	3b01      	subs	r3, #1
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	607b      	str	r3, [r7, #4]
 800b100:	f340 8084 	ble.w	800b20c <_scanf_float+0x278>
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	3301      	adds	r3, #1
 800b108:	603b      	str	r3, [r7, #0]
 800b10a:	e766      	b.n	800afda <_scanf_float+0x46>
 800b10c:	eb1a 0f05 	cmn.w	sl, r5
 800b110:	f47f af70 	bne.w	800aff4 <_scanf_float+0x60>
 800b114:	6822      	ldr	r2, [r4, #0]
 800b116:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b11a:	6022      	str	r2, [r4, #0]
 800b11c:	f806 3b01 	strb.w	r3, [r6], #1
 800b120:	e7e4      	b.n	800b0ec <_scanf_float+0x158>
 800b122:	6822      	ldr	r2, [r4, #0]
 800b124:	0610      	lsls	r0, r2, #24
 800b126:	f57f af65 	bpl.w	800aff4 <_scanf_float+0x60>
 800b12a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b12e:	e7f4      	b.n	800b11a <_scanf_float+0x186>
 800b130:	f1ba 0f00 	cmp.w	sl, #0
 800b134:	d10e      	bne.n	800b154 <_scanf_float+0x1c0>
 800b136:	f1b9 0f00 	cmp.w	r9, #0
 800b13a:	d10e      	bne.n	800b15a <_scanf_float+0x1c6>
 800b13c:	6822      	ldr	r2, [r4, #0]
 800b13e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b142:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b146:	d108      	bne.n	800b15a <_scanf_float+0x1c6>
 800b148:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b14c:	6022      	str	r2, [r4, #0]
 800b14e:	f04f 0a01 	mov.w	sl, #1
 800b152:	e7e3      	b.n	800b11c <_scanf_float+0x188>
 800b154:	f1ba 0f02 	cmp.w	sl, #2
 800b158:	d055      	beq.n	800b206 <_scanf_float+0x272>
 800b15a:	2d01      	cmp	r5, #1
 800b15c:	d002      	beq.n	800b164 <_scanf_float+0x1d0>
 800b15e:	2d04      	cmp	r5, #4
 800b160:	f47f af48 	bne.w	800aff4 <_scanf_float+0x60>
 800b164:	3501      	adds	r5, #1
 800b166:	b2ed      	uxtb	r5, r5
 800b168:	e7d8      	b.n	800b11c <_scanf_float+0x188>
 800b16a:	f1ba 0f01 	cmp.w	sl, #1
 800b16e:	f47f af41 	bne.w	800aff4 <_scanf_float+0x60>
 800b172:	f04f 0a02 	mov.w	sl, #2
 800b176:	e7d1      	b.n	800b11c <_scanf_float+0x188>
 800b178:	b97d      	cbnz	r5, 800b19a <_scanf_float+0x206>
 800b17a:	f1b9 0f00 	cmp.w	r9, #0
 800b17e:	f47f af3c 	bne.w	800affa <_scanf_float+0x66>
 800b182:	6822      	ldr	r2, [r4, #0]
 800b184:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b188:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b18c:	f47f af39 	bne.w	800b002 <_scanf_float+0x6e>
 800b190:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b194:	6022      	str	r2, [r4, #0]
 800b196:	2501      	movs	r5, #1
 800b198:	e7c0      	b.n	800b11c <_scanf_float+0x188>
 800b19a:	2d03      	cmp	r5, #3
 800b19c:	d0e2      	beq.n	800b164 <_scanf_float+0x1d0>
 800b19e:	2d05      	cmp	r5, #5
 800b1a0:	e7de      	b.n	800b160 <_scanf_float+0x1cc>
 800b1a2:	2d02      	cmp	r5, #2
 800b1a4:	f47f af26 	bne.w	800aff4 <_scanf_float+0x60>
 800b1a8:	2503      	movs	r5, #3
 800b1aa:	e7b7      	b.n	800b11c <_scanf_float+0x188>
 800b1ac:	2d06      	cmp	r5, #6
 800b1ae:	f47f af21 	bne.w	800aff4 <_scanf_float+0x60>
 800b1b2:	2507      	movs	r5, #7
 800b1b4:	e7b2      	b.n	800b11c <_scanf_float+0x188>
 800b1b6:	6822      	ldr	r2, [r4, #0]
 800b1b8:	0591      	lsls	r1, r2, #22
 800b1ba:	f57f af1b 	bpl.w	800aff4 <_scanf_float+0x60>
 800b1be:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800b1c2:	6022      	str	r2, [r4, #0]
 800b1c4:	f8cd 9004 	str.w	r9, [sp, #4]
 800b1c8:	e7a8      	b.n	800b11c <_scanf_float+0x188>
 800b1ca:	6822      	ldr	r2, [r4, #0]
 800b1cc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b1d0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b1d4:	d006      	beq.n	800b1e4 <_scanf_float+0x250>
 800b1d6:	0550      	lsls	r0, r2, #21
 800b1d8:	f57f af0c 	bpl.w	800aff4 <_scanf_float+0x60>
 800b1dc:	f1b9 0f00 	cmp.w	r9, #0
 800b1e0:	f43f af0f 	beq.w	800b002 <_scanf_float+0x6e>
 800b1e4:	0591      	lsls	r1, r2, #22
 800b1e6:	bf58      	it	pl
 800b1e8:	9901      	ldrpl	r1, [sp, #4]
 800b1ea:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b1ee:	bf58      	it	pl
 800b1f0:	eba9 0101 	subpl.w	r1, r9, r1
 800b1f4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b1f8:	bf58      	it	pl
 800b1fa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b1fe:	6022      	str	r2, [r4, #0]
 800b200:	f04f 0900 	mov.w	r9, #0
 800b204:	e78a      	b.n	800b11c <_scanf_float+0x188>
 800b206:	f04f 0a03 	mov.w	sl, #3
 800b20a:	e787      	b.n	800b11c <_scanf_float+0x188>
 800b20c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b210:	4639      	mov	r1, r7
 800b212:	4640      	mov	r0, r8
 800b214:	4798      	blx	r3
 800b216:	2800      	cmp	r0, #0
 800b218:	f43f aedf 	beq.w	800afda <_scanf_float+0x46>
 800b21c:	e6ea      	b.n	800aff4 <_scanf_float+0x60>
 800b21e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b222:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b226:	463a      	mov	r2, r7
 800b228:	4640      	mov	r0, r8
 800b22a:	4798      	blx	r3
 800b22c:	6923      	ldr	r3, [r4, #16]
 800b22e:	3b01      	subs	r3, #1
 800b230:	6123      	str	r3, [r4, #16]
 800b232:	e6ec      	b.n	800b00e <_scanf_float+0x7a>
 800b234:	1e6b      	subs	r3, r5, #1
 800b236:	2b06      	cmp	r3, #6
 800b238:	d825      	bhi.n	800b286 <_scanf_float+0x2f2>
 800b23a:	2d02      	cmp	r5, #2
 800b23c:	d836      	bhi.n	800b2ac <_scanf_float+0x318>
 800b23e:	455e      	cmp	r6, fp
 800b240:	f67f aee8 	bls.w	800b014 <_scanf_float+0x80>
 800b244:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b248:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b24c:	463a      	mov	r2, r7
 800b24e:	4640      	mov	r0, r8
 800b250:	4798      	blx	r3
 800b252:	6923      	ldr	r3, [r4, #16]
 800b254:	3b01      	subs	r3, #1
 800b256:	6123      	str	r3, [r4, #16]
 800b258:	e7f1      	b.n	800b23e <_scanf_float+0x2aa>
 800b25a:	9802      	ldr	r0, [sp, #8]
 800b25c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b260:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b264:	9002      	str	r0, [sp, #8]
 800b266:	463a      	mov	r2, r7
 800b268:	4640      	mov	r0, r8
 800b26a:	4798      	blx	r3
 800b26c:	6923      	ldr	r3, [r4, #16]
 800b26e:	3b01      	subs	r3, #1
 800b270:	6123      	str	r3, [r4, #16]
 800b272:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b276:	fa5f fa8a 	uxtb.w	sl, sl
 800b27a:	f1ba 0f02 	cmp.w	sl, #2
 800b27e:	d1ec      	bne.n	800b25a <_scanf_float+0x2c6>
 800b280:	3d03      	subs	r5, #3
 800b282:	b2ed      	uxtb	r5, r5
 800b284:	1b76      	subs	r6, r6, r5
 800b286:	6823      	ldr	r3, [r4, #0]
 800b288:	05da      	lsls	r2, r3, #23
 800b28a:	d52f      	bpl.n	800b2ec <_scanf_float+0x358>
 800b28c:	055b      	lsls	r3, r3, #21
 800b28e:	d510      	bpl.n	800b2b2 <_scanf_float+0x31e>
 800b290:	455e      	cmp	r6, fp
 800b292:	f67f aebf 	bls.w	800b014 <_scanf_float+0x80>
 800b296:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b29a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b29e:	463a      	mov	r2, r7
 800b2a0:	4640      	mov	r0, r8
 800b2a2:	4798      	blx	r3
 800b2a4:	6923      	ldr	r3, [r4, #16]
 800b2a6:	3b01      	subs	r3, #1
 800b2a8:	6123      	str	r3, [r4, #16]
 800b2aa:	e7f1      	b.n	800b290 <_scanf_float+0x2fc>
 800b2ac:	46aa      	mov	sl, r5
 800b2ae:	9602      	str	r6, [sp, #8]
 800b2b0:	e7df      	b.n	800b272 <_scanf_float+0x2de>
 800b2b2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b2b6:	6923      	ldr	r3, [r4, #16]
 800b2b8:	2965      	cmp	r1, #101	; 0x65
 800b2ba:	f103 33ff 	add.w	r3, r3, #4294967295
 800b2be:	f106 35ff 	add.w	r5, r6, #4294967295
 800b2c2:	6123      	str	r3, [r4, #16]
 800b2c4:	d00c      	beq.n	800b2e0 <_scanf_float+0x34c>
 800b2c6:	2945      	cmp	r1, #69	; 0x45
 800b2c8:	d00a      	beq.n	800b2e0 <_scanf_float+0x34c>
 800b2ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b2ce:	463a      	mov	r2, r7
 800b2d0:	4640      	mov	r0, r8
 800b2d2:	4798      	blx	r3
 800b2d4:	6923      	ldr	r3, [r4, #16]
 800b2d6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b2da:	3b01      	subs	r3, #1
 800b2dc:	1eb5      	subs	r5, r6, #2
 800b2de:	6123      	str	r3, [r4, #16]
 800b2e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b2e4:	463a      	mov	r2, r7
 800b2e6:	4640      	mov	r0, r8
 800b2e8:	4798      	blx	r3
 800b2ea:	462e      	mov	r6, r5
 800b2ec:	6825      	ldr	r5, [r4, #0]
 800b2ee:	f015 0510 	ands.w	r5, r5, #16
 800b2f2:	d159      	bne.n	800b3a8 <_scanf_float+0x414>
 800b2f4:	7035      	strb	r5, [r6, #0]
 800b2f6:	6823      	ldr	r3, [r4, #0]
 800b2f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b2fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b300:	d11b      	bne.n	800b33a <_scanf_float+0x3a6>
 800b302:	9b01      	ldr	r3, [sp, #4]
 800b304:	454b      	cmp	r3, r9
 800b306:	eba3 0209 	sub.w	r2, r3, r9
 800b30a:	d123      	bne.n	800b354 <_scanf_float+0x3c0>
 800b30c:	2200      	movs	r2, #0
 800b30e:	4659      	mov	r1, fp
 800b310:	4640      	mov	r0, r8
 800b312:	f000 fe97 	bl	800c044 <_strtod_r>
 800b316:	6822      	ldr	r2, [r4, #0]
 800b318:	9b03      	ldr	r3, [sp, #12]
 800b31a:	f012 0f02 	tst.w	r2, #2
 800b31e:	ec57 6b10 	vmov	r6, r7, d0
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	d021      	beq.n	800b36a <_scanf_float+0x3d6>
 800b326:	9903      	ldr	r1, [sp, #12]
 800b328:	1d1a      	adds	r2, r3, #4
 800b32a:	600a      	str	r2, [r1, #0]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	e9c3 6700 	strd	r6, r7, [r3]
 800b332:	68e3      	ldr	r3, [r4, #12]
 800b334:	3301      	adds	r3, #1
 800b336:	60e3      	str	r3, [r4, #12]
 800b338:	e66d      	b.n	800b016 <_scanf_float+0x82>
 800b33a:	9b04      	ldr	r3, [sp, #16]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d0e5      	beq.n	800b30c <_scanf_float+0x378>
 800b340:	9905      	ldr	r1, [sp, #20]
 800b342:	230a      	movs	r3, #10
 800b344:	462a      	mov	r2, r5
 800b346:	3101      	adds	r1, #1
 800b348:	4640      	mov	r0, r8
 800b34a:	f000 ff03 	bl	800c154 <_strtol_r>
 800b34e:	9b04      	ldr	r3, [sp, #16]
 800b350:	9e05      	ldr	r6, [sp, #20]
 800b352:	1ac2      	subs	r2, r0, r3
 800b354:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b358:	429e      	cmp	r6, r3
 800b35a:	bf28      	it	cs
 800b35c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b360:	4912      	ldr	r1, [pc, #72]	; (800b3ac <_scanf_float+0x418>)
 800b362:	4630      	mov	r0, r6
 800b364:	f000 f82c 	bl	800b3c0 <siprintf>
 800b368:	e7d0      	b.n	800b30c <_scanf_float+0x378>
 800b36a:	9903      	ldr	r1, [sp, #12]
 800b36c:	f012 0f04 	tst.w	r2, #4
 800b370:	f103 0204 	add.w	r2, r3, #4
 800b374:	600a      	str	r2, [r1, #0]
 800b376:	d1d9      	bne.n	800b32c <_scanf_float+0x398>
 800b378:	f8d3 8000 	ldr.w	r8, [r3]
 800b37c:	ee10 2a10 	vmov	r2, s0
 800b380:	ee10 0a10 	vmov	r0, s0
 800b384:	463b      	mov	r3, r7
 800b386:	4639      	mov	r1, r7
 800b388:	f7f5 fbe8 	bl	8000b5c <__aeabi_dcmpun>
 800b38c:	b128      	cbz	r0, 800b39a <_scanf_float+0x406>
 800b38e:	4808      	ldr	r0, [pc, #32]	; (800b3b0 <_scanf_float+0x41c>)
 800b390:	f000 f810 	bl	800b3b4 <nanf>
 800b394:	ed88 0a00 	vstr	s0, [r8]
 800b398:	e7cb      	b.n	800b332 <_scanf_float+0x39e>
 800b39a:	4630      	mov	r0, r6
 800b39c:	4639      	mov	r1, r7
 800b39e:	f7f5 fc3b 	bl	8000c18 <__aeabi_d2f>
 800b3a2:	f8c8 0000 	str.w	r0, [r8]
 800b3a6:	e7c4      	b.n	800b332 <_scanf_float+0x39e>
 800b3a8:	2500      	movs	r5, #0
 800b3aa:	e634      	b.n	800b016 <_scanf_float+0x82>
 800b3ac:	0800f3d0 	.word	0x0800f3d0
 800b3b0:	0800f7d8 	.word	0x0800f7d8

0800b3b4 <nanf>:
 800b3b4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b3bc <nanf+0x8>
 800b3b8:	4770      	bx	lr
 800b3ba:	bf00      	nop
 800b3bc:	7fc00000 	.word	0x7fc00000

0800b3c0 <siprintf>:
 800b3c0:	b40e      	push	{r1, r2, r3}
 800b3c2:	b500      	push	{lr}
 800b3c4:	b09c      	sub	sp, #112	; 0x70
 800b3c6:	ab1d      	add	r3, sp, #116	; 0x74
 800b3c8:	9002      	str	r0, [sp, #8]
 800b3ca:	9006      	str	r0, [sp, #24]
 800b3cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b3d0:	4809      	ldr	r0, [pc, #36]	; (800b3f8 <siprintf+0x38>)
 800b3d2:	9107      	str	r1, [sp, #28]
 800b3d4:	9104      	str	r1, [sp, #16]
 800b3d6:	4909      	ldr	r1, [pc, #36]	; (800b3fc <siprintf+0x3c>)
 800b3d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3dc:	9105      	str	r1, [sp, #20]
 800b3de:	6800      	ldr	r0, [r0, #0]
 800b3e0:	9301      	str	r3, [sp, #4]
 800b3e2:	a902      	add	r1, sp, #8
 800b3e4:	f002 fee2 	bl	800e1ac <_svfiprintf_r>
 800b3e8:	9b02      	ldr	r3, [sp, #8]
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	701a      	strb	r2, [r3, #0]
 800b3ee:	b01c      	add	sp, #112	; 0x70
 800b3f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3f4:	b003      	add	sp, #12
 800b3f6:	4770      	bx	lr
 800b3f8:	20000080 	.word	0x20000080
 800b3fc:	ffff0208 	.word	0xffff0208

0800b400 <sulp>:
 800b400:	b570      	push	{r4, r5, r6, lr}
 800b402:	4604      	mov	r4, r0
 800b404:	460d      	mov	r5, r1
 800b406:	ec45 4b10 	vmov	d0, r4, r5
 800b40a:	4616      	mov	r6, r2
 800b40c:	f002 fc2c 	bl	800dc68 <__ulp>
 800b410:	ec51 0b10 	vmov	r0, r1, d0
 800b414:	b17e      	cbz	r6, 800b436 <sulp+0x36>
 800b416:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b41a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b41e:	2b00      	cmp	r3, #0
 800b420:	dd09      	ble.n	800b436 <sulp+0x36>
 800b422:	051b      	lsls	r3, r3, #20
 800b424:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b428:	2400      	movs	r4, #0
 800b42a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b42e:	4622      	mov	r2, r4
 800b430:	462b      	mov	r3, r5
 800b432:	f7f5 f8f9 	bl	8000628 <__aeabi_dmul>
 800b436:	bd70      	pop	{r4, r5, r6, pc}

0800b438 <_strtod_l>:
 800b438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b43c:	ed2d 8b02 	vpush	{d8}
 800b440:	b09d      	sub	sp, #116	; 0x74
 800b442:	461f      	mov	r7, r3
 800b444:	2300      	movs	r3, #0
 800b446:	9318      	str	r3, [sp, #96]	; 0x60
 800b448:	4ba2      	ldr	r3, [pc, #648]	; (800b6d4 <_strtod_l+0x29c>)
 800b44a:	9213      	str	r2, [sp, #76]	; 0x4c
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	9305      	str	r3, [sp, #20]
 800b450:	4604      	mov	r4, r0
 800b452:	4618      	mov	r0, r3
 800b454:	4688      	mov	r8, r1
 800b456:	f7f4 fed3 	bl	8000200 <strlen>
 800b45a:	f04f 0a00 	mov.w	sl, #0
 800b45e:	4605      	mov	r5, r0
 800b460:	f04f 0b00 	mov.w	fp, #0
 800b464:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b468:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b46a:	781a      	ldrb	r2, [r3, #0]
 800b46c:	2a2b      	cmp	r2, #43	; 0x2b
 800b46e:	d04e      	beq.n	800b50e <_strtod_l+0xd6>
 800b470:	d83b      	bhi.n	800b4ea <_strtod_l+0xb2>
 800b472:	2a0d      	cmp	r2, #13
 800b474:	d834      	bhi.n	800b4e0 <_strtod_l+0xa8>
 800b476:	2a08      	cmp	r2, #8
 800b478:	d834      	bhi.n	800b4e4 <_strtod_l+0xac>
 800b47a:	2a00      	cmp	r2, #0
 800b47c:	d03e      	beq.n	800b4fc <_strtod_l+0xc4>
 800b47e:	2300      	movs	r3, #0
 800b480:	930a      	str	r3, [sp, #40]	; 0x28
 800b482:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b484:	7833      	ldrb	r3, [r6, #0]
 800b486:	2b30      	cmp	r3, #48	; 0x30
 800b488:	f040 80b0 	bne.w	800b5ec <_strtod_l+0x1b4>
 800b48c:	7873      	ldrb	r3, [r6, #1]
 800b48e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b492:	2b58      	cmp	r3, #88	; 0x58
 800b494:	d168      	bne.n	800b568 <_strtod_l+0x130>
 800b496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b498:	9301      	str	r3, [sp, #4]
 800b49a:	ab18      	add	r3, sp, #96	; 0x60
 800b49c:	9702      	str	r7, [sp, #8]
 800b49e:	9300      	str	r3, [sp, #0]
 800b4a0:	4a8d      	ldr	r2, [pc, #564]	; (800b6d8 <_strtod_l+0x2a0>)
 800b4a2:	ab19      	add	r3, sp, #100	; 0x64
 800b4a4:	a917      	add	r1, sp, #92	; 0x5c
 800b4a6:	4620      	mov	r0, r4
 800b4a8:	f001 fd38 	bl	800cf1c <__gethex>
 800b4ac:	f010 0707 	ands.w	r7, r0, #7
 800b4b0:	4605      	mov	r5, r0
 800b4b2:	d005      	beq.n	800b4c0 <_strtod_l+0x88>
 800b4b4:	2f06      	cmp	r7, #6
 800b4b6:	d12c      	bne.n	800b512 <_strtod_l+0xda>
 800b4b8:	3601      	adds	r6, #1
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	9617      	str	r6, [sp, #92]	; 0x5c
 800b4be:	930a      	str	r3, [sp, #40]	; 0x28
 800b4c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	f040 8590 	bne.w	800bfe8 <_strtod_l+0xbb0>
 800b4c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4ca:	b1eb      	cbz	r3, 800b508 <_strtod_l+0xd0>
 800b4cc:	4652      	mov	r2, sl
 800b4ce:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b4d2:	ec43 2b10 	vmov	d0, r2, r3
 800b4d6:	b01d      	add	sp, #116	; 0x74
 800b4d8:	ecbd 8b02 	vpop	{d8}
 800b4dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4e0:	2a20      	cmp	r2, #32
 800b4e2:	d1cc      	bne.n	800b47e <_strtod_l+0x46>
 800b4e4:	3301      	adds	r3, #1
 800b4e6:	9317      	str	r3, [sp, #92]	; 0x5c
 800b4e8:	e7be      	b.n	800b468 <_strtod_l+0x30>
 800b4ea:	2a2d      	cmp	r2, #45	; 0x2d
 800b4ec:	d1c7      	bne.n	800b47e <_strtod_l+0x46>
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	920a      	str	r2, [sp, #40]	; 0x28
 800b4f2:	1c5a      	adds	r2, r3, #1
 800b4f4:	9217      	str	r2, [sp, #92]	; 0x5c
 800b4f6:	785b      	ldrb	r3, [r3, #1]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d1c2      	bne.n	800b482 <_strtod_l+0x4a>
 800b4fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b4fe:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b502:	2b00      	cmp	r3, #0
 800b504:	f040 856e 	bne.w	800bfe4 <_strtod_l+0xbac>
 800b508:	4652      	mov	r2, sl
 800b50a:	465b      	mov	r3, fp
 800b50c:	e7e1      	b.n	800b4d2 <_strtod_l+0x9a>
 800b50e:	2200      	movs	r2, #0
 800b510:	e7ee      	b.n	800b4f0 <_strtod_l+0xb8>
 800b512:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b514:	b13a      	cbz	r2, 800b526 <_strtod_l+0xee>
 800b516:	2135      	movs	r1, #53	; 0x35
 800b518:	a81a      	add	r0, sp, #104	; 0x68
 800b51a:	f002 fcb0 	bl	800de7e <__copybits>
 800b51e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b520:	4620      	mov	r0, r4
 800b522:	f002 f86f 	bl	800d604 <_Bfree>
 800b526:	3f01      	subs	r7, #1
 800b528:	2f04      	cmp	r7, #4
 800b52a:	d806      	bhi.n	800b53a <_strtod_l+0x102>
 800b52c:	e8df f007 	tbb	[pc, r7]
 800b530:	1714030a 	.word	0x1714030a
 800b534:	0a          	.byte	0x0a
 800b535:	00          	.byte	0x00
 800b536:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800b53a:	0728      	lsls	r0, r5, #28
 800b53c:	d5c0      	bpl.n	800b4c0 <_strtod_l+0x88>
 800b53e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b542:	e7bd      	b.n	800b4c0 <_strtod_l+0x88>
 800b544:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800b548:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b54a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b54e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b552:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b556:	e7f0      	b.n	800b53a <_strtod_l+0x102>
 800b558:	f8df b180 	ldr.w	fp, [pc, #384]	; 800b6dc <_strtod_l+0x2a4>
 800b55c:	e7ed      	b.n	800b53a <_strtod_l+0x102>
 800b55e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b562:	f04f 3aff 	mov.w	sl, #4294967295
 800b566:	e7e8      	b.n	800b53a <_strtod_l+0x102>
 800b568:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b56a:	1c5a      	adds	r2, r3, #1
 800b56c:	9217      	str	r2, [sp, #92]	; 0x5c
 800b56e:	785b      	ldrb	r3, [r3, #1]
 800b570:	2b30      	cmp	r3, #48	; 0x30
 800b572:	d0f9      	beq.n	800b568 <_strtod_l+0x130>
 800b574:	2b00      	cmp	r3, #0
 800b576:	d0a3      	beq.n	800b4c0 <_strtod_l+0x88>
 800b578:	2301      	movs	r3, #1
 800b57a:	f04f 0900 	mov.w	r9, #0
 800b57e:	9304      	str	r3, [sp, #16]
 800b580:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b582:	9308      	str	r3, [sp, #32]
 800b584:	f8cd 901c 	str.w	r9, [sp, #28]
 800b588:	464f      	mov	r7, r9
 800b58a:	220a      	movs	r2, #10
 800b58c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b58e:	7806      	ldrb	r6, [r0, #0]
 800b590:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b594:	b2d9      	uxtb	r1, r3
 800b596:	2909      	cmp	r1, #9
 800b598:	d92a      	bls.n	800b5f0 <_strtod_l+0x1b8>
 800b59a:	9905      	ldr	r1, [sp, #20]
 800b59c:	462a      	mov	r2, r5
 800b59e:	f002 ff1f 	bl	800e3e0 <strncmp>
 800b5a2:	b398      	cbz	r0, 800b60c <_strtod_l+0x1d4>
 800b5a4:	2000      	movs	r0, #0
 800b5a6:	4632      	mov	r2, r6
 800b5a8:	463d      	mov	r5, r7
 800b5aa:	9005      	str	r0, [sp, #20]
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	2a65      	cmp	r2, #101	; 0x65
 800b5b0:	d001      	beq.n	800b5b6 <_strtod_l+0x17e>
 800b5b2:	2a45      	cmp	r2, #69	; 0x45
 800b5b4:	d118      	bne.n	800b5e8 <_strtod_l+0x1b0>
 800b5b6:	b91d      	cbnz	r5, 800b5c0 <_strtod_l+0x188>
 800b5b8:	9a04      	ldr	r2, [sp, #16]
 800b5ba:	4302      	orrs	r2, r0
 800b5bc:	d09e      	beq.n	800b4fc <_strtod_l+0xc4>
 800b5be:	2500      	movs	r5, #0
 800b5c0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800b5c4:	f108 0201 	add.w	r2, r8, #1
 800b5c8:	9217      	str	r2, [sp, #92]	; 0x5c
 800b5ca:	f898 2001 	ldrb.w	r2, [r8, #1]
 800b5ce:	2a2b      	cmp	r2, #43	; 0x2b
 800b5d0:	d075      	beq.n	800b6be <_strtod_l+0x286>
 800b5d2:	2a2d      	cmp	r2, #45	; 0x2d
 800b5d4:	d07b      	beq.n	800b6ce <_strtod_l+0x296>
 800b5d6:	f04f 0c00 	mov.w	ip, #0
 800b5da:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b5de:	2909      	cmp	r1, #9
 800b5e0:	f240 8082 	bls.w	800b6e8 <_strtod_l+0x2b0>
 800b5e4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b5e8:	2600      	movs	r6, #0
 800b5ea:	e09d      	b.n	800b728 <_strtod_l+0x2f0>
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	e7c4      	b.n	800b57a <_strtod_l+0x142>
 800b5f0:	2f08      	cmp	r7, #8
 800b5f2:	bfd8      	it	le
 800b5f4:	9907      	ldrle	r1, [sp, #28]
 800b5f6:	f100 0001 	add.w	r0, r0, #1
 800b5fa:	bfda      	itte	le
 800b5fc:	fb02 3301 	mlale	r3, r2, r1, r3
 800b600:	9307      	strle	r3, [sp, #28]
 800b602:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b606:	3701      	adds	r7, #1
 800b608:	9017      	str	r0, [sp, #92]	; 0x5c
 800b60a:	e7bf      	b.n	800b58c <_strtod_l+0x154>
 800b60c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b60e:	195a      	adds	r2, r3, r5
 800b610:	9217      	str	r2, [sp, #92]	; 0x5c
 800b612:	5d5a      	ldrb	r2, [r3, r5]
 800b614:	2f00      	cmp	r7, #0
 800b616:	d037      	beq.n	800b688 <_strtod_l+0x250>
 800b618:	9005      	str	r0, [sp, #20]
 800b61a:	463d      	mov	r5, r7
 800b61c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b620:	2b09      	cmp	r3, #9
 800b622:	d912      	bls.n	800b64a <_strtod_l+0x212>
 800b624:	2301      	movs	r3, #1
 800b626:	e7c2      	b.n	800b5ae <_strtod_l+0x176>
 800b628:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b62a:	1c5a      	adds	r2, r3, #1
 800b62c:	9217      	str	r2, [sp, #92]	; 0x5c
 800b62e:	785a      	ldrb	r2, [r3, #1]
 800b630:	3001      	adds	r0, #1
 800b632:	2a30      	cmp	r2, #48	; 0x30
 800b634:	d0f8      	beq.n	800b628 <_strtod_l+0x1f0>
 800b636:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b63a:	2b08      	cmp	r3, #8
 800b63c:	f200 84d9 	bhi.w	800bff2 <_strtod_l+0xbba>
 800b640:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b642:	9005      	str	r0, [sp, #20]
 800b644:	2000      	movs	r0, #0
 800b646:	9308      	str	r3, [sp, #32]
 800b648:	4605      	mov	r5, r0
 800b64a:	3a30      	subs	r2, #48	; 0x30
 800b64c:	f100 0301 	add.w	r3, r0, #1
 800b650:	d014      	beq.n	800b67c <_strtod_l+0x244>
 800b652:	9905      	ldr	r1, [sp, #20]
 800b654:	4419      	add	r1, r3
 800b656:	9105      	str	r1, [sp, #20]
 800b658:	462b      	mov	r3, r5
 800b65a:	eb00 0e05 	add.w	lr, r0, r5
 800b65e:	210a      	movs	r1, #10
 800b660:	4573      	cmp	r3, lr
 800b662:	d113      	bne.n	800b68c <_strtod_l+0x254>
 800b664:	182b      	adds	r3, r5, r0
 800b666:	2b08      	cmp	r3, #8
 800b668:	f105 0501 	add.w	r5, r5, #1
 800b66c:	4405      	add	r5, r0
 800b66e:	dc1c      	bgt.n	800b6aa <_strtod_l+0x272>
 800b670:	9907      	ldr	r1, [sp, #28]
 800b672:	230a      	movs	r3, #10
 800b674:	fb03 2301 	mla	r3, r3, r1, r2
 800b678:	9307      	str	r3, [sp, #28]
 800b67a:	2300      	movs	r3, #0
 800b67c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b67e:	1c51      	adds	r1, r2, #1
 800b680:	9117      	str	r1, [sp, #92]	; 0x5c
 800b682:	7852      	ldrb	r2, [r2, #1]
 800b684:	4618      	mov	r0, r3
 800b686:	e7c9      	b.n	800b61c <_strtod_l+0x1e4>
 800b688:	4638      	mov	r0, r7
 800b68a:	e7d2      	b.n	800b632 <_strtod_l+0x1fa>
 800b68c:	2b08      	cmp	r3, #8
 800b68e:	dc04      	bgt.n	800b69a <_strtod_l+0x262>
 800b690:	9e07      	ldr	r6, [sp, #28]
 800b692:	434e      	muls	r6, r1
 800b694:	9607      	str	r6, [sp, #28]
 800b696:	3301      	adds	r3, #1
 800b698:	e7e2      	b.n	800b660 <_strtod_l+0x228>
 800b69a:	f103 0c01 	add.w	ip, r3, #1
 800b69e:	f1bc 0f10 	cmp.w	ip, #16
 800b6a2:	bfd8      	it	le
 800b6a4:	fb01 f909 	mulle.w	r9, r1, r9
 800b6a8:	e7f5      	b.n	800b696 <_strtod_l+0x25e>
 800b6aa:	2d10      	cmp	r5, #16
 800b6ac:	bfdc      	itt	le
 800b6ae:	230a      	movle	r3, #10
 800b6b0:	fb03 2909 	mlale	r9, r3, r9, r2
 800b6b4:	e7e1      	b.n	800b67a <_strtod_l+0x242>
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	9305      	str	r3, [sp, #20]
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	e77c      	b.n	800b5b8 <_strtod_l+0x180>
 800b6be:	f04f 0c00 	mov.w	ip, #0
 800b6c2:	f108 0202 	add.w	r2, r8, #2
 800b6c6:	9217      	str	r2, [sp, #92]	; 0x5c
 800b6c8:	f898 2002 	ldrb.w	r2, [r8, #2]
 800b6cc:	e785      	b.n	800b5da <_strtod_l+0x1a2>
 800b6ce:	f04f 0c01 	mov.w	ip, #1
 800b6d2:	e7f6      	b.n	800b6c2 <_strtod_l+0x28a>
 800b6d4:	0800f620 	.word	0x0800f620
 800b6d8:	0800f3d8 	.word	0x0800f3d8
 800b6dc:	7ff00000 	.word	0x7ff00000
 800b6e0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b6e2:	1c51      	adds	r1, r2, #1
 800b6e4:	9117      	str	r1, [sp, #92]	; 0x5c
 800b6e6:	7852      	ldrb	r2, [r2, #1]
 800b6e8:	2a30      	cmp	r2, #48	; 0x30
 800b6ea:	d0f9      	beq.n	800b6e0 <_strtod_l+0x2a8>
 800b6ec:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b6f0:	2908      	cmp	r1, #8
 800b6f2:	f63f af79 	bhi.w	800b5e8 <_strtod_l+0x1b0>
 800b6f6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b6fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b6fc:	9206      	str	r2, [sp, #24]
 800b6fe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b700:	1c51      	adds	r1, r2, #1
 800b702:	9117      	str	r1, [sp, #92]	; 0x5c
 800b704:	7852      	ldrb	r2, [r2, #1]
 800b706:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800b70a:	2e09      	cmp	r6, #9
 800b70c:	d937      	bls.n	800b77e <_strtod_l+0x346>
 800b70e:	9e06      	ldr	r6, [sp, #24]
 800b710:	1b89      	subs	r1, r1, r6
 800b712:	2908      	cmp	r1, #8
 800b714:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b718:	dc02      	bgt.n	800b720 <_strtod_l+0x2e8>
 800b71a:	4576      	cmp	r6, lr
 800b71c:	bfa8      	it	ge
 800b71e:	4676      	movge	r6, lr
 800b720:	f1bc 0f00 	cmp.w	ip, #0
 800b724:	d000      	beq.n	800b728 <_strtod_l+0x2f0>
 800b726:	4276      	negs	r6, r6
 800b728:	2d00      	cmp	r5, #0
 800b72a:	d14d      	bne.n	800b7c8 <_strtod_l+0x390>
 800b72c:	9904      	ldr	r1, [sp, #16]
 800b72e:	4301      	orrs	r1, r0
 800b730:	f47f aec6 	bne.w	800b4c0 <_strtod_l+0x88>
 800b734:	2b00      	cmp	r3, #0
 800b736:	f47f aee1 	bne.w	800b4fc <_strtod_l+0xc4>
 800b73a:	2a69      	cmp	r2, #105	; 0x69
 800b73c:	d027      	beq.n	800b78e <_strtod_l+0x356>
 800b73e:	dc24      	bgt.n	800b78a <_strtod_l+0x352>
 800b740:	2a49      	cmp	r2, #73	; 0x49
 800b742:	d024      	beq.n	800b78e <_strtod_l+0x356>
 800b744:	2a4e      	cmp	r2, #78	; 0x4e
 800b746:	f47f aed9 	bne.w	800b4fc <_strtod_l+0xc4>
 800b74a:	499f      	ldr	r1, [pc, #636]	; (800b9c8 <_strtod_l+0x590>)
 800b74c:	a817      	add	r0, sp, #92	; 0x5c
 800b74e:	f001 fe3d 	bl	800d3cc <__match>
 800b752:	2800      	cmp	r0, #0
 800b754:	f43f aed2 	beq.w	800b4fc <_strtod_l+0xc4>
 800b758:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b75a:	781b      	ldrb	r3, [r3, #0]
 800b75c:	2b28      	cmp	r3, #40	; 0x28
 800b75e:	d12d      	bne.n	800b7bc <_strtod_l+0x384>
 800b760:	499a      	ldr	r1, [pc, #616]	; (800b9cc <_strtod_l+0x594>)
 800b762:	aa1a      	add	r2, sp, #104	; 0x68
 800b764:	a817      	add	r0, sp, #92	; 0x5c
 800b766:	f001 fe45 	bl	800d3f4 <__hexnan>
 800b76a:	2805      	cmp	r0, #5
 800b76c:	d126      	bne.n	800b7bc <_strtod_l+0x384>
 800b76e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b770:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800b774:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b778:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b77c:	e6a0      	b.n	800b4c0 <_strtod_l+0x88>
 800b77e:	210a      	movs	r1, #10
 800b780:	fb01 2e0e 	mla	lr, r1, lr, r2
 800b784:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b788:	e7b9      	b.n	800b6fe <_strtod_l+0x2c6>
 800b78a:	2a6e      	cmp	r2, #110	; 0x6e
 800b78c:	e7db      	b.n	800b746 <_strtod_l+0x30e>
 800b78e:	4990      	ldr	r1, [pc, #576]	; (800b9d0 <_strtod_l+0x598>)
 800b790:	a817      	add	r0, sp, #92	; 0x5c
 800b792:	f001 fe1b 	bl	800d3cc <__match>
 800b796:	2800      	cmp	r0, #0
 800b798:	f43f aeb0 	beq.w	800b4fc <_strtod_l+0xc4>
 800b79c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b79e:	498d      	ldr	r1, [pc, #564]	; (800b9d4 <_strtod_l+0x59c>)
 800b7a0:	3b01      	subs	r3, #1
 800b7a2:	a817      	add	r0, sp, #92	; 0x5c
 800b7a4:	9317      	str	r3, [sp, #92]	; 0x5c
 800b7a6:	f001 fe11 	bl	800d3cc <__match>
 800b7aa:	b910      	cbnz	r0, 800b7b2 <_strtod_l+0x37a>
 800b7ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b7ae:	3301      	adds	r3, #1
 800b7b0:	9317      	str	r3, [sp, #92]	; 0x5c
 800b7b2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800b9e4 <_strtod_l+0x5ac>
 800b7b6:	f04f 0a00 	mov.w	sl, #0
 800b7ba:	e681      	b.n	800b4c0 <_strtod_l+0x88>
 800b7bc:	4886      	ldr	r0, [pc, #536]	; (800b9d8 <_strtod_l+0x5a0>)
 800b7be:	f002 fdf7 	bl	800e3b0 <nan>
 800b7c2:	ec5b ab10 	vmov	sl, fp, d0
 800b7c6:	e67b      	b.n	800b4c0 <_strtod_l+0x88>
 800b7c8:	9b05      	ldr	r3, [sp, #20]
 800b7ca:	9807      	ldr	r0, [sp, #28]
 800b7cc:	1af3      	subs	r3, r6, r3
 800b7ce:	2f00      	cmp	r7, #0
 800b7d0:	bf08      	it	eq
 800b7d2:	462f      	moveq	r7, r5
 800b7d4:	2d10      	cmp	r5, #16
 800b7d6:	9306      	str	r3, [sp, #24]
 800b7d8:	46a8      	mov	r8, r5
 800b7da:	bfa8      	it	ge
 800b7dc:	f04f 0810 	movge.w	r8, #16
 800b7e0:	f7f4 fea8 	bl	8000534 <__aeabi_ui2d>
 800b7e4:	2d09      	cmp	r5, #9
 800b7e6:	4682      	mov	sl, r0
 800b7e8:	468b      	mov	fp, r1
 800b7ea:	dd13      	ble.n	800b814 <_strtod_l+0x3dc>
 800b7ec:	4b7b      	ldr	r3, [pc, #492]	; (800b9dc <_strtod_l+0x5a4>)
 800b7ee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b7f2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b7f6:	f7f4 ff17 	bl	8000628 <__aeabi_dmul>
 800b7fa:	4682      	mov	sl, r0
 800b7fc:	4648      	mov	r0, r9
 800b7fe:	468b      	mov	fp, r1
 800b800:	f7f4 fe98 	bl	8000534 <__aeabi_ui2d>
 800b804:	4602      	mov	r2, r0
 800b806:	460b      	mov	r3, r1
 800b808:	4650      	mov	r0, sl
 800b80a:	4659      	mov	r1, fp
 800b80c:	f7f4 fd56 	bl	80002bc <__adddf3>
 800b810:	4682      	mov	sl, r0
 800b812:	468b      	mov	fp, r1
 800b814:	2d0f      	cmp	r5, #15
 800b816:	dc38      	bgt.n	800b88a <_strtod_l+0x452>
 800b818:	9b06      	ldr	r3, [sp, #24]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	f43f ae50 	beq.w	800b4c0 <_strtod_l+0x88>
 800b820:	dd24      	ble.n	800b86c <_strtod_l+0x434>
 800b822:	2b16      	cmp	r3, #22
 800b824:	dc0b      	bgt.n	800b83e <_strtod_l+0x406>
 800b826:	496d      	ldr	r1, [pc, #436]	; (800b9dc <_strtod_l+0x5a4>)
 800b828:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b82c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b830:	4652      	mov	r2, sl
 800b832:	465b      	mov	r3, fp
 800b834:	f7f4 fef8 	bl	8000628 <__aeabi_dmul>
 800b838:	4682      	mov	sl, r0
 800b83a:	468b      	mov	fp, r1
 800b83c:	e640      	b.n	800b4c0 <_strtod_l+0x88>
 800b83e:	9a06      	ldr	r2, [sp, #24]
 800b840:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b844:	4293      	cmp	r3, r2
 800b846:	db20      	blt.n	800b88a <_strtod_l+0x452>
 800b848:	4c64      	ldr	r4, [pc, #400]	; (800b9dc <_strtod_l+0x5a4>)
 800b84a:	f1c5 050f 	rsb	r5, r5, #15
 800b84e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b852:	4652      	mov	r2, sl
 800b854:	465b      	mov	r3, fp
 800b856:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b85a:	f7f4 fee5 	bl	8000628 <__aeabi_dmul>
 800b85e:	9b06      	ldr	r3, [sp, #24]
 800b860:	1b5d      	subs	r5, r3, r5
 800b862:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b866:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b86a:	e7e3      	b.n	800b834 <_strtod_l+0x3fc>
 800b86c:	9b06      	ldr	r3, [sp, #24]
 800b86e:	3316      	adds	r3, #22
 800b870:	db0b      	blt.n	800b88a <_strtod_l+0x452>
 800b872:	9b05      	ldr	r3, [sp, #20]
 800b874:	1b9e      	subs	r6, r3, r6
 800b876:	4b59      	ldr	r3, [pc, #356]	; (800b9dc <_strtod_l+0x5a4>)
 800b878:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800b87c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b880:	4650      	mov	r0, sl
 800b882:	4659      	mov	r1, fp
 800b884:	f7f4 fffa 	bl	800087c <__aeabi_ddiv>
 800b888:	e7d6      	b.n	800b838 <_strtod_l+0x400>
 800b88a:	9b06      	ldr	r3, [sp, #24]
 800b88c:	eba5 0808 	sub.w	r8, r5, r8
 800b890:	4498      	add	r8, r3
 800b892:	f1b8 0f00 	cmp.w	r8, #0
 800b896:	dd74      	ble.n	800b982 <_strtod_l+0x54a>
 800b898:	f018 030f 	ands.w	r3, r8, #15
 800b89c:	d00a      	beq.n	800b8b4 <_strtod_l+0x47c>
 800b89e:	494f      	ldr	r1, [pc, #316]	; (800b9dc <_strtod_l+0x5a4>)
 800b8a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b8a4:	4652      	mov	r2, sl
 800b8a6:	465b      	mov	r3, fp
 800b8a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8ac:	f7f4 febc 	bl	8000628 <__aeabi_dmul>
 800b8b0:	4682      	mov	sl, r0
 800b8b2:	468b      	mov	fp, r1
 800b8b4:	f038 080f 	bics.w	r8, r8, #15
 800b8b8:	d04f      	beq.n	800b95a <_strtod_l+0x522>
 800b8ba:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b8be:	dd22      	ble.n	800b906 <_strtod_l+0x4ce>
 800b8c0:	2500      	movs	r5, #0
 800b8c2:	462e      	mov	r6, r5
 800b8c4:	9507      	str	r5, [sp, #28]
 800b8c6:	9505      	str	r5, [sp, #20]
 800b8c8:	2322      	movs	r3, #34	; 0x22
 800b8ca:	f8df b118 	ldr.w	fp, [pc, #280]	; 800b9e4 <_strtod_l+0x5ac>
 800b8ce:	6023      	str	r3, [r4, #0]
 800b8d0:	f04f 0a00 	mov.w	sl, #0
 800b8d4:	9b07      	ldr	r3, [sp, #28]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	f43f adf2 	beq.w	800b4c0 <_strtod_l+0x88>
 800b8dc:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b8de:	4620      	mov	r0, r4
 800b8e0:	f001 fe90 	bl	800d604 <_Bfree>
 800b8e4:	9905      	ldr	r1, [sp, #20]
 800b8e6:	4620      	mov	r0, r4
 800b8e8:	f001 fe8c 	bl	800d604 <_Bfree>
 800b8ec:	4631      	mov	r1, r6
 800b8ee:	4620      	mov	r0, r4
 800b8f0:	f001 fe88 	bl	800d604 <_Bfree>
 800b8f4:	9907      	ldr	r1, [sp, #28]
 800b8f6:	4620      	mov	r0, r4
 800b8f8:	f001 fe84 	bl	800d604 <_Bfree>
 800b8fc:	4629      	mov	r1, r5
 800b8fe:	4620      	mov	r0, r4
 800b900:	f001 fe80 	bl	800d604 <_Bfree>
 800b904:	e5dc      	b.n	800b4c0 <_strtod_l+0x88>
 800b906:	4b36      	ldr	r3, [pc, #216]	; (800b9e0 <_strtod_l+0x5a8>)
 800b908:	9304      	str	r3, [sp, #16]
 800b90a:	2300      	movs	r3, #0
 800b90c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b910:	4650      	mov	r0, sl
 800b912:	4659      	mov	r1, fp
 800b914:	4699      	mov	r9, r3
 800b916:	f1b8 0f01 	cmp.w	r8, #1
 800b91a:	dc21      	bgt.n	800b960 <_strtod_l+0x528>
 800b91c:	b10b      	cbz	r3, 800b922 <_strtod_l+0x4ea>
 800b91e:	4682      	mov	sl, r0
 800b920:	468b      	mov	fp, r1
 800b922:	4b2f      	ldr	r3, [pc, #188]	; (800b9e0 <_strtod_l+0x5a8>)
 800b924:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b928:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800b92c:	4652      	mov	r2, sl
 800b92e:	465b      	mov	r3, fp
 800b930:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b934:	f7f4 fe78 	bl	8000628 <__aeabi_dmul>
 800b938:	4b2a      	ldr	r3, [pc, #168]	; (800b9e4 <_strtod_l+0x5ac>)
 800b93a:	460a      	mov	r2, r1
 800b93c:	400b      	ands	r3, r1
 800b93e:	492a      	ldr	r1, [pc, #168]	; (800b9e8 <_strtod_l+0x5b0>)
 800b940:	428b      	cmp	r3, r1
 800b942:	4682      	mov	sl, r0
 800b944:	d8bc      	bhi.n	800b8c0 <_strtod_l+0x488>
 800b946:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b94a:	428b      	cmp	r3, r1
 800b94c:	bf86      	itte	hi
 800b94e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800b9ec <_strtod_l+0x5b4>
 800b952:	f04f 3aff 	movhi.w	sl, #4294967295
 800b956:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b95a:	2300      	movs	r3, #0
 800b95c:	9304      	str	r3, [sp, #16]
 800b95e:	e084      	b.n	800ba6a <_strtod_l+0x632>
 800b960:	f018 0f01 	tst.w	r8, #1
 800b964:	d005      	beq.n	800b972 <_strtod_l+0x53a>
 800b966:	9b04      	ldr	r3, [sp, #16]
 800b968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b96c:	f7f4 fe5c 	bl	8000628 <__aeabi_dmul>
 800b970:	2301      	movs	r3, #1
 800b972:	9a04      	ldr	r2, [sp, #16]
 800b974:	3208      	adds	r2, #8
 800b976:	f109 0901 	add.w	r9, r9, #1
 800b97a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b97e:	9204      	str	r2, [sp, #16]
 800b980:	e7c9      	b.n	800b916 <_strtod_l+0x4de>
 800b982:	d0ea      	beq.n	800b95a <_strtod_l+0x522>
 800b984:	f1c8 0800 	rsb	r8, r8, #0
 800b988:	f018 020f 	ands.w	r2, r8, #15
 800b98c:	d00a      	beq.n	800b9a4 <_strtod_l+0x56c>
 800b98e:	4b13      	ldr	r3, [pc, #76]	; (800b9dc <_strtod_l+0x5a4>)
 800b990:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b994:	4650      	mov	r0, sl
 800b996:	4659      	mov	r1, fp
 800b998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b99c:	f7f4 ff6e 	bl	800087c <__aeabi_ddiv>
 800b9a0:	4682      	mov	sl, r0
 800b9a2:	468b      	mov	fp, r1
 800b9a4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b9a8:	d0d7      	beq.n	800b95a <_strtod_l+0x522>
 800b9aa:	f1b8 0f1f 	cmp.w	r8, #31
 800b9ae:	dd1f      	ble.n	800b9f0 <_strtod_l+0x5b8>
 800b9b0:	2500      	movs	r5, #0
 800b9b2:	462e      	mov	r6, r5
 800b9b4:	9507      	str	r5, [sp, #28]
 800b9b6:	9505      	str	r5, [sp, #20]
 800b9b8:	2322      	movs	r3, #34	; 0x22
 800b9ba:	f04f 0a00 	mov.w	sl, #0
 800b9be:	f04f 0b00 	mov.w	fp, #0
 800b9c2:	6023      	str	r3, [r4, #0]
 800b9c4:	e786      	b.n	800b8d4 <_strtod_l+0x49c>
 800b9c6:	bf00      	nop
 800b9c8:	0800f3a9 	.word	0x0800f3a9
 800b9cc:	0800f3ec 	.word	0x0800f3ec
 800b9d0:	0800f3a1 	.word	0x0800f3a1
 800b9d4:	0800f52c 	.word	0x0800f52c
 800b9d8:	0800f7d8 	.word	0x0800f7d8
 800b9dc:	0800f6b8 	.word	0x0800f6b8
 800b9e0:	0800f690 	.word	0x0800f690
 800b9e4:	7ff00000 	.word	0x7ff00000
 800b9e8:	7ca00000 	.word	0x7ca00000
 800b9ec:	7fefffff 	.word	0x7fefffff
 800b9f0:	f018 0310 	ands.w	r3, r8, #16
 800b9f4:	bf18      	it	ne
 800b9f6:	236a      	movne	r3, #106	; 0x6a
 800b9f8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800bda8 <_strtod_l+0x970>
 800b9fc:	9304      	str	r3, [sp, #16]
 800b9fe:	4650      	mov	r0, sl
 800ba00:	4659      	mov	r1, fp
 800ba02:	2300      	movs	r3, #0
 800ba04:	f018 0f01 	tst.w	r8, #1
 800ba08:	d004      	beq.n	800ba14 <_strtod_l+0x5dc>
 800ba0a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ba0e:	f7f4 fe0b 	bl	8000628 <__aeabi_dmul>
 800ba12:	2301      	movs	r3, #1
 800ba14:	ea5f 0868 	movs.w	r8, r8, asr #1
 800ba18:	f109 0908 	add.w	r9, r9, #8
 800ba1c:	d1f2      	bne.n	800ba04 <_strtod_l+0x5cc>
 800ba1e:	b10b      	cbz	r3, 800ba24 <_strtod_l+0x5ec>
 800ba20:	4682      	mov	sl, r0
 800ba22:	468b      	mov	fp, r1
 800ba24:	9b04      	ldr	r3, [sp, #16]
 800ba26:	b1c3      	cbz	r3, 800ba5a <_strtod_l+0x622>
 800ba28:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ba2c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	4659      	mov	r1, fp
 800ba34:	dd11      	ble.n	800ba5a <_strtod_l+0x622>
 800ba36:	2b1f      	cmp	r3, #31
 800ba38:	f340 8124 	ble.w	800bc84 <_strtod_l+0x84c>
 800ba3c:	2b34      	cmp	r3, #52	; 0x34
 800ba3e:	bfde      	ittt	le
 800ba40:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800ba44:	f04f 33ff 	movle.w	r3, #4294967295
 800ba48:	fa03 f202 	lslle.w	r2, r3, r2
 800ba4c:	f04f 0a00 	mov.w	sl, #0
 800ba50:	bfcc      	ite	gt
 800ba52:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ba56:	ea02 0b01 	andle.w	fp, r2, r1
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	4650      	mov	r0, sl
 800ba60:	4659      	mov	r1, fp
 800ba62:	f7f5 f849 	bl	8000af8 <__aeabi_dcmpeq>
 800ba66:	2800      	cmp	r0, #0
 800ba68:	d1a2      	bne.n	800b9b0 <_strtod_l+0x578>
 800ba6a:	9b07      	ldr	r3, [sp, #28]
 800ba6c:	9300      	str	r3, [sp, #0]
 800ba6e:	9908      	ldr	r1, [sp, #32]
 800ba70:	462b      	mov	r3, r5
 800ba72:	463a      	mov	r2, r7
 800ba74:	4620      	mov	r0, r4
 800ba76:	f001 fe2d 	bl	800d6d4 <__s2b>
 800ba7a:	9007      	str	r0, [sp, #28]
 800ba7c:	2800      	cmp	r0, #0
 800ba7e:	f43f af1f 	beq.w	800b8c0 <_strtod_l+0x488>
 800ba82:	9b05      	ldr	r3, [sp, #20]
 800ba84:	1b9e      	subs	r6, r3, r6
 800ba86:	9b06      	ldr	r3, [sp, #24]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	bfb4      	ite	lt
 800ba8c:	4633      	movlt	r3, r6
 800ba8e:	2300      	movge	r3, #0
 800ba90:	930c      	str	r3, [sp, #48]	; 0x30
 800ba92:	9b06      	ldr	r3, [sp, #24]
 800ba94:	2500      	movs	r5, #0
 800ba96:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ba9a:	9312      	str	r3, [sp, #72]	; 0x48
 800ba9c:	462e      	mov	r6, r5
 800ba9e:	9b07      	ldr	r3, [sp, #28]
 800baa0:	4620      	mov	r0, r4
 800baa2:	6859      	ldr	r1, [r3, #4]
 800baa4:	f001 fd6e 	bl	800d584 <_Balloc>
 800baa8:	9005      	str	r0, [sp, #20]
 800baaa:	2800      	cmp	r0, #0
 800baac:	f43f af0c 	beq.w	800b8c8 <_strtod_l+0x490>
 800bab0:	9b07      	ldr	r3, [sp, #28]
 800bab2:	691a      	ldr	r2, [r3, #16]
 800bab4:	3202      	adds	r2, #2
 800bab6:	f103 010c 	add.w	r1, r3, #12
 800baba:	0092      	lsls	r2, r2, #2
 800babc:	300c      	adds	r0, #12
 800babe:	f001 fd53 	bl	800d568 <memcpy>
 800bac2:	ec4b ab10 	vmov	d0, sl, fp
 800bac6:	aa1a      	add	r2, sp, #104	; 0x68
 800bac8:	a919      	add	r1, sp, #100	; 0x64
 800baca:	4620      	mov	r0, r4
 800bacc:	f002 f948 	bl	800dd60 <__d2b>
 800bad0:	ec4b ab18 	vmov	d8, sl, fp
 800bad4:	9018      	str	r0, [sp, #96]	; 0x60
 800bad6:	2800      	cmp	r0, #0
 800bad8:	f43f aef6 	beq.w	800b8c8 <_strtod_l+0x490>
 800badc:	2101      	movs	r1, #1
 800bade:	4620      	mov	r0, r4
 800bae0:	f001 fe92 	bl	800d808 <__i2b>
 800bae4:	4606      	mov	r6, r0
 800bae6:	2800      	cmp	r0, #0
 800bae8:	f43f aeee 	beq.w	800b8c8 <_strtod_l+0x490>
 800baec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800baee:	9904      	ldr	r1, [sp, #16]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	bfab      	itete	ge
 800baf4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800baf6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800baf8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800bafa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800bafe:	bfac      	ite	ge
 800bb00:	eb03 0902 	addge.w	r9, r3, r2
 800bb04:	1ad7      	sublt	r7, r2, r3
 800bb06:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800bb08:	eba3 0801 	sub.w	r8, r3, r1
 800bb0c:	4490      	add	r8, r2
 800bb0e:	4ba1      	ldr	r3, [pc, #644]	; (800bd94 <_strtod_l+0x95c>)
 800bb10:	f108 38ff 	add.w	r8, r8, #4294967295
 800bb14:	4598      	cmp	r8, r3
 800bb16:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800bb1a:	f280 80c7 	bge.w	800bcac <_strtod_l+0x874>
 800bb1e:	eba3 0308 	sub.w	r3, r3, r8
 800bb22:	2b1f      	cmp	r3, #31
 800bb24:	eba2 0203 	sub.w	r2, r2, r3
 800bb28:	f04f 0101 	mov.w	r1, #1
 800bb2c:	f300 80b1 	bgt.w	800bc92 <_strtod_l+0x85a>
 800bb30:	fa01 f303 	lsl.w	r3, r1, r3
 800bb34:	930d      	str	r3, [sp, #52]	; 0x34
 800bb36:	2300      	movs	r3, #0
 800bb38:	9308      	str	r3, [sp, #32]
 800bb3a:	eb09 0802 	add.w	r8, r9, r2
 800bb3e:	9b04      	ldr	r3, [sp, #16]
 800bb40:	45c1      	cmp	r9, r8
 800bb42:	4417      	add	r7, r2
 800bb44:	441f      	add	r7, r3
 800bb46:	464b      	mov	r3, r9
 800bb48:	bfa8      	it	ge
 800bb4a:	4643      	movge	r3, r8
 800bb4c:	42bb      	cmp	r3, r7
 800bb4e:	bfa8      	it	ge
 800bb50:	463b      	movge	r3, r7
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	bfc2      	ittt	gt
 800bb56:	eba8 0803 	subgt.w	r8, r8, r3
 800bb5a:	1aff      	subgt	r7, r7, r3
 800bb5c:	eba9 0903 	subgt.w	r9, r9, r3
 800bb60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	dd17      	ble.n	800bb96 <_strtod_l+0x75e>
 800bb66:	4631      	mov	r1, r6
 800bb68:	461a      	mov	r2, r3
 800bb6a:	4620      	mov	r0, r4
 800bb6c:	f001 ff0c 	bl	800d988 <__pow5mult>
 800bb70:	4606      	mov	r6, r0
 800bb72:	2800      	cmp	r0, #0
 800bb74:	f43f aea8 	beq.w	800b8c8 <_strtod_l+0x490>
 800bb78:	4601      	mov	r1, r0
 800bb7a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bb7c:	4620      	mov	r0, r4
 800bb7e:	f001 fe59 	bl	800d834 <__multiply>
 800bb82:	900b      	str	r0, [sp, #44]	; 0x2c
 800bb84:	2800      	cmp	r0, #0
 800bb86:	f43f ae9f 	beq.w	800b8c8 <_strtod_l+0x490>
 800bb8a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bb8c:	4620      	mov	r0, r4
 800bb8e:	f001 fd39 	bl	800d604 <_Bfree>
 800bb92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb94:	9318      	str	r3, [sp, #96]	; 0x60
 800bb96:	f1b8 0f00 	cmp.w	r8, #0
 800bb9a:	f300 808c 	bgt.w	800bcb6 <_strtod_l+0x87e>
 800bb9e:	9b06      	ldr	r3, [sp, #24]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	dd08      	ble.n	800bbb6 <_strtod_l+0x77e>
 800bba4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bba6:	9905      	ldr	r1, [sp, #20]
 800bba8:	4620      	mov	r0, r4
 800bbaa:	f001 feed 	bl	800d988 <__pow5mult>
 800bbae:	9005      	str	r0, [sp, #20]
 800bbb0:	2800      	cmp	r0, #0
 800bbb2:	f43f ae89 	beq.w	800b8c8 <_strtod_l+0x490>
 800bbb6:	2f00      	cmp	r7, #0
 800bbb8:	dd08      	ble.n	800bbcc <_strtod_l+0x794>
 800bbba:	9905      	ldr	r1, [sp, #20]
 800bbbc:	463a      	mov	r2, r7
 800bbbe:	4620      	mov	r0, r4
 800bbc0:	f001 ff3c 	bl	800da3c <__lshift>
 800bbc4:	9005      	str	r0, [sp, #20]
 800bbc6:	2800      	cmp	r0, #0
 800bbc8:	f43f ae7e 	beq.w	800b8c8 <_strtod_l+0x490>
 800bbcc:	f1b9 0f00 	cmp.w	r9, #0
 800bbd0:	dd08      	ble.n	800bbe4 <_strtod_l+0x7ac>
 800bbd2:	4631      	mov	r1, r6
 800bbd4:	464a      	mov	r2, r9
 800bbd6:	4620      	mov	r0, r4
 800bbd8:	f001 ff30 	bl	800da3c <__lshift>
 800bbdc:	4606      	mov	r6, r0
 800bbde:	2800      	cmp	r0, #0
 800bbe0:	f43f ae72 	beq.w	800b8c8 <_strtod_l+0x490>
 800bbe4:	9a05      	ldr	r2, [sp, #20]
 800bbe6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bbe8:	4620      	mov	r0, r4
 800bbea:	f001 ffb3 	bl	800db54 <__mdiff>
 800bbee:	4605      	mov	r5, r0
 800bbf0:	2800      	cmp	r0, #0
 800bbf2:	f43f ae69 	beq.w	800b8c8 <_strtod_l+0x490>
 800bbf6:	68c3      	ldr	r3, [r0, #12]
 800bbf8:	930b      	str	r3, [sp, #44]	; 0x2c
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	60c3      	str	r3, [r0, #12]
 800bbfe:	4631      	mov	r1, r6
 800bc00:	f001 ff8c 	bl	800db1c <__mcmp>
 800bc04:	2800      	cmp	r0, #0
 800bc06:	da60      	bge.n	800bcca <_strtod_l+0x892>
 800bc08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc0a:	ea53 030a 	orrs.w	r3, r3, sl
 800bc0e:	f040 8082 	bne.w	800bd16 <_strtod_l+0x8de>
 800bc12:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d17d      	bne.n	800bd16 <_strtod_l+0x8de>
 800bc1a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bc1e:	0d1b      	lsrs	r3, r3, #20
 800bc20:	051b      	lsls	r3, r3, #20
 800bc22:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800bc26:	d976      	bls.n	800bd16 <_strtod_l+0x8de>
 800bc28:	696b      	ldr	r3, [r5, #20]
 800bc2a:	b913      	cbnz	r3, 800bc32 <_strtod_l+0x7fa>
 800bc2c:	692b      	ldr	r3, [r5, #16]
 800bc2e:	2b01      	cmp	r3, #1
 800bc30:	dd71      	ble.n	800bd16 <_strtod_l+0x8de>
 800bc32:	4629      	mov	r1, r5
 800bc34:	2201      	movs	r2, #1
 800bc36:	4620      	mov	r0, r4
 800bc38:	f001 ff00 	bl	800da3c <__lshift>
 800bc3c:	4631      	mov	r1, r6
 800bc3e:	4605      	mov	r5, r0
 800bc40:	f001 ff6c 	bl	800db1c <__mcmp>
 800bc44:	2800      	cmp	r0, #0
 800bc46:	dd66      	ble.n	800bd16 <_strtod_l+0x8de>
 800bc48:	9904      	ldr	r1, [sp, #16]
 800bc4a:	4a53      	ldr	r2, [pc, #332]	; (800bd98 <_strtod_l+0x960>)
 800bc4c:	465b      	mov	r3, fp
 800bc4e:	2900      	cmp	r1, #0
 800bc50:	f000 8081 	beq.w	800bd56 <_strtod_l+0x91e>
 800bc54:	ea02 010b 	and.w	r1, r2, fp
 800bc58:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800bc5c:	dc7b      	bgt.n	800bd56 <_strtod_l+0x91e>
 800bc5e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800bc62:	f77f aea9 	ble.w	800b9b8 <_strtod_l+0x580>
 800bc66:	4b4d      	ldr	r3, [pc, #308]	; (800bd9c <_strtod_l+0x964>)
 800bc68:	4650      	mov	r0, sl
 800bc6a:	4659      	mov	r1, fp
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	f7f4 fcdb 	bl	8000628 <__aeabi_dmul>
 800bc72:	460b      	mov	r3, r1
 800bc74:	4303      	orrs	r3, r0
 800bc76:	bf08      	it	eq
 800bc78:	2322      	moveq	r3, #34	; 0x22
 800bc7a:	4682      	mov	sl, r0
 800bc7c:	468b      	mov	fp, r1
 800bc7e:	bf08      	it	eq
 800bc80:	6023      	streq	r3, [r4, #0]
 800bc82:	e62b      	b.n	800b8dc <_strtod_l+0x4a4>
 800bc84:	f04f 32ff 	mov.w	r2, #4294967295
 800bc88:	fa02 f303 	lsl.w	r3, r2, r3
 800bc8c:	ea03 0a0a 	and.w	sl, r3, sl
 800bc90:	e6e3      	b.n	800ba5a <_strtod_l+0x622>
 800bc92:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800bc96:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800bc9a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800bc9e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800bca2:	fa01 f308 	lsl.w	r3, r1, r8
 800bca6:	9308      	str	r3, [sp, #32]
 800bca8:	910d      	str	r1, [sp, #52]	; 0x34
 800bcaa:	e746      	b.n	800bb3a <_strtod_l+0x702>
 800bcac:	2300      	movs	r3, #0
 800bcae:	9308      	str	r3, [sp, #32]
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	930d      	str	r3, [sp, #52]	; 0x34
 800bcb4:	e741      	b.n	800bb3a <_strtod_l+0x702>
 800bcb6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bcb8:	4642      	mov	r2, r8
 800bcba:	4620      	mov	r0, r4
 800bcbc:	f001 febe 	bl	800da3c <__lshift>
 800bcc0:	9018      	str	r0, [sp, #96]	; 0x60
 800bcc2:	2800      	cmp	r0, #0
 800bcc4:	f47f af6b 	bne.w	800bb9e <_strtod_l+0x766>
 800bcc8:	e5fe      	b.n	800b8c8 <_strtod_l+0x490>
 800bcca:	465f      	mov	r7, fp
 800bccc:	d16e      	bne.n	800bdac <_strtod_l+0x974>
 800bcce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bcd0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bcd4:	b342      	cbz	r2, 800bd28 <_strtod_l+0x8f0>
 800bcd6:	4a32      	ldr	r2, [pc, #200]	; (800bda0 <_strtod_l+0x968>)
 800bcd8:	4293      	cmp	r3, r2
 800bcda:	d128      	bne.n	800bd2e <_strtod_l+0x8f6>
 800bcdc:	9b04      	ldr	r3, [sp, #16]
 800bcde:	4651      	mov	r1, sl
 800bce0:	b1eb      	cbz	r3, 800bd1e <_strtod_l+0x8e6>
 800bce2:	4b2d      	ldr	r3, [pc, #180]	; (800bd98 <_strtod_l+0x960>)
 800bce4:	403b      	ands	r3, r7
 800bce6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bcea:	f04f 32ff 	mov.w	r2, #4294967295
 800bcee:	d819      	bhi.n	800bd24 <_strtod_l+0x8ec>
 800bcf0:	0d1b      	lsrs	r3, r3, #20
 800bcf2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bcf6:	fa02 f303 	lsl.w	r3, r2, r3
 800bcfa:	4299      	cmp	r1, r3
 800bcfc:	d117      	bne.n	800bd2e <_strtod_l+0x8f6>
 800bcfe:	4b29      	ldr	r3, [pc, #164]	; (800bda4 <_strtod_l+0x96c>)
 800bd00:	429f      	cmp	r7, r3
 800bd02:	d102      	bne.n	800bd0a <_strtod_l+0x8d2>
 800bd04:	3101      	adds	r1, #1
 800bd06:	f43f addf 	beq.w	800b8c8 <_strtod_l+0x490>
 800bd0a:	4b23      	ldr	r3, [pc, #140]	; (800bd98 <_strtod_l+0x960>)
 800bd0c:	403b      	ands	r3, r7
 800bd0e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800bd12:	f04f 0a00 	mov.w	sl, #0
 800bd16:	9b04      	ldr	r3, [sp, #16]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d1a4      	bne.n	800bc66 <_strtod_l+0x82e>
 800bd1c:	e5de      	b.n	800b8dc <_strtod_l+0x4a4>
 800bd1e:	f04f 33ff 	mov.w	r3, #4294967295
 800bd22:	e7ea      	b.n	800bcfa <_strtod_l+0x8c2>
 800bd24:	4613      	mov	r3, r2
 800bd26:	e7e8      	b.n	800bcfa <_strtod_l+0x8c2>
 800bd28:	ea53 030a 	orrs.w	r3, r3, sl
 800bd2c:	d08c      	beq.n	800bc48 <_strtod_l+0x810>
 800bd2e:	9b08      	ldr	r3, [sp, #32]
 800bd30:	b1db      	cbz	r3, 800bd6a <_strtod_l+0x932>
 800bd32:	423b      	tst	r3, r7
 800bd34:	d0ef      	beq.n	800bd16 <_strtod_l+0x8de>
 800bd36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd38:	9a04      	ldr	r2, [sp, #16]
 800bd3a:	4650      	mov	r0, sl
 800bd3c:	4659      	mov	r1, fp
 800bd3e:	b1c3      	cbz	r3, 800bd72 <_strtod_l+0x93a>
 800bd40:	f7ff fb5e 	bl	800b400 <sulp>
 800bd44:	4602      	mov	r2, r0
 800bd46:	460b      	mov	r3, r1
 800bd48:	ec51 0b18 	vmov	r0, r1, d8
 800bd4c:	f7f4 fab6 	bl	80002bc <__adddf3>
 800bd50:	4682      	mov	sl, r0
 800bd52:	468b      	mov	fp, r1
 800bd54:	e7df      	b.n	800bd16 <_strtod_l+0x8de>
 800bd56:	4013      	ands	r3, r2
 800bd58:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800bd5c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bd60:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bd64:	f04f 3aff 	mov.w	sl, #4294967295
 800bd68:	e7d5      	b.n	800bd16 <_strtod_l+0x8de>
 800bd6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd6c:	ea13 0f0a 	tst.w	r3, sl
 800bd70:	e7e0      	b.n	800bd34 <_strtod_l+0x8fc>
 800bd72:	f7ff fb45 	bl	800b400 <sulp>
 800bd76:	4602      	mov	r2, r0
 800bd78:	460b      	mov	r3, r1
 800bd7a:	ec51 0b18 	vmov	r0, r1, d8
 800bd7e:	f7f4 fa9b 	bl	80002b8 <__aeabi_dsub>
 800bd82:	2200      	movs	r2, #0
 800bd84:	2300      	movs	r3, #0
 800bd86:	4682      	mov	sl, r0
 800bd88:	468b      	mov	fp, r1
 800bd8a:	f7f4 feb5 	bl	8000af8 <__aeabi_dcmpeq>
 800bd8e:	2800      	cmp	r0, #0
 800bd90:	d0c1      	beq.n	800bd16 <_strtod_l+0x8de>
 800bd92:	e611      	b.n	800b9b8 <_strtod_l+0x580>
 800bd94:	fffffc02 	.word	0xfffffc02
 800bd98:	7ff00000 	.word	0x7ff00000
 800bd9c:	39500000 	.word	0x39500000
 800bda0:	000fffff 	.word	0x000fffff
 800bda4:	7fefffff 	.word	0x7fefffff
 800bda8:	0800f400 	.word	0x0800f400
 800bdac:	4631      	mov	r1, r6
 800bdae:	4628      	mov	r0, r5
 800bdb0:	f002 f832 	bl	800de18 <__ratio>
 800bdb4:	ec59 8b10 	vmov	r8, r9, d0
 800bdb8:	ee10 0a10 	vmov	r0, s0
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bdc2:	4649      	mov	r1, r9
 800bdc4:	f7f4 feac 	bl	8000b20 <__aeabi_dcmple>
 800bdc8:	2800      	cmp	r0, #0
 800bdca:	d07a      	beq.n	800bec2 <_strtod_l+0xa8a>
 800bdcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d04a      	beq.n	800be68 <_strtod_l+0xa30>
 800bdd2:	4b95      	ldr	r3, [pc, #596]	; (800c028 <_strtod_l+0xbf0>)
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bdda:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800c028 <_strtod_l+0xbf0>
 800bdde:	f04f 0800 	mov.w	r8, #0
 800bde2:	4b92      	ldr	r3, [pc, #584]	; (800c02c <_strtod_l+0xbf4>)
 800bde4:	403b      	ands	r3, r7
 800bde6:	930d      	str	r3, [sp, #52]	; 0x34
 800bde8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bdea:	4b91      	ldr	r3, [pc, #580]	; (800c030 <_strtod_l+0xbf8>)
 800bdec:	429a      	cmp	r2, r3
 800bdee:	f040 80b0 	bne.w	800bf52 <_strtod_l+0xb1a>
 800bdf2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bdf6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800bdfa:	ec4b ab10 	vmov	d0, sl, fp
 800bdfe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800be02:	f001 ff31 	bl	800dc68 <__ulp>
 800be06:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800be0a:	ec53 2b10 	vmov	r2, r3, d0
 800be0e:	f7f4 fc0b 	bl	8000628 <__aeabi_dmul>
 800be12:	4652      	mov	r2, sl
 800be14:	465b      	mov	r3, fp
 800be16:	f7f4 fa51 	bl	80002bc <__adddf3>
 800be1a:	460b      	mov	r3, r1
 800be1c:	4983      	ldr	r1, [pc, #524]	; (800c02c <_strtod_l+0xbf4>)
 800be1e:	4a85      	ldr	r2, [pc, #532]	; (800c034 <_strtod_l+0xbfc>)
 800be20:	4019      	ands	r1, r3
 800be22:	4291      	cmp	r1, r2
 800be24:	4682      	mov	sl, r0
 800be26:	d960      	bls.n	800beea <_strtod_l+0xab2>
 800be28:	ee18 3a90 	vmov	r3, s17
 800be2c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800be30:	4293      	cmp	r3, r2
 800be32:	d104      	bne.n	800be3e <_strtod_l+0xa06>
 800be34:	ee18 3a10 	vmov	r3, s16
 800be38:	3301      	adds	r3, #1
 800be3a:	f43f ad45 	beq.w	800b8c8 <_strtod_l+0x490>
 800be3e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800c040 <_strtod_l+0xc08>
 800be42:	f04f 3aff 	mov.w	sl, #4294967295
 800be46:	9918      	ldr	r1, [sp, #96]	; 0x60
 800be48:	4620      	mov	r0, r4
 800be4a:	f001 fbdb 	bl	800d604 <_Bfree>
 800be4e:	9905      	ldr	r1, [sp, #20]
 800be50:	4620      	mov	r0, r4
 800be52:	f001 fbd7 	bl	800d604 <_Bfree>
 800be56:	4631      	mov	r1, r6
 800be58:	4620      	mov	r0, r4
 800be5a:	f001 fbd3 	bl	800d604 <_Bfree>
 800be5e:	4629      	mov	r1, r5
 800be60:	4620      	mov	r0, r4
 800be62:	f001 fbcf 	bl	800d604 <_Bfree>
 800be66:	e61a      	b.n	800ba9e <_strtod_l+0x666>
 800be68:	f1ba 0f00 	cmp.w	sl, #0
 800be6c:	d11b      	bne.n	800bea6 <_strtod_l+0xa6e>
 800be6e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800be72:	b9f3      	cbnz	r3, 800beb2 <_strtod_l+0xa7a>
 800be74:	4b6c      	ldr	r3, [pc, #432]	; (800c028 <_strtod_l+0xbf0>)
 800be76:	2200      	movs	r2, #0
 800be78:	4640      	mov	r0, r8
 800be7a:	4649      	mov	r1, r9
 800be7c:	f7f4 fe46 	bl	8000b0c <__aeabi_dcmplt>
 800be80:	b9d0      	cbnz	r0, 800beb8 <_strtod_l+0xa80>
 800be82:	4640      	mov	r0, r8
 800be84:	4649      	mov	r1, r9
 800be86:	4b6c      	ldr	r3, [pc, #432]	; (800c038 <_strtod_l+0xc00>)
 800be88:	2200      	movs	r2, #0
 800be8a:	f7f4 fbcd 	bl	8000628 <__aeabi_dmul>
 800be8e:	4680      	mov	r8, r0
 800be90:	4689      	mov	r9, r1
 800be92:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800be96:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800be9a:	9315      	str	r3, [sp, #84]	; 0x54
 800be9c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800bea0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bea4:	e79d      	b.n	800bde2 <_strtod_l+0x9aa>
 800bea6:	f1ba 0f01 	cmp.w	sl, #1
 800beaa:	d102      	bne.n	800beb2 <_strtod_l+0xa7a>
 800beac:	2f00      	cmp	r7, #0
 800beae:	f43f ad83 	beq.w	800b9b8 <_strtod_l+0x580>
 800beb2:	4b62      	ldr	r3, [pc, #392]	; (800c03c <_strtod_l+0xc04>)
 800beb4:	2200      	movs	r2, #0
 800beb6:	e78e      	b.n	800bdd6 <_strtod_l+0x99e>
 800beb8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800c038 <_strtod_l+0xc00>
 800bebc:	f04f 0800 	mov.w	r8, #0
 800bec0:	e7e7      	b.n	800be92 <_strtod_l+0xa5a>
 800bec2:	4b5d      	ldr	r3, [pc, #372]	; (800c038 <_strtod_l+0xc00>)
 800bec4:	4640      	mov	r0, r8
 800bec6:	4649      	mov	r1, r9
 800bec8:	2200      	movs	r2, #0
 800beca:	f7f4 fbad 	bl	8000628 <__aeabi_dmul>
 800bece:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bed0:	4680      	mov	r8, r0
 800bed2:	4689      	mov	r9, r1
 800bed4:	b933      	cbnz	r3, 800bee4 <_strtod_l+0xaac>
 800bed6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800beda:	900e      	str	r0, [sp, #56]	; 0x38
 800bedc:	930f      	str	r3, [sp, #60]	; 0x3c
 800bede:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800bee2:	e7dd      	b.n	800bea0 <_strtod_l+0xa68>
 800bee4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800bee8:	e7f9      	b.n	800bede <_strtod_l+0xaa6>
 800beea:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800beee:	9b04      	ldr	r3, [sp, #16]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d1a8      	bne.n	800be46 <_strtod_l+0xa0e>
 800bef4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bef8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800befa:	0d1b      	lsrs	r3, r3, #20
 800befc:	051b      	lsls	r3, r3, #20
 800befe:	429a      	cmp	r2, r3
 800bf00:	d1a1      	bne.n	800be46 <_strtod_l+0xa0e>
 800bf02:	4640      	mov	r0, r8
 800bf04:	4649      	mov	r1, r9
 800bf06:	f7f4 feef 	bl	8000ce8 <__aeabi_d2lz>
 800bf0a:	f7f4 fb5f 	bl	80005cc <__aeabi_l2d>
 800bf0e:	4602      	mov	r2, r0
 800bf10:	460b      	mov	r3, r1
 800bf12:	4640      	mov	r0, r8
 800bf14:	4649      	mov	r1, r9
 800bf16:	f7f4 f9cf 	bl	80002b8 <__aeabi_dsub>
 800bf1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bf1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bf20:	ea43 030a 	orr.w	r3, r3, sl
 800bf24:	4313      	orrs	r3, r2
 800bf26:	4680      	mov	r8, r0
 800bf28:	4689      	mov	r9, r1
 800bf2a:	d055      	beq.n	800bfd8 <_strtod_l+0xba0>
 800bf2c:	a336      	add	r3, pc, #216	; (adr r3, 800c008 <_strtod_l+0xbd0>)
 800bf2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf32:	f7f4 fdeb 	bl	8000b0c <__aeabi_dcmplt>
 800bf36:	2800      	cmp	r0, #0
 800bf38:	f47f acd0 	bne.w	800b8dc <_strtod_l+0x4a4>
 800bf3c:	a334      	add	r3, pc, #208	; (adr r3, 800c010 <_strtod_l+0xbd8>)
 800bf3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf42:	4640      	mov	r0, r8
 800bf44:	4649      	mov	r1, r9
 800bf46:	f7f4 fdff 	bl	8000b48 <__aeabi_dcmpgt>
 800bf4a:	2800      	cmp	r0, #0
 800bf4c:	f43f af7b 	beq.w	800be46 <_strtod_l+0xa0e>
 800bf50:	e4c4      	b.n	800b8dc <_strtod_l+0x4a4>
 800bf52:	9b04      	ldr	r3, [sp, #16]
 800bf54:	b333      	cbz	r3, 800bfa4 <_strtod_l+0xb6c>
 800bf56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf58:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bf5c:	d822      	bhi.n	800bfa4 <_strtod_l+0xb6c>
 800bf5e:	a32e      	add	r3, pc, #184	; (adr r3, 800c018 <_strtod_l+0xbe0>)
 800bf60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf64:	4640      	mov	r0, r8
 800bf66:	4649      	mov	r1, r9
 800bf68:	f7f4 fdda 	bl	8000b20 <__aeabi_dcmple>
 800bf6c:	b1a0      	cbz	r0, 800bf98 <_strtod_l+0xb60>
 800bf6e:	4649      	mov	r1, r9
 800bf70:	4640      	mov	r0, r8
 800bf72:	f7f4 fe31 	bl	8000bd8 <__aeabi_d2uiz>
 800bf76:	2801      	cmp	r0, #1
 800bf78:	bf38      	it	cc
 800bf7a:	2001      	movcc	r0, #1
 800bf7c:	f7f4 fada 	bl	8000534 <__aeabi_ui2d>
 800bf80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf82:	4680      	mov	r8, r0
 800bf84:	4689      	mov	r9, r1
 800bf86:	bb23      	cbnz	r3, 800bfd2 <_strtod_l+0xb9a>
 800bf88:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bf8c:	9010      	str	r0, [sp, #64]	; 0x40
 800bf8e:	9311      	str	r3, [sp, #68]	; 0x44
 800bf90:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bf94:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bf98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bf9c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800bfa0:	1a9b      	subs	r3, r3, r2
 800bfa2:	9309      	str	r3, [sp, #36]	; 0x24
 800bfa4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bfa8:	eeb0 0a48 	vmov.f32	s0, s16
 800bfac:	eef0 0a68 	vmov.f32	s1, s17
 800bfb0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bfb4:	f001 fe58 	bl	800dc68 <__ulp>
 800bfb8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bfbc:	ec53 2b10 	vmov	r2, r3, d0
 800bfc0:	f7f4 fb32 	bl	8000628 <__aeabi_dmul>
 800bfc4:	ec53 2b18 	vmov	r2, r3, d8
 800bfc8:	f7f4 f978 	bl	80002bc <__adddf3>
 800bfcc:	4682      	mov	sl, r0
 800bfce:	468b      	mov	fp, r1
 800bfd0:	e78d      	b.n	800beee <_strtod_l+0xab6>
 800bfd2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800bfd6:	e7db      	b.n	800bf90 <_strtod_l+0xb58>
 800bfd8:	a311      	add	r3, pc, #68	; (adr r3, 800c020 <_strtod_l+0xbe8>)
 800bfda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfde:	f7f4 fd95 	bl	8000b0c <__aeabi_dcmplt>
 800bfe2:	e7b2      	b.n	800bf4a <_strtod_l+0xb12>
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	930a      	str	r3, [sp, #40]	; 0x28
 800bfe8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bfea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bfec:	6013      	str	r3, [r2, #0]
 800bfee:	f7ff ba6b 	b.w	800b4c8 <_strtod_l+0x90>
 800bff2:	2a65      	cmp	r2, #101	; 0x65
 800bff4:	f43f ab5f 	beq.w	800b6b6 <_strtod_l+0x27e>
 800bff8:	2a45      	cmp	r2, #69	; 0x45
 800bffa:	f43f ab5c 	beq.w	800b6b6 <_strtod_l+0x27e>
 800bffe:	2301      	movs	r3, #1
 800c000:	f7ff bb94 	b.w	800b72c <_strtod_l+0x2f4>
 800c004:	f3af 8000 	nop.w
 800c008:	94a03595 	.word	0x94a03595
 800c00c:	3fdfffff 	.word	0x3fdfffff
 800c010:	35afe535 	.word	0x35afe535
 800c014:	3fe00000 	.word	0x3fe00000
 800c018:	ffc00000 	.word	0xffc00000
 800c01c:	41dfffff 	.word	0x41dfffff
 800c020:	94a03595 	.word	0x94a03595
 800c024:	3fcfffff 	.word	0x3fcfffff
 800c028:	3ff00000 	.word	0x3ff00000
 800c02c:	7ff00000 	.word	0x7ff00000
 800c030:	7fe00000 	.word	0x7fe00000
 800c034:	7c9fffff 	.word	0x7c9fffff
 800c038:	3fe00000 	.word	0x3fe00000
 800c03c:	bff00000 	.word	0xbff00000
 800c040:	7fefffff 	.word	0x7fefffff

0800c044 <_strtod_r>:
 800c044:	4b01      	ldr	r3, [pc, #4]	; (800c04c <_strtod_r+0x8>)
 800c046:	f7ff b9f7 	b.w	800b438 <_strtod_l>
 800c04a:	bf00      	nop
 800c04c:	200000e8 	.word	0x200000e8

0800c050 <_strtol_l.constprop.0>:
 800c050:	2b01      	cmp	r3, #1
 800c052:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c056:	d001      	beq.n	800c05c <_strtol_l.constprop.0+0xc>
 800c058:	2b24      	cmp	r3, #36	; 0x24
 800c05a:	d906      	bls.n	800c06a <_strtol_l.constprop.0+0x1a>
 800c05c:	f7fe fafe 	bl	800a65c <__errno>
 800c060:	2316      	movs	r3, #22
 800c062:	6003      	str	r3, [r0, #0]
 800c064:	2000      	movs	r0, #0
 800c066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c06a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c150 <_strtol_l.constprop.0+0x100>
 800c06e:	460d      	mov	r5, r1
 800c070:	462e      	mov	r6, r5
 800c072:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c076:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c07a:	f017 0708 	ands.w	r7, r7, #8
 800c07e:	d1f7      	bne.n	800c070 <_strtol_l.constprop.0+0x20>
 800c080:	2c2d      	cmp	r4, #45	; 0x2d
 800c082:	d132      	bne.n	800c0ea <_strtol_l.constprop.0+0x9a>
 800c084:	782c      	ldrb	r4, [r5, #0]
 800c086:	2701      	movs	r7, #1
 800c088:	1cb5      	adds	r5, r6, #2
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d05b      	beq.n	800c146 <_strtol_l.constprop.0+0xf6>
 800c08e:	2b10      	cmp	r3, #16
 800c090:	d109      	bne.n	800c0a6 <_strtol_l.constprop.0+0x56>
 800c092:	2c30      	cmp	r4, #48	; 0x30
 800c094:	d107      	bne.n	800c0a6 <_strtol_l.constprop.0+0x56>
 800c096:	782c      	ldrb	r4, [r5, #0]
 800c098:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c09c:	2c58      	cmp	r4, #88	; 0x58
 800c09e:	d14d      	bne.n	800c13c <_strtol_l.constprop.0+0xec>
 800c0a0:	786c      	ldrb	r4, [r5, #1]
 800c0a2:	2310      	movs	r3, #16
 800c0a4:	3502      	adds	r5, #2
 800c0a6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c0aa:	f108 38ff 	add.w	r8, r8, #4294967295
 800c0ae:	f04f 0c00 	mov.w	ip, #0
 800c0b2:	fbb8 f9f3 	udiv	r9, r8, r3
 800c0b6:	4666      	mov	r6, ip
 800c0b8:	fb03 8a19 	mls	sl, r3, r9, r8
 800c0bc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c0c0:	f1be 0f09 	cmp.w	lr, #9
 800c0c4:	d816      	bhi.n	800c0f4 <_strtol_l.constprop.0+0xa4>
 800c0c6:	4674      	mov	r4, lr
 800c0c8:	42a3      	cmp	r3, r4
 800c0ca:	dd24      	ble.n	800c116 <_strtol_l.constprop.0+0xc6>
 800c0cc:	f1bc 0f00 	cmp.w	ip, #0
 800c0d0:	db1e      	blt.n	800c110 <_strtol_l.constprop.0+0xc0>
 800c0d2:	45b1      	cmp	r9, r6
 800c0d4:	d31c      	bcc.n	800c110 <_strtol_l.constprop.0+0xc0>
 800c0d6:	d101      	bne.n	800c0dc <_strtol_l.constprop.0+0x8c>
 800c0d8:	45a2      	cmp	sl, r4
 800c0da:	db19      	blt.n	800c110 <_strtol_l.constprop.0+0xc0>
 800c0dc:	fb06 4603 	mla	r6, r6, r3, r4
 800c0e0:	f04f 0c01 	mov.w	ip, #1
 800c0e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c0e8:	e7e8      	b.n	800c0bc <_strtol_l.constprop.0+0x6c>
 800c0ea:	2c2b      	cmp	r4, #43	; 0x2b
 800c0ec:	bf04      	itt	eq
 800c0ee:	782c      	ldrbeq	r4, [r5, #0]
 800c0f0:	1cb5      	addeq	r5, r6, #2
 800c0f2:	e7ca      	b.n	800c08a <_strtol_l.constprop.0+0x3a>
 800c0f4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c0f8:	f1be 0f19 	cmp.w	lr, #25
 800c0fc:	d801      	bhi.n	800c102 <_strtol_l.constprop.0+0xb2>
 800c0fe:	3c37      	subs	r4, #55	; 0x37
 800c100:	e7e2      	b.n	800c0c8 <_strtol_l.constprop.0+0x78>
 800c102:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c106:	f1be 0f19 	cmp.w	lr, #25
 800c10a:	d804      	bhi.n	800c116 <_strtol_l.constprop.0+0xc6>
 800c10c:	3c57      	subs	r4, #87	; 0x57
 800c10e:	e7db      	b.n	800c0c8 <_strtol_l.constprop.0+0x78>
 800c110:	f04f 3cff 	mov.w	ip, #4294967295
 800c114:	e7e6      	b.n	800c0e4 <_strtol_l.constprop.0+0x94>
 800c116:	f1bc 0f00 	cmp.w	ip, #0
 800c11a:	da05      	bge.n	800c128 <_strtol_l.constprop.0+0xd8>
 800c11c:	2322      	movs	r3, #34	; 0x22
 800c11e:	6003      	str	r3, [r0, #0]
 800c120:	4646      	mov	r6, r8
 800c122:	b942      	cbnz	r2, 800c136 <_strtol_l.constprop.0+0xe6>
 800c124:	4630      	mov	r0, r6
 800c126:	e79e      	b.n	800c066 <_strtol_l.constprop.0+0x16>
 800c128:	b107      	cbz	r7, 800c12c <_strtol_l.constprop.0+0xdc>
 800c12a:	4276      	negs	r6, r6
 800c12c:	2a00      	cmp	r2, #0
 800c12e:	d0f9      	beq.n	800c124 <_strtol_l.constprop.0+0xd4>
 800c130:	f1bc 0f00 	cmp.w	ip, #0
 800c134:	d000      	beq.n	800c138 <_strtol_l.constprop.0+0xe8>
 800c136:	1e69      	subs	r1, r5, #1
 800c138:	6011      	str	r1, [r2, #0]
 800c13a:	e7f3      	b.n	800c124 <_strtol_l.constprop.0+0xd4>
 800c13c:	2430      	movs	r4, #48	; 0x30
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d1b1      	bne.n	800c0a6 <_strtol_l.constprop.0+0x56>
 800c142:	2308      	movs	r3, #8
 800c144:	e7af      	b.n	800c0a6 <_strtol_l.constprop.0+0x56>
 800c146:	2c30      	cmp	r4, #48	; 0x30
 800c148:	d0a5      	beq.n	800c096 <_strtol_l.constprop.0+0x46>
 800c14a:	230a      	movs	r3, #10
 800c14c:	e7ab      	b.n	800c0a6 <_strtol_l.constprop.0+0x56>
 800c14e:	bf00      	nop
 800c150:	0800f429 	.word	0x0800f429

0800c154 <_strtol_r>:
 800c154:	f7ff bf7c 	b.w	800c050 <_strtol_l.constprop.0>

0800c158 <quorem>:
 800c158:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c15c:	6903      	ldr	r3, [r0, #16]
 800c15e:	690c      	ldr	r4, [r1, #16]
 800c160:	42a3      	cmp	r3, r4
 800c162:	4607      	mov	r7, r0
 800c164:	f2c0 8081 	blt.w	800c26a <quorem+0x112>
 800c168:	3c01      	subs	r4, #1
 800c16a:	f101 0814 	add.w	r8, r1, #20
 800c16e:	f100 0514 	add.w	r5, r0, #20
 800c172:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c176:	9301      	str	r3, [sp, #4]
 800c178:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c17c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c180:	3301      	adds	r3, #1
 800c182:	429a      	cmp	r2, r3
 800c184:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c188:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c18c:	fbb2 f6f3 	udiv	r6, r2, r3
 800c190:	d331      	bcc.n	800c1f6 <quorem+0x9e>
 800c192:	f04f 0e00 	mov.w	lr, #0
 800c196:	4640      	mov	r0, r8
 800c198:	46ac      	mov	ip, r5
 800c19a:	46f2      	mov	sl, lr
 800c19c:	f850 2b04 	ldr.w	r2, [r0], #4
 800c1a0:	b293      	uxth	r3, r2
 800c1a2:	fb06 e303 	mla	r3, r6, r3, lr
 800c1a6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c1aa:	b29b      	uxth	r3, r3
 800c1ac:	ebaa 0303 	sub.w	r3, sl, r3
 800c1b0:	f8dc a000 	ldr.w	sl, [ip]
 800c1b4:	0c12      	lsrs	r2, r2, #16
 800c1b6:	fa13 f38a 	uxtah	r3, r3, sl
 800c1ba:	fb06 e202 	mla	r2, r6, r2, lr
 800c1be:	9300      	str	r3, [sp, #0]
 800c1c0:	9b00      	ldr	r3, [sp, #0]
 800c1c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c1c6:	b292      	uxth	r2, r2
 800c1c8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c1cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c1d0:	f8bd 3000 	ldrh.w	r3, [sp]
 800c1d4:	4581      	cmp	r9, r0
 800c1d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c1da:	f84c 3b04 	str.w	r3, [ip], #4
 800c1de:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c1e2:	d2db      	bcs.n	800c19c <quorem+0x44>
 800c1e4:	f855 300b 	ldr.w	r3, [r5, fp]
 800c1e8:	b92b      	cbnz	r3, 800c1f6 <quorem+0x9e>
 800c1ea:	9b01      	ldr	r3, [sp, #4]
 800c1ec:	3b04      	subs	r3, #4
 800c1ee:	429d      	cmp	r5, r3
 800c1f0:	461a      	mov	r2, r3
 800c1f2:	d32e      	bcc.n	800c252 <quorem+0xfa>
 800c1f4:	613c      	str	r4, [r7, #16]
 800c1f6:	4638      	mov	r0, r7
 800c1f8:	f001 fc90 	bl	800db1c <__mcmp>
 800c1fc:	2800      	cmp	r0, #0
 800c1fe:	db24      	blt.n	800c24a <quorem+0xf2>
 800c200:	3601      	adds	r6, #1
 800c202:	4628      	mov	r0, r5
 800c204:	f04f 0c00 	mov.w	ip, #0
 800c208:	f858 2b04 	ldr.w	r2, [r8], #4
 800c20c:	f8d0 e000 	ldr.w	lr, [r0]
 800c210:	b293      	uxth	r3, r2
 800c212:	ebac 0303 	sub.w	r3, ip, r3
 800c216:	0c12      	lsrs	r2, r2, #16
 800c218:	fa13 f38e 	uxtah	r3, r3, lr
 800c21c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c220:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c224:	b29b      	uxth	r3, r3
 800c226:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c22a:	45c1      	cmp	r9, r8
 800c22c:	f840 3b04 	str.w	r3, [r0], #4
 800c230:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c234:	d2e8      	bcs.n	800c208 <quorem+0xb0>
 800c236:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c23a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c23e:	b922      	cbnz	r2, 800c24a <quorem+0xf2>
 800c240:	3b04      	subs	r3, #4
 800c242:	429d      	cmp	r5, r3
 800c244:	461a      	mov	r2, r3
 800c246:	d30a      	bcc.n	800c25e <quorem+0x106>
 800c248:	613c      	str	r4, [r7, #16]
 800c24a:	4630      	mov	r0, r6
 800c24c:	b003      	add	sp, #12
 800c24e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c252:	6812      	ldr	r2, [r2, #0]
 800c254:	3b04      	subs	r3, #4
 800c256:	2a00      	cmp	r2, #0
 800c258:	d1cc      	bne.n	800c1f4 <quorem+0x9c>
 800c25a:	3c01      	subs	r4, #1
 800c25c:	e7c7      	b.n	800c1ee <quorem+0x96>
 800c25e:	6812      	ldr	r2, [r2, #0]
 800c260:	3b04      	subs	r3, #4
 800c262:	2a00      	cmp	r2, #0
 800c264:	d1f0      	bne.n	800c248 <quorem+0xf0>
 800c266:	3c01      	subs	r4, #1
 800c268:	e7eb      	b.n	800c242 <quorem+0xea>
 800c26a:	2000      	movs	r0, #0
 800c26c:	e7ee      	b.n	800c24c <quorem+0xf4>
	...

0800c270 <_dtoa_r>:
 800c270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c274:	ed2d 8b04 	vpush	{d8-d9}
 800c278:	ec57 6b10 	vmov	r6, r7, d0
 800c27c:	b093      	sub	sp, #76	; 0x4c
 800c27e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c280:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c284:	9106      	str	r1, [sp, #24]
 800c286:	ee10 aa10 	vmov	sl, s0
 800c28a:	4604      	mov	r4, r0
 800c28c:	9209      	str	r2, [sp, #36]	; 0x24
 800c28e:	930c      	str	r3, [sp, #48]	; 0x30
 800c290:	46bb      	mov	fp, r7
 800c292:	b975      	cbnz	r5, 800c2b2 <_dtoa_r+0x42>
 800c294:	2010      	movs	r0, #16
 800c296:	f001 f94d 	bl	800d534 <malloc>
 800c29a:	4602      	mov	r2, r0
 800c29c:	6260      	str	r0, [r4, #36]	; 0x24
 800c29e:	b920      	cbnz	r0, 800c2aa <_dtoa_r+0x3a>
 800c2a0:	4ba7      	ldr	r3, [pc, #668]	; (800c540 <_dtoa_r+0x2d0>)
 800c2a2:	21ea      	movs	r1, #234	; 0xea
 800c2a4:	48a7      	ldr	r0, [pc, #668]	; (800c544 <_dtoa_r+0x2d4>)
 800c2a6:	f002 f8bd 	bl	800e424 <__assert_func>
 800c2aa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c2ae:	6005      	str	r5, [r0, #0]
 800c2b0:	60c5      	str	r5, [r0, #12]
 800c2b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2b4:	6819      	ldr	r1, [r3, #0]
 800c2b6:	b151      	cbz	r1, 800c2ce <_dtoa_r+0x5e>
 800c2b8:	685a      	ldr	r2, [r3, #4]
 800c2ba:	604a      	str	r2, [r1, #4]
 800c2bc:	2301      	movs	r3, #1
 800c2be:	4093      	lsls	r3, r2
 800c2c0:	608b      	str	r3, [r1, #8]
 800c2c2:	4620      	mov	r0, r4
 800c2c4:	f001 f99e 	bl	800d604 <_Bfree>
 800c2c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	601a      	str	r2, [r3, #0]
 800c2ce:	1e3b      	subs	r3, r7, #0
 800c2d0:	bfaa      	itet	ge
 800c2d2:	2300      	movge	r3, #0
 800c2d4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c2d8:	f8c8 3000 	strge.w	r3, [r8]
 800c2dc:	4b9a      	ldr	r3, [pc, #616]	; (800c548 <_dtoa_r+0x2d8>)
 800c2de:	bfbc      	itt	lt
 800c2e0:	2201      	movlt	r2, #1
 800c2e2:	f8c8 2000 	strlt.w	r2, [r8]
 800c2e6:	ea33 030b 	bics.w	r3, r3, fp
 800c2ea:	d11b      	bne.n	800c324 <_dtoa_r+0xb4>
 800c2ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c2ee:	f242 730f 	movw	r3, #9999	; 0x270f
 800c2f2:	6013      	str	r3, [r2, #0]
 800c2f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c2f8:	4333      	orrs	r3, r6
 800c2fa:	f000 8592 	beq.w	800ce22 <_dtoa_r+0xbb2>
 800c2fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c300:	b963      	cbnz	r3, 800c31c <_dtoa_r+0xac>
 800c302:	4b92      	ldr	r3, [pc, #584]	; (800c54c <_dtoa_r+0x2dc>)
 800c304:	e022      	b.n	800c34c <_dtoa_r+0xdc>
 800c306:	4b92      	ldr	r3, [pc, #584]	; (800c550 <_dtoa_r+0x2e0>)
 800c308:	9301      	str	r3, [sp, #4]
 800c30a:	3308      	adds	r3, #8
 800c30c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c30e:	6013      	str	r3, [r2, #0]
 800c310:	9801      	ldr	r0, [sp, #4]
 800c312:	b013      	add	sp, #76	; 0x4c
 800c314:	ecbd 8b04 	vpop	{d8-d9}
 800c318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c31c:	4b8b      	ldr	r3, [pc, #556]	; (800c54c <_dtoa_r+0x2dc>)
 800c31e:	9301      	str	r3, [sp, #4]
 800c320:	3303      	adds	r3, #3
 800c322:	e7f3      	b.n	800c30c <_dtoa_r+0x9c>
 800c324:	2200      	movs	r2, #0
 800c326:	2300      	movs	r3, #0
 800c328:	4650      	mov	r0, sl
 800c32a:	4659      	mov	r1, fp
 800c32c:	f7f4 fbe4 	bl	8000af8 <__aeabi_dcmpeq>
 800c330:	ec4b ab19 	vmov	d9, sl, fp
 800c334:	4680      	mov	r8, r0
 800c336:	b158      	cbz	r0, 800c350 <_dtoa_r+0xe0>
 800c338:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c33a:	2301      	movs	r3, #1
 800c33c:	6013      	str	r3, [r2, #0]
 800c33e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c340:	2b00      	cmp	r3, #0
 800c342:	f000 856b 	beq.w	800ce1c <_dtoa_r+0xbac>
 800c346:	4883      	ldr	r0, [pc, #524]	; (800c554 <_dtoa_r+0x2e4>)
 800c348:	6018      	str	r0, [r3, #0]
 800c34a:	1e43      	subs	r3, r0, #1
 800c34c:	9301      	str	r3, [sp, #4]
 800c34e:	e7df      	b.n	800c310 <_dtoa_r+0xa0>
 800c350:	ec4b ab10 	vmov	d0, sl, fp
 800c354:	aa10      	add	r2, sp, #64	; 0x40
 800c356:	a911      	add	r1, sp, #68	; 0x44
 800c358:	4620      	mov	r0, r4
 800c35a:	f001 fd01 	bl	800dd60 <__d2b>
 800c35e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c362:	ee08 0a10 	vmov	s16, r0
 800c366:	2d00      	cmp	r5, #0
 800c368:	f000 8084 	beq.w	800c474 <_dtoa_r+0x204>
 800c36c:	ee19 3a90 	vmov	r3, s19
 800c370:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c374:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c378:	4656      	mov	r6, sl
 800c37a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c37e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c382:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c386:	4b74      	ldr	r3, [pc, #464]	; (800c558 <_dtoa_r+0x2e8>)
 800c388:	2200      	movs	r2, #0
 800c38a:	4630      	mov	r0, r6
 800c38c:	4639      	mov	r1, r7
 800c38e:	f7f3 ff93 	bl	80002b8 <__aeabi_dsub>
 800c392:	a365      	add	r3, pc, #404	; (adr r3, 800c528 <_dtoa_r+0x2b8>)
 800c394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c398:	f7f4 f946 	bl	8000628 <__aeabi_dmul>
 800c39c:	a364      	add	r3, pc, #400	; (adr r3, 800c530 <_dtoa_r+0x2c0>)
 800c39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a2:	f7f3 ff8b 	bl	80002bc <__adddf3>
 800c3a6:	4606      	mov	r6, r0
 800c3a8:	4628      	mov	r0, r5
 800c3aa:	460f      	mov	r7, r1
 800c3ac:	f7f4 f8d2 	bl	8000554 <__aeabi_i2d>
 800c3b0:	a361      	add	r3, pc, #388	; (adr r3, 800c538 <_dtoa_r+0x2c8>)
 800c3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b6:	f7f4 f937 	bl	8000628 <__aeabi_dmul>
 800c3ba:	4602      	mov	r2, r0
 800c3bc:	460b      	mov	r3, r1
 800c3be:	4630      	mov	r0, r6
 800c3c0:	4639      	mov	r1, r7
 800c3c2:	f7f3 ff7b 	bl	80002bc <__adddf3>
 800c3c6:	4606      	mov	r6, r0
 800c3c8:	460f      	mov	r7, r1
 800c3ca:	f7f4 fbdd 	bl	8000b88 <__aeabi_d2iz>
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	9000      	str	r0, [sp, #0]
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	4630      	mov	r0, r6
 800c3d6:	4639      	mov	r1, r7
 800c3d8:	f7f4 fb98 	bl	8000b0c <__aeabi_dcmplt>
 800c3dc:	b150      	cbz	r0, 800c3f4 <_dtoa_r+0x184>
 800c3de:	9800      	ldr	r0, [sp, #0]
 800c3e0:	f7f4 f8b8 	bl	8000554 <__aeabi_i2d>
 800c3e4:	4632      	mov	r2, r6
 800c3e6:	463b      	mov	r3, r7
 800c3e8:	f7f4 fb86 	bl	8000af8 <__aeabi_dcmpeq>
 800c3ec:	b910      	cbnz	r0, 800c3f4 <_dtoa_r+0x184>
 800c3ee:	9b00      	ldr	r3, [sp, #0]
 800c3f0:	3b01      	subs	r3, #1
 800c3f2:	9300      	str	r3, [sp, #0]
 800c3f4:	9b00      	ldr	r3, [sp, #0]
 800c3f6:	2b16      	cmp	r3, #22
 800c3f8:	d85a      	bhi.n	800c4b0 <_dtoa_r+0x240>
 800c3fa:	9a00      	ldr	r2, [sp, #0]
 800c3fc:	4b57      	ldr	r3, [pc, #348]	; (800c55c <_dtoa_r+0x2ec>)
 800c3fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c406:	ec51 0b19 	vmov	r0, r1, d9
 800c40a:	f7f4 fb7f 	bl	8000b0c <__aeabi_dcmplt>
 800c40e:	2800      	cmp	r0, #0
 800c410:	d050      	beq.n	800c4b4 <_dtoa_r+0x244>
 800c412:	9b00      	ldr	r3, [sp, #0]
 800c414:	3b01      	subs	r3, #1
 800c416:	9300      	str	r3, [sp, #0]
 800c418:	2300      	movs	r3, #0
 800c41a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c41c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c41e:	1b5d      	subs	r5, r3, r5
 800c420:	1e6b      	subs	r3, r5, #1
 800c422:	9305      	str	r3, [sp, #20]
 800c424:	bf45      	ittet	mi
 800c426:	f1c5 0301 	rsbmi	r3, r5, #1
 800c42a:	9304      	strmi	r3, [sp, #16]
 800c42c:	2300      	movpl	r3, #0
 800c42e:	2300      	movmi	r3, #0
 800c430:	bf4c      	ite	mi
 800c432:	9305      	strmi	r3, [sp, #20]
 800c434:	9304      	strpl	r3, [sp, #16]
 800c436:	9b00      	ldr	r3, [sp, #0]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	db3d      	blt.n	800c4b8 <_dtoa_r+0x248>
 800c43c:	9b05      	ldr	r3, [sp, #20]
 800c43e:	9a00      	ldr	r2, [sp, #0]
 800c440:	920a      	str	r2, [sp, #40]	; 0x28
 800c442:	4413      	add	r3, r2
 800c444:	9305      	str	r3, [sp, #20]
 800c446:	2300      	movs	r3, #0
 800c448:	9307      	str	r3, [sp, #28]
 800c44a:	9b06      	ldr	r3, [sp, #24]
 800c44c:	2b09      	cmp	r3, #9
 800c44e:	f200 8089 	bhi.w	800c564 <_dtoa_r+0x2f4>
 800c452:	2b05      	cmp	r3, #5
 800c454:	bfc4      	itt	gt
 800c456:	3b04      	subgt	r3, #4
 800c458:	9306      	strgt	r3, [sp, #24]
 800c45a:	9b06      	ldr	r3, [sp, #24]
 800c45c:	f1a3 0302 	sub.w	r3, r3, #2
 800c460:	bfcc      	ite	gt
 800c462:	2500      	movgt	r5, #0
 800c464:	2501      	movle	r5, #1
 800c466:	2b03      	cmp	r3, #3
 800c468:	f200 8087 	bhi.w	800c57a <_dtoa_r+0x30a>
 800c46c:	e8df f003 	tbb	[pc, r3]
 800c470:	59383a2d 	.word	0x59383a2d
 800c474:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c478:	441d      	add	r5, r3
 800c47a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c47e:	2b20      	cmp	r3, #32
 800c480:	bfc1      	itttt	gt
 800c482:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c486:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c48a:	fa0b f303 	lslgt.w	r3, fp, r3
 800c48e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c492:	bfda      	itte	le
 800c494:	f1c3 0320 	rsble	r3, r3, #32
 800c498:	fa06 f003 	lslle.w	r0, r6, r3
 800c49c:	4318      	orrgt	r0, r3
 800c49e:	f7f4 f849 	bl	8000534 <__aeabi_ui2d>
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	4606      	mov	r6, r0
 800c4a6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c4aa:	3d01      	subs	r5, #1
 800c4ac:	930e      	str	r3, [sp, #56]	; 0x38
 800c4ae:	e76a      	b.n	800c386 <_dtoa_r+0x116>
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	e7b2      	b.n	800c41a <_dtoa_r+0x1aa>
 800c4b4:	900b      	str	r0, [sp, #44]	; 0x2c
 800c4b6:	e7b1      	b.n	800c41c <_dtoa_r+0x1ac>
 800c4b8:	9b04      	ldr	r3, [sp, #16]
 800c4ba:	9a00      	ldr	r2, [sp, #0]
 800c4bc:	1a9b      	subs	r3, r3, r2
 800c4be:	9304      	str	r3, [sp, #16]
 800c4c0:	4253      	negs	r3, r2
 800c4c2:	9307      	str	r3, [sp, #28]
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	930a      	str	r3, [sp, #40]	; 0x28
 800c4c8:	e7bf      	b.n	800c44a <_dtoa_r+0x1da>
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	9308      	str	r3, [sp, #32]
 800c4ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	dc55      	bgt.n	800c580 <_dtoa_r+0x310>
 800c4d4:	2301      	movs	r3, #1
 800c4d6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c4da:	461a      	mov	r2, r3
 800c4dc:	9209      	str	r2, [sp, #36]	; 0x24
 800c4de:	e00c      	b.n	800c4fa <_dtoa_r+0x28a>
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	e7f3      	b.n	800c4cc <_dtoa_r+0x25c>
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4e8:	9308      	str	r3, [sp, #32]
 800c4ea:	9b00      	ldr	r3, [sp, #0]
 800c4ec:	4413      	add	r3, r2
 800c4ee:	9302      	str	r3, [sp, #8]
 800c4f0:	3301      	adds	r3, #1
 800c4f2:	2b01      	cmp	r3, #1
 800c4f4:	9303      	str	r3, [sp, #12]
 800c4f6:	bfb8      	it	lt
 800c4f8:	2301      	movlt	r3, #1
 800c4fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	6042      	str	r2, [r0, #4]
 800c500:	2204      	movs	r2, #4
 800c502:	f102 0614 	add.w	r6, r2, #20
 800c506:	429e      	cmp	r6, r3
 800c508:	6841      	ldr	r1, [r0, #4]
 800c50a:	d93d      	bls.n	800c588 <_dtoa_r+0x318>
 800c50c:	4620      	mov	r0, r4
 800c50e:	f001 f839 	bl	800d584 <_Balloc>
 800c512:	9001      	str	r0, [sp, #4]
 800c514:	2800      	cmp	r0, #0
 800c516:	d13b      	bne.n	800c590 <_dtoa_r+0x320>
 800c518:	4b11      	ldr	r3, [pc, #68]	; (800c560 <_dtoa_r+0x2f0>)
 800c51a:	4602      	mov	r2, r0
 800c51c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c520:	e6c0      	b.n	800c2a4 <_dtoa_r+0x34>
 800c522:	2301      	movs	r3, #1
 800c524:	e7df      	b.n	800c4e6 <_dtoa_r+0x276>
 800c526:	bf00      	nop
 800c528:	636f4361 	.word	0x636f4361
 800c52c:	3fd287a7 	.word	0x3fd287a7
 800c530:	8b60c8b3 	.word	0x8b60c8b3
 800c534:	3fc68a28 	.word	0x3fc68a28
 800c538:	509f79fb 	.word	0x509f79fb
 800c53c:	3fd34413 	.word	0x3fd34413
 800c540:	0800f536 	.word	0x0800f536
 800c544:	0800f54d 	.word	0x0800f54d
 800c548:	7ff00000 	.word	0x7ff00000
 800c54c:	0800f532 	.word	0x0800f532
 800c550:	0800f529 	.word	0x0800f529
 800c554:	0800f3ad 	.word	0x0800f3ad
 800c558:	3ff80000 	.word	0x3ff80000
 800c55c:	0800f6b8 	.word	0x0800f6b8
 800c560:	0800f5a8 	.word	0x0800f5a8
 800c564:	2501      	movs	r5, #1
 800c566:	2300      	movs	r3, #0
 800c568:	9306      	str	r3, [sp, #24]
 800c56a:	9508      	str	r5, [sp, #32]
 800c56c:	f04f 33ff 	mov.w	r3, #4294967295
 800c570:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c574:	2200      	movs	r2, #0
 800c576:	2312      	movs	r3, #18
 800c578:	e7b0      	b.n	800c4dc <_dtoa_r+0x26c>
 800c57a:	2301      	movs	r3, #1
 800c57c:	9308      	str	r3, [sp, #32]
 800c57e:	e7f5      	b.n	800c56c <_dtoa_r+0x2fc>
 800c580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c582:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c586:	e7b8      	b.n	800c4fa <_dtoa_r+0x28a>
 800c588:	3101      	adds	r1, #1
 800c58a:	6041      	str	r1, [r0, #4]
 800c58c:	0052      	lsls	r2, r2, #1
 800c58e:	e7b8      	b.n	800c502 <_dtoa_r+0x292>
 800c590:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c592:	9a01      	ldr	r2, [sp, #4]
 800c594:	601a      	str	r2, [r3, #0]
 800c596:	9b03      	ldr	r3, [sp, #12]
 800c598:	2b0e      	cmp	r3, #14
 800c59a:	f200 809d 	bhi.w	800c6d8 <_dtoa_r+0x468>
 800c59e:	2d00      	cmp	r5, #0
 800c5a0:	f000 809a 	beq.w	800c6d8 <_dtoa_r+0x468>
 800c5a4:	9b00      	ldr	r3, [sp, #0]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	dd32      	ble.n	800c610 <_dtoa_r+0x3a0>
 800c5aa:	4ab7      	ldr	r2, [pc, #732]	; (800c888 <_dtoa_r+0x618>)
 800c5ac:	f003 030f 	and.w	r3, r3, #15
 800c5b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c5b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c5b8:	9b00      	ldr	r3, [sp, #0]
 800c5ba:	05d8      	lsls	r0, r3, #23
 800c5bc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c5c0:	d516      	bpl.n	800c5f0 <_dtoa_r+0x380>
 800c5c2:	4bb2      	ldr	r3, [pc, #712]	; (800c88c <_dtoa_r+0x61c>)
 800c5c4:	ec51 0b19 	vmov	r0, r1, d9
 800c5c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c5cc:	f7f4 f956 	bl	800087c <__aeabi_ddiv>
 800c5d0:	f007 070f 	and.w	r7, r7, #15
 800c5d4:	4682      	mov	sl, r0
 800c5d6:	468b      	mov	fp, r1
 800c5d8:	2503      	movs	r5, #3
 800c5da:	4eac      	ldr	r6, [pc, #688]	; (800c88c <_dtoa_r+0x61c>)
 800c5dc:	b957      	cbnz	r7, 800c5f4 <_dtoa_r+0x384>
 800c5de:	4642      	mov	r2, r8
 800c5e0:	464b      	mov	r3, r9
 800c5e2:	4650      	mov	r0, sl
 800c5e4:	4659      	mov	r1, fp
 800c5e6:	f7f4 f949 	bl	800087c <__aeabi_ddiv>
 800c5ea:	4682      	mov	sl, r0
 800c5ec:	468b      	mov	fp, r1
 800c5ee:	e028      	b.n	800c642 <_dtoa_r+0x3d2>
 800c5f0:	2502      	movs	r5, #2
 800c5f2:	e7f2      	b.n	800c5da <_dtoa_r+0x36a>
 800c5f4:	07f9      	lsls	r1, r7, #31
 800c5f6:	d508      	bpl.n	800c60a <_dtoa_r+0x39a>
 800c5f8:	4640      	mov	r0, r8
 800c5fa:	4649      	mov	r1, r9
 800c5fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c600:	f7f4 f812 	bl	8000628 <__aeabi_dmul>
 800c604:	3501      	adds	r5, #1
 800c606:	4680      	mov	r8, r0
 800c608:	4689      	mov	r9, r1
 800c60a:	107f      	asrs	r7, r7, #1
 800c60c:	3608      	adds	r6, #8
 800c60e:	e7e5      	b.n	800c5dc <_dtoa_r+0x36c>
 800c610:	f000 809b 	beq.w	800c74a <_dtoa_r+0x4da>
 800c614:	9b00      	ldr	r3, [sp, #0]
 800c616:	4f9d      	ldr	r7, [pc, #628]	; (800c88c <_dtoa_r+0x61c>)
 800c618:	425e      	negs	r6, r3
 800c61a:	4b9b      	ldr	r3, [pc, #620]	; (800c888 <_dtoa_r+0x618>)
 800c61c:	f006 020f 	and.w	r2, r6, #15
 800c620:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c628:	ec51 0b19 	vmov	r0, r1, d9
 800c62c:	f7f3 fffc 	bl	8000628 <__aeabi_dmul>
 800c630:	1136      	asrs	r6, r6, #4
 800c632:	4682      	mov	sl, r0
 800c634:	468b      	mov	fp, r1
 800c636:	2300      	movs	r3, #0
 800c638:	2502      	movs	r5, #2
 800c63a:	2e00      	cmp	r6, #0
 800c63c:	d17a      	bne.n	800c734 <_dtoa_r+0x4c4>
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d1d3      	bne.n	800c5ea <_dtoa_r+0x37a>
 800c642:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c644:	2b00      	cmp	r3, #0
 800c646:	f000 8082 	beq.w	800c74e <_dtoa_r+0x4de>
 800c64a:	4b91      	ldr	r3, [pc, #580]	; (800c890 <_dtoa_r+0x620>)
 800c64c:	2200      	movs	r2, #0
 800c64e:	4650      	mov	r0, sl
 800c650:	4659      	mov	r1, fp
 800c652:	f7f4 fa5b 	bl	8000b0c <__aeabi_dcmplt>
 800c656:	2800      	cmp	r0, #0
 800c658:	d079      	beq.n	800c74e <_dtoa_r+0x4de>
 800c65a:	9b03      	ldr	r3, [sp, #12]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d076      	beq.n	800c74e <_dtoa_r+0x4de>
 800c660:	9b02      	ldr	r3, [sp, #8]
 800c662:	2b00      	cmp	r3, #0
 800c664:	dd36      	ble.n	800c6d4 <_dtoa_r+0x464>
 800c666:	9b00      	ldr	r3, [sp, #0]
 800c668:	4650      	mov	r0, sl
 800c66a:	4659      	mov	r1, fp
 800c66c:	1e5f      	subs	r7, r3, #1
 800c66e:	2200      	movs	r2, #0
 800c670:	4b88      	ldr	r3, [pc, #544]	; (800c894 <_dtoa_r+0x624>)
 800c672:	f7f3 ffd9 	bl	8000628 <__aeabi_dmul>
 800c676:	9e02      	ldr	r6, [sp, #8]
 800c678:	4682      	mov	sl, r0
 800c67a:	468b      	mov	fp, r1
 800c67c:	3501      	adds	r5, #1
 800c67e:	4628      	mov	r0, r5
 800c680:	f7f3 ff68 	bl	8000554 <__aeabi_i2d>
 800c684:	4652      	mov	r2, sl
 800c686:	465b      	mov	r3, fp
 800c688:	f7f3 ffce 	bl	8000628 <__aeabi_dmul>
 800c68c:	4b82      	ldr	r3, [pc, #520]	; (800c898 <_dtoa_r+0x628>)
 800c68e:	2200      	movs	r2, #0
 800c690:	f7f3 fe14 	bl	80002bc <__adddf3>
 800c694:	46d0      	mov	r8, sl
 800c696:	46d9      	mov	r9, fp
 800c698:	4682      	mov	sl, r0
 800c69a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c69e:	2e00      	cmp	r6, #0
 800c6a0:	d158      	bne.n	800c754 <_dtoa_r+0x4e4>
 800c6a2:	4b7e      	ldr	r3, [pc, #504]	; (800c89c <_dtoa_r+0x62c>)
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	4640      	mov	r0, r8
 800c6a8:	4649      	mov	r1, r9
 800c6aa:	f7f3 fe05 	bl	80002b8 <__aeabi_dsub>
 800c6ae:	4652      	mov	r2, sl
 800c6b0:	465b      	mov	r3, fp
 800c6b2:	4680      	mov	r8, r0
 800c6b4:	4689      	mov	r9, r1
 800c6b6:	f7f4 fa47 	bl	8000b48 <__aeabi_dcmpgt>
 800c6ba:	2800      	cmp	r0, #0
 800c6bc:	f040 8295 	bne.w	800cbea <_dtoa_r+0x97a>
 800c6c0:	4652      	mov	r2, sl
 800c6c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c6c6:	4640      	mov	r0, r8
 800c6c8:	4649      	mov	r1, r9
 800c6ca:	f7f4 fa1f 	bl	8000b0c <__aeabi_dcmplt>
 800c6ce:	2800      	cmp	r0, #0
 800c6d0:	f040 8289 	bne.w	800cbe6 <_dtoa_r+0x976>
 800c6d4:	ec5b ab19 	vmov	sl, fp, d9
 800c6d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	f2c0 8148 	blt.w	800c970 <_dtoa_r+0x700>
 800c6e0:	9a00      	ldr	r2, [sp, #0]
 800c6e2:	2a0e      	cmp	r2, #14
 800c6e4:	f300 8144 	bgt.w	800c970 <_dtoa_r+0x700>
 800c6e8:	4b67      	ldr	r3, [pc, #412]	; (800c888 <_dtoa_r+0x618>)
 800c6ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c6ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c6f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	f280 80d5 	bge.w	800c8a4 <_dtoa_r+0x634>
 800c6fa:	9b03      	ldr	r3, [sp, #12]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	f300 80d1 	bgt.w	800c8a4 <_dtoa_r+0x634>
 800c702:	f040 826f 	bne.w	800cbe4 <_dtoa_r+0x974>
 800c706:	4b65      	ldr	r3, [pc, #404]	; (800c89c <_dtoa_r+0x62c>)
 800c708:	2200      	movs	r2, #0
 800c70a:	4640      	mov	r0, r8
 800c70c:	4649      	mov	r1, r9
 800c70e:	f7f3 ff8b 	bl	8000628 <__aeabi_dmul>
 800c712:	4652      	mov	r2, sl
 800c714:	465b      	mov	r3, fp
 800c716:	f7f4 fa0d 	bl	8000b34 <__aeabi_dcmpge>
 800c71a:	9e03      	ldr	r6, [sp, #12]
 800c71c:	4637      	mov	r7, r6
 800c71e:	2800      	cmp	r0, #0
 800c720:	f040 8245 	bne.w	800cbae <_dtoa_r+0x93e>
 800c724:	9d01      	ldr	r5, [sp, #4]
 800c726:	2331      	movs	r3, #49	; 0x31
 800c728:	f805 3b01 	strb.w	r3, [r5], #1
 800c72c:	9b00      	ldr	r3, [sp, #0]
 800c72e:	3301      	adds	r3, #1
 800c730:	9300      	str	r3, [sp, #0]
 800c732:	e240      	b.n	800cbb6 <_dtoa_r+0x946>
 800c734:	07f2      	lsls	r2, r6, #31
 800c736:	d505      	bpl.n	800c744 <_dtoa_r+0x4d4>
 800c738:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c73c:	f7f3 ff74 	bl	8000628 <__aeabi_dmul>
 800c740:	3501      	adds	r5, #1
 800c742:	2301      	movs	r3, #1
 800c744:	1076      	asrs	r6, r6, #1
 800c746:	3708      	adds	r7, #8
 800c748:	e777      	b.n	800c63a <_dtoa_r+0x3ca>
 800c74a:	2502      	movs	r5, #2
 800c74c:	e779      	b.n	800c642 <_dtoa_r+0x3d2>
 800c74e:	9f00      	ldr	r7, [sp, #0]
 800c750:	9e03      	ldr	r6, [sp, #12]
 800c752:	e794      	b.n	800c67e <_dtoa_r+0x40e>
 800c754:	9901      	ldr	r1, [sp, #4]
 800c756:	4b4c      	ldr	r3, [pc, #304]	; (800c888 <_dtoa_r+0x618>)
 800c758:	4431      	add	r1, r6
 800c75a:	910d      	str	r1, [sp, #52]	; 0x34
 800c75c:	9908      	ldr	r1, [sp, #32]
 800c75e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c762:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c766:	2900      	cmp	r1, #0
 800c768:	d043      	beq.n	800c7f2 <_dtoa_r+0x582>
 800c76a:	494d      	ldr	r1, [pc, #308]	; (800c8a0 <_dtoa_r+0x630>)
 800c76c:	2000      	movs	r0, #0
 800c76e:	f7f4 f885 	bl	800087c <__aeabi_ddiv>
 800c772:	4652      	mov	r2, sl
 800c774:	465b      	mov	r3, fp
 800c776:	f7f3 fd9f 	bl	80002b8 <__aeabi_dsub>
 800c77a:	9d01      	ldr	r5, [sp, #4]
 800c77c:	4682      	mov	sl, r0
 800c77e:	468b      	mov	fp, r1
 800c780:	4649      	mov	r1, r9
 800c782:	4640      	mov	r0, r8
 800c784:	f7f4 fa00 	bl	8000b88 <__aeabi_d2iz>
 800c788:	4606      	mov	r6, r0
 800c78a:	f7f3 fee3 	bl	8000554 <__aeabi_i2d>
 800c78e:	4602      	mov	r2, r0
 800c790:	460b      	mov	r3, r1
 800c792:	4640      	mov	r0, r8
 800c794:	4649      	mov	r1, r9
 800c796:	f7f3 fd8f 	bl	80002b8 <__aeabi_dsub>
 800c79a:	3630      	adds	r6, #48	; 0x30
 800c79c:	f805 6b01 	strb.w	r6, [r5], #1
 800c7a0:	4652      	mov	r2, sl
 800c7a2:	465b      	mov	r3, fp
 800c7a4:	4680      	mov	r8, r0
 800c7a6:	4689      	mov	r9, r1
 800c7a8:	f7f4 f9b0 	bl	8000b0c <__aeabi_dcmplt>
 800c7ac:	2800      	cmp	r0, #0
 800c7ae:	d163      	bne.n	800c878 <_dtoa_r+0x608>
 800c7b0:	4642      	mov	r2, r8
 800c7b2:	464b      	mov	r3, r9
 800c7b4:	4936      	ldr	r1, [pc, #216]	; (800c890 <_dtoa_r+0x620>)
 800c7b6:	2000      	movs	r0, #0
 800c7b8:	f7f3 fd7e 	bl	80002b8 <__aeabi_dsub>
 800c7bc:	4652      	mov	r2, sl
 800c7be:	465b      	mov	r3, fp
 800c7c0:	f7f4 f9a4 	bl	8000b0c <__aeabi_dcmplt>
 800c7c4:	2800      	cmp	r0, #0
 800c7c6:	f040 80b5 	bne.w	800c934 <_dtoa_r+0x6c4>
 800c7ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c7cc:	429d      	cmp	r5, r3
 800c7ce:	d081      	beq.n	800c6d4 <_dtoa_r+0x464>
 800c7d0:	4b30      	ldr	r3, [pc, #192]	; (800c894 <_dtoa_r+0x624>)
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	4650      	mov	r0, sl
 800c7d6:	4659      	mov	r1, fp
 800c7d8:	f7f3 ff26 	bl	8000628 <__aeabi_dmul>
 800c7dc:	4b2d      	ldr	r3, [pc, #180]	; (800c894 <_dtoa_r+0x624>)
 800c7de:	4682      	mov	sl, r0
 800c7e0:	468b      	mov	fp, r1
 800c7e2:	4640      	mov	r0, r8
 800c7e4:	4649      	mov	r1, r9
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	f7f3 ff1e 	bl	8000628 <__aeabi_dmul>
 800c7ec:	4680      	mov	r8, r0
 800c7ee:	4689      	mov	r9, r1
 800c7f0:	e7c6      	b.n	800c780 <_dtoa_r+0x510>
 800c7f2:	4650      	mov	r0, sl
 800c7f4:	4659      	mov	r1, fp
 800c7f6:	f7f3 ff17 	bl	8000628 <__aeabi_dmul>
 800c7fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c7fc:	9d01      	ldr	r5, [sp, #4]
 800c7fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800c800:	4682      	mov	sl, r0
 800c802:	468b      	mov	fp, r1
 800c804:	4649      	mov	r1, r9
 800c806:	4640      	mov	r0, r8
 800c808:	f7f4 f9be 	bl	8000b88 <__aeabi_d2iz>
 800c80c:	4606      	mov	r6, r0
 800c80e:	f7f3 fea1 	bl	8000554 <__aeabi_i2d>
 800c812:	3630      	adds	r6, #48	; 0x30
 800c814:	4602      	mov	r2, r0
 800c816:	460b      	mov	r3, r1
 800c818:	4640      	mov	r0, r8
 800c81a:	4649      	mov	r1, r9
 800c81c:	f7f3 fd4c 	bl	80002b8 <__aeabi_dsub>
 800c820:	f805 6b01 	strb.w	r6, [r5], #1
 800c824:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c826:	429d      	cmp	r5, r3
 800c828:	4680      	mov	r8, r0
 800c82a:	4689      	mov	r9, r1
 800c82c:	f04f 0200 	mov.w	r2, #0
 800c830:	d124      	bne.n	800c87c <_dtoa_r+0x60c>
 800c832:	4b1b      	ldr	r3, [pc, #108]	; (800c8a0 <_dtoa_r+0x630>)
 800c834:	4650      	mov	r0, sl
 800c836:	4659      	mov	r1, fp
 800c838:	f7f3 fd40 	bl	80002bc <__adddf3>
 800c83c:	4602      	mov	r2, r0
 800c83e:	460b      	mov	r3, r1
 800c840:	4640      	mov	r0, r8
 800c842:	4649      	mov	r1, r9
 800c844:	f7f4 f980 	bl	8000b48 <__aeabi_dcmpgt>
 800c848:	2800      	cmp	r0, #0
 800c84a:	d173      	bne.n	800c934 <_dtoa_r+0x6c4>
 800c84c:	4652      	mov	r2, sl
 800c84e:	465b      	mov	r3, fp
 800c850:	4913      	ldr	r1, [pc, #76]	; (800c8a0 <_dtoa_r+0x630>)
 800c852:	2000      	movs	r0, #0
 800c854:	f7f3 fd30 	bl	80002b8 <__aeabi_dsub>
 800c858:	4602      	mov	r2, r0
 800c85a:	460b      	mov	r3, r1
 800c85c:	4640      	mov	r0, r8
 800c85e:	4649      	mov	r1, r9
 800c860:	f7f4 f954 	bl	8000b0c <__aeabi_dcmplt>
 800c864:	2800      	cmp	r0, #0
 800c866:	f43f af35 	beq.w	800c6d4 <_dtoa_r+0x464>
 800c86a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c86c:	1e6b      	subs	r3, r5, #1
 800c86e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c870:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c874:	2b30      	cmp	r3, #48	; 0x30
 800c876:	d0f8      	beq.n	800c86a <_dtoa_r+0x5fa>
 800c878:	9700      	str	r7, [sp, #0]
 800c87a:	e049      	b.n	800c910 <_dtoa_r+0x6a0>
 800c87c:	4b05      	ldr	r3, [pc, #20]	; (800c894 <_dtoa_r+0x624>)
 800c87e:	f7f3 fed3 	bl	8000628 <__aeabi_dmul>
 800c882:	4680      	mov	r8, r0
 800c884:	4689      	mov	r9, r1
 800c886:	e7bd      	b.n	800c804 <_dtoa_r+0x594>
 800c888:	0800f6b8 	.word	0x0800f6b8
 800c88c:	0800f690 	.word	0x0800f690
 800c890:	3ff00000 	.word	0x3ff00000
 800c894:	40240000 	.word	0x40240000
 800c898:	401c0000 	.word	0x401c0000
 800c89c:	40140000 	.word	0x40140000
 800c8a0:	3fe00000 	.word	0x3fe00000
 800c8a4:	9d01      	ldr	r5, [sp, #4]
 800c8a6:	4656      	mov	r6, sl
 800c8a8:	465f      	mov	r7, fp
 800c8aa:	4642      	mov	r2, r8
 800c8ac:	464b      	mov	r3, r9
 800c8ae:	4630      	mov	r0, r6
 800c8b0:	4639      	mov	r1, r7
 800c8b2:	f7f3 ffe3 	bl	800087c <__aeabi_ddiv>
 800c8b6:	f7f4 f967 	bl	8000b88 <__aeabi_d2iz>
 800c8ba:	4682      	mov	sl, r0
 800c8bc:	f7f3 fe4a 	bl	8000554 <__aeabi_i2d>
 800c8c0:	4642      	mov	r2, r8
 800c8c2:	464b      	mov	r3, r9
 800c8c4:	f7f3 feb0 	bl	8000628 <__aeabi_dmul>
 800c8c8:	4602      	mov	r2, r0
 800c8ca:	460b      	mov	r3, r1
 800c8cc:	4630      	mov	r0, r6
 800c8ce:	4639      	mov	r1, r7
 800c8d0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c8d4:	f7f3 fcf0 	bl	80002b8 <__aeabi_dsub>
 800c8d8:	f805 6b01 	strb.w	r6, [r5], #1
 800c8dc:	9e01      	ldr	r6, [sp, #4]
 800c8de:	9f03      	ldr	r7, [sp, #12]
 800c8e0:	1bae      	subs	r6, r5, r6
 800c8e2:	42b7      	cmp	r7, r6
 800c8e4:	4602      	mov	r2, r0
 800c8e6:	460b      	mov	r3, r1
 800c8e8:	d135      	bne.n	800c956 <_dtoa_r+0x6e6>
 800c8ea:	f7f3 fce7 	bl	80002bc <__adddf3>
 800c8ee:	4642      	mov	r2, r8
 800c8f0:	464b      	mov	r3, r9
 800c8f2:	4606      	mov	r6, r0
 800c8f4:	460f      	mov	r7, r1
 800c8f6:	f7f4 f927 	bl	8000b48 <__aeabi_dcmpgt>
 800c8fa:	b9d0      	cbnz	r0, 800c932 <_dtoa_r+0x6c2>
 800c8fc:	4642      	mov	r2, r8
 800c8fe:	464b      	mov	r3, r9
 800c900:	4630      	mov	r0, r6
 800c902:	4639      	mov	r1, r7
 800c904:	f7f4 f8f8 	bl	8000af8 <__aeabi_dcmpeq>
 800c908:	b110      	cbz	r0, 800c910 <_dtoa_r+0x6a0>
 800c90a:	f01a 0f01 	tst.w	sl, #1
 800c90e:	d110      	bne.n	800c932 <_dtoa_r+0x6c2>
 800c910:	4620      	mov	r0, r4
 800c912:	ee18 1a10 	vmov	r1, s16
 800c916:	f000 fe75 	bl	800d604 <_Bfree>
 800c91a:	2300      	movs	r3, #0
 800c91c:	9800      	ldr	r0, [sp, #0]
 800c91e:	702b      	strb	r3, [r5, #0]
 800c920:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c922:	3001      	adds	r0, #1
 800c924:	6018      	str	r0, [r3, #0]
 800c926:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c928:	2b00      	cmp	r3, #0
 800c92a:	f43f acf1 	beq.w	800c310 <_dtoa_r+0xa0>
 800c92e:	601d      	str	r5, [r3, #0]
 800c930:	e4ee      	b.n	800c310 <_dtoa_r+0xa0>
 800c932:	9f00      	ldr	r7, [sp, #0]
 800c934:	462b      	mov	r3, r5
 800c936:	461d      	mov	r5, r3
 800c938:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c93c:	2a39      	cmp	r2, #57	; 0x39
 800c93e:	d106      	bne.n	800c94e <_dtoa_r+0x6de>
 800c940:	9a01      	ldr	r2, [sp, #4]
 800c942:	429a      	cmp	r2, r3
 800c944:	d1f7      	bne.n	800c936 <_dtoa_r+0x6c6>
 800c946:	9901      	ldr	r1, [sp, #4]
 800c948:	2230      	movs	r2, #48	; 0x30
 800c94a:	3701      	adds	r7, #1
 800c94c:	700a      	strb	r2, [r1, #0]
 800c94e:	781a      	ldrb	r2, [r3, #0]
 800c950:	3201      	adds	r2, #1
 800c952:	701a      	strb	r2, [r3, #0]
 800c954:	e790      	b.n	800c878 <_dtoa_r+0x608>
 800c956:	4ba6      	ldr	r3, [pc, #664]	; (800cbf0 <_dtoa_r+0x980>)
 800c958:	2200      	movs	r2, #0
 800c95a:	f7f3 fe65 	bl	8000628 <__aeabi_dmul>
 800c95e:	2200      	movs	r2, #0
 800c960:	2300      	movs	r3, #0
 800c962:	4606      	mov	r6, r0
 800c964:	460f      	mov	r7, r1
 800c966:	f7f4 f8c7 	bl	8000af8 <__aeabi_dcmpeq>
 800c96a:	2800      	cmp	r0, #0
 800c96c:	d09d      	beq.n	800c8aa <_dtoa_r+0x63a>
 800c96e:	e7cf      	b.n	800c910 <_dtoa_r+0x6a0>
 800c970:	9a08      	ldr	r2, [sp, #32]
 800c972:	2a00      	cmp	r2, #0
 800c974:	f000 80d7 	beq.w	800cb26 <_dtoa_r+0x8b6>
 800c978:	9a06      	ldr	r2, [sp, #24]
 800c97a:	2a01      	cmp	r2, #1
 800c97c:	f300 80ba 	bgt.w	800caf4 <_dtoa_r+0x884>
 800c980:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c982:	2a00      	cmp	r2, #0
 800c984:	f000 80b2 	beq.w	800caec <_dtoa_r+0x87c>
 800c988:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c98c:	9e07      	ldr	r6, [sp, #28]
 800c98e:	9d04      	ldr	r5, [sp, #16]
 800c990:	9a04      	ldr	r2, [sp, #16]
 800c992:	441a      	add	r2, r3
 800c994:	9204      	str	r2, [sp, #16]
 800c996:	9a05      	ldr	r2, [sp, #20]
 800c998:	2101      	movs	r1, #1
 800c99a:	441a      	add	r2, r3
 800c99c:	4620      	mov	r0, r4
 800c99e:	9205      	str	r2, [sp, #20]
 800c9a0:	f000 ff32 	bl	800d808 <__i2b>
 800c9a4:	4607      	mov	r7, r0
 800c9a6:	2d00      	cmp	r5, #0
 800c9a8:	dd0c      	ble.n	800c9c4 <_dtoa_r+0x754>
 800c9aa:	9b05      	ldr	r3, [sp, #20]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	dd09      	ble.n	800c9c4 <_dtoa_r+0x754>
 800c9b0:	42ab      	cmp	r3, r5
 800c9b2:	9a04      	ldr	r2, [sp, #16]
 800c9b4:	bfa8      	it	ge
 800c9b6:	462b      	movge	r3, r5
 800c9b8:	1ad2      	subs	r2, r2, r3
 800c9ba:	9204      	str	r2, [sp, #16]
 800c9bc:	9a05      	ldr	r2, [sp, #20]
 800c9be:	1aed      	subs	r5, r5, r3
 800c9c0:	1ad3      	subs	r3, r2, r3
 800c9c2:	9305      	str	r3, [sp, #20]
 800c9c4:	9b07      	ldr	r3, [sp, #28]
 800c9c6:	b31b      	cbz	r3, 800ca10 <_dtoa_r+0x7a0>
 800c9c8:	9b08      	ldr	r3, [sp, #32]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	f000 80af 	beq.w	800cb2e <_dtoa_r+0x8be>
 800c9d0:	2e00      	cmp	r6, #0
 800c9d2:	dd13      	ble.n	800c9fc <_dtoa_r+0x78c>
 800c9d4:	4639      	mov	r1, r7
 800c9d6:	4632      	mov	r2, r6
 800c9d8:	4620      	mov	r0, r4
 800c9da:	f000 ffd5 	bl	800d988 <__pow5mult>
 800c9de:	ee18 2a10 	vmov	r2, s16
 800c9e2:	4601      	mov	r1, r0
 800c9e4:	4607      	mov	r7, r0
 800c9e6:	4620      	mov	r0, r4
 800c9e8:	f000 ff24 	bl	800d834 <__multiply>
 800c9ec:	ee18 1a10 	vmov	r1, s16
 800c9f0:	4680      	mov	r8, r0
 800c9f2:	4620      	mov	r0, r4
 800c9f4:	f000 fe06 	bl	800d604 <_Bfree>
 800c9f8:	ee08 8a10 	vmov	s16, r8
 800c9fc:	9b07      	ldr	r3, [sp, #28]
 800c9fe:	1b9a      	subs	r2, r3, r6
 800ca00:	d006      	beq.n	800ca10 <_dtoa_r+0x7a0>
 800ca02:	ee18 1a10 	vmov	r1, s16
 800ca06:	4620      	mov	r0, r4
 800ca08:	f000 ffbe 	bl	800d988 <__pow5mult>
 800ca0c:	ee08 0a10 	vmov	s16, r0
 800ca10:	2101      	movs	r1, #1
 800ca12:	4620      	mov	r0, r4
 800ca14:	f000 fef8 	bl	800d808 <__i2b>
 800ca18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	4606      	mov	r6, r0
 800ca1e:	f340 8088 	ble.w	800cb32 <_dtoa_r+0x8c2>
 800ca22:	461a      	mov	r2, r3
 800ca24:	4601      	mov	r1, r0
 800ca26:	4620      	mov	r0, r4
 800ca28:	f000 ffae 	bl	800d988 <__pow5mult>
 800ca2c:	9b06      	ldr	r3, [sp, #24]
 800ca2e:	2b01      	cmp	r3, #1
 800ca30:	4606      	mov	r6, r0
 800ca32:	f340 8081 	ble.w	800cb38 <_dtoa_r+0x8c8>
 800ca36:	f04f 0800 	mov.w	r8, #0
 800ca3a:	6933      	ldr	r3, [r6, #16]
 800ca3c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ca40:	6918      	ldr	r0, [r3, #16]
 800ca42:	f000 fe91 	bl	800d768 <__hi0bits>
 800ca46:	f1c0 0020 	rsb	r0, r0, #32
 800ca4a:	9b05      	ldr	r3, [sp, #20]
 800ca4c:	4418      	add	r0, r3
 800ca4e:	f010 001f 	ands.w	r0, r0, #31
 800ca52:	f000 8092 	beq.w	800cb7a <_dtoa_r+0x90a>
 800ca56:	f1c0 0320 	rsb	r3, r0, #32
 800ca5a:	2b04      	cmp	r3, #4
 800ca5c:	f340 808a 	ble.w	800cb74 <_dtoa_r+0x904>
 800ca60:	f1c0 001c 	rsb	r0, r0, #28
 800ca64:	9b04      	ldr	r3, [sp, #16]
 800ca66:	4403      	add	r3, r0
 800ca68:	9304      	str	r3, [sp, #16]
 800ca6a:	9b05      	ldr	r3, [sp, #20]
 800ca6c:	4403      	add	r3, r0
 800ca6e:	4405      	add	r5, r0
 800ca70:	9305      	str	r3, [sp, #20]
 800ca72:	9b04      	ldr	r3, [sp, #16]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	dd07      	ble.n	800ca88 <_dtoa_r+0x818>
 800ca78:	ee18 1a10 	vmov	r1, s16
 800ca7c:	461a      	mov	r2, r3
 800ca7e:	4620      	mov	r0, r4
 800ca80:	f000 ffdc 	bl	800da3c <__lshift>
 800ca84:	ee08 0a10 	vmov	s16, r0
 800ca88:	9b05      	ldr	r3, [sp, #20]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	dd05      	ble.n	800ca9a <_dtoa_r+0x82a>
 800ca8e:	4631      	mov	r1, r6
 800ca90:	461a      	mov	r2, r3
 800ca92:	4620      	mov	r0, r4
 800ca94:	f000 ffd2 	bl	800da3c <__lshift>
 800ca98:	4606      	mov	r6, r0
 800ca9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d06e      	beq.n	800cb7e <_dtoa_r+0x90e>
 800caa0:	ee18 0a10 	vmov	r0, s16
 800caa4:	4631      	mov	r1, r6
 800caa6:	f001 f839 	bl	800db1c <__mcmp>
 800caaa:	2800      	cmp	r0, #0
 800caac:	da67      	bge.n	800cb7e <_dtoa_r+0x90e>
 800caae:	9b00      	ldr	r3, [sp, #0]
 800cab0:	3b01      	subs	r3, #1
 800cab2:	ee18 1a10 	vmov	r1, s16
 800cab6:	9300      	str	r3, [sp, #0]
 800cab8:	220a      	movs	r2, #10
 800caba:	2300      	movs	r3, #0
 800cabc:	4620      	mov	r0, r4
 800cabe:	f000 fdc3 	bl	800d648 <__multadd>
 800cac2:	9b08      	ldr	r3, [sp, #32]
 800cac4:	ee08 0a10 	vmov	s16, r0
 800cac8:	2b00      	cmp	r3, #0
 800caca:	f000 81b1 	beq.w	800ce30 <_dtoa_r+0xbc0>
 800cace:	2300      	movs	r3, #0
 800cad0:	4639      	mov	r1, r7
 800cad2:	220a      	movs	r2, #10
 800cad4:	4620      	mov	r0, r4
 800cad6:	f000 fdb7 	bl	800d648 <__multadd>
 800cada:	9b02      	ldr	r3, [sp, #8]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	4607      	mov	r7, r0
 800cae0:	f300 808e 	bgt.w	800cc00 <_dtoa_r+0x990>
 800cae4:	9b06      	ldr	r3, [sp, #24]
 800cae6:	2b02      	cmp	r3, #2
 800cae8:	dc51      	bgt.n	800cb8e <_dtoa_r+0x91e>
 800caea:	e089      	b.n	800cc00 <_dtoa_r+0x990>
 800caec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800caee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800caf2:	e74b      	b.n	800c98c <_dtoa_r+0x71c>
 800caf4:	9b03      	ldr	r3, [sp, #12]
 800caf6:	1e5e      	subs	r6, r3, #1
 800caf8:	9b07      	ldr	r3, [sp, #28]
 800cafa:	42b3      	cmp	r3, r6
 800cafc:	bfbf      	itttt	lt
 800cafe:	9b07      	ldrlt	r3, [sp, #28]
 800cb00:	9607      	strlt	r6, [sp, #28]
 800cb02:	1af2      	sublt	r2, r6, r3
 800cb04:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800cb06:	bfb6      	itet	lt
 800cb08:	189b      	addlt	r3, r3, r2
 800cb0a:	1b9e      	subge	r6, r3, r6
 800cb0c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800cb0e:	9b03      	ldr	r3, [sp, #12]
 800cb10:	bfb8      	it	lt
 800cb12:	2600      	movlt	r6, #0
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	bfb7      	itett	lt
 800cb18:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800cb1c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800cb20:	1a9d      	sublt	r5, r3, r2
 800cb22:	2300      	movlt	r3, #0
 800cb24:	e734      	b.n	800c990 <_dtoa_r+0x720>
 800cb26:	9e07      	ldr	r6, [sp, #28]
 800cb28:	9d04      	ldr	r5, [sp, #16]
 800cb2a:	9f08      	ldr	r7, [sp, #32]
 800cb2c:	e73b      	b.n	800c9a6 <_dtoa_r+0x736>
 800cb2e:	9a07      	ldr	r2, [sp, #28]
 800cb30:	e767      	b.n	800ca02 <_dtoa_r+0x792>
 800cb32:	9b06      	ldr	r3, [sp, #24]
 800cb34:	2b01      	cmp	r3, #1
 800cb36:	dc18      	bgt.n	800cb6a <_dtoa_r+0x8fa>
 800cb38:	f1ba 0f00 	cmp.w	sl, #0
 800cb3c:	d115      	bne.n	800cb6a <_dtoa_r+0x8fa>
 800cb3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cb42:	b993      	cbnz	r3, 800cb6a <_dtoa_r+0x8fa>
 800cb44:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cb48:	0d1b      	lsrs	r3, r3, #20
 800cb4a:	051b      	lsls	r3, r3, #20
 800cb4c:	b183      	cbz	r3, 800cb70 <_dtoa_r+0x900>
 800cb4e:	9b04      	ldr	r3, [sp, #16]
 800cb50:	3301      	adds	r3, #1
 800cb52:	9304      	str	r3, [sp, #16]
 800cb54:	9b05      	ldr	r3, [sp, #20]
 800cb56:	3301      	adds	r3, #1
 800cb58:	9305      	str	r3, [sp, #20]
 800cb5a:	f04f 0801 	mov.w	r8, #1
 800cb5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	f47f af6a 	bne.w	800ca3a <_dtoa_r+0x7ca>
 800cb66:	2001      	movs	r0, #1
 800cb68:	e76f      	b.n	800ca4a <_dtoa_r+0x7da>
 800cb6a:	f04f 0800 	mov.w	r8, #0
 800cb6e:	e7f6      	b.n	800cb5e <_dtoa_r+0x8ee>
 800cb70:	4698      	mov	r8, r3
 800cb72:	e7f4      	b.n	800cb5e <_dtoa_r+0x8ee>
 800cb74:	f43f af7d 	beq.w	800ca72 <_dtoa_r+0x802>
 800cb78:	4618      	mov	r0, r3
 800cb7a:	301c      	adds	r0, #28
 800cb7c:	e772      	b.n	800ca64 <_dtoa_r+0x7f4>
 800cb7e:	9b03      	ldr	r3, [sp, #12]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	dc37      	bgt.n	800cbf4 <_dtoa_r+0x984>
 800cb84:	9b06      	ldr	r3, [sp, #24]
 800cb86:	2b02      	cmp	r3, #2
 800cb88:	dd34      	ble.n	800cbf4 <_dtoa_r+0x984>
 800cb8a:	9b03      	ldr	r3, [sp, #12]
 800cb8c:	9302      	str	r3, [sp, #8]
 800cb8e:	9b02      	ldr	r3, [sp, #8]
 800cb90:	b96b      	cbnz	r3, 800cbae <_dtoa_r+0x93e>
 800cb92:	4631      	mov	r1, r6
 800cb94:	2205      	movs	r2, #5
 800cb96:	4620      	mov	r0, r4
 800cb98:	f000 fd56 	bl	800d648 <__multadd>
 800cb9c:	4601      	mov	r1, r0
 800cb9e:	4606      	mov	r6, r0
 800cba0:	ee18 0a10 	vmov	r0, s16
 800cba4:	f000 ffba 	bl	800db1c <__mcmp>
 800cba8:	2800      	cmp	r0, #0
 800cbaa:	f73f adbb 	bgt.w	800c724 <_dtoa_r+0x4b4>
 800cbae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbb0:	9d01      	ldr	r5, [sp, #4]
 800cbb2:	43db      	mvns	r3, r3
 800cbb4:	9300      	str	r3, [sp, #0]
 800cbb6:	f04f 0800 	mov.w	r8, #0
 800cbba:	4631      	mov	r1, r6
 800cbbc:	4620      	mov	r0, r4
 800cbbe:	f000 fd21 	bl	800d604 <_Bfree>
 800cbc2:	2f00      	cmp	r7, #0
 800cbc4:	f43f aea4 	beq.w	800c910 <_dtoa_r+0x6a0>
 800cbc8:	f1b8 0f00 	cmp.w	r8, #0
 800cbcc:	d005      	beq.n	800cbda <_dtoa_r+0x96a>
 800cbce:	45b8      	cmp	r8, r7
 800cbd0:	d003      	beq.n	800cbda <_dtoa_r+0x96a>
 800cbd2:	4641      	mov	r1, r8
 800cbd4:	4620      	mov	r0, r4
 800cbd6:	f000 fd15 	bl	800d604 <_Bfree>
 800cbda:	4639      	mov	r1, r7
 800cbdc:	4620      	mov	r0, r4
 800cbde:	f000 fd11 	bl	800d604 <_Bfree>
 800cbe2:	e695      	b.n	800c910 <_dtoa_r+0x6a0>
 800cbe4:	2600      	movs	r6, #0
 800cbe6:	4637      	mov	r7, r6
 800cbe8:	e7e1      	b.n	800cbae <_dtoa_r+0x93e>
 800cbea:	9700      	str	r7, [sp, #0]
 800cbec:	4637      	mov	r7, r6
 800cbee:	e599      	b.n	800c724 <_dtoa_r+0x4b4>
 800cbf0:	40240000 	.word	0x40240000
 800cbf4:	9b08      	ldr	r3, [sp, #32]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	f000 80ca 	beq.w	800cd90 <_dtoa_r+0xb20>
 800cbfc:	9b03      	ldr	r3, [sp, #12]
 800cbfe:	9302      	str	r3, [sp, #8]
 800cc00:	2d00      	cmp	r5, #0
 800cc02:	dd05      	ble.n	800cc10 <_dtoa_r+0x9a0>
 800cc04:	4639      	mov	r1, r7
 800cc06:	462a      	mov	r2, r5
 800cc08:	4620      	mov	r0, r4
 800cc0a:	f000 ff17 	bl	800da3c <__lshift>
 800cc0e:	4607      	mov	r7, r0
 800cc10:	f1b8 0f00 	cmp.w	r8, #0
 800cc14:	d05b      	beq.n	800ccce <_dtoa_r+0xa5e>
 800cc16:	6879      	ldr	r1, [r7, #4]
 800cc18:	4620      	mov	r0, r4
 800cc1a:	f000 fcb3 	bl	800d584 <_Balloc>
 800cc1e:	4605      	mov	r5, r0
 800cc20:	b928      	cbnz	r0, 800cc2e <_dtoa_r+0x9be>
 800cc22:	4b87      	ldr	r3, [pc, #540]	; (800ce40 <_dtoa_r+0xbd0>)
 800cc24:	4602      	mov	r2, r0
 800cc26:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cc2a:	f7ff bb3b 	b.w	800c2a4 <_dtoa_r+0x34>
 800cc2e:	693a      	ldr	r2, [r7, #16]
 800cc30:	3202      	adds	r2, #2
 800cc32:	0092      	lsls	r2, r2, #2
 800cc34:	f107 010c 	add.w	r1, r7, #12
 800cc38:	300c      	adds	r0, #12
 800cc3a:	f000 fc95 	bl	800d568 <memcpy>
 800cc3e:	2201      	movs	r2, #1
 800cc40:	4629      	mov	r1, r5
 800cc42:	4620      	mov	r0, r4
 800cc44:	f000 fefa 	bl	800da3c <__lshift>
 800cc48:	9b01      	ldr	r3, [sp, #4]
 800cc4a:	f103 0901 	add.w	r9, r3, #1
 800cc4e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800cc52:	4413      	add	r3, r2
 800cc54:	9305      	str	r3, [sp, #20]
 800cc56:	f00a 0301 	and.w	r3, sl, #1
 800cc5a:	46b8      	mov	r8, r7
 800cc5c:	9304      	str	r3, [sp, #16]
 800cc5e:	4607      	mov	r7, r0
 800cc60:	4631      	mov	r1, r6
 800cc62:	ee18 0a10 	vmov	r0, s16
 800cc66:	f7ff fa77 	bl	800c158 <quorem>
 800cc6a:	4641      	mov	r1, r8
 800cc6c:	9002      	str	r0, [sp, #8]
 800cc6e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cc72:	ee18 0a10 	vmov	r0, s16
 800cc76:	f000 ff51 	bl	800db1c <__mcmp>
 800cc7a:	463a      	mov	r2, r7
 800cc7c:	9003      	str	r0, [sp, #12]
 800cc7e:	4631      	mov	r1, r6
 800cc80:	4620      	mov	r0, r4
 800cc82:	f000 ff67 	bl	800db54 <__mdiff>
 800cc86:	68c2      	ldr	r2, [r0, #12]
 800cc88:	f109 3bff 	add.w	fp, r9, #4294967295
 800cc8c:	4605      	mov	r5, r0
 800cc8e:	bb02      	cbnz	r2, 800ccd2 <_dtoa_r+0xa62>
 800cc90:	4601      	mov	r1, r0
 800cc92:	ee18 0a10 	vmov	r0, s16
 800cc96:	f000 ff41 	bl	800db1c <__mcmp>
 800cc9a:	4602      	mov	r2, r0
 800cc9c:	4629      	mov	r1, r5
 800cc9e:	4620      	mov	r0, r4
 800cca0:	9207      	str	r2, [sp, #28]
 800cca2:	f000 fcaf 	bl	800d604 <_Bfree>
 800cca6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ccaa:	ea43 0102 	orr.w	r1, r3, r2
 800ccae:	9b04      	ldr	r3, [sp, #16]
 800ccb0:	430b      	orrs	r3, r1
 800ccb2:	464d      	mov	r5, r9
 800ccb4:	d10f      	bne.n	800ccd6 <_dtoa_r+0xa66>
 800ccb6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ccba:	d02a      	beq.n	800cd12 <_dtoa_r+0xaa2>
 800ccbc:	9b03      	ldr	r3, [sp, #12]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	dd02      	ble.n	800ccc8 <_dtoa_r+0xa58>
 800ccc2:	9b02      	ldr	r3, [sp, #8]
 800ccc4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ccc8:	f88b a000 	strb.w	sl, [fp]
 800cccc:	e775      	b.n	800cbba <_dtoa_r+0x94a>
 800ccce:	4638      	mov	r0, r7
 800ccd0:	e7ba      	b.n	800cc48 <_dtoa_r+0x9d8>
 800ccd2:	2201      	movs	r2, #1
 800ccd4:	e7e2      	b.n	800cc9c <_dtoa_r+0xa2c>
 800ccd6:	9b03      	ldr	r3, [sp, #12]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	db04      	blt.n	800cce6 <_dtoa_r+0xa76>
 800ccdc:	9906      	ldr	r1, [sp, #24]
 800ccde:	430b      	orrs	r3, r1
 800cce0:	9904      	ldr	r1, [sp, #16]
 800cce2:	430b      	orrs	r3, r1
 800cce4:	d122      	bne.n	800cd2c <_dtoa_r+0xabc>
 800cce6:	2a00      	cmp	r2, #0
 800cce8:	ddee      	ble.n	800ccc8 <_dtoa_r+0xa58>
 800ccea:	ee18 1a10 	vmov	r1, s16
 800ccee:	2201      	movs	r2, #1
 800ccf0:	4620      	mov	r0, r4
 800ccf2:	f000 fea3 	bl	800da3c <__lshift>
 800ccf6:	4631      	mov	r1, r6
 800ccf8:	ee08 0a10 	vmov	s16, r0
 800ccfc:	f000 ff0e 	bl	800db1c <__mcmp>
 800cd00:	2800      	cmp	r0, #0
 800cd02:	dc03      	bgt.n	800cd0c <_dtoa_r+0xa9c>
 800cd04:	d1e0      	bne.n	800ccc8 <_dtoa_r+0xa58>
 800cd06:	f01a 0f01 	tst.w	sl, #1
 800cd0a:	d0dd      	beq.n	800ccc8 <_dtoa_r+0xa58>
 800cd0c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cd10:	d1d7      	bne.n	800ccc2 <_dtoa_r+0xa52>
 800cd12:	2339      	movs	r3, #57	; 0x39
 800cd14:	f88b 3000 	strb.w	r3, [fp]
 800cd18:	462b      	mov	r3, r5
 800cd1a:	461d      	mov	r5, r3
 800cd1c:	3b01      	subs	r3, #1
 800cd1e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cd22:	2a39      	cmp	r2, #57	; 0x39
 800cd24:	d071      	beq.n	800ce0a <_dtoa_r+0xb9a>
 800cd26:	3201      	adds	r2, #1
 800cd28:	701a      	strb	r2, [r3, #0]
 800cd2a:	e746      	b.n	800cbba <_dtoa_r+0x94a>
 800cd2c:	2a00      	cmp	r2, #0
 800cd2e:	dd07      	ble.n	800cd40 <_dtoa_r+0xad0>
 800cd30:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cd34:	d0ed      	beq.n	800cd12 <_dtoa_r+0xaa2>
 800cd36:	f10a 0301 	add.w	r3, sl, #1
 800cd3a:	f88b 3000 	strb.w	r3, [fp]
 800cd3e:	e73c      	b.n	800cbba <_dtoa_r+0x94a>
 800cd40:	9b05      	ldr	r3, [sp, #20]
 800cd42:	f809 ac01 	strb.w	sl, [r9, #-1]
 800cd46:	4599      	cmp	r9, r3
 800cd48:	d047      	beq.n	800cdda <_dtoa_r+0xb6a>
 800cd4a:	ee18 1a10 	vmov	r1, s16
 800cd4e:	2300      	movs	r3, #0
 800cd50:	220a      	movs	r2, #10
 800cd52:	4620      	mov	r0, r4
 800cd54:	f000 fc78 	bl	800d648 <__multadd>
 800cd58:	45b8      	cmp	r8, r7
 800cd5a:	ee08 0a10 	vmov	s16, r0
 800cd5e:	f04f 0300 	mov.w	r3, #0
 800cd62:	f04f 020a 	mov.w	r2, #10
 800cd66:	4641      	mov	r1, r8
 800cd68:	4620      	mov	r0, r4
 800cd6a:	d106      	bne.n	800cd7a <_dtoa_r+0xb0a>
 800cd6c:	f000 fc6c 	bl	800d648 <__multadd>
 800cd70:	4680      	mov	r8, r0
 800cd72:	4607      	mov	r7, r0
 800cd74:	f109 0901 	add.w	r9, r9, #1
 800cd78:	e772      	b.n	800cc60 <_dtoa_r+0x9f0>
 800cd7a:	f000 fc65 	bl	800d648 <__multadd>
 800cd7e:	4639      	mov	r1, r7
 800cd80:	4680      	mov	r8, r0
 800cd82:	2300      	movs	r3, #0
 800cd84:	220a      	movs	r2, #10
 800cd86:	4620      	mov	r0, r4
 800cd88:	f000 fc5e 	bl	800d648 <__multadd>
 800cd8c:	4607      	mov	r7, r0
 800cd8e:	e7f1      	b.n	800cd74 <_dtoa_r+0xb04>
 800cd90:	9b03      	ldr	r3, [sp, #12]
 800cd92:	9302      	str	r3, [sp, #8]
 800cd94:	9d01      	ldr	r5, [sp, #4]
 800cd96:	ee18 0a10 	vmov	r0, s16
 800cd9a:	4631      	mov	r1, r6
 800cd9c:	f7ff f9dc 	bl	800c158 <quorem>
 800cda0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cda4:	9b01      	ldr	r3, [sp, #4]
 800cda6:	f805 ab01 	strb.w	sl, [r5], #1
 800cdaa:	1aea      	subs	r2, r5, r3
 800cdac:	9b02      	ldr	r3, [sp, #8]
 800cdae:	4293      	cmp	r3, r2
 800cdb0:	dd09      	ble.n	800cdc6 <_dtoa_r+0xb56>
 800cdb2:	ee18 1a10 	vmov	r1, s16
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	220a      	movs	r2, #10
 800cdba:	4620      	mov	r0, r4
 800cdbc:	f000 fc44 	bl	800d648 <__multadd>
 800cdc0:	ee08 0a10 	vmov	s16, r0
 800cdc4:	e7e7      	b.n	800cd96 <_dtoa_r+0xb26>
 800cdc6:	9b02      	ldr	r3, [sp, #8]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	bfc8      	it	gt
 800cdcc:	461d      	movgt	r5, r3
 800cdce:	9b01      	ldr	r3, [sp, #4]
 800cdd0:	bfd8      	it	le
 800cdd2:	2501      	movle	r5, #1
 800cdd4:	441d      	add	r5, r3
 800cdd6:	f04f 0800 	mov.w	r8, #0
 800cdda:	ee18 1a10 	vmov	r1, s16
 800cdde:	2201      	movs	r2, #1
 800cde0:	4620      	mov	r0, r4
 800cde2:	f000 fe2b 	bl	800da3c <__lshift>
 800cde6:	4631      	mov	r1, r6
 800cde8:	ee08 0a10 	vmov	s16, r0
 800cdec:	f000 fe96 	bl	800db1c <__mcmp>
 800cdf0:	2800      	cmp	r0, #0
 800cdf2:	dc91      	bgt.n	800cd18 <_dtoa_r+0xaa8>
 800cdf4:	d102      	bne.n	800cdfc <_dtoa_r+0xb8c>
 800cdf6:	f01a 0f01 	tst.w	sl, #1
 800cdfa:	d18d      	bne.n	800cd18 <_dtoa_r+0xaa8>
 800cdfc:	462b      	mov	r3, r5
 800cdfe:	461d      	mov	r5, r3
 800ce00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ce04:	2a30      	cmp	r2, #48	; 0x30
 800ce06:	d0fa      	beq.n	800cdfe <_dtoa_r+0xb8e>
 800ce08:	e6d7      	b.n	800cbba <_dtoa_r+0x94a>
 800ce0a:	9a01      	ldr	r2, [sp, #4]
 800ce0c:	429a      	cmp	r2, r3
 800ce0e:	d184      	bne.n	800cd1a <_dtoa_r+0xaaa>
 800ce10:	9b00      	ldr	r3, [sp, #0]
 800ce12:	3301      	adds	r3, #1
 800ce14:	9300      	str	r3, [sp, #0]
 800ce16:	2331      	movs	r3, #49	; 0x31
 800ce18:	7013      	strb	r3, [r2, #0]
 800ce1a:	e6ce      	b.n	800cbba <_dtoa_r+0x94a>
 800ce1c:	4b09      	ldr	r3, [pc, #36]	; (800ce44 <_dtoa_r+0xbd4>)
 800ce1e:	f7ff ba95 	b.w	800c34c <_dtoa_r+0xdc>
 800ce22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	f47f aa6e 	bne.w	800c306 <_dtoa_r+0x96>
 800ce2a:	4b07      	ldr	r3, [pc, #28]	; (800ce48 <_dtoa_r+0xbd8>)
 800ce2c:	f7ff ba8e 	b.w	800c34c <_dtoa_r+0xdc>
 800ce30:	9b02      	ldr	r3, [sp, #8]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	dcae      	bgt.n	800cd94 <_dtoa_r+0xb24>
 800ce36:	9b06      	ldr	r3, [sp, #24]
 800ce38:	2b02      	cmp	r3, #2
 800ce3a:	f73f aea8 	bgt.w	800cb8e <_dtoa_r+0x91e>
 800ce3e:	e7a9      	b.n	800cd94 <_dtoa_r+0xb24>
 800ce40:	0800f5a8 	.word	0x0800f5a8
 800ce44:	0800f3ac 	.word	0x0800f3ac
 800ce48:	0800f529 	.word	0x0800f529

0800ce4c <rshift>:
 800ce4c:	6903      	ldr	r3, [r0, #16]
 800ce4e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ce52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ce56:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ce5a:	f100 0414 	add.w	r4, r0, #20
 800ce5e:	dd45      	ble.n	800ceec <rshift+0xa0>
 800ce60:	f011 011f 	ands.w	r1, r1, #31
 800ce64:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ce68:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ce6c:	d10c      	bne.n	800ce88 <rshift+0x3c>
 800ce6e:	f100 0710 	add.w	r7, r0, #16
 800ce72:	4629      	mov	r1, r5
 800ce74:	42b1      	cmp	r1, r6
 800ce76:	d334      	bcc.n	800cee2 <rshift+0x96>
 800ce78:	1a9b      	subs	r3, r3, r2
 800ce7a:	009b      	lsls	r3, r3, #2
 800ce7c:	1eea      	subs	r2, r5, #3
 800ce7e:	4296      	cmp	r6, r2
 800ce80:	bf38      	it	cc
 800ce82:	2300      	movcc	r3, #0
 800ce84:	4423      	add	r3, r4
 800ce86:	e015      	b.n	800ceb4 <rshift+0x68>
 800ce88:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ce8c:	f1c1 0820 	rsb	r8, r1, #32
 800ce90:	40cf      	lsrs	r7, r1
 800ce92:	f105 0e04 	add.w	lr, r5, #4
 800ce96:	46a1      	mov	r9, r4
 800ce98:	4576      	cmp	r6, lr
 800ce9a:	46f4      	mov	ip, lr
 800ce9c:	d815      	bhi.n	800ceca <rshift+0x7e>
 800ce9e:	1a9a      	subs	r2, r3, r2
 800cea0:	0092      	lsls	r2, r2, #2
 800cea2:	3a04      	subs	r2, #4
 800cea4:	3501      	adds	r5, #1
 800cea6:	42ae      	cmp	r6, r5
 800cea8:	bf38      	it	cc
 800ceaa:	2200      	movcc	r2, #0
 800ceac:	18a3      	adds	r3, r4, r2
 800ceae:	50a7      	str	r7, [r4, r2]
 800ceb0:	b107      	cbz	r7, 800ceb4 <rshift+0x68>
 800ceb2:	3304      	adds	r3, #4
 800ceb4:	1b1a      	subs	r2, r3, r4
 800ceb6:	42a3      	cmp	r3, r4
 800ceb8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cebc:	bf08      	it	eq
 800cebe:	2300      	moveq	r3, #0
 800cec0:	6102      	str	r2, [r0, #16]
 800cec2:	bf08      	it	eq
 800cec4:	6143      	streq	r3, [r0, #20]
 800cec6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ceca:	f8dc c000 	ldr.w	ip, [ip]
 800cece:	fa0c fc08 	lsl.w	ip, ip, r8
 800ced2:	ea4c 0707 	orr.w	r7, ip, r7
 800ced6:	f849 7b04 	str.w	r7, [r9], #4
 800ceda:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cede:	40cf      	lsrs	r7, r1
 800cee0:	e7da      	b.n	800ce98 <rshift+0x4c>
 800cee2:	f851 cb04 	ldr.w	ip, [r1], #4
 800cee6:	f847 cf04 	str.w	ip, [r7, #4]!
 800ceea:	e7c3      	b.n	800ce74 <rshift+0x28>
 800ceec:	4623      	mov	r3, r4
 800ceee:	e7e1      	b.n	800ceb4 <rshift+0x68>

0800cef0 <__hexdig_fun>:
 800cef0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800cef4:	2b09      	cmp	r3, #9
 800cef6:	d802      	bhi.n	800cefe <__hexdig_fun+0xe>
 800cef8:	3820      	subs	r0, #32
 800cefa:	b2c0      	uxtb	r0, r0
 800cefc:	4770      	bx	lr
 800cefe:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800cf02:	2b05      	cmp	r3, #5
 800cf04:	d801      	bhi.n	800cf0a <__hexdig_fun+0x1a>
 800cf06:	3847      	subs	r0, #71	; 0x47
 800cf08:	e7f7      	b.n	800cefa <__hexdig_fun+0xa>
 800cf0a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800cf0e:	2b05      	cmp	r3, #5
 800cf10:	d801      	bhi.n	800cf16 <__hexdig_fun+0x26>
 800cf12:	3827      	subs	r0, #39	; 0x27
 800cf14:	e7f1      	b.n	800cefa <__hexdig_fun+0xa>
 800cf16:	2000      	movs	r0, #0
 800cf18:	4770      	bx	lr
	...

0800cf1c <__gethex>:
 800cf1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf20:	ed2d 8b02 	vpush	{d8}
 800cf24:	b089      	sub	sp, #36	; 0x24
 800cf26:	ee08 0a10 	vmov	s16, r0
 800cf2a:	9304      	str	r3, [sp, #16]
 800cf2c:	4bb4      	ldr	r3, [pc, #720]	; (800d200 <__gethex+0x2e4>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	9301      	str	r3, [sp, #4]
 800cf32:	4618      	mov	r0, r3
 800cf34:	468b      	mov	fp, r1
 800cf36:	4690      	mov	r8, r2
 800cf38:	f7f3 f962 	bl	8000200 <strlen>
 800cf3c:	9b01      	ldr	r3, [sp, #4]
 800cf3e:	f8db 2000 	ldr.w	r2, [fp]
 800cf42:	4403      	add	r3, r0
 800cf44:	4682      	mov	sl, r0
 800cf46:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800cf4a:	9305      	str	r3, [sp, #20]
 800cf4c:	1c93      	adds	r3, r2, #2
 800cf4e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800cf52:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800cf56:	32fe      	adds	r2, #254	; 0xfe
 800cf58:	18d1      	adds	r1, r2, r3
 800cf5a:	461f      	mov	r7, r3
 800cf5c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cf60:	9100      	str	r1, [sp, #0]
 800cf62:	2830      	cmp	r0, #48	; 0x30
 800cf64:	d0f8      	beq.n	800cf58 <__gethex+0x3c>
 800cf66:	f7ff ffc3 	bl	800cef0 <__hexdig_fun>
 800cf6a:	4604      	mov	r4, r0
 800cf6c:	2800      	cmp	r0, #0
 800cf6e:	d13a      	bne.n	800cfe6 <__gethex+0xca>
 800cf70:	9901      	ldr	r1, [sp, #4]
 800cf72:	4652      	mov	r2, sl
 800cf74:	4638      	mov	r0, r7
 800cf76:	f001 fa33 	bl	800e3e0 <strncmp>
 800cf7a:	4605      	mov	r5, r0
 800cf7c:	2800      	cmp	r0, #0
 800cf7e:	d168      	bne.n	800d052 <__gethex+0x136>
 800cf80:	f817 000a 	ldrb.w	r0, [r7, sl]
 800cf84:	eb07 060a 	add.w	r6, r7, sl
 800cf88:	f7ff ffb2 	bl	800cef0 <__hexdig_fun>
 800cf8c:	2800      	cmp	r0, #0
 800cf8e:	d062      	beq.n	800d056 <__gethex+0x13a>
 800cf90:	4633      	mov	r3, r6
 800cf92:	7818      	ldrb	r0, [r3, #0]
 800cf94:	2830      	cmp	r0, #48	; 0x30
 800cf96:	461f      	mov	r7, r3
 800cf98:	f103 0301 	add.w	r3, r3, #1
 800cf9c:	d0f9      	beq.n	800cf92 <__gethex+0x76>
 800cf9e:	f7ff ffa7 	bl	800cef0 <__hexdig_fun>
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	fab0 f480 	clz	r4, r0
 800cfa8:	0964      	lsrs	r4, r4, #5
 800cfaa:	4635      	mov	r5, r6
 800cfac:	9300      	str	r3, [sp, #0]
 800cfae:	463a      	mov	r2, r7
 800cfb0:	4616      	mov	r6, r2
 800cfb2:	3201      	adds	r2, #1
 800cfb4:	7830      	ldrb	r0, [r6, #0]
 800cfb6:	f7ff ff9b 	bl	800cef0 <__hexdig_fun>
 800cfba:	2800      	cmp	r0, #0
 800cfbc:	d1f8      	bne.n	800cfb0 <__gethex+0x94>
 800cfbe:	9901      	ldr	r1, [sp, #4]
 800cfc0:	4652      	mov	r2, sl
 800cfc2:	4630      	mov	r0, r6
 800cfc4:	f001 fa0c 	bl	800e3e0 <strncmp>
 800cfc8:	b980      	cbnz	r0, 800cfec <__gethex+0xd0>
 800cfca:	b94d      	cbnz	r5, 800cfe0 <__gethex+0xc4>
 800cfcc:	eb06 050a 	add.w	r5, r6, sl
 800cfd0:	462a      	mov	r2, r5
 800cfd2:	4616      	mov	r6, r2
 800cfd4:	3201      	adds	r2, #1
 800cfd6:	7830      	ldrb	r0, [r6, #0]
 800cfd8:	f7ff ff8a 	bl	800cef0 <__hexdig_fun>
 800cfdc:	2800      	cmp	r0, #0
 800cfde:	d1f8      	bne.n	800cfd2 <__gethex+0xb6>
 800cfe0:	1bad      	subs	r5, r5, r6
 800cfe2:	00ad      	lsls	r5, r5, #2
 800cfe4:	e004      	b.n	800cff0 <__gethex+0xd4>
 800cfe6:	2400      	movs	r4, #0
 800cfe8:	4625      	mov	r5, r4
 800cfea:	e7e0      	b.n	800cfae <__gethex+0x92>
 800cfec:	2d00      	cmp	r5, #0
 800cfee:	d1f7      	bne.n	800cfe0 <__gethex+0xc4>
 800cff0:	7833      	ldrb	r3, [r6, #0]
 800cff2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cff6:	2b50      	cmp	r3, #80	; 0x50
 800cff8:	d13b      	bne.n	800d072 <__gethex+0x156>
 800cffa:	7873      	ldrb	r3, [r6, #1]
 800cffc:	2b2b      	cmp	r3, #43	; 0x2b
 800cffe:	d02c      	beq.n	800d05a <__gethex+0x13e>
 800d000:	2b2d      	cmp	r3, #45	; 0x2d
 800d002:	d02e      	beq.n	800d062 <__gethex+0x146>
 800d004:	1c71      	adds	r1, r6, #1
 800d006:	f04f 0900 	mov.w	r9, #0
 800d00a:	7808      	ldrb	r0, [r1, #0]
 800d00c:	f7ff ff70 	bl	800cef0 <__hexdig_fun>
 800d010:	1e43      	subs	r3, r0, #1
 800d012:	b2db      	uxtb	r3, r3
 800d014:	2b18      	cmp	r3, #24
 800d016:	d82c      	bhi.n	800d072 <__gethex+0x156>
 800d018:	f1a0 0210 	sub.w	r2, r0, #16
 800d01c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d020:	f7ff ff66 	bl	800cef0 <__hexdig_fun>
 800d024:	1e43      	subs	r3, r0, #1
 800d026:	b2db      	uxtb	r3, r3
 800d028:	2b18      	cmp	r3, #24
 800d02a:	d91d      	bls.n	800d068 <__gethex+0x14c>
 800d02c:	f1b9 0f00 	cmp.w	r9, #0
 800d030:	d000      	beq.n	800d034 <__gethex+0x118>
 800d032:	4252      	negs	r2, r2
 800d034:	4415      	add	r5, r2
 800d036:	f8cb 1000 	str.w	r1, [fp]
 800d03a:	b1e4      	cbz	r4, 800d076 <__gethex+0x15a>
 800d03c:	9b00      	ldr	r3, [sp, #0]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	bf14      	ite	ne
 800d042:	2700      	movne	r7, #0
 800d044:	2706      	moveq	r7, #6
 800d046:	4638      	mov	r0, r7
 800d048:	b009      	add	sp, #36	; 0x24
 800d04a:	ecbd 8b02 	vpop	{d8}
 800d04e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d052:	463e      	mov	r6, r7
 800d054:	4625      	mov	r5, r4
 800d056:	2401      	movs	r4, #1
 800d058:	e7ca      	b.n	800cff0 <__gethex+0xd4>
 800d05a:	f04f 0900 	mov.w	r9, #0
 800d05e:	1cb1      	adds	r1, r6, #2
 800d060:	e7d3      	b.n	800d00a <__gethex+0xee>
 800d062:	f04f 0901 	mov.w	r9, #1
 800d066:	e7fa      	b.n	800d05e <__gethex+0x142>
 800d068:	230a      	movs	r3, #10
 800d06a:	fb03 0202 	mla	r2, r3, r2, r0
 800d06e:	3a10      	subs	r2, #16
 800d070:	e7d4      	b.n	800d01c <__gethex+0x100>
 800d072:	4631      	mov	r1, r6
 800d074:	e7df      	b.n	800d036 <__gethex+0x11a>
 800d076:	1bf3      	subs	r3, r6, r7
 800d078:	3b01      	subs	r3, #1
 800d07a:	4621      	mov	r1, r4
 800d07c:	2b07      	cmp	r3, #7
 800d07e:	dc0b      	bgt.n	800d098 <__gethex+0x17c>
 800d080:	ee18 0a10 	vmov	r0, s16
 800d084:	f000 fa7e 	bl	800d584 <_Balloc>
 800d088:	4604      	mov	r4, r0
 800d08a:	b940      	cbnz	r0, 800d09e <__gethex+0x182>
 800d08c:	4b5d      	ldr	r3, [pc, #372]	; (800d204 <__gethex+0x2e8>)
 800d08e:	4602      	mov	r2, r0
 800d090:	21de      	movs	r1, #222	; 0xde
 800d092:	485d      	ldr	r0, [pc, #372]	; (800d208 <__gethex+0x2ec>)
 800d094:	f001 f9c6 	bl	800e424 <__assert_func>
 800d098:	3101      	adds	r1, #1
 800d09a:	105b      	asrs	r3, r3, #1
 800d09c:	e7ee      	b.n	800d07c <__gethex+0x160>
 800d09e:	f100 0914 	add.w	r9, r0, #20
 800d0a2:	f04f 0b00 	mov.w	fp, #0
 800d0a6:	f1ca 0301 	rsb	r3, sl, #1
 800d0aa:	f8cd 9008 	str.w	r9, [sp, #8]
 800d0ae:	f8cd b000 	str.w	fp, [sp]
 800d0b2:	9306      	str	r3, [sp, #24]
 800d0b4:	42b7      	cmp	r7, r6
 800d0b6:	d340      	bcc.n	800d13a <__gethex+0x21e>
 800d0b8:	9802      	ldr	r0, [sp, #8]
 800d0ba:	9b00      	ldr	r3, [sp, #0]
 800d0bc:	f840 3b04 	str.w	r3, [r0], #4
 800d0c0:	eba0 0009 	sub.w	r0, r0, r9
 800d0c4:	1080      	asrs	r0, r0, #2
 800d0c6:	0146      	lsls	r6, r0, #5
 800d0c8:	6120      	str	r0, [r4, #16]
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	f000 fb4c 	bl	800d768 <__hi0bits>
 800d0d0:	1a30      	subs	r0, r6, r0
 800d0d2:	f8d8 6000 	ldr.w	r6, [r8]
 800d0d6:	42b0      	cmp	r0, r6
 800d0d8:	dd63      	ble.n	800d1a2 <__gethex+0x286>
 800d0da:	1b87      	subs	r7, r0, r6
 800d0dc:	4639      	mov	r1, r7
 800d0de:	4620      	mov	r0, r4
 800d0e0:	f000 fef0 	bl	800dec4 <__any_on>
 800d0e4:	4682      	mov	sl, r0
 800d0e6:	b1a8      	cbz	r0, 800d114 <__gethex+0x1f8>
 800d0e8:	1e7b      	subs	r3, r7, #1
 800d0ea:	1159      	asrs	r1, r3, #5
 800d0ec:	f003 021f 	and.w	r2, r3, #31
 800d0f0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d0f4:	f04f 0a01 	mov.w	sl, #1
 800d0f8:	fa0a f202 	lsl.w	r2, sl, r2
 800d0fc:	420a      	tst	r2, r1
 800d0fe:	d009      	beq.n	800d114 <__gethex+0x1f8>
 800d100:	4553      	cmp	r3, sl
 800d102:	dd05      	ble.n	800d110 <__gethex+0x1f4>
 800d104:	1eb9      	subs	r1, r7, #2
 800d106:	4620      	mov	r0, r4
 800d108:	f000 fedc 	bl	800dec4 <__any_on>
 800d10c:	2800      	cmp	r0, #0
 800d10e:	d145      	bne.n	800d19c <__gethex+0x280>
 800d110:	f04f 0a02 	mov.w	sl, #2
 800d114:	4639      	mov	r1, r7
 800d116:	4620      	mov	r0, r4
 800d118:	f7ff fe98 	bl	800ce4c <rshift>
 800d11c:	443d      	add	r5, r7
 800d11e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d122:	42ab      	cmp	r3, r5
 800d124:	da4c      	bge.n	800d1c0 <__gethex+0x2a4>
 800d126:	ee18 0a10 	vmov	r0, s16
 800d12a:	4621      	mov	r1, r4
 800d12c:	f000 fa6a 	bl	800d604 <_Bfree>
 800d130:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d132:	2300      	movs	r3, #0
 800d134:	6013      	str	r3, [r2, #0]
 800d136:	27a3      	movs	r7, #163	; 0xa3
 800d138:	e785      	b.n	800d046 <__gethex+0x12a>
 800d13a:	1e73      	subs	r3, r6, #1
 800d13c:	9a05      	ldr	r2, [sp, #20]
 800d13e:	9303      	str	r3, [sp, #12]
 800d140:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d144:	4293      	cmp	r3, r2
 800d146:	d019      	beq.n	800d17c <__gethex+0x260>
 800d148:	f1bb 0f20 	cmp.w	fp, #32
 800d14c:	d107      	bne.n	800d15e <__gethex+0x242>
 800d14e:	9b02      	ldr	r3, [sp, #8]
 800d150:	9a00      	ldr	r2, [sp, #0]
 800d152:	f843 2b04 	str.w	r2, [r3], #4
 800d156:	9302      	str	r3, [sp, #8]
 800d158:	2300      	movs	r3, #0
 800d15a:	9300      	str	r3, [sp, #0]
 800d15c:	469b      	mov	fp, r3
 800d15e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d162:	f7ff fec5 	bl	800cef0 <__hexdig_fun>
 800d166:	9b00      	ldr	r3, [sp, #0]
 800d168:	f000 000f 	and.w	r0, r0, #15
 800d16c:	fa00 f00b 	lsl.w	r0, r0, fp
 800d170:	4303      	orrs	r3, r0
 800d172:	9300      	str	r3, [sp, #0]
 800d174:	f10b 0b04 	add.w	fp, fp, #4
 800d178:	9b03      	ldr	r3, [sp, #12]
 800d17a:	e00d      	b.n	800d198 <__gethex+0x27c>
 800d17c:	9b03      	ldr	r3, [sp, #12]
 800d17e:	9a06      	ldr	r2, [sp, #24]
 800d180:	4413      	add	r3, r2
 800d182:	42bb      	cmp	r3, r7
 800d184:	d3e0      	bcc.n	800d148 <__gethex+0x22c>
 800d186:	4618      	mov	r0, r3
 800d188:	9901      	ldr	r1, [sp, #4]
 800d18a:	9307      	str	r3, [sp, #28]
 800d18c:	4652      	mov	r2, sl
 800d18e:	f001 f927 	bl	800e3e0 <strncmp>
 800d192:	9b07      	ldr	r3, [sp, #28]
 800d194:	2800      	cmp	r0, #0
 800d196:	d1d7      	bne.n	800d148 <__gethex+0x22c>
 800d198:	461e      	mov	r6, r3
 800d19a:	e78b      	b.n	800d0b4 <__gethex+0x198>
 800d19c:	f04f 0a03 	mov.w	sl, #3
 800d1a0:	e7b8      	b.n	800d114 <__gethex+0x1f8>
 800d1a2:	da0a      	bge.n	800d1ba <__gethex+0x29e>
 800d1a4:	1a37      	subs	r7, r6, r0
 800d1a6:	4621      	mov	r1, r4
 800d1a8:	ee18 0a10 	vmov	r0, s16
 800d1ac:	463a      	mov	r2, r7
 800d1ae:	f000 fc45 	bl	800da3c <__lshift>
 800d1b2:	1bed      	subs	r5, r5, r7
 800d1b4:	4604      	mov	r4, r0
 800d1b6:	f100 0914 	add.w	r9, r0, #20
 800d1ba:	f04f 0a00 	mov.w	sl, #0
 800d1be:	e7ae      	b.n	800d11e <__gethex+0x202>
 800d1c0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d1c4:	42a8      	cmp	r0, r5
 800d1c6:	dd72      	ble.n	800d2ae <__gethex+0x392>
 800d1c8:	1b45      	subs	r5, r0, r5
 800d1ca:	42ae      	cmp	r6, r5
 800d1cc:	dc36      	bgt.n	800d23c <__gethex+0x320>
 800d1ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d1d2:	2b02      	cmp	r3, #2
 800d1d4:	d02a      	beq.n	800d22c <__gethex+0x310>
 800d1d6:	2b03      	cmp	r3, #3
 800d1d8:	d02c      	beq.n	800d234 <__gethex+0x318>
 800d1da:	2b01      	cmp	r3, #1
 800d1dc:	d11c      	bne.n	800d218 <__gethex+0x2fc>
 800d1de:	42ae      	cmp	r6, r5
 800d1e0:	d11a      	bne.n	800d218 <__gethex+0x2fc>
 800d1e2:	2e01      	cmp	r6, #1
 800d1e4:	d112      	bne.n	800d20c <__gethex+0x2f0>
 800d1e6:	9a04      	ldr	r2, [sp, #16]
 800d1e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d1ec:	6013      	str	r3, [r2, #0]
 800d1ee:	2301      	movs	r3, #1
 800d1f0:	6123      	str	r3, [r4, #16]
 800d1f2:	f8c9 3000 	str.w	r3, [r9]
 800d1f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d1f8:	2762      	movs	r7, #98	; 0x62
 800d1fa:	601c      	str	r4, [r3, #0]
 800d1fc:	e723      	b.n	800d046 <__gethex+0x12a>
 800d1fe:	bf00      	nop
 800d200:	0800f620 	.word	0x0800f620
 800d204:	0800f5a8 	.word	0x0800f5a8
 800d208:	0800f5b9 	.word	0x0800f5b9
 800d20c:	1e71      	subs	r1, r6, #1
 800d20e:	4620      	mov	r0, r4
 800d210:	f000 fe58 	bl	800dec4 <__any_on>
 800d214:	2800      	cmp	r0, #0
 800d216:	d1e6      	bne.n	800d1e6 <__gethex+0x2ca>
 800d218:	ee18 0a10 	vmov	r0, s16
 800d21c:	4621      	mov	r1, r4
 800d21e:	f000 f9f1 	bl	800d604 <_Bfree>
 800d222:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d224:	2300      	movs	r3, #0
 800d226:	6013      	str	r3, [r2, #0]
 800d228:	2750      	movs	r7, #80	; 0x50
 800d22a:	e70c      	b.n	800d046 <__gethex+0x12a>
 800d22c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d1f2      	bne.n	800d218 <__gethex+0x2fc>
 800d232:	e7d8      	b.n	800d1e6 <__gethex+0x2ca>
 800d234:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d236:	2b00      	cmp	r3, #0
 800d238:	d1d5      	bne.n	800d1e6 <__gethex+0x2ca>
 800d23a:	e7ed      	b.n	800d218 <__gethex+0x2fc>
 800d23c:	1e6f      	subs	r7, r5, #1
 800d23e:	f1ba 0f00 	cmp.w	sl, #0
 800d242:	d131      	bne.n	800d2a8 <__gethex+0x38c>
 800d244:	b127      	cbz	r7, 800d250 <__gethex+0x334>
 800d246:	4639      	mov	r1, r7
 800d248:	4620      	mov	r0, r4
 800d24a:	f000 fe3b 	bl	800dec4 <__any_on>
 800d24e:	4682      	mov	sl, r0
 800d250:	117b      	asrs	r3, r7, #5
 800d252:	2101      	movs	r1, #1
 800d254:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d258:	f007 071f 	and.w	r7, r7, #31
 800d25c:	fa01 f707 	lsl.w	r7, r1, r7
 800d260:	421f      	tst	r7, r3
 800d262:	4629      	mov	r1, r5
 800d264:	4620      	mov	r0, r4
 800d266:	bf18      	it	ne
 800d268:	f04a 0a02 	orrne.w	sl, sl, #2
 800d26c:	1b76      	subs	r6, r6, r5
 800d26e:	f7ff fded 	bl	800ce4c <rshift>
 800d272:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d276:	2702      	movs	r7, #2
 800d278:	f1ba 0f00 	cmp.w	sl, #0
 800d27c:	d048      	beq.n	800d310 <__gethex+0x3f4>
 800d27e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d282:	2b02      	cmp	r3, #2
 800d284:	d015      	beq.n	800d2b2 <__gethex+0x396>
 800d286:	2b03      	cmp	r3, #3
 800d288:	d017      	beq.n	800d2ba <__gethex+0x39e>
 800d28a:	2b01      	cmp	r3, #1
 800d28c:	d109      	bne.n	800d2a2 <__gethex+0x386>
 800d28e:	f01a 0f02 	tst.w	sl, #2
 800d292:	d006      	beq.n	800d2a2 <__gethex+0x386>
 800d294:	f8d9 0000 	ldr.w	r0, [r9]
 800d298:	ea4a 0a00 	orr.w	sl, sl, r0
 800d29c:	f01a 0f01 	tst.w	sl, #1
 800d2a0:	d10e      	bne.n	800d2c0 <__gethex+0x3a4>
 800d2a2:	f047 0710 	orr.w	r7, r7, #16
 800d2a6:	e033      	b.n	800d310 <__gethex+0x3f4>
 800d2a8:	f04f 0a01 	mov.w	sl, #1
 800d2ac:	e7d0      	b.n	800d250 <__gethex+0x334>
 800d2ae:	2701      	movs	r7, #1
 800d2b0:	e7e2      	b.n	800d278 <__gethex+0x35c>
 800d2b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d2b4:	f1c3 0301 	rsb	r3, r3, #1
 800d2b8:	9315      	str	r3, [sp, #84]	; 0x54
 800d2ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d0f0      	beq.n	800d2a2 <__gethex+0x386>
 800d2c0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d2c4:	f104 0314 	add.w	r3, r4, #20
 800d2c8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d2cc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d2d0:	f04f 0c00 	mov.w	ip, #0
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2da:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d2de:	d01c      	beq.n	800d31a <__gethex+0x3fe>
 800d2e0:	3201      	adds	r2, #1
 800d2e2:	6002      	str	r2, [r0, #0]
 800d2e4:	2f02      	cmp	r7, #2
 800d2e6:	f104 0314 	add.w	r3, r4, #20
 800d2ea:	d13f      	bne.n	800d36c <__gethex+0x450>
 800d2ec:	f8d8 2000 	ldr.w	r2, [r8]
 800d2f0:	3a01      	subs	r2, #1
 800d2f2:	42b2      	cmp	r2, r6
 800d2f4:	d10a      	bne.n	800d30c <__gethex+0x3f0>
 800d2f6:	1171      	asrs	r1, r6, #5
 800d2f8:	2201      	movs	r2, #1
 800d2fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d2fe:	f006 061f 	and.w	r6, r6, #31
 800d302:	fa02 f606 	lsl.w	r6, r2, r6
 800d306:	421e      	tst	r6, r3
 800d308:	bf18      	it	ne
 800d30a:	4617      	movne	r7, r2
 800d30c:	f047 0720 	orr.w	r7, r7, #32
 800d310:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d312:	601c      	str	r4, [r3, #0]
 800d314:	9b04      	ldr	r3, [sp, #16]
 800d316:	601d      	str	r5, [r3, #0]
 800d318:	e695      	b.n	800d046 <__gethex+0x12a>
 800d31a:	4299      	cmp	r1, r3
 800d31c:	f843 cc04 	str.w	ip, [r3, #-4]
 800d320:	d8d8      	bhi.n	800d2d4 <__gethex+0x3b8>
 800d322:	68a3      	ldr	r3, [r4, #8]
 800d324:	459b      	cmp	fp, r3
 800d326:	db19      	blt.n	800d35c <__gethex+0x440>
 800d328:	6861      	ldr	r1, [r4, #4]
 800d32a:	ee18 0a10 	vmov	r0, s16
 800d32e:	3101      	adds	r1, #1
 800d330:	f000 f928 	bl	800d584 <_Balloc>
 800d334:	4681      	mov	r9, r0
 800d336:	b918      	cbnz	r0, 800d340 <__gethex+0x424>
 800d338:	4b1a      	ldr	r3, [pc, #104]	; (800d3a4 <__gethex+0x488>)
 800d33a:	4602      	mov	r2, r0
 800d33c:	2184      	movs	r1, #132	; 0x84
 800d33e:	e6a8      	b.n	800d092 <__gethex+0x176>
 800d340:	6922      	ldr	r2, [r4, #16]
 800d342:	3202      	adds	r2, #2
 800d344:	f104 010c 	add.w	r1, r4, #12
 800d348:	0092      	lsls	r2, r2, #2
 800d34a:	300c      	adds	r0, #12
 800d34c:	f000 f90c 	bl	800d568 <memcpy>
 800d350:	4621      	mov	r1, r4
 800d352:	ee18 0a10 	vmov	r0, s16
 800d356:	f000 f955 	bl	800d604 <_Bfree>
 800d35a:	464c      	mov	r4, r9
 800d35c:	6923      	ldr	r3, [r4, #16]
 800d35e:	1c5a      	adds	r2, r3, #1
 800d360:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d364:	6122      	str	r2, [r4, #16]
 800d366:	2201      	movs	r2, #1
 800d368:	615a      	str	r2, [r3, #20]
 800d36a:	e7bb      	b.n	800d2e4 <__gethex+0x3c8>
 800d36c:	6922      	ldr	r2, [r4, #16]
 800d36e:	455a      	cmp	r2, fp
 800d370:	dd0b      	ble.n	800d38a <__gethex+0x46e>
 800d372:	2101      	movs	r1, #1
 800d374:	4620      	mov	r0, r4
 800d376:	f7ff fd69 	bl	800ce4c <rshift>
 800d37a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d37e:	3501      	adds	r5, #1
 800d380:	42ab      	cmp	r3, r5
 800d382:	f6ff aed0 	blt.w	800d126 <__gethex+0x20a>
 800d386:	2701      	movs	r7, #1
 800d388:	e7c0      	b.n	800d30c <__gethex+0x3f0>
 800d38a:	f016 061f 	ands.w	r6, r6, #31
 800d38e:	d0fa      	beq.n	800d386 <__gethex+0x46a>
 800d390:	4453      	add	r3, sl
 800d392:	f1c6 0620 	rsb	r6, r6, #32
 800d396:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d39a:	f000 f9e5 	bl	800d768 <__hi0bits>
 800d39e:	42b0      	cmp	r0, r6
 800d3a0:	dbe7      	blt.n	800d372 <__gethex+0x456>
 800d3a2:	e7f0      	b.n	800d386 <__gethex+0x46a>
 800d3a4:	0800f5a8 	.word	0x0800f5a8

0800d3a8 <L_shift>:
 800d3a8:	f1c2 0208 	rsb	r2, r2, #8
 800d3ac:	0092      	lsls	r2, r2, #2
 800d3ae:	b570      	push	{r4, r5, r6, lr}
 800d3b0:	f1c2 0620 	rsb	r6, r2, #32
 800d3b4:	6843      	ldr	r3, [r0, #4]
 800d3b6:	6804      	ldr	r4, [r0, #0]
 800d3b8:	fa03 f506 	lsl.w	r5, r3, r6
 800d3bc:	432c      	orrs	r4, r5
 800d3be:	40d3      	lsrs	r3, r2
 800d3c0:	6004      	str	r4, [r0, #0]
 800d3c2:	f840 3f04 	str.w	r3, [r0, #4]!
 800d3c6:	4288      	cmp	r0, r1
 800d3c8:	d3f4      	bcc.n	800d3b4 <L_shift+0xc>
 800d3ca:	bd70      	pop	{r4, r5, r6, pc}

0800d3cc <__match>:
 800d3cc:	b530      	push	{r4, r5, lr}
 800d3ce:	6803      	ldr	r3, [r0, #0]
 800d3d0:	3301      	adds	r3, #1
 800d3d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d3d6:	b914      	cbnz	r4, 800d3de <__match+0x12>
 800d3d8:	6003      	str	r3, [r0, #0]
 800d3da:	2001      	movs	r0, #1
 800d3dc:	bd30      	pop	{r4, r5, pc}
 800d3de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3e2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d3e6:	2d19      	cmp	r5, #25
 800d3e8:	bf98      	it	ls
 800d3ea:	3220      	addls	r2, #32
 800d3ec:	42a2      	cmp	r2, r4
 800d3ee:	d0f0      	beq.n	800d3d2 <__match+0x6>
 800d3f0:	2000      	movs	r0, #0
 800d3f2:	e7f3      	b.n	800d3dc <__match+0x10>

0800d3f4 <__hexnan>:
 800d3f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3f8:	680b      	ldr	r3, [r1, #0]
 800d3fa:	115e      	asrs	r6, r3, #5
 800d3fc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d400:	f013 031f 	ands.w	r3, r3, #31
 800d404:	b087      	sub	sp, #28
 800d406:	bf18      	it	ne
 800d408:	3604      	addne	r6, #4
 800d40a:	2500      	movs	r5, #0
 800d40c:	1f37      	subs	r7, r6, #4
 800d40e:	4690      	mov	r8, r2
 800d410:	6802      	ldr	r2, [r0, #0]
 800d412:	9301      	str	r3, [sp, #4]
 800d414:	4682      	mov	sl, r0
 800d416:	f846 5c04 	str.w	r5, [r6, #-4]
 800d41a:	46b9      	mov	r9, r7
 800d41c:	463c      	mov	r4, r7
 800d41e:	9502      	str	r5, [sp, #8]
 800d420:	46ab      	mov	fp, r5
 800d422:	7851      	ldrb	r1, [r2, #1]
 800d424:	1c53      	adds	r3, r2, #1
 800d426:	9303      	str	r3, [sp, #12]
 800d428:	b341      	cbz	r1, 800d47c <__hexnan+0x88>
 800d42a:	4608      	mov	r0, r1
 800d42c:	9205      	str	r2, [sp, #20]
 800d42e:	9104      	str	r1, [sp, #16]
 800d430:	f7ff fd5e 	bl	800cef0 <__hexdig_fun>
 800d434:	2800      	cmp	r0, #0
 800d436:	d14f      	bne.n	800d4d8 <__hexnan+0xe4>
 800d438:	9904      	ldr	r1, [sp, #16]
 800d43a:	9a05      	ldr	r2, [sp, #20]
 800d43c:	2920      	cmp	r1, #32
 800d43e:	d818      	bhi.n	800d472 <__hexnan+0x7e>
 800d440:	9b02      	ldr	r3, [sp, #8]
 800d442:	459b      	cmp	fp, r3
 800d444:	dd13      	ble.n	800d46e <__hexnan+0x7a>
 800d446:	454c      	cmp	r4, r9
 800d448:	d206      	bcs.n	800d458 <__hexnan+0x64>
 800d44a:	2d07      	cmp	r5, #7
 800d44c:	dc04      	bgt.n	800d458 <__hexnan+0x64>
 800d44e:	462a      	mov	r2, r5
 800d450:	4649      	mov	r1, r9
 800d452:	4620      	mov	r0, r4
 800d454:	f7ff ffa8 	bl	800d3a8 <L_shift>
 800d458:	4544      	cmp	r4, r8
 800d45a:	d950      	bls.n	800d4fe <__hexnan+0x10a>
 800d45c:	2300      	movs	r3, #0
 800d45e:	f1a4 0904 	sub.w	r9, r4, #4
 800d462:	f844 3c04 	str.w	r3, [r4, #-4]
 800d466:	f8cd b008 	str.w	fp, [sp, #8]
 800d46a:	464c      	mov	r4, r9
 800d46c:	461d      	mov	r5, r3
 800d46e:	9a03      	ldr	r2, [sp, #12]
 800d470:	e7d7      	b.n	800d422 <__hexnan+0x2e>
 800d472:	2929      	cmp	r1, #41	; 0x29
 800d474:	d156      	bne.n	800d524 <__hexnan+0x130>
 800d476:	3202      	adds	r2, #2
 800d478:	f8ca 2000 	str.w	r2, [sl]
 800d47c:	f1bb 0f00 	cmp.w	fp, #0
 800d480:	d050      	beq.n	800d524 <__hexnan+0x130>
 800d482:	454c      	cmp	r4, r9
 800d484:	d206      	bcs.n	800d494 <__hexnan+0xa0>
 800d486:	2d07      	cmp	r5, #7
 800d488:	dc04      	bgt.n	800d494 <__hexnan+0xa0>
 800d48a:	462a      	mov	r2, r5
 800d48c:	4649      	mov	r1, r9
 800d48e:	4620      	mov	r0, r4
 800d490:	f7ff ff8a 	bl	800d3a8 <L_shift>
 800d494:	4544      	cmp	r4, r8
 800d496:	d934      	bls.n	800d502 <__hexnan+0x10e>
 800d498:	f1a8 0204 	sub.w	r2, r8, #4
 800d49c:	4623      	mov	r3, r4
 800d49e:	f853 1b04 	ldr.w	r1, [r3], #4
 800d4a2:	f842 1f04 	str.w	r1, [r2, #4]!
 800d4a6:	429f      	cmp	r7, r3
 800d4a8:	d2f9      	bcs.n	800d49e <__hexnan+0xaa>
 800d4aa:	1b3b      	subs	r3, r7, r4
 800d4ac:	f023 0303 	bic.w	r3, r3, #3
 800d4b0:	3304      	adds	r3, #4
 800d4b2:	3401      	adds	r4, #1
 800d4b4:	3e03      	subs	r6, #3
 800d4b6:	42b4      	cmp	r4, r6
 800d4b8:	bf88      	it	hi
 800d4ba:	2304      	movhi	r3, #4
 800d4bc:	4443      	add	r3, r8
 800d4be:	2200      	movs	r2, #0
 800d4c0:	f843 2b04 	str.w	r2, [r3], #4
 800d4c4:	429f      	cmp	r7, r3
 800d4c6:	d2fb      	bcs.n	800d4c0 <__hexnan+0xcc>
 800d4c8:	683b      	ldr	r3, [r7, #0]
 800d4ca:	b91b      	cbnz	r3, 800d4d4 <__hexnan+0xe0>
 800d4cc:	4547      	cmp	r7, r8
 800d4ce:	d127      	bne.n	800d520 <__hexnan+0x12c>
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	603b      	str	r3, [r7, #0]
 800d4d4:	2005      	movs	r0, #5
 800d4d6:	e026      	b.n	800d526 <__hexnan+0x132>
 800d4d8:	3501      	adds	r5, #1
 800d4da:	2d08      	cmp	r5, #8
 800d4dc:	f10b 0b01 	add.w	fp, fp, #1
 800d4e0:	dd06      	ble.n	800d4f0 <__hexnan+0xfc>
 800d4e2:	4544      	cmp	r4, r8
 800d4e4:	d9c3      	bls.n	800d46e <__hexnan+0x7a>
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	f844 3c04 	str.w	r3, [r4, #-4]
 800d4ec:	2501      	movs	r5, #1
 800d4ee:	3c04      	subs	r4, #4
 800d4f0:	6822      	ldr	r2, [r4, #0]
 800d4f2:	f000 000f 	and.w	r0, r0, #15
 800d4f6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d4fa:	6022      	str	r2, [r4, #0]
 800d4fc:	e7b7      	b.n	800d46e <__hexnan+0x7a>
 800d4fe:	2508      	movs	r5, #8
 800d500:	e7b5      	b.n	800d46e <__hexnan+0x7a>
 800d502:	9b01      	ldr	r3, [sp, #4]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d0df      	beq.n	800d4c8 <__hexnan+0xd4>
 800d508:	f04f 32ff 	mov.w	r2, #4294967295
 800d50c:	f1c3 0320 	rsb	r3, r3, #32
 800d510:	fa22 f303 	lsr.w	r3, r2, r3
 800d514:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d518:	401a      	ands	r2, r3
 800d51a:	f846 2c04 	str.w	r2, [r6, #-4]
 800d51e:	e7d3      	b.n	800d4c8 <__hexnan+0xd4>
 800d520:	3f04      	subs	r7, #4
 800d522:	e7d1      	b.n	800d4c8 <__hexnan+0xd4>
 800d524:	2004      	movs	r0, #4
 800d526:	b007      	add	sp, #28
 800d528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d52c <_localeconv_r>:
 800d52c:	4800      	ldr	r0, [pc, #0]	; (800d530 <_localeconv_r+0x4>)
 800d52e:	4770      	bx	lr
 800d530:	200001d8 	.word	0x200001d8

0800d534 <malloc>:
 800d534:	4b02      	ldr	r3, [pc, #8]	; (800d540 <malloc+0xc>)
 800d536:	4601      	mov	r1, r0
 800d538:	6818      	ldr	r0, [r3, #0]
 800d53a:	f000 bd67 	b.w	800e00c <_malloc_r>
 800d53e:	bf00      	nop
 800d540:	20000080 	.word	0x20000080

0800d544 <__ascii_mbtowc>:
 800d544:	b082      	sub	sp, #8
 800d546:	b901      	cbnz	r1, 800d54a <__ascii_mbtowc+0x6>
 800d548:	a901      	add	r1, sp, #4
 800d54a:	b142      	cbz	r2, 800d55e <__ascii_mbtowc+0x1a>
 800d54c:	b14b      	cbz	r3, 800d562 <__ascii_mbtowc+0x1e>
 800d54e:	7813      	ldrb	r3, [r2, #0]
 800d550:	600b      	str	r3, [r1, #0]
 800d552:	7812      	ldrb	r2, [r2, #0]
 800d554:	1e10      	subs	r0, r2, #0
 800d556:	bf18      	it	ne
 800d558:	2001      	movne	r0, #1
 800d55a:	b002      	add	sp, #8
 800d55c:	4770      	bx	lr
 800d55e:	4610      	mov	r0, r2
 800d560:	e7fb      	b.n	800d55a <__ascii_mbtowc+0x16>
 800d562:	f06f 0001 	mvn.w	r0, #1
 800d566:	e7f8      	b.n	800d55a <__ascii_mbtowc+0x16>

0800d568 <memcpy>:
 800d568:	440a      	add	r2, r1
 800d56a:	4291      	cmp	r1, r2
 800d56c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d570:	d100      	bne.n	800d574 <memcpy+0xc>
 800d572:	4770      	bx	lr
 800d574:	b510      	push	{r4, lr}
 800d576:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d57a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d57e:	4291      	cmp	r1, r2
 800d580:	d1f9      	bne.n	800d576 <memcpy+0xe>
 800d582:	bd10      	pop	{r4, pc}

0800d584 <_Balloc>:
 800d584:	b570      	push	{r4, r5, r6, lr}
 800d586:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d588:	4604      	mov	r4, r0
 800d58a:	460d      	mov	r5, r1
 800d58c:	b976      	cbnz	r6, 800d5ac <_Balloc+0x28>
 800d58e:	2010      	movs	r0, #16
 800d590:	f7ff ffd0 	bl	800d534 <malloc>
 800d594:	4602      	mov	r2, r0
 800d596:	6260      	str	r0, [r4, #36]	; 0x24
 800d598:	b920      	cbnz	r0, 800d5a4 <_Balloc+0x20>
 800d59a:	4b18      	ldr	r3, [pc, #96]	; (800d5fc <_Balloc+0x78>)
 800d59c:	4818      	ldr	r0, [pc, #96]	; (800d600 <_Balloc+0x7c>)
 800d59e:	2166      	movs	r1, #102	; 0x66
 800d5a0:	f000 ff40 	bl	800e424 <__assert_func>
 800d5a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d5a8:	6006      	str	r6, [r0, #0]
 800d5aa:	60c6      	str	r6, [r0, #12]
 800d5ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d5ae:	68f3      	ldr	r3, [r6, #12]
 800d5b0:	b183      	cbz	r3, 800d5d4 <_Balloc+0x50>
 800d5b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d5b4:	68db      	ldr	r3, [r3, #12]
 800d5b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d5ba:	b9b8      	cbnz	r0, 800d5ec <_Balloc+0x68>
 800d5bc:	2101      	movs	r1, #1
 800d5be:	fa01 f605 	lsl.w	r6, r1, r5
 800d5c2:	1d72      	adds	r2, r6, #5
 800d5c4:	0092      	lsls	r2, r2, #2
 800d5c6:	4620      	mov	r0, r4
 800d5c8:	f000 fc9d 	bl	800df06 <_calloc_r>
 800d5cc:	b160      	cbz	r0, 800d5e8 <_Balloc+0x64>
 800d5ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d5d2:	e00e      	b.n	800d5f2 <_Balloc+0x6e>
 800d5d4:	2221      	movs	r2, #33	; 0x21
 800d5d6:	2104      	movs	r1, #4
 800d5d8:	4620      	mov	r0, r4
 800d5da:	f000 fc94 	bl	800df06 <_calloc_r>
 800d5de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d5e0:	60f0      	str	r0, [r6, #12]
 800d5e2:	68db      	ldr	r3, [r3, #12]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d1e4      	bne.n	800d5b2 <_Balloc+0x2e>
 800d5e8:	2000      	movs	r0, #0
 800d5ea:	bd70      	pop	{r4, r5, r6, pc}
 800d5ec:	6802      	ldr	r2, [r0, #0]
 800d5ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d5f8:	e7f7      	b.n	800d5ea <_Balloc+0x66>
 800d5fa:	bf00      	nop
 800d5fc:	0800f536 	.word	0x0800f536
 800d600:	0800f634 	.word	0x0800f634

0800d604 <_Bfree>:
 800d604:	b570      	push	{r4, r5, r6, lr}
 800d606:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d608:	4605      	mov	r5, r0
 800d60a:	460c      	mov	r4, r1
 800d60c:	b976      	cbnz	r6, 800d62c <_Bfree+0x28>
 800d60e:	2010      	movs	r0, #16
 800d610:	f7ff ff90 	bl	800d534 <malloc>
 800d614:	4602      	mov	r2, r0
 800d616:	6268      	str	r0, [r5, #36]	; 0x24
 800d618:	b920      	cbnz	r0, 800d624 <_Bfree+0x20>
 800d61a:	4b09      	ldr	r3, [pc, #36]	; (800d640 <_Bfree+0x3c>)
 800d61c:	4809      	ldr	r0, [pc, #36]	; (800d644 <_Bfree+0x40>)
 800d61e:	218a      	movs	r1, #138	; 0x8a
 800d620:	f000 ff00 	bl	800e424 <__assert_func>
 800d624:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d628:	6006      	str	r6, [r0, #0]
 800d62a:	60c6      	str	r6, [r0, #12]
 800d62c:	b13c      	cbz	r4, 800d63e <_Bfree+0x3a>
 800d62e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d630:	6862      	ldr	r2, [r4, #4]
 800d632:	68db      	ldr	r3, [r3, #12]
 800d634:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d638:	6021      	str	r1, [r4, #0]
 800d63a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d63e:	bd70      	pop	{r4, r5, r6, pc}
 800d640:	0800f536 	.word	0x0800f536
 800d644:	0800f634 	.word	0x0800f634

0800d648 <__multadd>:
 800d648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d64c:	690d      	ldr	r5, [r1, #16]
 800d64e:	4607      	mov	r7, r0
 800d650:	460c      	mov	r4, r1
 800d652:	461e      	mov	r6, r3
 800d654:	f101 0c14 	add.w	ip, r1, #20
 800d658:	2000      	movs	r0, #0
 800d65a:	f8dc 3000 	ldr.w	r3, [ip]
 800d65e:	b299      	uxth	r1, r3
 800d660:	fb02 6101 	mla	r1, r2, r1, r6
 800d664:	0c1e      	lsrs	r6, r3, #16
 800d666:	0c0b      	lsrs	r3, r1, #16
 800d668:	fb02 3306 	mla	r3, r2, r6, r3
 800d66c:	b289      	uxth	r1, r1
 800d66e:	3001      	adds	r0, #1
 800d670:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d674:	4285      	cmp	r5, r0
 800d676:	f84c 1b04 	str.w	r1, [ip], #4
 800d67a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d67e:	dcec      	bgt.n	800d65a <__multadd+0x12>
 800d680:	b30e      	cbz	r6, 800d6c6 <__multadd+0x7e>
 800d682:	68a3      	ldr	r3, [r4, #8]
 800d684:	42ab      	cmp	r3, r5
 800d686:	dc19      	bgt.n	800d6bc <__multadd+0x74>
 800d688:	6861      	ldr	r1, [r4, #4]
 800d68a:	4638      	mov	r0, r7
 800d68c:	3101      	adds	r1, #1
 800d68e:	f7ff ff79 	bl	800d584 <_Balloc>
 800d692:	4680      	mov	r8, r0
 800d694:	b928      	cbnz	r0, 800d6a2 <__multadd+0x5a>
 800d696:	4602      	mov	r2, r0
 800d698:	4b0c      	ldr	r3, [pc, #48]	; (800d6cc <__multadd+0x84>)
 800d69a:	480d      	ldr	r0, [pc, #52]	; (800d6d0 <__multadd+0x88>)
 800d69c:	21b5      	movs	r1, #181	; 0xb5
 800d69e:	f000 fec1 	bl	800e424 <__assert_func>
 800d6a2:	6922      	ldr	r2, [r4, #16]
 800d6a4:	3202      	adds	r2, #2
 800d6a6:	f104 010c 	add.w	r1, r4, #12
 800d6aa:	0092      	lsls	r2, r2, #2
 800d6ac:	300c      	adds	r0, #12
 800d6ae:	f7ff ff5b 	bl	800d568 <memcpy>
 800d6b2:	4621      	mov	r1, r4
 800d6b4:	4638      	mov	r0, r7
 800d6b6:	f7ff ffa5 	bl	800d604 <_Bfree>
 800d6ba:	4644      	mov	r4, r8
 800d6bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d6c0:	3501      	adds	r5, #1
 800d6c2:	615e      	str	r6, [r3, #20]
 800d6c4:	6125      	str	r5, [r4, #16]
 800d6c6:	4620      	mov	r0, r4
 800d6c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6cc:	0800f5a8 	.word	0x0800f5a8
 800d6d0:	0800f634 	.word	0x0800f634

0800d6d4 <__s2b>:
 800d6d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6d8:	460c      	mov	r4, r1
 800d6da:	4615      	mov	r5, r2
 800d6dc:	461f      	mov	r7, r3
 800d6de:	2209      	movs	r2, #9
 800d6e0:	3308      	adds	r3, #8
 800d6e2:	4606      	mov	r6, r0
 800d6e4:	fb93 f3f2 	sdiv	r3, r3, r2
 800d6e8:	2100      	movs	r1, #0
 800d6ea:	2201      	movs	r2, #1
 800d6ec:	429a      	cmp	r2, r3
 800d6ee:	db09      	blt.n	800d704 <__s2b+0x30>
 800d6f0:	4630      	mov	r0, r6
 800d6f2:	f7ff ff47 	bl	800d584 <_Balloc>
 800d6f6:	b940      	cbnz	r0, 800d70a <__s2b+0x36>
 800d6f8:	4602      	mov	r2, r0
 800d6fa:	4b19      	ldr	r3, [pc, #100]	; (800d760 <__s2b+0x8c>)
 800d6fc:	4819      	ldr	r0, [pc, #100]	; (800d764 <__s2b+0x90>)
 800d6fe:	21ce      	movs	r1, #206	; 0xce
 800d700:	f000 fe90 	bl	800e424 <__assert_func>
 800d704:	0052      	lsls	r2, r2, #1
 800d706:	3101      	adds	r1, #1
 800d708:	e7f0      	b.n	800d6ec <__s2b+0x18>
 800d70a:	9b08      	ldr	r3, [sp, #32]
 800d70c:	6143      	str	r3, [r0, #20]
 800d70e:	2d09      	cmp	r5, #9
 800d710:	f04f 0301 	mov.w	r3, #1
 800d714:	6103      	str	r3, [r0, #16]
 800d716:	dd16      	ble.n	800d746 <__s2b+0x72>
 800d718:	f104 0909 	add.w	r9, r4, #9
 800d71c:	46c8      	mov	r8, r9
 800d71e:	442c      	add	r4, r5
 800d720:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d724:	4601      	mov	r1, r0
 800d726:	3b30      	subs	r3, #48	; 0x30
 800d728:	220a      	movs	r2, #10
 800d72a:	4630      	mov	r0, r6
 800d72c:	f7ff ff8c 	bl	800d648 <__multadd>
 800d730:	45a0      	cmp	r8, r4
 800d732:	d1f5      	bne.n	800d720 <__s2b+0x4c>
 800d734:	f1a5 0408 	sub.w	r4, r5, #8
 800d738:	444c      	add	r4, r9
 800d73a:	1b2d      	subs	r5, r5, r4
 800d73c:	1963      	adds	r3, r4, r5
 800d73e:	42bb      	cmp	r3, r7
 800d740:	db04      	blt.n	800d74c <__s2b+0x78>
 800d742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d746:	340a      	adds	r4, #10
 800d748:	2509      	movs	r5, #9
 800d74a:	e7f6      	b.n	800d73a <__s2b+0x66>
 800d74c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d750:	4601      	mov	r1, r0
 800d752:	3b30      	subs	r3, #48	; 0x30
 800d754:	220a      	movs	r2, #10
 800d756:	4630      	mov	r0, r6
 800d758:	f7ff ff76 	bl	800d648 <__multadd>
 800d75c:	e7ee      	b.n	800d73c <__s2b+0x68>
 800d75e:	bf00      	nop
 800d760:	0800f5a8 	.word	0x0800f5a8
 800d764:	0800f634 	.word	0x0800f634

0800d768 <__hi0bits>:
 800d768:	0c03      	lsrs	r3, r0, #16
 800d76a:	041b      	lsls	r3, r3, #16
 800d76c:	b9d3      	cbnz	r3, 800d7a4 <__hi0bits+0x3c>
 800d76e:	0400      	lsls	r0, r0, #16
 800d770:	2310      	movs	r3, #16
 800d772:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d776:	bf04      	itt	eq
 800d778:	0200      	lsleq	r0, r0, #8
 800d77a:	3308      	addeq	r3, #8
 800d77c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d780:	bf04      	itt	eq
 800d782:	0100      	lsleq	r0, r0, #4
 800d784:	3304      	addeq	r3, #4
 800d786:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d78a:	bf04      	itt	eq
 800d78c:	0080      	lsleq	r0, r0, #2
 800d78e:	3302      	addeq	r3, #2
 800d790:	2800      	cmp	r0, #0
 800d792:	db05      	blt.n	800d7a0 <__hi0bits+0x38>
 800d794:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d798:	f103 0301 	add.w	r3, r3, #1
 800d79c:	bf08      	it	eq
 800d79e:	2320      	moveq	r3, #32
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	4770      	bx	lr
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	e7e4      	b.n	800d772 <__hi0bits+0xa>

0800d7a8 <__lo0bits>:
 800d7a8:	6803      	ldr	r3, [r0, #0]
 800d7aa:	f013 0207 	ands.w	r2, r3, #7
 800d7ae:	4601      	mov	r1, r0
 800d7b0:	d00b      	beq.n	800d7ca <__lo0bits+0x22>
 800d7b2:	07da      	lsls	r2, r3, #31
 800d7b4:	d423      	bmi.n	800d7fe <__lo0bits+0x56>
 800d7b6:	0798      	lsls	r0, r3, #30
 800d7b8:	bf49      	itett	mi
 800d7ba:	085b      	lsrmi	r3, r3, #1
 800d7bc:	089b      	lsrpl	r3, r3, #2
 800d7be:	2001      	movmi	r0, #1
 800d7c0:	600b      	strmi	r3, [r1, #0]
 800d7c2:	bf5c      	itt	pl
 800d7c4:	600b      	strpl	r3, [r1, #0]
 800d7c6:	2002      	movpl	r0, #2
 800d7c8:	4770      	bx	lr
 800d7ca:	b298      	uxth	r0, r3
 800d7cc:	b9a8      	cbnz	r0, 800d7fa <__lo0bits+0x52>
 800d7ce:	0c1b      	lsrs	r3, r3, #16
 800d7d0:	2010      	movs	r0, #16
 800d7d2:	b2da      	uxtb	r2, r3
 800d7d4:	b90a      	cbnz	r2, 800d7da <__lo0bits+0x32>
 800d7d6:	3008      	adds	r0, #8
 800d7d8:	0a1b      	lsrs	r3, r3, #8
 800d7da:	071a      	lsls	r2, r3, #28
 800d7dc:	bf04      	itt	eq
 800d7de:	091b      	lsreq	r3, r3, #4
 800d7e0:	3004      	addeq	r0, #4
 800d7e2:	079a      	lsls	r2, r3, #30
 800d7e4:	bf04      	itt	eq
 800d7e6:	089b      	lsreq	r3, r3, #2
 800d7e8:	3002      	addeq	r0, #2
 800d7ea:	07da      	lsls	r2, r3, #31
 800d7ec:	d403      	bmi.n	800d7f6 <__lo0bits+0x4e>
 800d7ee:	085b      	lsrs	r3, r3, #1
 800d7f0:	f100 0001 	add.w	r0, r0, #1
 800d7f4:	d005      	beq.n	800d802 <__lo0bits+0x5a>
 800d7f6:	600b      	str	r3, [r1, #0]
 800d7f8:	4770      	bx	lr
 800d7fa:	4610      	mov	r0, r2
 800d7fc:	e7e9      	b.n	800d7d2 <__lo0bits+0x2a>
 800d7fe:	2000      	movs	r0, #0
 800d800:	4770      	bx	lr
 800d802:	2020      	movs	r0, #32
 800d804:	4770      	bx	lr
	...

0800d808 <__i2b>:
 800d808:	b510      	push	{r4, lr}
 800d80a:	460c      	mov	r4, r1
 800d80c:	2101      	movs	r1, #1
 800d80e:	f7ff feb9 	bl	800d584 <_Balloc>
 800d812:	4602      	mov	r2, r0
 800d814:	b928      	cbnz	r0, 800d822 <__i2b+0x1a>
 800d816:	4b05      	ldr	r3, [pc, #20]	; (800d82c <__i2b+0x24>)
 800d818:	4805      	ldr	r0, [pc, #20]	; (800d830 <__i2b+0x28>)
 800d81a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d81e:	f000 fe01 	bl	800e424 <__assert_func>
 800d822:	2301      	movs	r3, #1
 800d824:	6144      	str	r4, [r0, #20]
 800d826:	6103      	str	r3, [r0, #16]
 800d828:	bd10      	pop	{r4, pc}
 800d82a:	bf00      	nop
 800d82c:	0800f5a8 	.word	0x0800f5a8
 800d830:	0800f634 	.word	0x0800f634

0800d834 <__multiply>:
 800d834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d838:	4691      	mov	r9, r2
 800d83a:	690a      	ldr	r2, [r1, #16]
 800d83c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d840:	429a      	cmp	r2, r3
 800d842:	bfb8      	it	lt
 800d844:	460b      	movlt	r3, r1
 800d846:	460c      	mov	r4, r1
 800d848:	bfbc      	itt	lt
 800d84a:	464c      	movlt	r4, r9
 800d84c:	4699      	movlt	r9, r3
 800d84e:	6927      	ldr	r7, [r4, #16]
 800d850:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d854:	68a3      	ldr	r3, [r4, #8]
 800d856:	6861      	ldr	r1, [r4, #4]
 800d858:	eb07 060a 	add.w	r6, r7, sl
 800d85c:	42b3      	cmp	r3, r6
 800d85e:	b085      	sub	sp, #20
 800d860:	bfb8      	it	lt
 800d862:	3101      	addlt	r1, #1
 800d864:	f7ff fe8e 	bl	800d584 <_Balloc>
 800d868:	b930      	cbnz	r0, 800d878 <__multiply+0x44>
 800d86a:	4602      	mov	r2, r0
 800d86c:	4b44      	ldr	r3, [pc, #272]	; (800d980 <__multiply+0x14c>)
 800d86e:	4845      	ldr	r0, [pc, #276]	; (800d984 <__multiply+0x150>)
 800d870:	f240 115d 	movw	r1, #349	; 0x15d
 800d874:	f000 fdd6 	bl	800e424 <__assert_func>
 800d878:	f100 0514 	add.w	r5, r0, #20
 800d87c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d880:	462b      	mov	r3, r5
 800d882:	2200      	movs	r2, #0
 800d884:	4543      	cmp	r3, r8
 800d886:	d321      	bcc.n	800d8cc <__multiply+0x98>
 800d888:	f104 0314 	add.w	r3, r4, #20
 800d88c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d890:	f109 0314 	add.w	r3, r9, #20
 800d894:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d898:	9202      	str	r2, [sp, #8]
 800d89a:	1b3a      	subs	r2, r7, r4
 800d89c:	3a15      	subs	r2, #21
 800d89e:	f022 0203 	bic.w	r2, r2, #3
 800d8a2:	3204      	adds	r2, #4
 800d8a4:	f104 0115 	add.w	r1, r4, #21
 800d8a8:	428f      	cmp	r7, r1
 800d8aa:	bf38      	it	cc
 800d8ac:	2204      	movcc	r2, #4
 800d8ae:	9201      	str	r2, [sp, #4]
 800d8b0:	9a02      	ldr	r2, [sp, #8]
 800d8b2:	9303      	str	r3, [sp, #12]
 800d8b4:	429a      	cmp	r2, r3
 800d8b6:	d80c      	bhi.n	800d8d2 <__multiply+0x9e>
 800d8b8:	2e00      	cmp	r6, #0
 800d8ba:	dd03      	ble.n	800d8c4 <__multiply+0x90>
 800d8bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d05a      	beq.n	800d97a <__multiply+0x146>
 800d8c4:	6106      	str	r6, [r0, #16]
 800d8c6:	b005      	add	sp, #20
 800d8c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8cc:	f843 2b04 	str.w	r2, [r3], #4
 800d8d0:	e7d8      	b.n	800d884 <__multiply+0x50>
 800d8d2:	f8b3 a000 	ldrh.w	sl, [r3]
 800d8d6:	f1ba 0f00 	cmp.w	sl, #0
 800d8da:	d024      	beq.n	800d926 <__multiply+0xf2>
 800d8dc:	f104 0e14 	add.w	lr, r4, #20
 800d8e0:	46a9      	mov	r9, r5
 800d8e2:	f04f 0c00 	mov.w	ip, #0
 800d8e6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d8ea:	f8d9 1000 	ldr.w	r1, [r9]
 800d8ee:	fa1f fb82 	uxth.w	fp, r2
 800d8f2:	b289      	uxth	r1, r1
 800d8f4:	fb0a 110b 	mla	r1, sl, fp, r1
 800d8f8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d8fc:	f8d9 2000 	ldr.w	r2, [r9]
 800d900:	4461      	add	r1, ip
 800d902:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d906:	fb0a c20b 	mla	r2, sl, fp, ip
 800d90a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d90e:	b289      	uxth	r1, r1
 800d910:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d914:	4577      	cmp	r7, lr
 800d916:	f849 1b04 	str.w	r1, [r9], #4
 800d91a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d91e:	d8e2      	bhi.n	800d8e6 <__multiply+0xb2>
 800d920:	9a01      	ldr	r2, [sp, #4]
 800d922:	f845 c002 	str.w	ip, [r5, r2]
 800d926:	9a03      	ldr	r2, [sp, #12]
 800d928:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d92c:	3304      	adds	r3, #4
 800d92e:	f1b9 0f00 	cmp.w	r9, #0
 800d932:	d020      	beq.n	800d976 <__multiply+0x142>
 800d934:	6829      	ldr	r1, [r5, #0]
 800d936:	f104 0c14 	add.w	ip, r4, #20
 800d93a:	46ae      	mov	lr, r5
 800d93c:	f04f 0a00 	mov.w	sl, #0
 800d940:	f8bc b000 	ldrh.w	fp, [ip]
 800d944:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d948:	fb09 220b 	mla	r2, r9, fp, r2
 800d94c:	4492      	add	sl, r2
 800d94e:	b289      	uxth	r1, r1
 800d950:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d954:	f84e 1b04 	str.w	r1, [lr], #4
 800d958:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d95c:	f8be 1000 	ldrh.w	r1, [lr]
 800d960:	0c12      	lsrs	r2, r2, #16
 800d962:	fb09 1102 	mla	r1, r9, r2, r1
 800d966:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d96a:	4567      	cmp	r7, ip
 800d96c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d970:	d8e6      	bhi.n	800d940 <__multiply+0x10c>
 800d972:	9a01      	ldr	r2, [sp, #4]
 800d974:	50a9      	str	r1, [r5, r2]
 800d976:	3504      	adds	r5, #4
 800d978:	e79a      	b.n	800d8b0 <__multiply+0x7c>
 800d97a:	3e01      	subs	r6, #1
 800d97c:	e79c      	b.n	800d8b8 <__multiply+0x84>
 800d97e:	bf00      	nop
 800d980:	0800f5a8 	.word	0x0800f5a8
 800d984:	0800f634 	.word	0x0800f634

0800d988 <__pow5mult>:
 800d988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d98c:	4615      	mov	r5, r2
 800d98e:	f012 0203 	ands.w	r2, r2, #3
 800d992:	4606      	mov	r6, r0
 800d994:	460f      	mov	r7, r1
 800d996:	d007      	beq.n	800d9a8 <__pow5mult+0x20>
 800d998:	4c25      	ldr	r4, [pc, #148]	; (800da30 <__pow5mult+0xa8>)
 800d99a:	3a01      	subs	r2, #1
 800d99c:	2300      	movs	r3, #0
 800d99e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d9a2:	f7ff fe51 	bl	800d648 <__multadd>
 800d9a6:	4607      	mov	r7, r0
 800d9a8:	10ad      	asrs	r5, r5, #2
 800d9aa:	d03d      	beq.n	800da28 <__pow5mult+0xa0>
 800d9ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d9ae:	b97c      	cbnz	r4, 800d9d0 <__pow5mult+0x48>
 800d9b0:	2010      	movs	r0, #16
 800d9b2:	f7ff fdbf 	bl	800d534 <malloc>
 800d9b6:	4602      	mov	r2, r0
 800d9b8:	6270      	str	r0, [r6, #36]	; 0x24
 800d9ba:	b928      	cbnz	r0, 800d9c8 <__pow5mult+0x40>
 800d9bc:	4b1d      	ldr	r3, [pc, #116]	; (800da34 <__pow5mult+0xac>)
 800d9be:	481e      	ldr	r0, [pc, #120]	; (800da38 <__pow5mult+0xb0>)
 800d9c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d9c4:	f000 fd2e 	bl	800e424 <__assert_func>
 800d9c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d9cc:	6004      	str	r4, [r0, #0]
 800d9ce:	60c4      	str	r4, [r0, #12]
 800d9d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d9d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d9d8:	b94c      	cbnz	r4, 800d9ee <__pow5mult+0x66>
 800d9da:	f240 2171 	movw	r1, #625	; 0x271
 800d9de:	4630      	mov	r0, r6
 800d9e0:	f7ff ff12 	bl	800d808 <__i2b>
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	f8c8 0008 	str.w	r0, [r8, #8]
 800d9ea:	4604      	mov	r4, r0
 800d9ec:	6003      	str	r3, [r0, #0]
 800d9ee:	f04f 0900 	mov.w	r9, #0
 800d9f2:	07eb      	lsls	r3, r5, #31
 800d9f4:	d50a      	bpl.n	800da0c <__pow5mult+0x84>
 800d9f6:	4639      	mov	r1, r7
 800d9f8:	4622      	mov	r2, r4
 800d9fa:	4630      	mov	r0, r6
 800d9fc:	f7ff ff1a 	bl	800d834 <__multiply>
 800da00:	4639      	mov	r1, r7
 800da02:	4680      	mov	r8, r0
 800da04:	4630      	mov	r0, r6
 800da06:	f7ff fdfd 	bl	800d604 <_Bfree>
 800da0a:	4647      	mov	r7, r8
 800da0c:	106d      	asrs	r5, r5, #1
 800da0e:	d00b      	beq.n	800da28 <__pow5mult+0xa0>
 800da10:	6820      	ldr	r0, [r4, #0]
 800da12:	b938      	cbnz	r0, 800da24 <__pow5mult+0x9c>
 800da14:	4622      	mov	r2, r4
 800da16:	4621      	mov	r1, r4
 800da18:	4630      	mov	r0, r6
 800da1a:	f7ff ff0b 	bl	800d834 <__multiply>
 800da1e:	6020      	str	r0, [r4, #0]
 800da20:	f8c0 9000 	str.w	r9, [r0]
 800da24:	4604      	mov	r4, r0
 800da26:	e7e4      	b.n	800d9f2 <__pow5mult+0x6a>
 800da28:	4638      	mov	r0, r7
 800da2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da2e:	bf00      	nop
 800da30:	0800f780 	.word	0x0800f780
 800da34:	0800f536 	.word	0x0800f536
 800da38:	0800f634 	.word	0x0800f634

0800da3c <__lshift>:
 800da3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da40:	460c      	mov	r4, r1
 800da42:	6849      	ldr	r1, [r1, #4]
 800da44:	6923      	ldr	r3, [r4, #16]
 800da46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800da4a:	68a3      	ldr	r3, [r4, #8]
 800da4c:	4607      	mov	r7, r0
 800da4e:	4691      	mov	r9, r2
 800da50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800da54:	f108 0601 	add.w	r6, r8, #1
 800da58:	42b3      	cmp	r3, r6
 800da5a:	db0b      	blt.n	800da74 <__lshift+0x38>
 800da5c:	4638      	mov	r0, r7
 800da5e:	f7ff fd91 	bl	800d584 <_Balloc>
 800da62:	4605      	mov	r5, r0
 800da64:	b948      	cbnz	r0, 800da7a <__lshift+0x3e>
 800da66:	4602      	mov	r2, r0
 800da68:	4b2a      	ldr	r3, [pc, #168]	; (800db14 <__lshift+0xd8>)
 800da6a:	482b      	ldr	r0, [pc, #172]	; (800db18 <__lshift+0xdc>)
 800da6c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800da70:	f000 fcd8 	bl	800e424 <__assert_func>
 800da74:	3101      	adds	r1, #1
 800da76:	005b      	lsls	r3, r3, #1
 800da78:	e7ee      	b.n	800da58 <__lshift+0x1c>
 800da7a:	2300      	movs	r3, #0
 800da7c:	f100 0114 	add.w	r1, r0, #20
 800da80:	f100 0210 	add.w	r2, r0, #16
 800da84:	4618      	mov	r0, r3
 800da86:	4553      	cmp	r3, sl
 800da88:	db37      	blt.n	800dafa <__lshift+0xbe>
 800da8a:	6920      	ldr	r0, [r4, #16]
 800da8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800da90:	f104 0314 	add.w	r3, r4, #20
 800da94:	f019 091f 	ands.w	r9, r9, #31
 800da98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800da9c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800daa0:	d02f      	beq.n	800db02 <__lshift+0xc6>
 800daa2:	f1c9 0e20 	rsb	lr, r9, #32
 800daa6:	468a      	mov	sl, r1
 800daa8:	f04f 0c00 	mov.w	ip, #0
 800daac:	681a      	ldr	r2, [r3, #0]
 800daae:	fa02 f209 	lsl.w	r2, r2, r9
 800dab2:	ea42 020c 	orr.w	r2, r2, ip
 800dab6:	f84a 2b04 	str.w	r2, [sl], #4
 800daba:	f853 2b04 	ldr.w	r2, [r3], #4
 800dabe:	4298      	cmp	r0, r3
 800dac0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800dac4:	d8f2      	bhi.n	800daac <__lshift+0x70>
 800dac6:	1b03      	subs	r3, r0, r4
 800dac8:	3b15      	subs	r3, #21
 800daca:	f023 0303 	bic.w	r3, r3, #3
 800dace:	3304      	adds	r3, #4
 800dad0:	f104 0215 	add.w	r2, r4, #21
 800dad4:	4290      	cmp	r0, r2
 800dad6:	bf38      	it	cc
 800dad8:	2304      	movcc	r3, #4
 800dada:	f841 c003 	str.w	ip, [r1, r3]
 800dade:	f1bc 0f00 	cmp.w	ip, #0
 800dae2:	d001      	beq.n	800dae8 <__lshift+0xac>
 800dae4:	f108 0602 	add.w	r6, r8, #2
 800dae8:	3e01      	subs	r6, #1
 800daea:	4638      	mov	r0, r7
 800daec:	612e      	str	r6, [r5, #16]
 800daee:	4621      	mov	r1, r4
 800daf0:	f7ff fd88 	bl	800d604 <_Bfree>
 800daf4:	4628      	mov	r0, r5
 800daf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dafa:	f842 0f04 	str.w	r0, [r2, #4]!
 800dafe:	3301      	adds	r3, #1
 800db00:	e7c1      	b.n	800da86 <__lshift+0x4a>
 800db02:	3904      	subs	r1, #4
 800db04:	f853 2b04 	ldr.w	r2, [r3], #4
 800db08:	f841 2f04 	str.w	r2, [r1, #4]!
 800db0c:	4298      	cmp	r0, r3
 800db0e:	d8f9      	bhi.n	800db04 <__lshift+0xc8>
 800db10:	e7ea      	b.n	800dae8 <__lshift+0xac>
 800db12:	bf00      	nop
 800db14:	0800f5a8 	.word	0x0800f5a8
 800db18:	0800f634 	.word	0x0800f634

0800db1c <__mcmp>:
 800db1c:	b530      	push	{r4, r5, lr}
 800db1e:	6902      	ldr	r2, [r0, #16]
 800db20:	690c      	ldr	r4, [r1, #16]
 800db22:	1b12      	subs	r2, r2, r4
 800db24:	d10e      	bne.n	800db44 <__mcmp+0x28>
 800db26:	f100 0314 	add.w	r3, r0, #20
 800db2a:	3114      	adds	r1, #20
 800db2c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800db30:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800db34:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800db38:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800db3c:	42a5      	cmp	r5, r4
 800db3e:	d003      	beq.n	800db48 <__mcmp+0x2c>
 800db40:	d305      	bcc.n	800db4e <__mcmp+0x32>
 800db42:	2201      	movs	r2, #1
 800db44:	4610      	mov	r0, r2
 800db46:	bd30      	pop	{r4, r5, pc}
 800db48:	4283      	cmp	r3, r0
 800db4a:	d3f3      	bcc.n	800db34 <__mcmp+0x18>
 800db4c:	e7fa      	b.n	800db44 <__mcmp+0x28>
 800db4e:	f04f 32ff 	mov.w	r2, #4294967295
 800db52:	e7f7      	b.n	800db44 <__mcmp+0x28>

0800db54 <__mdiff>:
 800db54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db58:	460c      	mov	r4, r1
 800db5a:	4606      	mov	r6, r0
 800db5c:	4611      	mov	r1, r2
 800db5e:	4620      	mov	r0, r4
 800db60:	4690      	mov	r8, r2
 800db62:	f7ff ffdb 	bl	800db1c <__mcmp>
 800db66:	1e05      	subs	r5, r0, #0
 800db68:	d110      	bne.n	800db8c <__mdiff+0x38>
 800db6a:	4629      	mov	r1, r5
 800db6c:	4630      	mov	r0, r6
 800db6e:	f7ff fd09 	bl	800d584 <_Balloc>
 800db72:	b930      	cbnz	r0, 800db82 <__mdiff+0x2e>
 800db74:	4b3a      	ldr	r3, [pc, #232]	; (800dc60 <__mdiff+0x10c>)
 800db76:	4602      	mov	r2, r0
 800db78:	f240 2132 	movw	r1, #562	; 0x232
 800db7c:	4839      	ldr	r0, [pc, #228]	; (800dc64 <__mdiff+0x110>)
 800db7e:	f000 fc51 	bl	800e424 <__assert_func>
 800db82:	2301      	movs	r3, #1
 800db84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800db88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db8c:	bfa4      	itt	ge
 800db8e:	4643      	movge	r3, r8
 800db90:	46a0      	movge	r8, r4
 800db92:	4630      	mov	r0, r6
 800db94:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800db98:	bfa6      	itte	ge
 800db9a:	461c      	movge	r4, r3
 800db9c:	2500      	movge	r5, #0
 800db9e:	2501      	movlt	r5, #1
 800dba0:	f7ff fcf0 	bl	800d584 <_Balloc>
 800dba4:	b920      	cbnz	r0, 800dbb0 <__mdiff+0x5c>
 800dba6:	4b2e      	ldr	r3, [pc, #184]	; (800dc60 <__mdiff+0x10c>)
 800dba8:	4602      	mov	r2, r0
 800dbaa:	f44f 7110 	mov.w	r1, #576	; 0x240
 800dbae:	e7e5      	b.n	800db7c <__mdiff+0x28>
 800dbb0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dbb4:	6926      	ldr	r6, [r4, #16]
 800dbb6:	60c5      	str	r5, [r0, #12]
 800dbb8:	f104 0914 	add.w	r9, r4, #20
 800dbbc:	f108 0514 	add.w	r5, r8, #20
 800dbc0:	f100 0e14 	add.w	lr, r0, #20
 800dbc4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800dbc8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800dbcc:	f108 0210 	add.w	r2, r8, #16
 800dbd0:	46f2      	mov	sl, lr
 800dbd2:	2100      	movs	r1, #0
 800dbd4:	f859 3b04 	ldr.w	r3, [r9], #4
 800dbd8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dbdc:	fa1f f883 	uxth.w	r8, r3
 800dbe0:	fa11 f18b 	uxtah	r1, r1, fp
 800dbe4:	0c1b      	lsrs	r3, r3, #16
 800dbe6:	eba1 0808 	sub.w	r8, r1, r8
 800dbea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dbee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dbf2:	fa1f f888 	uxth.w	r8, r8
 800dbf6:	1419      	asrs	r1, r3, #16
 800dbf8:	454e      	cmp	r6, r9
 800dbfa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dbfe:	f84a 3b04 	str.w	r3, [sl], #4
 800dc02:	d8e7      	bhi.n	800dbd4 <__mdiff+0x80>
 800dc04:	1b33      	subs	r3, r6, r4
 800dc06:	3b15      	subs	r3, #21
 800dc08:	f023 0303 	bic.w	r3, r3, #3
 800dc0c:	3304      	adds	r3, #4
 800dc0e:	3415      	adds	r4, #21
 800dc10:	42a6      	cmp	r6, r4
 800dc12:	bf38      	it	cc
 800dc14:	2304      	movcc	r3, #4
 800dc16:	441d      	add	r5, r3
 800dc18:	4473      	add	r3, lr
 800dc1a:	469e      	mov	lr, r3
 800dc1c:	462e      	mov	r6, r5
 800dc1e:	4566      	cmp	r6, ip
 800dc20:	d30e      	bcc.n	800dc40 <__mdiff+0xec>
 800dc22:	f10c 0203 	add.w	r2, ip, #3
 800dc26:	1b52      	subs	r2, r2, r5
 800dc28:	f022 0203 	bic.w	r2, r2, #3
 800dc2c:	3d03      	subs	r5, #3
 800dc2e:	45ac      	cmp	ip, r5
 800dc30:	bf38      	it	cc
 800dc32:	2200      	movcc	r2, #0
 800dc34:	441a      	add	r2, r3
 800dc36:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800dc3a:	b17b      	cbz	r3, 800dc5c <__mdiff+0x108>
 800dc3c:	6107      	str	r7, [r0, #16]
 800dc3e:	e7a3      	b.n	800db88 <__mdiff+0x34>
 800dc40:	f856 8b04 	ldr.w	r8, [r6], #4
 800dc44:	fa11 f288 	uxtah	r2, r1, r8
 800dc48:	1414      	asrs	r4, r2, #16
 800dc4a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800dc4e:	b292      	uxth	r2, r2
 800dc50:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800dc54:	f84e 2b04 	str.w	r2, [lr], #4
 800dc58:	1421      	asrs	r1, r4, #16
 800dc5a:	e7e0      	b.n	800dc1e <__mdiff+0xca>
 800dc5c:	3f01      	subs	r7, #1
 800dc5e:	e7ea      	b.n	800dc36 <__mdiff+0xe2>
 800dc60:	0800f5a8 	.word	0x0800f5a8
 800dc64:	0800f634 	.word	0x0800f634

0800dc68 <__ulp>:
 800dc68:	b082      	sub	sp, #8
 800dc6a:	ed8d 0b00 	vstr	d0, [sp]
 800dc6e:	9b01      	ldr	r3, [sp, #4]
 800dc70:	4912      	ldr	r1, [pc, #72]	; (800dcbc <__ulp+0x54>)
 800dc72:	4019      	ands	r1, r3
 800dc74:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800dc78:	2900      	cmp	r1, #0
 800dc7a:	dd05      	ble.n	800dc88 <__ulp+0x20>
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	460b      	mov	r3, r1
 800dc80:	ec43 2b10 	vmov	d0, r2, r3
 800dc84:	b002      	add	sp, #8
 800dc86:	4770      	bx	lr
 800dc88:	4249      	negs	r1, r1
 800dc8a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800dc8e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800dc92:	f04f 0200 	mov.w	r2, #0
 800dc96:	f04f 0300 	mov.w	r3, #0
 800dc9a:	da04      	bge.n	800dca6 <__ulp+0x3e>
 800dc9c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800dca0:	fa41 f300 	asr.w	r3, r1, r0
 800dca4:	e7ec      	b.n	800dc80 <__ulp+0x18>
 800dca6:	f1a0 0114 	sub.w	r1, r0, #20
 800dcaa:	291e      	cmp	r1, #30
 800dcac:	bfda      	itte	le
 800dcae:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800dcb2:	fa20 f101 	lsrle.w	r1, r0, r1
 800dcb6:	2101      	movgt	r1, #1
 800dcb8:	460a      	mov	r2, r1
 800dcba:	e7e1      	b.n	800dc80 <__ulp+0x18>
 800dcbc:	7ff00000 	.word	0x7ff00000

0800dcc0 <__b2d>:
 800dcc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcc2:	6905      	ldr	r5, [r0, #16]
 800dcc4:	f100 0714 	add.w	r7, r0, #20
 800dcc8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800dccc:	1f2e      	subs	r6, r5, #4
 800dcce:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800dcd2:	4620      	mov	r0, r4
 800dcd4:	f7ff fd48 	bl	800d768 <__hi0bits>
 800dcd8:	f1c0 0320 	rsb	r3, r0, #32
 800dcdc:	280a      	cmp	r0, #10
 800dcde:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800dd5c <__b2d+0x9c>
 800dce2:	600b      	str	r3, [r1, #0]
 800dce4:	dc14      	bgt.n	800dd10 <__b2d+0x50>
 800dce6:	f1c0 0e0b 	rsb	lr, r0, #11
 800dcea:	fa24 f10e 	lsr.w	r1, r4, lr
 800dcee:	42b7      	cmp	r7, r6
 800dcf0:	ea41 030c 	orr.w	r3, r1, ip
 800dcf4:	bf34      	ite	cc
 800dcf6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800dcfa:	2100      	movcs	r1, #0
 800dcfc:	3015      	adds	r0, #21
 800dcfe:	fa04 f000 	lsl.w	r0, r4, r0
 800dd02:	fa21 f10e 	lsr.w	r1, r1, lr
 800dd06:	ea40 0201 	orr.w	r2, r0, r1
 800dd0a:	ec43 2b10 	vmov	d0, r2, r3
 800dd0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd10:	42b7      	cmp	r7, r6
 800dd12:	bf3a      	itte	cc
 800dd14:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800dd18:	f1a5 0608 	subcc.w	r6, r5, #8
 800dd1c:	2100      	movcs	r1, #0
 800dd1e:	380b      	subs	r0, #11
 800dd20:	d017      	beq.n	800dd52 <__b2d+0x92>
 800dd22:	f1c0 0c20 	rsb	ip, r0, #32
 800dd26:	fa04 f500 	lsl.w	r5, r4, r0
 800dd2a:	42be      	cmp	r6, r7
 800dd2c:	fa21 f40c 	lsr.w	r4, r1, ip
 800dd30:	ea45 0504 	orr.w	r5, r5, r4
 800dd34:	bf8c      	ite	hi
 800dd36:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800dd3a:	2400      	movls	r4, #0
 800dd3c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800dd40:	fa01 f000 	lsl.w	r0, r1, r0
 800dd44:	fa24 f40c 	lsr.w	r4, r4, ip
 800dd48:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800dd4c:	ea40 0204 	orr.w	r2, r0, r4
 800dd50:	e7db      	b.n	800dd0a <__b2d+0x4a>
 800dd52:	ea44 030c 	orr.w	r3, r4, ip
 800dd56:	460a      	mov	r2, r1
 800dd58:	e7d7      	b.n	800dd0a <__b2d+0x4a>
 800dd5a:	bf00      	nop
 800dd5c:	3ff00000 	.word	0x3ff00000

0800dd60 <__d2b>:
 800dd60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dd64:	4689      	mov	r9, r1
 800dd66:	2101      	movs	r1, #1
 800dd68:	ec57 6b10 	vmov	r6, r7, d0
 800dd6c:	4690      	mov	r8, r2
 800dd6e:	f7ff fc09 	bl	800d584 <_Balloc>
 800dd72:	4604      	mov	r4, r0
 800dd74:	b930      	cbnz	r0, 800dd84 <__d2b+0x24>
 800dd76:	4602      	mov	r2, r0
 800dd78:	4b25      	ldr	r3, [pc, #148]	; (800de10 <__d2b+0xb0>)
 800dd7a:	4826      	ldr	r0, [pc, #152]	; (800de14 <__d2b+0xb4>)
 800dd7c:	f240 310a 	movw	r1, #778	; 0x30a
 800dd80:	f000 fb50 	bl	800e424 <__assert_func>
 800dd84:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800dd88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dd8c:	bb35      	cbnz	r5, 800dddc <__d2b+0x7c>
 800dd8e:	2e00      	cmp	r6, #0
 800dd90:	9301      	str	r3, [sp, #4]
 800dd92:	d028      	beq.n	800dde6 <__d2b+0x86>
 800dd94:	4668      	mov	r0, sp
 800dd96:	9600      	str	r6, [sp, #0]
 800dd98:	f7ff fd06 	bl	800d7a8 <__lo0bits>
 800dd9c:	9900      	ldr	r1, [sp, #0]
 800dd9e:	b300      	cbz	r0, 800dde2 <__d2b+0x82>
 800dda0:	9a01      	ldr	r2, [sp, #4]
 800dda2:	f1c0 0320 	rsb	r3, r0, #32
 800dda6:	fa02 f303 	lsl.w	r3, r2, r3
 800ddaa:	430b      	orrs	r3, r1
 800ddac:	40c2      	lsrs	r2, r0
 800ddae:	6163      	str	r3, [r4, #20]
 800ddb0:	9201      	str	r2, [sp, #4]
 800ddb2:	9b01      	ldr	r3, [sp, #4]
 800ddb4:	61a3      	str	r3, [r4, #24]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	bf14      	ite	ne
 800ddba:	2202      	movne	r2, #2
 800ddbc:	2201      	moveq	r2, #1
 800ddbe:	6122      	str	r2, [r4, #16]
 800ddc0:	b1d5      	cbz	r5, 800ddf8 <__d2b+0x98>
 800ddc2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ddc6:	4405      	add	r5, r0
 800ddc8:	f8c9 5000 	str.w	r5, [r9]
 800ddcc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ddd0:	f8c8 0000 	str.w	r0, [r8]
 800ddd4:	4620      	mov	r0, r4
 800ddd6:	b003      	add	sp, #12
 800ddd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dddc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dde0:	e7d5      	b.n	800dd8e <__d2b+0x2e>
 800dde2:	6161      	str	r1, [r4, #20]
 800dde4:	e7e5      	b.n	800ddb2 <__d2b+0x52>
 800dde6:	a801      	add	r0, sp, #4
 800dde8:	f7ff fcde 	bl	800d7a8 <__lo0bits>
 800ddec:	9b01      	ldr	r3, [sp, #4]
 800ddee:	6163      	str	r3, [r4, #20]
 800ddf0:	2201      	movs	r2, #1
 800ddf2:	6122      	str	r2, [r4, #16]
 800ddf4:	3020      	adds	r0, #32
 800ddf6:	e7e3      	b.n	800ddc0 <__d2b+0x60>
 800ddf8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ddfc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800de00:	f8c9 0000 	str.w	r0, [r9]
 800de04:	6918      	ldr	r0, [r3, #16]
 800de06:	f7ff fcaf 	bl	800d768 <__hi0bits>
 800de0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800de0e:	e7df      	b.n	800ddd0 <__d2b+0x70>
 800de10:	0800f5a8 	.word	0x0800f5a8
 800de14:	0800f634 	.word	0x0800f634

0800de18 <__ratio>:
 800de18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de1c:	4688      	mov	r8, r1
 800de1e:	4669      	mov	r1, sp
 800de20:	4681      	mov	r9, r0
 800de22:	f7ff ff4d 	bl	800dcc0 <__b2d>
 800de26:	a901      	add	r1, sp, #4
 800de28:	4640      	mov	r0, r8
 800de2a:	ec55 4b10 	vmov	r4, r5, d0
 800de2e:	f7ff ff47 	bl	800dcc0 <__b2d>
 800de32:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800de36:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800de3a:	eba3 0c02 	sub.w	ip, r3, r2
 800de3e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800de42:	1a9b      	subs	r3, r3, r2
 800de44:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800de48:	ec51 0b10 	vmov	r0, r1, d0
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	bfd6      	itet	le
 800de50:	460a      	movle	r2, r1
 800de52:	462a      	movgt	r2, r5
 800de54:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800de58:	468b      	mov	fp, r1
 800de5a:	462f      	mov	r7, r5
 800de5c:	bfd4      	ite	le
 800de5e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800de62:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800de66:	4620      	mov	r0, r4
 800de68:	ee10 2a10 	vmov	r2, s0
 800de6c:	465b      	mov	r3, fp
 800de6e:	4639      	mov	r1, r7
 800de70:	f7f2 fd04 	bl	800087c <__aeabi_ddiv>
 800de74:	ec41 0b10 	vmov	d0, r0, r1
 800de78:	b003      	add	sp, #12
 800de7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800de7e <__copybits>:
 800de7e:	3901      	subs	r1, #1
 800de80:	b570      	push	{r4, r5, r6, lr}
 800de82:	1149      	asrs	r1, r1, #5
 800de84:	6914      	ldr	r4, [r2, #16]
 800de86:	3101      	adds	r1, #1
 800de88:	f102 0314 	add.w	r3, r2, #20
 800de8c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800de90:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800de94:	1f05      	subs	r5, r0, #4
 800de96:	42a3      	cmp	r3, r4
 800de98:	d30c      	bcc.n	800deb4 <__copybits+0x36>
 800de9a:	1aa3      	subs	r3, r4, r2
 800de9c:	3b11      	subs	r3, #17
 800de9e:	f023 0303 	bic.w	r3, r3, #3
 800dea2:	3211      	adds	r2, #17
 800dea4:	42a2      	cmp	r2, r4
 800dea6:	bf88      	it	hi
 800dea8:	2300      	movhi	r3, #0
 800deaa:	4418      	add	r0, r3
 800deac:	2300      	movs	r3, #0
 800deae:	4288      	cmp	r0, r1
 800deb0:	d305      	bcc.n	800debe <__copybits+0x40>
 800deb2:	bd70      	pop	{r4, r5, r6, pc}
 800deb4:	f853 6b04 	ldr.w	r6, [r3], #4
 800deb8:	f845 6f04 	str.w	r6, [r5, #4]!
 800debc:	e7eb      	b.n	800de96 <__copybits+0x18>
 800debe:	f840 3b04 	str.w	r3, [r0], #4
 800dec2:	e7f4      	b.n	800deae <__copybits+0x30>

0800dec4 <__any_on>:
 800dec4:	f100 0214 	add.w	r2, r0, #20
 800dec8:	6900      	ldr	r0, [r0, #16]
 800deca:	114b      	asrs	r3, r1, #5
 800decc:	4298      	cmp	r0, r3
 800dece:	b510      	push	{r4, lr}
 800ded0:	db11      	blt.n	800def6 <__any_on+0x32>
 800ded2:	dd0a      	ble.n	800deea <__any_on+0x26>
 800ded4:	f011 011f 	ands.w	r1, r1, #31
 800ded8:	d007      	beq.n	800deea <__any_on+0x26>
 800deda:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800dede:	fa24 f001 	lsr.w	r0, r4, r1
 800dee2:	fa00 f101 	lsl.w	r1, r0, r1
 800dee6:	428c      	cmp	r4, r1
 800dee8:	d10b      	bne.n	800df02 <__any_on+0x3e>
 800deea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800deee:	4293      	cmp	r3, r2
 800def0:	d803      	bhi.n	800defa <__any_on+0x36>
 800def2:	2000      	movs	r0, #0
 800def4:	bd10      	pop	{r4, pc}
 800def6:	4603      	mov	r3, r0
 800def8:	e7f7      	b.n	800deea <__any_on+0x26>
 800defa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800defe:	2900      	cmp	r1, #0
 800df00:	d0f5      	beq.n	800deee <__any_on+0x2a>
 800df02:	2001      	movs	r0, #1
 800df04:	e7f6      	b.n	800def4 <__any_on+0x30>

0800df06 <_calloc_r>:
 800df06:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800df08:	fba1 2402 	umull	r2, r4, r1, r2
 800df0c:	b94c      	cbnz	r4, 800df22 <_calloc_r+0x1c>
 800df0e:	4611      	mov	r1, r2
 800df10:	9201      	str	r2, [sp, #4]
 800df12:	f000 f87b 	bl	800e00c <_malloc_r>
 800df16:	9a01      	ldr	r2, [sp, #4]
 800df18:	4605      	mov	r5, r0
 800df1a:	b930      	cbnz	r0, 800df2a <_calloc_r+0x24>
 800df1c:	4628      	mov	r0, r5
 800df1e:	b003      	add	sp, #12
 800df20:	bd30      	pop	{r4, r5, pc}
 800df22:	220c      	movs	r2, #12
 800df24:	6002      	str	r2, [r0, #0]
 800df26:	2500      	movs	r5, #0
 800df28:	e7f8      	b.n	800df1c <_calloc_r+0x16>
 800df2a:	4621      	mov	r1, r4
 800df2c:	f7fc fbc0 	bl	800a6b0 <memset>
 800df30:	e7f4      	b.n	800df1c <_calloc_r+0x16>
	...

0800df34 <_free_r>:
 800df34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800df36:	2900      	cmp	r1, #0
 800df38:	d044      	beq.n	800dfc4 <_free_r+0x90>
 800df3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df3e:	9001      	str	r0, [sp, #4]
 800df40:	2b00      	cmp	r3, #0
 800df42:	f1a1 0404 	sub.w	r4, r1, #4
 800df46:	bfb8      	it	lt
 800df48:	18e4      	addlt	r4, r4, r3
 800df4a:	f000 fab5 	bl	800e4b8 <__malloc_lock>
 800df4e:	4a1e      	ldr	r2, [pc, #120]	; (800dfc8 <_free_r+0x94>)
 800df50:	9801      	ldr	r0, [sp, #4]
 800df52:	6813      	ldr	r3, [r2, #0]
 800df54:	b933      	cbnz	r3, 800df64 <_free_r+0x30>
 800df56:	6063      	str	r3, [r4, #4]
 800df58:	6014      	str	r4, [r2, #0]
 800df5a:	b003      	add	sp, #12
 800df5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800df60:	f000 bab0 	b.w	800e4c4 <__malloc_unlock>
 800df64:	42a3      	cmp	r3, r4
 800df66:	d908      	bls.n	800df7a <_free_r+0x46>
 800df68:	6825      	ldr	r5, [r4, #0]
 800df6a:	1961      	adds	r1, r4, r5
 800df6c:	428b      	cmp	r3, r1
 800df6e:	bf01      	itttt	eq
 800df70:	6819      	ldreq	r1, [r3, #0]
 800df72:	685b      	ldreq	r3, [r3, #4]
 800df74:	1949      	addeq	r1, r1, r5
 800df76:	6021      	streq	r1, [r4, #0]
 800df78:	e7ed      	b.n	800df56 <_free_r+0x22>
 800df7a:	461a      	mov	r2, r3
 800df7c:	685b      	ldr	r3, [r3, #4]
 800df7e:	b10b      	cbz	r3, 800df84 <_free_r+0x50>
 800df80:	42a3      	cmp	r3, r4
 800df82:	d9fa      	bls.n	800df7a <_free_r+0x46>
 800df84:	6811      	ldr	r1, [r2, #0]
 800df86:	1855      	adds	r5, r2, r1
 800df88:	42a5      	cmp	r5, r4
 800df8a:	d10b      	bne.n	800dfa4 <_free_r+0x70>
 800df8c:	6824      	ldr	r4, [r4, #0]
 800df8e:	4421      	add	r1, r4
 800df90:	1854      	adds	r4, r2, r1
 800df92:	42a3      	cmp	r3, r4
 800df94:	6011      	str	r1, [r2, #0]
 800df96:	d1e0      	bne.n	800df5a <_free_r+0x26>
 800df98:	681c      	ldr	r4, [r3, #0]
 800df9a:	685b      	ldr	r3, [r3, #4]
 800df9c:	6053      	str	r3, [r2, #4]
 800df9e:	4421      	add	r1, r4
 800dfa0:	6011      	str	r1, [r2, #0]
 800dfa2:	e7da      	b.n	800df5a <_free_r+0x26>
 800dfa4:	d902      	bls.n	800dfac <_free_r+0x78>
 800dfa6:	230c      	movs	r3, #12
 800dfa8:	6003      	str	r3, [r0, #0]
 800dfaa:	e7d6      	b.n	800df5a <_free_r+0x26>
 800dfac:	6825      	ldr	r5, [r4, #0]
 800dfae:	1961      	adds	r1, r4, r5
 800dfb0:	428b      	cmp	r3, r1
 800dfb2:	bf04      	itt	eq
 800dfb4:	6819      	ldreq	r1, [r3, #0]
 800dfb6:	685b      	ldreq	r3, [r3, #4]
 800dfb8:	6063      	str	r3, [r4, #4]
 800dfba:	bf04      	itt	eq
 800dfbc:	1949      	addeq	r1, r1, r5
 800dfbe:	6021      	streq	r1, [r4, #0]
 800dfc0:	6054      	str	r4, [r2, #4]
 800dfc2:	e7ca      	b.n	800df5a <_free_r+0x26>
 800dfc4:	b003      	add	sp, #12
 800dfc6:	bd30      	pop	{r4, r5, pc}
 800dfc8:	2000460c 	.word	0x2000460c

0800dfcc <sbrk_aligned>:
 800dfcc:	b570      	push	{r4, r5, r6, lr}
 800dfce:	4e0e      	ldr	r6, [pc, #56]	; (800e008 <sbrk_aligned+0x3c>)
 800dfd0:	460c      	mov	r4, r1
 800dfd2:	6831      	ldr	r1, [r6, #0]
 800dfd4:	4605      	mov	r5, r0
 800dfd6:	b911      	cbnz	r1, 800dfde <sbrk_aligned+0x12>
 800dfd8:	f000 f9f2 	bl	800e3c0 <_sbrk_r>
 800dfdc:	6030      	str	r0, [r6, #0]
 800dfde:	4621      	mov	r1, r4
 800dfe0:	4628      	mov	r0, r5
 800dfe2:	f000 f9ed 	bl	800e3c0 <_sbrk_r>
 800dfe6:	1c43      	adds	r3, r0, #1
 800dfe8:	d00a      	beq.n	800e000 <sbrk_aligned+0x34>
 800dfea:	1cc4      	adds	r4, r0, #3
 800dfec:	f024 0403 	bic.w	r4, r4, #3
 800dff0:	42a0      	cmp	r0, r4
 800dff2:	d007      	beq.n	800e004 <sbrk_aligned+0x38>
 800dff4:	1a21      	subs	r1, r4, r0
 800dff6:	4628      	mov	r0, r5
 800dff8:	f000 f9e2 	bl	800e3c0 <_sbrk_r>
 800dffc:	3001      	adds	r0, #1
 800dffe:	d101      	bne.n	800e004 <sbrk_aligned+0x38>
 800e000:	f04f 34ff 	mov.w	r4, #4294967295
 800e004:	4620      	mov	r0, r4
 800e006:	bd70      	pop	{r4, r5, r6, pc}
 800e008:	20004610 	.word	0x20004610

0800e00c <_malloc_r>:
 800e00c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e010:	1ccd      	adds	r5, r1, #3
 800e012:	f025 0503 	bic.w	r5, r5, #3
 800e016:	3508      	adds	r5, #8
 800e018:	2d0c      	cmp	r5, #12
 800e01a:	bf38      	it	cc
 800e01c:	250c      	movcc	r5, #12
 800e01e:	2d00      	cmp	r5, #0
 800e020:	4607      	mov	r7, r0
 800e022:	db01      	blt.n	800e028 <_malloc_r+0x1c>
 800e024:	42a9      	cmp	r1, r5
 800e026:	d905      	bls.n	800e034 <_malloc_r+0x28>
 800e028:	230c      	movs	r3, #12
 800e02a:	603b      	str	r3, [r7, #0]
 800e02c:	2600      	movs	r6, #0
 800e02e:	4630      	mov	r0, r6
 800e030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e034:	4e2e      	ldr	r6, [pc, #184]	; (800e0f0 <_malloc_r+0xe4>)
 800e036:	f000 fa3f 	bl	800e4b8 <__malloc_lock>
 800e03a:	6833      	ldr	r3, [r6, #0]
 800e03c:	461c      	mov	r4, r3
 800e03e:	bb34      	cbnz	r4, 800e08e <_malloc_r+0x82>
 800e040:	4629      	mov	r1, r5
 800e042:	4638      	mov	r0, r7
 800e044:	f7ff ffc2 	bl	800dfcc <sbrk_aligned>
 800e048:	1c43      	adds	r3, r0, #1
 800e04a:	4604      	mov	r4, r0
 800e04c:	d14d      	bne.n	800e0ea <_malloc_r+0xde>
 800e04e:	6834      	ldr	r4, [r6, #0]
 800e050:	4626      	mov	r6, r4
 800e052:	2e00      	cmp	r6, #0
 800e054:	d140      	bne.n	800e0d8 <_malloc_r+0xcc>
 800e056:	6823      	ldr	r3, [r4, #0]
 800e058:	4631      	mov	r1, r6
 800e05a:	4638      	mov	r0, r7
 800e05c:	eb04 0803 	add.w	r8, r4, r3
 800e060:	f000 f9ae 	bl	800e3c0 <_sbrk_r>
 800e064:	4580      	cmp	r8, r0
 800e066:	d13a      	bne.n	800e0de <_malloc_r+0xd2>
 800e068:	6821      	ldr	r1, [r4, #0]
 800e06a:	3503      	adds	r5, #3
 800e06c:	1a6d      	subs	r5, r5, r1
 800e06e:	f025 0503 	bic.w	r5, r5, #3
 800e072:	3508      	adds	r5, #8
 800e074:	2d0c      	cmp	r5, #12
 800e076:	bf38      	it	cc
 800e078:	250c      	movcc	r5, #12
 800e07a:	4629      	mov	r1, r5
 800e07c:	4638      	mov	r0, r7
 800e07e:	f7ff ffa5 	bl	800dfcc <sbrk_aligned>
 800e082:	3001      	adds	r0, #1
 800e084:	d02b      	beq.n	800e0de <_malloc_r+0xd2>
 800e086:	6823      	ldr	r3, [r4, #0]
 800e088:	442b      	add	r3, r5
 800e08a:	6023      	str	r3, [r4, #0]
 800e08c:	e00e      	b.n	800e0ac <_malloc_r+0xa0>
 800e08e:	6822      	ldr	r2, [r4, #0]
 800e090:	1b52      	subs	r2, r2, r5
 800e092:	d41e      	bmi.n	800e0d2 <_malloc_r+0xc6>
 800e094:	2a0b      	cmp	r2, #11
 800e096:	d916      	bls.n	800e0c6 <_malloc_r+0xba>
 800e098:	1961      	adds	r1, r4, r5
 800e09a:	42a3      	cmp	r3, r4
 800e09c:	6025      	str	r5, [r4, #0]
 800e09e:	bf18      	it	ne
 800e0a0:	6059      	strne	r1, [r3, #4]
 800e0a2:	6863      	ldr	r3, [r4, #4]
 800e0a4:	bf08      	it	eq
 800e0a6:	6031      	streq	r1, [r6, #0]
 800e0a8:	5162      	str	r2, [r4, r5]
 800e0aa:	604b      	str	r3, [r1, #4]
 800e0ac:	4638      	mov	r0, r7
 800e0ae:	f104 060b 	add.w	r6, r4, #11
 800e0b2:	f000 fa07 	bl	800e4c4 <__malloc_unlock>
 800e0b6:	f026 0607 	bic.w	r6, r6, #7
 800e0ba:	1d23      	adds	r3, r4, #4
 800e0bc:	1af2      	subs	r2, r6, r3
 800e0be:	d0b6      	beq.n	800e02e <_malloc_r+0x22>
 800e0c0:	1b9b      	subs	r3, r3, r6
 800e0c2:	50a3      	str	r3, [r4, r2]
 800e0c4:	e7b3      	b.n	800e02e <_malloc_r+0x22>
 800e0c6:	6862      	ldr	r2, [r4, #4]
 800e0c8:	42a3      	cmp	r3, r4
 800e0ca:	bf0c      	ite	eq
 800e0cc:	6032      	streq	r2, [r6, #0]
 800e0ce:	605a      	strne	r2, [r3, #4]
 800e0d0:	e7ec      	b.n	800e0ac <_malloc_r+0xa0>
 800e0d2:	4623      	mov	r3, r4
 800e0d4:	6864      	ldr	r4, [r4, #4]
 800e0d6:	e7b2      	b.n	800e03e <_malloc_r+0x32>
 800e0d8:	4634      	mov	r4, r6
 800e0da:	6876      	ldr	r6, [r6, #4]
 800e0dc:	e7b9      	b.n	800e052 <_malloc_r+0x46>
 800e0de:	230c      	movs	r3, #12
 800e0e0:	603b      	str	r3, [r7, #0]
 800e0e2:	4638      	mov	r0, r7
 800e0e4:	f000 f9ee 	bl	800e4c4 <__malloc_unlock>
 800e0e8:	e7a1      	b.n	800e02e <_malloc_r+0x22>
 800e0ea:	6025      	str	r5, [r4, #0]
 800e0ec:	e7de      	b.n	800e0ac <_malloc_r+0xa0>
 800e0ee:	bf00      	nop
 800e0f0:	2000460c 	.word	0x2000460c

0800e0f4 <__ssputs_r>:
 800e0f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0f8:	688e      	ldr	r6, [r1, #8]
 800e0fa:	429e      	cmp	r6, r3
 800e0fc:	4682      	mov	sl, r0
 800e0fe:	460c      	mov	r4, r1
 800e100:	4690      	mov	r8, r2
 800e102:	461f      	mov	r7, r3
 800e104:	d838      	bhi.n	800e178 <__ssputs_r+0x84>
 800e106:	898a      	ldrh	r2, [r1, #12]
 800e108:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e10c:	d032      	beq.n	800e174 <__ssputs_r+0x80>
 800e10e:	6825      	ldr	r5, [r4, #0]
 800e110:	6909      	ldr	r1, [r1, #16]
 800e112:	eba5 0901 	sub.w	r9, r5, r1
 800e116:	6965      	ldr	r5, [r4, #20]
 800e118:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e11c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e120:	3301      	adds	r3, #1
 800e122:	444b      	add	r3, r9
 800e124:	106d      	asrs	r5, r5, #1
 800e126:	429d      	cmp	r5, r3
 800e128:	bf38      	it	cc
 800e12a:	461d      	movcc	r5, r3
 800e12c:	0553      	lsls	r3, r2, #21
 800e12e:	d531      	bpl.n	800e194 <__ssputs_r+0xa0>
 800e130:	4629      	mov	r1, r5
 800e132:	f7ff ff6b 	bl	800e00c <_malloc_r>
 800e136:	4606      	mov	r6, r0
 800e138:	b950      	cbnz	r0, 800e150 <__ssputs_r+0x5c>
 800e13a:	230c      	movs	r3, #12
 800e13c:	f8ca 3000 	str.w	r3, [sl]
 800e140:	89a3      	ldrh	r3, [r4, #12]
 800e142:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e146:	81a3      	strh	r3, [r4, #12]
 800e148:	f04f 30ff 	mov.w	r0, #4294967295
 800e14c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e150:	6921      	ldr	r1, [r4, #16]
 800e152:	464a      	mov	r2, r9
 800e154:	f7ff fa08 	bl	800d568 <memcpy>
 800e158:	89a3      	ldrh	r3, [r4, #12]
 800e15a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e15e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e162:	81a3      	strh	r3, [r4, #12]
 800e164:	6126      	str	r6, [r4, #16]
 800e166:	6165      	str	r5, [r4, #20]
 800e168:	444e      	add	r6, r9
 800e16a:	eba5 0509 	sub.w	r5, r5, r9
 800e16e:	6026      	str	r6, [r4, #0]
 800e170:	60a5      	str	r5, [r4, #8]
 800e172:	463e      	mov	r6, r7
 800e174:	42be      	cmp	r6, r7
 800e176:	d900      	bls.n	800e17a <__ssputs_r+0x86>
 800e178:	463e      	mov	r6, r7
 800e17a:	6820      	ldr	r0, [r4, #0]
 800e17c:	4632      	mov	r2, r6
 800e17e:	4641      	mov	r1, r8
 800e180:	f000 f980 	bl	800e484 <memmove>
 800e184:	68a3      	ldr	r3, [r4, #8]
 800e186:	1b9b      	subs	r3, r3, r6
 800e188:	60a3      	str	r3, [r4, #8]
 800e18a:	6823      	ldr	r3, [r4, #0]
 800e18c:	4433      	add	r3, r6
 800e18e:	6023      	str	r3, [r4, #0]
 800e190:	2000      	movs	r0, #0
 800e192:	e7db      	b.n	800e14c <__ssputs_r+0x58>
 800e194:	462a      	mov	r2, r5
 800e196:	f000 f99b 	bl	800e4d0 <_realloc_r>
 800e19a:	4606      	mov	r6, r0
 800e19c:	2800      	cmp	r0, #0
 800e19e:	d1e1      	bne.n	800e164 <__ssputs_r+0x70>
 800e1a0:	6921      	ldr	r1, [r4, #16]
 800e1a2:	4650      	mov	r0, sl
 800e1a4:	f7ff fec6 	bl	800df34 <_free_r>
 800e1a8:	e7c7      	b.n	800e13a <__ssputs_r+0x46>
	...

0800e1ac <_svfiprintf_r>:
 800e1ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1b0:	4698      	mov	r8, r3
 800e1b2:	898b      	ldrh	r3, [r1, #12]
 800e1b4:	061b      	lsls	r3, r3, #24
 800e1b6:	b09d      	sub	sp, #116	; 0x74
 800e1b8:	4607      	mov	r7, r0
 800e1ba:	460d      	mov	r5, r1
 800e1bc:	4614      	mov	r4, r2
 800e1be:	d50e      	bpl.n	800e1de <_svfiprintf_r+0x32>
 800e1c0:	690b      	ldr	r3, [r1, #16]
 800e1c2:	b963      	cbnz	r3, 800e1de <_svfiprintf_r+0x32>
 800e1c4:	2140      	movs	r1, #64	; 0x40
 800e1c6:	f7ff ff21 	bl	800e00c <_malloc_r>
 800e1ca:	6028      	str	r0, [r5, #0]
 800e1cc:	6128      	str	r0, [r5, #16]
 800e1ce:	b920      	cbnz	r0, 800e1da <_svfiprintf_r+0x2e>
 800e1d0:	230c      	movs	r3, #12
 800e1d2:	603b      	str	r3, [r7, #0]
 800e1d4:	f04f 30ff 	mov.w	r0, #4294967295
 800e1d8:	e0d1      	b.n	800e37e <_svfiprintf_r+0x1d2>
 800e1da:	2340      	movs	r3, #64	; 0x40
 800e1dc:	616b      	str	r3, [r5, #20]
 800e1de:	2300      	movs	r3, #0
 800e1e0:	9309      	str	r3, [sp, #36]	; 0x24
 800e1e2:	2320      	movs	r3, #32
 800e1e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e1e8:	f8cd 800c 	str.w	r8, [sp, #12]
 800e1ec:	2330      	movs	r3, #48	; 0x30
 800e1ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e398 <_svfiprintf_r+0x1ec>
 800e1f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e1f6:	f04f 0901 	mov.w	r9, #1
 800e1fa:	4623      	mov	r3, r4
 800e1fc:	469a      	mov	sl, r3
 800e1fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e202:	b10a      	cbz	r2, 800e208 <_svfiprintf_r+0x5c>
 800e204:	2a25      	cmp	r2, #37	; 0x25
 800e206:	d1f9      	bne.n	800e1fc <_svfiprintf_r+0x50>
 800e208:	ebba 0b04 	subs.w	fp, sl, r4
 800e20c:	d00b      	beq.n	800e226 <_svfiprintf_r+0x7a>
 800e20e:	465b      	mov	r3, fp
 800e210:	4622      	mov	r2, r4
 800e212:	4629      	mov	r1, r5
 800e214:	4638      	mov	r0, r7
 800e216:	f7ff ff6d 	bl	800e0f4 <__ssputs_r>
 800e21a:	3001      	adds	r0, #1
 800e21c:	f000 80aa 	beq.w	800e374 <_svfiprintf_r+0x1c8>
 800e220:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e222:	445a      	add	r2, fp
 800e224:	9209      	str	r2, [sp, #36]	; 0x24
 800e226:	f89a 3000 	ldrb.w	r3, [sl]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	f000 80a2 	beq.w	800e374 <_svfiprintf_r+0x1c8>
 800e230:	2300      	movs	r3, #0
 800e232:	f04f 32ff 	mov.w	r2, #4294967295
 800e236:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e23a:	f10a 0a01 	add.w	sl, sl, #1
 800e23e:	9304      	str	r3, [sp, #16]
 800e240:	9307      	str	r3, [sp, #28]
 800e242:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e246:	931a      	str	r3, [sp, #104]	; 0x68
 800e248:	4654      	mov	r4, sl
 800e24a:	2205      	movs	r2, #5
 800e24c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e250:	4851      	ldr	r0, [pc, #324]	; (800e398 <_svfiprintf_r+0x1ec>)
 800e252:	f7f1 ffdd 	bl	8000210 <memchr>
 800e256:	9a04      	ldr	r2, [sp, #16]
 800e258:	b9d8      	cbnz	r0, 800e292 <_svfiprintf_r+0xe6>
 800e25a:	06d0      	lsls	r0, r2, #27
 800e25c:	bf44      	itt	mi
 800e25e:	2320      	movmi	r3, #32
 800e260:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e264:	0711      	lsls	r1, r2, #28
 800e266:	bf44      	itt	mi
 800e268:	232b      	movmi	r3, #43	; 0x2b
 800e26a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e26e:	f89a 3000 	ldrb.w	r3, [sl]
 800e272:	2b2a      	cmp	r3, #42	; 0x2a
 800e274:	d015      	beq.n	800e2a2 <_svfiprintf_r+0xf6>
 800e276:	9a07      	ldr	r2, [sp, #28]
 800e278:	4654      	mov	r4, sl
 800e27a:	2000      	movs	r0, #0
 800e27c:	f04f 0c0a 	mov.w	ip, #10
 800e280:	4621      	mov	r1, r4
 800e282:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e286:	3b30      	subs	r3, #48	; 0x30
 800e288:	2b09      	cmp	r3, #9
 800e28a:	d94e      	bls.n	800e32a <_svfiprintf_r+0x17e>
 800e28c:	b1b0      	cbz	r0, 800e2bc <_svfiprintf_r+0x110>
 800e28e:	9207      	str	r2, [sp, #28]
 800e290:	e014      	b.n	800e2bc <_svfiprintf_r+0x110>
 800e292:	eba0 0308 	sub.w	r3, r0, r8
 800e296:	fa09 f303 	lsl.w	r3, r9, r3
 800e29a:	4313      	orrs	r3, r2
 800e29c:	9304      	str	r3, [sp, #16]
 800e29e:	46a2      	mov	sl, r4
 800e2a0:	e7d2      	b.n	800e248 <_svfiprintf_r+0x9c>
 800e2a2:	9b03      	ldr	r3, [sp, #12]
 800e2a4:	1d19      	adds	r1, r3, #4
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	9103      	str	r1, [sp, #12]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	bfbb      	ittet	lt
 800e2ae:	425b      	neglt	r3, r3
 800e2b0:	f042 0202 	orrlt.w	r2, r2, #2
 800e2b4:	9307      	strge	r3, [sp, #28]
 800e2b6:	9307      	strlt	r3, [sp, #28]
 800e2b8:	bfb8      	it	lt
 800e2ba:	9204      	strlt	r2, [sp, #16]
 800e2bc:	7823      	ldrb	r3, [r4, #0]
 800e2be:	2b2e      	cmp	r3, #46	; 0x2e
 800e2c0:	d10c      	bne.n	800e2dc <_svfiprintf_r+0x130>
 800e2c2:	7863      	ldrb	r3, [r4, #1]
 800e2c4:	2b2a      	cmp	r3, #42	; 0x2a
 800e2c6:	d135      	bne.n	800e334 <_svfiprintf_r+0x188>
 800e2c8:	9b03      	ldr	r3, [sp, #12]
 800e2ca:	1d1a      	adds	r2, r3, #4
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	9203      	str	r2, [sp, #12]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	bfb8      	it	lt
 800e2d4:	f04f 33ff 	movlt.w	r3, #4294967295
 800e2d8:	3402      	adds	r4, #2
 800e2da:	9305      	str	r3, [sp, #20]
 800e2dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e3a8 <_svfiprintf_r+0x1fc>
 800e2e0:	7821      	ldrb	r1, [r4, #0]
 800e2e2:	2203      	movs	r2, #3
 800e2e4:	4650      	mov	r0, sl
 800e2e6:	f7f1 ff93 	bl	8000210 <memchr>
 800e2ea:	b140      	cbz	r0, 800e2fe <_svfiprintf_r+0x152>
 800e2ec:	2340      	movs	r3, #64	; 0x40
 800e2ee:	eba0 000a 	sub.w	r0, r0, sl
 800e2f2:	fa03 f000 	lsl.w	r0, r3, r0
 800e2f6:	9b04      	ldr	r3, [sp, #16]
 800e2f8:	4303      	orrs	r3, r0
 800e2fa:	3401      	adds	r4, #1
 800e2fc:	9304      	str	r3, [sp, #16]
 800e2fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e302:	4826      	ldr	r0, [pc, #152]	; (800e39c <_svfiprintf_r+0x1f0>)
 800e304:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e308:	2206      	movs	r2, #6
 800e30a:	f7f1 ff81 	bl	8000210 <memchr>
 800e30e:	2800      	cmp	r0, #0
 800e310:	d038      	beq.n	800e384 <_svfiprintf_r+0x1d8>
 800e312:	4b23      	ldr	r3, [pc, #140]	; (800e3a0 <_svfiprintf_r+0x1f4>)
 800e314:	bb1b      	cbnz	r3, 800e35e <_svfiprintf_r+0x1b2>
 800e316:	9b03      	ldr	r3, [sp, #12]
 800e318:	3307      	adds	r3, #7
 800e31a:	f023 0307 	bic.w	r3, r3, #7
 800e31e:	3308      	adds	r3, #8
 800e320:	9303      	str	r3, [sp, #12]
 800e322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e324:	4433      	add	r3, r6
 800e326:	9309      	str	r3, [sp, #36]	; 0x24
 800e328:	e767      	b.n	800e1fa <_svfiprintf_r+0x4e>
 800e32a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e32e:	460c      	mov	r4, r1
 800e330:	2001      	movs	r0, #1
 800e332:	e7a5      	b.n	800e280 <_svfiprintf_r+0xd4>
 800e334:	2300      	movs	r3, #0
 800e336:	3401      	adds	r4, #1
 800e338:	9305      	str	r3, [sp, #20]
 800e33a:	4619      	mov	r1, r3
 800e33c:	f04f 0c0a 	mov.w	ip, #10
 800e340:	4620      	mov	r0, r4
 800e342:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e346:	3a30      	subs	r2, #48	; 0x30
 800e348:	2a09      	cmp	r2, #9
 800e34a:	d903      	bls.n	800e354 <_svfiprintf_r+0x1a8>
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d0c5      	beq.n	800e2dc <_svfiprintf_r+0x130>
 800e350:	9105      	str	r1, [sp, #20]
 800e352:	e7c3      	b.n	800e2dc <_svfiprintf_r+0x130>
 800e354:	fb0c 2101 	mla	r1, ip, r1, r2
 800e358:	4604      	mov	r4, r0
 800e35a:	2301      	movs	r3, #1
 800e35c:	e7f0      	b.n	800e340 <_svfiprintf_r+0x194>
 800e35e:	ab03      	add	r3, sp, #12
 800e360:	9300      	str	r3, [sp, #0]
 800e362:	462a      	mov	r2, r5
 800e364:	4b0f      	ldr	r3, [pc, #60]	; (800e3a4 <_svfiprintf_r+0x1f8>)
 800e366:	a904      	add	r1, sp, #16
 800e368:	4638      	mov	r0, r7
 800e36a:	f7fc fa49 	bl	800a800 <_printf_float>
 800e36e:	1c42      	adds	r2, r0, #1
 800e370:	4606      	mov	r6, r0
 800e372:	d1d6      	bne.n	800e322 <_svfiprintf_r+0x176>
 800e374:	89ab      	ldrh	r3, [r5, #12]
 800e376:	065b      	lsls	r3, r3, #25
 800e378:	f53f af2c 	bmi.w	800e1d4 <_svfiprintf_r+0x28>
 800e37c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e37e:	b01d      	add	sp, #116	; 0x74
 800e380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e384:	ab03      	add	r3, sp, #12
 800e386:	9300      	str	r3, [sp, #0]
 800e388:	462a      	mov	r2, r5
 800e38a:	4b06      	ldr	r3, [pc, #24]	; (800e3a4 <_svfiprintf_r+0x1f8>)
 800e38c:	a904      	add	r1, sp, #16
 800e38e:	4638      	mov	r0, r7
 800e390:	f7fc fcda 	bl	800ad48 <_printf_i>
 800e394:	e7eb      	b.n	800e36e <_svfiprintf_r+0x1c2>
 800e396:	bf00      	nop
 800e398:	0800f78c 	.word	0x0800f78c
 800e39c:	0800f796 	.word	0x0800f796
 800e3a0:	0800a801 	.word	0x0800a801
 800e3a4:	0800e0f5 	.word	0x0800e0f5
 800e3a8:	0800f792 	.word	0x0800f792
 800e3ac:	00000000 	.word	0x00000000

0800e3b0 <nan>:
 800e3b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e3b8 <nan+0x8>
 800e3b4:	4770      	bx	lr
 800e3b6:	bf00      	nop
 800e3b8:	00000000 	.word	0x00000000
 800e3bc:	7ff80000 	.word	0x7ff80000

0800e3c0 <_sbrk_r>:
 800e3c0:	b538      	push	{r3, r4, r5, lr}
 800e3c2:	4d06      	ldr	r5, [pc, #24]	; (800e3dc <_sbrk_r+0x1c>)
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	4604      	mov	r4, r0
 800e3c8:	4608      	mov	r0, r1
 800e3ca:	602b      	str	r3, [r5, #0]
 800e3cc:	f7f5 f832 	bl	8003434 <_sbrk>
 800e3d0:	1c43      	adds	r3, r0, #1
 800e3d2:	d102      	bne.n	800e3da <_sbrk_r+0x1a>
 800e3d4:	682b      	ldr	r3, [r5, #0]
 800e3d6:	b103      	cbz	r3, 800e3da <_sbrk_r+0x1a>
 800e3d8:	6023      	str	r3, [r4, #0]
 800e3da:	bd38      	pop	{r3, r4, r5, pc}
 800e3dc:	20004614 	.word	0x20004614

0800e3e0 <strncmp>:
 800e3e0:	b510      	push	{r4, lr}
 800e3e2:	b17a      	cbz	r2, 800e404 <strncmp+0x24>
 800e3e4:	4603      	mov	r3, r0
 800e3e6:	3901      	subs	r1, #1
 800e3e8:	1884      	adds	r4, r0, r2
 800e3ea:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e3ee:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e3f2:	4290      	cmp	r0, r2
 800e3f4:	d101      	bne.n	800e3fa <strncmp+0x1a>
 800e3f6:	42a3      	cmp	r3, r4
 800e3f8:	d101      	bne.n	800e3fe <strncmp+0x1e>
 800e3fa:	1a80      	subs	r0, r0, r2
 800e3fc:	bd10      	pop	{r4, pc}
 800e3fe:	2800      	cmp	r0, #0
 800e400:	d1f3      	bne.n	800e3ea <strncmp+0xa>
 800e402:	e7fa      	b.n	800e3fa <strncmp+0x1a>
 800e404:	4610      	mov	r0, r2
 800e406:	e7f9      	b.n	800e3fc <strncmp+0x1c>

0800e408 <__ascii_wctomb>:
 800e408:	b149      	cbz	r1, 800e41e <__ascii_wctomb+0x16>
 800e40a:	2aff      	cmp	r2, #255	; 0xff
 800e40c:	bf85      	ittet	hi
 800e40e:	238a      	movhi	r3, #138	; 0x8a
 800e410:	6003      	strhi	r3, [r0, #0]
 800e412:	700a      	strbls	r2, [r1, #0]
 800e414:	f04f 30ff 	movhi.w	r0, #4294967295
 800e418:	bf98      	it	ls
 800e41a:	2001      	movls	r0, #1
 800e41c:	4770      	bx	lr
 800e41e:	4608      	mov	r0, r1
 800e420:	4770      	bx	lr
	...

0800e424 <__assert_func>:
 800e424:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e426:	4614      	mov	r4, r2
 800e428:	461a      	mov	r2, r3
 800e42a:	4b09      	ldr	r3, [pc, #36]	; (800e450 <__assert_func+0x2c>)
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	4605      	mov	r5, r0
 800e430:	68d8      	ldr	r0, [r3, #12]
 800e432:	b14c      	cbz	r4, 800e448 <__assert_func+0x24>
 800e434:	4b07      	ldr	r3, [pc, #28]	; (800e454 <__assert_func+0x30>)
 800e436:	9100      	str	r1, [sp, #0]
 800e438:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e43c:	4906      	ldr	r1, [pc, #24]	; (800e458 <__assert_func+0x34>)
 800e43e:	462b      	mov	r3, r5
 800e440:	f000 f80e 	bl	800e460 <fiprintf>
 800e444:	f000 fa8c 	bl	800e960 <abort>
 800e448:	4b04      	ldr	r3, [pc, #16]	; (800e45c <__assert_func+0x38>)
 800e44a:	461c      	mov	r4, r3
 800e44c:	e7f3      	b.n	800e436 <__assert_func+0x12>
 800e44e:	bf00      	nop
 800e450:	20000080 	.word	0x20000080
 800e454:	0800f79d 	.word	0x0800f79d
 800e458:	0800f7aa 	.word	0x0800f7aa
 800e45c:	0800f7d8 	.word	0x0800f7d8

0800e460 <fiprintf>:
 800e460:	b40e      	push	{r1, r2, r3}
 800e462:	b503      	push	{r0, r1, lr}
 800e464:	4601      	mov	r1, r0
 800e466:	ab03      	add	r3, sp, #12
 800e468:	4805      	ldr	r0, [pc, #20]	; (800e480 <fiprintf+0x20>)
 800e46a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e46e:	6800      	ldr	r0, [r0, #0]
 800e470:	9301      	str	r3, [sp, #4]
 800e472:	f000 f885 	bl	800e580 <_vfiprintf_r>
 800e476:	b002      	add	sp, #8
 800e478:	f85d eb04 	ldr.w	lr, [sp], #4
 800e47c:	b003      	add	sp, #12
 800e47e:	4770      	bx	lr
 800e480:	20000080 	.word	0x20000080

0800e484 <memmove>:
 800e484:	4288      	cmp	r0, r1
 800e486:	b510      	push	{r4, lr}
 800e488:	eb01 0402 	add.w	r4, r1, r2
 800e48c:	d902      	bls.n	800e494 <memmove+0x10>
 800e48e:	4284      	cmp	r4, r0
 800e490:	4623      	mov	r3, r4
 800e492:	d807      	bhi.n	800e4a4 <memmove+0x20>
 800e494:	1e43      	subs	r3, r0, #1
 800e496:	42a1      	cmp	r1, r4
 800e498:	d008      	beq.n	800e4ac <memmove+0x28>
 800e49a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e49e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e4a2:	e7f8      	b.n	800e496 <memmove+0x12>
 800e4a4:	4402      	add	r2, r0
 800e4a6:	4601      	mov	r1, r0
 800e4a8:	428a      	cmp	r2, r1
 800e4aa:	d100      	bne.n	800e4ae <memmove+0x2a>
 800e4ac:	bd10      	pop	{r4, pc}
 800e4ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e4b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e4b6:	e7f7      	b.n	800e4a8 <memmove+0x24>

0800e4b8 <__malloc_lock>:
 800e4b8:	4801      	ldr	r0, [pc, #4]	; (800e4c0 <__malloc_lock+0x8>)
 800e4ba:	f000 bc11 	b.w	800ece0 <__retarget_lock_acquire_recursive>
 800e4be:	bf00      	nop
 800e4c0:	20004618 	.word	0x20004618

0800e4c4 <__malloc_unlock>:
 800e4c4:	4801      	ldr	r0, [pc, #4]	; (800e4cc <__malloc_unlock+0x8>)
 800e4c6:	f000 bc0c 	b.w	800ece2 <__retarget_lock_release_recursive>
 800e4ca:	bf00      	nop
 800e4cc:	20004618 	.word	0x20004618

0800e4d0 <_realloc_r>:
 800e4d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4d4:	4680      	mov	r8, r0
 800e4d6:	4614      	mov	r4, r2
 800e4d8:	460e      	mov	r6, r1
 800e4da:	b921      	cbnz	r1, 800e4e6 <_realloc_r+0x16>
 800e4dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e4e0:	4611      	mov	r1, r2
 800e4e2:	f7ff bd93 	b.w	800e00c <_malloc_r>
 800e4e6:	b92a      	cbnz	r2, 800e4f4 <_realloc_r+0x24>
 800e4e8:	f7ff fd24 	bl	800df34 <_free_r>
 800e4ec:	4625      	mov	r5, r4
 800e4ee:	4628      	mov	r0, r5
 800e4f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4f4:	f000 fc5c 	bl	800edb0 <_malloc_usable_size_r>
 800e4f8:	4284      	cmp	r4, r0
 800e4fa:	4607      	mov	r7, r0
 800e4fc:	d802      	bhi.n	800e504 <_realloc_r+0x34>
 800e4fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e502:	d812      	bhi.n	800e52a <_realloc_r+0x5a>
 800e504:	4621      	mov	r1, r4
 800e506:	4640      	mov	r0, r8
 800e508:	f7ff fd80 	bl	800e00c <_malloc_r>
 800e50c:	4605      	mov	r5, r0
 800e50e:	2800      	cmp	r0, #0
 800e510:	d0ed      	beq.n	800e4ee <_realloc_r+0x1e>
 800e512:	42bc      	cmp	r4, r7
 800e514:	4622      	mov	r2, r4
 800e516:	4631      	mov	r1, r6
 800e518:	bf28      	it	cs
 800e51a:	463a      	movcs	r2, r7
 800e51c:	f7ff f824 	bl	800d568 <memcpy>
 800e520:	4631      	mov	r1, r6
 800e522:	4640      	mov	r0, r8
 800e524:	f7ff fd06 	bl	800df34 <_free_r>
 800e528:	e7e1      	b.n	800e4ee <_realloc_r+0x1e>
 800e52a:	4635      	mov	r5, r6
 800e52c:	e7df      	b.n	800e4ee <_realloc_r+0x1e>

0800e52e <__sfputc_r>:
 800e52e:	6893      	ldr	r3, [r2, #8]
 800e530:	3b01      	subs	r3, #1
 800e532:	2b00      	cmp	r3, #0
 800e534:	b410      	push	{r4}
 800e536:	6093      	str	r3, [r2, #8]
 800e538:	da08      	bge.n	800e54c <__sfputc_r+0x1e>
 800e53a:	6994      	ldr	r4, [r2, #24]
 800e53c:	42a3      	cmp	r3, r4
 800e53e:	db01      	blt.n	800e544 <__sfputc_r+0x16>
 800e540:	290a      	cmp	r1, #10
 800e542:	d103      	bne.n	800e54c <__sfputc_r+0x1e>
 800e544:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e548:	f000 b94a 	b.w	800e7e0 <__swbuf_r>
 800e54c:	6813      	ldr	r3, [r2, #0]
 800e54e:	1c58      	adds	r0, r3, #1
 800e550:	6010      	str	r0, [r2, #0]
 800e552:	7019      	strb	r1, [r3, #0]
 800e554:	4608      	mov	r0, r1
 800e556:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e55a:	4770      	bx	lr

0800e55c <__sfputs_r>:
 800e55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e55e:	4606      	mov	r6, r0
 800e560:	460f      	mov	r7, r1
 800e562:	4614      	mov	r4, r2
 800e564:	18d5      	adds	r5, r2, r3
 800e566:	42ac      	cmp	r4, r5
 800e568:	d101      	bne.n	800e56e <__sfputs_r+0x12>
 800e56a:	2000      	movs	r0, #0
 800e56c:	e007      	b.n	800e57e <__sfputs_r+0x22>
 800e56e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e572:	463a      	mov	r2, r7
 800e574:	4630      	mov	r0, r6
 800e576:	f7ff ffda 	bl	800e52e <__sfputc_r>
 800e57a:	1c43      	adds	r3, r0, #1
 800e57c:	d1f3      	bne.n	800e566 <__sfputs_r+0xa>
 800e57e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e580 <_vfiprintf_r>:
 800e580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e584:	460d      	mov	r5, r1
 800e586:	b09d      	sub	sp, #116	; 0x74
 800e588:	4614      	mov	r4, r2
 800e58a:	4698      	mov	r8, r3
 800e58c:	4606      	mov	r6, r0
 800e58e:	b118      	cbz	r0, 800e598 <_vfiprintf_r+0x18>
 800e590:	6983      	ldr	r3, [r0, #24]
 800e592:	b90b      	cbnz	r3, 800e598 <_vfiprintf_r+0x18>
 800e594:	f000 fb06 	bl	800eba4 <__sinit>
 800e598:	4b89      	ldr	r3, [pc, #548]	; (800e7c0 <_vfiprintf_r+0x240>)
 800e59a:	429d      	cmp	r5, r3
 800e59c:	d11b      	bne.n	800e5d6 <_vfiprintf_r+0x56>
 800e59e:	6875      	ldr	r5, [r6, #4]
 800e5a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e5a2:	07d9      	lsls	r1, r3, #31
 800e5a4:	d405      	bmi.n	800e5b2 <_vfiprintf_r+0x32>
 800e5a6:	89ab      	ldrh	r3, [r5, #12]
 800e5a8:	059a      	lsls	r2, r3, #22
 800e5aa:	d402      	bmi.n	800e5b2 <_vfiprintf_r+0x32>
 800e5ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e5ae:	f000 fb97 	bl	800ece0 <__retarget_lock_acquire_recursive>
 800e5b2:	89ab      	ldrh	r3, [r5, #12]
 800e5b4:	071b      	lsls	r3, r3, #28
 800e5b6:	d501      	bpl.n	800e5bc <_vfiprintf_r+0x3c>
 800e5b8:	692b      	ldr	r3, [r5, #16]
 800e5ba:	b9eb      	cbnz	r3, 800e5f8 <_vfiprintf_r+0x78>
 800e5bc:	4629      	mov	r1, r5
 800e5be:	4630      	mov	r0, r6
 800e5c0:	f000 f960 	bl	800e884 <__swsetup_r>
 800e5c4:	b1c0      	cbz	r0, 800e5f8 <_vfiprintf_r+0x78>
 800e5c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e5c8:	07dc      	lsls	r4, r3, #31
 800e5ca:	d50e      	bpl.n	800e5ea <_vfiprintf_r+0x6a>
 800e5cc:	f04f 30ff 	mov.w	r0, #4294967295
 800e5d0:	b01d      	add	sp, #116	; 0x74
 800e5d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5d6:	4b7b      	ldr	r3, [pc, #492]	; (800e7c4 <_vfiprintf_r+0x244>)
 800e5d8:	429d      	cmp	r5, r3
 800e5da:	d101      	bne.n	800e5e0 <_vfiprintf_r+0x60>
 800e5dc:	68b5      	ldr	r5, [r6, #8]
 800e5de:	e7df      	b.n	800e5a0 <_vfiprintf_r+0x20>
 800e5e0:	4b79      	ldr	r3, [pc, #484]	; (800e7c8 <_vfiprintf_r+0x248>)
 800e5e2:	429d      	cmp	r5, r3
 800e5e4:	bf08      	it	eq
 800e5e6:	68f5      	ldreq	r5, [r6, #12]
 800e5e8:	e7da      	b.n	800e5a0 <_vfiprintf_r+0x20>
 800e5ea:	89ab      	ldrh	r3, [r5, #12]
 800e5ec:	0598      	lsls	r0, r3, #22
 800e5ee:	d4ed      	bmi.n	800e5cc <_vfiprintf_r+0x4c>
 800e5f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e5f2:	f000 fb76 	bl	800ece2 <__retarget_lock_release_recursive>
 800e5f6:	e7e9      	b.n	800e5cc <_vfiprintf_r+0x4c>
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	9309      	str	r3, [sp, #36]	; 0x24
 800e5fc:	2320      	movs	r3, #32
 800e5fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e602:	f8cd 800c 	str.w	r8, [sp, #12]
 800e606:	2330      	movs	r3, #48	; 0x30
 800e608:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e7cc <_vfiprintf_r+0x24c>
 800e60c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e610:	f04f 0901 	mov.w	r9, #1
 800e614:	4623      	mov	r3, r4
 800e616:	469a      	mov	sl, r3
 800e618:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e61c:	b10a      	cbz	r2, 800e622 <_vfiprintf_r+0xa2>
 800e61e:	2a25      	cmp	r2, #37	; 0x25
 800e620:	d1f9      	bne.n	800e616 <_vfiprintf_r+0x96>
 800e622:	ebba 0b04 	subs.w	fp, sl, r4
 800e626:	d00b      	beq.n	800e640 <_vfiprintf_r+0xc0>
 800e628:	465b      	mov	r3, fp
 800e62a:	4622      	mov	r2, r4
 800e62c:	4629      	mov	r1, r5
 800e62e:	4630      	mov	r0, r6
 800e630:	f7ff ff94 	bl	800e55c <__sfputs_r>
 800e634:	3001      	adds	r0, #1
 800e636:	f000 80aa 	beq.w	800e78e <_vfiprintf_r+0x20e>
 800e63a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e63c:	445a      	add	r2, fp
 800e63e:	9209      	str	r2, [sp, #36]	; 0x24
 800e640:	f89a 3000 	ldrb.w	r3, [sl]
 800e644:	2b00      	cmp	r3, #0
 800e646:	f000 80a2 	beq.w	800e78e <_vfiprintf_r+0x20e>
 800e64a:	2300      	movs	r3, #0
 800e64c:	f04f 32ff 	mov.w	r2, #4294967295
 800e650:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e654:	f10a 0a01 	add.w	sl, sl, #1
 800e658:	9304      	str	r3, [sp, #16]
 800e65a:	9307      	str	r3, [sp, #28]
 800e65c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e660:	931a      	str	r3, [sp, #104]	; 0x68
 800e662:	4654      	mov	r4, sl
 800e664:	2205      	movs	r2, #5
 800e666:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e66a:	4858      	ldr	r0, [pc, #352]	; (800e7cc <_vfiprintf_r+0x24c>)
 800e66c:	f7f1 fdd0 	bl	8000210 <memchr>
 800e670:	9a04      	ldr	r2, [sp, #16]
 800e672:	b9d8      	cbnz	r0, 800e6ac <_vfiprintf_r+0x12c>
 800e674:	06d1      	lsls	r1, r2, #27
 800e676:	bf44      	itt	mi
 800e678:	2320      	movmi	r3, #32
 800e67a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e67e:	0713      	lsls	r3, r2, #28
 800e680:	bf44      	itt	mi
 800e682:	232b      	movmi	r3, #43	; 0x2b
 800e684:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e688:	f89a 3000 	ldrb.w	r3, [sl]
 800e68c:	2b2a      	cmp	r3, #42	; 0x2a
 800e68e:	d015      	beq.n	800e6bc <_vfiprintf_r+0x13c>
 800e690:	9a07      	ldr	r2, [sp, #28]
 800e692:	4654      	mov	r4, sl
 800e694:	2000      	movs	r0, #0
 800e696:	f04f 0c0a 	mov.w	ip, #10
 800e69a:	4621      	mov	r1, r4
 800e69c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e6a0:	3b30      	subs	r3, #48	; 0x30
 800e6a2:	2b09      	cmp	r3, #9
 800e6a4:	d94e      	bls.n	800e744 <_vfiprintf_r+0x1c4>
 800e6a6:	b1b0      	cbz	r0, 800e6d6 <_vfiprintf_r+0x156>
 800e6a8:	9207      	str	r2, [sp, #28]
 800e6aa:	e014      	b.n	800e6d6 <_vfiprintf_r+0x156>
 800e6ac:	eba0 0308 	sub.w	r3, r0, r8
 800e6b0:	fa09 f303 	lsl.w	r3, r9, r3
 800e6b4:	4313      	orrs	r3, r2
 800e6b6:	9304      	str	r3, [sp, #16]
 800e6b8:	46a2      	mov	sl, r4
 800e6ba:	e7d2      	b.n	800e662 <_vfiprintf_r+0xe2>
 800e6bc:	9b03      	ldr	r3, [sp, #12]
 800e6be:	1d19      	adds	r1, r3, #4
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	9103      	str	r1, [sp, #12]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	bfbb      	ittet	lt
 800e6c8:	425b      	neglt	r3, r3
 800e6ca:	f042 0202 	orrlt.w	r2, r2, #2
 800e6ce:	9307      	strge	r3, [sp, #28]
 800e6d0:	9307      	strlt	r3, [sp, #28]
 800e6d2:	bfb8      	it	lt
 800e6d4:	9204      	strlt	r2, [sp, #16]
 800e6d6:	7823      	ldrb	r3, [r4, #0]
 800e6d8:	2b2e      	cmp	r3, #46	; 0x2e
 800e6da:	d10c      	bne.n	800e6f6 <_vfiprintf_r+0x176>
 800e6dc:	7863      	ldrb	r3, [r4, #1]
 800e6de:	2b2a      	cmp	r3, #42	; 0x2a
 800e6e0:	d135      	bne.n	800e74e <_vfiprintf_r+0x1ce>
 800e6e2:	9b03      	ldr	r3, [sp, #12]
 800e6e4:	1d1a      	adds	r2, r3, #4
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	9203      	str	r2, [sp, #12]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	bfb8      	it	lt
 800e6ee:	f04f 33ff 	movlt.w	r3, #4294967295
 800e6f2:	3402      	adds	r4, #2
 800e6f4:	9305      	str	r3, [sp, #20]
 800e6f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e7dc <_vfiprintf_r+0x25c>
 800e6fa:	7821      	ldrb	r1, [r4, #0]
 800e6fc:	2203      	movs	r2, #3
 800e6fe:	4650      	mov	r0, sl
 800e700:	f7f1 fd86 	bl	8000210 <memchr>
 800e704:	b140      	cbz	r0, 800e718 <_vfiprintf_r+0x198>
 800e706:	2340      	movs	r3, #64	; 0x40
 800e708:	eba0 000a 	sub.w	r0, r0, sl
 800e70c:	fa03 f000 	lsl.w	r0, r3, r0
 800e710:	9b04      	ldr	r3, [sp, #16]
 800e712:	4303      	orrs	r3, r0
 800e714:	3401      	adds	r4, #1
 800e716:	9304      	str	r3, [sp, #16]
 800e718:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e71c:	482c      	ldr	r0, [pc, #176]	; (800e7d0 <_vfiprintf_r+0x250>)
 800e71e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e722:	2206      	movs	r2, #6
 800e724:	f7f1 fd74 	bl	8000210 <memchr>
 800e728:	2800      	cmp	r0, #0
 800e72a:	d03f      	beq.n	800e7ac <_vfiprintf_r+0x22c>
 800e72c:	4b29      	ldr	r3, [pc, #164]	; (800e7d4 <_vfiprintf_r+0x254>)
 800e72e:	bb1b      	cbnz	r3, 800e778 <_vfiprintf_r+0x1f8>
 800e730:	9b03      	ldr	r3, [sp, #12]
 800e732:	3307      	adds	r3, #7
 800e734:	f023 0307 	bic.w	r3, r3, #7
 800e738:	3308      	adds	r3, #8
 800e73a:	9303      	str	r3, [sp, #12]
 800e73c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e73e:	443b      	add	r3, r7
 800e740:	9309      	str	r3, [sp, #36]	; 0x24
 800e742:	e767      	b.n	800e614 <_vfiprintf_r+0x94>
 800e744:	fb0c 3202 	mla	r2, ip, r2, r3
 800e748:	460c      	mov	r4, r1
 800e74a:	2001      	movs	r0, #1
 800e74c:	e7a5      	b.n	800e69a <_vfiprintf_r+0x11a>
 800e74e:	2300      	movs	r3, #0
 800e750:	3401      	adds	r4, #1
 800e752:	9305      	str	r3, [sp, #20]
 800e754:	4619      	mov	r1, r3
 800e756:	f04f 0c0a 	mov.w	ip, #10
 800e75a:	4620      	mov	r0, r4
 800e75c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e760:	3a30      	subs	r2, #48	; 0x30
 800e762:	2a09      	cmp	r2, #9
 800e764:	d903      	bls.n	800e76e <_vfiprintf_r+0x1ee>
 800e766:	2b00      	cmp	r3, #0
 800e768:	d0c5      	beq.n	800e6f6 <_vfiprintf_r+0x176>
 800e76a:	9105      	str	r1, [sp, #20]
 800e76c:	e7c3      	b.n	800e6f6 <_vfiprintf_r+0x176>
 800e76e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e772:	4604      	mov	r4, r0
 800e774:	2301      	movs	r3, #1
 800e776:	e7f0      	b.n	800e75a <_vfiprintf_r+0x1da>
 800e778:	ab03      	add	r3, sp, #12
 800e77a:	9300      	str	r3, [sp, #0]
 800e77c:	462a      	mov	r2, r5
 800e77e:	4b16      	ldr	r3, [pc, #88]	; (800e7d8 <_vfiprintf_r+0x258>)
 800e780:	a904      	add	r1, sp, #16
 800e782:	4630      	mov	r0, r6
 800e784:	f7fc f83c 	bl	800a800 <_printf_float>
 800e788:	4607      	mov	r7, r0
 800e78a:	1c78      	adds	r0, r7, #1
 800e78c:	d1d6      	bne.n	800e73c <_vfiprintf_r+0x1bc>
 800e78e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e790:	07d9      	lsls	r1, r3, #31
 800e792:	d405      	bmi.n	800e7a0 <_vfiprintf_r+0x220>
 800e794:	89ab      	ldrh	r3, [r5, #12]
 800e796:	059a      	lsls	r2, r3, #22
 800e798:	d402      	bmi.n	800e7a0 <_vfiprintf_r+0x220>
 800e79a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e79c:	f000 faa1 	bl	800ece2 <__retarget_lock_release_recursive>
 800e7a0:	89ab      	ldrh	r3, [r5, #12]
 800e7a2:	065b      	lsls	r3, r3, #25
 800e7a4:	f53f af12 	bmi.w	800e5cc <_vfiprintf_r+0x4c>
 800e7a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e7aa:	e711      	b.n	800e5d0 <_vfiprintf_r+0x50>
 800e7ac:	ab03      	add	r3, sp, #12
 800e7ae:	9300      	str	r3, [sp, #0]
 800e7b0:	462a      	mov	r2, r5
 800e7b2:	4b09      	ldr	r3, [pc, #36]	; (800e7d8 <_vfiprintf_r+0x258>)
 800e7b4:	a904      	add	r1, sp, #16
 800e7b6:	4630      	mov	r0, r6
 800e7b8:	f7fc fac6 	bl	800ad48 <_printf_i>
 800e7bc:	e7e4      	b.n	800e788 <_vfiprintf_r+0x208>
 800e7be:	bf00      	nop
 800e7c0:	0800f7fc 	.word	0x0800f7fc
 800e7c4:	0800f81c 	.word	0x0800f81c
 800e7c8:	0800f7dc 	.word	0x0800f7dc
 800e7cc:	0800f78c 	.word	0x0800f78c
 800e7d0:	0800f796 	.word	0x0800f796
 800e7d4:	0800a801 	.word	0x0800a801
 800e7d8:	0800e55d 	.word	0x0800e55d
 800e7dc:	0800f792 	.word	0x0800f792

0800e7e0 <__swbuf_r>:
 800e7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7e2:	460e      	mov	r6, r1
 800e7e4:	4614      	mov	r4, r2
 800e7e6:	4605      	mov	r5, r0
 800e7e8:	b118      	cbz	r0, 800e7f2 <__swbuf_r+0x12>
 800e7ea:	6983      	ldr	r3, [r0, #24]
 800e7ec:	b90b      	cbnz	r3, 800e7f2 <__swbuf_r+0x12>
 800e7ee:	f000 f9d9 	bl	800eba4 <__sinit>
 800e7f2:	4b21      	ldr	r3, [pc, #132]	; (800e878 <__swbuf_r+0x98>)
 800e7f4:	429c      	cmp	r4, r3
 800e7f6:	d12b      	bne.n	800e850 <__swbuf_r+0x70>
 800e7f8:	686c      	ldr	r4, [r5, #4]
 800e7fa:	69a3      	ldr	r3, [r4, #24]
 800e7fc:	60a3      	str	r3, [r4, #8]
 800e7fe:	89a3      	ldrh	r3, [r4, #12]
 800e800:	071a      	lsls	r2, r3, #28
 800e802:	d52f      	bpl.n	800e864 <__swbuf_r+0x84>
 800e804:	6923      	ldr	r3, [r4, #16]
 800e806:	b36b      	cbz	r3, 800e864 <__swbuf_r+0x84>
 800e808:	6923      	ldr	r3, [r4, #16]
 800e80a:	6820      	ldr	r0, [r4, #0]
 800e80c:	1ac0      	subs	r0, r0, r3
 800e80e:	6963      	ldr	r3, [r4, #20]
 800e810:	b2f6      	uxtb	r6, r6
 800e812:	4283      	cmp	r3, r0
 800e814:	4637      	mov	r7, r6
 800e816:	dc04      	bgt.n	800e822 <__swbuf_r+0x42>
 800e818:	4621      	mov	r1, r4
 800e81a:	4628      	mov	r0, r5
 800e81c:	f000 f92e 	bl	800ea7c <_fflush_r>
 800e820:	bb30      	cbnz	r0, 800e870 <__swbuf_r+0x90>
 800e822:	68a3      	ldr	r3, [r4, #8]
 800e824:	3b01      	subs	r3, #1
 800e826:	60a3      	str	r3, [r4, #8]
 800e828:	6823      	ldr	r3, [r4, #0]
 800e82a:	1c5a      	adds	r2, r3, #1
 800e82c:	6022      	str	r2, [r4, #0]
 800e82e:	701e      	strb	r6, [r3, #0]
 800e830:	6963      	ldr	r3, [r4, #20]
 800e832:	3001      	adds	r0, #1
 800e834:	4283      	cmp	r3, r0
 800e836:	d004      	beq.n	800e842 <__swbuf_r+0x62>
 800e838:	89a3      	ldrh	r3, [r4, #12]
 800e83a:	07db      	lsls	r3, r3, #31
 800e83c:	d506      	bpl.n	800e84c <__swbuf_r+0x6c>
 800e83e:	2e0a      	cmp	r6, #10
 800e840:	d104      	bne.n	800e84c <__swbuf_r+0x6c>
 800e842:	4621      	mov	r1, r4
 800e844:	4628      	mov	r0, r5
 800e846:	f000 f919 	bl	800ea7c <_fflush_r>
 800e84a:	b988      	cbnz	r0, 800e870 <__swbuf_r+0x90>
 800e84c:	4638      	mov	r0, r7
 800e84e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e850:	4b0a      	ldr	r3, [pc, #40]	; (800e87c <__swbuf_r+0x9c>)
 800e852:	429c      	cmp	r4, r3
 800e854:	d101      	bne.n	800e85a <__swbuf_r+0x7a>
 800e856:	68ac      	ldr	r4, [r5, #8]
 800e858:	e7cf      	b.n	800e7fa <__swbuf_r+0x1a>
 800e85a:	4b09      	ldr	r3, [pc, #36]	; (800e880 <__swbuf_r+0xa0>)
 800e85c:	429c      	cmp	r4, r3
 800e85e:	bf08      	it	eq
 800e860:	68ec      	ldreq	r4, [r5, #12]
 800e862:	e7ca      	b.n	800e7fa <__swbuf_r+0x1a>
 800e864:	4621      	mov	r1, r4
 800e866:	4628      	mov	r0, r5
 800e868:	f000 f80c 	bl	800e884 <__swsetup_r>
 800e86c:	2800      	cmp	r0, #0
 800e86e:	d0cb      	beq.n	800e808 <__swbuf_r+0x28>
 800e870:	f04f 37ff 	mov.w	r7, #4294967295
 800e874:	e7ea      	b.n	800e84c <__swbuf_r+0x6c>
 800e876:	bf00      	nop
 800e878:	0800f7fc 	.word	0x0800f7fc
 800e87c:	0800f81c 	.word	0x0800f81c
 800e880:	0800f7dc 	.word	0x0800f7dc

0800e884 <__swsetup_r>:
 800e884:	4b32      	ldr	r3, [pc, #200]	; (800e950 <__swsetup_r+0xcc>)
 800e886:	b570      	push	{r4, r5, r6, lr}
 800e888:	681d      	ldr	r5, [r3, #0]
 800e88a:	4606      	mov	r6, r0
 800e88c:	460c      	mov	r4, r1
 800e88e:	b125      	cbz	r5, 800e89a <__swsetup_r+0x16>
 800e890:	69ab      	ldr	r3, [r5, #24]
 800e892:	b913      	cbnz	r3, 800e89a <__swsetup_r+0x16>
 800e894:	4628      	mov	r0, r5
 800e896:	f000 f985 	bl	800eba4 <__sinit>
 800e89a:	4b2e      	ldr	r3, [pc, #184]	; (800e954 <__swsetup_r+0xd0>)
 800e89c:	429c      	cmp	r4, r3
 800e89e:	d10f      	bne.n	800e8c0 <__swsetup_r+0x3c>
 800e8a0:	686c      	ldr	r4, [r5, #4]
 800e8a2:	89a3      	ldrh	r3, [r4, #12]
 800e8a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e8a8:	0719      	lsls	r1, r3, #28
 800e8aa:	d42c      	bmi.n	800e906 <__swsetup_r+0x82>
 800e8ac:	06dd      	lsls	r5, r3, #27
 800e8ae:	d411      	bmi.n	800e8d4 <__swsetup_r+0x50>
 800e8b0:	2309      	movs	r3, #9
 800e8b2:	6033      	str	r3, [r6, #0]
 800e8b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e8b8:	81a3      	strh	r3, [r4, #12]
 800e8ba:	f04f 30ff 	mov.w	r0, #4294967295
 800e8be:	e03e      	b.n	800e93e <__swsetup_r+0xba>
 800e8c0:	4b25      	ldr	r3, [pc, #148]	; (800e958 <__swsetup_r+0xd4>)
 800e8c2:	429c      	cmp	r4, r3
 800e8c4:	d101      	bne.n	800e8ca <__swsetup_r+0x46>
 800e8c6:	68ac      	ldr	r4, [r5, #8]
 800e8c8:	e7eb      	b.n	800e8a2 <__swsetup_r+0x1e>
 800e8ca:	4b24      	ldr	r3, [pc, #144]	; (800e95c <__swsetup_r+0xd8>)
 800e8cc:	429c      	cmp	r4, r3
 800e8ce:	bf08      	it	eq
 800e8d0:	68ec      	ldreq	r4, [r5, #12]
 800e8d2:	e7e6      	b.n	800e8a2 <__swsetup_r+0x1e>
 800e8d4:	0758      	lsls	r0, r3, #29
 800e8d6:	d512      	bpl.n	800e8fe <__swsetup_r+0x7a>
 800e8d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e8da:	b141      	cbz	r1, 800e8ee <__swsetup_r+0x6a>
 800e8dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e8e0:	4299      	cmp	r1, r3
 800e8e2:	d002      	beq.n	800e8ea <__swsetup_r+0x66>
 800e8e4:	4630      	mov	r0, r6
 800e8e6:	f7ff fb25 	bl	800df34 <_free_r>
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	6363      	str	r3, [r4, #52]	; 0x34
 800e8ee:	89a3      	ldrh	r3, [r4, #12]
 800e8f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e8f4:	81a3      	strh	r3, [r4, #12]
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	6063      	str	r3, [r4, #4]
 800e8fa:	6923      	ldr	r3, [r4, #16]
 800e8fc:	6023      	str	r3, [r4, #0]
 800e8fe:	89a3      	ldrh	r3, [r4, #12]
 800e900:	f043 0308 	orr.w	r3, r3, #8
 800e904:	81a3      	strh	r3, [r4, #12]
 800e906:	6923      	ldr	r3, [r4, #16]
 800e908:	b94b      	cbnz	r3, 800e91e <__swsetup_r+0x9a>
 800e90a:	89a3      	ldrh	r3, [r4, #12]
 800e90c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e910:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e914:	d003      	beq.n	800e91e <__swsetup_r+0x9a>
 800e916:	4621      	mov	r1, r4
 800e918:	4630      	mov	r0, r6
 800e91a:	f000 fa09 	bl	800ed30 <__smakebuf_r>
 800e91e:	89a0      	ldrh	r0, [r4, #12]
 800e920:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e924:	f010 0301 	ands.w	r3, r0, #1
 800e928:	d00a      	beq.n	800e940 <__swsetup_r+0xbc>
 800e92a:	2300      	movs	r3, #0
 800e92c:	60a3      	str	r3, [r4, #8]
 800e92e:	6963      	ldr	r3, [r4, #20]
 800e930:	425b      	negs	r3, r3
 800e932:	61a3      	str	r3, [r4, #24]
 800e934:	6923      	ldr	r3, [r4, #16]
 800e936:	b943      	cbnz	r3, 800e94a <__swsetup_r+0xc6>
 800e938:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e93c:	d1ba      	bne.n	800e8b4 <__swsetup_r+0x30>
 800e93e:	bd70      	pop	{r4, r5, r6, pc}
 800e940:	0781      	lsls	r1, r0, #30
 800e942:	bf58      	it	pl
 800e944:	6963      	ldrpl	r3, [r4, #20]
 800e946:	60a3      	str	r3, [r4, #8]
 800e948:	e7f4      	b.n	800e934 <__swsetup_r+0xb0>
 800e94a:	2000      	movs	r0, #0
 800e94c:	e7f7      	b.n	800e93e <__swsetup_r+0xba>
 800e94e:	bf00      	nop
 800e950:	20000080 	.word	0x20000080
 800e954:	0800f7fc 	.word	0x0800f7fc
 800e958:	0800f81c 	.word	0x0800f81c
 800e95c:	0800f7dc 	.word	0x0800f7dc

0800e960 <abort>:
 800e960:	b508      	push	{r3, lr}
 800e962:	2006      	movs	r0, #6
 800e964:	f000 fa54 	bl	800ee10 <raise>
 800e968:	2001      	movs	r0, #1
 800e96a:	f7f4 fceb 	bl	8003344 <_exit>
	...

0800e970 <__sflush_r>:
 800e970:	898a      	ldrh	r2, [r1, #12]
 800e972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e976:	4605      	mov	r5, r0
 800e978:	0710      	lsls	r0, r2, #28
 800e97a:	460c      	mov	r4, r1
 800e97c:	d458      	bmi.n	800ea30 <__sflush_r+0xc0>
 800e97e:	684b      	ldr	r3, [r1, #4]
 800e980:	2b00      	cmp	r3, #0
 800e982:	dc05      	bgt.n	800e990 <__sflush_r+0x20>
 800e984:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e986:	2b00      	cmp	r3, #0
 800e988:	dc02      	bgt.n	800e990 <__sflush_r+0x20>
 800e98a:	2000      	movs	r0, #0
 800e98c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e990:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e992:	2e00      	cmp	r6, #0
 800e994:	d0f9      	beq.n	800e98a <__sflush_r+0x1a>
 800e996:	2300      	movs	r3, #0
 800e998:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e99c:	682f      	ldr	r7, [r5, #0]
 800e99e:	602b      	str	r3, [r5, #0]
 800e9a0:	d032      	beq.n	800ea08 <__sflush_r+0x98>
 800e9a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e9a4:	89a3      	ldrh	r3, [r4, #12]
 800e9a6:	075a      	lsls	r2, r3, #29
 800e9a8:	d505      	bpl.n	800e9b6 <__sflush_r+0x46>
 800e9aa:	6863      	ldr	r3, [r4, #4]
 800e9ac:	1ac0      	subs	r0, r0, r3
 800e9ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e9b0:	b10b      	cbz	r3, 800e9b6 <__sflush_r+0x46>
 800e9b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e9b4:	1ac0      	subs	r0, r0, r3
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	4602      	mov	r2, r0
 800e9ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e9bc:	6a21      	ldr	r1, [r4, #32]
 800e9be:	4628      	mov	r0, r5
 800e9c0:	47b0      	blx	r6
 800e9c2:	1c43      	adds	r3, r0, #1
 800e9c4:	89a3      	ldrh	r3, [r4, #12]
 800e9c6:	d106      	bne.n	800e9d6 <__sflush_r+0x66>
 800e9c8:	6829      	ldr	r1, [r5, #0]
 800e9ca:	291d      	cmp	r1, #29
 800e9cc:	d82c      	bhi.n	800ea28 <__sflush_r+0xb8>
 800e9ce:	4a2a      	ldr	r2, [pc, #168]	; (800ea78 <__sflush_r+0x108>)
 800e9d0:	40ca      	lsrs	r2, r1
 800e9d2:	07d6      	lsls	r6, r2, #31
 800e9d4:	d528      	bpl.n	800ea28 <__sflush_r+0xb8>
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	6062      	str	r2, [r4, #4]
 800e9da:	04d9      	lsls	r1, r3, #19
 800e9dc:	6922      	ldr	r2, [r4, #16]
 800e9de:	6022      	str	r2, [r4, #0]
 800e9e0:	d504      	bpl.n	800e9ec <__sflush_r+0x7c>
 800e9e2:	1c42      	adds	r2, r0, #1
 800e9e4:	d101      	bne.n	800e9ea <__sflush_r+0x7a>
 800e9e6:	682b      	ldr	r3, [r5, #0]
 800e9e8:	b903      	cbnz	r3, 800e9ec <__sflush_r+0x7c>
 800e9ea:	6560      	str	r0, [r4, #84]	; 0x54
 800e9ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e9ee:	602f      	str	r7, [r5, #0]
 800e9f0:	2900      	cmp	r1, #0
 800e9f2:	d0ca      	beq.n	800e98a <__sflush_r+0x1a>
 800e9f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e9f8:	4299      	cmp	r1, r3
 800e9fa:	d002      	beq.n	800ea02 <__sflush_r+0x92>
 800e9fc:	4628      	mov	r0, r5
 800e9fe:	f7ff fa99 	bl	800df34 <_free_r>
 800ea02:	2000      	movs	r0, #0
 800ea04:	6360      	str	r0, [r4, #52]	; 0x34
 800ea06:	e7c1      	b.n	800e98c <__sflush_r+0x1c>
 800ea08:	6a21      	ldr	r1, [r4, #32]
 800ea0a:	2301      	movs	r3, #1
 800ea0c:	4628      	mov	r0, r5
 800ea0e:	47b0      	blx	r6
 800ea10:	1c41      	adds	r1, r0, #1
 800ea12:	d1c7      	bne.n	800e9a4 <__sflush_r+0x34>
 800ea14:	682b      	ldr	r3, [r5, #0]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d0c4      	beq.n	800e9a4 <__sflush_r+0x34>
 800ea1a:	2b1d      	cmp	r3, #29
 800ea1c:	d001      	beq.n	800ea22 <__sflush_r+0xb2>
 800ea1e:	2b16      	cmp	r3, #22
 800ea20:	d101      	bne.n	800ea26 <__sflush_r+0xb6>
 800ea22:	602f      	str	r7, [r5, #0]
 800ea24:	e7b1      	b.n	800e98a <__sflush_r+0x1a>
 800ea26:	89a3      	ldrh	r3, [r4, #12]
 800ea28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea2c:	81a3      	strh	r3, [r4, #12]
 800ea2e:	e7ad      	b.n	800e98c <__sflush_r+0x1c>
 800ea30:	690f      	ldr	r7, [r1, #16]
 800ea32:	2f00      	cmp	r7, #0
 800ea34:	d0a9      	beq.n	800e98a <__sflush_r+0x1a>
 800ea36:	0793      	lsls	r3, r2, #30
 800ea38:	680e      	ldr	r6, [r1, #0]
 800ea3a:	bf08      	it	eq
 800ea3c:	694b      	ldreq	r3, [r1, #20]
 800ea3e:	600f      	str	r7, [r1, #0]
 800ea40:	bf18      	it	ne
 800ea42:	2300      	movne	r3, #0
 800ea44:	eba6 0807 	sub.w	r8, r6, r7
 800ea48:	608b      	str	r3, [r1, #8]
 800ea4a:	f1b8 0f00 	cmp.w	r8, #0
 800ea4e:	dd9c      	ble.n	800e98a <__sflush_r+0x1a>
 800ea50:	6a21      	ldr	r1, [r4, #32]
 800ea52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ea54:	4643      	mov	r3, r8
 800ea56:	463a      	mov	r2, r7
 800ea58:	4628      	mov	r0, r5
 800ea5a:	47b0      	blx	r6
 800ea5c:	2800      	cmp	r0, #0
 800ea5e:	dc06      	bgt.n	800ea6e <__sflush_r+0xfe>
 800ea60:	89a3      	ldrh	r3, [r4, #12]
 800ea62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea66:	81a3      	strh	r3, [r4, #12]
 800ea68:	f04f 30ff 	mov.w	r0, #4294967295
 800ea6c:	e78e      	b.n	800e98c <__sflush_r+0x1c>
 800ea6e:	4407      	add	r7, r0
 800ea70:	eba8 0800 	sub.w	r8, r8, r0
 800ea74:	e7e9      	b.n	800ea4a <__sflush_r+0xda>
 800ea76:	bf00      	nop
 800ea78:	20400001 	.word	0x20400001

0800ea7c <_fflush_r>:
 800ea7c:	b538      	push	{r3, r4, r5, lr}
 800ea7e:	690b      	ldr	r3, [r1, #16]
 800ea80:	4605      	mov	r5, r0
 800ea82:	460c      	mov	r4, r1
 800ea84:	b913      	cbnz	r3, 800ea8c <_fflush_r+0x10>
 800ea86:	2500      	movs	r5, #0
 800ea88:	4628      	mov	r0, r5
 800ea8a:	bd38      	pop	{r3, r4, r5, pc}
 800ea8c:	b118      	cbz	r0, 800ea96 <_fflush_r+0x1a>
 800ea8e:	6983      	ldr	r3, [r0, #24]
 800ea90:	b90b      	cbnz	r3, 800ea96 <_fflush_r+0x1a>
 800ea92:	f000 f887 	bl	800eba4 <__sinit>
 800ea96:	4b14      	ldr	r3, [pc, #80]	; (800eae8 <_fflush_r+0x6c>)
 800ea98:	429c      	cmp	r4, r3
 800ea9a:	d11b      	bne.n	800ead4 <_fflush_r+0x58>
 800ea9c:	686c      	ldr	r4, [r5, #4]
 800ea9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d0ef      	beq.n	800ea86 <_fflush_r+0xa>
 800eaa6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800eaa8:	07d0      	lsls	r0, r2, #31
 800eaaa:	d404      	bmi.n	800eab6 <_fflush_r+0x3a>
 800eaac:	0599      	lsls	r1, r3, #22
 800eaae:	d402      	bmi.n	800eab6 <_fflush_r+0x3a>
 800eab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eab2:	f000 f915 	bl	800ece0 <__retarget_lock_acquire_recursive>
 800eab6:	4628      	mov	r0, r5
 800eab8:	4621      	mov	r1, r4
 800eaba:	f7ff ff59 	bl	800e970 <__sflush_r>
 800eabe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eac0:	07da      	lsls	r2, r3, #31
 800eac2:	4605      	mov	r5, r0
 800eac4:	d4e0      	bmi.n	800ea88 <_fflush_r+0xc>
 800eac6:	89a3      	ldrh	r3, [r4, #12]
 800eac8:	059b      	lsls	r3, r3, #22
 800eaca:	d4dd      	bmi.n	800ea88 <_fflush_r+0xc>
 800eacc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eace:	f000 f908 	bl	800ece2 <__retarget_lock_release_recursive>
 800ead2:	e7d9      	b.n	800ea88 <_fflush_r+0xc>
 800ead4:	4b05      	ldr	r3, [pc, #20]	; (800eaec <_fflush_r+0x70>)
 800ead6:	429c      	cmp	r4, r3
 800ead8:	d101      	bne.n	800eade <_fflush_r+0x62>
 800eada:	68ac      	ldr	r4, [r5, #8]
 800eadc:	e7df      	b.n	800ea9e <_fflush_r+0x22>
 800eade:	4b04      	ldr	r3, [pc, #16]	; (800eaf0 <_fflush_r+0x74>)
 800eae0:	429c      	cmp	r4, r3
 800eae2:	bf08      	it	eq
 800eae4:	68ec      	ldreq	r4, [r5, #12]
 800eae6:	e7da      	b.n	800ea9e <_fflush_r+0x22>
 800eae8:	0800f7fc 	.word	0x0800f7fc
 800eaec:	0800f81c 	.word	0x0800f81c
 800eaf0:	0800f7dc 	.word	0x0800f7dc

0800eaf4 <std>:
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	b510      	push	{r4, lr}
 800eaf8:	4604      	mov	r4, r0
 800eafa:	e9c0 3300 	strd	r3, r3, [r0]
 800eafe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eb02:	6083      	str	r3, [r0, #8]
 800eb04:	8181      	strh	r1, [r0, #12]
 800eb06:	6643      	str	r3, [r0, #100]	; 0x64
 800eb08:	81c2      	strh	r2, [r0, #14]
 800eb0a:	6183      	str	r3, [r0, #24]
 800eb0c:	4619      	mov	r1, r3
 800eb0e:	2208      	movs	r2, #8
 800eb10:	305c      	adds	r0, #92	; 0x5c
 800eb12:	f7fb fdcd 	bl	800a6b0 <memset>
 800eb16:	4b05      	ldr	r3, [pc, #20]	; (800eb2c <std+0x38>)
 800eb18:	6263      	str	r3, [r4, #36]	; 0x24
 800eb1a:	4b05      	ldr	r3, [pc, #20]	; (800eb30 <std+0x3c>)
 800eb1c:	62a3      	str	r3, [r4, #40]	; 0x28
 800eb1e:	4b05      	ldr	r3, [pc, #20]	; (800eb34 <std+0x40>)
 800eb20:	62e3      	str	r3, [r4, #44]	; 0x2c
 800eb22:	4b05      	ldr	r3, [pc, #20]	; (800eb38 <std+0x44>)
 800eb24:	6224      	str	r4, [r4, #32]
 800eb26:	6323      	str	r3, [r4, #48]	; 0x30
 800eb28:	bd10      	pop	{r4, pc}
 800eb2a:	bf00      	nop
 800eb2c:	0800ee49 	.word	0x0800ee49
 800eb30:	0800ee6b 	.word	0x0800ee6b
 800eb34:	0800eea3 	.word	0x0800eea3
 800eb38:	0800eec7 	.word	0x0800eec7

0800eb3c <_cleanup_r>:
 800eb3c:	4901      	ldr	r1, [pc, #4]	; (800eb44 <_cleanup_r+0x8>)
 800eb3e:	f000 b8af 	b.w	800eca0 <_fwalk_reent>
 800eb42:	bf00      	nop
 800eb44:	0800ea7d 	.word	0x0800ea7d

0800eb48 <__sfmoreglue>:
 800eb48:	b570      	push	{r4, r5, r6, lr}
 800eb4a:	2268      	movs	r2, #104	; 0x68
 800eb4c:	1e4d      	subs	r5, r1, #1
 800eb4e:	4355      	muls	r5, r2
 800eb50:	460e      	mov	r6, r1
 800eb52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800eb56:	f7ff fa59 	bl	800e00c <_malloc_r>
 800eb5a:	4604      	mov	r4, r0
 800eb5c:	b140      	cbz	r0, 800eb70 <__sfmoreglue+0x28>
 800eb5e:	2100      	movs	r1, #0
 800eb60:	e9c0 1600 	strd	r1, r6, [r0]
 800eb64:	300c      	adds	r0, #12
 800eb66:	60a0      	str	r0, [r4, #8]
 800eb68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800eb6c:	f7fb fda0 	bl	800a6b0 <memset>
 800eb70:	4620      	mov	r0, r4
 800eb72:	bd70      	pop	{r4, r5, r6, pc}

0800eb74 <__sfp_lock_acquire>:
 800eb74:	4801      	ldr	r0, [pc, #4]	; (800eb7c <__sfp_lock_acquire+0x8>)
 800eb76:	f000 b8b3 	b.w	800ece0 <__retarget_lock_acquire_recursive>
 800eb7a:	bf00      	nop
 800eb7c:	20004619 	.word	0x20004619

0800eb80 <__sfp_lock_release>:
 800eb80:	4801      	ldr	r0, [pc, #4]	; (800eb88 <__sfp_lock_release+0x8>)
 800eb82:	f000 b8ae 	b.w	800ece2 <__retarget_lock_release_recursive>
 800eb86:	bf00      	nop
 800eb88:	20004619 	.word	0x20004619

0800eb8c <__sinit_lock_acquire>:
 800eb8c:	4801      	ldr	r0, [pc, #4]	; (800eb94 <__sinit_lock_acquire+0x8>)
 800eb8e:	f000 b8a7 	b.w	800ece0 <__retarget_lock_acquire_recursive>
 800eb92:	bf00      	nop
 800eb94:	2000461a 	.word	0x2000461a

0800eb98 <__sinit_lock_release>:
 800eb98:	4801      	ldr	r0, [pc, #4]	; (800eba0 <__sinit_lock_release+0x8>)
 800eb9a:	f000 b8a2 	b.w	800ece2 <__retarget_lock_release_recursive>
 800eb9e:	bf00      	nop
 800eba0:	2000461a 	.word	0x2000461a

0800eba4 <__sinit>:
 800eba4:	b510      	push	{r4, lr}
 800eba6:	4604      	mov	r4, r0
 800eba8:	f7ff fff0 	bl	800eb8c <__sinit_lock_acquire>
 800ebac:	69a3      	ldr	r3, [r4, #24]
 800ebae:	b11b      	cbz	r3, 800ebb8 <__sinit+0x14>
 800ebb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ebb4:	f7ff bff0 	b.w	800eb98 <__sinit_lock_release>
 800ebb8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ebbc:	6523      	str	r3, [r4, #80]	; 0x50
 800ebbe:	4b13      	ldr	r3, [pc, #76]	; (800ec0c <__sinit+0x68>)
 800ebc0:	4a13      	ldr	r2, [pc, #76]	; (800ec10 <__sinit+0x6c>)
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	62a2      	str	r2, [r4, #40]	; 0x28
 800ebc6:	42a3      	cmp	r3, r4
 800ebc8:	bf04      	itt	eq
 800ebca:	2301      	moveq	r3, #1
 800ebcc:	61a3      	streq	r3, [r4, #24]
 800ebce:	4620      	mov	r0, r4
 800ebd0:	f000 f820 	bl	800ec14 <__sfp>
 800ebd4:	6060      	str	r0, [r4, #4]
 800ebd6:	4620      	mov	r0, r4
 800ebd8:	f000 f81c 	bl	800ec14 <__sfp>
 800ebdc:	60a0      	str	r0, [r4, #8]
 800ebde:	4620      	mov	r0, r4
 800ebe0:	f000 f818 	bl	800ec14 <__sfp>
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	60e0      	str	r0, [r4, #12]
 800ebe8:	2104      	movs	r1, #4
 800ebea:	6860      	ldr	r0, [r4, #4]
 800ebec:	f7ff ff82 	bl	800eaf4 <std>
 800ebf0:	68a0      	ldr	r0, [r4, #8]
 800ebf2:	2201      	movs	r2, #1
 800ebf4:	2109      	movs	r1, #9
 800ebf6:	f7ff ff7d 	bl	800eaf4 <std>
 800ebfa:	68e0      	ldr	r0, [r4, #12]
 800ebfc:	2202      	movs	r2, #2
 800ebfe:	2112      	movs	r1, #18
 800ec00:	f7ff ff78 	bl	800eaf4 <std>
 800ec04:	2301      	movs	r3, #1
 800ec06:	61a3      	str	r3, [r4, #24]
 800ec08:	e7d2      	b.n	800ebb0 <__sinit+0xc>
 800ec0a:	bf00      	nop
 800ec0c:	0800f398 	.word	0x0800f398
 800ec10:	0800eb3d 	.word	0x0800eb3d

0800ec14 <__sfp>:
 800ec14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec16:	4607      	mov	r7, r0
 800ec18:	f7ff ffac 	bl	800eb74 <__sfp_lock_acquire>
 800ec1c:	4b1e      	ldr	r3, [pc, #120]	; (800ec98 <__sfp+0x84>)
 800ec1e:	681e      	ldr	r6, [r3, #0]
 800ec20:	69b3      	ldr	r3, [r6, #24]
 800ec22:	b913      	cbnz	r3, 800ec2a <__sfp+0x16>
 800ec24:	4630      	mov	r0, r6
 800ec26:	f7ff ffbd 	bl	800eba4 <__sinit>
 800ec2a:	3648      	adds	r6, #72	; 0x48
 800ec2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ec30:	3b01      	subs	r3, #1
 800ec32:	d503      	bpl.n	800ec3c <__sfp+0x28>
 800ec34:	6833      	ldr	r3, [r6, #0]
 800ec36:	b30b      	cbz	r3, 800ec7c <__sfp+0x68>
 800ec38:	6836      	ldr	r6, [r6, #0]
 800ec3a:	e7f7      	b.n	800ec2c <__sfp+0x18>
 800ec3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ec40:	b9d5      	cbnz	r5, 800ec78 <__sfp+0x64>
 800ec42:	4b16      	ldr	r3, [pc, #88]	; (800ec9c <__sfp+0x88>)
 800ec44:	60e3      	str	r3, [r4, #12]
 800ec46:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ec4a:	6665      	str	r5, [r4, #100]	; 0x64
 800ec4c:	f000 f847 	bl	800ecde <__retarget_lock_init_recursive>
 800ec50:	f7ff ff96 	bl	800eb80 <__sfp_lock_release>
 800ec54:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ec58:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ec5c:	6025      	str	r5, [r4, #0]
 800ec5e:	61a5      	str	r5, [r4, #24]
 800ec60:	2208      	movs	r2, #8
 800ec62:	4629      	mov	r1, r5
 800ec64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ec68:	f7fb fd22 	bl	800a6b0 <memset>
 800ec6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ec70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ec74:	4620      	mov	r0, r4
 800ec76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec78:	3468      	adds	r4, #104	; 0x68
 800ec7a:	e7d9      	b.n	800ec30 <__sfp+0x1c>
 800ec7c:	2104      	movs	r1, #4
 800ec7e:	4638      	mov	r0, r7
 800ec80:	f7ff ff62 	bl	800eb48 <__sfmoreglue>
 800ec84:	4604      	mov	r4, r0
 800ec86:	6030      	str	r0, [r6, #0]
 800ec88:	2800      	cmp	r0, #0
 800ec8a:	d1d5      	bne.n	800ec38 <__sfp+0x24>
 800ec8c:	f7ff ff78 	bl	800eb80 <__sfp_lock_release>
 800ec90:	230c      	movs	r3, #12
 800ec92:	603b      	str	r3, [r7, #0]
 800ec94:	e7ee      	b.n	800ec74 <__sfp+0x60>
 800ec96:	bf00      	nop
 800ec98:	0800f398 	.word	0x0800f398
 800ec9c:	ffff0001 	.word	0xffff0001

0800eca0 <_fwalk_reent>:
 800eca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eca4:	4606      	mov	r6, r0
 800eca6:	4688      	mov	r8, r1
 800eca8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ecac:	2700      	movs	r7, #0
 800ecae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ecb2:	f1b9 0901 	subs.w	r9, r9, #1
 800ecb6:	d505      	bpl.n	800ecc4 <_fwalk_reent+0x24>
 800ecb8:	6824      	ldr	r4, [r4, #0]
 800ecba:	2c00      	cmp	r4, #0
 800ecbc:	d1f7      	bne.n	800ecae <_fwalk_reent+0xe>
 800ecbe:	4638      	mov	r0, r7
 800ecc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ecc4:	89ab      	ldrh	r3, [r5, #12]
 800ecc6:	2b01      	cmp	r3, #1
 800ecc8:	d907      	bls.n	800ecda <_fwalk_reent+0x3a>
 800ecca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ecce:	3301      	adds	r3, #1
 800ecd0:	d003      	beq.n	800ecda <_fwalk_reent+0x3a>
 800ecd2:	4629      	mov	r1, r5
 800ecd4:	4630      	mov	r0, r6
 800ecd6:	47c0      	blx	r8
 800ecd8:	4307      	orrs	r7, r0
 800ecda:	3568      	adds	r5, #104	; 0x68
 800ecdc:	e7e9      	b.n	800ecb2 <_fwalk_reent+0x12>

0800ecde <__retarget_lock_init_recursive>:
 800ecde:	4770      	bx	lr

0800ece0 <__retarget_lock_acquire_recursive>:
 800ece0:	4770      	bx	lr

0800ece2 <__retarget_lock_release_recursive>:
 800ece2:	4770      	bx	lr

0800ece4 <__swhatbuf_r>:
 800ece4:	b570      	push	{r4, r5, r6, lr}
 800ece6:	460e      	mov	r6, r1
 800ece8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecec:	2900      	cmp	r1, #0
 800ecee:	b096      	sub	sp, #88	; 0x58
 800ecf0:	4614      	mov	r4, r2
 800ecf2:	461d      	mov	r5, r3
 800ecf4:	da08      	bge.n	800ed08 <__swhatbuf_r+0x24>
 800ecf6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ecfa:	2200      	movs	r2, #0
 800ecfc:	602a      	str	r2, [r5, #0]
 800ecfe:	061a      	lsls	r2, r3, #24
 800ed00:	d410      	bmi.n	800ed24 <__swhatbuf_r+0x40>
 800ed02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ed06:	e00e      	b.n	800ed26 <__swhatbuf_r+0x42>
 800ed08:	466a      	mov	r2, sp
 800ed0a:	f000 f903 	bl	800ef14 <_fstat_r>
 800ed0e:	2800      	cmp	r0, #0
 800ed10:	dbf1      	blt.n	800ecf6 <__swhatbuf_r+0x12>
 800ed12:	9a01      	ldr	r2, [sp, #4]
 800ed14:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ed18:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ed1c:	425a      	negs	r2, r3
 800ed1e:	415a      	adcs	r2, r3
 800ed20:	602a      	str	r2, [r5, #0]
 800ed22:	e7ee      	b.n	800ed02 <__swhatbuf_r+0x1e>
 800ed24:	2340      	movs	r3, #64	; 0x40
 800ed26:	2000      	movs	r0, #0
 800ed28:	6023      	str	r3, [r4, #0]
 800ed2a:	b016      	add	sp, #88	; 0x58
 800ed2c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ed30 <__smakebuf_r>:
 800ed30:	898b      	ldrh	r3, [r1, #12]
 800ed32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ed34:	079d      	lsls	r5, r3, #30
 800ed36:	4606      	mov	r6, r0
 800ed38:	460c      	mov	r4, r1
 800ed3a:	d507      	bpl.n	800ed4c <__smakebuf_r+0x1c>
 800ed3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ed40:	6023      	str	r3, [r4, #0]
 800ed42:	6123      	str	r3, [r4, #16]
 800ed44:	2301      	movs	r3, #1
 800ed46:	6163      	str	r3, [r4, #20]
 800ed48:	b002      	add	sp, #8
 800ed4a:	bd70      	pop	{r4, r5, r6, pc}
 800ed4c:	ab01      	add	r3, sp, #4
 800ed4e:	466a      	mov	r2, sp
 800ed50:	f7ff ffc8 	bl	800ece4 <__swhatbuf_r>
 800ed54:	9900      	ldr	r1, [sp, #0]
 800ed56:	4605      	mov	r5, r0
 800ed58:	4630      	mov	r0, r6
 800ed5a:	f7ff f957 	bl	800e00c <_malloc_r>
 800ed5e:	b948      	cbnz	r0, 800ed74 <__smakebuf_r+0x44>
 800ed60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed64:	059a      	lsls	r2, r3, #22
 800ed66:	d4ef      	bmi.n	800ed48 <__smakebuf_r+0x18>
 800ed68:	f023 0303 	bic.w	r3, r3, #3
 800ed6c:	f043 0302 	orr.w	r3, r3, #2
 800ed70:	81a3      	strh	r3, [r4, #12]
 800ed72:	e7e3      	b.n	800ed3c <__smakebuf_r+0xc>
 800ed74:	4b0d      	ldr	r3, [pc, #52]	; (800edac <__smakebuf_r+0x7c>)
 800ed76:	62b3      	str	r3, [r6, #40]	; 0x28
 800ed78:	89a3      	ldrh	r3, [r4, #12]
 800ed7a:	6020      	str	r0, [r4, #0]
 800ed7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed80:	81a3      	strh	r3, [r4, #12]
 800ed82:	9b00      	ldr	r3, [sp, #0]
 800ed84:	6163      	str	r3, [r4, #20]
 800ed86:	9b01      	ldr	r3, [sp, #4]
 800ed88:	6120      	str	r0, [r4, #16]
 800ed8a:	b15b      	cbz	r3, 800eda4 <__smakebuf_r+0x74>
 800ed8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ed90:	4630      	mov	r0, r6
 800ed92:	f000 f8d1 	bl	800ef38 <_isatty_r>
 800ed96:	b128      	cbz	r0, 800eda4 <__smakebuf_r+0x74>
 800ed98:	89a3      	ldrh	r3, [r4, #12]
 800ed9a:	f023 0303 	bic.w	r3, r3, #3
 800ed9e:	f043 0301 	orr.w	r3, r3, #1
 800eda2:	81a3      	strh	r3, [r4, #12]
 800eda4:	89a0      	ldrh	r0, [r4, #12]
 800eda6:	4305      	orrs	r5, r0
 800eda8:	81a5      	strh	r5, [r4, #12]
 800edaa:	e7cd      	b.n	800ed48 <__smakebuf_r+0x18>
 800edac:	0800eb3d 	.word	0x0800eb3d

0800edb0 <_malloc_usable_size_r>:
 800edb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800edb4:	1f18      	subs	r0, r3, #4
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	bfbc      	itt	lt
 800edba:	580b      	ldrlt	r3, [r1, r0]
 800edbc:	18c0      	addlt	r0, r0, r3
 800edbe:	4770      	bx	lr

0800edc0 <_raise_r>:
 800edc0:	291f      	cmp	r1, #31
 800edc2:	b538      	push	{r3, r4, r5, lr}
 800edc4:	4604      	mov	r4, r0
 800edc6:	460d      	mov	r5, r1
 800edc8:	d904      	bls.n	800edd4 <_raise_r+0x14>
 800edca:	2316      	movs	r3, #22
 800edcc:	6003      	str	r3, [r0, #0]
 800edce:	f04f 30ff 	mov.w	r0, #4294967295
 800edd2:	bd38      	pop	{r3, r4, r5, pc}
 800edd4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800edd6:	b112      	cbz	r2, 800edde <_raise_r+0x1e>
 800edd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eddc:	b94b      	cbnz	r3, 800edf2 <_raise_r+0x32>
 800edde:	4620      	mov	r0, r4
 800ede0:	f000 f830 	bl	800ee44 <_getpid_r>
 800ede4:	462a      	mov	r2, r5
 800ede6:	4601      	mov	r1, r0
 800ede8:	4620      	mov	r0, r4
 800edea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800edee:	f000 b817 	b.w	800ee20 <_kill_r>
 800edf2:	2b01      	cmp	r3, #1
 800edf4:	d00a      	beq.n	800ee0c <_raise_r+0x4c>
 800edf6:	1c59      	adds	r1, r3, #1
 800edf8:	d103      	bne.n	800ee02 <_raise_r+0x42>
 800edfa:	2316      	movs	r3, #22
 800edfc:	6003      	str	r3, [r0, #0]
 800edfe:	2001      	movs	r0, #1
 800ee00:	e7e7      	b.n	800edd2 <_raise_r+0x12>
 800ee02:	2400      	movs	r4, #0
 800ee04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ee08:	4628      	mov	r0, r5
 800ee0a:	4798      	blx	r3
 800ee0c:	2000      	movs	r0, #0
 800ee0e:	e7e0      	b.n	800edd2 <_raise_r+0x12>

0800ee10 <raise>:
 800ee10:	4b02      	ldr	r3, [pc, #8]	; (800ee1c <raise+0xc>)
 800ee12:	4601      	mov	r1, r0
 800ee14:	6818      	ldr	r0, [r3, #0]
 800ee16:	f7ff bfd3 	b.w	800edc0 <_raise_r>
 800ee1a:	bf00      	nop
 800ee1c:	20000080 	.word	0x20000080

0800ee20 <_kill_r>:
 800ee20:	b538      	push	{r3, r4, r5, lr}
 800ee22:	4d07      	ldr	r5, [pc, #28]	; (800ee40 <_kill_r+0x20>)
 800ee24:	2300      	movs	r3, #0
 800ee26:	4604      	mov	r4, r0
 800ee28:	4608      	mov	r0, r1
 800ee2a:	4611      	mov	r1, r2
 800ee2c:	602b      	str	r3, [r5, #0]
 800ee2e:	f7f4 fa79 	bl	8003324 <_kill>
 800ee32:	1c43      	adds	r3, r0, #1
 800ee34:	d102      	bne.n	800ee3c <_kill_r+0x1c>
 800ee36:	682b      	ldr	r3, [r5, #0]
 800ee38:	b103      	cbz	r3, 800ee3c <_kill_r+0x1c>
 800ee3a:	6023      	str	r3, [r4, #0]
 800ee3c:	bd38      	pop	{r3, r4, r5, pc}
 800ee3e:	bf00      	nop
 800ee40:	20004614 	.word	0x20004614

0800ee44 <_getpid_r>:
 800ee44:	f7f4 ba66 	b.w	8003314 <_getpid>

0800ee48 <__sread>:
 800ee48:	b510      	push	{r4, lr}
 800ee4a:	460c      	mov	r4, r1
 800ee4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee50:	f000 f894 	bl	800ef7c <_read_r>
 800ee54:	2800      	cmp	r0, #0
 800ee56:	bfab      	itete	ge
 800ee58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ee5a:	89a3      	ldrhlt	r3, [r4, #12]
 800ee5c:	181b      	addge	r3, r3, r0
 800ee5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ee62:	bfac      	ite	ge
 800ee64:	6563      	strge	r3, [r4, #84]	; 0x54
 800ee66:	81a3      	strhlt	r3, [r4, #12]
 800ee68:	bd10      	pop	{r4, pc}

0800ee6a <__swrite>:
 800ee6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee6e:	461f      	mov	r7, r3
 800ee70:	898b      	ldrh	r3, [r1, #12]
 800ee72:	05db      	lsls	r3, r3, #23
 800ee74:	4605      	mov	r5, r0
 800ee76:	460c      	mov	r4, r1
 800ee78:	4616      	mov	r6, r2
 800ee7a:	d505      	bpl.n	800ee88 <__swrite+0x1e>
 800ee7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee80:	2302      	movs	r3, #2
 800ee82:	2200      	movs	r2, #0
 800ee84:	f000 f868 	bl	800ef58 <_lseek_r>
 800ee88:	89a3      	ldrh	r3, [r4, #12]
 800ee8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ee8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ee92:	81a3      	strh	r3, [r4, #12]
 800ee94:	4632      	mov	r2, r6
 800ee96:	463b      	mov	r3, r7
 800ee98:	4628      	mov	r0, r5
 800ee9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee9e:	f000 b817 	b.w	800eed0 <_write_r>

0800eea2 <__sseek>:
 800eea2:	b510      	push	{r4, lr}
 800eea4:	460c      	mov	r4, r1
 800eea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eeaa:	f000 f855 	bl	800ef58 <_lseek_r>
 800eeae:	1c43      	adds	r3, r0, #1
 800eeb0:	89a3      	ldrh	r3, [r4, #12]
 800eeb2:	bf15      	itete	ne
 800eeb4:	6560      	strne	r0, [r4, #84]	; 0x54
 800eeb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800eeba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800eebe:	81a3      	strheq	r3, [r4, #12]
 800eec0:	bf18      	it	ne
 800eec2:	81a3      	strhne	r3, [r4, #12]
 800eec4:	bd10      	pop	{r4, pc}

0800eec6 <__sclose>:
 800eec6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eeca:	f000 b813 	b.w	800eef4 <_close_r>
	...

0800eed0 <_write_r>:
 800eed0:	b538      	push	{r3, r4, r5, lr}
 800eed2:	4d07      	ldr	r5, [pc, #28]	; (800eef0 <_write_r+0x20>)
 800eed4:	4604      	mov	r4, r0
 800eed6:	4608      	mov	r0, r1
 800eed8:	4611      	mov	r1, r2
 800eeda:	2200      	movs	r2, #0
 800eedc:	602a      	str	r2, [r5, #0]
 800eede:	461a      	mov	r2, r3
 800eee0:	f7f4 fa57 	bl	8003392 <_write>
 800eee4:	1c43      	adds	r3, r0, #1
 800eee6:	d102      	bne.n	800eeee <_write_r+0x1e>
 800eee8:	682b      	ldr	r3, [r5, #0]
 800eeea:	b103      	cbz	r3, 800eeee <_write_r+0x1e>
 800eeec:	6023      	str	r3, [r4, #0]
 800eeee:	bd38      	pop	{r3, r4, r5, pc}
 800eef0:	20004614 	.word	0x20004614

0800eef4 <_close_r>:
 800eef4:	b538      	push	{r3, r4, r5, lr}
 800eef6:	4d06      	ldr	r5, [pc, #24]	; (800ef10 <_close_r+0x1c>)
 800eef8:	2300      	movs	r3, #0
 800eefa:	4604      	mov	r4, r0
 800eefc:	4608      	mov	r0, r1
 800eefe:	602b      	str	r3, [r5, #0]
 800ef00:	f7f4 fa63 	bl	80033ca <_close>
 800ef04:	1c43      	adds	r3, r0, #1
 800ef06:	d102      	bne.n	800ef0e <_close_r+0x1a>
 800ef08:	682b      	ldr	r3, [r5, #0]
 800ef0a:	b103      	cbz	r3, 800ef0e <_close_r+0x1a>
 800ef0c:	6023      	str	r3, [r4, #0]
 800ef0e:	bd38      	pop	{r3, r4, r5, pc}
 800ef10:	20004614 	.word	0x20004614

0800ef14 <_fstat_r>:
 800ef14:	b538      	push	{r3, r4, r5, lr}
 800ef16:	4d07      	ldr	r5, [pc, #28]	; (800ef34 <_fstat_r+0x20>)
 800ef18:	2300      	movs	r3, #0
 800ef1a:	4604      	mov	r4, r0
 800ef1c:	4608      	mov	r0, r1
 800ef1e:	4611      	mov	r1, r2
 800ef20:	602b      	str	r3, [r5, #0]
 800ef22:	f7f4 fa5e 	bl	80033e2 <_fstat>
 800ef26:	1c43      	adds	r3, r0, #1
 800ef28:	d102      	bne.n	800ef30 <_fstat_r+0x1c>
 800ef2a:	682b      	ldr	r3, [r5, #0]
 800ef2c:	b103      	cbz	r3, 800ef30 <_fstat_r+0x1c>
 800ef2e:	6023      	str	r3, [r4, #0]
 800ef30:	bd38      	pop	{r3, r4, r5, pc}
 800ef32:	bf00      	nop
 800ef34:	20004614 	.word	0x20004614

0800ef38 <_isatty_r>:
 800ef38:	b538      	push	{r3, r4, r5, lr}
 800ef3a:	4d06      	ldr	r5, [pc, #24]	; (800ef54 <_isatty_r+0x1c>)
 800ef3c:	2300      	movs	r3, #0
 800ef3e:	4604      	mov	r4, r0
 800ef40:	4608      	mov	r0, r1
 800ef42:	602b      	str	r3, [r5, #0]
 800ef44:	f7f4 fa5d 	bl	8003402 <_isatty>
 800ef48:	1c43      	adds	r3, r0, #1
 800ef4a:	d102      	bne.n	800ef52 <_isatty_r+0x1a>
 800ef4c:	682b      	ldr	r3, [r5, #0]
 800ef4e:	b103      	cbz	r3, 800ef52 <_isatty_r+0x1a>
 800ef50:	6023      	str	r3, [r4, #0]
 800ef52:	bd38      	pop	{r3, r4, r5, pc}
 800ef54:	20004614 	.word	0x20004614

0800ef58 <_lseek_r>:
 800ef58:	b538      	push	{r3, r4, r5, lr}
 800ef5a:	4d07      	ldr	r5, [pc, #28]	; (800ef78 <_lseek_r+0x20>)
 800ef5c:	4604      	mov	r4, r0
 800ef5e:	4608      	mov	r0, r1
 800ef60:	4611      	mov	r1, r2
 800ef62:	2200      	movs	r2, #0
 800ef64:	602a      	str	r2, [r5, #0]
 800ef66:	461a      	mov	r2, r3
 800ef68:	f7f4 fa56 	bl	8003418 <_lseek>
 800ef6c:	1c43      	adds	r3, r0, #1
 800ef6e:	d102      	bne.n	800ef76 <_lseek_r+0x1e>
 800ef70:	682b      	ldr	r3, [r5, #0]
 800ef72:	b103      	cbz	r3, 800ef76 <_lseek_r+0x1e>
 800ef74:	6023      	str	r3, [r4, #0]
 800ef76:	bd38      	pop	{r3, r4, r5, pc}
 800ef78:	20004614 	.word	0x20004614

0800ef7c <_read_r>:
 800ef7c:	b538      	push	{r3, r4, r5, lr}
 800ef7e:	4d07      	ldr	r5, [pc, #28]	; (800ef9c <_read_r+0x20>)
 800ef80:	4604      	mov	r4, r0
 800ef82:	4608      	mov	r0, r1
 800ef84:	4611      	mov	r1, r2
 800ef86:	2200      	movs	r2, #0
 800ef88:	602a      	str	r2, [r5, #0]
 800ef8a:	461a      	mov	r2, r3
 800ef8c:	f7f4 f9e4 	bl	8003358 <_read>
 800ef90:	1c43      	adds	r3, r0, #1
 800ef92:	d102      	bne.n	800ef9a <_read_r+0x1e>
 800ef94:	682b      	ldr	r3, [r5, #0]
 800ef96:	b103      	cbz	r3, 800ef9a <_read_r+0x1e>
 800ef98:	6023      	str	r3, [r4, #0]
 800ef9a:	bd38      	pop	{r3, r4, r5, pc}
 800ef9c:	20004614 	.word	0x20004614

0800efa0 <_init>:
 800efa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efa2:	bf00      	nop
 800efa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800efa6:	bc08      	pop	{r3}
 800efa8:	469e      	mov	lr, r3
 800efaa:	4770      	bx	lr

0800efac <_fini>:
 800efac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efae:	bf00      	nop
 800efb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800efb2:	bc08      	pop	{r3}
 800efb4:	469e      	mov	lr, r3
 800efb6:	4770      	bx	lr
