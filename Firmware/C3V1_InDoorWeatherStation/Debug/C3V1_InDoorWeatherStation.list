
C3V1_InDoorWeatherStation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e18  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08007fd8  08007fd8  00017fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008090  08008090  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08008090  08008090  00018090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008098  08008098  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008098  08008098  00018098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800809c  0800809c  0001809c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080080a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c58  20000010  080080b0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c68  080080b0  00021c68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fe0d  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040b2  00000000  00000000  0003fe4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ab0  00000000  00000000  00043f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001908  00000000  00000000  000459b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ebd5  00000000  00000000  000472b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fd4d  00000000  00000000  00075e8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011e5c5  00000000  00000000  00095bda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b419f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fd4  00000000  00000000  001b41f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000010 	.word	0x20000010
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08007fc0 	.word	0x08007fc0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000014 	.word	0x20000014
 80001fc:	08007fc0 	.word	0x08007fc0

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b974 	b.w	8000500 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	468e      	mov	lr, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	d14d      	bne.n	80002da <__udivmoddi4+0xaa>
 800023e:	428a      	cmp	r2, r1
 8000240:	4694      	mov	ip, r2
 8000242:	d969      	bls.n	8000318 <__udivmoddi4+0xe8>
 8000244:	fab2 f282 	clz	r2, r2
 8000248:	b152      	cbz	r2, 8000260 <__udivmoddi4+0x30>
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	f1c2 0120 	rsb	r1, r2, #32
 8000252:	fa20 f101 	lsr.w	r1, r0, r1
 8000256:	fa0c fc02 	lsl.w	ip, ip, r2
 800025a:	ea41 0e03 	orr.w	lr, r1, r3
 800025e:	4094      	lsls	r4, r2
 8000260:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000264:	0c21      	lsrs	r1, r4, #16
 8000266:	fbbe f6f8 	udiv	r6, lr, r8
 800026a:	fa1f f78c 	uxth.w	r7, ip
 800026e:	fb08 e316 	mls	r3, r8, r6, lr
 8000272:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000276:	fb06 f107 	mul.w	r1, r6, r7
 800027a:	4299      	cmp	r1, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x64>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 811f 	bcs.w	80004c8 <__udivmoddi4+0x298>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 811c 	bls.w	80004c8 <__udivmoddi4+0x298>
 8000290:	3e02      	subs	r6, #2
 8000292:	4463      	add	r3, ip
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 f707 	mul.w	r7, r0, r7
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	d90a      	bls.n	80002c2 <__udivmoddi4+0x92>
 80002ac:	eb1c 0404 	adds.w	r4, ip, r4
 80002b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b4:	f080 810a 	bcs.w	80004cc <__udivmoddi4+0x29c>
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	f240 8107 	bls.w	80004cc <__udivmoddi4+0x29c>
 80002be:	4464      	add	r4, ip
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c6:	1be4      	subs	r4, r4, r7
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa4>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xc2>
 80002de:	2d00      	cmp	r5, #0
 80002e0:	f000 80ef 	beq.w	80004c2 <__udivmoddi4+0x292>
 80002e4:	2600      	movs	r6, #0
 80002e6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ea:	4630      	mov	r0, r6
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f683 	clz	r6, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d14a      	bne.n	8000390 <__udivmoddi4+0x160>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd4>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80f9 	bhi.w	80004f6 <__udivmoddi4+0x2c6>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	469e      	mov	lr, r3
 800030e:	2d00      	cmp	r5, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa4>
 8000312:	e9c5 4e00 	strd	r4, lr, [r5]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa4>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xec>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 8092 	bne.w	800044a <__udivmoddi4+0x21a>
 8000326:	eba1 010c 	sub.w	r1, r1, ip
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2601      	movs	r6, #1
 8000334:	0c20      	lsrs	r0, r4, #16
 8000336:	fbb1 f3f7 	udiv	r3, r1, r7
 800033a:	fb07 1113 	mls	r1, r7, r3, r1
 800033e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000342:	fb0e f003 	mul.w	r0, lr, r3
 8000346:	4288      	cmp	r0, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x12c>
 800034a:	eb1c 0101 	adds.w	r1, ip, r1
 800034e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x12a>
 8000354:	4288      	cmp	r0, r1
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2c0>
 800035a:	4643      	mov	r3, r8
 800035c:	1a09      	subs	r1, r1, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb1 f0f7 	udiv	r0, r1, r7
 8000364:	fb07 1110 	mls	r1, r7, r0, r1
 8000368:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x156>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 31ff 	add.w	r1, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x154>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2ca>
 8000384:	4608      	mov	r0, r1
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038e:	e79c      	b.n	80002ca <__udivmoddi4+0x9a>
 8000390:	f1c6 0720 	rsb	r7, r6, #32
 8000394:	40b3      	lsls	r3, r6
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa20 f407 	lsr.w	r4, r0, r7
 80003a2:	fa01 f306 	lsl.w	r3, r1, r6
 80003a6:	431c      	orrs	r4, r3
 80003a8:	40f9      	lsrs	r1, r7
 80003aa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ae:	fa00 f306 	lsl.w	r3, r0, r6
 80003b2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b6:	0c20      	lsrs	r0, r4, #16
 80003b8:	fa1f fe8c 	uxth.w	lr, ip
 80003bc:	fb09 1118 	mls	r1, r9, r8, r1
 80003c0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c4:	fb08 f00e 	mul.w	r0, r8, lr
 80003c8:	4288      	cmp	r0, r1
 80003ca:	fa02 f206 	lsl.w	r2, r2, r6
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b8>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2bc>
 80003dc:	4288      	cmp	r0, r1
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2bc>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4461      	add	r1, ip
 80003e8:	1a09      	subs	r1, r1, r0
 80003ea:	b2a4      	uxth	r4, r4
 80003ec:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f0:	fb09 1110 	mls	r1, r9, r0, r1
 80003f4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003fc:	458e      	cmp	lr, r1
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1e2>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f100 34ff 	add.w	r4, r0, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2b4>
 800040a:	458e      	cmp	lr, r1
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2b4>
 800040e:	3802      	subs	r0, #2
 8000410:	4461      	add	r1, ip
 8000412:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000416:	fba0 9402 	umull	r9, r4, r0, r2
 800041a:	eba1 010e 	sub.w	r1, r1, lr
 800041e:	42a1      	cmp	r1, r4
 8000420:	46c8      	mov	r8, r9
 8000422:	46a6      	mov	lr, r4
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x2a4>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x2a0>
 8000428:	b15d      	cbz	r5, 8000442 <__udivmoddi4+0x212>
 800042a:	ebb3 0208 	subs.w	r2, r3, r8
 800042e:	eb61 010e 	sbc.w	r1, r1, lr
 8000432:	fa01 f707 	lsl.w	r7, r1, r7
 8000436:	fa22 f306 	lsr.w	r3, r2, r6
 800043a:	40f1      	lsrs	r1, r6
 800043c:	431f      	orrs	r7, r3
 800043e:	e9c5 7100 	strd	r7, r1, [r5]
 8000442:	2600      	movs	r6, #0
 8000444:	4631      	mov	r1, r6
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	f1c2 0320 	rsb	r3, r2, #32
 800044e:	40d8      	lsrs	r0, r3
 8000450:	fa0c fc02 	lsl.w	ip, ip, r2
 8000454:	fa21 f303 	lsr.w	r3, r1, r3
 8000458:	4091      	lsls	r1, r2
 800045a:	4301      	orrs	r1, r0
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb3 f0f7 	udiv	r0, r3, r7
 8000468:	fb07 3610 	mls	r6, r7, r0, r3
 800046c:	0c0b      	lsrs	r3, r1, #16
 800046e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000472:	fb00 f60e 	mul.w	r6, r0, lr
 8000476:	429e      	cmp	r6, r3
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x260>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b8>
 8000488:	429e      	cmp	r6, r3
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b8>
 800048c:	3802      	subs	r0, #2
 800048e:	4463      	add	r3, ip
 8000490:	1b9b      	subs	r3, r3, r6
 8000492:	b289      	uxth	r1, r1
 8000494:	fbb3 f6f7 	udiv	r6, r3, r7
 8000498:	fb07 3316 	mls	r3, r7, r6, r3
 800049c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a0:	fb06 f30e 	mul.w	r3, r6, lr
 80004a4:	428b      	cmp	r3, r1
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x28a>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2b0>
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2b0>
 80004b6:	3e02      	subs	r6, #2
 80004b8:	4461      	add	r1, ip
 80004ba:	1ac9      	subs	r1, r1, r3
 80004bc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0x104>
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e705      	b.n	80002d4 <__udivmoddi4+0xa4>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e3      	b.n	8000294 <__udivmoddi4+0x64>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6f8      	b.n	80002c2 <__udivmoddi4+0x92>
 80004d0:	454b      	cmp	r3, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f8>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004dc:	3801      	subs	r0, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f8>
 80004e0:	4646      	mov	r6, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x28a>
 80004e4:	4620      	mov	r0, r4
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1e2>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x260>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b8>
 80004f0:	3b02      	subs	r3, #2
 80004f2:	4461      	add	r1, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x12c>
 80004f6:	4630      	mov	r0, r6
 80004f8:	e709      	b.n	800030e <__udivmoddi4+0xde>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x156>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800050a:	4b12      	ldr	r3, [pc, #72]	; (8000554 <MX_DMA_Init+0x50>)
 800050c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800050e:	4a11      	ldr	r2, [pc, #68]	; (8000554 <MX_DMA_Init+0x50>)
 8000510:	f043 0304 	orr.w	r3, r3, #4
 8000514:	6493      	str	r3, [r2, #72]	; 0x48
 8000516:	4b0f      	ldr	r3, [pc, #60]	; (8000554 <MX_DMA_Init+0x50>)
 8000518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800051a:	f003 0304 	and.w	r3, r3, #4
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000522:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <MX_DMA_Init+0x50>)
 8000524:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000526:	4a0b      	ldr	r2, [pc, #44]	; (8000554 <MX_DMA_Init+0x50>)
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	6493      	str	r3, [r2, #72]	; 0x48
 800052e:	4b09      	ldr	r3, [pc, #36]	; (8000554 <MX_DMA_Init+0x50>)
 8000530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	603b      	str	r3, [r7, #0]
 8000538:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800053a:	2200      	movs	r2, #0
 800053c:	2105      	movs	r1, #5
 800053e:	200b      	movs	r0, #11
 8000540:	f000 ffa1 	bl	8001486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000544:	200b      	movs	r0, #11
 8000546:	f000 ffba 	bl	80014be <HAL_NVIC_EnableIRQ>

}
 800054a:	bf00      	nop
 800054c:	3708      	adds	r7, #8
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40021000 	.word	0x40021000

08000558 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800055c:	4a04      	ldr	r2, [pc, #16]	; (8000570 <MX_FREERTOS_Init+0x18>)
 800055e:	2100      	movs	r1, #0
 8000560:	4804      	ldr	r0, [pc, #16]	; (8000574 <MX_FREERTOS_Init+0x1c>)
 8000562:	f004 ffef 	bl	8005544 <osThreadNew>
 8000566:	4603      	mov	r3, r0
 8000568:	4a03      	ldr	r2, [pc, #12]	; (8000578 <MX_FREERTOS_Init+0x20>)
 800056a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800056c:	bf00      	nop
 800056e:	bd80      	pop	{r7, pc}
 8000570:	08007ffc 	.word	0x08007ffc
 8000574:	0800057d 	.word	0x0800057d
 8000578:	2000002c 	.word	0x2000002c

0800057c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000584:	2001      	movs	r0, #1
 8000586:	f005 f86f 	bl	8005668 <osDelay>
 800058a:	e7fb      	b.n	8000584 <StartDefaultTask+0x8>

0800058c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b088      	sub	sp, #32
 8000590:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000592:	f107 030c 	add.w	r3, r7, #12
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
 80005a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a2:	4b3b      	ldr	r3, [pc, #236]	; (8000690 <MX_GPIO_Init+0x104>)
 80005a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a6:	4a3a      	ldr	r2, [pc, #232]	; (8000690 <MX_GPIO_Init+0x104>)
 80005a8:	f043 0304 	orr.w	r3, r3, #4
 80005ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ae:	4b38      	ldr	r3, [pc, #224]	; (8000690 <MX_GPIO_Init+0x104>)
 80005b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b2:	f003 0304 	and.w	r3, r3, #4
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ba:	4b35      	ldr	r3, [pc, #212]	; (8000690 <MX_GPIO_Init+0x104>)
 80005bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005be:	4a34      	ldr	r2, [pc, #208]	; (8000690 <MX_GPIO_Init+0x104>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005c6:	4b32      	ldr	r3, [pc, #200]	; (8000690 <MX_GPIO_Init+0x104>)
 80005c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d2:	4b2f      	ldr	r3, [pc, #188]	; (8000690 <MX_GPIO_Init+0x104>)
 80005d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d6:	4a2e      	ldr	r2, [pc, #184]	; (8000690 <MX_GPIO_Init+0x104>)
 80005d8:	f043 0302 	orr.w	r3, r3, #2
 80005dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005de:	4b2c      	ldr	r3, [pc, #176]	; (8000690 <MX_GPIO_Init+0x104>)
 80005e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e2:	f003 0302 	and.w	r3, r3, #2
 80005e6:	603b      	str	r3, [r7, #0]
 80005e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PMS_RST_GPIO_Port, PMS_RST_Pin, GPIO_PIN_RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f0:	4828      	ldr	r0, [pc, #160]	; (8000694 <MX_GPIO_Init+0x108>)
 80005f2:	f001 facb 	bl	8001b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SSD1331_CS_Pin|HC12_SET_Pin|PMS_SET_Pin, GPIO_PIN_RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	f641 0110 	movw	r1, #6160	; 0x1810
 80005fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000600:	f001 fac4 	bl	8001b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCREENS_DC_Pin|EPAPIER_CS_Pin|EPAPIER_RST_Pin|SSD1331_RST_Pin
 8000604:	2200      	movs	r2, #0
 8000606:	f64b 71c3 	movw	r1, #49091	; 0xbfc3
 800060a:	4823      	ldr	r0, [pc, #140]	; (8000698 <MX_GPIO_Init+0x10c>)
 800060c:	f001 fabe 	bl	8001b8c <HAL_GPIO_WritePin>
                          |SSD1331_RSTB12_Pin|BME280_CS_Pin|DS18B20_Pin|FRAM_CS_Pin
                          |FRAM_WP_Pin|FRAM_HOLD_Pin|FLASH_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PMS_RST_Pin;
 8000610:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000614:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000616:	2301      	movs	r3, #1
 8000618:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	2300      	movs	r3, #0
 800061c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061e:	2300      	movs	r3, #0
 8000620:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PMS_RST_GPIO_Port, &GPIO_InitStruct);
 8000622:	f107 030c 	add.w	r3, r7, #12
 8000626:	4619      	mov	r1, r3
 8000628:	481a      	ldr	r0, [pc, #104]	; (8000694 <MX_GPIO_Init+0x108>)
 800062a:	f001 f91d 	bl	8001868 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SSD1331_CS_Pin|HC12_SET_Pin|PMS_SET_Pin;
 800062e:	f641 0310 	movw	r3, #6160	; 0x1810
 8000632:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000634:	2301      	movs	r3, #1
 8000636:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	2300      	movs	r3, #0
 800063a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063c:	2300      	movs	r3, #0
 800063e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	4619      	mov	r1, r3
 8000646:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800064a:	f001 f90d 	bl	8001868 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SCREENS_DC_Pin|EPAPIER_CS_Pin|EPAPIER_RST_Pin|SSD1331_RST_Pin
 800064e:	f64b 73c3 	movw	r3, #49091	; 0xbfc3
 8000652:	60fb      	str	r3, [r7, #12]
                          |SSD1331_RSTB12_Pin|BME280_CS_Pin|DS18B20_Pin|FRAM_CS_Pin
                          |FRAM_WP_Pin|FRAM_HOLD_Pin|FLASH_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000654:	2301      	movs	r3, #1
 8000656:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065c:	2300      	movs	r3, #0
 800065e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	4619      	mov	r1, r3
 8000666:	480c      	ldr	r0, [pc, #48]	; (8000698 <MX_GPIO_Init+0x10c>)
 8000668:	f001 f8fe 	bl	8001868 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = EPAPIER_BUSY_Pin|ENCODER_SWITCH_Pin;
 800066c:	f244 0304 	movw	r3, #16388	; 0x4004
 8000670:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000672:	2300      	movs	r3, #0
 8000674:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800067a:	f107 030c 	add.w	r3, r7, #12
 800067e:	4619      	mov	r1, r3
 8000680:	4805      	ldr	r0, [pc, #20]	; (8000698 <MX_GPIO_Init+0x10c>)
 8000682:	f001 f8f1 	bl	8001868 <HAL_GPIO_Init>

}
 8000686:	bf00      	nop
 8000688:	3720      	adds	r7, #32
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40021000 	.word	0x40021000
 8000694:	48000800 	.word	0x48000800
 8000698:	48000400 	.word	0x48000400

0800069c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a0:	f000 fda1 	bl	80011e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a4:	f000 f819 	bl	80006da <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a8:	f7ff ff70 	bl	800058c <MX_GPIO_Init>
  MX_DMA_Init();
 80006ac:	f7ff ff2a 	bl	8000504 <MX_DMA_Init>
  MX_SPI3_Init();
 80006b0:	f000 f8a8 	bl	8000804 <MX_SPI3_Init>
  MX_TIM1_Init();
 80006b4:	f000 f9c0 	bl	8000a38 <MX_TIM1_Init>
  MX_TIM2_Init();
 80006b8:	f000 fa6a 	bl	8000b90 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80006bc:	f000 fc30 	bl	8000f20 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80006c0:	f000 f862 	bl	8000788 <MX_SPI1_Init>
  MX_TIM5_Init();
 80006c4:	f000 fada 	bl	8000c7c <MX_TIM5_Init>
  MX_USART2_UART_Init();
 80006c8:	f000 fc76 	bl	8000fb8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80006cc:	f004 fef0 	bl	80054b0 <osKernelInitialize>
  MX_FREERTOS_Init();
 80006d0:	f7ff ff42 	bl	8000558 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80006d4:	f004 ff10 	bl	80054f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006d8:	e7fe      	b.n	80006d8 <main+0x3c>

080006da <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006da:	b580      	push	{r7, lr}
 80006dc:	b098      	sub	sp, #96	; 0x60
 80006de:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e0:	f107 0318 	add.w	r3, r7, #24
 80006e4:	2248      	movs	r2, #72	; 0x48
 80006e6:	2100      	movs	r1, #0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f007 fc61 	bl	8007fb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80006fc:	2000      	movs	r0, #0
 80006fe:	f001 fa7d 	bl	8001bfc <HAL_PWREx_ControlVoltageScaling>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000708:	f000 f838 	bl	800077c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800070c:	2310      	movs	r3, #16
 800070e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000710:	2301      	movs	r3, #1
 8000712:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000718:	2360      	movs	r3, #96	; 0x60
 800071a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071c:	2302      	movs	r3, #2
 800071e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000720:	2301      	movs	r3, #1
 8000722:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000724:	2301      	movs	r3, #1
 8000726:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000728:	233c      	movs	r3, #60	; 0x3c
 800072a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800072c:	2302      	movs	r3, #2
 800072e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000730:	2302      	movs	r3, #2
 8000732:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000734:	2302      	movs	r3, #2
 8000736:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000738:	f107 0318 	add.w	r3, r7, #24
 800073c:	4618      	mov	r0, r3
 800073e:	f001 fb01 	bl	8001d44 <HAL_RCC_OscConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000748:	f000 f818 	bl	800077c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074c:	230f      	movs	r3, #15
 800074e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000750:	2303      	movs	r3, #3
 8000752:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000758:	2300      	movs	r3, #0
 800075a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	2105      	movs	r1, #5
 8000764:	4618      	mov	r0, r3
 8000766:	f001 ff69 	bl	800263c <HAL_RCC_ClockConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000770:	f000 f804 	bl	800077c <Error_Handler>
  }
}
 8000774:	bf00      	nop
 8000776:	3760      	adds	r7, #96	; 0x60
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}

0800077c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000780:	b672      	cpsid	i
}
 8000782:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000784:	e7fe      	b.n	8000784 <Error_Handler+0x8>
	...

08000788 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800078c:	4b1b      	ldr	r3, [pc, #108]	; (80007fc <MX_SPI1_Init+0x74>)
 800078e:	4a1c      	ldr	r2, [pc, #112]	; (8000800 <MX_SPI1_Init+0x78>)
 8000790:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000792:	4b1a      	ldr	r3, [pc, #104]	; (80007fc <MX_SPI1_Init+0x74>)
 8000794:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000798:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800079a:	4b18      	ldr	r3, [pc, #96]	; (80007fc <MX_SPI1_Init+0x74>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80007a0:	4b16      	ldr	r3, [pc, #88]	; (80007fc <MX_SPI1_Init+0x74>)
 80007a2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80007a6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007a8:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_SPI1_Init+0x74>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007ae:	4b13      	ldr	r3, [pc, #76]	; (80007fc <MX_SPI1_Init+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_SPI1_Init+0x74>)
 80007b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007ba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_SPI1_Init+0x74>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_SPI1_Init+0x74>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_SPI1_Init+0x74>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_SPI1_Init+0x74>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_SPI1_Init+0x74>)
 80007d6:	2207      	movs	r2, #7
 80007d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_SPI1_Init+0x74>)
 80007dc:	2200      	movs	r2, #0
 80007de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_SPI1_Init+0x74>)
 80007e2:	2208      	movs	r2, #8
 80007e4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_SPI1_Init+0x74>)
 80007e8:	f002 ff3a 	bl	8003660 <HAL_SPI_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80007f2:	f7ff ffc3 	bl	800077c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000030 	.word	0x20000030
 8000800:	40013000 	.word	0x40013000

08000804 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000808:	4b1b      	ldr	r3, [pc, #108]	; (8000878 <MX_SPI3_Init+0x74>)
 800080a:	4a1c      	ldr	r2, [pc, #112]	; (800087c <MX_SPI3_Init+0x78>)
 800080c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800080e:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <MX_SPI3_Init+0x74>)
 8000810:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000814:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000816:	4b18      	ldr	r3, [pc, #96]	; (8000878 <MX_SPI3_Init+0x74>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800081c:	4b16      	ldr	r3, [pc, #88]	; (8000878 <MX_SPI3_Init+0x74>)
 800081e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000822:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000824:	4b14      	ldr	r3, [pc, #80]	; (8000878 <MX_SPI3_Init+0x74>)
 8000826:	2200      	movs	r2, #0
 8000828:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800082a:	4b13      	ldr	r3, [pc, #76]	; (8000878 <MX_SPI3_Init+0x74>)
 800082c:	2200      	movs	r2, #0
 800082e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000830:	4b11      	ldr	r3, [pc, #68]	; (8000878 <MX_SPI3_Init+0x74>)
 8000832:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000836:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <MX_SPI3_Init+0x74>)
 800083a:	2200      	movs	r2, #0
 800083c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <MX_SPI3_Init+0x74>)
 8000840:	2200      	movs	r2, #0
 8000842:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <MX_SPI3_Init+0x74>)
 8000846:	2200      	movs	r2, #0
 8000848:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <MX_SPI3_Init+0x74>)
 800084c:	2200      	movs	r2, #0
 800084e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MX_SPI3_Init+0x74>)
 8000852:	2207      	movs	r2, #7
 8000854:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <MX_SPI3_Init+0x74>)
 8000858:	2200      	movs	r2, #0
 800085a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_SPI3_Init+0x74>)
 800085e:	2208      	movs	r2, #8
 8000860:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000862:	4805      	ldr	r0, [pc, #20]	; (8000878 <MX_SPI3_Init+0x74>)
 8000864:	f002 fefc 	bl	8003660 <HAL_SPI_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800086e:	f7ff ff85 	bl	800077c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000094 	.word	0x20000094
 800087c:	40003c00 	.word	0x40003c00

08000880 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08c      	sub	sp, #48	; 0x30
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a2e      	ldr	r2, [pc, #184]	; (8000958 <HAL_SPI_MspInit+0xd8>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d129      	bne.n	80008f6 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008a2:	4b2e      	ldr	r3, [pc, #184]	; (800095c <HAL_SPI_MspInit+0xdc>)
 80008a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008a6:	4a2d      	ldr	r2, [pc, #180]	; (800095c <HAL_SPI_MspInit+0xdc>)
 80008a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008ac:	6613      	str	r3, [r2, #96]	; 0x60
 80008ae:	4b2b      	ldr	r3, [pc, #172]	; (800095c <HAL_SPI_MspInit+0xdc>)
 80008b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008b6:	61bb      	str	r3, [r7, #24]
 80008b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	4b28      	ldr	r3, [pc, #160]	; (800095c <HAL_SPI_MspInit+0xdc>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008be:	4a27      	ldr	r2, [pc, #156]	; (800095c <HAL_SPI_MspInit+0xdc>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008c6:	4b25      	ldr	r3, [pc, #148]	; (800095c <HAL_SPI_MspInit+0xdc>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	617b      	str	r3, [r7, #20]
 80008d0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80008d2:	23e0      	movs	r3, #224	; 0xe0
 80008d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d6:	2302      	movs	r3, #2
 80008d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008de:	2303      	movs	r3, #3
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008e2:	2305      	movs	r3, #5
 80008e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f0:	f000 ffba 	bl	8001868 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80008f4:	e02c      	b.n	8000950 <HAL_SPI_MspInit+0xd0>
  else if(spiHandle->Instance==SPI3)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a19      	ldr	r2, [pc, #100]	; (8000960 <HAL_SPI_MspInit+0xe0>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d127      	bne.n	8000950 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000900:	4b16      	ldr	r3, [pc, #88]	; (800095c <HAL_SPI_MspInit+0xdc>)
 8000902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000904:	4a15      	ldr	r2, [pc, #84]	; (800095c <HAL_SPI_MspInit+0xdc>)
 8000906:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800090a:	6593      	str	r3, [r2, #88]	; 0x58
 800090c:	4b13      	ldr	r3, [pc, #76]	; (800095c <HAL_SPI_MspInit+0xdc>)
 800090e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000910:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000914:	613b      	str	r3, [r7, #16]
 8000916:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000918:	4b10      	ldr	r3, [pc, #64]	; (800095c <HAL_SPI_MspInit+0xdc>)
 800091a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091c:	4a0f      	ldr	r2, [pc, #60]	; (800095c <HAL_SPI_MspInit+0xdc>)
 800091e:	f043 0302 	orr.w	r3, r3, #2
 8000922:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000924:	4b0d      	ldr	r3, [pc, #52]	; (800095c <HAL_SPI_MspInit+0xdc>)
 8000926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000928:	f003 0302 	and.w	r3, r3, #2
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000930:	2338      	movs	r3, #56	; 0x38
 8000932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000934:	2302      	movs	r3, #2
 8000936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093c:	2303      	movs	r3, #3
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000940:	2306      	movs	r3, #6
 8000942:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	4619      	mov	r1, r3
 800094a:	4806      	ldr	r0, [pc, #24]	; (8000964 <HAL_SPI_MspInit+0xe4>)
 800094c:	f000 ff8c 	bl	8001868 <HAL_GPIO_Init>
}
 8000950:	bf00      	nop
 8000952:	3730      	adds	r7, #48	; 0x30
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40013000 	.word	0x40013000
 800095c:	40021000 	.word	0x40021000
 8000960:	40003c00 	.word	0x40003c00
 8000964:	48000400 	.word	0x48000400

08000968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096e:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <HAL_MspInit+0x4c>)
 8000970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000972:	4a10      	ldr	r2, [pc, #64]	; (80009b4 <HAL_MspInit+0x4c>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	6613      	str	r3, [r2, #96]	; 0x60
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <HAL_MspInit+0x4c>)
 800097c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <HAL_MspInit+0x4c>)
 8000988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800098a:	4a0a      	ldr	r2, [pc, #40]	; (80009b4 <HAL_MspInit+0x4c>)
 800098c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000990:	6593      	str	r3, [r2, #88]	; 0x58
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <HAL_MspInit+0x4c>)
 8000994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	210f      	movs	r1, #15
 80009a2:	f06f 0001 	mvn.w	r0, #1
 80009a6:	f000 fd6e 	bl	8001486 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40021000 	.word	0x40021000

080009b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <NMI_Handler+0x4>

080009be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <HardFault_Handler+0x4>

080009c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <MemManage_Handler+0x4>

080009ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <BusFault_Handler+0x4>

080009d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <UsageFault_Handler+0x4>

080009d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e8:	f000 fc52 	bl	8001290 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80009ec:	f006 fa4a 	bl	8006e84 <xTaskGetSchedulerState>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d001      	beq.n	80009fa <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80009f6:	f007 f82f 	bl	8007a58 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
	...

08000a00 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000a04:	4802      	ldr	r0, [pc, #8]	; (8000a10 <DMA1_Channel1_IRQHandler+0x10>)
 8000a06:	f000 fe1d 	bl	8001644 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200001dc 	.word	0x200001dc

08000a14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <SystemInit+0x20>)
 8000a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a1e:	4a05      	ldr	r2, [pc, #20]	; (8000a34 <SystemInit+0x20>)
 8000a20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b09a      	sub	sp, #104	; 0x68
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a3e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a4c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a58:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
 8000a68:	615a      	str	r2, [r3, #20]
 8000a6a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	222c      	movs	r2, #44	; 0x2c
 8000a70:	2100      	movs	r1, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f007 fa9c 	bl	8007fb0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a78:	4b43      	ldr	r3, [pc, #268]	; (8000b88 <MX_TIM1_Init+0x150>)
 8000a7a:	4a44      	ldr	r2, [pc, #272]	; (8000b8c <MX_TIM1_Init+0x154>)
 8000a7c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a7e:	4b42      	ldr	r3, [pc, #264]	; (8000b88 <MX_TIM1_Init+0x150>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a84:	4b40      	ldr	r3, [pc, #256]	; (8000b88 <MX_TIM1_Init+0x150>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a8a:	4b3f      	ldr	r3, [pc, #252]	; (8000b88 <MX_TIM1_Init+0x150>)
 8000a8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a90:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a92:	4b3d      	ldr	r3, [pc, #244]	; (8000b88 <MX_TIM1_Init+0x150>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a98:	4b3b      	ldr	r3, [pc, #236]	; (8000b88 <MX_TIM1_Init+0x150>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a9e:	4b3a      	ldr	r3, [pc, #232]	; (8000b88 <MX_TIM1_Init+0x150>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000aa4:	4838      	ldr	r0, [pc, #224]	; (8000b88 <MX_TIM1_Init+0x150>)
 8000aa6:	f002 fe7e 	bl	80037a6 <HAL_TIM_Base_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000ab0:	f7ff fe64 	bl	800077c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ab4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000aba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4831      	ldr	r0, [pc, #196]	; (8000b88 <MX_TIM1_Init+0x150>)
 8000ac2:	f003 f8e3 	bl	8003c8c <HAL_TIM_ConfigClockSource>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000acc:	f7ff fe56 	bl	800077c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ad0:	482d      	ldr	r0, [pc, #180]	; (8000b88 <MX_TIM1_Init+0x150>)
 8000ad2:	f002 febf 	bl	8003854 <HAL_TIM_PWM_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000adc:	f7ff fe4e 	bl	800077c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000aec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000af0:	4619      	mov	r1, r3
 8000af2:	4825      	ldr	r0, [pc, #148]	; (8000b88 <MX_TIM1_Init+0x150>)
 8000af4:	f003 fd9e 	bl	8004634 <HAL_TIMEx_MasterConfigSynchronization>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000afe:	f7ff fe3d 	bl	800077c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b02:	2360      	movs	r3, #96	; 0x60
 8000b04:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b12:	2300      	movs	r3, #0
 8000b14:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b16:	2300      	movs	r3, #0
 8000b18:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b22:	2200      	movs	r2, #0
 8000b24:	4619      	mov	r1, r3
 8000b26:	4818      	ldr	r0, [pc, #96]	; (8000b88 <MX_TIM1_Init+0x150>)
 8000b28:	f002 ff9c 	bl	8003a64 <HAL_TIM_PWM_ConfigChannel>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000b32:	f7ff fe23 	bl	800077c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b36:	2300      	movs	r3, #0
 8000b38:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b46:	2300      	movs	r3, #0
 8000b48:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b4e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b54:	2300      	movs	r3, #0
 8000b56:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b62:	2300      	movs	r3, #0
 8000b64:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4807      	ldr	r0, [pc, #28]	; (8000b88 <MX_TIM1_Init+0x150>)
 8000b6c:	f003 fdea 	bl	8004744 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000b76:	f7ff fe01 	bl	800077c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b7a:	4803      	ldr	r0, [pc, #12]	; (8000b88 <MX_TIM1_Init+0x150>)
 8000b7c:	f000 f974 	bl	8000e68 <HAL_TIM_MspPostInit>

}
 8000b80:	bf00      	nop
 8000b82:	3768      	adds	r7, #104	; 0x68
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	200000f8 	.word	0x200000f8
 8000b8c:	40012c00 	.word	0x40012c00

08000b90 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08e      	sub	sp, #56	; 0x38
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	609a      	str	r2, [r3, #8]
 8000ba2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba4:	f107 031c 	add.w	r3, r7, #28
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bb0:	463b      	mov	r3, r7
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	611a      	str	r2, [r3, #16]
 8000bbe:	615a      	str	r2, [r3, #20]
 8000bc0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bc2:	4b2d      	ldr	r3, [pc, #180]	; (8000c78 <MX_TIM2_Init+0xe8>)
 8000bc4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bc8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000bca:	4b2b      	ldr	r3, [pc, #172]	; (8000c78 <MX_TIM2_Init+0xe8>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd0:	4b29      	ldr	r3, [pc, #164]	; (8000c78 <MX_TIM2_Init+0xe8>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000bd6:	4b28      	ldr	r3, [pc, #160]	; (8000c78 <MX_TIM2_Init+0xe8>)
 8000bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bdc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bde:	4b26      	ldr	r3, [pc, #152]	; (8000c78 <MX_TIM2_Init+0xe8>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be4:	4b24      	ldr	r3, [pc, #144]	; (8000c78 <MX_TIM2_Init+0xe8>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bea:	4823      	ldr	r0, [pc, #140]	; (8000c78 <MX_TIM2_Init+0xe8>)
 8000bec:	f002 fddb 	bl	80037a6 <HAL_TIM_Base_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000bf6:	f7ff fdc1 	bl	800077c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c04:	4619      	mov	r1, r3
 8000c06:	481c      	ldr	r0, [pc, #112]	; (8000c78 <MX_TIM2_Init+0xe8>)
 8000c08:	f003 f840 	bl	8003c8c <HAL_TIM_ConfigClockSource>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000c12:	f7ff fdb3 	bl	800077c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c16:	4818      	ldr	r0, [pc, #96]	; (8000c78 <MX_TIM2_Init+0xe8>)
 8000c18:	f002 fe1c 	bl	8003854 <HAL_TIM_PWM_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000c22:	f7ff fdab 	bl	800077c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c2e:	f107 031c 	add.w	r3, r7, #28
 8000c32:	4619      	mov	r1, r3
 8000c34:	4810      	ldr	r0, [pc, #64]	; (8000c78 <MX_TIM2_Init+0xe8>)
 8000c36:	f003 fcfd 	bl	8004634 <HAL_TIMEx_MasterConfigSynchronization>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000c40:	f7ff fd9c 	bl	800077c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c44:	2360      	movs	r3, #96	; 0x60
 8000c46:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c50:	2300      	movs	r3, #0
 8000c52:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c54:	463b      	mov	r3, r7
 8000c56:	2200      	movs	r2, #0
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4807      	ldr	r0, [pc, #28]	; (8000c78 <MX_TIM2_Init+0xe8>)
 8000c5c:	f002 ff02 	bl	8003a64 <HAL_TIM_PWM_ConfigChannel>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000c66:	f7ff fd89 	bl	800077c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c6a:	4803      	ldr	r0, [pc, #12]	; (8000c78 <MX_TIM2_Init+0xe8>)
 8000c6c:	f000 f8fc 	bl	8000e68 <HAL_TIM_MspPostInit>

}
 8000c70:	bf00      	nop
 8000c72:	3738      	adds	r7, #56	; 0x38
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000144 	.word	0x20000144

08000c7c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08c      	sub	sp, #48	; 0x30
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c82:	f107 030c 	add.w	r3, r7, #12
 8000c86:	2224      	movs	r2, #36	; 0x24
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f007 f990 	bl	8007fb0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c90:	463b      	mov	r3, r7
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000c9a:	4b21      	ldr	r3, [pc, #132]	; (8000d20 <MX_TIM5_Init+0xa4>)
 8000c9c:	4a21      	ldr	r2, [pc, #132]	; (8000d24 <MX_TIM5_Init+0xa8>)
 8000c9e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000ca0:	4b1f      	ldr	r3, [pc, #124]	; (8000d20 <MX_TIM5_Init+0xa4>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca6:	4b1e      	ldr	r3, [pc, #120]	; (8000d20 <MX_TIM5_Init+0xa4>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000cac:	4b1c      	ldr	r3, [pc, #112]	; (8000d20 <MX_TIM5_Init+0xa4>)
 8000cae:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb4:	4b1a      	ldr	r3, [pc, #104]	; (8000d20 <MX_TIM5_Init+0xa4>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cba:	4b19      	ldr	r3, [pc, #100]	; (8000d20 <MX_TIM5_Init+0xa4>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000ce4:	f107 030c 	add.w	r3, r7, #12
 8000ce8:	4619      	mov	r1, r3
 8000cea:	480d      	ldr	r0, [pc, #52]	; (8000d20 <MX_TIM5_Init+0xa4>)
 8000cec:	f002 fe13 	bl	8003916 <HAL_TIM_Encoder_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8000cf6:	f7ff fd41 	bl	800077c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000d02:	463b      	mov	r3, r7
 8000d04:	4619      	mov	r1, r3
 8000d06:	4806      	ldr	r0, [pc, #24]	; (8000d20 <MX_TIM5_Init+0xa4>)
 8000d08:	f003 fc94 	bl	8004634 <HAL_TIMEx_MasterConfigSynchronization>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000d12:	f7ff fd33 	bl	800077c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000d16:	bf00      	nop
 8000d18:	3730      	adds	r7, #48	; 0x30
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000190 	.word	0x20000190
 8000d24:	40000c00 	.word	0x40000c00

08000d28 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a27      	ldr	r2, [pc, #156]	; (8000dd4 <HAL_TIM_Base_MspInit+0xac>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d137      	bne.n	8000daa <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d3a:	4b27      	ldr	r3, [pc, #156]	; (8000dd8 <HAL_TIM_Base_MspInit+0xb0>)
 8000d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d3e:	4a26      	ldr	r2, [pc, #152]	; (8000dd8 <HAL_TIM_Base_MspInit+0xb0>)
 8000d40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d44:	6613      	str	r3, [r2, #96]	; 0x60
 8000d46:	4b24      	ldr	r3, [pc, #144]	; (8000dd8 <HAL_TIM_Base_MspInit+0xb0>)
 8000d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel1;
 8000d52:	4b22      	ldr	r3, [pc, #136]	; (8000ddc <HAL_TIM_Base_MspInit+0xb4>)
 8000d54:	4a22      	ldr	r2, [pc, #136]	; (8000de0 <HAL_TIM_Base_MspInit+0xb8>)
 8000d56:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 8000d58:	4b20      	ldr	r3, [pc, #128]	; (8000ddc <HAL_TIM_Base_MspInit+0xb4>)
 8000d5a:	222b      	movs	r2, #43	; 0x2b
 8000d5c:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d5e:	4b1f      	ldr	r3, [pc, #124]	; (8000ddc <HAL_TIM_Base_MspInit+0xb4>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d64:	4b1d      	ldr	r3, [pc, #116]	; (8000ddc <HAL_TIM_Base_MspInit+0xb4>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000d6a:	4b1c      	ldr	r3, [pc, #112]	; (8000ddc <HAL_TIM_Base_MspInit+0xb4>)
 8000d6c:	2280      	movs	r2, #128	; 0x80
 8000d6e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d70:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <HAL_TIM_Base_MspInit+0xb4>)
 8000d72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d76:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d78:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <HAL_TIM_Base_MspInit+0xb4>)
 8000d7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d7e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8000d80:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <HAL_TIM_Base_MspInit+0xb4>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <HAL_TIM_Base_MspInit+0xb4>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000d8c:	4813      	ldr	r0, [pc, #76]	; (8000ddc <HAL_TIM_Base_MspInit+0xb4>)
 8000d8e:	f000 fbb1 	bl	80014f4 <HAL_DMA_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 8000d98:	f7ff fcf0 	bl	800077c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4a0f      	ldr	r2, [pc, #60]	; (8000ddc <HAL_TIM_Base_MspInit+0xb4>)
 8000da0:	625a      	str	r2, [r3, #36]	; 0x24
 8000da2:	4a0e      	ldr	r2, [pc, #56]	; (8000ddc <HAL_TIM_Base_MspInit+0xb4>)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000da8:	e010      	b.n	8000dcc <HAL_TIM_Base_MspInit+0xa4>
  else if(tim_baseHandle->Instance==TIM2)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000db2:	d10b      	bne.n	8000dcc <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000db4:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <HAL_TIM_Base_MspInit+0xb0>)
 8000db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000db8:	4a07      	ldr	r2, [pc, #28]	; (8000dd8 <HAL_TIM_Base_MspInit+0xb0>)
 8000dba:	f043 0301 	orr.w	r3, r3, #1
 8000dbe:	6593      	str	r3, [r2, #88]	; 0x58
 8000dc0:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <HAL_TIM_Base_MspInit+0xb0>)
 8000dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	60bb      	str	r3, [r7, #8]
 8000dca:	68bb      	ldr	r3, [r7, #8]
}
 8000dcc:	bf00      	nop
 8000dce:	3710      	adds	r7, #16
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40012c00 	.word	0x40012c00
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	200001dc 	.word	0x200001dc
 8000de0:	40020008 	.word	0x40020008

08000de4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08a      	sub	sp, #40	; 0x28
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM5)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a17      	ldr	r2, [pc, #92]	; (8000e60 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d128      	bne.n	8000e58 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000e06:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <HAL_TIM_Encoder_MspInit+0x80>)
 8000e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0a:	4a16      	ldr	r2, [pc, #88]	; (8000e64 <HAL_TIM_Encoder_MspInit+0x80>)
 8000e0c:	f043 0308 	orr.w	r3, r3, #8
 8000e10:	6593      	str	r3, [r2, #88]	; 0x58
 8000e12:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <HAL_TIM_Encoder_MspInit+0x80>)
 8000e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e16:	f003 0308 	and.w	r3, r3, #8
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1e:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <HAL_TIM_Encoder_MspInit+0x80>)
 8000e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e22:	4a10      	ldr	r2, [pc, #64]	; (8000e64 <HAL_TIM_Encoder_MspInit+0x80>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <HAL_TIM_Encoder_MspInit+0x80>)
 8000e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e36:	2303      	movs	r3, #3
 8000e38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000e46:	2302      	movs	r3, #2
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	4619      	mov	r1, r3
 8000e50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e54:	f000 fd08 	bl	8001868 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8000e58:	bf00      	nop
 8000e5a:	3728      	adds	r7, #40	; 0x28
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40000c00 	.word	0x40000c00
 8000e64:	40021000 	.word	0x40021000

08000e68 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08a      	sub	sp, #40	; 0x28
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a24      	ldr	r2, [pc, #144]	; (8000f18 <HAL_TIM_MspPostInit+0xb0>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d11e      	bne.n	8000ec8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8a:	4b24      	ldr	r3, [pc, #144]	; (8000f1c <HAL_TIM_MspPostInit+0xb4>)
 8000e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8e:	4a23      	ldr	r2, [pc, #140]	; (8000f1c <HAL_TIM_MspPostInit+0xb4>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e96:	4b21      	ldr	r3, [pc, #132]	; (8000f1c <HAL_TIM_MspPostInit+0xb4>)
 8000e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ea2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ea6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec2:	f000 fcd1 	bl	8001868 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000ec6:	e022      	b.n	8000f0e <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM2)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ed0:	d11d      	bne.n	8000f0e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed2:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <HAL_TIM_MspPostInit+0xb4>)
 8000ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed6:	4a11      	ldr	r2, [pc, #68]	; (8000f1c <HAL_TIM_MspPostInit+0xb4>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ede:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <HAL_TIM_MspPostInit+0xb4>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000eea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000eee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000efc:	2301      	movs	r3, #1
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	4619      	mov	r1, r3
 8000f06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0a:	f000 fcad 	bl	8001868 <HAL_GPIO_Init>
}
 8000f0e:	bf00      	nop
 8000f10:	3728      	adds	r7, #40	; 0x28
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40012c00 	.word	0x40012c00
 8000f1c:	40021000 	.word	0x40021000

08000f20 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f24:	4b22      	ldr	r3, [pc, #136]	; (8000fb0 <MX_USART1_UART_Init+0x90>)
 8000f26:	4a23      	ldr	r2, [pc, #140]	; (8000fb4 <MX_USART1_UART_Init+0x94>)
 8000f28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f2a:	4b21      	ldr	r3, [pc, #132]	; (8000fb0 <MX_USART1_UART_Init+0x90>)
 8000f2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f32:	4b1f      	ldr	r3, [pc, #124]	; (8000fb0 <MX_USART1_UART_Init+0x90>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f38:	4b1d      	ldr	r3, [pc, #116]	; (8000fb0 <MX_USART1_UART_Init+0x90>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f3e:	4b1c      	ldr	r3, [pc, #112]	; (8000fb0 <MX_USART1_UART_Init+0x90>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f44:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <MX_USART1_UART_Init+0x90>)
 8000f46:	220c      	movs	r2, #12
 8000f48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f4a:	4b19      	ldr	r3, [pc, #100]	; (8000fb0 <MX_USART1_UART_Init+0x90>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f50:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <MX_USART1_UART_Init+0x90>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f56:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <MX_USART1_UART_Init+0x90>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f5c:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <MX_USART1_UART_Init+0x90>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f62:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <MX_USART1_UART_Init+0x90>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f68:	4811      	ldr	r0, [pc, #68]	; (8000fb0 <MX_USART1_UART_Init+0x90>)
 8000f6a:	f003 fc69 	bl	8004840 <HAL_UART_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000f74:	f7ff fc02 	bl	800077c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f78:	2100      	movs	r1, #0
 8000f7a:	480d      	ldr	r0, [pc, #52]	; (8000fb0 <MX_USART1_UART_Init+0x90>)
 8000f7c:	f004 f99a 	bl	80052b4 <HAL_UARTEx_SetTxFifoThreshold>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000f86:	f7ff fbf9 	bl	800077c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4808      	ldr	r0, [pc, #32]	; (8000fb0 <MX_USART1_UART_Init+0x90>)
 8000f8e:	f004 f9cf 	bl	8005330 <HAL_UARTEx_SetRxFifoThreshold>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000f98:	f7ff fbf0 	bl	800077c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000f9c:	4804      	ldr	r0, [pc, #16]	; (8000fb0 <MX_USART1_UART_Init+0x90>)
 8000f9e:	f004 f950 	bl	8005242 <HAL_UARTEx_DisableFifoMode>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000fa8:	f7ff fbe8 	bl	800077c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	2000023c 	.word	0x2000023c
 8000fb4:	40013800 	.word	0x40013800

08000fb8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fbc:	4b22      	ldr	r3, [pc, #136]	; (8001048 <MX_USART2_UART_Init+0x90>)
 8000fbe:	4a23      	ldr	r2, [pc, #140]	; (800104c <MX_USART2_UART_Init+0x94>)
 8000fc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fc2:	4b21      	ldr	r3, [pc, #132]	; (8001048 <MX_USART2_UART_Init+0x90>)
 8000fc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fca:	4b1f      	ldr	r3, [pc, #124]	; (8001048 <MX_USART2_UART_Init+0x90>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fd0:	4b1d      	ldr	r3, [pc, #116]	; (8001048 <MX_USART2_UART_Init+0x90>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fd6:	4b1c      	ldr	r3, [pc, #112]	; (8001048 <MX_USART2_UART_Init+0x90>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fdc:	4b1a      	ldr	r3, [pc, #104]	; (8001048 <MX_USART2_UART_Init+0x90>)
 8000fde:	220c      	movs	r2, #12
 8000fe0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fe2:	4b19      	ldr	r3, [pc, #100]	; (8001048 <MX_USART2_UART_Init+0x90>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fe8:	4b17      	ldr	r3, [pc, #92]	; (8001048 <MX_USART2_UART_Init+0x90>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fee:	4b16      	ldr	r3, [pc, #88]	; (8001048 <MX_USART2_UART_Init+0x90>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ff4:	4b14      	ldr	r3, [pc, #80]	; (8001048 <MX_USART2_UART_Init+0x90>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ffa:	4b13      	ldr	r3, [pc, #76]	; (8001048 <MX_USART2_UART_Init+0x90>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001000:	4811      	ldr	r0, [pc, #68]	; (8001048 <MX_USART2_UART_Init+0x90>)
 8001002:	f003 fc1d 	bl	8004840 <HAL_UART_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800100c:	f7ff fbb6 	bl	800077c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001010:	2100      	movs	r1, #0
 8001012:	480d      	ldr	r0, [pc, #52]	; (8001048 <MX_USART2_UART_Init+0x90>)
 8001014:	f004 f94e 	bl	80052b4 <HAL_UARTEx_SetTxFifoThreshold>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800101e:	f7ff fbad 	bl	800077c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001022:	2100      	movs	r1, #0
 8001024:	4808      	ldr	r0, [pc, #32]	; (8001048 <MX_USART2_UART_Init+0x90>)
 8001026:	f004 f983 	bl	8005330 <HAL_UARTEx_SetRxFifoThreshold>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001030:	f7ff fba4 	bl	800077c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001034:	4804      	ldr	r0, [pc, #16]	; (8001048 <MX_USART2_UART_Init+0x90>)
 8001036:	f004 f904 	bl	8005242 <HAL_UARTEx_DisableFifoMode>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001040:	f7ff fb9c 	bl	800077c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}
 8001048:	200002cc 	.word	0x200002cc
 800104c:	40004400 	.word	0x40004400

08001050 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b0b2      	sub	sp, #200	; 0xc8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001068:	f107 031c 	add.w	r3, r7, #28
 800106c:	2298      	movs	r2, #152	; 0x98
 800106e:	2100      	movs	r1, #0
 8001070:	4618      	mov	r0, r3
 8001072:	f006 ff9d 	bl	8007fb0 <memset>
  if(uartHandle->Instance==USART1)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a43      	ldr	r2, [pc, #268]	; (8001188 <HAL_UART_MspInit+0x138>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d13d      	bne.n	80010fc <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001080:	2301      	movs	r3, #1
 8001082:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001084:	2300      	movs	r3, #0
 8001086:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001088:	f107 031c 	add.w	r3, r7, #28
 800108c:	4618      	mov	r0, r3
 800108e:	f001 fd93 	bl	8002bb8 <HAL_RCCEx_PeriphCLKConfig>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001098:	f7ff fb70 	bl	800077c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800109c:	4b3b      	ldr	r3, [pc, #236]	; (800118c <HAL_UART_MspInit+0x13c>)
 800109e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010a0:	4a3a      	ldr	r2, [pc, #232]	; (800118c <HAL_UART_MspInit+0x13c>)
 80010a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a6:	6613      	str	r3, [r2, #96]	; 0x60
 80010a8:	4b38      	ldr	r3, [pc, #224]	; (800118c <HAL_UART_MspInit+0x13c>)
 80010aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b0:	61bb      	str	r3, [r7, #24]
 80010b2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b4:	4b35      	ldr	r3, [pc, #212]	; (800118c <HAL_UART_MspInit+0x13c>)
 80010b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b8:	4a34      	ldr	r2, [pc, #208]	; (800118c <HAL_UART_MspInit+0x13c>)
 80010ba:	f043 0301 	orr.w	r3, r3, #1
 80010be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c0:	4b32      	ldr	r3, [pc, #200]	; (800118c <HAL_UART_MspInit+0x13c>)
 80010c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	617b      	str	r3, [r7, #20]
 80010ca:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010cc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80010d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d4:	2302      	movs	r3, #2
 80010d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e0:	2303      	movs	r3, #3
 80010e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010e6:	2307      	movs	r3, #7
 80010e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ec:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80010f0:	4619      	mov	r1, r3
 80010f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f6:	f000 fbb7 	bl	8001868 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80010fa:	e040      	b.n	800117e <HAL_UART_MspInit+0x12e>
  else if(uartHandle->Instance==USART2)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a23      	ldr	r2, [pc, #140]	; (8001190 <HAL_UART_MspInit+0x140>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d13b      	bne.n	800117e <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001106:	2302      	movs	r3, #2
 8001108:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800110a:	2300      	movs	r3, #0
 800110c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800110e:	f107 031c 	add.w	r3, r7, #28
 8001112:	4618      	mov	r0, r3
 8001114:	f001 fd50 	bl	8002bb8 <HAL_RCCEx_PeriphCLKConfig>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 800111e:	f7ff fb2d 	bl	800077c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001122:	4b1a      	ldr	r3, [pc, #104]	; (800118c <HAL_UART_MspInit+0x13c>)
 8001124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001126:	4a19      	ldr	r2, [pc, #100]	; (800118c <HAL_UART_MspInit+0x13c>)
 8001128:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800112c:	6593      	str	r3, [r2, #88]	; 0x58
 800112e:	4b17      	ldr	r3, [pc, #92]	; (800118c <HAL_UART_MspInit+0x13c>)
 8001130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001136:	613b      	str	r3, [r7, #16]
 8001138:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113a:	4b14      	ldr	r3, [pc, #80]	; (800118c <HAL_UART_MspInit+0x13c>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113e:	4a13      	ldr	r2, [pc, #76]	; (800118c <HAL_UART_MspInit+0x13c>)
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001146:	4b11      	ldr	r3, [pc, #68]	; (800118c <HAL_UART_MspInit+0x13c>)
 8001148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001152:	230c      	movs	r3, #12
 8001154:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001158:	2302      	movs	r3, #2
 800115a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001164:	2303      	movs	r3, #3
 8001166:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800116a:	2307      	movs	r3, #7
 800116c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001170:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001174:	4619      	mov	r1, r3
 8001176:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800117a:	f000 fb75 	bl	8001868 <HAL_GPIO_Init>
}
 800117e:	bf00      	nop
 8001180:	37c8      	adds	r7, #200	; 0xc8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40013800 	.word	0x40013800
 800118c:	40021000 	.word	0x40021000
 8001190:	40004400 	.word	0x40004400

08001194 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001194:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011cc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001198:	f7ff fc3c 	bl	8000a14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800119c:	480c      	ldr	r0, [pc, #48]	; (80011d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800119e:	490d      	ldr	r1, [pc, #52]	; (80011d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011a0:	4a0d      	ldr	r2, [pc, #52]	; (80011d8 <LoopForever+0xe>)
  movs r3, #0
 80011a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a4:	e002      	b.n	80011ac <LoopCopyDataInit>

080011a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011aa:	3304      	adds	r3, #4

080011ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b0:	d3f9      	bcc.n	80011a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011b2:	4a0a      	ldr	r2, [pc, #40]	; (80011dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80011b4:	4c0a      	ldr	r4, [pc, #40]	; (80011e0 <LoopForever+0x16>)
  movs r3, #0
 80011b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b8:	e001      	b.n	80011be <LoopFillZerobss>

080011ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011bc:	3204      	adds	r2, #4

080011be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c0:	d3fb      	bcc.n	80011ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011c2:	f006 fec3 	bl	8007f4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011c6:	f7ff fa69 	bl	800069c <main>

080011ca <LoopForever>:

LoopForever:
    b LoopForever
 80011ca:	e7fe      	b.n	80011ca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80011cc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80011d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80011d8:	080080a0 	.word	0x080080a0
  ldr r2, =_sbss
 80011dc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80011e0:	20001c68 	.word	0x20001c68

080011e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011e4:	e7fe      	b.n	80011e4 <ADC1_2_IRQHandler>

080011e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011ec:	2300      	movs	r3, #0
 80011ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f0:	2003      	movs	r0, #3
 80011f2:	f000 f93d 	bl	8001470 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011f6:	200f      	movs	r0, #15
 80011f8:	f000 f80e 	bl	8001218 <HAL_InitTick>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d002      	beq.n	8001208 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	71fb      	strb	r3, [r7, #7]
 8001206:	e001      	b.n	800120c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001208:	f7ff fbae 	bl	8000968 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800120c:	79fb      	ldrb	r3, [r7, #7]
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001220:	2300      	movs	r3, #0
 8001222:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001224:	4b17      	ldr	r3, [pc, #92]	; (8001284 <HAL_InitTick+0x6c>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d023      	beq.n	8001274 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800122c:	4b16      	ldr	r3, [pc, #88]	; (8001288 <HAL_InitTick+0x70>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	4b14      	ldr	r3, [pc, #80]	; (8001284 <HAL_InitTick+0x6c>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	4619      	mov	r1, r3
 8001236:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123a:	fbb3 f3f1 	udiv	r3, r3, r1
 800123e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001242:	4618      	mov	r0, r3
 8001244:	f000 f949 	bl	80014da <HAL_SYSTICK_Config>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d10f      	bne.n	800126e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2b0f      	cmp	r3, #15
 8001252:	d809      	bhi.n	8001268 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001254:	2200      	movs	r2, #0
 8001256:	6879      	ldr	r1, [r7, #4]
 8001258:	f04f 30ff 	mov.w	r0, #4294967295
 800125c:	f000 f913 	bl	8001486 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001260:	4a0a      	ldr	r2, [pc, #40]	; (800128c <HAL_InitTick+0x74>)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6013      	str	r3, [r2, #0]
 8001266:	e007      	b.n	8001278 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	73fb      	strb	r3, [r7, #15]
 800126c:	e004      	b.n	8001278 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	73fb      	strb	r3, [r7, #15]
 8001272:	e001      	b.n	8001278 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001278:	7bfb      	ldrb	r3, [r7, #15]
}
 800127a:	4618      	mov	r0, r3
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000008 	.word	0x20000008
 8001288:	20000000 	.word	0x20000000
 800128c:	20000004 	.word	0x20000004

08001290 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <HAL_IncTick+0x20>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	461a      	mov	r2, r3
 800129a:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <HAL_IncTick+0x24>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4413      	add	r3, r2
 80012a0:	4a04      	ldr	r2, [pc, #16]	; (80012b4 <HAL_IncTick+0x24>)
 80012a2:	6013      	str	r3, [r2, #0]
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	20000008 	.word	0x20000008
 80012b4:	2000035c 	.word	0x2000035c

080012b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  return uwTick;
 80012bc:	4b03      	ldr	r3, [pc, #12]	; (80012cc <HAL_GetTick+0x14>)
 80012be:	681b      	ldr	r3, [r3, #0]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	2000035c 	.word	0x2000035c

080012d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e0:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <__NVIC_SetPriorityGrouping+0x44>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012e6:	68ba      	ldr	r2, [r7, #8]
 80012e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012ec:	4013      	ands	r3, r2
 80012ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001302:	4a04      	ldr	r2, [pc, #16]	; (8001314 <__NVIC_SetPriorityGrouping+0x44>)
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	60d3      	str	r3, [r2, #12]
}
 8001308:	bf00      	nop
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800131c:	4b04      	ldr	r3, [pc, #16]	; (8001330 <__NVIC_GetPriorityGrouping+0x18>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	0a1b      	lsrs	r3, r3, #8
 8001322:	f003 0307 	and.w	r3, r3, #7
}
 8001326:	4618      	mov	r0, r3
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	2b00      	cmp	r3, #0
 8001344:	db0b      	blt.n	800135e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	f003 021f 	and.w	r2, r3, #31
 800134c:	4907      	ldr	r1, [pc, #28]	; (800136c <__NVIC_EnableIRQ+0x38>)
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	095b      	lsrs	r3, r3, #5
 8001354:	2001      	movs	r0, #1
 8001356:	fa00 f202 	lsl.w	r2, r0, r2
 800135a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e000e100 	.word	0xe000e100

08001370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	6039      	str	r1, [r7, #0]
 800137a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001380:	2b00      	cmp	r3, #0
 8001382:	db0a      	blt.n	800139a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	b2da      	uxtb	r2, r3
 8001388:	490c      	ldr	r1, [pc, #48]	; (80013bc <__NVIC_SetPriority+0x4c>)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	0112      	lsls	r2, r2, #4
 8001390:	b2d2      	uxtb	r2, r2
 8001392:	440b      	add	r3, r1
 8001394:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001398:	e00a      	b.n	80013b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	b2da      	uxtb	r2, r3
 800139e:	4908      	ldr	r1, [pc, #32]	; (80013c0 <__NVIC_SetPriority+0x50>)
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	f003 030f 	and.w	r3, r3, #15
 80013a6:	3b04      	subs	r3, #4
 80013a8:	0112      	lsls	r2, r2, #4
 80013aa:	b2d2      	uxtb	r2, r2
 80013ac:	440b      	add	r3, r1
 80013ae:	761a      	strb	r2, [r3, #24]
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	e000e100 	.word	0xe000e100
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b089      	sub	sp, #36	; 0x24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	f1c3 0307 	rsb	r3, r3, #7
 80013de:	2b04      	cmp	r3, #4
 80013e0:	bf28      	it	cs
 80013e2:	2304      	movcs	r3, #4
 80013e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3304      	adds	r3, #4
 80013ea:	2b06      	cmp	r3, #6
 80013ec:	d902      	bls.n	80013f4 <NVIC_EncodePriority+0x30>
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3b03      	subs	r3, #3
 80013f2:	e000      	b.n	80013f6 <NVIC_EncodePriority+0x32>
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f8:	f04f 32ff 	mov.w	r2, #4294967295
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43da      	mvns	r2, r3
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	401a      	ands	r2, r3
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800140c:	f04f 31ff 	mov.w	r1, #4294967295
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	fa01 f303 	lsl.w	r3, r1, r3
 8001416:	43d9      	mvns	r1, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800141c:	4313      	orrs	r3, r2
         );
}
 800141e:	4618      	mov	r0, r3
 8001420:	3724      	adds	r7, #36	; 0x24
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
	...

0800142c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3b01      	subs	r3, #1
 8001438:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800143c:	d301      	bcc.n	8001442 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800143e:	2301      	movs	r3, #1
 8001440:	e00f      	b.n	8001462 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001442:	4a0a      	ldr	r2, [pc, #40]	; (800146c <SysTick_Config+0x40>)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3b01      	subs	r3, #1
 8001448:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800144a:	210f      	movs	r1, #15
 800144c:	f04f 30ff 	mov.w	r0, #4294967295
 8001450:	f7ff ff8e 	bl	8001370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <SysTick_Config+0x40>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800145a:	4b04      	ldr	r3, [pc, #16]	; (800146c <SysTick_Config+0x40>)
 800145c:	2207      	movs	r2, #7
 800145e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	e000e010 	.word	0xe000e010

08001470 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7ff ff29 	bl	80012d0 <__NVIC_SetPriorityGrouping>
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b086      	sub	sp, #24
 800148a:	af00      	add	r7, sp, #0
 800148c:	4603      	mov	r3, r0
 800148e:	60b9      	str	r1, [r7, #8]
 8001490:	607a      	str	r2, [r7, #4]
 8001492:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001498:	f7ff ff3e 	bl	8001318 <__NVIC_GetPriorityGrouping>
 800149c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	68b9      	ldr	r1, [r7, #8]
 80014a2:	6978      	ldr	r0, [r7, #20]
 80014a4:	f7ff ff8e 	bl	80013c4 <NVIC_EncodePriority>
 80014a8:	4602      	mov	r2, r0
 80014aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ae:	4611      	mov	r1, r2
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff ff5d 	bl	8001370 <__NVIC_SetPriority>
}
 80014b6:	bf00      	nop
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	4603      	mov	r3, r0
 80014c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff31 	bl	8001334 <__NVIC_EnableIRQ>
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff ffa2 	bl	800142c <SysTick_Config>
 80014e8:	4603      	mov	r3, r0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
	...

080014f4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d101      	bne.n	8001506 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e08d      	b.n	8001622 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	461a      	mov	r2, r3
 800150c:	4b47      	ldr	r3, [pc, #284]	; (800162c <HAL_DMA_Init+0x138>)
 800150e:	429a      	cmp	r2, r3
 8001510:	d80f      	bhi.n	8001532 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	461a      	mov	r2, r3
 8001518:	4b45      	ldr	r3, [pc, #276]	; (8001630 <HAL_DMA_Init+0x13c>)
 800151a:	4413      	add	r3, r2
 800151c:	4a45      	ldr	r2, [pc, #276]	; (8001634 <HAL_DMA_Init+0x140>)
 800151e:	fba2 2303 	umull	r2, r3, r2, r3
 8001522:	091b      	lsrs	r3, r3, #4
 8001524:	009a      	lsls	r2, r3, #2
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a42      	ldr	r2, [pc, #264]	; (8001638 <HAL_DMA_Init+0x144>)
 800152e:	641a      	str	r2, [r3, #64]	; 0x40
 8001530:	e00e      	b.n	8001550 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	461a      	mov	r2, r3
 8001538:	4b40      	ldr	r3, [pc, #256]	; (800163c <HAL_DMA_Init+0x148>)
 800153a:	4413      	add	r3, r2
 800153c:	4a3d      	ldr	r2, [pc, #244]	; (8001634 <HAL_DMA_Init+0x140>)
 800153e:	fba2 2303 	umull	r2, r3, r2, r3
 8001542:	091b      	lsrs	r3, r3, #4
 8001544:	009a      	lsls	r2, r3, #2
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a3c      	ldr	r2, [pc, #240]	; (8001640 <HAL_DMA_Init+0x14c>)
 800154e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2202      	movs	r2, #2
 8001554:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800156a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001574:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001580:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800158c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a1b      	ldr	r3, [r3, #32]
 8001592:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001594:	68fa      	ldr	r2, [r7, #12]
 8001596:	4313      	orrs	r3, r2
 8001598:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f000 f8fe 	bl	80017a4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015b0:	d102      	bne.n	80015b8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015c0:	b2d2      	uxtb	r2, r2
 80015c2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80015cc:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d010      	beq.n	80015f8 <HAL_DMA_Init+0x104>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	2b04      	cmp	r3, #4
 80015dc:	d80c      	bhi.n	80015f8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f000 f91e 	bl	8001820 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	e008      	b.n	800160a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2201      	movs	r2, #1
 8001614:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40020407 	.word	0x40020407
 8001630:	bffdfff8 	.word	0xbffdfff8
 8001634:	cccccccd 	.word	0xcccccccd
 8001638:	40020000 	.word	0x40020000
 800163c:	bffdfbf8 	.word	0xbffdfbf8
 8001640:	40020400 	.word	0x40020400

08001644 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001660:	f003 031c 	and.w	r3, r3, #28
 8001664:	2204      	movs	r2, #4
 8001666:	409a      	lsls	r2, r3
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	4013      	ands	r3, r2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d026      	beq.n	80016be <HAL_DMA_IRQHandler+0x7a>
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	f003 0304 	and.w	r3, r3, #4
 8001676:	2b00      	cmp	r3, #0
 8001678:	d021      	beq.n	80016be <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0320 	and.w	r3, r3, #32
 8001684:	2b00      	cmp	r3, #0
 8001686:	d107      	bne.n	8001698 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f022 0204 	bic.w	r2, r2, #4
 8001696:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169c:	f003 021c 	and.w	r2, r3, #28
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a4:	2104      	movs	r1, #4
 80016a6:	fa01 f202 	lsl.w	r2, r1, r2
 80016aa:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d071      	beq.n	8001798 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80016bc:	e06c      	b.n	8001798 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c2:	f003 031c 	and.w	r3, r3, #28
 80016c6:	2202      	movs	r2, #2
 80016c8:	409a      	lsls	r2, r3
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	4013      	ands	r3, r2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d02e      	beq.n	8001730 <HAL_DMA_IRQHandler+0xec>
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d029      	beq.n	8001730 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0320 	and.w	r3, r3, #32
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d10b      	bne.n	8001702 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f022 020a 	bic.w	r2, r2, #10
 80016f8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2201      	movs	r2, #1
 80016fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001706:	f003 021c 	and.w	r2, r3, #28
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	2102      	movs	r1, #2
 8001710:	fa01 f202 	lsl.w	r2, r1, r2
 8001714:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001722:	2b00      	cmp	r3, #0
 8001724:	d038      	beq.n	8001798 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800172e:	e033      	b.n	8001798 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001734:	f003 031c 	and.w	r3, r3, #28
 8001738:	2208      	movs	r2, #8
 800173a:	409a      	lsls	r2, r3
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4013      	ands	r3, r2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d02a      	beq.n	800179a <HAL_DMA_IRQHandler+0x156>
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	f003 0308 	and.w	r3, r3, #8
 800174a:	2b00      	cmp	r3, #0
 800174c:	d025      	beq.n	800179a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f022 020e 	bic.w	r2, r2, #14
 800175c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001762:	f003 021c 	and.w	r2, r3, #28
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	2101      	movs	r1, #1
 800176c:	fa01 f202 	lsl.w	r2, r1, r2
 8001770:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2201      	movs	r2, #1
 8001776:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2201      	movs	r2, #1
 800177c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800178c:	2b00      	cmp	r3, #0
 800178e:	d004      	beq.n	800179a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001798:	bf00      	nop
 800179a:	bf00      	nop
}
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
	...

080017a4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	461a      	mov	r2, r3
 80017b2:	4b17      	ldr	r3, [pc, #92]	; (8001810 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d80a      	bhi.n	80017ce <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017bc:	089b      	lsrs	r3, r3, #2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80017c4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	6493      	str	r3, [r2, #72]	; 0x48
 80017cc:	e007      	b.n	80017de <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d2:	089b      	lsrs	r3, r3, #2
 80017d4:	009a      	lsls	r2, r3, #2
 80017d6:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80017d8:	4413      	add	r3, r2
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	3b08      	subs	r3, #8
 80017e6:	4a0c      	ldr	r2, [pc, #48]	; (8001818 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80017e8:	fba2 2303 	umull	r2, r3, r2, r3
 80017ec:	091b      	lsrs	r3, r3, #4
 80017ee:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a0a      	ldr	r2, [pc, #40]	; (800181c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80017f4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f003 031f 	and.w	r3, r3, #31
 80017fc:	2201      	movs	r2, #1
 80017fe:	409a      	lsls	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001804:	bf00      	nop
 8001806:	3714      	adds	r7, #20
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	40020407 	.word	0x40020407
 8001814:	4002081c 	.word	0x4002081c
 8001818:	cccccccd 	.word	0xcccccccd
 800181c:	40020880 	.word	0x40020880

08001820 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	b2db      	uxtb	r3, r3
 800182e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001830:	68fa      	ldr	r2, [r7, #12]
 8001832:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001834:	4413      	add	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	461a      	mov	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a08      	ldr	r2, [pc, #32]	; (8001864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001842:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	3b01      	subs	r3, #1
 8001848:	f003 0303 	and.w	r3, r3, #3
 800184c:	2201      	movs	r2, #1
 800184e:	409a      	lsls	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001854:	bf00      	nop
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	1000823f 	.word	0x1000823f
 8001864:	40020940 	.word	0x40020940

08001868 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001868:	b480      	push	{r7}
 800186a:	b087      	sub	sp, #28
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001872:	2300      	movs	r3, #0
 8001874:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001876:	e166      	b.n	8001b46 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	2101      	movs	r1, #1
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	fa01 f303 	lsl.w	r3, r1, r3
 8001884:	4013      	ands	r3, r2
 8001886:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2b00      	cmp	r3, #0
 800188c:	f000 8158 	beq.w	8001b40 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 0303 	and.w	r3, r3, #3
 8001898:	2b01      	cmp	r3, #1
 800189a:	d005      	beq.n	80018a8 <HAL_GPIO_Init+0x40>
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f003 0303 	and.w	r3, r3, #3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d130      	bne.n	800190a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	2203      	movs	r2, #3
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	4013      	ands	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	68da      	ldr	r2, [r3, #12]
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018de:	2201      	movs	r2, #1
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43db      	mvns	r3, r3
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	4013      	ands	r3, r2
 80018ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	091b      	lsrs	r3, r3, #4
 80018f4:	f003 0201 	and.w	r2, r3, #1
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	4313      	orrs	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f003 0303 	and.w	r3, r3, #3
 8001912:	2b03      	cmp	r3, #3
 8001914:	d017      	beq.n	8001946 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	2203      	movs	r2, #3
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	43db      	mvns	r3, r3
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	4013      	ands	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	689a      	ldr	r2, [r3, #8]
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4313      	orrs	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f003 0303 	and.w	r3, r3, #3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d123      	bne.n	800199a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	08da      	lsrs	r2, r3, #3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	3208      	adds	r2, #8
 800195a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800195e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	220f      	movs	r2, #15
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43db      	mvns	r3, r3
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	4013      	ands	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	691a      	ldr	r2, [r3, #16]
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	f003 0307 	and.w	r3, r3, #7
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	4313      	orrs	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	08da      	lsrs	r2, r3, #3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3208      	adds	r2, #8
 8001994:	6939      	ldr	r1, [r7, #16]
 8001996:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	2203      	movs	r2, #3
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43db      	mvns	r3, r3
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	4013      	ands	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f003 0203 	and.w	r2, r3, #3
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f000 80b2 	beq.w	8001b40 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019dc:	4b61      	ldr	r3, [pc, #388]	; (8001b64 <HAL_GPIO_Init+0x2fc>)
 80019de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019e0:	4a60      	ldr	r2, [pc, #384]	; (8001b64 <HAL_GPIO_Init+0x2fc>)
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	6613      	str	r3, [r2, #96]	; 0x60
 80019e8:	4b5e      	ldr	r3, [pc, #376]	; (8001b64 <HAL_GPIO_Init+0x2fc>)
 80019ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	60bb      	str	r3, [r7, #8]
 80019f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019f4:	4a5c      	ldr	r2, [pc, #368]	; (8001b68 <HAL_GPIO_Init+0x300>)
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	089b      	lsrs	r3, r3, #2
 80019fa:	3302      	adds	r3, #2
 80019fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	f003 0303 	and.w	r3, r3, #3
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	220f      	movs	r2, #15
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	4013      	ands	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a1e:	d02b      	beq.n	8001a78 <HAL_GPIO_Init+0x210>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4a52      	ldr	r2, [pc, #328]	; (8001b6c <HAL_GPIO_Init+0x304>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d025      	beq.n	8001a74 <HAL_GPIO_Init+0x20c>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a51      	ldr	r2, [pc, #324]	; (8001b70 <HAL_GPIO_Init+0x308>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d01f      	beq.n	8001a70 <HAL_GPIO_Init+0x208>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4a50      	ldr	r2, [pc, #320]	; (8001b74 <HAL_GPIO_Init+0x30c>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d019      	beq.n	8001a6c <HAL_GPIO_Init+0x204>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4a4f      	ldr	r2, [pc, #316]	; (8001b78 <HAL_GPIO_Init+0x310>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d013      	beq.n	8001a68 <HAL_GPIO_Init+0x200>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4a4e      	ldr	r2, [pc, #312]	; (8001b7c <HAL_GPIO_Init+0x314>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d00d      	beq.n	8001a64 <HAL_GPIO_Init+0x1fc>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a4d      	ldr	r2, [pc, #308]	; (8001b80 <HAL_GPIO_Init+0x318>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d007      	beq.n	8001a60 <HAL_GPIO_Init+0x1f8>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a4c      	ldr	r2, [pc, #304]	; (8001b84 <HAL_GPIO_Init+0x31c>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d101      	bne.n	8001a5c <HAL_GPIO_Init+0x1f4>
 8001a58:	2307      	movs	r3, #7
 8001a5a:	e00e      	b.n	8001a7a <HAL_GPIO_Init+0x212>
 8001a5c:	2308      	movs	r3, #8
 8001a5e:	e00c      	b.n	8001a7a <HAL_GPIO_Init+0x212>
 8001a60:	2306      	movs	r3, #6
 8001a62:	e00a      	b.n	8001a7a <HAL_GPIO_Init+0x212>
 8001a64:	2305      	movs	r3, #5
 8001a66:	e008      	b.n	8001a7a <HAL_GPIO_Init+0x212>
 8001a68:	2304      	movs	r3, #4
 8001a6a:	e006      	b.n	8001a7a <HAL_GPIO_Init+0x212>
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e004      	b.n	8001a7a <HAL_GPIO_Init+0x212>
 8001a70:	2302      	movs	r3, #2
 8001a72:	e002      	b.n	8001a7a <HAL_GPIO_Init+0x212>
 8001a74:	2301      	movs	r3, #1
 8001a76:	e000      	b.n	8001a7a <HAL_GPIO_Init+0x212>
 8001a78:	2300      	movs	r3, #0
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	f002 0203 	and.w	r2, r2, #3
 8001a80:	0092      	lsls	r2, r2, #2
 8001a82:	4093      	lsls	r3, r2
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a8a:	4937      	ldr	r1, [pc, #220]	; (8001b68 <HAL_GPIO_Init+0x300>)
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	089b      	lsrs	r3, r3, #2
 8001a90:	3302      	adds	r3, #2
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a98:	4b3b      	ldr	r3, [pc, #236]	; (8001b88 <HAL_GPIO_Init+0x320>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d003      	beq.n	8001abc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001abc:	4a32      	ldr	r2, [pc, #200]	; (8001b88 <HAL_GPIO_Init+0x320>)
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ac2:	4b31      	ldr	r3, [pc, #196]	; (8001b88 <HAL_GPIO_Init+0x320>)
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	43db      	mvns	r3, r3
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ae6:	4a28      	ldr	r2, [pc, #160]	; (8001b88 <HAL_GPIO_Init+0x320>)
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001aec:	4b26      	ldr	r3, [pc, #152]	; (8001b88 <HAL_GPIO_Init+0x320>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	43db      	mvns	r3, r3
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	4013      	ands	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d003      	beq.n	8001b10 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b10:	4a1d      	ldr	r2, [pc, #116]	; (8001b88 <HAL_GPIO_Init+0x320>)
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b16:	4b1c      	ldr	r3, [pc, #112]	; (8001b88 <HAL_GPIO_Init+0x320>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	4013      	ands	r3, r2
 8001b24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b3a:	4a13      	ldr	r2, [pc, #76]	; (8001b88 <HAL_GPIO_Init+0x320>)
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	3301      	adds	r3, #1
 8001b44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f47f ae91 	bne.w	8001878 <HAL_GPIO_Init+0x10>
  }
}
 8001b56:	bf00      	nop
 8001b58:	bf00      	nop
 8001b5a:	371c      	adds	r7, #28
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	40021000 	.word	0x40021000
 8001b68:	40010000 	.word	0x40010000
 8001b6c:	48000400 	.word	0x48000400
 8001b70:	48000800 	.word	0x48000800
 8001b74:	48000c00 	.word	0x48000c00
 8001b78:	48001000 	.word	0x48001000
 8001b7c:	48001400 	.word	0x48001400
 8001b80:	48001800 	.word	0x48001800
 8001b84:	48001c00 	.word	0x48001c00
 8001b88:	40010400 	.word	0x40010400

08001b8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	460b      	mov	r3, r1
 8001b96:	807b      	strh	r3, [r7, #2]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b9c:	787b      	ldrb	r3, [r7, #1]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ba2:	887a      	ldrh	r2, [r7, #2]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ba8:	e002      	b.n	8001bb0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001baa:	887a      	ldrh	r2, [r7, #2]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bc0:	4b0d      	ldr	r3, [pc, #52]	; (8001bf8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bcc:	d102      	bne.n	8001bd4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001bce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bd2:	e00b      	b.n	8001bec <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001bd4:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001bd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001be2:	d102      	bne.n	8001bea <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001be4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001be8:	e000      	b.n	8001bec <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001bea:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	40007000 	.word	0x40007000

08001bfc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d141      	bne.n	8001c8e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c0a:	4b4b      	ldr	r3, [pc, #300]	; (8001d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c16:	d131      	bne.n	8001c7c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c18:	4b47      	ldr	r3, [pc, #284]	; (8001d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c1e:	4a46      	ldr	r2, [pc, #280]	; (8001d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c24:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c28:	4b43      	ldr	r3, [pc, #268]	; (8001d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c30:	4a41      	ldr	r2, [pc, #260]	; (8001d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c36:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001c38:	4b40      	ldr	r3, [pc, #256]	; (8001d3c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2232      	movs	r2, #50	; 0x32
 8001c3e:	fb02 f303 	mul.w	r3, r2, r3
 8001c42:	4a3f      	ldr	r2, [pc, #252]	; (8001d40 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c44:	fba2 2303 	umull	r2, r3, r2, r3
 8001c48:	0c9b      	lsrs	r3, r3, #18
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c4e:	e002      	b.n	8001c56 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c56:	4b38      	ldr	r3, [pc, #224]	; (8001d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c62:	d102      	bne.n	8001c6a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1f2      	bne.n	8001c50 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c6a:	4b33      	ldr	r3, [pc, #204]	; (8001d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c76:	d158      	bne.n	8001d2a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e057      	b.n	8001d2c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c7c:	4b2e      	ldr	r3, [pc, #184]	; (8001d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c82:	4a2d      	ldr	r2, [pc, #180]	; (8001d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c88:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001c8c:	e04d      	b.n	8001d2a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c94:	d141      	bne.n	8001d1a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c96:	4b28      	ldr	r3, [pc, #160]	; (8001d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ca2:	d131      	bne.n	8001d08 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ca4:	4b24      	ldr	r3, [pc, #144]	; (8001d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001caa:	4a23      	ldr	r2, [pc, #140]	; (8001d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cb0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cb4:	4b20      	ldr	r3, [pc, #128]	; (8001d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cbc:	4a1e      	ldr	r2, [pc, #120]	; (8001d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cc2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001cc4:	4b1d      	ldr	r3, [pc, #116]	; (8001d3c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2232      	movs	r2, #50	; 0x32
 8001cca:	fb02 f303 	mul.w	r3, r2, r3
 8001cce:	4a1c      	ldr	r2, [pc, #112]	; (8001d40 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd4:	0c9b      	lsrs	r3, r3, #18
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cda:	e002      	b.n	8001ce2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ce2:	4b15      	ldr	r3, [pc, #84]	; (8001d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cee:	d102      	bne.n	8001cf6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1f2      	bne.n	8001cdc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cf6:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d02:	d112      	bne.n	8001d2a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e011      	b.n	8001d2c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d08:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d0e:	4a0a      	ldr	r2, [pc, #40]	; (8001d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d14:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001d18:	e007      	b.n	8001d2a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d1a:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d22:	4a05      	ldr	r2, [pc, #20]	; (8001d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d24:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d28:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	40007000 	.word	0x40007000
 8001d3c:	20000000 	.word	0x20000000
 8001d40:	431bde83 	.word	0x431bde83

08001d44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08a      	sub	sp, #40	; 0x28
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d102      	bne.n	8001d58 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	f000 bc68 	b.w	8002628 <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d58:	4b97      	ldr	r3, [pc, #604]	; (8001fb8 <HAL_RCC_OscConfig+0x274>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f003 030c 	and.w	r3, r3, #12
 8001d60:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d62:	4b95      	ldr	r3, [pc, #596]	; (8001fb8 <HAL_RCC_OscConfig+0x274>)
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0310 	and.w	r3, r3, #16
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f000 80e6 	beq.w	8001f46 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d7a:	6a3b      	ldr	r3, [r7, #32]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d007      	beq.n	8001d90 <HAL_RCC_OscConfig+0x4c>
 8001d80:	6a3b      	ldr	r3, [r7, #32]
 8001d82:	2b0c      	cmp	r3, #12
 8001d84:	f040 808d 	bne.w	8001ea2 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	f040 8089 	bne.w	8001ea2 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d90:	4b89      	ldr	r3, [pc, #548]	; (8001fb8 <HAL_RCC_OscConfig+0x274>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d006      	beq.n	8001daa <HAL_RCC_OscConfig+0x66>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	69db      	ldr	r3, [r3, #28]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d102      	bne.n	8001daa <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	f000 bc3f 	b.w	8002628 <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dae:	4b82      	ldr	r3, [pc, #520]	; (8001fb8 <HAL_RCC_OscConfig+0x274>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0308 	and.w	r3, r3, #8
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d004      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x80>
 8001dba:	4b7f      	ldr	r3, [pc, #508]	; (8001fb8 <HAL_RCC_OscConfig+0x274>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dc2:	e005      	b.n	8001dd0 <HAL_RCC_OscConfig+0x8c>
 8001dc4:	4b7c      	ldr	r3, [pc, #496]	; (8001fb8 <HAL_RCC_OscConfig+0x274>)
 8001dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dca:	091b      	lsrs	r3, r3, #4
 8001dcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d224      	bcs.n	8001e1e <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f000 fe2d 	bl	8002a38 <RCC_SetFlashLatencyFromMSIRange>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d002      	beq.n	8001dea <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	f000 bc1f 	b.w	8002628 <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dea:	4b73      	ldr	r3, [pc, #460]	; (8001fb8 <HAL_RCC_OscConfig+0x274>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a72      	ldr	r2, [pc, #456]	; (8001fb8 <HAL_RCC_OscConfig+0x274>)
 8001df0:	f043 0308 	orr.w	r3, r3, #8
 8001df4:	6013      	str	r3, [r2, #0]
 8001df6:	4b70      	ldr	r3, [pc, #448]	; (8001fb8 <HAL_RCC_OscConfig+0x274>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e02:	496d      	ldr	r1, [pc, #436]	; (8001fb8 <HAL_RCC_OscConfig+0x274>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e08:	4b6b      	ldr	r3, [pc, #428]	; (8001fb8 <HAL_RCC_OscConfig+0x274>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	021b      	lsls	r3, r3, #8
 8001e16:	4968      	ldr	r1, [pc, #416]	; (8001fb8 <HAL_RCC_OscConfig+0x274>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	604b      	str	r3, [r1, #4]
 8001e1c:	e025      	b.n	8001e6a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e1e:	4b66      	ldr	r3, [pc, #408]	; (8001fb8 <HAL_RCC_OscConfig+0x274>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a65      	ldr	r2, [pc, #404]	; (8001fb8 <HAL_RCC_OscConfig+0x274>)
 8001e24:	f043 0308 	orr.w	r3, r3, #8
 8001e28:	6013      	str	r3, [r2, #0]
 8001e2a:	4b63      	ldr	r3, [pc, #396]	; (8001fb8 <HAL_RCC_OscConfig+0x274>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e36:	4960      	ldr	r1, [pc, #384]	; (8001fb8 <HAL_RCC_OscConfig+0x274>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e3c:	4b5e      	ldr	r3, [pc, #376]	; (8001fb8 <HAL_RCC_OscConfig+0x274>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	021b      	lsls	r3, r3, #8
 8001e4a:	495b      	ldr	r1, [pc, #364]	; (8001fb8 <HAL_RCC_OscConfig+0x274>)
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e50:	6a3b      	ldr	r3, [r7, #32]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d109      	bne.n	8001e6a <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f000 fdec 	bl	8002a38 <RCC_SetFlashLatencyFromMSIRange>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e3de      	b.n	8002628 <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e6a:	f000 fd21 	bl	80028b0 <HAL_RCC_GetSysClockFreq>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	4b51      	ldr	r3, [pc, #324]	; (8001fb8 <HAL_RCC_OscConfig+0x274>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	091b      	lsrs	r3, r3, #4
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	4950      	ldr	r1, [pc, #320]	; (8001fbc <HAL_RCC_OscConfig+0x278>)
 8001e7c:	5ccb      	ldrb	r3, [r1, r3]
 8001e7e:	f003 031f 	and.w	r3, r3, #31
 8001e82:	fa22 f303 	lsr.w	r3, r2, r3
 8001e86:	4a4e      	ldr	r2, [pc, #312]	; (8001fc0 <HAL_RCC_OscConfig+0x27c>)
 8001e88:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e8a:	4b4e      	ldr	r3, [pc, #312]	; (8001fc4 <HAL_RCC_OscConfig+0x280>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff f9c2 	bl	8001218 <HAL_InitTick>
 8001e94:	4603      	mov	r3, r0
 8001e96:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001e98:	7dfb      	ldrb	r3, [r7, #23]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d052      	beq.n	8001f44 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8001e9e:	7dfb      	ldrb	r3, [r7, #23]
 8001ea0:	e3c2      	b.n	8002628 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d032      	beq.n	8001f10 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001eaa:	4b43      	ldr	r3, [pc, #268]	; (8001fb8 <HAL_RCC_OscConfig+0x274>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a42      	ldr	r2, [pc, #264]	; (8001fb8 <HAL_RCC_OscConfig+0x274>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001eb6:	f7ff f9ff 	bl	80012b8 <HAL_GetTick>
 8001eba:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ebe:	f7ff f9fb 	bl	80012b8 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e3ab      	b.n	8002628 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ed0:	4b39      	ldr	r3, [pc, #228]	; (8001fb8 <HAL_RCC_OscConfig+0x274>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0f0      	beq.n	8001ebe <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001edc:	4b36      	ldr	r3, [pc, #216]	; (8001fb8 <HAL_RCC_OscConfig+0x274>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a35      	ldr	r2, [pc, #212]	; (8001fb8 <HAL_RCC_OscConfig+0x274>)
 8001ee2:	f043 0308 	orr.w	r3, r3, #8
 8001ee6:	6013      	str	r3, [r2, #0]
 8001ee8:	4b33      	ldr	r3, [pc, #204]	; (8001fb8 <HAL_RCC_OscConfig+0x274>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef4:	4930      	ldr	r1, [pc, #192]	; (8001fb8 <HAL_RCC_OscConfig+0x274>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001efa:	4b2f      	ldr	r3, [pc, #188]	; (8001fb8 <HAL_RCC_OscConfig+0x274>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a1b      	ldr	r3, [r3, #32]
 8001f06:	021b      	lsls	r3, r3, #8
 8001f08:	492b      	ldr	r1, [pc, #172]	; (8001fb8 <HAL_RCC_OscConfig+0x274>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	604b      	str	r3, [r1, #4]
 8001f0e:	e01a      	b.n	8001f46 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f10:	4b29      	ldr	r3, [pc, #164]	; (8001fb8 <HAL_RCC_OscConfig+0x274>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a28      	ldr	r2, [pc, #160]	; (8001fb8 <HAL_RCC_OscConfig+0x274>)
 8001f16:	f023 0301 	bic.w	r3, r3, #1
 8001f1a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f1c:	f7ff f9cc 	bl	80012b8 <HAL_GetTick>
 8001f20:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f24:	f7ff f9c8 	bl	80012b8 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e378      	b.n	8002628 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f36:	4b20      	ldr	r3, [pc, #128]	; (8001fb8 <HAL_RCC_OscConfig+0x274>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1f0      	bne.n	8001f24 <HAL_RCC_OscConfig+0x1e0>
 8001f42:	e000      	b.n	8001f46 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f44:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d073      	beq.n	800203a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001f52:	6a3b      	ldr	r3, [r7, #32]
 8001f54:	2b08      	cmp	r3, #8
 8001f56:	d005      	beq.n	8001f64 <HAL_RCC_OscConfig+0x220>
 8001f58:	6a3b      	ldr	r3, [r7, #32]
 8001f5a:	2b0c      	cmp	r3, #12
 8001f5c:	d10e      	bne.n	8001f7c <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	2b03      	cmp	r3, #3
 8001f62:	d10b      	bne.n	8001f7c <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f64:	4b14      	ldr	r3, [pc, #80]	; (8001fb8 <HAL_RCC_OscConfig+0x274>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d063      	beq.n	8002038 <HAL_RCC_OscConfig+0x2f4>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d15f      	bne.n	8002038 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e355      	b.n	8002628 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f84:	d106      	bne.n	8001f94 <HAL_RCC_OscConfig+0x250>
 8001f86:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <HAL_RCC_OscConfig+0x274>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a0b      	ldr	r2, [pc, #44]	; (8001fb8 <HAL_RCC_OscConfig+0x274>)
 8001f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	e025      	b.n	8001fe0 <HAL_RCC_OscConfig+0x29c>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f9c:	d114      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x284>
 8001f9e:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <HAL_RCC_OscConfig+0x274>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a05      	ldr	r2, [pc, #20]	; (8001fb8 <HAL_RCC_OscConfig+0x274>)
 8001fa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fa8:	6013      	str	r3, [r2, #0]
 8001faa:	4b03      	ldr	r3, [pc, #12]	; (8001fb8 <HAL_RCC_OscConfig+0x274>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a02      	ldr	r2, [pc, #8]	; (8001fb8 <HAL_RCC_OscConfig+0x274>)
 8001fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	e013      	b.n	8001fe0 <HAL_RCC_OscConfig+0x29c>
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	08008020 	.word	0x08008020
 8001fc0:	20000000 	.word	0x20000000
 8001fc4:	20000004 	.word	0x20000004
 8001fc8:	4b8f      	ldr	r3, [pc, #572]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a8e      	ldr	r2, [pc, #568]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8001fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fd2:	6013      	str	r3, [r2, #0]
 8001fd4:	4b8c      	ldr	r3, [pc, #560]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a8b      	ldr	r2, [pc, #556]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8001fda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d013      	beq.n	8002010 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe8:	f7ff f966 	bl	80012b8 <HAL_GetTick>
 8001fec:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ff0:	f7ff f962 	bl	80012b8 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b64      	cmp	r3, #100	; 0x64
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e312      	b.n	8002628 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002002:	4b81      	ldr	r3, [pc, #516]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0f0      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x2ac>
 800200e:	e014      	b.n	800203a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002010:	f7ff f952 	bl	80012b8 <HAL_GetTick>
 8002014:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002018:	f7ff f94e 	bl	80012b8 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b64      	cmp	r3, #100	; 0x64
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e2fe      	b.n	8002628 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800202a:	4b77      	ldr	r3, [pc, #476]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1f0      	bne.n	8002018 <HAL_RCC_OscConfig+0x2d4>
 8002036:	e000      	b.n	800203a <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002038:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d060      	beq.n	8002108 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002046:	6a3b      	ldr	r3, [r7, #32]
 8002048:	2b04      	cmp	r3, #4
 800204a:	d005      	beq.n	8002058 <HAL_RCC_OscConfig+0x314>
 800204c:	6a3b      	ldr	r3, [r7, #32]
 800204e:	2b0c      	cmp	r3, #12
 8002050:	d119      	bne.n	8002086 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	2b02      	cmp	r3, #2
 8002056:	d116      	bne.n	8002086 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002058:	4b6b      	ldr	r3, [pc, #428]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002060:	2b00      	cmp	r3, #0
 8002062:	d005      	beq.n	8002070 <HAL_RCC_OscConfig+0x32c>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d101      	bne.n	8002070 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e2db      	b.n	8002628 <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002070:	4b65      	ldr	r3, [pc, #404]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	061b      	lsls	r3, r3, #24
 800207e:	4962      	ldr	r1, [pc, #392]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8002080:	4313      	orrs	r3, r2
 8002082:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002084:	e040      	b.n	8002108 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d023      	beq.n	80020d6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800208e:	4b5e      	ldr	r3, [pc, #376]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a5d      	ldr	r2, [pc, #372]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8002094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002098:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209a:	f7ff f90d 	bl	80012b8 <HAL_GetTick>
 800209e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020a0:	e008      	b.n	80020b4 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020a2:	f7ff f909 	bl	80012b8 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e2b9      	b.n	8002628 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020b4:	4b54      	ldr	r3, [pc, #336]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d0f0      	beq.n	80020a2 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c0:	4b51      	ldr	r3, [pc, #324]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	061b      	lsls	r3, r3, #24
 80020ce:	494e      	ldr	r1, [pc, #312]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	604b      	str	r3, [r1, #4]
 80020d4:	e018      	b.n	8002108 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020d6:	4b4c      	ldr	r3, [pc, #304]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a4b      	ldr	r2, [pc, #300]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 80020dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e2:	f7ff f8e9 	bl	80012b8 <HAL_GetTick>
 80020e6:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020e8:	e008      	b.n	80020fc <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ea:	f7ff f8e5 	bl	80012b8 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e295      	b.n	8002628 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020fc:	4b42      	ldr	r3, [pc, #264]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1f0      	bne.n	80020ea <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0308 	and.w	r3, r3, #8
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 8082 	beq.w	800221a <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d05f      	beq.n	80021de <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 800211e:	4b3a      	ldr	r3, [pc, #232]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8002120:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002124:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	699a      	ldr	r2, [r3, #24]
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	f003 0310 	and.w	r3, r3, #16
 8002130:	429a      	cmp	r2, r3
 8002132:	d037      	beq.n	80021a4 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d006      	beq.n	800214c <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e26d      	b.n	8002628 <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	d01b      	beq.n	800218e <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8002156:	4b2c      	ldr	r3, [pc, #176]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8002158:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800215c:	4a2a      	ldr	r2, [pc, #168]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 800215e:	f023 0301 	bic.w	r3, r3, #1
 8002162:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002166:	f7ff f8a7 	bl	80012b8 <HAL_GetTick>
 800216a:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800216e:	f7ff f8a3 	bl	80012b8 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b11      	cmp	r3, #17
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e253      	b.n	8002628 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002180:	4b21      	ldr	r3, [pc, #132]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8002182:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1ef      	bne.n	800216e <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800218e:	4b1e      	ldr	r3, [pc, #120]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8002190:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002194:	f023 0210 	bic.w	r2, r3, #16
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	491a      	ldr	r1, [pc, #104]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021a4:	4b18      	ldr	r3, [pc, #96]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 80021a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021aa:	4a17      	ldr	r2, [pc, #92]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 80021ac:	f043 0301 	orr.w	r3, r3, #1
 80021b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b4:	f7ff f880 	bl	80012b8 <HAL_GetTick>
 80021b8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021bc:	f7ff f87c 	bl	80012b8 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b11      	cmp	r3, #17
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e22c      	b.n	8002628 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021ce:	4b0e      	ldr	r3, [pc, #56]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 80021d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0ef      	beq.n	80021bc <HAL_RCC_OscConfig+0x478>
 80021dc:	e01d      	b.n	800221a <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021de:	4b0a      	ldr	r3, [pc, #40]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 80021e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021e4:	4a08      	ldr	r2, [pc, #32]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 80021e6:	f023 0301 	bic.w	r3, r3, #1
 80021ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ee:	f7ff f863 	bl	80012b8 <HAL_GetTick>
 80021f2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021f4:	e00a      	b.n	800220c <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021f6:	f7ff f85f 	bl	80012b8 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b11      	cmp	r3, #17
 8002202:	d903      	bls.n	800220c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e20f      	b.n	8002628 <HAL_RCC_OscConfig+0x8e4>
 8002208:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800220c:	4b83      	ldr	r3, [pc, #524]	; (800241c <HAL_RCC_OscConfig+0x6d8>)
 800220e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1ed      	bne.n	80021f6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0304 	and.w	r3, r3, #4
 8002222:	2b00      	cmp	r3, #0
 8002224:	f000 80bd 	beq.w	80023a2 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002228:	2300      	movs	r3, #0
 800222a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800222e:	4b7b      	ldr	r3, [pc, #492]	; (800241c <HAL_RCC_OscConfig+0x6d8>)
 8002230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10e      	bne.n	8002258 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800223a:	4b78      	ldr	r3, [pc, #480]	; (800241c <HAL_RCC_OscConfig+0x6d8>)
 800223c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223e:	4a77      	ldr	r2, [pc, #476]	; (800241c <HAL_RCC_OscConfig+0x6d8>)
 8002240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002244:	6593      	str	r3, [r2, #88]	; 0x58
 8002246:	4b75      	ldr	r3, [pc, #468]	; (800241c <HAL_RCC_OscConfig+0x6d8>)
 8002248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800224a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002252:	2301      	movs	r3, #1
 8002254:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002258:	4b71      	ldr	r3, [pc, #452]	; (8002420 <HAL_RCC_OscConfig+0x6dc>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002260:	2b00      	cmp	r3, #0
 8002262:	d118      	bne.n	8002296 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002264:	4b6e      	ldr	r3, [pc, #440]	; (8002420 <HAL_RCC_OscConfig+0x6dc>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a6d      	ldr	r2, [pc, #436]	; (8002420 <HAL_RCC_OscConfig+0x6dc>)
 800226a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800226e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002270:	f7ff f822 	bl	80012b8 <HAL_GetTick>
 8002274:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002278:	f7ff f81e 	bl	80012b8 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e1ce      	b.n	8002628 <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800228a:	4b65      	ldr	r3, [pc, #404]	; (8002420 <HAL_RCC_OscConfig+0x6dc>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002292:	2b00      	cmp	r3, #0
 8002294:	d0f0      	beq.n	8002278 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d02c      	beq.n	80022fc <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80022a2:	4b5e      	ldr	r3, [pc, #376]	; (800241c <HAL_RCC_OscConfig+0x6d8>)
 80022a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022b4:	4959      	ldr	r1, [pc, #356]	; (800241c <HAL_RCC_OscConfig+0x6d8>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d010      	beq.n	80022ea <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80022c8:	4b54      	ldr	r3, [pc, #336]	; (800241c <HAL_RCC_OscConfig+0x6d8>)
 80022ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ce:	4a53      	ldr	r2, [pc, #332]	; (800241c <HAL_RCC_OscConfig+0x6d8>)
 80022d0:	f043 0304 	orr.w	r3, r3, #4
 80022d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80022d8:	4b50      	ldr	r3, [pc, #320]	; (800241c <HAL_RCC_OscConfig+0x6d8>)
 80022da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022de:	4a4f      	ldr	r2, [pc, #316]	; (800241c <HAL_RCC_OscConfig+0x6d8>)
 80022e0:	f043 0301 	orr.w	r3, r3, #1
 80022e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022e8:	e018      	b.n	800231c <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80022ea:	4b4c      	ldr	r3, [pc, #304]	; (800241c <HAL_RCC_OscConfig+0x6d8>)
 80022ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f0:	4a4a      	ldr	r2, [pc, #296]	; (800241c <HAL_RCC_OscConfig+0x6d8>)
 80022f2:	f043 0301 	orr.w	r3, r3, #1
 80022f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022fa:	e00f      	b.n	800231c <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80022fc:	4b47      	ldr	r3, [pc, #284]	; (800241c <HAL_RCC_OscConfig+0x6d8>)
 80022fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002302:	4a46      	ldr	r2, [pc, #280]	; (800241c <HAL_RCC_OscConfig+0x6d8>)
 8002304:	f023 0301 	bic.w	r3, r3, #1
 8002308:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800230c:	4b43      	ldr	r3, [pc, #268]	; (800241c <HAL_RCC_OscConfig+0x6d8>)
 800230e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002312:	4a42      	ldr	r2, [pc, #264]	; (800241c <HAL_RCC_OscConfig+0x6d8>)
 8002314:	f023 0304 	bic.w	r3, r3, #4
 8002318:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d016      	beq.n	8002352 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002324:	f7fe ffc8 	bl	80012b8 <HAL_GetTick>
 8002328:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800232a:	e00a      	b.n	8002342 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800232c:	f7fe ffc4 	bl	80012b8 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	f241 3288 	movw	r2, #5000	; 0x1388
 800233a:	4293      	cmp	r3, r2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e172      	b.n	8002628 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002342:	4b36      	ldr	r3, [pc, #216]	; (800241c <HAL_RCC_OscConfig+0x6d8>)
 8002344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d0ed      	beq.n	800232c <HAL_RCC_OscConfig+0x5e8>
 8002350:	e01d      	b.n	800238e <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002352:	f7fe ffb1 	bl	80012b8 <HAL_GetTick>
 8002356:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002358:	e00a      	b.n	8002370 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800235a:	f7fe ffad 	bl	80012b8 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	f241 3288 	movw	r2, #5000	; 0x1388
 8002368:	4293      	cmp	r3, r2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e15b      	b.n	8002628 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002370:	4b2a      	ldr	r3, [pc, #168]	; (800241c <HAL_RCC_OscConfig+0x6d8>)
 8002372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1ed      	bne.n	800235a <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800237e:	4b27      	ldr	r3, [pc, #156]	; (800241c <HAL_RCC_OscConfig+0x6d8>)
 8002380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002384:	4a25      	ldr	r2, [pc, #148]	; (800241c <HAL_RCC_OscConfig+0x6d8>)
 8002386:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800238a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800238e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002392:	2b01      	cmp	r3, #1
 8002394:	d105      	bne.n	80023a2 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002396:	4b21      	ldr	r3, [pc, #132]	; (800241c <HAL_RCC_OscConfig+0x6d8>)
 8002398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239a:	4a20      	ldr	r2, [pc, #128]	; (800241c <HAL_RCC_OscConfig+0x6d8>)
 800239c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0320 	and.w	r3, r3, #32
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d041      	beq.n	8002432 <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d01c      	beq.n	80023f0 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80023b6:	4b19      	ldr	r3, [pc, #100]	; (800241c <HAL_RCC_OscConfig+0x6d8>)
 80023b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023bc:	4a17      	ldr	r2, [pc, #92]	; (800241c <HAL_RCC_OscConfig+0x6d8>)
 80023be:	f043 0301 	orr.w	r3, r3, #1
 80023c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023c6:	f7fe ff77 	bl	80012b8 <HAL_GetTick>
 80023ca:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023ce:	f7fe ff73 	bl	80012b8 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e123      	b.n	8002628 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023e0:	4b0e      	ldr	r3, [pc, #56]	; (800241c <HAL_RCC_OscConfig+0x6d8>)
 80023e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0ef      	beq.n	80023ce <HAL_RCC_OscConfig+0x68a>
 80023ee:	e020      	b.n	8002432 <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80023f0:	4b0a      	ldr	r3, [pc, #40]	; (800241c <HAL_RCC_OscConfig+0x6d8>)
 80023f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023f6:	4a09      	ldr	r2, [pc, #36]	; (800241c <HAL_RCC_OscConfig+0x6d8>)
 80023f8:	f023 0301 	bic.w	r3, r3, #1
 80023fc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002400:	f7fe ff5a 	bl	80012b8 <HAL_GetTick>
 8002404:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002406:	e00d      	b.n	8002424 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002408:	f7fe ff56 	bl	80012b8 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d906      	bls.n	8002424 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e106      	b.n	8002628 <HAL_RCC_OscConfig+0x8e4>
 800241a:	bf00      	nop
 800241c:	40021000 	.word	0x40021000
 8002420:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002424:	4b82      	ldr	r3, [pc, #520]	; (8002630 <HAL_RCC_OscConfig+0x8ec>)
 8002426:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1ea      	bne.n	8002408 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002436:	2b00      	cmp	r3, #0
 8002438:	f000 80f5 	beq.w	8002626 <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002440:	2b02      	cmp	r3, #2
 8002442:	f040 80cb 	bne.w	80025dc <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002446:	4b7a      	ldr	r3, [pc, #488]	; (8002630 <HAL_RCC_OscConfig+0x8ec>)
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f003 0203 	and.w	r2, r3, #3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	429a      	cmp	r2, r3
 8002458:	d12c      	bne.n	80024b4 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002464:	3b01      	subs	r3, #1
 8002466:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002468:	429a      	cmp	r2, r3
 800246a:	d123      	bne.n	80024b4 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002476:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002478:	429a      	cmp	r2, r3
 800247a:	d11b      	bne.n	80024b4 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002486:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002488:	429a      	cmp	r2, r3
 800248a:	d113      	bne.n	80024b4 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002496:	085b      	lsrs	r3, r3, #1
 8002498:	3b01      	subs	r3, #1
 800249a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800249c:	429a      	cmp	r2, r3
 800249e:	d109      	bne.n	80024b4 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024aa:	085b      	lsrs	r3, r3, #1
 80024ac:	3b01      	subs	r3, #1
 80024ae:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d06d      	beq.n	8002590 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024b4:	6a3b      	ldr	r3, [r7, #32]
 80024b6:	2b0c      	cmp	r3, #12
 80024b8:	d068      	beq.n	800258c <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80024ba:	4b5d      	ldr	r3, [pc, #372]	; (8002630 <HAL_RCC_OscConfig+0x8ec>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d105      	bne.n	80024d2 <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80024c6:	4b5a      	ldr	r3, [pc, #360]	; (8002630 <HAL_RCC_OscConfig+0x8ec>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e0a8      	b.n	8002628 <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80024d6:	4b56      	ldr	r3, [pc, #344]	; (8002630 <HAL_RCC_OscConfig+0x8ec>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a55      	ldr	r2, [pc, #340]	; (8002630 <HAL_RCC_OscConfig+0x8ec>)
 80024dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024e0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024e2:	f7fe fee9 	bl	80012b8 <HAL_GetTick>
 80024e6:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024e8:	e008      	b.n	80024fc <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ea:	f7fe fee5 	bl	80012b8 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e095      	b.n	8002628 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024fc:	4b4c      	ldr	r3, [pc, #304]	; (8002630 <HAL_RCC_OscConfig+0x8ec>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1f0      	bne.n	80024ea <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002508:	4b49      	ldr	r3, [pc, #292]	; (8002630 <HAL_RCC_OscConfig+0x8ec>)
 800250a:	68da      	ldr	r2, [r3, #12]
 800250c:	4b49      	ldr	r3, [pc, #292]	; (8002634 <HAL_RCC_OscConfig+0x8f0>)
 800250e:	4013      	ands	r3, r2
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002518:	3a01      	subs	r2, #1
 800251a:	0112      	lsls	r2, r2, #4
 800251c:	4311      	orrs	r1, r2
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002522:	0212      	lsls	r2, r2, #8
 8002524:	4311      	orrs	r1, r2
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800252a:	0852      	lsrs	r2, r2, #1
 800252c:	3a01      	subs	r2, #1
 800252e:	0552      	lsls	r2, r2, #21
 8002530:	4311      	orrs	r1, r2
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002536:	0852      	lsrs	r2, r2, #1
 8002538:	3a01      	subs	r2, #1
 800253a:	0652      	lsls	r2, r2, #25
 800253c:	4311      	orrs	r1, r2
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002542:	06d2      	lsls	r2, r2, #27
 8002544:	430a      	orrs	r2, r1
 8002546:	493a      	ldr	r1, [pc, #232]	; (8002630 <HAL_RCC_OscConfig+0x8ec>)
 8002548:	4313      	orrs	r3, r2
 800254a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800254c:	4b38      	ldr	r3, [pc, #224]	; (8002630 <HAL_RCC_OscConfig+0x8ec>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a37      	ldr	r2, [pc, #220]	; (8002630 <HAL_RCC_OscConfig+0x8ec>)
 8002552:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002556:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002558:	4b35      	ldr	r3, [pc, #212]	; (8002630 <HAL_RCC_OscConfig+0x8ec>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	4a34      	ldr	r2, [pc, #208]	; (8002630 <HAL_RCC_OscConfig+0x8ec>)
 800255e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002562:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002564:	f7fe fea8 	bl	80012b8 <HAL_GetTick>
 8002568:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800256c:	f7fe fea4 	bl	80012b8 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e054      	b.n	8002628 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800257e:	4b2c      	ldr	r3, [pc, #176]	; (8002630 <HAL_RCC_OscConfig+0x8ec>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0f0      	beq.n	800256c <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800258a:	e04c      	b.n	8002626 <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e04b      	b.n	8002628 <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002590:	4b27      	ldr	r3, [pc, #156]	; (8002630 <HAL_RCC_OscConfig+0x8ec>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d144      	bne.n	8002626 <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800259c:	4b24      	ldr	r3, [pc, #144]	; (8002630 <HAL_RCC_OscConfig+0x8ec>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a23      	ldr	r2, [pc, #140]	; (8002630 <HAL_RCC_OscConfig+0x8ec>)
 80025a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025a8:	4b21      	ldr	r3, [pc, #132]	; (8002630 <HAL_RCC_OscConfig+0x8ec>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	4a20      	ldr	r2, [pc, #128]	; (8002630 <HAL_RCC_OscConfig+0x8ec>)
 80025ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025b4:	f7fe fe80 	bl	80012b8 <HAL_GetTick>
 80025b8:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025bc:	f7fe fe7c 	bl	80012b8 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e02c      	b.n	8002628 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ce:	4b18      	ldr	r3, [pc, #96]	; (8002630 <HAL_RCC_OscConfig+0x8ec>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d0f0      	beq.n	80025bc <HAL_RCC_OscConfig+0x878>
 80025da:	e024      	b.n	8002626 <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025dc:	6a3b      	ldr	r3, [r7, #32]
 80025de:	2b0c      	cmp	r3, #12
 80025e0:	d01f      	beq.n	8002622 <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e2:	4b13      	ldr	r3, [pc, #76]	; (8002630 <HAL_RCC_OscConfig+0x8ec>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a12      	ldr	r2, [pc, #72]	; (8002630 <HAL_RCC_OscConfig+0x8ec>)
 80025e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ee:	f7fe fe63 	bl	80012b8 <HAL_GetTick>
 80025f2:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025f4:	e008      	b.n	8002608 <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f6:	f7fe fe5f 	bl	80012b8 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e00f      	b.n	8002628 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002608:	4b09      	ldr	r3, [pc, #36]	; (8002630 <HAL_RCC_OscConfig+0x8ec>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1f0      	bne.n	80025f6 <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002614:	4b06      	ldr	r3, [pc, #24]	; (8002630 <HAL_RCC_OscConfig+0x8ec>)
 8002616:	68da      	ldr	r2, [r3, #12]
 8002618:	4905      	ldr	r1, [pc, #20]	; (8002630 <HAL_RCC_OscConfig+0x8ec>)
 800261a:	4b07      	ldr	r3, [pc, #28]	; (8002638 <HAL_RCC_OscConfig+0x8f4>)
 800261c:	4013      	ands	r3, r2
 800261e:	60cb      	str	r3, [r1, #12]
 8002620:	e001      	b.n	8002626 <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e000      	b.n	8002628 <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3728      	adds	r7, #40	; 0x28
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40021000 	.word	0x40021000
 8002634:	019d800c 	.word	0x019d800c
 8002638:	feeefffc 	.word	0xfeeefffc

0800263c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002646:	2300      	movs	r3, #0
 8002648:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e11d      	b.n	8002890 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002654:	4b90      	ldr	r3, [pc, #576]	; (8002898 <HAL_RCC_ClockConfig+0x25c>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 030f 	and.w	r3, r3, #15
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	429a      	cmp	r2, r3
 8002660:	d910      	bls.n	8002684 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002662:	4b8d      	ldr	r3, [pc, #564]	; (8002898 <HAL_RCC_ClockConfig+0x25c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f023 020f 	bic.w	r2, r3, #15
 800266a:	498b      	ldr	r1, [pc, #556]	; (8002898 <HAL_RCC_ClockConfig+0x25c>)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	4313      	orrs	r3, r2
 8002670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002672:	4b89      	ldr	r3, [pc, #548]	; (8002898 <HAL_RCC_ClockConfig+0x25c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	429a      	cmp	r2, r3
 800267e:	d001      	beq.n	8002684 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e105      	b.n	8002890 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d010      	beq.n	80026b2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	4b81      	ldr	r3, [pc, #516]	; (800289c <HAL_RCC_ClockConfig+0x260>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800269c:	429a      	cmp	r2, r3
 800269e:	d908      	bls.n	80026b2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026a0:	4b7e      	ldr	r3, [pc, #504]	; (800289c <HAL_RCC_ClockConfig+0x260>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	497b      	ldr	r1, [pc, #492]	; (800289c <HAL_RCC_ClockConfig+0x260>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d079      	beq.n	80027b2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	d11e      	bne.n	8002704 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026c6:	4b75      	ldr	r3, [pc, #468]	; (800289c <HAL_RCC_ClockConfig+0x260>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e0dc      	b.n	8002890 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80026d6:	f000 fa09 	bl	8002aec <RCC_GetSysClockFreqFromPLLSource>
 80026da:	4603      	mov	r3, r0
 80026dc:	4a70      	ldr	r2, [pc, #448]	; (80028a0 <HAL_RCC_ClockConfig+0x264>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d946      	bls.n	8002770 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80026e2:	4b6e      	ldr	r3, [pc, #440]	; (800289c <HAL_RCC_ClockConfig+0x260>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d140      	bne.n	8002770 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80026ee:	4b6b      	ldr	r3, [pc, #428]	; (800289c <HAL_RCC_ClockConfig+0x260>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026f6:	4a69      	ldr	r2, [pc, #420]	; (800289c <HAL_RCC_ClockConfig+0x260>)
 80026f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026fc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80026fe:	2380      	movs	r3, #128	; 0x80
 8002700:	617b      	str	r3, [r7, #20]
 8002702:	e035      	b.n	8002770 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2b02      	cmp	r3, #2
 800270a:	d107      	bne.n	800271c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800270c:	4b63      	ldr	r3, [pc, #396]	; (800289c <HAL_RCC_ClockConfig+0x260>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d115      	bne.n	8002744 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e0b9      	b.n	8002890 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d107      	bne.n	8002734 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002724:	4b5d      	ldr	r3, [pc, #372]	; (800289c <HAL_RCC_ClockConfig+0x260>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d109      	bne.n	8002744 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e0ad      	b.n	8002890 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002734:	4b59      	ldr	r3, [pc, #356]	; (800289c <HAL_RCC_ClockConfig+0x260>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800273c:	2b00      	cmp	r3, #0
 800273e:	d101      	bne.n	8002744 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e0a5      	b.n	8002890 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002744:	f000 f8b4 	bl	80028b0 <HAL_RCC_GetSysClockFreq>
 8002748:	4603      	mov	r3, r0
 800274a:	4a55      	ldr	r2, [pc, #340]	; (80028a0 <HAL_RCC_ClockConfig+0x264>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d90f      	bls.n	8002770 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002750:	4b52      	ldr	r3, [pc, #328]	; (800289c <HAL_RCC_ClockConfig+0x260>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d109      	bne.n	8002770 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800275c:	4b4f      	ldr	r3, [pc, #316]	; (800289c <HAL_RCC_ClockConfig+0x260>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002764:	4a4d      	ldr	r2, [pc, #308]	; (800289c <HAL_RCC_ClockConfig+0x260>)
 8002766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800276a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800276c:	2380      	movs	r3, #128	; 0x80
 800276e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002770:	4b4a      	ldr	r3, [pc, #296]	; (800289c <HAL_RCC_ClockConfig+0x260>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f023 0203 	bic.w	r2, r3, #3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	4947      	ldr	r1, [pc, #284]	; (800289c <HAL_RCC_ClockConfig+0x260>)
 800277e:	4313      	orrs	r3, r2
 8002780:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002782:	f7fe fd99 	bl	80012b8 <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002788:	e00a      	b.n	80027a0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800278a:	f7fe fd95 	bl	80012b8 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	f241 3288 	movw	r2, #5000	; 0x1388
 8002798:	4293      	cmp	r3, r2
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e077      	b.n	8002890 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027a0:	4b3e      	ldr	r3, [pc, #248]	; (800289c <HAL_RCC_ClockConfig+0x260>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f003 020c 	and.w	r2, r3, #12
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d1eb      	bne.n	800278a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	2b80      	cmp	r3, #128	; 0x80
 80027b6:	d105      	bne.n	80027c4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80027b8:	4b38      	ldr	r3, [pc, #224]	; (800289c <HAL_RCC_ClockConfig+0x260>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	4a37      	ldr	r2, [pc, #220]	; (800289c <HAL_RCC_ClockConfig+0x260>)
 80027be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027c2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d010      	beq.n	80027f2 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	4b31      	ldr	r3, [pc, #196]	; (800289c <HAL_RCC_ClockConfig+0x260>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027dc:	429a      	cmp	r2, r3
 80027de:	d208      	bcs.n	80027f2 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027e0:	4b2e      	ldr	r3, [pc, #184]	; (800289c <HAL_RCC_ClockConfig+0x260>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	492b      	ldr	r1, [pc, #172]	; (800289c <HAL_RCC_ClockConfig+0x260>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027f2:	4b29      	ldr	r3, [pc, #164]	; (8002898 <HAL_RCC_ClockConfig+0x25c>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d210      	bcs.n	8002822 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002800:	4b25      	ldr	r3, [pc, #148]	; (8002898 <HAL_RCC_ClockConfig+0x25c>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f023 020f 	bic.w	r2, r3, #15
 8002808:	4923      	ldr	r1, [pc, #140]	; (8002898 <HAL_RCC_ClockConfig+0x25c>)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	4313      	orrs	r3, r2
 800280e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002810:	4b21      	ldr	r3, [pc, #132]	; (8002898 <HAL_RCC_ClockConfig+0x25c>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 030f 	and.w	r3, r3, #15
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	429a      	cmp	r2, r3
 800281c:	d001      	beq.n	8002822 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e036      	b.n	8002890 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0304 	and.w	r3, r3, #4
 800282a:	2b00      	cmp	r3, #0
 800282c:	d008      	beq.n	8002840 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800282e:	4b1b      	ldr	r3, [pc, #108]	; (800289c <HAL_RCC_ClockConfig+0x260>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	4918      	ldr	r1, [pc, #96]	; (800289c <HAL_RCC_ClockConfig+0x260>)
 800283c:	4313      	orrs	r3, r2
 800283e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0308 	and.w	r3, r3, #8
 8002848:	2b00      	cmp	r3, #0
 800284a:	d009      	beq.n	8002860 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800284c:	4b13      	ldr	r3, [pc, #76]	; (800289c <HAL_RCC_ClockConfig+0x260>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	4910      	ldr	r1, [pc, #64]	; (800289c <HAL_RCC_ClockConfig+0x260>)
 800285c:	4313      	orrs	r3, r2
 800285e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002860:	f000 f826 	bl	80028b0 <HAL_RCC_GetSysClockFreq>
 8002864:	4602      	mov	r2, r0
 8002866:	4b0d      	ldr	r3, [pc, #52]	; (800289c <HAL_RCC_ClockConfig+0x260>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	091b      	lsrs	r3, r3, #4
 800286c:	f003 030f 	and.w	r3, r3, #15
 8002870:	490c      	ldr	r1, [pc, #48]	; (80028a4 <HAL_RCC_ClockConfig+0x268>)
 8002872:	5ccb      	ldrb	r3, [r1, r3]
 8002874:	f003 031f 	and.w	r3, r3, #31
 8002878:	fa22 f303 	lsr.w	r3, r2, r3
 800287c:	4a0a      	ldr	r2, [pc, #40]	; (80028a8 <HAL_RCC_ClockConfig+0x26c>)
 800287e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002880:	4b0a      	ldr	r3, [pc, #40]	; (80028ac <HAL_RCC_ClockConfig+0x270>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4618      	mov	r0, r3
 8002886:	f7fe fcc7 	bl	8001218 <HAL_InitTick>
 800288a:	4603      	mov	r3, r0
 800288c:	73fb      	strb	r3, [r7, #15]

  return status;
 800288e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3718      	adds	r7, #24
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	40022000 	.word	0x40022000
 800289c:	40021000 	.word	0x40021000
 80028a0:	04c4b400 	.word	0x04c4b400
 80028a4:	08008020 	.word	0x08008020
 80028a8:	20000000 	.word	0x20000000
 80028ac:	20000004 	.word	0x20000004

080028b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b089      	sub	sp, #36	; 0x24
 80028b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80028b6:	2300      	movs	r3, #0
 80028b8:	61fb      	str	r3, [r7, #28]
 80028ba:	2300      	movs	r3, #0
 80028bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028be:	4b3e      	ldr	r3, [pc, #248]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 030c 	and.w	r3, r3, #12
 80028c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028c8:	4b3b      	ldr	r3, [pc, #236]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	f003 0303 	and.w	r3, r3, #3
 80028d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d005      	beq.n	80028e4 <HAL_RCC_GetSysClockFreq+0x34>
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	2b0c      	cmp	r3, #12
 80028dc:	d121      	bne.n	8002922 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d11e      	bne.n	8002922 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80028e4:	4b34      	ldr	r3, [pc, #208]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0308 	and.w	r3, r3, #8
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d107      	bne.n	8002900 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80028f0:	4b31      	ldr	r3, [pc, #196]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80028f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028f6:	0a1b      	lsrs	r3, r3, #8
 80028f8:	f003 030f 	and.w	r3, r3, #15
 80028fc:	61fb      	str	r3, [r7, #28]
 80028fe:	e005      	b.n	800290c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002900:	4b2d      	ldr	r3, [pc, #180]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	091b      	lsrs	r3, r3, #4
 8002906:	f003 030f 	and.w	r3, r3, #15
 800290a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800290c:	4a2b      	ldr	r2, [pc, #172]	; (80029bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002914:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d10d      	bne.n	8002938 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002920:	e00a      	b.n	8002938 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	2b04      	cmp	r3, #4
 8002926:	d102      	bne.n	800292e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002928:	4b25      	ldr	r3, [pc, #148]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800292a:	61bb      	str	r3, [r7, #24]
 800292c:	e004      	b.n	8002938 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	2b08      	cmp	r3, #8
 8002932:	d101      	bne.n	8002938 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002934:	4b23      	ldr	r3, [pc, #140]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002936:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	2b0c      	cmp	r3, #12
 800293c:	d134      	bne.n	80029a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800293e:	4b1e      	ldr	r3, [pc, #120]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	f003 0303 	and.w	r3, r3, #3
 8002946:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	2b02      	cmp	r3, #2
 800294c:	d003      	beq.n	8002956 <HAL_RCC_GetSysClockFreq+0xa6>
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	2b03      	cmp	r3, #3
 8002952:	d003      	beq.n	800295c <HAL_RCC_GetSysClockFreq+0xac>
 8002954:	e005      	b.n	8002962 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002956:	4b1a      	ldr	r3, [pc, #104]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002958:	617b      	str	r3, [r7, #20]
      break;
 800295a:	e005      	b.n	8002968 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800295c:	4b19      	ldr	r3, [pc, #100]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800295e:	617b      	str	r3, [r7, #20]
      break;
 8002960:	e002      	b.n	8002968 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	617b      	str	r3, [r7, #20]
      break;
 8002966:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002968:	4b13      	ldr	r3, [pc, #76]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	091b      	lsrs	r3, r3, #4
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	3301      	adds	r3, #1
 8002974:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002976:	4b10      	ldr	r3, [pc, #64]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	0a1b      	lsrs	r3, r3, #8
 800297c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	fb03 f202 	mul.w	r2, r3, r2
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	fbb2 f3f3 	udiv	r3, r2, r3
 800298c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800298e:	4b0a      	ldr	r3, [pc, #40]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	0e5b      	lsrs	r3, r3, #25
 8002994:	f003 0303 	and.w	r3, r3, #3
 8002998:	3301      	adds	r3, #1
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80029a8:	69bb      	ldr	r3, [r7, #24]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3724      	adds	r7, #36	; 0x24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	40021000 	.word	0x40021000
 80029bc:	08008038 	.word	0x08008038
 80029c0:	00f42400 	.word	0x00f42400
 80029c4:	007a1200 	.word	0x007a1200

080029c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029cc:	4b03      	ldr	r3, [pc, #12]	; (80029dc <HAL_RCC_GetHCLKFreq+0x14>)
 80029ce:	681b      	ldr	r3, [r3, #0]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	20000000 	.word	0x20000000

080029e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80029e4:	f7ff fff0 	bl	80029c8 <HAL_RCC_GetHCLKFreq>
 80029e8:	4602      	mov	r2, r0
 80029ea:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	0a1b      	lsrs	r3, r3, #8
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	4904      	ldr	r1, [pc, #16]	; (8002a08 <HAL_RCC_GetPCLK1Freq+0x28>)
 80029f6:	5ccb      	ldrb	r3, [r1, r3]
 80029f8:	f003 031f 	and.w	r3, r3, #31
 80029fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40021000 	.word	0x40021000
 8002a08:	08008030 	.word	0x08008030

08002a0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a10:	f7ff ffda 	bl	80029c8 <HAL_RCC_GetHCLKFreq>
 8002a14:	4602      	mov	r2, r0
 8002a16:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	0adb      	lsrs	r3, r3, #11
 8002a1c:	f003 0307 	and.w	r3, r3, #7
 8002a20:	4904      	ldr	r1, [pc, #16]	; (8002a34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a22:	5ccb      	ldrb	r3, [r1, r3]
 8002a24:	f003 031f 	and.w	r3, r3, #31
 8002a28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	40021000 	.word	0x40021000
 8002a34:	08008030 	.word	0x08008030

08002a38 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a40:	2300      	movs	r3, #0
 8002a42:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a44:	4b27      	ldr	r3, [pc, #156]	; (8002ae4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d003      	beq.n	8002a58 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a50:	f7ff f8b4 	bl	8001bbc <HAL_PWREx_GetVoltageRange>
 8002a54:	6178      	str	r0, [r7, #20]
 8002a56:	e014      	b.n	8002a82 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a58:	4b22      	ldr	r3, [pc, #136]	; (8002ae4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5c:	4a21      	ldr	r2, [pc, #132]	; (8002ae4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002a5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a62:	6593      	str	r3, [r2, #88]	; 0x58
 8002a64:	4b1f      	ldr	r3, [pc, #124]	; (8002ae4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a6c:	60fb      	str	r3, [r7, #12]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a70:	f7ff f8a4 	bl	8001bbc <HAL_PWREx_GetVoltageRange>
 8002a74:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a76:	4b1b      	ldr	r3, [pc, #108]	; (8002ae4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7a:	4a1a      	ldr	r2, [pc, #104]	; (8002ae4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002a7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a80:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a88:	d10b      	bne.n	8002aa2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2b80      	cmp	r3, #128	; 0x80
 8002a8e:	d913      	bls.n	8002ab8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2ba0      	cmp	r3, #160	; 0xa0
 8002a94:	d902      	bls.n	8002a9c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a96:	2302      	movs	r3, #2
 8002a98:	613b      	str	r3, [r7, #16]
 8002a9a:	e00d      	b.n	8002ab8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	613b      	str	r3, [r7, #16]
 8002aa0:	e00a      	b.n	8002ab8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2b7f      	cmp	r3, #127	; 0x7f
 8002aa6:	d902      	bls.n	8002aae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	613b      	str	r3, [r7, #16]
 8002aac:	e004      	b.n	8002ab8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b70      	cmp	r3, #112	; 0x70
 8002ab2:	d101      	bne.n	8002ab8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ab8:	4b0b      	ldr	r3, [pc, #44]	; (8002ae8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f023 020f 	bic.w	r2, r3, #15
 8002ac0:	4909      	ldr	r1, [pc, #36]	; (8002ae8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ac8:	4b07      	ldr	r3, [pc, #28]	; (8002ae8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 030f 	and.w	r3, r3, #15
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d001      	beq.n	8002ada <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e000      	b.n	8002adc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3718      	adds	r7, #24
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	40022000 	.word	0x40022000

08002aec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b087      	sub	sp, #28
 8002af0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002af2:	4b2d      	ldr	r3, [pc, #180]	; (8002ba8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2b03      	cmp	r3, #3
 8002b00:	d00b      	beq.n	8002b1a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2b03      	cmp	r3, #3
 8002b06:	d825      	bhi.n	8002b54 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d008      	beq.n	8002b20 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d11f      	bne.n	8002b54 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002b14:	4b25      	ldr	r3, [pc, #148]	; (8002bac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002b16:	613b      	str	r3, [r7, #16]
    break;
 8002b18:	e01f      	b.n	8002b5a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002b1a:	4b25      	ldr	r3, [pc, #148]	; (8002bb0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002b1c:	613b      	str	r3, [r7, #16]
    break;
 8002b1e:	e01c      	b.n	8002b5a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b20:	4b21      	ldr	r3, [pc, #132]	; (8002ba8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0308 	and.w	r3, r3, #8
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d107      	bne.n	8002b3c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b2c:	4b1e      	ldr	r3, [pc, #120]	; (8002ba8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b32:	0a1b      	lsrs	r3, r3, #8
 8002b34:	f003 030f 	and.w	r3, r3, #15
 8002b38:	617b      	str	r3, [r7, #20]
 8002b3a:	e005      	b.n	8002b48 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b3c:	4b1a      	ldr	r3, [pc, #104]	; (8002ba8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	091b      	lsrs	r3, r3, #4
 8002b42:	f003 030f 	and.w	r3, r3, #15
 8002b46:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002b48:	4a1a      	ldr	r2, [pc, #104]	; (8002bb4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b50:	613b      	str	r3, [r7, #16]
    break;
 8002b52:	e002      	b.n	8002b5a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002b54:	2300      	movs	r3, #0
 8002b56:	613b      	str	r3, [r7, #16]
    break;
 8002b58:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b5a:	4b13      	ldr	r3, [pc, #76]	; (8002ba8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	091b      	lsrs	r3, r3, #4
 8002b60:	f003 030f 	and.w	r3, r3, #15
 8002b64:	3301      	adds	r3, #1
 8002b66:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b68:	4b0f      	ldr	r3, [pc, #60]	; (8002ba8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	0a1b      	lsrs	r3, r3, #8
 8002b6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	fb03 f202 	mul.w	r2, r3, r2
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b7e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b80:	4b09      	ldr	r3, [pc, #36]	; (8002ba8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	0e5b      	lsrs	r3, r3, #25
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b98:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002b9a:	683b      	ldr	r3, [r7, #0]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	371c      	adds	r7, #28
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	00f42400 	.word	0x00f42400
 8002bb0:	007a1200 	.word	0x007a1200
 8002bb4:	08008038 	.word	0x08008038

08002bb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d040      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bd8:	2b80      	cmp	r3, #128	; 0x80
 8002bda:	d02a      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002bdc:	2b80      	cmp	r3, #128	; 0x80
 8002bde:	d825      	bhi.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002be0:	2b60      	cmp	r3, #96	; 0x60
 8002be2:	d026      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002be4:	2b60      	cmp	r3, #96	; 0x60
 8002be6:	d821      	bhi.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002be8:	2b40      	cmp	r3, #64	; 0x40
 8002bea:	d006      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002bec:	2b40      	cmp	r3, #64	; 0x40
 8002bee:	d81d      	bhi.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d009      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002bf4:	2b20      	cmp	r3, #32
 8002bf6:	d010      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002bf8:	e018      	b.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002bfa:	4b89      	ldr	r3, [pc, #548]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	4a88      	ldr	r2, [pc, #544]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c04:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c06:	e015      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3304      	adds	r3, #4
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 fb3e 	bl	8003290 <RCCEx_PLLSAI1_Config>
 8002c14:	4603      	mov	r3, r0
 8002c16:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c18:	e00c      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	3320      	adds	r3, #32
 8002c1e:	2100      	movs	r1, #0
 8002c20:	4618      	mov	r0, r3
 8002c22:	f000 fc29 	bl	8003478 <RCCEx_PLLSAI2_Config>
 8002c26:	4603      	mov	r3, r0
 8002c28:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c2a:	e003      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	74fb      	strb	r3, [r7, #19]
      break;
 8002c30:	e000      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002c32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c34:	7cfb      	ldrb	r3, [r7, #19]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10b      	bne.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c3a:	4b79      	ldr	r3, [pc, #484]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c40:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c48:	4975      	ldr	r1, [pc, #468]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002c50:	e001      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c52:	7cfb      	ldrb	r3, [r7, #19]
 8002c54:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d047      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c6a:	d030      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c70:	d82a      	bhi.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002c72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c76:	d02a      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002c78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c7c:	d824      	bhi.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002c7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c82:	d008      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002c84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c88:	d81e      	bhi.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00a      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002c8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c92:	d010      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002c94:	e018      	b.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c96:	4b62      	ldr	r3, [pc, #392]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	4a61      	ldr	r2, [pc, #388]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ca2:	e015      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3304      	adds	r3, #4
 8002ca8:	2100      	movs	r1, #0
 8002caa:	4618      	mov	r0, r3
 8002cac:	f000 faf0 	bl	8003290 <RCCEx_PLLSAI1_Config>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002cb4:	e00c      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	3320      	adds	r3, #32
 8002cba:	2100      	movs	r1, #0
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f000 fbdb 	bl	8003478 <RCCEx_PLLSAI2_Config>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002cc6:	e003      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	74fb      	strb	r3, [r7, #19]
      break;
 8002ccc:	e000      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002cce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cd0:	7cfb      	ldrb	r3, [r7, #19]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10b      	bne.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002cd6:	4b52      	ldr	r3, [pc, #328]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002cd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002cdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce4:	494e      	ldr	r1, [pc, #312]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002cec:	e001      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cee:	7cfb      	ldrb	r3, [r7, #19]
 8002cf0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f000 809f 	beq.w	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d00:	2300      	movs	r3, #0
 8002d02:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d04:	4b46      	ldr	r3, [pc, #280]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002d10:	2301      	movs	r3, #1
 8002d12:	e000      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002d14:	2300      	movs	r3, #0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00d      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d1a:	4b41      	ldr	r3, [pc, #260]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d1e:	4a40      	ldr	r2, [pc, #256]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d24:	6593      	str	r3, [r2, #88]	; 0x58
 8002d26:	4b3e      	ldr	r3, [pc, #248]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2e:	60bb      	str	r3, [r7, #8]
 8002d30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d32:	2301      	movs	r3, #1
 8002d34:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d36:	4b3b      	ldr	r3, [pc, #236]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a3a      	ldr	r2, [pc, #232]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d40:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d42:	f7fe fab9 	bl	80012b8 <HAL_GetTick>
 8002d46:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d48:	e009      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d4a:	f7fe fab5 	bl	80012b8 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d902      	bls.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	74fb      	strb	r3, [r7, #19]
        break;
 8002d5c:	e005      	b.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d5e:	4b31      	ldr	r3, [pc, #196]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0ef      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002d6a:	7cfb      	ldrb	r3, [r7, #19]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d15b      	bne.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d70:	4b2b      	ldr	r3, [pc, #172]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d7a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d01f      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d019      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d8e:	4b24      	ldr	r3, [pc, #144]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d98:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d9a:	4b21      	ldr	r3, [pc, #132]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da0:	4a1f      	ldr	r2, [pc, #124]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002da2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002daa:	4b1d      	ldr	r3, [pc, #116]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db0:	4a1b      	ldr	r2, [pc, #108]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002db2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002db6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002dba:	4a19      	ldr	r2, [pc, #100]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d016      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dcc:	f7fe fa74 	bl	80012b8 <HAL_GetTick>
 8002dd0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dd2:	e00b      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd4:	f7fe fa70 	bl	80012b8 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d902      	bls.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	74fb      	strb	r3, [r7, #19]
            break;
 8002dea:	e006      	b.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dec:	4b0c      	ldr	r3, [pc, #48]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d0ec      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002dfa:	7cfb      	ldrb	r3, [r7, #19]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d10c      	bne.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e00:	4b07      	ldr	r3, [pc, #28]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e10:	4903      	ldr	r1, [pc, #12]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002e18:	e008      	b.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e1a:	7cfb      	ldrb	r3, [r7, #19]
 8002e1c:	74bb      	strb	r3, [r7, #18]
 8002e1e:	e005      	b.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002e20:	40021000 	.word	0x40021000
 8002e24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e28:	7cfb      	ldrb	r3, [r7, #19]
 8002e2a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e2c:	7c7b      	ldrb	r3, [r7, #17]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d105      	bne.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e32:	4ba0      	ldr	r3, [pc, #640]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e36:	4a9f      	ldr	r2, [pc, #636]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e3c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00a      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e4a:	4b9a      	ldr	r3, [pc, #616]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e50:	f023 0203 	bic.w	r2, r3, #3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e58:	4996      	ldr	r1, [pc, #600]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00a      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e6c:	4b91      	ldr	r3, [pc, #580]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e72:	f023 020c 	bic.w	r2, r3, #12
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	498e      	ldr	r1, [pc, #568]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0304 	and.w	r3, r3, #4
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00a      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e8e:	4b89      	ldr	r3, [pc, #548]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e94:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9c:	4985      	ldr	r1, [pc, #532]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0308 	and.w	r3, r3, #8
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00a      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002eb0:	4b80      	ldr	r3, [pc, #512]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ebe:	497d      	ldr	r1, [pc, #500]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0310 	and.w	r3, r3, #16
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00a      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ed2:	4b78      	ldr	r3, [pc, #480]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ee0:	4974      	ldr	r1, [pc, #464]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0320 	and.w	r3, r3, #32
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00a      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ef4:	4b6f      	ldr	r3, [pc, #444]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002efa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f02:	496c      	ldr	r1, [pc, #432]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00a      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f16:	4b67      	ldr	r3, [pc, #412]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f1c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f24:	4963      	ldr	r1, [pc, #396]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00a      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f38:	4b5e      	ldr	r3, [pc, #376]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f46:	495b      	ldr	r1, [pc, #364]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00a      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f5a:	4b56      	ldr	r3, [pc, #344]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f60:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f68:	4952      	ldr	r1, [pc, #328]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00a      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f7c:	4b4d      	ldr	r3, [pc, #308]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f82:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f8a:	494a      	ldr	r1, [pc, #296]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00a      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f9e:	4b45      	ldr	r3, [pc, #276]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fac:	4941      	ldr	r1, [pc, #260]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00a      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002fc0:	4b3c      	ldr	r3, [pc, #240]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002fc6:	f023 0203 	bic.w	r2, r3, #3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fce:	4939      	ldr	r1, [pc, #228]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d028      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fe2:	4b34      	ldr	r3, [pc, #208]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ff0:	4930      	ldr	r1, [pc, #192]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ffc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003000:	d106      	bne.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003002:	4b2c      	ldr	r3, [pc, #176]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	4a2b      	ldr	r2, [pc, #172]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003008:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800300c:	60d3      	str	r3, [r2, #12]
 800300e:	e011      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003014:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003018:	d10c      	bne.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	3304      	adds	r3, #4
 800301e:	2101      	movs	r1, #1
 8003020:	4618      	mov	r0, r3
 8003022:	f000 f935 	bl	8003290 <RCCEx_PLLSAI1_Config>
 8003026:	4603      	mov	r3, r0
 8003028:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800302a:	7cfb      	ldrb	r3, [r7, #19]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003030:	7cfb      	ldrb	r3, [r7, #19]
 8003032:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d04d      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003044:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003048:	d108      	bne.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800304a:	4b1a      	ldr	r3, [pc, #104]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800304c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003050:	4a18      	ldr	r2, [pc, #96]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003052:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003056:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800305a:	e012      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800305c:	4b15      	ldr	r3, [pc, #84]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800305e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003062:	4a14      	ldr	r2, [pc, #80]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003064:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003068:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800306c:	4b11      	ldr	r3, [pc, #68]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800306e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003072:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800307a:	490e      	ldr	r1, [pc, #56]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800307c:	4313      	orrs	r3, r2
 800307e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003086:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800308a:	d106      	bne.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800308c:	4b09      	ldr	r3, [pc, #36]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	4a08      	ldr	r2, [pc, #32]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003092:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003096:	60d3      	str	r3, [r2, #12]
 8003098:	e020      	b.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800309e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030a2:	d109      	bne.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030a4:	4b03      	ldr	r3, [pc, #12]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	4a02      	ldr	r2, [pc, #8]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ae:	60d3      	str	r3, [r2, #12]
 80030b0:	e014      	b.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x524>
 80030b2:	bf00      	nop
 80030b4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030c0:	d10c      	bne.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	3304      	adds	r3, #4
 80030c6:	2101      	movs	r1, #1
 80030c8:	4618      	mov	r0, r3
 80030ca:	f000 f8e1 	bl	8003290 <RCCEx_PLLSAI1_Config>
 80030ce:	4603      	mov	r3, r0
 80030d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030d2:	7cfb      	ldrb	r3, [r7, #19]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80030d8:	7cfb      	ldrb	r3, [r7, #19]
 80030da:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d028      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030e8:	4b68      	ldr	r3, [pc, #416]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80030ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030f6:	4965      	ldr	r1, [pc, #404]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003102:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003106:	d106      	bne.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003108:	4b60      	ldr	r3, [pc, #384]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	4a5f      	ldr	r2, [pc, #380]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800310e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003112:	60d3      	str	r3, [r2, #12]
 8003114:	e011      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800311a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800311e:	d10c      	bne.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	3304      	adds	r3, #4
 8003124:	2101      	movs	r1, #1
 8003126:	4618      	mov	r0, r3
 8003128:	f000 f8b2 	bl	8003290 <RCCEx_PLLSAI1_Config>
 800312c:	4603      	mov	r3, r0
 800312e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003130:	7cfb      	ldrb	r3, [r7, #19]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003136:	7cfb      	ldrb	r3, [r7, #19]
 8003138:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d01e      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003146:	4b51      	ldr	r3, [pc, #324]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003156:	494d      	ldr	r1, [pc, #308]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003158:	4313      	orrs	r3, r2
 800315a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003164:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003168:	d10c      	bne.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	3304      	adds	r3, #4
 800316e:	2102      	movs	r1, #2
 8003170:	4618      	mov	r0, r3
 8003172:	f000 f88d 	bl	8003290 <RCCEx_PLLSAI1_Config>
 8003176:	4603      	mov	r3, r0
 8003178:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800317a:	7cfb      	ldrb	r3, [r7, #19]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003180:	7cfb      	ldrb	r3, [r7, #19]
 8003182:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00b      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003190:	4b3e      	ldr	r3, [pc, #248]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003192:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003196:	f023 0204 	bic.w	r2, r3, #4
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031a0:	493a      	ldr	r1, [pc, #232]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d00b      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80031b4:	4b35      	ldr	r3, [pc, #212]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80031b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031ba:	f023 0218 	bic.w	r2, r3, #24
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c4:	4931      	ldr	r1, [pc, #196]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d035      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80031d8:	4b2c      	ldr	r3, [pc, #176]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a2b      	ldr	r2, [pc, #172]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80031de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031e4:	f7fe f868 	bl	80012b8 <HAL_GetTick>
 80031e8:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80031ea:	e009      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80031ec:	f7fe f864 	bl	80012b8 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d902      	bls.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	74fb      	strb	r3, [r7, #19]
        break;
 80031fe:	e005      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003200:	4b22      	ldr	r3, [pc, #136]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1ef      	bne.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 800320c:	7cfb      	ldrb	r3, [r7, #19]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d113      	bne.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8003212:	4b1e      	ldr	r3, [pc, #120]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003214:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003218:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003222:	491a      	ldr	r1, [pc, #104]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003224:	4313      	orrs	r3, r2
 8003226:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	3320      	adds	r3, #32
 800322e:	2102      	movs	r1, #2
 8003230:	4618      	mov	r0, r3
 8003232:	f000 f921 	bl	8003478 <RCCEx_PLLSAI2_Config>
 8003236:	4603      	mov	r3, r0
 8003238:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800323a:	7cfb      	ldrb	r3, [r7, #19]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8003240:	7cfb      	ldrb	r3, [r7, #19]
 8003242:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d017      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003250:	4b0e      	ldr	r3, [pc, #56]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003252:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003256:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003260:	490a      	ldr	r1, [pc, #40]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003262:	4313      	orrs	r3, r2
 8003264:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003272:	d105      	bne.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003274:	4b05      	ldr	r3, [pc, #20]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	4a04      	ldr	r2, [pc, #16]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800327a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800327e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003280:	7cbb      	ldrb	r3, [r7, #18]
}
 8003282:	4618      	mov	r0, r3
 8003284:	3718      	adds	r7, #24
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	40021000 	.word	0x40021000

08003290 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800329a:	2300      	movs	r3, #0
 800329c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800329e:	4b72      	ldr	r3, [pc, #456]	; (8003468 <RCCEx_PLLSAI1_Config+0x1d8>)
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	f003 0303 	and.w	r3, r3, #3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00e      	beq.n	80032c8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80032aa:	4b6f      	ldr	r3, [pc, #444]	; (8003468 <RCCEx_PLLSAI1_Config+0x1d8>)
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	f003 0203 	and.w	r2, r3, #3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d103      	bne.n	80032c2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
       ||
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d142      	bne.n	8003348 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	73fb      	strb	r3, [r7, #15]
 80032c6:	e03f      	b.n	8003348 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2b03      	cmp	r3, #3
 80032ce:	d018      	beq.n	8003302 <RCCEx_PLLSAI1_Config+0x72>
 80032d0:	2b03      	cmp	r3, #3
 80032d2:	d825      	bhi.n	8003320 <RCCEx_PLLSAI1_Config+0x90>
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d002      	beq.n	80032de <RCCEx_PLLSAI1_Config+0x4e>
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d009      	beq.n	80032f0 <RCCEx_PLLSAI1_Config+0x60>
 80032dc:	e020      	b.n	8003320 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80032de:	4b62      	ldr	r3, [pc, #392]	; (8003468 <RCCEx_PLLSAI1_Config+0x1d8>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d11d      	bne.n	8003326 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032ee:	e01a      	b.n	8003326 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80032f0:	4b5d      	ldr	r3, [pc, #372]	; (8003468 <RCCEx_PLLSAI1_Config+0x1d8>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d116      	bne.n	800332a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003300:	e013      	b.n	800332a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003302:	4b59      	ldr	r3, [pc, #356]	; (8003468 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10f      	bne.n	800332e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800330e:	4b56      	ldr	r3, [pc, #344]	; (8003468 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d109      	bne.n	800332e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800331e:	e006      	b.n	800332e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	73fb      	strb	r3, [r7, #15]
      break;
 8003324:	e004      	b.n	8003330 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003326:	bf00      	nop
 8003328:	e002      	b.n	8003330 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800332a:	bf00      	nop
 800332c:	e000      	b.n	8003330 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800332e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003330:	7bfb      	ldrb	r3, [r7, #15]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d108      	bne.n	8003348 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003336:	4b4c      	ldr	r3, [pc, #304]	; (8003468 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	f023 0203 	bic.w	r2, r3, #3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4949      	ldr	r1, [pc, #292]	; (8003468 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003344:	4313      	orrs	r3, r2
 8003346:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003348:	7bfb      	ldrb	r3, [r7, #15]
 800334a:	2b00      	cmp	r3, #0
 800334c:	f040 8086 	bne.w	800345c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003350:	4b45      	ldr	r3, [pc, #276]	; (8003468 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a44      	ldr	r2, [pc, #272]	; (8003468 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003356:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800335a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800335c:	f7fd ffac 	bl	80012b8 <HAL_GetTick>
 8003360:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003362:	e009      	b.n	8003378 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003364:	f7fd ffa8 	bl	80012b8 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d902      	bls.n	8003378 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	73fb      	strb	r3, [r7, #15]
        break;
 8003376:	e005      	b.n	8003384 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003378:	4b3b      	ldr	r3, [pc, #236]	; (8003468 <RCCEx_PLLSAI1_Config+0x1d8>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1ef      	bne.n	8003364 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003384:	7bfb      	ldrb	r3, [r7, #15]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d168      	bne.n	800345c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d113      	bne.n	80033b8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003390:	4b35      	ldr	r3, [pc, #212]	; (8003468 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003392:	691a      	ldr	r2, [r3, #16]
 8003394:	4b35      	ldr	r3, [pc, #212]	; (800346c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003396:	4013      	ands	r3, r2
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	6892      	ldr	r2, [r2, #8]
 800339c:	0211      	lsls	r1, r2, #8
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	68d2      	ldr	r2, [r2, #12]
 80033a2:	06d2      	lsls	r2, r2, #27
 80033a4:	4311      	orrs	r1, r2
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	6852      	ldr	r2, [r2, #4]
 80033aa:	3a01      	subs	r2, #1
 80033ac:	0112      	lsls	r2, r2, #4
 80033ae:	430a      	orrs	r2, r1
 80033b0:	492d      	ldr	r1, [pc, #180]	; (8003468 <RCCEx_PLLSAI1_Config+0x1d8>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	610b      	str	r3, [r1, #16]
 80033b6:	e02d      	b.n	8003414 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d115      	bne.n	80033ea <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033be:	4b2a      	ldr	r3, [pc, #168]	; (8003468 <RCCEx_PLLSAI1_Config+0x1d8>)
 80033c0:	691a      	ldr	r2, [r3, #16]
 80033c2:	4b2b      	ldr	r3, [pc, #172]	; (8003470 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033c4:	4013      	ands	r3, r2
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	6892      	ldr	r2, [r2, #8]
 80033ca:	0211      	lsls	r1, r2, #8
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	6912      	ldr	r2, [r2, #16]
 80033d0:	0852      	lsrs	r2, r2, #1
 80033d2:	3a01      	subs	r2, #1
 80033d4:	0552      	lsls	r2, r2, #21
 80033d6:	4311      	orrs	r1, r2
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	6852      	ldr	r2, [r2, #4]
 80033dc:	3a01      	subs	r2, #1
 80033de:	0112      	lsls	r2, r2, #4
 80033e0:	430a      	orrs	r2, r1
 80033e2:	4921      	ldr	r1, [pc, #132]	; (8003468 <RCCEx_PLLSAI1_Config+0x1d8>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	610b      	str	r3, [r1, #16]
 80033e8:	e014      	b.n	8003414 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033ea:	4b1f      	ldr	r3, [pc, #124]	; (8003468 <RCCEx_PLLSAI1_Config+0x1d8>)
 80033ec:	691a      	ldr	r2, [r3, #16]
 80033ee:	4b21      	ldr	r3, [pc, #132]	; (8003474 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033f0:	4013      	ands	r3, r2
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	6892      	ldr	r2, [r2, #8]
 80033f6:	0211      	lsls	r1, r2, #8
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	6952      	ldr	r2, [r2, #20]
 80033fc:	0852      	lsrs	r2, r2, #1
 80033fe:	3a01      	subs	r2, #1
 8003400:	0652      	lsls	r2, r2, #25
 8003402:	4311      	orrs	r1, r2
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	6852      	ldr	r2, [r2, #4]
 8003408:	3a01      	subs	r2, #1
 800340a:	0112      	lsls	r2, r2, #4
 800340c:	430a      	orrs	r2, r1
 800340e:	4916      	ldr	r1, [pc, #88]	; (8003468 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003410:	4313      	orrs	r3, r2
 8003412:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003414:	4b14      	ldr	r3, [pc, #80]	; (8003468 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a13      	ldr	r2, [pc, #76]	; (8003468 <RCCEx_PLLSAI1_Config+0x1d8>)
 800341a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800341e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003420:	f7fd ff4a 	bl	80012b8 <HAL_GetTick>
 8003424:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003426:	e009      	b.n	800343c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003428:	f7fd ff46 	bl	80012b8 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d902      	bls.n	800343c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	73fb      	strb	r3, [r7, #15]
          break;
 800343a:	e005      	b.n	8003448 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800343c:	4b0a      	ldr	r3, [pc, #40]	; (8003468 <RCCEx_PLLSAI1_Config+0x1d8>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d0ef      	beq.n	8003428 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003448:	7bfb      	ldrb	r3, [r7, #15]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d106      	bne.n	800345c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800344e:	4b06      	ldr	r3, [pc, #24]	; (8003468 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003450:	691a      	ldr	r2, [r3, #16]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	4904      	ldr	r1, [pc, #16]	; (8003468 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003458:	4313      	orrs	r3, r2
 800345a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800345c:	7bfb      	ldrb	r3, [r7, #15]
}
 800345e:	4618      	mov	r0, r3
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	40021000 	.word	0x40021000
 800346c:	07ff800f 	.word	0x07ff800f
 8003470:	ff9f800f 	.word	0xff9f800f
 8003474:	f9ff800f 	.word	0xf9ff800f

08003478 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003482:	2300      	movs	r3, #0
 8003484:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003486:	4b72      	ldr	r3, [pc, #456]	; (8003650 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f003 0303 	and.w	r3, r3, #3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00e      	beq.n	80034b0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003492:	4b6f      	ldr	r3, [pc, #444]	; (8003650 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	f003 0203 	and.w	r2, r3, #3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d103      	bne.n	80034aa <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
       ||
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d142      	bne.n	8003530 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	73fb      	strb	r3, [r7, #15]
 80034ae:	e03f      	b.n	8003530 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2b03      	cmp	r3, #3
 80034b6:	d018      	beq.n	80034ea <RCCEx_PLLSAI2_Config+0x72>
 80034b8:	2b03      	cmp	r3, #3
 80034ba:	d825      	bhi.n	8003508 <RCCEx_PLLSAI2_Config+0x90>
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d002      	beq.n	80034c6 <RCCEx_PLLSAI2_Config+0x4e>
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d009      	beq.n	80034d8 <RCCEx_PLLSAI2_Config+0x60>
 80034c4:	e020      	b.n	8003508 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034c6:	4b62      	ldr	r3, [pc, #392]	; (8003650 <RCCEx_PLLSAI2_Config+0x1d8>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d11d      	bne.n	800350e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034d6:	e01a      	b.n	800350e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80034d8:	4b5d      	ldr	r3, [pc, #372]	; (8003650 <RCCEx_PLLSAI2_Config+0x1d8>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d116      	bne.n	8003512 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034e8:	e013      	b.n	8003512 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80034ea:	4b59      	ldr	r3, [pc, #356]	; (8003650 <RCCEx_PLLSAI2_Config+0x1d8>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10f      	bne.n	8003516 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80034f6:	4b56      	ldr	r3, [pc, #344]	; (8003650 <RCCEx_PLLSAI2_Config+0x1d8>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d109      	bne.n	8003516 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003506:	e006      	b.n	8003516 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	73fb      	strb	r3, [r7, #15]
      break;
 800350c:	e004      	b.n	8003518 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800350e:	bf00      	nop
 8003510:	e002      	b.n	8003518 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003512:	bf00      	nop
 8003514:	e000      	b.n	8003518 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003516:	bf00      	nop
    }

    if(status == HAL_OK)
 8003518:	7bfb      	ldrb	r3, [r7, #15]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d108      	bne.n	8003530 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800351e:	4b4c      	ldr	r3, [pc, #304]	; (8003650 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	f023 0203 	bic.w	r2, r3, #3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4949      	ldr	r1, [pc, #292]	; (8003650 <RCCEx_PLLSAI2_Config+0x1d8>)
 800352c:	4313      	orrs	r3, r2
 800352e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003530:	7bfb      	ldrb	r3, [r7, #15]
 8003532:	2b00      	cmp	r3, #0
 8003534:	f040 8086 	bne.w	8003644 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003538:	4b45      	ldr	r3, [pc, #276]	; (8003650 <RCCEx_PLLSAI2_Config+0x1d8>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a44      	ldr	r2, [pc, #272]	; (8003650 <RCCEx_PLLSAI2_Config+0x1d8>)
 800353e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003542:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003544:	f7fd feb8 	bl	80012b8 <HAL_GetTick>
 8003548:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800354a:	e009      	b.n	8003560 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800354c:	f7fd feb4 	bl	80012b8 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d902      	bls.n	8003560 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	73fb      	strb	r3, [r7, #15]
        break;
 800355e:	e005      	b.n	800356c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003560:	4b3b      	ldr	r3, [pc, #236]	; (8003650 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1ef      	bne.n	800354c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800356c:	7bfb      	ldrb	r3, [r7, #15]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d168      	bne.n	8003644 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d113      	bne.n	80035a0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003578:	4b35      	ldr	r3, [pc, #212]	; (8003650 <RCCEx_PLLSAI2_Config+0x1d8>)
 800357a:	695a      	ldr	r2, [r3, #20]
 800357c:	4b35      	ldr	r3, [pc, #212]	; (8003654 <RCCEx_PLLSAI2_Config+0x1dc>)
 800357e:	4013      	ands	r3, r2
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	6892      	ldr	r2, [r2, #8]
 8003584:	0211      	lsls	r1, r2, #8
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	68d2      	ldr	r2, [r2, #12]
 800358a:	06d2      	lsls	r2, r2, #27
 800358c:	4311      	orrs	r1, r2
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	6852      	ldr	r2, [r2, #4]
 8003592:	3a01      	subs	r2, #1
 8003594:	0112      	lsls	r2, r2, #4
 8003596:	430a      	orrs	r2, r1
 8003598:	492d      	ldr	r1, [pc, #180]	; (8003650 <RCCEx_PLLSAI2_Config+0x1d8>)
 800359a:	4313      	orrs	r3, r2
 800359c:	614b      	str	r3, [r1, #20]
 800359e:	e02d      	b.n	80035fc <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d115      	bne.n	80035d2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80035a6:	4b2a      	ldr	r3, [pc, #168]	; (8003650 <RCCEx_PLLSAI2_Config+0x1d8>)
 80035a8:	695a      	ldr	r2, [r3, #20]
 80035aa:	4b2b      	ldr	r3, [pc, #172]	; (8003658 <RCCEx_PLLSAI2_Config+0x1e0>)
 80035ac:	4013      	ands	r3, r2
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	6892      	ldr	r2, [r2, #8]
 80035b2:	0211      	lsls	r1, r2, #8
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	6912      	ldr	r2, [r2, #16]
 80035b8:	0852      	lsrs	r2, r2, #1
 80035ba:	3a01      	subs	r2, #1
 80035bc:	0552      	lsls	r2, r2, #21
 80035be:	4311      	orrs	r1, r2
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	6852      	ldr	r2, [r2, #4]
 80035c4:	3a01      	subs	r2, #1
 80035c6:	0112      	lsls	r2, r2, #4
 80035c8:	430a      	orrs	r2, r1
 80035ca:	4921      	ldr	r1, [pc, #132]	; (8003650 <RCCEx_PLLSAI2_Config+0x1d8>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	614b      	str	r3, [r1, #20]
 80035d0:	e014      	b.n	80035fc <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80035d2:	4b1f      	ldr	r3, [pc, #124]	; (8003650 <RCCEx_PLLSAI2_Config+0x1d8>)
 80035d4:	695a      	ldr	r2, [r3, #20]
 80035d6:	4b21      	ldr	r3, [pc, #132]	; (800365c <RCCEx_PLLSAI2_Config+0x1e4>)
 80035d8:	4013      	ands	r3, r2
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6892      	ldr	r2, [r2, #8]
 80035de:	0211      	lsls	r1, r2, #8
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	6952      	ldr	r2, [r2, #20]
 80035e4:	0852      	lsrs	r2, r2, #1
 80035e6:	3a01      	subs	r2, #1
 80035e8:	0652      	lsls	r2, r2, #25
 80035ea:	4311      	orrs	r1, r2
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	6852      	ldr	r2, [r2, #4]
 80035f0:	3a01      	subs	r2, #1
 80035f2:	0112      	lsls	r2, r2, #4
 80035f4:	430a      	orrs	r2, r1
 80035f6:	4916      	ldr	r1, [pc, #88]	; (8003650 <RCCEx_PLLSAI2_Config+0x1d8>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80035fc:	4b14      	ldr	r3, [pc, #80]	; (8003650 <RCCEx_PLLSAI2_Config+0x1d8>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a13      	ldr	r2, [pc, #76]	; (8003650 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003606:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003608:	f7fd fe56 	bl	80012b8 <HAL_GetTick>
 800360c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800360e:	e009      	b.n	8003624 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003610:	f7fd fe52 	bl	80012b8 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d902      	bls.n	8003624 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	73fb      	strb	r3, [r7, #15]
          break;
 8003622:	e005      	b.n	8003630 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003624:	4b0a      	ldr	r3, [pc, #40]	; (8003650 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d0ef      	beq.n	8003610 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003630:	7bfb      	ldrb	r3, [r7, #15]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d106      	bne.n	8003644 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003636:	4b06      	ldr	r3, [pc, #24]	; (8003650 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003638:	695a      	ldr	r2, [r3, #20]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	4904      	ldr	r1, [pc, #16]	; (8003650 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003640:	4313      	orrs	r3, r2
 8003642:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003644:	7bfb      	ldrb	r3, [r7, #15]
}
 8003646:	4618      	mov	r0, r3
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	40021000 	.word	0x40021000
 8003654:	07ff800f 	.word	0x07ff800f
 8003658:	ff9f800f 	.word	0xff9f800f
 800365c:	f9ff800f 	.word	0xf9ff800f

08003660 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e095      	b.n	800379e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003676:	2b00      	cmp	r3, #0
 8003678:	d108      	bne.n	800368c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003682:	d009      	beq.n	8003698 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	61da      	str	r2, [r3, #28]
 800368a:	e005      	b.n	8003698 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d106      	bne.n	80036b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7fd f8e4 	bl	8000880 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2202      	movs	r2, #2
 80036bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036ce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80036d8:	d902      	bls.n	80036e0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80036da:	2300      	movs	r3, #0
 80036dc:	60fb      	str	r3, [r7, #12]
 80036de:	e002      	b.n	80036e6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80036e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036e4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80036ee:	d007      	beq.n	8003700 <HAL_SPI_Init+0xa0>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80036f8:	d002      	beq.n	8003700 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003710:	431a      	orrs	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	431a      	orrs	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	f003 0301 	and.w	r3, r3, #1
 8003724:	431a      	orrs	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800372e:	431a      	orrs	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	69db      	ldr	r3, [r3, #28]
 8003734:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003738:	431a      	orrs	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003742:	ea42 0103 	orr.w	r1, r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	0c1b      	lsrs	r3, r3, #16
 800375c:	f003 0204 	and.w	r2, r3, #4
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003764:	f003 0310 	and.w	r3, r3, #16
 8003768:	431a      	orrs	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800376e:	f003 0308 	and.w	r3, r3, #8
 8003772:	431a      	orrs	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800377c:	ea42 0103 	orr.w	r1, r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b082      	sub	sp, #8
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e049      	b.n	800384c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d106      	bne.n	80037d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f7fd faab 	bl	8000d28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2202      	movs	r2, #2
 80037d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	3304      	adds	r3, #4
 80037e2:	4619      	mov	r1, r3
 80037e4:	4610      	mov	r0, r2
 80037e6:	f000 fb1b 	bl	8003e20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e049      	b.n	80038fa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d106      	bne.n	8003880 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f841 	bl	8003902 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2202      	movs	r2, #2
 8003884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3304      	adds	r3, #4
 8003890:	4619      	mov	r1, r3
 8003892:	4610      	mov	r0, r2
 8003894:	f000 fac4 	bl	8003e20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003902:	b480      	push	{r7}
 8003904:	b083      	sub	sp, #12
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800390a:	bf00      	nop
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr

08003916 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b086      	sub	sp, #24
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
 800391e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e097      	b.n	8003a5a <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d106      	bne.n	8003944 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7fd fa50 	bl	8000de4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2202      	movs	r2, #2
 8003948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	6812      	ldr	r2, [r2, #0]
 8003956:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800395a:	f023 0307 	bic.w	r3, r3, #7
 800395e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	3304      	adds	r3, #4
 8003968:	4619      	mov	r1, r3
 800396a:	4610      	mov	r0, r2
 800396c:	f000 fa58 	bl	8003e20 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	4313      	orrs	r3, r2
 8003990:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003998:	f023 0303 	bic.w	r3, r3, #3
 800399c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	689a      	ldr	r2, [r3, #8]
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	021b      	lsls	r3, r3, #8
 80039a8:	4313      	orrs	r3, r2
 80039aa:	693a      	ldr	r2, [r7, #16]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80039b6:	f023 030c 	bic.w	r3, r3, #12
 80039ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	68da      	ldr	r2, [r3, #12]
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	69db      	ldr	r3, [r3, #28]
 80039d0:	021b      	lsls	r3, r3, #8
 80039d2:	4313      	orrs	r3, r2
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	011a      	lsls	r2, r3, #4
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	6a1b      	ldr	r3, [r3, #32]
 80039e4:	031b      	lsls	r3, r3, #12
 80039e6:	4313      	orrs	r3, r2
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80039f4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80039fc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	011b      	lsls	r3, r3, #4
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3718      	adds	r7, #24
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
	...

08003a64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b086      	sub	sp, #24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a70:	2300      	movs	r3, #0
 8003a72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d101      	bne.n	8003a82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a7e:	2302      	movs	r3, #2
 8003a80:	e0ff      	b.n	8003c82 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2b14      	cmp	r3, #20
 8003a8e:	f200 80f0 	bhi.w	8003c72 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003a92:	a201      	add	r2, pc, #4	; (adr r2, 8003a98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a98:	08003aed 	.word	0x08003aed
 8003a9c:	08003c73 	.word	0x08003c73
 8003aa0:	08003c73 	.word	0x08003c73
 8003aa4:	08003c73 	.word	0x08003c73
 8003aa8:	08003b2d 	.word	0x08003b2d
 8003aac:	08003c73 	.word	0x08003c73
 8003ab0:	08003c73 	.word	0x08003c73
 8003ab4:	08003c73 	.word	0x08003c73
 8003ab8:	08003b6f 	.word	0x08003b6f
 8003abc:	08003c73 	.word	0x08003c73
 8003ac0:	08003c73 	.word	0x08003c73
 8003ac4:	08003c73 	.word	0x08003c73
 8003ac8:	08003baf 	.word	0x08003baf
 8003acc:	08003c73 	.word	0x08003c73
 8003ad0:	08003c73 	.word	0x08003c73
 8003ad4:	08003c73 	.word	0x08003c73
 8003ad8:	08003bf1 	.word	0x08003bf1
 8003adc:	08003c73 	.word	0x08003c73
 8003ae0:	08003c73 	.word	0x08003c73
 8003ae4:	08003c73 	.word	0x08003c73
 8003ae8:	08003c31 	.word	0x08003c31
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68b9      	ldr	r1, [r7, #8]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 fa2e 	bl	8003f54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	699a      	ldr	r2, [r3, #24]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f042 0208 	orr.w	r2, r2, #8
 8003b06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	699a      	ldr	r2, [r3, #24]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 0204 	bic.w	r2, r2, #4
 8003b16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6999      	ldr	r1, [r3, #24]
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	691a      	ldr	r2, [r3, #16]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	619a      	str	r2, [r3, #24]
      break;
 8003b2a:	e0a5      	b.n	8003c78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68b9      	ldr	r1, [r7, #8]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 fa9e 	bl	8004074 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	699a      	ldr	r2, [r3, #24]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	699a      	ldr	r2, [r3, #24]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6999      	ldr	r1, [r3, #24]
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	021a      	lsls	r2, r3, #8
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	619a      	str	r2, [r3, #24]
      break;
 8003b6c:	e084      	b.n	8003c78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68b9      	ldr	r1, [r7, #8]
 8003b74:	4618      	mov	r0, r3
 8003b76:	f000 fb07 	bl	8004188 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	69da      	ldr	r2, [r3, #28]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f042 0208 	orr.w	r2, r2, #8
 8003b88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	69da      	ldr	r2, [r3, #28]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 0204 	bic.w	r2, r2, #4
 8003b98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	69d9      	ldr	r1, [r3, #28]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	691a      	ldr	r2, [r3, #16]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	61da      	str	r2, [r3, #28]
      break;
 8003bac:	e064      	b.n	8003c78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68b9      	ldr	r1, [r7, #8]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f000 fb6f 	bl	8004298 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	69da      	ldr	r2, [r3, #28]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	69da      	ldr	r2, [r3, #28]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	69d9      	ldr	r1, [r3, #28]
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	021a      	lsls	r2, r3, #8
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	430a      	orrs	r2, r1
 8003bec:	61da      	str	r2, [r3, #28]
      break;
 8003bee:	e043      	b.n	8003c78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68b9      	ldr	r1, [r7, #8]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f000 fbb8 	bl	800436c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f042 0208 	orr.w	r2, r2, #8
 8003c0a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f022 0204 	bic.w	r2, r2, #4
 8003c1a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	691a      	ldr	r2, [r3, #16]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003c2e:	e023      	b.n	8003c78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68b9      	ldr	r1, [r7, #8]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f000 fbfc 	bl	8004434 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c4a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c5a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	021a      	lsls	r2, r3, #8
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003c70:	e002      	b.n	8003c78 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	75fb      	strb	r3, [r7, #23]
      break;
 8003c76:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c80:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3718      	adds	r7, #24
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop

08003c8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c96:	2300      	movs	r3, #0
 8003c98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d101      	bne.n	8003ca8 <HAL_TIM_ConfigClockSource+0x1c>
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	e0b6      	b.n	8003e16 <HAL_TIM_ConfigClockSource+0x18a>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cc6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003cca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ce4:	d03e      	beq.n	8003d64 <HAL_TIM_ConfigClockSource+0xd8>
 8003ce6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cea:	f200 8087 	bhi.w	8003dfc <HAL_TIM_ConfigClockSource+0x170>
 8003cee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cf2:	f000 8086 	beq.w	8003e02 <HAL_TIM_ConfigClockSource+0x176>
 8003cf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cfa:	d87f      	bhi.n	8003dfc <HAL_TIM_ConfigClockSource+0x170>
 8003cfc:	2b70      	cmp	r3, #112	; 0x70
 8003cfe:	d01a      	beq.n	8003d36 <HAL_TIM_ConfigClockSource+0xaa>
 8003d00:	2b70      	cmp	r3, #112	; 0x70
 8003d02:	d87b      	bhi.n	8003dfc <HAL_TIM_ConfigClockSource+0x170>
 8003d04:	2b60      	cmp	r3, #96	; 0x60
 8003d06:	d050      	beq.n	8003daa <HAL_TIM_ConfigClockSource+0x11e>
 8003d08:	2b60      	cmp	r3, #96	; 0x60
 8003d0a:	d877      	bhi.n	8003dfc <HAL_TIM_ConfigClockSource+0x170>
 8003d0c:	2b50      	cmp	r3, #80	; 0x50
 8003d0e:	d03c      	beq.n	8003d8a <HAL_TIM_ConfigClockSource+0xfe>
 8003d10:	2b50      	cmp	r3, #80	; 0x50
 8003d12:	d873      	bhi.n	8003dfc <HAL_TIM_ConfigClockSource+0x170>
 8003d14:	2b40      	cmp	r3, #64	; 0x40
 8003d16:	d058      	beq.n	8003dca <HAL_TIM_ConfigClockSource+0x13e>
 8003d18:	2b40      	cmp	r3, #64	; 0x40
 8003d1a:	d86f      	bhi.n	8003dfc <HAL_TIM_ConfigClockSource+0x170>
 8003d1c:	2b30      	cmp	r3, #48	; 0x30
 8003d1e:	d064      	beq.n	8003dea <HAL_TIM_ConfigClockSource+0x15e>
 8003d20:	2b30      	cmp	r3, #48	; 0x30
 8003d22:	d86b      	bhi.n	8003dfc <HAL_TIM_ConfigClockSource+0x170>
 8003d24:	2b20      	cmp	r3, #32
 8003d26:	d060      	beq.n	8003dea <HAL_TIM_ConfigClockSource+0x15e>
 8003d28:	2b20      	cmp	r3, #32
 8003d2a:	d867      	bhi.n	8003dfc <HAL_TIM_ConfigClockSource+0x170>
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d05c      	beq.n	8003dea <HAL_TIM_ConfigClockSource+0x15e>
 8003d30:	2b10      	cmp	r3, #16
 8003d32:	d05a      	beq.n	8003dea <HAL_TIM_ConfigClockSource+0x15e>
 8003d34:	e062      	b.n	8003dfc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6818      	ldr	r0, [r3, #0]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	6899      	ldr	r1, [r3, #8]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685a      	ldr	r2, [r3, #4]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	f000 fc55 	bl	80045f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	609a      	str	r2, [r3, #8]
      break;
 8003d62:	e04f      	b.n	8003e04 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6818      	ldr	r0, [r3, #0]
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	6899      	ldr	r1, [r3, #8]
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685a      	ldr	r2, [r3, #4]
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	f000 fc3e 	bl	80045f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689a      	ldr	r2, [r3, #8]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d86:	609a      	str	r2, [r3, #8]
      break;
 8003d88:	e03c      	b.n	8003e04 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6818      	ldr	r0, [r3, #0]
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	6859      	ldr	r1, [r3, #4]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	461a      	mov	r2, r3
 8003d98:	f000 fbb2 	bl	8004500 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2150      	movs	r1, #80	; 0x50
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 fc0b 	bl	80045be <TIM_ITRx_SetConfig>
      break;
 8003da8:	e02c      	b.n	8003e04 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6818      	ldr	r0, [r3, #0]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	6859      	ldr	r1, [r3, #4]
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	461a      	mov	r2, r3
 8003db8:	f000 fbd1 	bl	800455e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2160      	movs	r1, #96	; 0x60
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 fbfb 	bl	80045be <TIM_ITRx_SetConfig>
      break;
 8003dc8:	e01c      	b.n	8003e04 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6818      	ldr	r0, [r3, #0]
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	6859      	ldr	r1, [r3, #4]
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	f000 fb92 	bl	8004500 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2140      	movs	r1, #64	; 0x40
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 fbeb 	bl	80045be <TIM_ITRx_SetConfig>
      break;
 8003de8:	e00c      	b.n	8003e04 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4619      	mov	r1, r3
 8003df4:	4610      	mov	r0, r2
 8003df6:	f000 fbe2 	bl	80045be <TIM_ITRx_SetConfig>
      break;
 8003dfa:	e003      	b.n	8003e04 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8003e00:	e000      	b.n	8003e04 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003e02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
	...

08003e20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a40      	ldr	r2, [pc, #256]	; (8003f34 <TIM_Base_SetConfig+0x114>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d013      	beq.n	8003e60 <TIM_Base_SetConfig+0x40>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e3e:	d00f      	beq.n	8003e60 <TIM_Base_SetConfig+0x40>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a3d      	ldr	r2, [pc, #244]	; (8003f38 <TIM_Base_SetConfig+0x118>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d00b      	beq.n	8003e60 <TIM_Base_SetConfig+0x40>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a3c      	ldr	r2, [pc, #240]	; (8003f3c <TIM_Base_SetConfig+0x11c>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d007      	beq.n	8003e60 <TIM_Base_SetConfig+0x40>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a3b      	ldr	r2, [pc, #236]	; (8003f40 <TIM_Base_SetConfig+0x120>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d003      	beq.n	8003e60 <TIM_Base_SetConfig+0x40>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a3a      	ldr	r2, [pc, #232]	; (8003f44 <TIM_Base_SetConfig+0x124>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d108      	bne.n	8003e72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a2f      	ldr	r2, [pc, #188]	; (8003f34 <TIM_Base_SetConfig+0x114>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d01f      	beq.n	8003eba <TIM_Base_SetConfig+0x9a>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e80:	d01b      	beq.n	8003eba <TIM_Base_SetConfig+0x9a>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a2c      	ldr	r2, [pc, #176]	; (8003f38 <TIM_Base_SetConfig+0x118>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d017      	beq.n	8003eba <TIM_Base_SetConfig+0x9a>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a2b      	ldr	r2, [pc, #172]	; (8003f3c <TIM_Base_SetConfig+0x11c>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d013      	beq.n	8003eba <TIM_Base_SetConfig+0x9a>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a2a      	ldr	r2, [pc, #168]	; (8003f40 <TIM_Base_SetConfig+0x120>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d00f      	beq.n	8003eba <TIM_Base_SetConfig+0x9a>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a29      	ldr	r2, [pc, #164]	; (8003f44 <TIM_Base_SetConfig+0x124>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d00b      	beq.n	8003eba <TIM_Base_SetConfig+0x9a>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a28      	ldr	r2, [pc, #160]	; (8003f48 <TIM_Base_SetConfig+0x128>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d007      	beq.n	8003eba <TIM_Base_SetConfig+0x9a>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a27      	ldr	r2, [pc, #156]	; (8003f4c <TIM_Base_SetConfig+0x12c>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d003      	beq.n	8003eba <TIM_Base_SetConfig+0x9a>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a26      	ldr	r2, [pc, #152]	; (8003f50 <TIM_Base_SetConfig+0x130>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d108      	bne.n	8003ecc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ec0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	689a      	ldr	r2, [r3, #8]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a10      	ldr	r2, [pc, #64]	; (8003f34 <TIM_Base_SetConfig+0x114>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d00f      	beq.n	8003f18 <TIM_Base_SetConfig+0xf8>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a12      	ldr	r2, [pc, #72]	; (8003f44 <TIM_Base_SetConfig+0x124>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d00b      	beq.n	8003f18 <TIM_Base_SetConfig+0xf8>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a11      	ldr	r2, [pc, #68]	; (8003f48 <TIM_Base_SetConfig+0x128>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d007      	beq.n	8003f18 <TIM_Base_SetConfig+0xf8>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a10      	ldr	r2, [pc, #64]	; (8003f4c <TIM_Base_SetConfig+0x12c>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d003      	beq.n	8003f18 <TIM_Base_SetConfig+0xf8>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a0f      	ldr	r2, [pc, #60]	; (8003f50 <TIM_Base_SetConfig+0x130>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d103      	bne.n	8003f20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	691a      	ldr	r2, [r3, #16]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	615a      	str	r2, [r3, #20]
}
 8003f26:	bf00      	nop
 8003f28:	3714      	adds	r7, #20
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	40012c00 	.word	0x40012c00
 8003f38:	40000400 	.word	0x40000400
 8003f3c:	40000800 	.word	0x40000800
 8003f40:	40000c00 	.word	0x40000c00
 8003f44:	40013400 	.word	0x40013400
 8003f48:	40014000 	.word	0x40014000
 8003f4c:	40014400 	.word	0x40014400
 8003f50:	40014800 	.word	0x40014800

08003f54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b087      	sub	sp, #28
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	f023 0201 	bic.w	r2, r3, #1
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f023 0303 	bic.w	r3, r3, #3
 8003f8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f023 0302 	bic.w	r3, r3, #2
 8003fa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a2c      	ldr	r2, [pc, #176]	; (8004060 <TIM_OC1_SetConfig+0x10c>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d00f      	beq.n	8003fd4 <TIM_OC1_SetConfig+0x80>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a2b      	ldr	r2, [pc, #172]	; (8004064 <TIM_OC1_SetConfig+0x110>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d00b      	beq.n	8003fd4 <TIM_OC1_SetConfig+0x80>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a2a      	ldr	r2, [pc, #168]	; (8004068 <TIM_OC1_SetConfig+0x114>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d007      	beq.n	8003fd4 <TIM_OC1_SetConfig+0x80>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a29      	ldr	r2, [pc, #164]	; (800406c <TIM_OC1_SetConfig+0x118>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d003      	beq.n	8003fd4 <TIM_OC1_SetConfig+0x80>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a28      	ldr	r2, [pc, #160]	; (8004070 <TIM_OC1_SetConfig+0x11c>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d10c      	bne.n	8003fee <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f023 0308 	bic.w	r3, r3, #8
 8003fda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f023 0304 	bic.w	r3, r3, #4
 8003fec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a1b      	ldr	r2, [pc, #108]	; (8004060 <TIM_OC1_SetConfig+0x10c>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d00f      	beq.n	8004016 <TIM_OC1_SetConfig+0xc2>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a1a      	ldr	r2, [pc, #104]	; (8004064 <TIM_OC1_SetConfig+0x110>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d00b      	beq.n	8004016 <TIM_OC1_SetConfig+0xc2>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a19      	ldr	r2, [pc, #100]	; (8004068 <TIM_OC1_SetConfig+0x114>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d007      	beq.n	8004016 <TIM_OC1_SetConfig+0xc2>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a18      	ldr	r2, [pc, #96]	; (800406c <TIM_OC1_SetConfig+0x118>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d003      	beq.n	8004016 <TIM_OC1_SetConfig+0xc2>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a17      	ldr	r2, [pc, #92]	; (8004070 <TIM_OC1_SetConfig+0x11c>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d111      	bne.n	800403a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800401c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004024:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	4313      	orrs	r3, r2
 800402e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	4313      	orrs	r3, r2
 8004038:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	621a      	str	r2, [r3, #32]
}
 8004054:	bf00      	nop
 8004056:	371c      	adds	r7, #28
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	40012c00 	.word	0x40012c00
 8004064:	40013400 	.word	0x40013400
 8004068:	40014000 	.word	0x40014000
 800406c:	40014400 	.word	0x40014400
 8004070:	40014800 	.word	0x40014800

08004074 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004074:	b480      	push	{r7}
 8004076:	b087      	sub	sp, #28
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	f023 0210 	bic.w	r2, r3, #16
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	021b      	lsls	r3, r3, #8
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f023 0320 	bic.w	r3, r3, #32
 80040c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	011b      	lsls	r3, r3, #4
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a28      	ldr	r2, [pc, #160]	; (8004174 <TIM_OC2_SetConfig+0x100>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d003      	beq.n	80040e0 <TIM_OC2_SetConfig+0x6c>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a27      	ldr	r2, [pc, #156]	; (8004178 <TIM_OC2_SetConfig+0x104>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d10d      	bne.n	80040fc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	011b      	lsls	r3, r3, #4
 80040ee:	697a      	ldr	r2, [r7, #20]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a1d      	ldr	r2, [pc, #116]	; (8004174 <TIM_OC2_SetConfig+0x100>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d00f      	beq.n	8004124 <TIM_OC2_SetConfig+0xb0>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a1c      	ldr	r2, [pc, #112]	; (8004178 <TIM_OC2_SetConfig+0x104>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d00b      	beq.n	8004124 <TIM_OC2_SetConfig+0xb0>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a1b      	ldr	r2, [pc, #108]	; (800417c <TIM_OC2_SetConfig+0x108>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d007      	beq.n	8004124 <TIM_OC2_SetConfig+0xb0>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a1a      	ldr	r2, [pc, #104]	; (8004180 <TIM_OC2_SetConfig+0x10c>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d003      	beq.n	8004124 <TIM_OC2_SetConfig+0xb0>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a19      	ldr	r2, [pc, #100]	; (8004184 <TIM_OC2_SetConfig+0x110>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d113      	bne.n	800414c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800412a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004132:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	695b      	ldr	r3, [r3, #20]
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	4313      	orrs	r3, r2
 800413e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	4313      	orrs	r3, r2
 800414a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685a      	ldr	r2, [r3, #4]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	621a      	str	r2, [r3, #32]
}
 8004166:	bf00      	nop
 8004168:	371c      	adds	r7, #28
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	40012c00 	.word	0x40012c00
 8004178:	40013400 	.word	0x40013400
 800417c:	40014000 	.word	0x40014000
 8004180:	40014400 	.word	0x40014400
 8004184:	40014800 	.word	0x40014800

08004188 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004188:	b480      	push	{r7}
 800418a:	b087      	sub	sp, #28
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f023 0303 	bic.w	r3, r3, #3
 80041c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	021b      	lsls	r3, r3, #8
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	4313      	orrs	r3, r2
 80041e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a27      	ldr	r2, [pc, #156]	; (8004284 <TIM_OC3_SetConfig+0xfc>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d003      	beq.n	80041f2 <TIM_OC3_SetConfig+0x6a>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a26      	ldr	r2, [pc, #152]	; (8004288 <TIM_OC3_SetConfig+0x100>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d10d      	bne.n	800420e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	021b      	lsls	r3, r3, #8
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	4313      	orrs	r3, r2
 8004204:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800420c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a1c      	ldr	r2, [pc, #112]	; (8004284 <TIM_OC3_SetConfig+0xfc>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d00f      	beq.n	8004236 <TIM_OC3_SetConfig+0xae>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a1b      	ldr	r2, [pc, #108]	; (8004288 <TIM_OC3_SetConfig+0x100>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d00b      	beq.n	8004236 <TIM_OC3_SetConfig+0xae>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a1a      	ldr	r2, [pc, #104]	; (800428c <TIM_OC3_SetConfig+0x104>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d007      	beq.n	8004236 <TIM_OC3_SetConfig+0xae>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a19      	ldr	r2, [pc, #100]	; (8004290 <TIM_OC3_SetConfig+0x108>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d003      	beq.n	8004236 <TIM_OC3_SetConfig+0xae>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a18      	ldr	r2, [pc, #96]	; (8004294 <TIM_OC3_SetConfig+0x10c>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d113      	bne.n	800425e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800423c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004244:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	011b      	lsls	r3, r3, #4
 800424c:	693a      	ldr	r2, [r7, #16]
 800424e:	4313      	orrs	r3, r2
 8004250:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	011b      	lsls	r3, r3, #4
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	4313      	orrs	r3, r2
 800425c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	685a      	ldr	r2, [r3, #4]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	621a      	str	r2, [r3, #32]
}
 8004278:	bf00      	nop
 800427a:	371c      	adds	r7, #28
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr
 8004284:	40012c00 	.word	0x40012c00
 8004288:	40013400 	.word	0x40013400
 800428c:	40014000 	.word	0x40014000
 8004290:	40014400 	.word	0x40014400
 8004294:	40014800 	.word	0x40014800

08004298 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004298:	b480      	push	{r7}
 800429a:	b087      	sub	sp, #28
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a1b      	ldr	r3, [r3, #32]
 80042a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a1b      	ldr	r3, [r3, #32]
 80042b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	69db      	ldr	r3, [r3, #28]
 80042be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	021b      	lsls	r3, r3, #8
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	4313      	orrs	r3, r2
 80042de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	031b      	lsls	r3, r3, #12
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a18      	ldr	r2, [pc, #96]	; (8004358 <TIM_OC4_SetConfig+0xc0>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d00f      	beq.n	800431c <TIM_OC4_SetConfig+0x84>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a17      	ldr	r2, [pc, #92]	; (800435c <TIM_OC4_SetConfig+0xc4>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d00b      	beq.n	800431c <TIM_OC4_SetConfig+0x84>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a16      	ldr	r2, [pc, #88]	; (8004360 <TIM_OC4_SetConfig+0xc8>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d007      	beq.n	800431c <TIM_OC4_SetConfig+0x84>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a15      	ldr	r2, [pc, #84]	; (8004364 <TIM_OC4_SetConfig+0xcc>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d003      	beq.n	800431c <TIM_OC4_SetConfig+0x84>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a14      	ldr	r2, [pc, #80]	; (8004368 <TIM_OC4_SetConfig+0xd0>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d109      	bne.n	8004330 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004322:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	695b      	ldr	r3, [r3, #20]
 8004328:	019b      	lsls	r3, r3, #6
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	4313      	orrs	r3, r2
 800432e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	621a      	str	r2, [r3, #32]
}
 800434a:	bf00      	nop
 800434c:	371c      	adds	r7, #28
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	40012c00 	.word	0x40012c00
 800435c:	40013400 	.word	0x40013400
 8004360:	40014000 	.word	0x40014000
 8004364:	40014400 	.word	0x40014400
 8004368:	40014800 	.word	0x40014800

0800436c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800436c:	b480      	push	{r7}
 800436e:	b087      	sub	sp, #28
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800439a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800439e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80043b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	041b      	lsls	r3, r3, #16
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a17      	ldr	r2, [pc, #92]	; (8004420 <TIM_OC5_SetConfig+0xb4>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d00f      	beq.n	80043e6 <TIM_OC5_SetConfig+0x7a>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a16      	ldr	r2, [pc, #88]	; (8004424 <TIM_OC5_SetConfig+0xb8>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d00b      	beq.n	80043e6 <TIM_OC5_SetConfig+0x7a>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a15      	ldr	r2, [pc, #84]	; (8004428 <TIM_OC5_SetConfig+0xbc>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d007      	beq.n	80043e6 <TIM_OC5_SetConfig+0x7a>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a14      	ldr	r2, [pc, #80]	; (800442c <TIM_OC5_SetConfig+0xc0>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d003      	beq.n	80043e6 <TIM_OC5_SetConfig+0x7a>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a13      	ldr	r2, [pc, #76]	; (8004430 <TIM_OC5_SetConfig+0xc4>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d109      	bne.n	80043fa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	021b      	lsls	r3, r3, #8
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	621a      	str	r2, [r3, #32]
}
 8004414:	bf00      	nop
 8004416:	371c      	adds	r7, #28
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	40012c00 	.word	0x40012c00
 8004424:	40013400 	.word	0x40013400
 8004428:	40014000 	.word	0x40014000
 800442c:	40014400 	.word	0x40014400
 8004430:	40014800 	.word	0x40014800

08004434 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004434:	b480      	push	{r7}
 8004436:	b087      	sub	sp, #28
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004462:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004466:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	021b      	lsls	r3, r3, #8
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	4313      	orrs	r3, r2
 8004472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800447a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	051b      	lsls	r3, r3, #20
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	4313      	orrs	r3, r2
 8004486:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a18      	ldr	r2, [pc, #96]	; (80044ec <TIM_OC6_SetConfig+0xb8>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d00f      	beq.n	80044b0 <TIM_OC6_SetConfig+0x7c>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a17      	ldr	r2, [pc, #92]	; (80044f0 <TIM_OC6_SetConfig+0xbc>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d00b      	beq.n	80044b0 <TIM_OC6_SetConfig+0x7c>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a16      	ldr	r2, [pc, #88]	; (80044f4 <TIM_OC6_SetConfig+0xc0>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d007      	beq.n	80044b0 <TIM_OC6_SetConfig+0x7c>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a15      	ldr	r2, [pc, #84]	; (80044f8 <TIM_OC6_SetConfig+0xc4>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d003      	beq.n	80044b0 <TIM_OC6_SetConfig+0x7c>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a14      	ldr	r2, [pc, #80]	; (80044fc <TIM_OC6_SetConfig+0xc8>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d109      	bne.n	80044c4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	029b      	lsls	r3, r3, #10
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685a      	ldr	r2, [r3, #4]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	621a      	str	r2, [r3, #32]
}
 80044de:	bf00      	nop
 80044e0:	371c      	adds	r7, #28
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	40012c00 	.word	0x40012c00
 80044f0:	40013400 	.word	0x40013400
 80044f4:	40014000 	.word	0x40014000
 80044f8:	40014400 	.word	0x40014400
 80044fc:	40014800 	.word	0x40014800

08004500 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004500:	b480      	push	{r7}
 8004502:	b087      	sub	sp, #28
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6a1b      	ldr	r3, [r3, #32]
 8004510:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	f023 0201 	bic.w	r2, r3, #1
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800452a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	011b      	lsls	r3, r3, #4
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	4313      	orrs	r3, r2
 8004534:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f023 030a 	bic.w	r3, r3, #10
 800453c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	4313      	orrs	r3, r2
 8004544:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	621a      	str	r2, [r3, #32]
}
 8004552:	bf00      	nop
 8004554:	371c      	adds	r7, #28
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800455e:	b480      	push	{r7}
 8004560:	b087      	sub	sp, #28
 8004562:	af00      	add	r7, sp, #0
 8004564:	60f8      	str	r0, [r7, #12]
 8004566:	60b9      	str	r1, [r7, #8]
 8004568:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	f023 0210 	bic.w	r2, r3, #16
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6a1b      	ldr	r3, [r3, #32]
 8004580:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004588:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	031b      	lsls	r3, r3, #12
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	4313      	orrs	r3, r2
 8004592:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800459a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	011b      	lsls	r3, r3, #4
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	697a      	ldr	r2, [r7, #20]
 80045aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	621a      	str	r2, [r3, #32]
}
 80045b2:	bf00      	nop
 80045b4:	371c      	adds	r7, #28
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr

080045be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045be:	b480      	push	{r7}
 80045c0:	b085      	sub	sp, #20
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
 80045c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045d6:	683a      	ldr	r2, [r7, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	4313      	orrs	r3, r2
 80045dc:	f043 0307 	orr.w	r3, r3, #7
 80045e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	609a      	str	r2, [r3, #8]
}
 80045e8:	bf00      	nop
 80045ea:	3714      	adds	r7, #20
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b087      	sub	sp, #28
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
 8004600:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800460e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	021a      	lsls	r2, r3, #8
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	431a      	orrs	r2, r3
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	4313      	orrs	r3, r2
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	4313      	orrs	r3, r2
 8004620:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	609a      	str	r2, [r3, #8]
}
 8004628:	bf00      	nop
 800462a:	371c      	adds	r7, #28
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004644:	2b01      	cmp	r3, #1
 8004646:	d101      	bne.n	800464c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004648:	2302      	movs	r3, #2
 800464a:	e068      	b.n	800471e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2202      	movs	r2, #2
 8004658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a2e      	ldr	r2, [pc, #184]	; (800472c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d004      	beq.n	8004680 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a2d      	ldr	r2, [pc, #180]	; (8004730 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d108      	bne.n	8004692 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004686:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	4313      	orrs	r3, r2
 8004690:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004698:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a1e      	ldr	r2, [pc, #120]	; (800472c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d01d      	beq.n	80046f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046be:	d018      	beq.n	80046f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a1b      	ldr	r2, [pc, #108]	; (8004734 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d013      	beq.n	80046f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a1a      	ldr	r2, [pc, #104]	; (8004738 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d00e      	beq.n	80046f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a18      	ldr	r2, [pc, #96]	; (800473c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d009      	beq.n	80046f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a13      	ldr	r2, [pc, #76]	; (8004730 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d004      	beq.n	80046f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a14      	ldr	r2, [pc, #80]	; (8004740 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d10c      	bne.n	800470c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	4313      	orrs	r3, r2
 8004702:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68ba      	ldr	r2, [r7, #8]
 800470a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3714      	adds	r7, #20
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	40012c00 	.word	0x40012c00
 8004730:	40013400 	.word	0x40013400
 8004734:	40000400 	.word	0x40000400
 8004738:	40000800 	.word	0x40000800
 800473c:	40000c00 	.word	0x40000c00
 8004740:	40014000 	.word	0x40014000

08004744 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800474e:	2300      	movs	r3, #0
 8004750:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004758:	2b01      	cmp	r3, #1
 800475a:	d101      	bne.n	8004760 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800475c:	2302      	movs	r3, #2
 800475e:	e065      	b.n	800482c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	4313      	orrs	r3, r2
 8004774:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	4313      	orrs	r3, r2
 8004782:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	4313      	orrs	r3, r2
 8004790:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4313      	orrs	r3, r2
 800479e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	695b      	ldr	r3, [r3, #20]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c6:	4313      	orrs	r3, r2
 80047c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	041b      	lsls	r3, r3, #16
 80047d6:	4313      	orrs	r3, r2
 80047d8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a16      	ldr	r2, [pc, #88]	; (8004838 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d004      	beq.n	80047ee <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a14      	ldr	r2, [pc, #80]	; (800483c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d115      	bne.n	800481a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f8:	051b      	lsls	r3, r3, #20
 80047fa:	4313      	orrs	r3, r2
 80047fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	69db      	ldr	r3, [r3, #28]
 8004808:	4313      	orrs	r3, r2
 800480a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	4313      	orrs	r3, r2
 8004818:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3714      	adds	r7, #20
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr
 8004838:	40012c00 	.word	0x40012c00
 800483c:	40013400 	.word	0x40013400

08004840 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d101      	bne.n	8004852 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e042      	b.n	80048d8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004858:	2b00      	cmp	r3, #0
 800485a:	d106      	bne.n	800486a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f7fc fbf3 	bl	8001050 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2224      	movs	r2, #36	; 0x24
 800486e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 0201 	bic.w	r2, r2, #1
 8004880:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f82c 	bl	80048e0 <UART_SetConfig>
 8004888:	4603      	mov	r3, r0
 800488a:	2b01      	cmp	r3, #1
 800488c:	d101      	bne.n	8004892 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e022      	b.n	80048d8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004896:	2b00      	cmp	r3, #0
 8004898:	d002      	beq.n	80048a0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 fb1c 	bl	8004ed8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	689a      	ldr	r2, [r3, #8]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f042 0201 	orr.w	r2, r2, #1
 80048ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 fba3 	bl	800501c <UART_CheckIdleState>
 80048d6:	4603      	mov	r3, r0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3708      	adds	r7, #8
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048e4:	b08c      	sub	sp, #48	; 0x30
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048ea:	2300      	movs	r3, #0
 80048ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	689a      	ldr	r2, [r3, #8]
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	431a      	orrs	r2, r3
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	431a      	orrs	r2, r3
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	69db      	ldr	r3, [r3, #28]
 8004904:	4313      	orrs	r3, r2
 8004906:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	4baa      	ldr	r3, [pc, #680]	; (8004bb8 <UART_SetConfig+0x2d8>)
 8004910:	4013      	ands	r3, r2
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	6812      	ldr	r2, [r2, #0]
 8004916:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004918:	430b      	orrs	r3, r1
 800491a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	68da      	ldr	r2, [r3, #12]
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a9f      	ldr	r2, [pc, #636]	; (8004bbc <UART_SetConfig+0x2dc>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d004      	beq.n	800494c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004948:	4313      	orrs	r3, r2
 800494a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004956:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	6812      	ldr	r2, [r2, #0]
 800495e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004960:	430b      	orrs	r3, r1
 8004962:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496a:	f023 010f 	bic.w	r1, r3, #15
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	430a      	orrs	r2, r1
 8004978:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a90      	ldr	r2, [pc, #576]	; (8004bc0 <UART_SetConfig+0x2e0>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d125      	bne.n	80049d0 <UART_SetConfig+0xf0>
 8004984:	4b8f      	ldr	r3, [pc, #572]	; (8004bc4 <UART_SetConfig+0x2e4>)
 8004986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800498a:	f003 0303 	and.w	r3, r3, #3
 800498e:	2b03      	cmp	r3, #3
 8004990:	d81a      	bhi.n	80049c8 <UART_SetConfig+0xe8>
 8004992:	a201      	add	r2, pc, #4	; (adr r2, 8004998 <UART_SetConfig+0xb8>)
 8004994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004998:	080049a9 	.word	0x080049a9
 800499c:	080049b9 	.word	0x080049b9
 80049a0:	080049b1 	.word	0x080049b1
 80049a4:	080049c1 	.word	0x080049c1
 80049a8:	2301      	movs	r3, #1
 80049aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049ae:	e116      	b.n	8004bde <UART_SetConfig+0x2fe>
 80049b0:	2302      	movs	r3, #2
 80049b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049b6:	e112      	b.n	8004bde <UART_SetConfig+0x2fe>
 80049b8:	2304      	movs	r3, #4
 80049ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049be:	e10e      	b.n	8004bde <UART_SetConfig+0x2fe>
 80049c0:	2308      	movs	r3, #8
 80049c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049c6:	e10a      	b.n	8004bde <UART_SetConfig+0x2fe>
 80049c8:	2310      	movs	r3, #16
 80049ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049ce:	e106      	b.n	8004bde <UART_SetConfig+0x2fe>
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a7c      	ldr	r2, [pc, #496]	; (8004bc8 <UART_SetConfig+0x2e8>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d138      	bne.n	8004a4c <UART_SetConfig+0x16c>
 80049da:	4b7a      	ldr	r3, [pc, #488]	; (8004bc4 <UART_SetConfig+0x2e4>)
 80049dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e0:	f003 030c 	and.w	r3, r3, #12
 80049e4:	2b0c      	cmp	r3, #12
 80049e6:	d82d      	bhi.n	8004a44 <UART_SetConfig+0x164>
 80049e8:	a201      	add	r2, pc, #4	; (adr r2, 80049f0 <UART_SetConfig+0x110>)
 80049ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ee:	bf00      	nop
 80049f0:	08004a25 	.word	0x08004a25
 80049f4:	08004a45 	.word	0x08004a45
 80049f8:	08004a45 	.word	0x08004a45
 80049fc:	08004a45 	.word	0x08004a45
 8004a00:	08004a35 	.word	0x08004a35
 8004a04:	08004a45 	.word	0x08004a45
 8004a08:	08004a45 	.word	0x08004a45
 8004a0c:	08004a45 	.word	0x08004a45
 8004a10:	08004a2d 	.word	0x08004a2d
 8004a14:	08004a45 	.word	0x08004a45
 8004a18:	08004a45 	.word	0x08004a45
 8004a1c:	08004a45 	.word	0x08004a45
 8004a20:	08004a3d 	.word	0x08004a3d
 8004a24:	2300      	movs	r3, #0
 8004a26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a2a:	e0d8      	b.n	8004bde <UART_SetConfig+0x2fe>
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a32:	e0d4      	b.n	8004bde <UART_SetConfig+0x2fe>
 8004a34:	2304      	movs	r3, #4
 8004a36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a3a:	e0d0      	b.n	8004bde <UART_SetConfig+0x2fe>
 8004a3c:	2308      	movs	r3, #8
 8004a3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a42:	e0cc      	b.n	8004bde <UART_SetConfig+0x2fe>
 8004a44:	2310      	movs	r3, #16
 8004a46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a4a:	e0c8      	b.n	8004bde <UART_SetConfig+0x2fe>
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a5e      	ldr	r2, [pc, #376]	; (8004bcc <UART_SetConfig+0x2ec>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d125      	bne.n	8004aa2 <UART_SetConfig+0x1c2>
 8004a56:	4b5b      	ldr	r3, [pc, #364]	; (8004bc4 <UART_SetConfig+0x2e4>)
 8004a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a5c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a60:	2b30      	cmp	r3, #48	; 0x30
 8004a62:	d016      	beq.n	8004a92 <UART_SetConfig+0x1b2>
 8004a64:	2b30      	cmp	r3, #48	; 0x30
 8004a66:	d818      	bhi.n	8004a9a <UART_SetConfig+0x1ba>
 8004a68:	2b20      	cmp	r3, #32
 8004a6a:	d00a      	beq.n	8004a82 <UART_SetConfig+0x1a2>
 8004a6c:	2b20      	cmp	r3, #32
 8004a6e:	d814      	bhi.n	8004a9a <UART_SetConfig+0x1ba>
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d002      	beq.n	8004a7a <UART_SetConfig+0x19a>
 8004a74:	2b10      	cmp	r3, #16
 8004a76:	d008      	beq.n	8004a8a <UART_SetConfig+0x1aa>
 8004a78:	e00f      	b.n	8004a9a <UART_SetConfig+0x1ba>
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a80:	e0ad      	b.n	8004bde <UART_SetConfig+0x2fe>
 8004a82:	2302      	movs	r3, #2
 8004a84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a88:	e0a9      	b.n	8004bde <UART_SetConfig+0x2fe>
 8004a8a:	2304      	movs	r3, #4
 8004a8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a90:	e0a5      	b.n	8004bde <UART_SetConfig+0x2fe>
 8004a92:	2308      	movs	r3, #8
 8004a94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a98:	e0a1      	b.n	8004bde <UART_SetConfig+0x2fe>
 8004a9a:	2310      	movs	r3, #16
 8004a9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aa0:	e09d      	b.n	8004bde <UART_SetConfig+0x2fe>
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a4a      	ldr	r2, [pc, #296]	; (8004bd0 <UART_SetConfig+0x2f0>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d125      	bne.n	8004af8 <UART_SetConfig+0x218>
 8004aac:	4b45      	ldr	r3, [pc, #276]	; (8004bc4 <UART_SetConfig+0x2e4>)
 8004aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ab6:	2bc0      	cmp	r3, #192	; 0xc0
 8004ab8:	d016      	beq.n	8004ae8 <UART_SetConfig+0x208>
 8004aba:	2bc0      	cmp	r3, #192	; 0xc0
 8004abc:	d818      	bhi.n	8004af0 <UART_SetConfig+0x210>
 8004abe:	2b80      	cmp	r3, #128	; 0x80
 8004ac0:	d00a      	beq.n	8004ad8 <UART_SetConfig+0x1f8>
 8004ac2:	2b80      	cmp	r3, #128	; 0x80
 8004ac4:	d814      	bhi.n	8004af0 <UART_SetConfig+0x210>
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d002      	beq.n	8004ad0 <UART_SetConfig+0x1f0>
 8004aca:	2b40      	cmp	r3, #64	; 0x40
 8004acc:	d008      	beq.n	8004ae0 <UART_SetConfig+0x200>
 8004ace:	e00f      	b.n	8004af0 <UART_SetConfig+0x210>
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ad6:	e082      	b.n	8004bde <UART_SetConfig+0x2fe>
 8004ad8:	2302      	movs	r3, #2
 8004ada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ade:	e07e      	b.n	8004bde <UART_SetConfig+0x2fe>
 8004ae0:	2304      	movs	r3, #4
 8004ae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ae6:	e07a      	b.n	8004bde <UART_SetConfig+0x2fe>
 8004ae8:	2308      	movs	r3, #8
 8004aea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aee:	e076      	b.n	8004bde <UART_SetConfig+0x2fe>
 8004af0:	2310      	movs	r3, #16
 8004af2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004af6:	e072      	b.n	8004bde <UART_SetConfig+0x2fe>
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a35      	ldr	r2, [pc, #212]	; (8004bd4 <UART_SetConfig+0x2f4>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d12a      	bne.n	8004b58 <UART_SetConfig+0x278>
 8004b02:	4b30      	ldr	r3, [pc, #192]	; (8004bc4 <UART_SetConfig+0x2e4>)
 8004b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b10:	d01a      	beq.n	8004b48 <UART_SetConfig+0x268>
 8004b12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b16:	d81b      	bhi.n	8004b50 <UART_SetConfig+0x270>
 8004b18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b1c:	d00c      	beq.n	8004b38 <UART_SetConfig+0x258>
 8004b1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b22:	d815      	bhi.n	8004b50 <UART_SetConfig+0x270>
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d003      	beq.n	8004b30 <UART_SetConfig+0x250>
 8004b28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b2c:	d008      	beq.n	8004b40 <UART_SetConfig+0x260>
 8004b2e:	e00f      	b.n	8004b50 <UART_SetConfig+0x270>
 8004b30:	2300      	movs	r3, #0
 8004b32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b36:	e052      	b.n	8004bde <UART_SetConfig+0x2fe>
 8004b38:	2302      	movs	r3, #2
 8004b3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b3e:	e04e      	b.n	8004bde <UART_SetConfig+0x2fe>
 8004b40:	2304      	movs	r3, #4
 8004b42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b46:	e04a      	b.n	8004bde <UART_SetConfig+0x2fe>
 8004b48:	2308      	movs	r3, #8
 8004b4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b4e:	e046      	b.n	8004bde <UART_SetConfig+0x2fe>
 8004b50:	2310      	movs	r3, #16
 8004b52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b56:	e042      	b.n	8004bde <UART_SetConfig+0x2fe>
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a17      	ldr	r2, [pc, #92]	; (8004bbc <UART_SetConfig+0x2dc>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d13a      	bne.n	8004bd8 <UART_SetConfig+0x2f8>
 8004b62:	4b18      	ldr	r3, [pc, #96]	; (8004bc4 <UART_SetConfig+0x2e4>)
 8004b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b68:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b70:	d01a      	beq.n	8004ba8 <UART_SetConfig+0x2c8>
 8004b72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b76:	d81b      	bhi.n	8004bb0 <UART_SetConfig+0x2d0>
 8004b78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b7c:	d00c      	beq.n	8004b98 <UART_SetConfig+0x2b8>
 8004b7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b82:	d815      	bhi.n	8004bb0 <UART_SetConfig+0x2d0>
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d003      	beq.n	8004b90 <UART_SetConfig+0x2b0>
 8004b88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b8c:	d008      	beq.n	8004ba0 <UART_SetConfig+0x2c0>
 8004b8e:	e00f      	b.n	8004bb0 <UART_SetConfig+0x2d0>
 8004b90:	2300      	movs	r3, #0
 8004b92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b96:	e022      	b.n	8004bde <UART_SetConfig+0x2fe>
 8004b98:	2302      	movs	r3, #2
 8004b9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b9e:	e01e      	b.n	8004bde <UART_SetConfig+0x2fe>
 8004ba0:	2304      	movs	r3, #4
 8004ba2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ba6:	e01a      	b.n	8004bde <UART_SetConfig+0x2fe>
 8004ba8:	2308      	movs	r3, #8
 8004baa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bae:	e016      	b.n	8004bde <UART_SetConfig+0x2fe>
 8004bb0:	2310      	movs	r3, #16
 8004bb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bb6:	e012      	b.n	8004bde <UART_SetConfig+0x2fe>
 8004bb8:	cfff69f3 	.word	0xcfff69f3
 8004bbc:	40008000 	.word	0x40008000
 8004bc0:	40013800 	.word	0x40013800
 8004bc4:	40021000 	.word	0x40021000
 8004bc8:	40004400 	.word	0x40004400
 8004bcc:	40004800 	.word	0x40004800
 8004bd0:	40004c00 	.word	0x40004c00
 8004bd4:	40005000 	.word	0x40005000
 8004bd8:	2310      	movs	r3, #16
 8004bda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4aae      	ldr	r2, [pc, #696]	; (8004e9c <UART_SetConfig+0x5bc>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	f040 8097 	bne.w	8004d18 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004bea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004bee:	2b08      	cmp	r3, #8
 8004bf0:	d823      	bhi.n	8004c3a <UART_SetConfig+0x35a>
 8004bf2:	a201      	add	r2, pc, #4	; (adr r2, 8004bf8 <UART_SetConfig+0x318>)
 8004bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf8:	08004c1d 	.word	0x08004c1d
 8004bfc:	08004c3b 	.word	0x08004c3b
 8004c00:	08004c25 	.word	0x08004c25
 8004c04:	08004c3b 	.word	0x08004c3b
 8004c08:	08004c2b 	.word	0x08004c2b
 8004c0c:	08004c3b 	.word	0x08004c3b
 8004c10:	08004c3b 	.word	0x08004c3b
 8004c14:	08004c3b 	.word	0x08004c3b
 8004c18:	08004c33 	.word	0x08004c33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c1c:	f7fd fee0 	bl	80029e0 <HAL_RCC_GetPCLK1Freq>
 8004c20:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c22:	e010      	b.n	8004c46 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c24:	4b9e      	ldr	r3, [pc, #632]	; (8004ea0 <UART_SetConfig+0x5c0>)
 8004c26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c28:	e00d      	b.n	8004c46 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c2a:	f7fd fe41 	bl	80028b0 <HAL_RCC_GetSysClockFreq>
 8004c2e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c30:	e009      	b.n	8004c46 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c38:	e005      	b.n	8004c46 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004c44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f000 8130 	beq.w	8004eae <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c52:	4a94      	ldr	r2, [pc, #592]	; (8004ea4 <UART_SetConfig+0x5c4>)
 8004c54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c58:	461a      	mov	r2, r3
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c60:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	685a      	ldr	r2, [r3, #4]
 8004c66:	4613      	mov	r3, r2
 8004c68:	005b      	lsls	r3, r3, #1
 8004c6a:	4413      	add	r3, r2
 8004c6c:	69ba      	ldr	r2, [r7, #24]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d305      	bcc.n	8004c7e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c78:	69ba      	ldr	r2, [r7, #24]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d903      	bls.n	8004c86 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004c84:	e113      	b.n	8004eae <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c88:	2200      	movs	r2, #0
 8004c8a:	60bb      	str	r3, [r7, #8]
 8004c8c:	60fa      	str	r2, [r7, #12]
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c92:	4a84      	ldr	r2, [pc, #528]	; (8004ea4 <UART_SetConfig+0x5c4>)
 8004c94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	603b      	str	r3, [r7, #0]
 8004c9e:	607a      	str	r2, [r7, #4]
 8004ca0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ca4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004ca8:	f7fb faaa 	bl	8000200 <__aeabi_uldivmod>
 8004cac:	4602      	mov	r2, r0
 8004cae:	460b      	mov	r3, r1
 8004cb0:	4610      	mov	r0, r2
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	f04f 0200 	mov.w	r2, #0
 8004cb8:	f04f 0300 	mov.w	r3, #0
 8004cbc:	020b      	lsls	r3, r1, #8
 8004cbe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004cc2:	0202      	lsls	r2, r0, #8
 8004cc4:	6979      	ldr	r1, [r7, #20]
 8004cc6:	6849      	ldr	r1, [r1, #4]
 8004cc8:	0849      	lsrs	r1, r1, #1
 8004cca:	2000      	movs	r0, #0
 8004ccc:	460c      	mov	r4, r1
 8004cce:	4605      	mov	r5, r0
 8004cd0:	eb12 0804 	adds.w	r8, r2, r4
 8004cd4:	eb43 0905 	adc.w	r9, r3, r5
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	469a      	mov	sl, r3
 8004ce0:	4693      	mov	fp, r2
 8004ce2:	4652      	mov	r2, sl
 8004ce4:	465b      	mov	r3, fp
 8004ce6:	4640      	mov	r0, r8
 8004ce8:	4649      	mov	r1, r9
 8004cea:	f7fb fa89 	bl	8000200 <__aeabi_uldivmod>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004cf6:	6a3b      	ldr	r3, [r7, #32]
 8004cf8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cfc:	d308      	bcc.n	8004d10 <UART_SetConfig+0x430>
 8004cfe:	6a3b      	ldr	r3, [r7, #32]
 8004d00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d04:	d204      	bcs.n	8004d10 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	6a3a      	ldr	r2, [r7, #32]
 8004d0c:	60da      	str	r2, [r3, #12]
 8004d0e:	e0ce      	b.n	8004eae <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004d16:	e0ca      	b.n	8004eae <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	69db      	ldr	r3, [r3, #28]
 8004d1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d20:	d166      	bne.n	8004df0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004d22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004d26:	2b08      	cmp	r3, #8
 8004d28:	d827      	bhi.n	8004d7a <UART_SetConfig+0x49a>
 8004d2a:	a201      	add	r2, pc, #4	; (adr r2, 8004d30 <UART_SetConfig+0x450>)
 8004d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d30:	08004d55 	.word	0x08004d55
 8004d34:	08004d5d 	.word	0x08004d5d
 8004d38:	08004d65 	.word	0x08004d65
 8004d3c:	08004d7b 	.word	0x08004d7b
 8004d40:	08004d6b 	.word	0x08004d6b
 8004d44:	08004d7b 	.word	0x08004d7b
 8004d48:	08004d7b 	.word	0x08004d7b
 8004d4c:	08004d7b 	.word	0x08004d7b
 8004d50:	08004d73 	.word	0x08004d73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d54:	f7fd fe44 	bl	80029e0 <HAL_RCC_GetPCLK1Freq>
 8004d58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d5a:	e014      	b.n	8004d86 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d5c:	f7fd fe56 	bl	8002a0c <HAL_RCC_GetPCLK2Freq>
 8004d60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d62:	e010      	b.n	8004d86 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d64:	4b4e      	ldr	r3, [pc, #312]	; (8004ea0 <UART_SetConfig+0x5c0>)
 8004d66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d68:	e00d      	b.n	8004d86 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d6a:	f7fd fda1 	bl	80028b0 <HAL_RCC_GetSysClockFreq>
 8004d6e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d70:	e009      	b.n	8004d86 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d78:	e005      	b.n	8004d86 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004d84:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f000 8090 	beq.w	8004eae <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d92:	4a44      	ldr	r2, [pc, #272]	; (8004ea4 <UART_SetConfig+0x5c4>)
 8004d94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d98:	461a      	mov	r2, r3
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004da0:	005a      	lsls	r2, r3, #1
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	085b      	lsrs	r3, r3, #1
 8004da8:	441a      	add	r2, r3
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004db4:	6a3b      	ldr	r3, [r7, #32]
 8004db6:	2b0f      	cmp	r3, #15
 8004db8:	d916      	bls.n	8004de8 <UART_SetConfig+0x508>
 8004dba:	6a3b      	ldr	r3, [r7, #32]
 8004dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dc0:	d212      	bcs.n	8004de8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dc2:	6a3b      	ldr	r3, [r7, #32]
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	f023 030f 	bic.w	r3, r3, #15
 8004dca:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004dcc:	6a3b      	ldr	r3, [r7, #32]
 8004dce:	085b      	lsrs	r3, r3, #1
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	f003 0307 	and.w	r3, r3, #7
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	8bfb      	ldrh	r3, [r7, #30]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	8bfa      	ldrh	r2, [r7, #30]
 8004de4:	60da      	str	r2, [r3, #12]
 8004de6:	e062      	b.n	8004eae <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004dee:	e05e      	b.n	8004eae <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004df0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004df4:	2b08      	cmp	r3, #8
 8004df6:	d828      	bhi.n	8004e4a <UART_SetConfig+0x56a>
 8004df8:	a201      	add	r2, pc, #4	; (adr r2, 8004e00 <UART_SetConfig+0x520>)
 8004dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfe:	bf00      	nop
 8004e00:	08004e25 	.word	0x08004e25
 8004e04:	08004e2d 	.word	0x08004e2d
 8004e08:	08004e35 	.word	0x08004e35
 8004e0c:	08004e4b 	.word	0x08004e4b
 8004e10:	08004e3b 	.word	0x08004e3b
 8004e14:	08004e4b 	.word	0x08004e4b
 8004e18:	08004e4b 	.word	0x08004e4b
 8004e1c:	08004e4b 	.word	0x08004e4b
 8004e20:	08004e43 	.word	0x08004e43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e24:	f7fd fddc 	bl	80029e0 <HAL_RCC_GetPCLK1Freq>
 8004e28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e2a:	e014      	b.n	8004e56 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e2c:	f7fd fdee 	bl	8002a0c <HAL_RCC_GetPCLK2Freq>
 8004e30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e32:	e010      	b.n	8004e56 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e34:	4b1a      	ldr	r3, [pc, #104]	; (8004ea0 <UART_SetConfig+0x5c0>)
 8004e36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e38:	e00d      	b.n	8004e56 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e3a:	f7fd fd39 	bl	80028b0 <HAL_RCC_GetSysClockFreq>
 8004e3e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e40:	e009      	b.n	8004e56 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e48:	e005      	b.n	8004e56 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004e54:	bf00      	nop
    }

    if (pclk != 0U)
 8004e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d028      	beq.n	8004eae <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e60:	4a10      	ldr	r2, [pc, #64]	; (8004ea4 <UART_SetConfig+0x5c4>)
 8004e62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e66:	461a      	mov	r2, r3
 8004e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6a:	fbb3 f2f2 	udiv	r2, r3, r2
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	085b      	lsrs	r3, r3, #1
 8004e74:	441a      	add	r2, r3
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e7e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e80:	6a3b      	ldr	r3, [r7, #32]
 8004e82:	2b0f      	cmp	r3, #15
 8004e84:	d910      	bls.n	8004ea8 <UART_SetConfig+0x5c8>
 8004e86:	6a3b      	ldr	r3, [r7, #32]
 8004e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e8c:	d20c      	bcs.n	8004ea8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e8e:	6a3b      	ldr	r3, [r7, #32]
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	60da      	str	r2, [r3, #12]
 8004e98:	e009      	b.n	8004eae <UART_SetConfig+0x5ce>
 8004e9a:	bf00      	nop
 8004e9c:	40008000 	.word	0x40008000
 8004ea0:	00f42400 	.word	0x00f42400
 8004ea4:	08008068 	.word	0x08008068
      }
      else
      {
        ret = HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004eca:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3730      	adds	r7, #48	; 0x30
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004ed8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee4:	f003 0301 	and.w	r3, r3, #1
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00a      	beq.n	8004f02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	430a      	orrs	r2, r1
 8004f00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f06:	f003 0302 	and.w	r3, r3, #2
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00a      	beq.n	8004f24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	430a      	orrs	r2, r1
 8004f22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f28:	f003 0304 	and.w	r3, r3, #4
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00a      	beq.n	8004f46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	430a      	orrs	r2, r1
 8004f44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4a:	f003 0308 	and.w	r3, r3, #8
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00a      	beq.n	8004f68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	430a      	orrs	r2, r1
 8004f66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f6c:	f003 0310 	and.w	r3, r3, #16
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00a      	beq.n	8004f8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	430a      	orrs	r2, r1
 8004f88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f8e:	f003 0320 	and.w	r3, r3, #32
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00a      	beq.n	8004fac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d01a      	beq.n	8004fee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fd6:	d10a      	bne.n	8004fee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	430a      	orrs	r2, r1
 8004fec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00a      	beq.n	8005010 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	430a      	orrs	r2, r1
 800500e:	605a      	str	r2, [r3, #4]
  }
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af02      	add	r7, sp, #8
 8005022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800502c:	f7fc f944 	bl	80012b8 <HAL_GetTick>
 8005030:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0308 	and.w	r3, r3, #8
 800503c:	2b08      	cmp	r3, #8
 800503e:	d10e      	bne.n	800505e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005040:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005044:	9300      	str	r3, [sp, #0]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 f82f 	bl	80050b2 <UART_WaitOnFlagUntilTimeout>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e025      	b.n	80050aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0304 	and.w	r3, r3, #4
 8005068:	2b04      	cmp	r3, #4
 800506a:	d10e      	bne.n	800508a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800506c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005070:	9300      	str	r3, [sp, #0]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 f819 	bl	80050b2 <UART_WaitOnFlagUntilTimeout>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d001      	beq.n	800508a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e00f      	b.n	80050aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2220      	movs	r2, #32
 800508e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2220      	movs	r2, #32
 8005096:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3710      	adds	r7, #16
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b09c      	sub	sp, #112	; 0x70
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	60f8      	str	r0, [r7, #12]
 80050ba:	60b9      	str	r1, [r7, #8]
 80050bc:	603b      	str	r3, [r7, #0]
 80050be:	4613      	mov	r3, r2
 80050c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050c2:	e0a9      	b.n	8005218 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ca:	f000 80a5 	beq.w	8005218 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ce:	f7fc f8f3 	bl	80012b8 <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80050da:	429a      	cmp	r2, r3
 80050dc:	d302      	bcc.n	80050e4 <UART_WaitOnFlagUntilTimeout+0x32>
 80050de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d140      	bne.n	8005166 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050ec:	e853 3f00 	ldrex	r3, [r3]
 80050f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80050f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80050f8:	667b      	str	r3, [r7, #100]	; 0x64
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	461a      	mov	r2, r3
 8005100:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005102:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005104:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005106:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005108:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800510a:	e841 2300 	strex	r3, r2, [r1]
 800510e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005110:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1e6      	bne.n	80050e4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	3308      	adds	r3, #8
 800511c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005120:	e853 3f00 	ldrex	r3, [r3]
 8005124:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005128:	f023 0301 	bic.w	r3, r3, #1
 800512c:	663b      	str	r3, [r7, #96]	; 0x60
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	3308      	adds	r3, #8
 8005134:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005136:	64ba      	str	r2, [r7, #72]	; 0x48
 8005138:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800513c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800513e:	e841 2300 	strex	r3, r2, [r1]
 8005142:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005144:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005146:	2b00      	cmp	r3, #0
 8005148:	d1e5      	bne.n	8005116 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2220      	movs	r2, #32
 800514e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2220      	movs	r2, #32
 8005156:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e069      	b.n	800523a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0304 	and.w	r3, r3, #4
 8005170:	2b00      	cmp	r3, #0
 8005172:	d051      	beq.n	8005218 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	69db      	ldr	r3, [r3, #28]
 800517a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800517e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005182:	d149      	bne.n	8005218 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800518c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005196:	e853 3f00 	ldrex	r3, [r3]
 800519a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800519c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80051a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	461a      	mov	r2, r3
 80051aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051ac:	637b      	str	r3, [r7, #52]	; 0x34
 80051ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051b4:	e841 2300 	strex	r3, r2, [r1]
 80051b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80051ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1e6      	bne.n	800518e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	3308      	adds	r3, #8
 80051c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	e853 3f00 	ldrex	r3, [r3]
 80051ce:	613b      	str	r3, [r7, #16]
   return(result);
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	f023 0301 	bic.w	r3, r3, #1
 80051d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	3308      	adds	r3, #8
 80051de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80051e0:	623a      	str	r2, [r7, #32]
 80051e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e4:	69f9      	ldr	r1, [r7, #28]
 80051e6:	6a3a      	ldr	r2, [r7, #32]
 80051e8:	e841 2300 	strex	r3, r2, [r1]
 80051ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d1e5      	bne.n	80051c0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2220      	movs	r2, #32
 80051f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2220      	movs	r2, #32
 8005200:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2220      	movs	r2, #32
 8005208:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e010      	b.n	800523a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	69da      	ldr	r2, [r3, #28]
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	4013      	ands	r3, r2
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	429a      	cmp	r2, r3
 8005226:	bf0c      	ite	eq
 8005228:	2301      	moveq	r3, #1
 800522a:	2300      	movne	r3, #0
 800522c:	b2db      	uxtb	r3, r3
 800522e:	461a      	mov	r2, r3
 8005230:	79fb      	ldrb	r3, [r7, #7]
 8005232:	429a      	cmp	r2, r3
 8005234:	f43f af46 	beq.w	80050c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3770      	adds	r7, #112	; 0x70
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005242:	b480      	push	{r7}
 8005244:	b085      	sub	sp, #20
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005250:	2b01      	cmp	r3, #1
 8005252:	d101      	bne.n	8005258 <HAL_UARTEx_DisableFifoMode+0x16>
 8005254:	2302      	movs	r3, #2
 8005256:	e027      	b.n	80052a8 <HAL_UARTEx_DisableFifoMode+0x66>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2224      	movs	r2, #36	; 0x24
 8005264:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f022 0201 	bic.w	r2, r2, #1
 800527e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005286:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2220      	movs	r2, #32
 800529a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3714      	adds	r7, #20
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d101      	bne.n	80052cc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80052c8:	2302      	movs	r3, #2
 80052ca:	e02d      	b.n	8005328 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2224      	movs	r2, #36	; 0x24
 80052d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f022 0201 	bic.w	r2, r2, #1
 80052f2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	683a      	ldr	r2, [r7, #0]
 8005304:	430a      	orrs	r2, r1
 8005306:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f000 f84f 	bl	80053ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2220      	movs	r2, #32
 800531a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3710      	adds	r7, #16
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005340:	2b01      	cmp	r3, #1
 8005342:	d101      	bne.n	8005348 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005344:	2302      	movs	r3, #2
 8005346:	e02d      	b.n	80053a4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2224      	movs	r2, #36	; 0x24
 8005354:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f022 0201 	bic.w	r2, r2, #1
 800536e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	430a      	orrs	r2, r1
 8005382:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 f811 	bl	80053ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2220      	movs	r2, #32
 8005396:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3710      	adds	r7, #16
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d108      	bne.n	80053ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80053cc:	e031      	b.n	8005432 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80053ce:	2308      	movs	r3, #8
 80053d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80053d2:	2308      	movs	r3, #8
 80053d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	0e5b      	lsrs	r3, r3, #25
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	f003 0307 	and.w	r3, r3, #7
 80053e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	0f5b      	lsrs	r3, r3, #29
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	f003 0307 	and.w	r3, r3, #7
 80053f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80053f6:	7bbb      	ldrb	r3, [r7, #14]
 80053f8:	7b3a      	ldrb	r2, [r7, #12]
 80053fa:	4911      	ldr	r1, [pc, #68]	; (8005440 <UARTEx_SetNbDataToProcess+0x94>)
 80053fc:	5c8a      	ldrb	r2, [r1, r2]
 80053fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005402:	7b3a      	ldrb	r2, [r7, #12]
 8005404:	490f      	ldr	r1, [pc, #60]	; (8005444 <UARTEx_SetNbDataToProcess+0x98>)
 8005406:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005408:	fb93 f3f2 	sdiv	r3, r3, r2
 800540c:	b29a      	uxth	r2, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005414:	7bfb      	ldrb	r3, [r7, #15]
 8005416:	7b7a      	ldrb	r2, [r7, #13]
 8005418:	4909      	ldr	r1, [pc, #36]	; (8005440 <UARTEx_SetNbDataToProcess+0x94>)
 800541a:	5c8a      	ldrb	r2, [r1, r2]
 800541c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005420:	7b7a      	ldrb	r2, [r7, #13]
 8005422:	4908      	ldr	r1, [pc, #32]	; (8005444 <UARTEx_SetNbDataToProcess+0x98>)
 8005424:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005426:	fb93 f3f2 	sdiv	r3, r3, r2
 800542a:	b29a      	uxth	r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005432:	bf00      	nop
 8005434:	3714      	adds	r7, #20
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	08008080 	.word	0x08008080
 8005444:	08008088 	.word	0x08008088

08005448 <__NVIC_SetPriority>:
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	4603      	mov	r3, r0
 8005450:	6039      	str	r1, [r7, #0]
 8005452:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005458:	2b00      	cmp	r3, #0
 800545a:	db0a      	blt.n	8005472 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	b2da      	uxtb	r2, r3
 8005460:	490c      	ldr	r1, [pc, #48]	; (8005494 <__NVIC_SetPriority+0x4c>)
 8005462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005466:	0112      	lsls	r2, r2, #4
 8005468:	b2d2      	uxtb	r2, r2
 800546a:	440b      	add	r3, r1
 800546c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005470:	e00a      	b.n	8005488 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	b2da      	uxtb	r2, r3
 8005476:	4908      	ldr	r1, [pc, #32]	; (8005498 <__NVIC_SetPriority+0x50>)
 8005478:	79fb      	ldrb	r3, [r7, #7]
 800547a:	f003 030f 	and.w	r3, r3, #15
 800547e:	3b04      	subs	r3, #4
 8005480:	0112      	lsls	r2, r2, #4
 8005482:	b2d2      	uxtb	r2, r2
 8005484:	440b      	add	r3, r1
 8005486:	761a      	strb	r2, [r3, #24]
}
 8005488:	bf00      	nop
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr
 8005494:	e000e100 	.word	0xe000e100
 8005498:	e000ed00 	.word	0xe000ed00

0800549c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800549c:	b580      	push	{r7, lr}
 800549e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80054a0:	2100      	movs	r1, #0
 80054a2:	f06f 0004 	mvn.w	r0, #4
 80054a6:	f7ff ffcf 	bl	8005448 <__NVIC_SetPriority>
#endif
}
 80054aa:	bf00      	nop
 80054ac:	bd80      	pop	{r7, pc}
	...

080054b0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054b6:	f3ef 8305 	mrs	r3, IPSR
 80054ba:	603b      	str	r3, [r7, #0]
  return(result);
 80054bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d003      	beq.n	80054ca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80054c2:	f06f 0305 	mvn.w	r3, #5
 80054c6:	607b      	str	r3, [r7, #4]
 80054c8:	e00c      	b.n	80054e4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80054ca:	4b0a      	ldr	r3, [pc, #40]	; (80054f4 <osKernelInitialize+0x44>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d105      	bne.n	80054de <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80054d2:	4b08      	ldr	r3, [pc, #32]	; (80054f4 <osKernelInitialize+0x44>)
 80054d4:	2201      	movs	r2, #1
 80054d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80054d8:	2300      	movs	r3, #0
 80054da:	607b      	str	r3, [r7, #4]
 80054dc:	e002      	b.n	80054e4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80054de:	f04f 33ff 	mov.w	r3, #4294967295
 80054e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80054e4:	687b      	ldr	r3, [r7, #4]
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	370c      	adds	r7, #12
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	20000360 	.word	0x20000360

080054f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054fe:	f3ef 8305 	mrs	r3, IPSR
 8005502:	603b      	str	r3, [r7, #0]
  return(result);
 8005504:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005506:	2b00      	cmp	r3, #0
 8005508:	d003      	beq.n	8005512 <osKernelStart+0x1a>
    stat = osErrorISR;
 800550a:	f06f 0305 	mvn.w	r3, #5
 800550e:	607b      	str	r3, [r7, #4]
 8005510:	e010      	b.n	8005534 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005512:	4b0b      	ldr	r3, [pc, #44]	; (8005540 <osKernelStart+0x48>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2b01      	cmp	r3, #1
 8005518:	d109      	bne.n	800552e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800551a:	f7ff ffbf 	bl	800549c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800551e:	4b08      	ldr	r3, [pc, #32]	; (8005540 <osKernelStart+0x48>)
 8005520:	2202      	movs	r2, #2
 8005522:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005524:	f001 f866 	bl	80065f4 <vTaskStartScheduler>
      stat = osOK;
 8005528:	2300      	movs	r3, #0
 800552a:	607b      	str	r3, [r7, #4]
 800552c:	e002      	b.n	8005534 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800552e:	f04f 33ff 	mov.w	r3, #4294967295
 8005532:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005534:	687b      	ldr	r3, [r7, #4]
}
 8005536:	4618      	mov	r0, r3
 8005538:	3708      	adds	r7, #8
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	20000360 	.word	0x20000360

08005544 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005544:	b580      	push	{r7, lr}
 8005546:	b08e      	sub	sp, #56	; 0x38
 8005548:	af04      	add	r7, sp, #16
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005550:	2300      	movs	r3, #0
 8005552:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005554:	f3ef 8305 	mrs	r3, IPSR
 8005558:	617b      	str	r3, [r7, #20]
  return(result);
 800555a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800555c:	2b00      	cmp	r3, #0
 800555e:	d17e      	bne.n	800565e <osThreadNew+0x11a>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d07b      	beq.n	800565e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005566:	2380      	movs	r3, #128	; 0x80
 8005568:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800556a:	2318      	movs	r3, #24
 800556c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800556e:	2300      	movs	r3, #0
 8005570:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005572:	f04f 33ff 	mov.w	r3, #4294967295
 8005576:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d045      	beq.n	800560a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d002      	beq.n	800558c <osThreadNew+0x48>
        name = attr->name;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d002      	beq.n	800559a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d008      	beq.n	80055b2 <osThreadNew+0x6e>
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	2b38      	cmp	r3, #56	; 0x38
 80055a4:	d805      	bhi.n	80055b2 <osThreadNew+0x6e>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d001      	beq.n	80055b6 <osThreadNew+0x72>
        return (NULL);
 80055b2:	2300      	movs	r3, #0
 80055b4:	e054      	b.n	8005660 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d003      	beq.n	80055c6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	695b      	ldr	r3, [r3, #20]
 80055c2:	089b      	lsrs	r3, r3, #2
 80055c4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00e      	beq.n	80055ec <osThreadNew+0xa8>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	2b5b      	cmp	r3, #91	; 0x5b
 80055d4:	d90a      	bls.n	80055ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d006      	beq.n	80055ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d002      	beq.n	80055ec <osThreadNew+0xa8>
        mem = 1;
 80055e6:	2301      	movs	r3, #1
 80055e8:	61bb      	str	r3, [r7, #24]
 80055ea:	e010      	b.n	800560e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d10c      	bne.n	800560e <osThreadNew+0xca>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d108      	bne.n	800560e <osThreadNew+0xca>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d104      	bne.n	800560e <osThreadNew+0xca>
          mem = 0;
 8005604:	2300      	movs	r3, #0
 8005606:	61bb      	str	r3, [r7, #24]
 8005608:	e001      	b.n	800560e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800560a:	2300      	movs	r3, #0
 800560c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d110      	bne.n	8005636 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800561c:	9202      	str	r2, [sp, #8]
 800561e:	9301      	str	r3, [sp, #4]
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	9300      	str	r3, [sp, #0]
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	6a3a      	ldr	r2, [r7, #32]
 8005628:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	f000 fe0c 	bl	8006248 <xTaskCreateStatic>
 8005630:	4603      	mov	r3, r0
 8005632:	613b      	str	r3, [r7, #16]
 8005634:	e013      	b.n	800565e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d110      	bne.n	800565e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800563c:	6a3b      	ldr	r3, [r7, #32]
 800563e:	b29a      	uxth	r2, r3
 8005640:	f107 0310 	add.w	r3, r7, #16
 8005644:	9301      	str	r3, [sp, #4]
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	9300      	str	r3, [sp, #0]
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800564e:	68f8      	ldr	r0, [r7, #12]
 8005650:	f000 fe57 	bl	8006302 <xTaskCreate>
 8005654:	4603      	mov	r3, r0
 8005656:	2b01      	cmp	r3, #1
 8005658:	d001      	beq.n	800565e <osThreadNew+0x11a>
            hTask = NULL;
 800565a:	2300      	movs	r3, #0
 800565c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800565e:	693b      	ldr	r3, [r7, #16]
}
 8005660:	4618      	mov	r0, r3
 8005662:	3728      	adds	r7, #40	; 0x28
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005670:	f3ef 8305 	mrs	r3, IPSR
 8005674:	60bb      	str	r3, [r7, #8]
  return(result);
 8005676:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005678:	2b00      	cmp	r3, #0
 800567a:	d003      	beq.n	8005684 <osDelay+0x1c>
    stat = osErrorISR;
 800567c:	f06f 0305 	mvn.w	r3, #5
 8005680:	60fb      	str	r3, [r7, #12]
 8005682:	e007      	b.n	8005694 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005684:	2300      	movs	r3, #0
 8005686:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d002      	beq.n	8005694 <osDelay+0x2c>
      vTaskDelay(ticks);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 ff7c 	bl	800658c <vTaskDelay>
    }
  }

  return (stat);
 8005694:	68fb      	ldr	r3, [r7, #12]
}
 8005696:	4618      	mov	r0, r3
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
	...

080056a0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	4a07      	ldr	r2, [pc, #28]	; (80056cc <vApplicationGetIdleTaskMemory+0x2c>)
 80056b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	4a06      	ldr	r2, [pc, #24]	; (80056d0 <vApplicationGetIdleTaskMemory+0x30>)
 80056b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2280      	movs	r2, #128	; 0x80
 80056bc:	601a      	str	r2, [r3, #0]
}
 80056be:	bf00      	nop
 80056c0:	3714      	adds	r7, #20
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	20000364 	.word	0x20000364
 80056d0:	200003c0 	.word	0x200003c0

080056d4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	4a07      	ldr	r2, [pc, #28]	; (8005700 <vApplicationGetTimerTaskMemory+0x2c>)
 80056e4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	4a06      	ldr	r2, [pc, #24]	; (8005704 <vApplicationGetTimerTaskMemory+0x30>)
 80056ea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056f2:	601a      	str	r2, [r3, #0]
}
 80056f4:	bf00      	nop
 80056f6:	3714      	adds	r7, #20
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr
 8005700:	200005c0 	.word	0x200005c0
 8005704:	2000061c 	.word	0x2000061c

08005708 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f103 0208 	add.w	r2, r3, #8
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f04f 32ff 	mov.w	r2, #4294967295
 8005720:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f103 0208 	add.w	r2, r3, #8
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f103 0208 	add.w	r2, r3, #8
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800573c:	bf00      	nop
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005756:	bf00      	nop
 8005758:	370c      	adds	r7, #12
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr

08005762 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005762:	b480      	push	{r7}
 8005764:	b085      	sub	sp, #20
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
 800576a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	689a      	ldr	r2, [r3, #8]
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	683a      	ldr	r2, [r7, #0]
 8005786:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	683a      	ldr	r2, [r7, #0]
 800578c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	1c5a      	adds	r2, r3, #1
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	601a      	str	r2, [r3, #0]
}
 800579e:	bf00      	nop
 80057a0:	3714      	adds	r7, #20
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr

080057aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80057aa:	b480      	push	{r7}
 80057ac:	b085      	sub	sp, #20
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
 80057b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c0:	d103      	bne.n	80057ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	60fb      	str	r3, [r7, #12]
 80057c8:	e00c      	b.n	80057e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	3308      	adds	r3, #8
 80057ce:	60fb      	str	r3, [r7, #12]
 80057d0:	e002      	b.n	80057d8 <vListInsert+0x2e>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	60fb      	str	r3, [r7, #12]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d2f6      	bcs.n	80057d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	685a      	ldr	r2, [r3, #4]
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	683a      	ldr	r2, [r7, #0]
 80057f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	683a      	ldr	r2, [r7, #0]
 80057fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	1c5a      	adds	r2, r3, #1
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	601a      	str	r2, [r3, #0]
}
 8005810:	bf00      	nop
 8005812:	3714      	adds	r7, #20
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	6892      	ldr	r2, [r2, #8]
 8005832:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	6852      	ldr	r2, [r2, #4]
 800583c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	429a      	cmp	r2, r3
 8005846:	d103      	bne.n	8005850 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	689a      	ldr	r2, [r3, #8]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	1e5a      	subs	r2, r3, #1
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
}
 8005864:	4618      	mov	r0, r3
 8005866:	3714      	adds	r7, #20
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d10a      	bne.n	800589a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005888:	f383 8811 	msr	BASEPRI, r3
 800588c:	f3bf 8f6f 	isb	sy
 8005890:	f3bf 8f4f 	dsb	sy
 8005894:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005896:	bf00      	nop
 8005898:	e7fe      	b.n	8005898 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800589a:	f002 f84b 	bl	8007934 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058a6:	68f9      	ldr	r1, [r7, #12]
 80058a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80058aa:	fb01 f303 	mul.w	r3, r1, r3
 80058ae:	441a      	add	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ca:	3b01      	subs	r3, #1
 80058cc:	68f9      	ldr	r1, [r7, #12]
 80058ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80058d0:	fb01 f303 	mul.w	r3, r1, r3
 80058d4:	441a      	add	r2, r3
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	22ff      	movs	r2, #255	; 0xff
 80058de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	22ff      	movs	r2, #255	; 0xff
 80058e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d114      	bne.n	800591a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d01a      	beq.n	800592e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	3310      	adds	r3, #16
 80058fc:	4618      	mov	r0, r3
 80058fe:	f001 f903 	bl	8006b08 <xTaskRemoveFromEventList>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d012      	beq.n	800592e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005908:	4b0c      	ldr	r3, [pc, #48]	; (800593c <xQueueGenericReset+0xcc>)
 800590a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800590e:	601a      	str	r2, [r3, #0]
 8005910:	f3bf 8f4f 	dsb	sy
 8005914:	f3bf 8f6f 	isb	sy
 8005918:	e009      	b.n	800592e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	3310      	adds	r3, #16
 800591e:	4618      	mov	r0, r3
 8005920:	f7ff fef2 	bl	8005708 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	3324      	adds	r3, #36	; 0x24
 8005928:	4618      	mov	r0, r3
 800592a:	f7ff feed 	bl	8005708 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800592e:	f002 f831 	bl	8007994 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005932:	2301      	movs	r3, #1
}
 8005934:	4618      	mov	r0, r3
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	e000ed04 	.word	0xe000ed04

08005940 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005940:	b580      	push	{r7, lr}
 8005942:	b08e      	sub	sp, #56	; 0x38
 8005944:	af02      	add	r7, sp, #8
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
 800594c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d10a      	bne.n	800596a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005958:	f383 8811 	msr	BASEPRI, r3
 800595c:	f3bf 8f6f 	isb	sy
 8005960:	f3bf 8f4f 	dsb	sy
 8005964:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005966:	bf00      	nop
 8005968:	e7fe      	b.n	8005968 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d10a      	bne.n	8005986 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005974:	f383 8811 	msr	BASEPRI, r3
 8005978:	f3bf 8f6f 	isb	sy
 800597c:	f3bf 8f4f 	dsb	sy
 8005980:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005982:	bf00      	nop
 8005984:	e7fe      	b.n	8005984 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d002      	beq.n	8005992 <xQueueGenericCreateStatic+0x52>
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d001      	beq.n	8005996 <xQueueGenericCreateStatic+0x56>
 8005992:	2301      	movs	r3, #1
 8005994:	e000      	b.n	8005998 <xQueueGenericCreateStatic+0x58>
 8005996:	2300      	movs	r3, #0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10a      	bne.n	80059b2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800599c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a0:	f383 8811 	msr	BASEPRI, r3
 80059a4:	f3bf 8f6f 	isb	sy
 80059a8:	f3bf 8f4f 	dsb	sy
 80059ac:	623b      	str	r3, [r7, #32]
}
 80059ae:	bf00      	nop
 80059b0:	e7fe      	b.n	80059b0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d102      	bne.n	80059be <xQueueGenericCreateStatic+0x7e>
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d101      	bne.n	80059c2 <xQueueGenericCreateStatic+0x82>
 80059be:	2301      	movs	r3, #1
 80059c0:	e000      	b.n	80059c4 <xQueueGenericCreateStatic+0x84>
 80059c2:	2300      	movs	r3, #0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d10a      	bne.n	80059de <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80059c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059cc:	f383 8811 	msr	BASEPRI, r3
 80059d0:	f3bf 8f6f 	isb	sy
 80059d4:	f3bf 8f4f 	dsb	sy
 80059d8:	61fb      	str	r3, [r7, #28]
}
 80059da:	bf00      	nop
 80059dc:	e7fe      	b.n	80059dc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80059de:	2350      	movs	r3, #80	; 0x50
 80059e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	2b50      	cmp	r3, #80	; 0x50
 80059e6:	d00a      	beq.n	80059fe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80059e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ec:	f383 8811 	msr	BASEPRI, r3
 80059f0:	f3bf 8f6f 	isb	sy
 80059f4:	f3bf 8f4f 	dsb	sy
 80059f8:	61bb      	str	r3, [r7, #24]
}
 80059fa:	bf00      	nop
 80059fc:	e7fe      	b.n	80059fc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80059fe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00d      	beq.n	8005a26 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a12:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a18:	9300      	str	r3, [sp, #0]
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	68b9      	ldr	r1, [r7, #8]
 8005a20:	68f8      	ldr	r0, [r7, #12]
 8005a22:	f000 f805 	bl	8005a30 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3730      	adds	r7, #48	; 0x30
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	607a      	str	r2, [r7, #4]
 8005a3c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d103      	bne.n	8005a4c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	69ba      	ldr	r2, [r7, #24]
 8005a48:	601a      	str	r2, [r3, #0]
 8005a4a:	e002      	b.n	8005a52 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	68ba      	ldr	r2, [r7, #8]
 8005a5c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005a5e:	2101      	movs	r1, #1
 8005a60:	69b8      	ldr	r0, [r7, #24]
 8005a62:	f7ff ff05 	bl	8005870 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	78fa      	ldrb	r2, [r7, #3]
 8005a6a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005a6e:	bf00      	nop
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
	...

08005a78 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b08e      	sub	sp, #56	; 0x38
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	607a      	str	r2, [r7, #4]
 8005a84:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005a86:	2300      	movs	r3, #0
 8005a88:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d10a      	bne.n	8005aaa <xQueueGenericSend+0x32>
	__asm volatile
 8005a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a98:	f383 8811 	msr	BASEPRI, r3
 8005a9c:	f3bf 8f6f 	isb	sy
 8005aa0:	f3bf 8f4f 	dsb	sy
 8005aa4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005aa6:	bf00      	nop
 8005aa8:	e7fe      	b.n	8005aa8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d103      	bne.n	8005ab8 <xQueueGenericSend+0x40>
 8005ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d101      	bne.n	8005abc <xQueueGenericSend+0x44>
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e000      	b.n	8005abe <xQueueGenericSend+0x46>
 8005abc:	2300      	movs	r3, #0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d10a      	bne.n	8005ad8 <xQueueGenericSend+0x60>
	__asm volatile
 8005ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac6:	f383 8811 	msr	BASEPRI, r3
 8005aca:	f3bf 8f6f 	isb	sy
 8005ace:	f3bf 8f4f 	dsb	sy
 8005ad2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005ad4:	bf00      	nop
 8005ad6:	e7fe      	b.n	8005ad6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d103      	bne.n	8005ae6 <xQueueGenericSend+0x6e>
 8005ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d101      	bne.n	8005aea <xQueueGenericSend+0x72>
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e000      	b.n	8005aec <xQueueGenericSend+0x74>
 8005aea:	2300      	movs	r3, #0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d10a      	bne.n	8005b06 <xQueueGenericSend+0x8e>
	__asm volatile
 8005af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af4:	f383 8811 	msr	BASEPRI, r3
 8005af8:	f3bf 8f6f 	isb	sy
 8005afc:	f3bf 8f4f 	dsb	sy
 8005b00:	623b      	str	r3, [r7, #32]
}
 8005b02:	bf00      	nop
 8005b04:	e7fe      	b.n	8005b04 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b06:	f001 f9bd 	bl	8006e84 <xTaskGetSchedulerState>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d102      	bne.n	8005b16 <xQueueGenericSend+0x9e>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d101      	bne.n	8005b1a <xQueueGenericSend+0xa2>
 8005b16:	2301      	movs	r3, #1
 8005b18:	e000      	b.n	8005b1c <xQueueGenericSend+0xa4>
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d10a      	bne.n	8005b36 <xQueueGenericSend+0xbe>
	__asm volatile
 8005b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b24:	f383 8811 	msr	BASEPRI, r3
 8005b28:	f3bf 8f6f 	isb	sy
 8005b2c:	f3bf 8f4f 	dsb	sy
 8005b30:	61fb      	str	r3, [r7, #28]
}
 8005b32:	bf00      	nop
 8005b34:	e7fe      	b.n	8005b34 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b36:	f001 fefd 	bl	8007934 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d302      	bcc.n	8005b4c <xQueueGenericSend+0xd4>
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d129      	bne.n	8005ba0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b4c:	683a      	ldr	r2, [r7, #0]
 8005b4e:	68b9      	ldr	r1, [r7, #8]
 8005b50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b52:	f000 fa0b 	bl	8005f6c <prvCopyDataToQueue>
 8005b56:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d010      	beq.n	8005b82 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b62:	3324      	adds	r3, #36	; 0x24
 8005b64:	4618      	mov	r0, r3
 8005b66:	f000 ffcf 	bl	8006b08 <xTaskRemoveFromEventList>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d013      	beq.n	8005b98 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005b70:	4b3f      	ldr	r3, [pc, #252]	; (8005c70 <xQueueGenericSend+0x1f8>)
 8005b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b76:	601a      	str	r2, [r3, #0]
 8005b78:	f3bf 8f4f 	dsb	sy
 8005b7c:	f3bf 8f6f 	isb	sy
 8005b80:	e00a      	b.n	8005b98 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d007      	beq.n	8005b98 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005b88:	4b39      	ldr	r3, [pc, #228]	; (8005c70 <xQueueGenericSend+0x1f8>)
 8005b8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b8e:	601a      	str	r2, [r3, #0]
 8005b90:	f3bf 8f4f 	dsb	sy
 8005b94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005b98:	f001 fefc 	bl	8007994 <vPortExitCritical>
				return pdPASS;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e063      	b.n	8005c68 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d103      	bne.n	8005bae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ba6:	f001 fef5 	bl	8007994 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005baa:	2300      	movs	r3, #0
 8005bac:	e05c      	b.n	8005c68 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d106      	bne.n	8005bc2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005bb4:	f107 0314 	add.w	r3, r7, #20
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f001 f809 	bl	8006bd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005bc2:	f001 fee7 	bl	8007994 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005bc6:	f000 fd7b 	bl	80066c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005bca:	f001 feb3 	bl	8007934 <vPortEnterCritical>
 8005bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bd4:	b25b      	sxtb	r3, r3
 8005bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bda:	d103      	bne.n	8005be4 <xQueueGenericSend+0x16c>
 8005bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bea:	b25b      	sxtb	r3, r3
 8005bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf0:	d103      	bne.n	8005bfa <xQueueGenericSend+0x182>
 8005bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bfa:	f001 fecb 	bl	8007994 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005bfe:	1d3a      	adds	r2, r7, #4
 8005c00:	f107 0314 	add.w	r3, r7, #20
 8005c04:	4611      	mov	r1, r2
 8005c06:	4618      	mov	r0, r3
 8005c08:	f000 fff8 	bl	8006bfc <xTaskCheckForTimeOut>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d124      	bne.n	8005c5c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005c12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c14:	f000 faa2 	bl	800615c <prvIsQueueFull>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d018      	beq.n	8005c50 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c20:	3310      	adds	r3, #16
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	4611      	mov	r1, r2
 8005c26:	4618      	mov	r0, r3
 8005c28:	f000 ff1e 	bl	8006a68 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005c2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c2e:	f000 fa2d 	bl	800608c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005c32:	f000 fd53 	bl	80066dc <xTaskResumeAll>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	f47f af7c 	bne.w	8005b36 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005c3e:	4b0c      	ldr	r3, [pc, #48]	; (8005c70 <xQueueGenericSend+0x1f8>)
 8005c40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c44:	601a      	str	r2, [r3, #0]
 8005c46:	f3bf 8f4f 	dsb	sy
 8005c4a:	f3bf 8f6f 	isb	sy
 8005c4e:	e772      	b.n	8005b36 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005c50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c52:	f000 fa1b 	bl	800608c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c56:	f000 fd41 	bl	80066dc <xTaskResumeAll>
 8005c5a:	e76c      	b.n	8005b36 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005c5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c5e:	f000 fa15 	bl	800608c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c62:	f000 fd3b 	bl	80066dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005c66:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3738      	adds	r7, #56	; 0x38
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	e000ed04 	.word	0xe000ed04

08005c74 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b090      	sub	sp, #64	; 0x40
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]
 8005c80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d10a      	bne.n	8005ca2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c90:	f383 8811 	msr	BASEPRI, r3
 8005c94:	f3bf 8f6f 	isb	sy
 8005c98:	f3bf 8f4f 	dsb	sy
 8005c9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005c9e:	bf00      	nop
 8005ca0:	e7fe      	b.n	8005ca0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d103      	bne.n	8005cb0 <xQueueGenericSendFromISR+0x3c>
 8005ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d101      	bne.n	8005cb4 <xQueueGenericSendFromISR+0x40>
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e000      	b.n	8005cb6 <xQueueGenericSendFromISR+0x42>
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d10a      	bne.n	8005cd0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cbe:	f383 8811 	msr	BASEPRI, r3
 8005cc2:	f3bf 8f6f 	isb	sy
 8005cc6:	f3bf 8f4f 	dsb	sy
 8005cca:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005ccc:	bf00      	nop
 8005cce:	e7fe      	b.n	8005cce <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d103      	bne.n	8005cde <xQueueGenericSendFromISR+0x6a>
 8005cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d101      	bne.n	8005ce2 <xQueueGenericSendFromISR+0x6e>
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e000      	b.n	8005ce4 <xQueueGenericSendFromISR+0x70>
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d10a      	bne.n	8005cfe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cec:	f383 8811 	msr	BASEPRI, r3
 8005cf0:	f3bf 8f6f 	isb	sy
 8005cf4:	f3bf 8f4f 	dsb	sy
 8005cf8:	623b      	str	r3, [r7, #32]
}
 8005cfa:	bf00      	nop
 8005cfc:	e7fe      	b.n	8005cfc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005cfe:	f001 fefb 	bl	8007af8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005d02:	f3ef 8211 	mrs	r2, BASEPRI
 8005d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d0a:	f383 8811 	msr	BASEPRI, r3
 8005d0e:	f3bf 8f6f 	isb	sy
 8005d12:	f3bf 8f4f 	dsb	sy
 8005d16:	61fa      	str	r2, [r7, #28]
 8005d18:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005d1a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d1c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d302      	bcc.n	8005d30 <xQueueGenericSendFromISR+0xbc>
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d12f      	bne.n	8005d90 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d40:	683a      	ldr	r2, [r7, #0]
 8005d42:	68b9      	ldr	r1, [r7, #8]
 8005d44:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005d46:	f000 f911 	bl	8005f6c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005d4a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d52:	d112      	bne.n	8005d7a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d016      	beq.n	8005d8a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d5e:	3324      	adds	r3, #36	; 0x24
 8005d60:	4618      	mov	r0, r3
 8005d62:	f000 fed1 	bl	8006b08 <xTaskRemoveFromEventList>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00e      	beq.n	8005d8a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00b      	beq.n	8005d8a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	601a      	str	r2, [r3, #0]
 8005d78:	e007      	b.n	8005d8a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005d7a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005d7e:	3301      	adds	r3, #1
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	b25a      	sxtb	r2, r3
 8005d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005d8e:	e001      	b.n	8005d94 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005d90:	2300      	movs	r3, #0
 8005d92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d96:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005d9e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3740      	adds	r7, #64	; 0x40
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
	...

08005dac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b08c      	sub	sp, #48	; 0x30
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005db8:	2300      	movs	r3, #0
 8005dba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d10a      	bne.n	8005ddc <xQueueReceive+0x30>
	__asm volatile
 8005dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dca:	f383 8811 	msr	BASEPRI, r3
 8005dce:	f3bf 8f6f 	isb	sy
 8005dd2:	f3bf 8f4f 	dsb	sy
 8005dd6:	623b      	str	r3, [r7, #32]
}
 8005dd8:	bf00      	nop
 8005dda:	e7fe      	b.n	8005dda <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d103      	bne.n	8005dea <xQueueReceive+0x3e>
 8005de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d101      	bne.n	8005dee <xQueueReceive+0x42>
 8005dea:	2301      	movs	r3, #1
 8005dec:	e000      	b.n	8005df0 <xQueueReceive+0x44>
 8005dee:	2300      	movs	r3, #0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d10a      	bne.n	8005e0a <xQueueReceive+0x5e>
	__asm volatile
 8005df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df8:	f383 8811 	msr	BASEPRI, r3
 8005dfc:	f3bf 8f6f 	isb	sy
 8005e00:	f3bf 8f4f 	dsb	sy
 8005e04:	61fb      	str	r3, [r7, #28]
}
 8005e06:	bf00      	nop
 8005e08:	e7fe      	b.n	8005e08 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e0a:	f001 f83b 	bl	8006e84 <xTaskGetSchedulerState>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d102      	bne.n	8005e1a <xQueueReceive+0x6e>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d101      	bne.n	8005e1e <xQueueReceive+0x72>
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e000      	b.n	8005e20 <xQueueReceive+0x74>
 8005e1e:	2300      	movs	r3, #0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d10a      	bne.n	8005e3a <xQueueReceive+0x8e>
	__asm volatile
 8005e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e28:	f383 8811 	msr	BASEPRI, r3
 8005e2c:	f3bf 8f6f 	isb	sy
 8005e30:	f3bf 8f4f 	dsb	sy
 8005e34:	61bb      	str	r3, [r7, #24]
}
 8005e36:	bf00      	nop
 8005e38:	e7fe      	b.n	8005e38 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e3a:	f001 fd7b 	bl	8007934 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e42:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d01f      	beq.n	8005e8a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005e4a:	68b9      	ldr	r1, [r7, #8]
 8005e4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e4e:	f000 f8f7 	bl	8006040 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e54:	1e5a      	subs	r2, r3, #1
 8005e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e58:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00f      	beq.n	8005e82 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e64:	3310      	adds	r3, #16
 8005e66:	4618      	mov	r0, r3
 8005e68:	f000 fe4e 	bl	8006b08 <xTaskRemoveFromEventList>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d007      	beq.n	8005e82 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005e72:	4b3d      	ldr	r3, [pc, #244]	; (8005f68 <xQueueReceive+0x1bc>)
 8005e74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e78:	601a      	str	r2, [r3, #0]
 8005e7a:	f3bf 8f4f 	dsb	sy
 8005e7e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005e82:	f001 fd87 	bl	8007994 <vPortExitCritical>
				return pdPASS;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e069      	b.n	8005f5e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d103      	bne.n	8005e98 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e90:	f001 fd80 	bl	8007994 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005e94:	2300      	movs	r3, #0
 8005e96:	e062      	b.n	8005f5e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d106      	bne.n	8005eac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e9e:	f107 0310 	add.w	r3, r7, #16
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f000 fe94 	bl	8006bd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005eac:	f001 fd72 	bl	8007994 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005eb0:	f000 fc06 	bl	80066c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005eb4:	f001 fd3e 	bl	8007934 <vPortEnterCritical>
 8005eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ebe:	b25b      	sxtb	r3, r3
 8005ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec4:	d103      	bne.n	8005ece <xQueueReceive+0x122>
 8005ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ed4:	b25b      	sxtb	r3, r3
 8005ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eda:	d103      	bne.n	8005ee4 <xQueueReceive+0x138>
 8005edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ee4:	f001 fd56 	bl	8007994 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ee8:	1d3a      	adds	r2, r7, #4
 8005eea:	f107 0310 	add.w	r3, r7, #16
 8005eee:	4611      	mov	r1, r2
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f000 fe83 	bl	8006bfc <xTaskCheckForTimeOut>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d123      	bne.n	8005f44 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005efc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005efe:	f000 f917 	bl	8006130 <prvIsQueueEmpty>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d017      	beq.n	8005f38 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0a:	3324      	adds	r3, #36	; 0x24
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	4611      	mov	r1, r2
 8005f10:	4618      	mov	r0, r3
 8005f12:	f000 fda9 	bl	8006a68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005f16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f18:	f000 f8b8 	bl	800608c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005f1c:	f000 fbde 	bl	80066dc <xTaskResumeAll>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d189      	bne.n	8005e3a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005f26:	4b10      	ldr	r3, [pc, #64]	; (8005f68 <xQueueReceive+0x1bc>)
 8005f28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f2c:	601a      	str	r2, [r3, #0]
 8005f2e:	f3bf 8f4f 	dsb	sy
 8005f32:	f3bf 8f6f 	isb	sy
 8005f36:	e780      	b.n	8005e3a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005f38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f3a:	f000 f8a7 	bl	800608c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f3e:	f000 fbcd 	bl	80066dc <xTaskResumeAll>
 8005f42:	e77a      	b.n	8005e3a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005f44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f46:	f000 f8a1 	bl	800608c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f4a:	f000 fbc7 	bl	80066dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f50:	f000 f8ee 	bl	8006130 <prvIsQueueEmpty>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	f43f af6f 	beq.w	8005e3a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005f5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3730      	adds	r7, #48	; 0x30
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	e000ed04 	.word	0xe000ed04

08005f6c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b086      	sub	sp, #24
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f80:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d10d      	bne.n	8005fa6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d14d      	bne.n	800602e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	4618      	mov	r0, r3
 8005f98:	f000 ff92 	bl	8006ec0 <xTaskPriorityDisinherit>
 8005f9c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	609a      	str	r2, [r3, #8]
 8005fa4:	e043      	b.n	800602e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d119      	bne.n	8005fe0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6858      	ldr	r0, [r3, #4]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	68b9      	ldr	r1, [r7, #8]
 8005fb8:	f001 ffec 	bl	8007f94 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	685a      	ldr	r2, [r3, #4]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc4:	441a      	add	r2, r3
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	685a      	ldr	r2, [r3, #4]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d32b      	bcc.n	800602e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	605a      	str	r2, [r3, #4]
 8005fde:	e026      	b.n	800602e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	68d8      	ldr	r0, [r3, #12]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe8:	461a      	mov	r2, r3
 8005fea:	68b9      	ldr	r1, [r7, #8]
 8005fec:	f001 ffd2 	bl	8007f94 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	68da      	ldr	r2, [r3, #12]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff8:	425b      	negs	r3, r3
 8005ffa:	441a      	add	r2, r3
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	68da      	ldr	r2, [r3, #12]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	429a      	cmp	r2, r3
 800600a:	d207      	bcs.n	800601c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	689a      	ldr	r2, [r3, #8]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006014:	425b      	negs	r3, r3
 8006016:	441a      	add	r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2b02      	cmp	r3, #2
 8006020:	d105      	bne.n	800602e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d002      	beq.n	800602e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	3b01      	subs	r3, #1
 800602c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	1c5a      	adds	r2, r3, #1
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006036:	697b      	ldr	r3, [r7, #20]
}
 8006038:	4618      	mov	r0, r3
 800603a:	3718      	adds	r7, #24
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604e:	2b00      	cmp	r3, #0
 8006050:	d018      	beq.n	8006084 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	68da      	ldr	r2, [r3, #12]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605a:	441a      	add	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	68da      	ldr	r2, [r3, #12]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	429a      	cmp	r2, r3
 800606a:	d303      	bcc.n	8006074 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	68d9      	ldr	r1, [r3, #12]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607c:	461a      	mov	r2, r3
 800607e:	6838      	ldr	r0, [r7, #0]
 8006080:	f001 ff88 	bl	8007f94 <memcpy>
	}
}
 8006084:	bf00      	nop
 8006086:	3708      	adds	r7, #8
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006094:	f001 fc4e 	bl	8007934 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800609e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80060a0:	e011      	b.n	80060c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d012      	beq.n	80060d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	3324      	adds	r3, #36	; 0x24
 80060ae:	4618      	mov	r0, r3
 80060b0:	f000 fd2a 	bl	8006b08 <xTaskRemoveFromEventList>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d001      	beq.n	80060be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80060ba:	f000 fe01 	bl	8006cc0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80060be:	7bfb      	ldrb	r3, [r7, #15]
 80060c0:	3b01      	subs	r3, #1
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80060c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	dce9      	bgt.n	80060a2 <prvUnlockQueue+0x16>
 80060ce:	e000      	b.n	80060d2 <prvUnlockQueue+0x46>
					break;
 80060d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	22ff      	movs	r2, #255	; 0xff
 80060d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80060da:	f001 fc5b 	bl	8007994 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80060de:	f001 fc29 	bl	8007934 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80060ea:	e011      	b.n	8006110 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d012      	beq.n	800611a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	3310      	adds	r3, #16
 80060f8:	4618      	mov	r0, r3
 80060fa:	f000 fd05 	bl	8006b08 <xTaskRemoveFromEventList>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d001      	beq.n	8006108 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006104:	f000 fddc 	bl	8006cc0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006108:	7bbb      	ldrb	r3, [r7, #14]
 800610a:	3b01      	subs	r3, #1
 800610c:	b2db      	uxtb	r3, r3
 800610e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006110:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006114:	2b00      	cmp	r3, #0
 8006116:	dce9      	bgt.n	80060ec <prvUnlockQueue+0x60>
 8006118:	e000      	b.n	800611c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800611a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	22ff      	movs	r2, #255	; 0xff
 8006120:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006124:	f001 fc36 	bl	8007994 <vPortExitCritical>
}
 8006128:	bf00      	nop
 800612a:	3710      	adds	r7, #16
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006138:	f001 fbfc 	bl	8007934 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006140:	2b00      	cmp	r3, #0
 8006142:	d102      	bne.n	800614a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006144:	2301      	movs	r3, #1
 8006146:	60fb      	str	r3, [r7, #12]
 8006148:	e001      	b.n	800614e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800614a:	2300      	movs	r3, #0
 800614c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800614e:	f001 fc21 	bl	8007994 <vPortExitCritical>

	return xReturn;
 8006152:	68fb      	ldr	r3, [r7, #12]
}
 8006154:	4618      	mov	r0, r3
 8006156:	3710      	adds	r7, #16
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006164:	f001 fbe6 	bl	8007934 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006170:	429a      	cmp	r2, r3
 8006172:	d102      	bne.n	800617a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006174:	2301      	movs	r3, #1
 8006176:	60fb      	str	r3, [r7, #12]
 8006178:	e001      	b.n	800617e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800617a:	2300      	movs	r3, #0
 800617c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800617e:	f001 fc09 	bl	8007994 <vPortExitCritical>

	return xReturn;
 8006182:	68fb      	ldr	r3, [r7, #12]
}
 8006184:	4618      	mov	r0, r3
 8006186:	3710      	adds	r7, #16
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006196:	2300      	movs	r3, #0
 8006198:	60fb      	str	r3, [r7, #12]
 800619a:	e014      	b.n	80061c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800619c:	4a0f      	ldr	r2, [pc, #60]	; (80061dc <vQueueAddToRegistry+0x50>)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10b      	bne.n	80061c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80061a8:	490c      	ldr	r1, [pc, #48]	; (80061dc <vQueueAddToRegistry+0x50>)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	683a      	ldr	r2, [r7, #0]
 80061ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80061b2:	4a0a      	ldr	r2, [pc, #40]	; (80061dc <vQueueAddToRegistry+0x50>)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	00db      	lsls	r3, r3, #3
 80061b8:	4413      	add	r3, r2
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80061be:	e006      	b.n	80061ce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	3301      	adds	r3, #1
 80061c4:	60fb      	str	r3, [r7, #12]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2b07      	cmp	r3, #7
 80061ca:	d9e7      	bls.n	800619c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80061cc:	bf00      	nop
 80061ce:	bf00      	nop
 80061d0:	3714      	adds	r7, #20
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	20000a1c 	.word	0x20000a1c

080061e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b086      	sub	sp, #24
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80061f0:	f001 fba0 	bl	8007934 <vPortEnterCritical>
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061fa:	b25b      	sxtb	r3, r3
 80061fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006200:	d103      	bne.n	800620a <vQueueWaitForMessageRestricted+0x2a>
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006210:	b25b      	sxtb	r3, r3
 8006212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006216:	d103      	bne.n	8006220 <vQueueWaitForMessageRestricted+0x40>
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006220:	f001 fbb8 	bl	8007994 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006228:	2b00      	cmp	r3, #0
 800622a:	d106      	bne.n	800623a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	3324      	adds	r3, #36	; 0x24
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	68b9      	ldr	r1, [r7, #8]
 8006234:	4618      	mov	r0, r3
 8006236:	f000 fc3b 	bl	8006ab0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800623a:	6978      	ldr	r0, [r7, #20]
 800623c:	f7ff ff26 	bl	800608c <prvUnlockQueue>
	}
 8006240:	bf00      	nop
 8006242:	3718      	adds	r7, #24
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006248:	b580      	push	{r7, lr}
 800624a:	b08e      	sub	sp, #56	; 0x38
 800624c:	af04      	add	r7, sp, #16
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]
 8006254:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006258:	2b00      	cmp	r3, #0
 800625a:	d10a      	bne.n	8006272 <xTaskCreateStatic+0x2a>
	__asm volatile
 800625c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006260:	f383 8811 	msr	BASEPRI, r3
 8006264:	f3bf 8f6f 	isb	sy
 8006268:	f3bf 8f4f 	dsb	sy
 800626c:	623b      	str	r3, [r7, #32]
}
 800626e:	bf00      	nop
 8006270:	e7fe      	b.n	8006270 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006274:	2b00      	cmp	r3, #0
 8006276:	d10a      	bne.n	800628e <xTaskCreateStatic+0x46>
	__asm volatile
 8006278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800627c:	f383 8811 	msr	BASEPRI, r3
 8006280:	f3bf 8f6f 	isb	sy
 8006284:	f3bf 8f4f 	dsb	sy
 8006288:	61fb      	str	r3, [r7, #28]
}
 800628a:	bf00      	nop
 800628c:	e7fe      	b.n	800628c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800628e:	235c      	movs	r3, #92	; 0x5c
 8006290:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	2b5c      	cmp	r3, #92	; 0x5c
 8006296:	d00a      	beq.n	80062ae <xTaskCreateStatic+0x66>
	__asm volatile
 8006298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629c:	f383 8811 	msr	BASEPRI, r3
 80062a0:	f3bf 8f6f 	isb	sy
 80062a4:	f3bf 8f4f 	dsb	sy
 80062a8:	61bb      	str	r3, [r7, #24]
}
 80062aa:	bf00      	nop
 80062ac:	e7fe      	b.n	80062ac <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80062ae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80062b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d01e      	beq.n	80062f4 <xTaskCreateStatic+0xac>
 80062b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d01b      	beq.n	80062f4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80062bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062be:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80062c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062c4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80062c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c8:	2202      	movs	r2, #2
 80062ca:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80062ce:	2300      	movs	r3, #0
 80062d0:	9303      	str	r3, [sp, #12]
 80062d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d4:	9302      	str	r3, [sp, #8]
 80062d6:	f107 0314 	add.w	r3, r7, #20
 80062da:	9301      	str	r3, [sp, #4]
 80062dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062de:	9300      	str	r3, [sp, #0]
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	68b9      	ldr	r1, [r7, #8]
 80062e6:	68f8      	ldr	r0, [r7, #12]
 80062e8:	f000 f850 	bl	800638c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80062ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062ee:	f000 f8dd 	bl	80064ac <prvAddNewTaskToReadyList>
 80062f2:	e001      	b.n	80062f8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80062f4:	2300      	movs	r3, #0
 80062f6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80062f8:	697b      	ldr	r3, [r7, #20]
	}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3728      	adds	r7, #40	; 0x28
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}

08006302 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006302:	b580      	push	{r7, lr}
 8006304:	b08c      	sub	sp, #48	; 0x30
 8006306:	af04      	add	r7, sp, #16
 8006308:	60f8      	str	r0, [r7, #12]
 800630a:	60b9      	str	r1, [r7, #8]
 800630c:	603b      	str	r3, [r7, #0]
 800630e:	4613      	mov	r3, r2
 8006310:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006312:	88fb      	ldrh	r3, [r7, #6]
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	4618      	mov	r0, r3
 8006318:	f001 fc2e 	bl	8007b78 <pvPortMalloc>
 800631c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d00e      	beq.n	8006342 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006324:	205c      	movs	r0, #92	; 0x5c
 8006326:	f001 fc27 	bl	8007b78 <pvPortMalloc>
 800632a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d003      	beq.n	800633a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	697a      	ldr	r2, [r7, #20]
 8006336:	631a      	str	r2, [r3, #48]	; 0x30
 8006338:	e005      	b.n	8006346 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800633a:	6978      	ldr	r0, [r7, #20]
 800633c:	f001 fce8 	bl	8007d10 <vPortFree>
 8006340:	e001      	b.n	8006346 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006342:	2300      	movs	r3, #0
 8006344:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d017      	beq.n	800637c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006354:	88fa      	ldrh	r2, [r7, #6]
 8006356:	2300      	movs	r3, #0
 8006358:	9303      	str	r3, [sp, #12]
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	9302      	str	r3, [sp, #8]
 800635e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006360:	9301      	str	r3, [sp, #4]
 8006362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006364:	9300      	str	r3, [sp, #0]
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	68b9      	ldr	r1, [r7, #8]
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	f000 f80e 	bl	800638c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006370:	69f8      	ldr	r0, [r7, #28]
 8006372:	f000 f89b 	bl	80064ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006376:	2301      	movs	r3, #1
 8006378:	61bb      	str	r3, [r7, #24]
 800637a:	e002      	b.n	8006382 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800637c:	f04f 33ff 	mov.w	r3, #4294967295
 8006380:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006382:	69bb      	ldr	r3, [r7, #24]
	}
 8006384:	4618      	mov	r0, r3
 8006386:	3720      	adds	r7, #32
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b088      	sub	sp, #32
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	607a      	str	r2, [r7, #4]
 8006398:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800639a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	461a      	mov	r2, r3
 80063a4:	21a5      	movs	r1, #165	; 0xa5
 80063a6:	f001 fe03 	bl	8007fb0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80063aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80063b4:	3b01      	subs	r3, #1
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	4413      	add	r3, r2
 80063ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	f023 0307 	bic.w	r3, r3, #7
 80063c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	f003 0307 	and.w	r3, r3, #7
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00a      	beq.n	80063e4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80063ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d2:	f383 8811 	msr	BASEPRI, r3
 80063d6:	f3bf 8f6f 	isb	sy
 80063da:	f3bf 8f4f 	dsb	sy
 80063de:	617b      	str	r3, [r7, #20]
}
 80063e0:	bf00      	nop
 80063e2:	e7fe      	b.n	80063e2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d01f      	beq.n	800642a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063ea:	2300      	movs	r3, #0
 80063ec:	61fb      	str	r3, [r7, #28]
 80063ee:	e012      	b.n	8006416 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80063f0:	68ba      	ldr	r2, [r7, #8]
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	4413      	add	r3, r2
 80063f6:	7819      	ldrb	r1, [r3, #0]
 80063f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	4413      	add	r3, r2
 80063fe:	3334      	adds	r3, #52	; 0x34
 8006400:	460a      	mov	r2, r1
 8006402:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	4413      	add	r3, r2
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d006      	beq.n	800641e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	3301      	adds	r3, #1
 8006414:	61fb      	str	r3, [r7, #28]
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	2b0f      	cmp	r3, #15
 800641a:	d9e9      	bls.n	80063f0 <prvInitialiseNewTask+0x64>
 800641c:	e000      	b.n	8006420 <prvInitialiseNewTask+0x94>
			{
				break;
 800641e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006422:	2200      	movs	r2, #0
 8006424:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006428:	e003      	b.n	8006432 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800642a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642c:	2200      	movs	r2, #0
 800642e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006434:	2b37      	cmp	r3, #55	; 0x37
 8006436:	d901      	bls.n	800643c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006438:	2337      	movs	r3, #55	; 0x37
 800643a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800643c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006440:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006444:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006446:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644a:	2200      	movs	r2, #0
 800644c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800644e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006450:	3304      	adds	r3, #4
 8006452:	4618      	mov	r0, r3
 8006454:	f7ff f978 	bl	8005748 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645a:	3318      	adds	r3, #24
 800645c:	4618      	mov	r0, r3
 800645e:	f7ff f973 	bl	8005748 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006466:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800646e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006470:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006474:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006476:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647a:	2200      	movs	r2, #0
 800647c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800647e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006480:	2200      	movs	r2, #0
 8006482:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006486:	683a      	ldr	r2, [r7, #0]
 8006488:	68f9      	ldr	r1, [r7, #12]
 800648a:	69b8      	ldr	r0, [r7, #24]
 800648c:	f001 f928 	bl	80076e0 <pxPortInitialiseStack>
 8006490:	4602      	mov	r2, r0
 8006492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006494:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006498:	2b00      	cmp	r3, #0
 800649a:	d002      	beq.n	80064a2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800649c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064a2:	bf00      	nop
 80064a4:	3720      	adds	r7, #32
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
	...

080064ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b082      	sub	sp, #8
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80064b4:	f001 fa3e 	bl	8007934 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80064b8:	4b2d      	ldr	r3, [pc, #180]	; (8006570 <prvAddNewTaskToReadyList+0xc4>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	3301      	adds	r3, #1
 80064be:	4a2c      	ldr	r2, [pc, #176]	; (8006570 <prvAddNewTaskToReadyList+0xc4>)
 80064c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80064c2:	4b2c      	ldr	r3, [pc, #176]	; (8006574 <prvAddNewTaskToReadyList+0xc8>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d109      	bne.n	80064de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80064ca:	4a2a      	ldr	r2, [pc, #168]	; (8006574 <prvAddNewTaskToReadyList+0xc8>)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80064d0:	4b27      	ldr	r3, [pc, #156]	; (8006570 <prvAddNewTaskToReadyList+0xc4>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d110      	bne.n	80064fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80064d8:	f000 fc16 	bl	8006d08 <prvInitialiseTaskLists>
 80064dc:	e00d      	b.n	80064fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80064de:	4b26      	ldr	r3, [pc, #152]	; (8006578 <prvAddNewTaskToReadyList+0xcc>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d109      	bne.n	80064fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80064e6:	4b23      	ldr	r3, [pc, #140]	; (8006574 <prvAddNewTaskToReadyList+0xc8>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d802      	bhi.n	80064fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80064f4:	4a1f      	ldr	r2, [pc, #124]	; (8006574 <prvAddNewTaskToReadyList+0xc8>)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80064fa:	4b20      	ldr	r3, [pc, #128]	; (800657c <prvAddNewTaskToReadyList+0xd0>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	3301      	adds	r3, #1
 8006500:	4a1e      	ldr	r2, [pc, #120]	; (800657c <prvAddNewTaskToReadyList+0xd0>)
 8006502:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006504:	4b1d      	ldr	r3, [pc, #116]	; (800657c <prvAddNewTaskToReadyList+0xd0>)
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006510:	4b1b      	ldr	r3, [pc, #108]	; (8006580 <prvAddNewTaskToReadyList+0xd4>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	429a      	cmp	r2, r3
 8006516:	d903      	bls.n	8006520 <prvAddNewTaskToReadyList+0x74>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800651c:	4a18      	ldr	r2, [pc, #96]	; (8006580 <prvAddNewTaskToReadyList+0xd4>)
 800651e:	6013      	str	r3, [r2, #0]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006524:	4613      	mov	r3, r2
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	4413      	add	r3, r2
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	4a15      	ldr	r2, [pc, #84]	; (8006584 <prvAddNewTaskToReadyList+0xd8>)
 800652e:	441a      	add	r2, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	3304      	adds	r3, #4
 8006534:	4619      	mov	r1, r3
 8006536:	4610      	mov	r0, r2
 8006538:	f7ff f913 	bl	8005762 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800653c:	f001 fa2a 	bl	8007994 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006540:	4b0d      	ldr	r3, [pc, #52]	; (8006578 <prvAddNewTaskToReadyList+0xcc>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00e      	beq.n	8006566 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006548:	4b0a      	ldr	r3, [pc, #40]	; (8006574 <prvAddNewTaskToReadyList+0xc8>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006552:	429a      	cmp	r2, r3
 8006554:	d207      	bcs.n	8006566 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006556:	4b0c      	ldr	r3, [pc, #48]	; (8006588 <prvAddNewTaskToReadyList+0xdc>)
 8006558:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800655c:	601a      	str	r2, [r3, #0]
 800655e:	f3bf 8f4f 	dsb	sy
 8006562:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006566:	bf00      	nop
 8006568:	3708      	adds	r7, #8
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	20000f30 	.word	0x20000f30
 8006574:	20000a5c 	.word	0x20000a5c
 8006578:	20000f3c 	.word	0x20000f3c
 800657c:	20000f4c 	.word	0x20000f4c
 8006580:	20000f38 	.word	0x20000f38
 8006584:	20000a60 	.word	0x20000a60
 8006588:	e000ed04 	.word	0xe000ed04

0800658c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006594:	2300      	movs	r3, #0
 8006596:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d017      	beq.n	80065ce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800659e:	4b13      	ldr	r3, [pc, #76]	; (80065ec <vTaskDelay+0x60>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00a      	beq.n	80065bc <vTaskDelay+0x30>
	__asm volatile
 80065a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065aa:	f383 8811 	msr	BASEPRI, r3
 80065ae:	f3bf 8f6f 	isb	sy
 80065b2:	f3bf 8f4f 	dsb	sy
 80065b6:	60bb      	str	r3, [r7, #8]
}
 80065b8:	bf00      	nop
 80065ba:	e7fe      	b.n	80065ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80065bc:	f000 f880 	bl	80066c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80065c0:	2100      	movs	r1, #0
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 fcea 	bl	8006f9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80065c8:	f000 f888 	bl	80066dc <xTaskResumeAll>
 80065cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d107      	bne.n	80065e4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80065d4:	4b06      	ldr	r3, [pc, #24]	; (80065f0 <vTaskDelay+0x64>)
 80065d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065da:	601a      	str	r2, [r3, #0]
 80065dc:	f3bf 8f4f 	dsb	sy
 80065e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80065e4:	bf00      	nop
 80065e6:	3710      	adds	r7, #16
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	20000f58 	.word	0x20000f58
 80065f0:	e000ed04 	.word	0xe000ed04

080065f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b08a      	sub	sp, #40	; 0x28
 80065f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80065fa:	2300      	movs	r3, #0
 80065fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80065fe:	2300      	movs	r3, #0
 8006600:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006602:	463a      	mov	r2, r7
 8006604:	1d39      	adds	r1, r7, #4
 8006606:	f107 0308 	add.w	r3, r7, #8
 800660a:	4618      	mov	r0, r3
 800660c:	f7ff f848 	bl	80056a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006610:	6839      	ldr	r1, [r7, #0]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	68ba      	ldr	r2, [r7, #8]
 8006616:	9202      	str	r2, [sp, #8]
 8006618:	9301      	str	r3, [sp, #4]
 800661a:	2300      	movs	r3, #0
 800661c:	9300      	str	r3, [sp, #0]
 800661e:	2300      	movs	r3, #0
 8006620:	460a      	mov	r2, r1
 8006622:	4921      	ldr	r1, [pc, #132]	; (80066a8 <vTaskStartScheduler+0xb4>)
 8006624:	4821      	ldr	r0, [pc, #132]	; (80066ac <vTaskStartScheduler+0xb8>)
 8006626:	f7ff fe0f 	bl	8006248 <xTaskCreateStatic>
 800662a:	4603      	mov	r3, r0
 800662c:	4a20      	ldr	r2, [pc, #128]	; (80066b0 <vTaskStartScheduler+0xbc>)
 800662e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006630:	4b1f      	ldr	r3, [pc, #124]	; (80066b0 <vTaskStartScheduler+0xbc>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d002      	beq.n	800663e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006638:	2301      	movs	r3, #1
 800663a:	617b      	str	r3, [r7, #20]
 800663c:	e001      	b.n	8006642 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800663e:	2300      	movs	r3, #0
 8006640:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	2b01      	cmp	r3, #1
 8006646:	d102      	bne.n	800664e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006648:	f000 fcfc 	bl	8007044 <xTimerCreateTimerTask>
 800664c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	2b01      	cmp	r3, #1
 8006652:	d116      	bne.n	8006682 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006658:	f383 8811 	msr	BASEPRI, r3
 800665c:	f3bf 8f6f 	isb	sy
 8006660:	f3bf 8f4f 	dsb	sy
 8006664:	613b      	str	r3, [r7, #16]
}
 8006666:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006668:	4b12      	ldr	r3, [pc, #72]	; (80066b4 <vTaskStartScheduler+0xc0>)
 800666a:	f04f 32ff 	mov.w	r2, #4294967295
 800666e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006670:	4b11      	ldr	r3, [pc, #68]	; (80066b8 <vTaskStartScheduler+0xc4>)
 8006672:	2201      	movs	r2, #1
 8006674:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006676:	4b11      	ldr	r3, [pc, #68]	; (80066bc <vTaskStartScheduler+0xc8>)
 8006678:	2200      	movs	r2, #0
 800667a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800667c:	f001 f8b8 	bl	80077f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006680:	e00e      	b.n	80066a0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006688:	d10a      	bne.n	80066a0 <vTaskStartScheduler+0xac>
	__asm volatile
 800668a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800668e:	f383 8811 	msr	BASEPRI, r3
 8006692:	f3bf 8f6f 	isb	sy
 8006696:	f3bf 8f4f 	dsb	sy
 800669a:	60fb      	str	r3, [r7, #12]
}
 800669c:	bf00      	nop
 800669e:	e7fe      	b.n	800669e <vTaskStartScheduler+0xaa>
}
 80066a0:	bf00      	nop
 80066a2:	3718      	adds	r7, #24
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	08007fe4 	.word	0x08007fe4
 80066ac:	08006cd9 	.word	0x08006cd9
 80066b0:	20000f54 	.word	0x20000f54
 80066b4:	20000f50 	.word	0x20000f50
 80066b8:	20000f3c 	.word	0x20000f3c
 80066bc:	20000f34 	.word	0x20000f34

080066c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80066c0:	b480      	push	{r7}
 80066c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80066c4:	4b04      	ldr	r3, [pc, #16]	; (80066d8 <vTaskSuspendAll+0x18>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	3301      	adds	r3, #1
 80066ca:	4a03      	ldr	r2, [pc, #12]	; (80066d8 <vTaskSuspendAll+0x18>)
 80066cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80066ce:	bf00      	nop
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr
 80066d8:	20000f58 	.word	0x20000f58

080066dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80066e2:	2300      	movs	r3, #0
 80066e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80066e6:	2300      	movs	r3, #0
 80066e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80066ea:	4b42      	ldr	r3, [pc, #264]	; (80067f4 <xTaskResumeAll+0x118>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d10a      	bne.n	8006708 <xTaskResumeAll+0x2c>
	__asm volatile
 80066f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f6:	f383 8811 	msr	BASEPRI, r3
 80066fa:	f3bf 8f6f 	isb	sy
 80066fe:	f3bf 8f4f 	dsb	sy
 8006702:	603b      	str	r3, [r7, #0]
}
 8006704:	bf00      	nop
 8006706:	e7fe      	b.n	8006706 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006708:	f001 f914 	bl	8007934 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800670c:	4b39      	ldr	r3, [pc, #228]	; (80067f4 <xTaskResumeAll+0x118>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	3b01      	subs	r3, #1
 8006712:	4a38      	ldr	r2, [pc, #224]	; (80067f4 <xTaskResumeAll+0x118>)
 8006714:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006716:	4b37      	ldr	r3, [pc, #220]	; (80067f4 <xTaskResumeAll+0x118>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d162      	bne.n	80067e4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800671e:	4b36      	ldr	r3, [pc, #216]	; (80067f8 <xTaskResumeAll+0x11c>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d05e      	beq.n	80067e4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006726:	e02f      	b.n	8006788 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006728:	4b34      	ldr	r3, [pc, #208]	; (80067fc <xTaskResumeAll+0x120>)
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	3318      	adds	r3, #24
 8006734:	4618      	mov	r0, r3
 8006736:	f7ff f871 	bl	800581c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	3304      	adds	r3, #4
 800673e:	4618      	mov	r0, r3
 8006740:	f7ff f86c 	bl	800581c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006748:	4b2d      	ldr	r3, [pc, #180]	; (8006800 <xTaskResumeAll+0x124>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	429a      	cmp	r2, r3
 800674e:	d903      	bls.n	8006758 <xTaskResumeAll+0x7c>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006754:	4a2a      	ldr	r2, [pc, #168]	; (8006800 <xTaskResumeAll+0x124>)
 8006756:	6013      	str	r3, [r2, #0]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800675c:	4613      	mov	r3, r2
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	4413      	add	r3, r2
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	4a27      	ldr	r2, [pc, #156]	; (8006804 <xTaskResumeAll+0x128>)
 8006766:	441a      	add	r2, r3
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	3304      	adds	r3, #4
 800676c:	4619      	mov	r1, r3
 800676e:	4610      	mov	r0, r2
 8006770:	f7fe fff7 	bl	8005762 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006778:	4b23      	ldr	r3, [pc, #140]	; (8006808 <xTaskResumeAll+0x12c>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677e:	429a      	cmp	r2, r3
 8006780:	d302      	bcc.n	8006788 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006782:	4b22      	ldr	r3, [pc, #136]	; (800680c <xTaskResumeAll+0x130>)
 8006784:	2201      	movs	r2, #1
 8006786:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006788:	4b1c      	ldr	r3, [pc, #112]	; (80067fc <xTaskResumeAll+0x120>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d1cb      	bne.n	8006728 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d001      	beq.n	800679a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006796:	f000 fb55 	bl	8006e44 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800679a:	4b1d      	ldr	r3, [pc, #116]	; (8006810 <xTaskResumeAll+0x134>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d010      	beq.n	80067c8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80067a6:	f000 f847 	bl	8006838 <xTaskIncrementTick>
 80067aa:	4603      	mov	r3, r0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d002      	beq.n	80067b6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80067b0:	4b16      	ldr	r3, [pc, #88]	; (800680c <xTaskResumeAll+0x130>)
 80067b2:	2201      	movs	r2, #1
 80067b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	3b01      	subs	r3, #1
 80067ba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1f1      	bne.n	80067a6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80067c2:	4b13      	ldr	r3, [pc, #76]	; (8006810 <xTaskResumeAll+0x134>)
 80067c4:	2200      	movs	r2, #0
 80067c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80067c8:	4b10      	ldr	r3, [pc, #64]	; (800680c <xTaskResumeAll+0x130>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d009      	beq.n	80067e4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80067d0:	2301      	movs	r3, #1
 80067d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80067d4:	4b0f      	ldr	r3, [pc, #60]	; (8006814 <xTaskResumeAll+0x138>)
 80067d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067da:	601a      	str	r2, [r3, #0]
 80067dc:	f3bf 8f4f 	dsb	sy
 80067e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80067e4:	f001 f8d6 	bl	8007994 <vPortExitCritical>

	return xAlreadyYielded;
 80067e8:	68bb      	ldr	r3, [r7, #8]
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3710      	adds	r7, #16
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	bf00      	nop
 80067f4:	20000f58 	.word	0x20000f58
 80067f8:	20000f30 	.word	0x20000f30
 80067fc:	20000ef0 	.word	0x20000ef0
 8006800:	20000f38 	.word	0x20000f38
 8006804:	20000a60 	.word	0x20000a60
 8006808:	20000a5c 	.word	0x20000a5c
 800680c:	20000f44 	.word	0x20000f44
 8006810:	20000f40 	.word	0x20000f40
 8006814:	e000ed04 	.word	0xe000ed04

08006818 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800681e:	4b05      	ldr	r3, [pc, #20]	; (8006834 <xTaskGetTickCount+0x1c>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006824:	687b      	ldr	r3, [r7, #4]
}
 8006826:	4618      	mov	r0, r3
 8006828:	370c      	adds	r7, #12
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	20000f34 	.word	0x20000f34

08006838 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b086      	sub	sp, #24
 800683c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800683e:	2300      	movs	r3, #0
 8006840:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006842:	4b4f      	ldr	r3, [pc, #316]	; (8006980 <xTaskIncrementTick+0x148>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	f040 808f 	bne.w	800696a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800684c:	4b4d      	ldr	r3, [pc, #308]	; (8006984 <xTaskIncrementTick+0x14c>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	3301      	adds	r3, #1
 8006852:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006854:	4a4b      	ldr	r2, [pc, #300]	; (8006984 <xTaskIncrementTick+0x14c>)
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d120      	bne.n	80068a2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006860:	4b49      	ldr	r3, [pc, #292]	; (8006988 <xTaskIncrementTick+0x150>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d00a      	beq.n	8006880 <xTaskIncrementTick+0x48>
	__asm volatile
 800686a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800686e:	f383 8811 	msr	BASEPRI, r3
 8006872:	f3bf 8f6f 	isb	sy
 8006876:	f3bf 8f4f 	dsb	sy
 800687a:	603b      	str	r3, [r7, #0]
}
 800687c:	bf00      	nop
 800687e:	e7fe      	b.n	800687e <xTaskIncrementTick+0x46>
 8006880:	4b41      	ldr	r3, [pc, #260]	; (8006988 <xTaskIncrementTick+0x150>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	60fb      	str	r3, [r7, #12]
 8006886:	4b41      	ldr	r3, [pc, #260]	; (800698c <xTaskIncrementTick+0x154>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a3f      	ldr	r2, [pc, #252]	; (8006988 <xTaskIncrementTick+0x150>)
 800688c:	6013      	str	r3, [r2, #0]
 800688e:	4a3f      	ldr	r2, [pc, #252]	; (800698c <xTaskIncrementTick+0x154>)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6013      	str	r3, [r2, #0]
 8006894:	4b3e      	ldr	r3, [pc, #248]	; (8006990 <xTaskIncrementTick+0x158>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	3301      	adds	r3, #1
 800689a:	4a3d      	ldr	r2, [pc, #244]	; (8006990 <xTaskIncrementTick+0x158>)
 800689c:	6013      	str	r3, [r2, #0]
 800689e:	f000 fad1 	bl	8006e44 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80068a2:	4b3c      	ldr	r3, [pc, #240]	; (8006994 <xTaskIncrementTick+0x15c>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	693a      	ldr	r2, [r7, #16]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d349      	bcc.n	8006940 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068ac:	4b36      	ldr	r3, [pc, #216]	; (8006988 <xTaskIncrementTick+0x150>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d104      	bne.n	80068c0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068b6:	4b37      	ldr	r3, [pc, #220]	; (8006994 <xTaskIncrementTick+0x15c>)
 80068b8:	f04f 32ff 	mov.w	r2, #4294967295
 80068bc:	601a      	str	r2, [r3, #0]
					break;
 80068be:	e03f      	b.n	8006940 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068c0:	4b31      	ldr	r3, [pc, #196]	; (8006988 <xTaskIncrementTick+0x150>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80068d0:	693a      	ldr	r2, [r7, #16]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d203      	bcs.n	80068e0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80068d8:	4a2e      	ldr	r2, [pc, #184]	; (8006994 <xTaskIncrementTick+0x15c>)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80068de:	e02f      	b.n	8006940 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	3304      	adds	r3, #4
 80068e4:	4618      	mov	r0, r3
 80068e6:	f7fe ff99 	bl	800581c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d004      	beq.n	80068fc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	3318      	adds	r3, #24
 80068f6:	4618      	mov	r0, r3
 80068f8:	f7fe ff90 	bl	800581c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006900:	4b25      	ldr	r3, [pc, #148]	; (8006998 <xTaskIncrementTick+0x160>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	429a      	cmp	r2, r3
 8006906:	d903      	bls.n	8006910 <xTaskIncrementTick+0xd8>
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800690c:	4a22      	ldr	r2, [pc, #136]	; (8006998 <xTaskIncrementTick+0x160>)
 800690e:	6013      	str	r3, [r2, #0]
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006914:	4613      	mov	r3, r2
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	4413      	add	r3, r2
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	4a1f      	ldr	r2, [pc, #124]	; (800699c <xTaskIncrementTick+0x164>)
 800691e:	441a      	add	r2, r3
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	3304      	adds	r3, #4
 8006924:	4619      	mov	r1, r3
 8006926:	4610      	mov	r0, r2
 8006928:	f7fe ff1b 	bl	8005762 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006930:	4b1b      	ldr	r3, [pc, #108]	; (80069a0 <xTaskIncrementTick+0x168>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006936:	429a      	cmp	r2, r3
 8006938:	d3b8      	bcc.n	80068ac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800693a:	2301      	movs	r3, #1
 800693c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800693e:	e7b5      	b.n	80068ac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006940:	4b17      	ldr	r3, [pc, #92]	; (80069a0 <xTaskIncrementTick+0x168>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006946:	4915      	ldr	r1, [pc, #84]	; (800699c <xTaskIncrementTick+0x164>)
 8006948:	4613      	mov	r3, r2
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	4413      	add	r3, r2
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	440b      	add	r3, r1
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2b01      	cmp	r3, #1
 8006956:	d901      	bls.n	800695c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006958:	2301      	movs	r3, #1
 800695a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800695c:	4b11      	ldr	r3, [pc, #68]	; (80069a4 <xTaskIncrementTick+0x16c>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d007      	beq.n	8006974 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006964:	2301      	movs	r3, #1
 8006966:	617b      	str	r3, [r7, #20]
 8006968:	e004      	b.n	8006974 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800696a:	4b0f      	ldr	r3, [pc, #60]	; (80069a8 <xTaskIncrementTick+0x170>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	3301      	adds	r3, #1
 8006970:	4a0d      	ldr	r2, [pc, #52]	; (80069a8 <xTaskIncrementTick+0x170>)
 8006972:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006974:	697b      	ldr	r3, [r7, #20]
}
 8006976:	4618      	mov	r0, r3
 8006978:	3718      	adds	r7, #24
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop
 8006980:	20000f58 	.word	0x20000f58
 8006984:	20000f34 	.word	0x20000f34
 8006988:	20000ee8 	.word	0x20000ee8
 800698c:	20000eec 	.word	0x20000eec
 8006990:	20000f48 	.word	0x20000f48
 8006994:	20000f50 	.word	0x20000f50
 8006998:	20000f38 	.word	0x20000f38
 800699c:	20000a60 	.word	0x20000a60
 80069a0:	20000a5c 	.word	0x20000a5c
 80069a4:	20000f44 	.word	0x20000f44
 80069a8:	20000f40 	.word	0x20000f40

080069ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80069ac:	b480      	push	{r7}
 80069ae:	b085      	sub	sp, #20
 80069b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80069b2:	4b28      	ldr	r3, [pc, #160]	; (8006a54 <vTaskSwitchContext+0xa8>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d003      	beq.n	80069c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80069ba:	4b27      	ldr	r3, [pc, #156]	; (8006a58 <vTaskSwitchContext+0xac>)
 80069bc:	2201      	movs	r2, #1
 80069be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80069c0:	e041      	b.n	8006a46 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80069c2:	4b25      	ldr	r3, [pc, #148]	; (8006a58 <vTaskSwitchContext+0xac>)
 80069c4:	2200      	movs	r2, #0
 80069c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069c8:	4b24      	ldr	r3, [pc, #144]	; (8006a5c <vTaskSwitchContext+0xb0>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	60fb      	str	r3, [r7, #12]
 80069ce:	e010      	b.n	80069f2 <vTaskSwitchContext+0x46>
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d10a      	bne.n	80069ec <vTaskSwitchContext+0x40>
	__asm volatile
 80069d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069da:	f383 8811 	msr	BASEPRI, r3
 80069de:	f3bf 8f6f 	isb	sy
 80069e2:	f3bf 8f4f 	dsb	sy
 80069e6:	607b      	str	r3, [r7, #4]
}
 80069e8:	bf00      	nop
 80069ea:	e7fe      	b.n	80069ea <vTaskSwitchContext+0x3e>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	3b01      	subs	r3, #1
 80069f0:	60fb      	str	r3, [r7, #12]
 80069f2:	491b      	ldr	r1, [pc, #108]	; (8006a60 <vTaskSwitchContext+0xb4>)
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	4613      	mov	r3, r2
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	4413      	add	r3, r2
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	440b      	add	r3, r1
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d0e4      	beq.n	80069d0 <vTaskSwitchContext+0x24>
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	4613      	mov	r3, r2
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	4413      	add	r3, r2
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	4a13      	ldr	r2, [pc, #76]	; (8006a60 <vTaskSwitchContext+0xb4>)
 8006a12:	4413      	add	r3, r2
 8006a14:	60bb      	str	r3, [r7, #8]
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	685a      	ldr	r2, [r3, #4]
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	605a      	str	r2, [r3, #4]
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	685a      	ldr	r2, [r3, #4]
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	3308      	adds	r3, #8
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d104      	bne.n	8006a36 <vTaskSwitchContext+0x8a>
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	685a      	ldr	r2, [r3, #4]
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	605a      	str	r2, [r3, #4]
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	4a09      	ldr	r2, [pc, #36]	; (8006a64 <vTaskSwitchContext+0xb8>)
 8006a3e:	6013      	str	r3, [r2, #0]
 8006a40:	4a06      	ldr	r2, [pc, #24]	; (8006a5c <vTaskSwitchContext+0xb0>)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6013      	str	r3, [r2, #0]
}
 8006a46:	bf00      	nop
 8006a48:	3714      	adds	r7, #20
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	20000f58 	.word	0x20000f58
 8006a58:	20000f44 	.word	0x20000f44
 8006a5c:	20000f38 	.word	0x20000f38
 8006a60:	20000a60 	.word	0x20000a60
 8006a64:	20000a5c 	.word	0x20000a5c

08006a68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d10a      	bne.n	8006a8e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7c:	f383 8811 	msr	BASEPRI, r3
 8006a80:	f3bf 8f6f 	isb	sy
 8006a84:	f3bf 8f4f 	dsb	sy
 8006a88:	60fb      	str	r3, [r7, #12]
}
 8006a8a:	bf00      	nop
 8006a8c:	e7fe      	b.n	8006a8c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a8e:	4b07      	ldr	r3, [pc, #28]	; (8006aac <vTaskPlaceOnEventList+0x44>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	3318      	adds	r3, #24
 8006a94:	4619      	mov	r1, r3
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f7fe fe87 	bl	80057aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006a9c:	2101      	movs	r1, #1
 8006a9e:	6838      	ldr	r0, [r7, #0]
 8006aa0:	f000 fa7c 	bl	8006f9c <prvAddCurrentTaskToDelayedList>
}
 8006aa4:	bf00      	nop
 8006aa6:	3710      	adds	r7, #16
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	20000a5c 	.word	0x20000a5c

08006ab0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b086      	sub	sp, #24
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	60b9      	str	r1, [r7, #8]
 8006aba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d10a      	bne.n	8006ad8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac6:	f383 8811 	msr	BASEPRI, r3
 8006aca:	f3bf 8f6f 	isb	sy
 8006ace:	f3bf 8f4f 	dsb	sy
 8006ad2:	617b      	str	r3, [r7, #20]
}
 8006ad4:	bf00      	nop
 8006ad6:	e7fe      	b.n	8006ad6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ad8:	4b0a      	ldr	r3, [pc, #40]	; (8006b04 <vTaskPlaceOnEventListRestricted+0x54>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	3318      	adds	r3, #24
 8006ade:	4619      	mov	r1, r3
 8006ae0:	68f8      	ldr	r0, [r7, #12]
 8006ae2:	f7fe fe3e 	bl	8005762 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d002      	beq.n	8006af2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006aec:	f04f 33ff 	mov.w	r3, #4294967295
 8006af0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006af2:	6879      	ldr	r1, [r7, #4]
 8006af4:	68b8      	ldr	r0, [r7, #8]
 8006af6:	f000 fa51 	bl	8006f9c <prvAddCurrentTaskToDelayedList>
	}
 8006afa:	bf00      	nop
 8006afc:	3718      	adds	r7, #24
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	20000a5c 	.word	0x20000a5c

08006b08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b086      	sub	sp, #24
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d10a      	bne.n	8006b34 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b22:	f383 8811 	msr	BASEPRI, r3
 8006b26:	f3bf 8f6f 	isb	sy
 8006b2a:	f3bf 8f4f 	dsb	sy
 8006b2e:	60fb      	str	r3, [r7, #12]
}
 8006b30:	bf00      	nop
 8006b32:	e7fe      	b.n	8006b32 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	3318      	adds	r3, #24
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f7fe fe6f 	bl	800581c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b3e:	4b1e      	ldr	r3, [pc, #120]	; (8006bb8 <xTaskRemoveFromEventList+0xb0>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d11d      	bne.n	8006b82 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	3304      	adds	r3, #4
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f7fe fe66 	bl	800581c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b54:	4b19      	ldr	r3, [pc, #100]	; (8006bbc <xTaskRemoveFromEventList+0xb4>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d903      	bls.n	8006b64 <xTaskRemoveFromEventList+0x5c>
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b60:	4a16      	ldr	r2, [pc, #88]	; (8006bbc <xTaskRemoveFromEventList+0xb4>)
 8006b62:	6013      	str	r3, [r2, #0]
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b68:	4613      	mov	r3, r2
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	4413      	add	r3, r2
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	4a13      	ldr	r2, [pc, #76]	; (8006bc0 <xTaskRemoveFromEventList+0xb8>)
 8006b72:	441a      	add	r2, r3
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	3304      	adds	r3, #4
 8006b78:	4619      	mov	r1, r3
 8006b7a:	4610      	mov	r0, r2
 8006b7c:	f7fe fdf1 	bl	8005762 <vListInsertEnd>
 8006b80:	e005      	b.n	8006b8e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	3318      	adds	r3, #24
 8006b86:	4619      	mov	r1, r3
 8006b88:	480e      	ldr	r0, [pc, #56]	; (8006bc4 <xTaskRemoveFromEventList+0xbc>)
 8006b8a:	f7fe fdea 	bl	8005762 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b92:	4b0d      	ldr	r3, [pc, #52]	; (8006bc8 <xTaskRemoveFromEventList+0xc0>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d905      	bls.n	8006ba8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006ba0:	4b0a      	ldr	r3, [pc, #40]	; (8006bcc <xTaskRemoveFromEventList+0xc4>)
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	601a      	str	r2, [r3, #0]
 8006ba6:	e001      	b.n	8006bac <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006bac:	697b      	ldr	r3, [r7, #20]
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3718      	adds	r7, #24
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	20000f58 	.word	0x20000f58
 8006bbc:	20000f38 	.word	0x20000f38
 8006bc0:	20000a60 	.word	0x20000a60
 8006bc4:	20000ef0 	.word	0x20000ef0
 8006bc8:	20000a5c 	.word	0x20000a5c
 8006bcc:	20000f44 	.word	0x20000f44

08006bd0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006bd8:	4b06      	ldr	r3, [pc, #24]	; (8006bf4 <vTaskInternalSetTimeOutState+0x24>)
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006be0:	4b05      	ldr	r3, [pc, #20]	; (8006bf8 <vTaskInternalSetTimeOutState+0x28>)
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	605a      	str	r2, [r3, #4]
}
 8006be8:	bf00      	nop
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr
 8006bf4:	20000f48 	.word	0x20000f48
 8006bf8:	20000f34 	.word	0x20000f34

08006bfc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b088      	sub	sp, #32
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d10a      	bne.n	8006c22 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c10:	f383 8811 	msr	BASEPRI, r3
 8006c14:	f3bf 8f6f 	isb	sy
 8006c18:	f3bf 8f4f 	dsb	sy
 8006c1c:	613b      	str	r3, [r7, #16]
}
 8006c1e:	bf00      	nop
 8006c20:	e7fe      	b.n	8006c20 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d10a      	bne.n	8006c3e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2c:	f383 8811 	msr	BASEPRI, r3
 8006c30:	f3bf 8f6f 	isb	sy
 8006c34:	f3bf 8f4f 	dsb	sy
 8006c38:	60fb      	str	r3, [r7, #12]
}
 8006c3a:	bf00      	nop
 8006c3c:	e7fe      	b.n	8006c3c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006c3e:	f000 fe79 	bl	8007934 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006c42:	4b1d      	ldr	r3, [pc, #116]	; (8006cb8 <xTaskCheckForTimeOut+0xbc>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	69ba      	ldr	r2, [r7, #24]
 8006c4e:	1ad3      	subs	r3, r2, r3
 8006c50:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c5a:	d102      	bne.n	8006c62 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	61fb      	str	r3, [r7, #28]
 8006c60:	e023      	b.n	8006caa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	4b15      	ldr	r3, [pc, #84]	; (8006cbc <xTaskCheckForTimeOut+0xc0>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d007      	beq.n	8006c7e <xTaskCheckForTimeOut+0x82>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	69ba      	ldr	r2, [r7, #24]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d302      	bcc.n	8006c7e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	61fb      	str	r3, [r7, #28]
 8006c7c:	e015      	b.n	8006caa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	697a      	ldr	r2, [r7, #20]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d20b      	bcs.n	8006ca0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	1ad2      	subs	r2, r2, r3
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f7ff ff9b 	bl	8006bd0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	61fb      	str	r3, [r7, #28]
 8006c9e:	e004      	b.n	8006caa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006caa:	f000 fe73 	bl	8007994 <vPortExitCritical>

	return xReturn;
 8006cae:	69fb      	ldr	r3, [r7, #28]
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3720      	adds	r7, #32
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	20000f34 	.word	0x20000f34
 8006cbc:	20000f48 	.word	0x20000f48

08006cc0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006cc4:	4b03      	ldr	r3, [pc, #12]	; (8006cd4 <vTaskMissedYield+0x14>)
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	601a      	str	r2, [r3, #0]
}
 8006cca:	bf00      	nop
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr
 8006cd4:	20000f44 	.word	0x20000f44

08006cd8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006ce0:	f000 f852 	bl	8006d88 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006ce4:	4b06      	ldr	r3, [pc, #24]	; (8006d00 <prvIdleTask+0x28>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d9f9      	bls.n	8006ce0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006cec:	4b05      	ldr	r3, [pc, #20]	; (8006d04 <prvIdleTask+0x2c>)
 8006cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cf2:	601a      	str	r2, [r3, #0]
 8006cf4:	f3bf 8f4f 	dsb	sy
 8006cf8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006cfc:	e7f0      	b.n	8006ce0 <prvIdleTask+0x8>
 8006cfe:	bf00      	nop
 8006d00:	20000a60 	.word	0x20000a60
 8006d04:	e000ed04 	.word	0xe000ed04

08006d08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d0e:	2300      	movs	r3, #0
 8006d10:	607b      	str	r3, [r7, #4]
 8006d12:	e00c      	b.n	8006d2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	4613      	mov	r3, r2
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	4413      	add	r3, r2
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	4a12      	ldr	r2, [pc, #72]	; (8006d68 <prvInitialiseTaskLists+0x60>)
 8006d20:	4413      	add	r3, r2
 8006d22:	4618      	mov	r0, r3
 8006d24:	f7fe fcf0 	bl	8005708 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	607b      	str	r3, [r7, #4]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2b37      	cmp	r3, #55	; 0x37
 8006d32:	d9ef      	bls.n	8006d14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006d34:	480d      	ldr	r0, [pc, #52]	; (8006d6c <prvInitialiseTaskLists+0x64>)
 8006d36:	f7fe fce7 	bl	8005708 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006d3a:	480d      	ldr	r0, [pc, #52]	; (8006d70 <prvInitialiseTaskLists+0x68>)
 8006d3c:	f7fe fce4 	bl	8005708 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006d40:	480c      	ldr	r0, [pc, #48]	; (8006d74 <prvInitialiseTaskLists+0x6c>)
 8006d42:	f7fe fce1 	bl	8005708 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006d46:	480c      	ldr	r0, [pc, #48]	; (8006d78 <prvInitialiseTaskLists+0x70>)
 8006d48:	f7fe fcde 	bl	8005708 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006d4c:	480b      	ldr	r0, [pc, #44]	; (8006d7c <prvInitialiseTaskLists+0x74>)
 8006d4e:	f7fe fcdb 	bl	8005708 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006d52:	4b0b      	ldr	r3, [pc, #44]	; (8006d80 <prvInitialiseTaskLists+0x78>)
 8006d54:	4a05      	ldr	r2, [pc, #20]	; (8006d6c <prvInitialiseTaskLists+0x64>)
 8006d56:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006d58:	4b0a      	ldr	r3, [pc, #40]	; (8006d84 <prvInitialiseTaskLists+0x7c>)
 8006d5a:	4a05      	ldr	r2, [pc, #20]	; (8006d70 <prvInitialiseTaskLists+0x68>)
 8006d5c:	601a      	str	r2, [r3, #0]
}
 8006d5e:	bf00      	nop
 8006d60:	3708      	adds	r7, #8
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	20000a60 	.word	0x20000a60
 8006d6c:	20000ec0 	.word	0x20000ec0
 8006d70:	20000ed4 	.word	0x20000ed4
 8006d74:	20000ef0 	.word	0x20000ef0
 8006d78:	20000f04 	.word	0x20000f04
 8006d7c:	20000f1c 	.word	0x20000f1c
 8006d80:	20000ee8 	.word	0x20000ee8
 8006d84:	20000eec 	.word	0x20000eec

08006d88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d8e:	e019      	b.n	8006dc4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006d90:	f000 fdd0 	bl	8007934 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d94:	4b10      	ldr	r3, [pc, #64]	; (8006dd8 <prvCheckTasksWaitingTermination+0x50>)
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	3304      	adds	r3, #4
 8006da0:	4618      	mov	r0, r3
 8006da2:	f7fe fd3b 	bl	800581c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006da6:	4b0d      	ldr	r3, [pc, #52]	; (8006ddc <prvCheckTasksWaitingTermination+0x54>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	3b01      	subs	r3, #1
 8006dac:	4a0b      	ldr	r2, [pc, #44]	; (8006ddc <prvCheckTasksWaitingTermination+0x54>)
 8006dae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006db0:	4b0b      	ldr	r3, [pc, #44]	; (8006de0 <prvCheckTasksWaitingTermination+0x58>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	3b01      	subs	r3, #1
 8006db6:	4a0a      	ldr	r2, [pc, #40]	; (8006de0 <prvCheckTasksWaitingTermination+0x58>)
 8006db8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006dba:	f000 fdeb 	bl	8007994 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 f810 	bl	8006de4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006dc4:	4b06      	ldr	r3, [pc, #24]	; (8006de0 <prvCheckTasksWaitingTermination+0x58>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d1e1      	bne.n	8006d90 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006dcc:	bf00      	nop
 8006dce:	bf00      	nop
 8006dd0:	3708      	adds	r7, #8
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	20000f04 	.word	0x20000f04
 8006ddc:	20000f30 	.word	0x20000f30
 8006de0:	20000f18 	.word	0x20000f18

08006de4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d108      	bne.n	8006e08 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f000 ff88 	bl	8007d10 <vPortFree>
				vPortFree( pxTCB );
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 ff85 	bl	8007d10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006e06:	e018      	b.n	8006e3a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d103      	bne.n	8006e1a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 ff7c 	bl	8007d10 <vPortFree>
	}
 8006e18:	e00f      	b.n	8006e3a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006e20:	2b02      	cmp	r3, #2
 8006e22:	d00a      	beq.n	8006e3a <prvDeleteTCB+0x56>
	__asm volatile
 8006e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e28:	f383 8811 	msr	BASEPRI, r3
 8006e2c:	f3bf 8f6f 	isb	sy
 8006e30:	f3bf 8f4f 	dsb	sy
 8006e34:	60fb      	str	r3, [r7, #12]
}
 8006e36:	bf00      	nop
 8006e38:	e7fe      	b.n	8006e38 <prvDeleteTCB+0x54>
	}
 8006e3a:	bf00      	nop
 8006e3c:	3710      	adds	r7, #16
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
	...

08006e44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e4a:	4b0c      	ldr	r3, [pc, #48]	; (8006e7c <prvResetNextTaskUnblockTime+0x38>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d104      	bne.n	8006e5e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006e54:	4b0a      	ldr	r3, [pc, #40]	; (8006e80 <prvResetNextTaskUnblockTime+0x3c>)
 8006e56:	f04f 32ff 	mov.w	r2, #4294967295
 8006e5a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006e5c:	e008      	b.n	8006e70 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e5e:	4b07      	ldr	r3, [pc, #28]	; (8006e7c <prvResetNextTaskUnblockTime+0x38>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	4a04      	ldr	r2, [pc, #16]	; (8006e80 <prvResetNextTaskUnblockTime+0x3c>)
 8006e6e:	6013      	str	r3, [r2, #0]
}
 8006e70:	bf00      	nop
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr
 8006e7c:	20000ee8 	.word	0x20000ee8
 8006e80:	20000f50 	.word	0x20000f50

08006e84 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006e8a:	4b0b      	ldr	r3, [pc, #44]	; (8006eb8 <xTaskGetSchedulerState+0x34>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d102      	bne.n	8006e98 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006e92:	2301      	movs	r3, #1
 8006e94:	607b      	str	r3, [r7, #4]
 8006e96:	e008      	b.n	8006eaa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e98:	4b08      	ldr	r3, [pc, #32]	; (8006ebc <xTaskGetSchedulerState+0x38>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d102      	bne.n	8006ea6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006ea0:	2302      	movs	r3, #2
 8006ea2:	607b      	str	r3, [r7, #4]
 8006ea4:	e001      	b.n	8006eaa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006eaa:	687b      	ldr	r3, [r7, #4]
	}
 8006eac:	4618      	mov	r0, r3
 8006eae:	370c      	adds	r7, #12
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr
 8006eb8:	20000f3c 	.word	0x20000f3c
 8006ebc:	20000f58 	.word	0x20000f58

08006ec0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b086      	sub	sp, #24
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d056      	beq.n	8006f84 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006ed6:	4b2e      	ldr	r3, [pc, #184]	; (8006f90 <xTaskPriorityDisinherit+0xd0>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	693a      	ldr	r2, [r7, #16]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d00a      	beq.n	8006ef6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee4:	f383 8811 	msr	BASEPRI, r3
 8006ee8:	f3bf 8f6f 	isb	sy
 8006eec:	f3bf 8f4f 	dsb	sy
 8006ef0:	60fb      	str	r3, [r7, #12]
}
 8006ef2:	bf00      	nop
 8006ef4:	e7fe      	b.n	8006ef4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d10a      	bne.n	8006f14 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f02:	f383 8811 	msr	BASEPRI, r3
 8006f06:	f3bf 8f6f 	isb	sy
 8006f0a:	f3bf 8f4f 	dsb	sy
 8006f0e:	60bb      	str	r3, [r7, #8]
}
 8006f10:	bf00      	nop
 8006f12:	e7fe      	b.n	8006f12 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f18:	1e5a      	subs	r2, r3, #1
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d02c      	beq.n	8006f84 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d128      	bne.n	8006f84 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	3304      	adds	r3, #4
 8006f36:	4618      	mov	r0, r3
 8006f38:	f7fe fc70 	bl	800581c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f48:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f54:	4b0f      	ldr	r3, [pc, #60]	; (8006f94 <xTaskPriorityDisinherit+0xd4>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d903      	bls.n	8006f64 <xTaskPriorityDisinherit+0xa4>
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f60:	4a0c      	ldr	r2, [pc, #48]	; (8006f94 <xTaskPriorityDisinherit+0xd4>)
 8006f62:	6013      	str	r3, [r2, #0]
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f68:	4613      	mov	r3, r2
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	4413      	add	r3, r2
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	4a09      	ldr	r2, [pc, #36]	; (8006f98 <xTaskPriorityDisinherit+0xd8>)
 8006f72:	441a      	add	r2, r3
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	3304      	adds	r3, #4
 8006f78:	4619      	mov	r1, r3
 8006f7a:	4610      	mov	r0, r2
 8006f7c:	f7fe fbf1 	bl	8005762 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006f80:	2301      	movs	r3, #1
 8006f82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006f84:	697b      	ldr	r3, [r7, #20]
	}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3718      	adds	r7, #24
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	20000a5c 	.word	0x20000a5c
 8006f94:	20000f38 	.word	0x20000f38
 8006f98:	20000a60 	.word	0x20000a60

08006f9c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006fa6:	4b21      	ldr	r3, [pc, #132]	; (800702c <prvAddCurrentTaskToDelayedList+0x90>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fac:	4b20      	ldr	r3, [pc, #128]	; (8007030 <prvAddCurrentTaskToDelayedList+0x94>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	3304      	adds	r3, #4
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f7fe fc32 	bl	800581c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fbe:	d10a      	bne.n	8006fd6 <prvAddCurrentTaskToDelayedList+0x3a>
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d007      	beq.n	8006fd6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fc6:	4b1a      	ldr	r3, [pc, #104]	; (8007030 <prvAddCurrentTaskToDelayedList+0x94>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	3304      	adds	r3, #4
 8006fcc:	4619      	mov	r1, r3
 8006fce:	4819      	ldr	r0, [pc, #100]	; (8007034 <prvAddCurrentTaskToDelayedList+0x98>)
 8006fd0:	f7fe fbc7 	bl	8005762 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006fd4:	e026      	b.n	8007024 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4413      	add	r3, r2
 8006fdc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006fde:	4b14      	ldr	r3, [pc, #80]	; (8007030 <prvAddCurrentTaskToDelayedList+0x94>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	68ba      	ldr	r2, [r7, #8]
 8006fe4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006fe6:	68ba      	ldr	r2, [r7, #8]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d209      	bcs.n	8007002 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fee:	4b12      	ldr	r3, [pc, #72]	; (8007038 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	4b0f      	ldr	r3, [pc, #60]	; (8007030 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	3304      	adds	r3, #4
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	4610      	mov	r0, r2
 8006ffc:	f7fe fbd5 	bl	80057aa <vListInsert>
}
 8007000:	e010      	b.n	8007024 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007002:	4b0e      	ldr	r3, [pc, #56]	; (800703c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	4b0a      	ldr	r3, [pc, #40]	; (8007030 <prvAddCurrentTaskToDelayedList+0x94>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	3304      	adds	r3, #4
 800700c:	4619      	mov	r1, r3
 800700e:	4610      	mov	r0, r2
 8007010:	f7fe fbcb 	bl	80057aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007014:	4b0a      	ldr	r3, [pc, #40]	; (8007040 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	68ba      	ldr	r2, [r7, #8]
 800701a:	429a      	cmp	r2, r3
 800701c:	d202      	bcs.n	8007024 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800701e:	4a08      	ldr	r2, [pc, #32]	; (8007040 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	6013      	str	r3, [r2, #0]
}
 8007024:	bf00      	nop
 8007026:	3710      	adds	r7, #16
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}
 800702c:	20000f34 	.word	0x20000f34
 8007030:	20000a5c 	.word	0x20000a5c
 8007034:	20000f1c 	.word	0x20000f1c
 8007038:	20000eec 	.word	0x20000eec
 800703c:	20000ee8 	.word	0x20000ee8
 8007040:	20000f50 	.word	0x20000f50

08007044 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b08a      	sub	sp, #40	; 0x28
 8007048:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800704a:	2300      	movs	r3, #0
 800704c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800704e:	f000 fb07 	bl	8007660 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007052:	4b1c      	ldr	r3, [pc, #112]	; (80070c4 <xTimerCreateTimerTask+0x80>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d021      	beq.n	800709e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800705a:	2300      	movs	r3, #0
 800705c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800705e:	2300      	movs	r3, #0
 8007060:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007062:	1d3a      	adds	r2, r7, #4
 8007064:	f107 0108 	add.w	r1, r7, #8
 8007068:	f107 030c 	add.w	r3, r7, #12
 800706c:	4618      	mov	r0, r3
 800706e:	f7fe fb31 	bl	80056d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007072:	6879      	ldr	r1, [r7, #4]
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	9202      	str	r2, [sp, #8]
 800707a:	9301      	str	r3, [sp, #4]
 800707c:	2302      	movs	r3, #2
 800707e:	9300      	str	r3, [sp, #0]
 8007080:	2300      	movs	r3, #0
 8007082:	460a      	mov	r2, r1
 8007084:	4910      	ldr	r1, [pc, #64]	; (80070c8 <xTimerCreateTimerTask+0x84>)
 8007086:	4811      	ldr	r0, [pc, #68]	; (80070cc <xTimerCreateTimerTask+0x88>)
 8007088:	f7ff f8de 	bl	8006248 <xTaskCreateStatic>
 800708c:	4603      	mov	r3, r0
 800708e:	4a10      	ldr	r2, [pc, #64]	; (80070d0 <xTimerCreateTimerTask+0x8c>)
 8007090:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007092:	4b0f      	ldr	r3, [pc, #60]	; (80070d0 <xTimerCreateTimerTask+0x8c>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d001      	beq.n	800709e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800709a:	2301      	movs	r3, #1
 800709c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d10a      	bne.n	80070ba <xTimerCreateTimerTask+0x76>
	__asm volatile
 80070a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a8:	f383 8811 	msr	BASEPRI, r3
 80070ac:	f3bf 8f6f 	isb	sy
 80070b0:	f3bf 8f4f 	dsb	sy
 80070b4:	613b      	str	r3, [r7, #16]
}
 80070b6:	bf00      	nop
 80070b8:	e7fe      	b.n	80070b8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80070ba:	697b      	ldr	r3, [r7, #20]
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3718      	adds	r7, #24
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	20000f8c 	.word	0x20000f8c
 80070c8:	08007fec 	.word	0x08007fec
 80070cc:	08007209 	.word	0x08007209
 80070d0:	20000f90 	.word	0x20000f90

080070d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b08a      	sub	sp, #40	; 0x28
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	607a      	str	r2, [r7, #4]
 80070e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80070e2:	2300      	movs	r3, #0
 80070e4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d10a      	bne.n	8007102 <xTimerGenericCommand+0x2e>
	__asm volatile
 80070ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f0:	f383 8811 	msr	BASEPRI, r3
 80070f4:	f3bf 8f6f 	isb	sy
 80070f8:	f3bf 8f4f 	dsb	sy
 80070fc:	623b      	str	r3, [r7, #32]
}
 80070fe:	bf00      	nop
 8007100:	e7fe      	b.n	8007100 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007102:	4b1a      	ldr	r3, [pc, #104]	; (800716c <xTimerGenericCommand+0x98>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d02a      	beq.n	8007160 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	2b05      	cmp	r3, #5
 800711a:	dc18      	bgt.n	800714e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800711c:	f7ff feb2 	bl	8006e84 <xTaskGetSchedulerState>
 8007120:	4603      	mov	r3, r0
 8007122:	2b02      	cmp	r3, #2
 8007124:	d109      	bne.n	800713a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007126:	4b11      	ldr	r3, [pc, #68]	; (800716c <xTimerGenericCommand+0x98>)
 8007128:	6818      	ldr	r0, [r3, #0]
 800712a:	f107 0110 	add.w	r1, r7, #16
 800712e:	2300      	movs	r3, #0
 8007130:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007132:	f7fe fca1 	bl	8005a78 <xQueueGenericSend>
 8007136:	6278      	str	r0, [r7, #36]	; 0x24
 8007138:	e012      	b.n	8007160 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800713a:	4b0c      	ldr	r3, [pc, #48]	; (800716c <xTimerGenericCommand+0x98>)
 800713c:	6818      	ldr	r0, [r3, #0]
 800713e:	f107 0110 	add.w	r1, r7, #16
 8007142:	2300      	movs	r3, #0
 8007144:	2200      	movs	r2, #0
 8007146:	f7fe fc97 	bl	8005a78 <xQueueGenericSend>
 800714a:	6278      	str	r0, [r7, #36]	; 0x24
 800714c:	e008      	b.n	8007160 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800714e:	4b07      	ldr	r3, [pc, #28]	; (800716c <xTimerGenericCommand+0x98>)
 8007150:	6818      	ldr	r0, [r3, #0]
 8007152:	f107 0110 	add.w	r1, r7, #16
 8007156:	2300      	movs	r3, #0
 8007158:	683a      	ldr	r2, [r7, #0]
 800715a:	f7fe fd8b 	bl	8005c74 <xQueueGenericSendFromISR>
 800715e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007162:	4618      	mov	r0, r3
 8007164:	3728      	adds	r7, #40	; 0x28
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	20000f8c 	.word	0x20000f8c

08007170 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b088      	sub	sp, #32
 8007174:	af02      	add	r7, sp, #8
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800717a:	4b22      	ldr	r3, [pc, #136]	; (8007204 <prvProcessExpiredTimer+0x94>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	3304      	adds	r3, #4
 8007188:	4618      	mov	r0, r3
 800718a:	f7fe fb47 	bl	800581c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007194:	f003 0304 	and.w	r3, r3, #4
 8007198:	2b00      	cmp	r3, #0
 800719a:	d022      	beq.n	80071e2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	699a      	ldr	r2, [r3, #24]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	18d1      	adds	r1, r2, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	683a      	ldr	r2, [r7, #0]
 80071a8:	6978      	ldr	r0, [r7, #20]
 80071aa:	f000 f8d1 	bl	8007350 <prvInsertTimerInActiveList>
 80071ae:	4603      	mov	r3, r0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d01f      	beq.n	80071f4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80071b4:	2300      	movs	r3, #0
 80071b6:	9300      	str	r3, [sp, #0]
 80071b8:	2300      	movs	r3, #0
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	2100      	movs	r1, #0
 80071be:	6978      	ldr	r0, [r7, #20]
 80071c0:	f7ff ff88 	bl	80070d4 <xTimerGenericCommand>
 80071c4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d113      	bne.n	80071f4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80071cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d0:	f383 8811 	msr	BASEPRI, r3
 80071d4:	f3bf 8f6f 	isb	sy
 80071d8:	f3bf 8f4f 	dsb	sy
 80071dc:	60fb      	str	r3, [r7, #12]
}
 80071de:	bf00      	nop
 80071e0:	e7fe      	b.n	80071e0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071e8:	f023 0301 	bic.w	r3, r3, #1
 80071ec:	b2da      	uxtb	r2, r3
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	6a1b      	ldr	r3, [r3, #32]
 80071f8:	6978      	ldr	r0, [r7, #20]
 80071fa:	4798      	blx	r3
}
 80071fc:	bf00      	nop
 80071fe:	3718      	adds	r7, #24
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}
 8007204:	20000f84 	.word	0x20000f84

08007208 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007210:	f107 0308 	add.w	r3, r7, #8
 8007214:	4618      	mov	r0, r3
 8007216:	f000 f857 	bl	80072c8 <prvGetNextExpireTime>
 800721a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	4619      	mov	r1, r3
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f000 f803 	bl	800722c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007226:	f000 f8d5 	bl	80073d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800722a:	e7f1      	b.n	8007210 <prvTimerTask+0x8>

0800722c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007236:	f7ff fa43 	bl	80066c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800723a:	f107 0308 	add.w	r3, r7, #8
 800723e:	4618      	mov	r0, r3
 8007240:	f000 f866 	bl	8007310 <prvSampleTimeNow>
 8007244:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d130      	bne.n	80072ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d10a      	bne.n	8007268 <prvProcessTimerOrBlockTask+0x3c>
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	429a      	cmp	r2, r3
 8007258:	d806      	bhi.n	8007268 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800725a:	f7ff fa3f 	bl	80066dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800725e:	68f9      	ldr	r1, [r7, #12]
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f7ff ff85 	bl	8007170 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007266:	e024      	b.n	80072b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d008      	beq.n	8007280 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800726e:	4b13      	ldr	r3, [pc, #76]	; (80072bc <prvProcessTimerOrBlockTask+0x90>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d101      	bne.n	800727c <prvProcessTimerOrBlockTask+0x50>
 8007278:	2301      	movs	r3, #1
 800727a:	e000      	b.n	800727e <prvProcessTimerOrBlockTask+0x52>
 800727c:	2300      	movs	r3, #0
 800727e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007280:	4b0f      	ldr	r3, [pc, #60]	; (80072c0 <prvProcessTimerOrBlockTask+0x94>)
 8007282:	6818      	ldr	r0, [r3, #0]
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	1ad3      	subs	r3, r2, r3
 800728a:	683a      	ldr	r2, [r7, #0]
 800728c:	4619      	mov	r1, r3
 800728e:	f7fe ffa7 	bl	80061e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007292:	f7ff fa23 	bl	80066dc <xTaskResumeAll>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d10a      	bne.n	80072b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800729c:	4b09      	ldr	r3, [pc, #36]	; (80072c4 <prvProcessTimerOrBlockTask+0x98>)
 800729e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072a2:	601a      	str	r2, [r3, #0]
 80072a4:	f3bf 8f4f 	dsb	sy
 80072a8:	f3bf 8f6f 	isb	sy
}
 80072ac:	e001      	b.n	80072b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80072ae:	f7ff fa15 	bl	80066dc <xTaskResumeAll>
}
 80072b2:	bf00      	nop
 80072b4:	3710      	adds	r7, #16
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
 80072ba:	bf00      	nop
 80072bc:	20000f88 	.word	0x20000f88
 80072c0:	20000f8c 	.word	0x20000f8c
 80072c4:	e000ed04 	.word	0xe000ed04

080072c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80072c8:	b480      	push	{r7}
 80072ca:	b085      	sub	sp, #20
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80072d0:	4b0e      	ldr	r3, [pc, #56]	; (800730c <prvGetNextExpireTime+0x44>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d101      	bne.n	80072de <prvGetNextExpireTime+0x16>
 80072da:	2201      	movs	r2, #1
 80072dc:	e000      	b.n	80072e0 <prvGetNextExpireTime+0x18>
 80072de:	2200      	movs	r2, #0
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d105      	bne.n	80072f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80072ec:	4b07      	ldr	r3, [pc, #28]	; (800730c <prvGetNextExpireTime+0x44>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	60fb      	str	r3, [r7, #12]
 80072f6:	e001      	b.n	80072fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80072f8:	2300      	movs	r3, #0
 80072fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80072fc:	68fb      	ldr	r3, [r7, #12]
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3714      	adds	r7, #20
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr
 800730a:	bf00      	nop
 800730c:	20000f84 	.word	0x20000f84

08007310 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007318:	f7ff fa7e 	bl	8006818 <xTaskGetTickCount>
 800731c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800731e:	4b0b      	ldr	r3, [pc, #44]	; (800734c <prvSampleTimeNow+0x3c>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	68fa      	ldr	r2, [r7, #12]
 8007324:	429a      	cmp	r2, r3
 8007326:	d205      	bcs.n	8007334 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007328:	f000 f936 	bl	8007598 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	601a      	str	r2, [r3, #0]
 8007332:	e002      	b.n	800733a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800733a:	4a04      	ldr	r2, [pc, #16]	; (800734c <prvSampleTimeNow+0x3c>)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007340:	68fb      	ldr	r3, [r7, #12]
}
 8007342:	4618      	mov	r0, r3
 8007344:	3710      	adds	r7, #16
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	20000f94 	.word	0x20000f94

08007350 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b086      	sub	sp, #24
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	607a      	str	r2, [r7, #4]
 800735c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800735e:	2300      	movs	r3, #0
 8007360:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	68ba      	ldr	r2, [r7, #8]
 8007366:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	68fa      	ldr	r2, [r7, #12]
 800736c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800736e:	68ba      	ldr	r2, [r7, #8]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	429a      	cmp	r2, r3
 8007374:	d812      	bhi.n	800739c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	1ad2      	subs	r2, r2, r3
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	699b      	ldr	r3, [r3, #24]
 8007380:	429a      	cmp	r2, r3
 8007382:	d302      	bcc.n	800738a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007384:	2301      	movs	r3, #1
 8007386:	617b      	str	r3, [r7, #20]
 8007388:	e01b      	b.n	80073c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800738a:	4b10      	ldr	r3, [pc, #64]	; (80073cc <prvInsertTimerInActiveList+0x7c>)
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	3304      	adds	r3, #4
 8007392:	4619      	mov	r1, r3
 8007394:	4610      	mov	r0, r2
 8007396:	f7fe fa08 	bl	80057aa <vListInsert>
 800739a:	e012      	b.n	80073c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d206      	bcs.n	80073b2 <prvInsertTimerInActiveList+0x62>
 80073a4:	68ba      	ldr	r2, [r7, #8]
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d302      	bcc.n	80073b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80073ac:	2301      	movs	r3, #1
 80073ae:	617b      	str	r3, [r7, #20]
 80073b0:	e007      	b.n	80073c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80073b2:	4b07      	ldr	r3, [pc, #28]	; (80073d0 <prvInsertTimerInActiveList+0x80>)
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	3304      	adds	r3, #4
 80073ba:	4619      	mov	r1, r3
 80073bc:	4610      	mov	r0, r2
 80073be:	f7fe f9f4 	bl	80057aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 80073c2:	697b      	ldr	r3, [r7, #20]
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3718      	adds	r7, #24
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}
 80073cc:	20000f88 	.word	0x20000f88
 80073d0:	20000f84 	.word	0x20000f84

080073d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b08e      	sub	sp, #56	; 0x38
 80073d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80073da:	e0ca      	b.n	8007572 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	da18      	bge.n	8007414 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80073e2:	1d3b      	adds	r3, r7, #4
 80073e4:	3304      	adds	r3, #4
 80073e6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80073e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d10a      	bne.n	8007404 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80073ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f2:	f383 8811 	msr	BASEPRI, r3
 80073f6:	f3bf 8f6f 	isb	sy
 80073fa:	f3bf 8f4f 	dsb	sy
 80073fe:	61fb      	str	r3, [r7, #28]
}
 8007400:	bf00      	nop
 8007402:	e7fe      	b.n	8007402 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800740a:	6850      	ldr	r0, [r2, #4]
 800740c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800740e:	6892      	ldr	r2, [r2, #8]
 8007410:	4611      	mov	r1, r2
 8007412:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2b00      	cmp	r3, #0
 8007418:	f2c0 80aa 	blt.w	8007570 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007422:	695b      	ldr	r3, [r3, #20]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d004      	beq.n	8007432 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800742a:	3304      	adds	r3, #4
 800742c:	4618      	mov	r0, r3
 800742e:	f7fe f9f5 	bl	800581c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007432:	463b      	mov	r3, r7
 8007434:	4618      	mov	r0, r3
 8007436:	f7ff ff6b 	bl	8007310 <prvSampleTimeNow>
 800743a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2b09      	cmp	r3, #9
 8007440:	f200 8097 	bhi.w	8007572 <prvProcessReceivedCommands+0x19e>
 8007444:	a201      	add	r2, pc, #4	; (adr r2, 800744c <prvProcessReceivedCommands+0x78>)
 8007446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800744a:	bf00      	nop
 800744c:	08007475 	.word	0x08007475
 8007450:	08007475 	.word	0x08007475
 8007454:	08007475 	.word	0x08007475
 8007458:	080074e9 	.word	0x080074e9
 800745c:	080074fd 	.word	0x080074fd
 8007460:	08007547 	.word	0x08007547
 8007464:	08007475 	.word	0x08007475
 8007468:	08007475 	.word	0x08007475
 800746c:	080074e9 	.word	0x080074e9
 8007470:	080074fd 	.word	0x080074fd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007476:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800747a:	f043 0301 	orr.w	r3, r3, #1
 800747e:	b2da      	uxtb	r2, r3
 8007480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007482:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007486:	68ba      	ldr	r2, [r7, #8]
 8007488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800748a:	699b      	ldr	r3, [r3, #24]
 800748c:	18d1      	adds	r1, r2, r3
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007492:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007494:	f7ff ff5c 	bl	8007350 <prvInsertTimerInActiveList>
 8007498:	4603      	mov	r3, r0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d069      	beq.n	8007572 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800749e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a0:	6a1b      	ldr	r3, [r3, #32]
 80074a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80074a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074ac:	f003 0304 	and.w	r3, r3, #4
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d05e      	beq.n	8007572 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80074b4:	68ba      	ldr	r2, [r7, #8]
 80074b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b8:	699b      	ldr	r3, [r3, #24]
 80074ba:	441a      	add	r2, r3
 80074bc:	2300      	movs	r3, #0
 80074be:	9300      	str	r3, [sp, #0]
 80074c0:	2300      	movs	r3, #0
 80074c2:	2100      	movs	r1, #0
 80074c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074c6:	f7ff fe05 	bl	80070d4 <xTimerGenericCommand>
 80074ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80074cc:	6a3b      	ldr	r3, [r7, #32]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d14f      	bne.n	8007572 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80074d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d6:	f383 8811 	msr	BASEPRI, r3
 80074da:	f3bf 8f6f 	isb	sy
 80074de:	f3bf 8f4f 	dsb	sy
 80074e2:	61bb      	str	r3, [r7, #24]
}
 80074e4:	bf00      	nop
 80074e6:	e7fe      	b.n	80074e6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80074e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074ee:	f023 0301 	bic.w	r3, r3, #1
 80074f2:	b2da      	uxtb	r2, r3
 80074f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80074fa:	e03a      	b.n	8007572 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80074fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007502:	f043 0301 	orr.w	r3, r3, #1
 8007506:	b2da      	uxtb	r2, r3
 8007508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800750e:	68ba      	ldr	r2, [r7, #8]
 8007510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007512:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007516:	699b      	ldr	r3, [r3, #24]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d10a      	bne.n	8007532 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800751c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007520:	f383 8811 	msr	BASEPRI, r3
 8007524:	f3bf 8f6f 	isb	sy
 8007528:	f3bf 8f4f 	dsb	sy
 800752c:	617b      	str	r3, [r7, #20]
}
 800752e:	bf00      	nop
 8007530:	e7fe      	b.n	8007530 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007534:	699a      	ldr	r2, [r3, #24]
 8007536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007538:	18d1      	adds	r1, r2, r3
 800753a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800753e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007540:	f7ff ff06 	bl	8007350 <prvInsertTimerInActiveList>
					break;
 8007544:	e015      	b.n	8007572 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007548:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800754c:	f003 0302 	and.w	r3, r3, #2
 8007550:	2b00      	cmp	r3, #0
 8007552:	d103      	bne.n	800755c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007554:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007556:	f000 fbdb 	bl	8007d10 <vPortFree>
 800755a:	e00a      	b.n	8007572 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800755c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800755e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007562:	f023 0301 	bic.w	r3, r3, #1
 8007566:	b2da      	uxtb	r2, r3
 8007568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800756a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800756e:	e000      	b.n	8007572 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007570:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007572:	4b08      	ldr	r3, [pc, #32]	; (8007594 <prvProcessReceivedCommands+0x1c0>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	1d39      	adds	r1, r7, #4
 8007578:	2200      	movs	r2, #0
 800757a:	4618      	mov	r0, r3
 800757c:	f7fe fc16 	bl	8005dac <xQueueReceive>
 8007580:	4603      	mov	r3, r0
 8007582:	2b00      	cmp	r3, #0
 8007584:	f47f af2a 	bne.w	80073dc <prvProcessReceivedCommands+0x8>
	}
}
 8007588:	bf00      	nop
 800758a:	bf00      	nop
 800758c:	3730      	adds	r7, #48	; 0x30
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	20000f8c 	.word	0x20000f8c

08007598 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b088      	sub	sp, #32
 800759c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800759e:	e048      	b.n	8007632 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80075a0:	4b2d      	ldr	r3, [pc, #180]	; (8007658 <prvSwitchTimerLists+0xc0>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075aa:	4b2b      	ldr	r3, [pc, #172]	; (8007658 <prvSwitchTimerLists+0xc0>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	3304      	adds	r3, #4
 80075b8:	4618      	mov	r0, r3
 80075ba:	f7fe f92f 	bl	800581c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	6a1b      	ldr	r3, [r3, #32]
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075cc:	f003 0304 	and.w	r3, r3, #4
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d02e      	beq.n	8007632 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	699b      	ldr	r3, [r3, #24]
 80075d8:	693a      	ldr	r2, [r7, #16]
 80075da:	4413      	add	r3, r2
 80075dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80075de:	68ba      	ldr	r2, [r7, #8]
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d90e      	bls.n	8007604 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	68ba      	ldr	r2, [r7, #8]
 80075ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	68fa      	ldr	r2, [r7, #12]
 80075f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80075f2:	4b19      	ldr	r3, [pc, #100]	; (8007658 <prvSwitchTimerLists+0xc0>)
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	3304      	adds	r3, #4
 80075fa:	4619      	mov	r1, r3
 80075fc:	4610      	mov	r0, r2
 80075fe:	f7fe f8d4 	bl	80057aa <vListInsert>
 8007602:	e016      	b.n	8007632 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007604:	2300      	movs	r3, #0
 8007606:	9300      	str	r3, [sp, #0]
 8007608:	2300      	movs	r3, #0
 800760a:	693a      	ldr	r2, [r7, #16]
 800760c:	2100      	movs	r1, #0
 800760e:	68f8      	ldr	r0, [r7, #12]
 8007610:	f7ff fd60 	bl	80070d4 <xTimerGenericCommand>
 8007614:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d10a      	bne.n	8007632 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800761c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007620:	f383 8811 	msr	BASEPRI, r3
 8007624:	f3bf 8f6f 	isb	sy
 8007628:	f3bf 8f4f 	dsb	sy
 800762c:	603b      	str	r3, [r7, #0]
}
 800762e:	bf00      	nop
 8007630:	e7fe      	b.n	8007630 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007632:	4b09      	ldr	r3, [pc, #36]	; (8007658 <prvSwitchTimerLists+0xc0>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d1b1      	bne.n	80075a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800763c:	4b06      	ldr	r3, [pc, #24]	; (8007658 <prvSwitchTimerLists+0xc0>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007642:	4b06      	ldr	r3, [pc, #24]	; (800765c <prvSwitchTimerLists+0xc4>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a04      	ldr	r2, [pc, #16]	; (8007658 <prvSwitchTimerLists+0xc0>)
 8007648:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800764a:	4a04      	ldr	r2, [pc, #16]	; (800765c <prvSwitchTimerLists+0xc4>)
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	6013      	str	r3, [r2, #0]
}
 8007650:	bf00      	nop
 8007652:	3718      	adds	r7, #24
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}
 8007658:	20000f84 	.word	0x20000f84
 800765c:	20000f88 	.word	0x20000f88

08007660 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007666:	f000 f965 	bl	8007934 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800766a:	4b15      	ldr	r3, [pc, #84]	; (80076c0 <prvCheckForValidListAndQueue+0x60>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d120      	bne.n	80076b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007672:	4814      	ldr	r0, [pc, #80]	; (80076c4 <prvCheckForValidListAndQueue+0x64>)
 8007674:	f7fe f848 	bl	8005708 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007678:	4813      	ldr	r0, [pc, #76]	; (80076c8 <prvCheckForValidListAndQueue+0x68>)
 800767a:	f7fe f845 	bl	8005708 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800767e:	4b13      	ldr	r3, [pc, #76]	; (80076cc <prvCheckForValidListAndQueue+0x6c>)
 8007680:	4a10      	ldr	r2, [pc, #64]	; (80076c4 <prvCheckForValidListAndQueue+0x64>)
 8007682:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007684:	4b12      	ldr	r3, [pc, #72]	; (80076d0 <prvCheckForValidListAndQueue+0x70>)
 8007686:	4a10      	ldr	r2, [pc, #64]	; (80076c8 <prvCheckForValidListAndQueue+0x68>)
 8007688:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800768a:	2300      	movs	r3, #0
 800768c:	9300      	str	r3, [sp, #0]
 800768e:	4b11      	ldr	r3, [pc, #68]	; (80076d4 <prvCheckForValidListAndQueue+0x74>)
 8007690:	4a11      	ldr	r2, [pc, #68]	; (80076d8 <prvCheckForValidListAndQueue+0x78>)
 8007692:	2110      	movs	r1, #16
 8007694:	200a      	movs	r0, #10
 8007696:	f7fe f953 	bl	8005940 <xQueueGenericCreateStatic>
 800769a:	4603      	mov	r3, r0
 800769c:	4a08      	ldr	r2, [pc, #32]	; (80076c0 <prvCheckForValidListAndQueue+0x60>)
 800769e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80076a0:	4b07      	ldr	r3, [pc, #28]	; (80076c0 <prvCheckForValidListAndQueue+0x60>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d005      	beq.n	80076b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80076a8:	4b05      	ldr	r3, [pc, #20]	; (80076c0 <prvCheckForValidListAndQueue+0x60>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	490b      	ldr	r1, [pc, #44]	; (80076dc <prvCheckForValidListAndQueue+0x7c>)
 80076ae:	4618      	mov	r0, r3
 80076b0:	f7fe fd6c 	bl	800618c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80076b4:	f000 f96e 	bl	8007994 <vPortExitCritical>
}
 80076b8:	bf00      	nop
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	20000f8c 	.word	0x20000f8c
 80076c4:	20000f5c 	.word	0x20000f5c
 80076c8:	20000f70 	.word	0x20000f70
 80076cc:	20000f84 	.word	0x20000f84
 80076d0:	20000f88 	.word	0x20000f88
 80076d4:	20001038 	.word	0x20001038
 80076d8:	20000f98 	.word	0x20000f98
 80076dc:	08007ff4 	.word	0x08007ff4

080076e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80076e0:	b480      	push	{r7}
 80076e2:	b085      	sub	sp, #20
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	60b9      	str	r1, [r7, #8]
 80076ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	3b04      	subs	r3, #4
 80076f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80076f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	3b04      	subs	r3, #4
 80076fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	f023 0201 	bic.w	r2, r3, #1
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	3b04      	subs	r3, #4
 800770e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007710:	4a0c      	ldr	r2, [pc, #48]	; (8007744 <pxPortInitialiseStack+0x64>)
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	3b14      	subs	r3, #20
 800771a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	3b04      	subs	r3, #4
 8007726:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f06f 0202 	mvn.w	r2, #2
 800772e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	3b20      	subs	r3, #32
 8007734:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007736:	68fb      	ldr	r3, [r7, #12]
}
 8007738:	4618      	mov	r0, r3
 800773a:	3714      	adds	r7, #20
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr
 8007744:	08007749 	.word	0x08007749

08007748 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007748:	b480      	push	{r7}
 800774a:	b085      	sub	sp, #20
 800774c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800774e:	2300      	movs	r3, #0
 8007750:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007752:	4b12      	ldr	r3, [pc, #72]	; (800779c <prvTaskExitError+0x54>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800775a:	d00a      	beq.n	8007772 <prvTaskExitError+0x2a>
	__asm volatile
 800775c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007760:	f383 8811 	msr	BASEPRI, r3
 8007764:	f3bf 8f6f 	isb	sy
 8007768:	f3bf 8f4f 	dsb	sy
 800776c:	60fb      	str	r3, [r7, #12]
}
 800776e:	bf00      	nop
 8007770:	e7fe      	b.n	8007770 <prvTaskExitError+0x28>
	__asm volatile
 8007772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007776:	f383 8811 	msr	BASEPRI, r3
 800777a:	f3bf 8f6f 	isb	sy
 800777e:	f3bf 8f4f 	dsb	sy
 8007782:	60bb      	str	r3, [r7, #8]
}
 8007784:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007786:	bf00      	nop
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d0fc      	beq.n	8007788 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800778e:	bf00      	nop
 8007790:	bf00      	nop
 8007792:	3714      	adds	r7, #20
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr
 800779c:	2000000c 	.word	0x2000000c

080077a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80077a0:	4b07      	ldr	r3, [pc, #28]	; (80077c0 <pxCurrentTCBConst2>)
 80077a2:	6819      	ldr	r1, [r3, #0]
 80077a4:	6808      	ldr	r0, [r1, #0]
 80077a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077aa:	f380 8809 	msr	PSP, r0
 80077ae:	f3bf 8f6f 	isb	sy
 80077b2:	f04f 0000 	mov.w	r0, #0
 80077b6:	f380 8811 	msr	BASEPRI, r0
 80077ba:	4770      	bx	lr
 80077bc:	f3af 8000 	nop.w

080077c0 <pxCurrentTCBConst2>:
 80077c0:	20000a5c 	.word	0x20000a5c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80077c4:	bf00      	nop
 80077c6:	bf00      	nop

080077c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80077c8:	4808      	ldr	r0, [pc, #32]	; (80077ec <prvPortStartFirstTask+0x24>)
 80077ca:	6800      	ldr	r0, [r0, #0]
 80077cc:	6800      	ldr	r0, [r0, #0]
 80077ce:	f380 8808 	msr	MSP, r0
 80077d2:	f04f 0000 	mov.w	r0, #0
 80077d6:	f380 8814 	msr	CONTROL, r0
 80077da:	b662      	cpsie	i
 80077dc:	b661      	cpsie	f
 80077de:	f3bf 8f4f 	dsb	sy
 80077e2:	f3bf 8f6f 	isb	sy
 80077e6:	df00      	svc	0
 80077e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80077ea:	bf00      	nop
 80077ec:	e000ed08 	.word	0xe000ed08

080077f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b086      	sub	sp, #24
 80077f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80077f6:	4b46      	ldr	r3, [pc, #280]	; (8007910 <xPortStartScheduler+0x120>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a46      	ldr	r2, [pc, #280]	; (8007914 <xPortStartScheduler+0x124>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d10a      	bne.n	8007816 <xPortStartScheduler+0x26>
	__asm volatile
 8007800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007804:	f383 8811 	msr	BASEPRI, r3
 8007808:	f3bf 8f6f 	isb	sy
 800780c:	f3bf 8f4f 	dsb	sy
 8007810:	613b      	str	r3, [r7, #16]
}
 8007812:	bf00      	nop
 8007814:	e7fe      	b.n	8007814 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007816:	4b3e      	ldr	r3, [pc, #248]	; (8007910 <xPortStartScheduler+0x120>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a3f      	ldr	r2, [pc, #252]	; (8007918 <xPortStartScheduler+0x128>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d10a      	bne.n	8007836 <xPortStartScheduler+0x46>
	__asm volatile
 8007820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007824:	f383 8811 	msr	BASEPRI, r3
 8007828:	f3bf 8f6f 	isb	sy
 800782c:	f3bf 8f4f 	dsb	sy
 8007830:	60fb      	str	r3, [r7, #12]
}
 8007832:	bf00      	nop
 8007834:	e7fe      	b.n	8007834 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007836:	4b39      	ldr	r3, [pc, #228]	; (800791c <xPortStartScheduler+0x12c>)
 8007838:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	b2db      	uxtb	r3, r3
 8007840:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	22ff      	movs	r2, #255	; 0xff
 8007846:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	b2db      	uxtb	r3, r3
 800784e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007850:	78fb      	ldrb	r3, [r7, #3]
 8007852:	b2db      	uxtb	r3, r3
 8007854:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007858:	b2da      	uxtb	r2, r3
 800785a:	4b31      	ldr	r3, [pc, #196]	; (8007920 <xPortStartScheduler+0x130>)
 800785c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800785e:	4b31      	ldr	r3, [pc, #196]	; (8007924 <xPortStartScheduler+0x134>)
 8007860:	2207      	movs	r2, #7
 8007862:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007864:	e009      	b.n	800787a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007866:	4b2f      	ldr	r3, [pc, #188]	; (8007924 <xPortStartScheduler+0x134>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	3b01      	subs	r3, #1
 800786c:	4a2d      	ldr	r2, [pc, #180]	; (8007924 <xPortStartScheduler+0x134>)
 800786e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007870:	78fb      	ldrb	r3, [r7, #3]
 8007872:	b2db      	uxtb	r3, r3
 8007874:	005b      	lsls	r3, r3, #1
 8007876:	b2db      	uxtb	r3, r3
 8007878:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800787a:	78fb      	ldrb	r3, [r7, #3]
 800787c:	b2db      	uxtb	r3, r3
 800787e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007882:	2b80      	cmp	r3, #128	; 0x80
 8007884:	d0ef      	beq.n	8007866 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007886:	4b27      	ldr	r3, [pc, #156]	; (8007924 <xPortStartScheduler+0x134>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f1c3 0307 	rsb	r3, r3, #7
 800788e:	2b04      	cmp	r3, #4
 8007890:	d00a      	beq.n	80078a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007896:	f383 8811 	msr	BASEPRI, r3
 800789a:	f3bf 8f6f 	isb	sy
 800789e:	f3bf 8f4f 	dsb	sy
 80078a2:	60bb      	str	r3, [r7, #8]
}
 80078a4:	bf00      	nop
 80078a6:	e7fe      	b.n	80078a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80078a8:	4b1e      	ldr	r3, [pc, #120]	; (8007924 <xPortStartScheduler+0x134>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	021b      	lsls	r3, r3, #8
 80078ae:	4a1d      	ldr	r2, [pc, #116]	; (8007924 <xPortStartScheduler+0x134>)
 80078b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80078b2:	4b1c      	ldr	r3, [pc, #112]	; (8007924 <xPortStartScheduler+0x134>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80078ba:	4a1a      	ldr	r2, [pc, #104]	; (8007924 <xPortStartScheduler+0x134>)
 80078bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	b2da      	uxtb	r2, r3
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80078c6:	4b18      	ldr	r3, [pc, #96]	; (8007928 <xPortStartScheduler+0x138>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a17      	ldr	r2, [pc, #92]	; (8007928 <xPortStartScheduler+0x138>)
 80078cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80078d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80078d2:	4b15      	ldr	r3, [pc, #84]	; (8007928 <xPortStartScheduler+0x138>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a14      	ldr	r2, [pc, #80]	; (8007928 <xPortStartScheduler+0x138>)
 80078d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80078dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80078de:	f000 f8dd 	bl	8007a9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80078e2:	4b12      	ldr	r3, [pc, #72]	; (800792c <xPortStartScheduler+0x13c>)
 80078e4:	2200      	movs	r2, #0
 80078e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80078e8:	f000 f8fc 	bl	8007ae4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80078ec:	4b10      	ldr	r3, [pc, #64]	; (8007930 <xPortStartScheduler+0x140>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a0f      	ldr	r2, [pc, #60]	; (8007930 <xPortStartScheduler+0x140>)
 80078f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80078f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80078f8:	f7ff ff66 	bl	80077c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80078fc:	f7ff f856 	bl	80069ac <vTaskSwitchContext>
	prvTaskExitError();
 8007900:	f7ff ff22 	bl	8007748 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007904:	2300      	movs	r3, #0
}
 8007906:	4618      	mov	r0, r3
 8007908:	3718      	adds	r7, #24
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	e000ed00 	.word	0xe000ed00
 8007914:	410fc271 	.word	0x410fc271
 8007918:	410fc270 	.word	0x410fc270
 800791c:	e000e400 	.word	0xe000e400
 8007920:	20001088 	.word	0x20001088
 8007924:	2000108c 	.word	0x2000108c
 8007928:	e000ed20 	.word	0xe000ed20
 800792c:	2000000c 	.word	0x2000000c
 8007930:	e000ef34 	.word	0xe000ef34

08007934 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007934:	b480      	push	{r7}
 8007936:	b083      	sub	sp, #12
 8007938:	af00      	add	r7, sp, #0
	__asm volatile
 800793a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800793e:	f383 8811 	msr	BASEPRI, r3
 8007942:	f3bf 8f6f 	isb	sy
 8007946:	f3bf 8f4f 	dsb	sy
 800794a:	607b      	str	r3, [r7, #4]
}
 800794c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800794e:	4b0f      	ldr	r3, [pc, #60]	; (800798c <vPortEnterCritical+0x58>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	3301      	adds	r3, #1
 8007954:	4a0d      	ldr	r2, [pc, #52]	; (800798c <vPortEnterCritical+0x58>)
 8007956:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007958:	4b0c      	ldr	r3, [pc, #48]	; (800798c <vPortEnterCritical+0x58>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	2b01      	cmp	r3, #1
 800795e:	d10f      	bne.n	8007980 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007960:	4b0b      	ldr	r3, [pc, #44]	; (8007990 <vPortEnterCritical+0x5c>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	b2db      	uxtb	r3, r3
 8007966:	2b00      	cmp	r3, #0
 8007968:	d00a      	beq.n	8007980 <vPortEnterCritical+0x4c>
	__asm volatile
 800796a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796e:	f383 8811 	msr	BASEPRI, r3
 8007972:	f3bf 8f6f 	isb	sy
 8007976:	f3bf 8f4f 	dsb	sy
 800797a:	603b      	str	r3, [r7, #0]
}
 800797c:	bf00      	nop
 800797e:	e7fe      	b.n	800797e <vPortEnterCritical+0x4a>
	}
}
 8007980:	bf00      	nop
 8007982:	370c      	adds	r7, #12
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr
 800798c:	2000000c 	.word	0x2000000c
 8007990:	e000ed04 	.word	0xe000ed04

08007994 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800799a:	4b12      	ldr	r3, [pc, #72]	; (80079e4 <vPortExitCritical+0x50>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d10a      	bne.n	80079b8 <vPortExitCritical+0x24>
	__asm volatile
 80079a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a6:	f383 8811 	msr	BASEPRI, r3
 80079aa:	f3bf 8f6f 	isb	sy
 80079ae:	f3bf 8f4f 	dsb	sy
 80079b2:	607b      	str	r3, [r7, #4]
}
 80079b4:	bf00      	nop
 80079b6:	e7fe      	b.n	80079b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80079b8:	4b0a      	ldr	r3, [pc, #40]	; (80079e4 <vPortExitCritical+0x50>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	3b01      	subs	r3, #1
 80079be:	4a09      	ldr	r2, [pc, #36]	; (80079e4 <vPortExitCritical+0x50>)
 80079c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80079c2:	4b08      	ldr	r3, [pc, #32]	; (80079e4 <vPortExitCritical+0x50>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d105      	bne.n	80079d6 <vPortExitCritical+0x42>
 80079ca:	2300      	movs	r3, #0
 80079cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	f383 8811 	msr	BASEPRI, r3
}
 80079d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80079d6:	bf00      	nop
 80079d8:	370c      	adds	r7, #12
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr
 80079e2:	bf00      	nop
 80079e4:	2000000c 	.word	0x2000000c
	...

080079f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80079f0:	f3ef 8009 	mrs	r0, PSP
 80079f4:	f3bf 8f6f 	isb	sy
 80079f8:	4b15      	ldr	r3, [pc, #84]	; (8007a50 <pxCurrentTCBConst>)
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	f01e 0f10 	tst.w	lr, #16
 8007a00:	bf08      	it	eq
 8007a02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007a06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a0a:	6010      	str	r0, [r2, #0]
 8007a0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007a10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007a14:	f380 8811 	msr	BASEPRI, r0
 8007a18:	f3bf 8f4f 	dsb	sy
 8007a1c:	f3bf 8f6f 	isb	sy
 8007a20:	f7fe ffc4 	bl	80069ac <vTaskSwitchContext>
 8007a24:	f04f 0000 	mov.w	r0, #0
 8007a28:	f380 8811 	msr	BASEPRI, r0
 8007a2c:	bc09      	pop	{r0, r3}
 8007a2e:	6819      	ldr	r1, [r3, #0]
 8007a30:	6808      	ldr	r0, [r1, #0]
 8007a32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a36:	f01e 0f10 	tst.w	lr, #16
 8007a3a:	bf08      	it	eq
 8007a3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007a40:	f380 8809 	msr	PSP, r0
 8007a44:	f3bf 8f6f 	isb	sy
 8007a48:	4770      	bx	lr
 8007a4a:	bf00      	nop
 8007a4c:	f3af 8000 	nop.w

08007a50 <pxCurrentTCBConst>:
 8007a50:	20000a5c 	.word	0x20000a5c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007a54:	bf00      	nop
 8007a56:	bf00      	nop

08007a58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a62:	f383 8811 	msr	BASEPRI, r3
 8007a66:	f3bf 8f6f 	isb	sy
 8007a6a:	f3bf 8f4f 	dsb	sy
 8007a6e:	607b      	str	r3, [r7, #4]
}
 8007a70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007a72:	f7fe fee1 	bl	8006838 <xTaskIncrementTick>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d003      	beq.n	8007a84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a7c:	4b06      	ldr	r3, [pc, #24]	; (8007a98 <xPortSysTickHandler+0x40>)
 8007a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a82:	601a      	str	r2, [r3, #0]
 8007a84:	2300      	movs	r3, #0
 8007a86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	f383 8811 	msr	BASEPRI, r3
}
 8007a8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007a90:	bf00      	nop
 8007a92:	3708      	adds	r7, #8
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}
 8007a98:	e000ed04 	.word	0xe000ed04

08007a9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007aa0:	4b0b      	ldr	r3, [pc, #44]	; (8007ad0 <vPortSetupTimerInterrupt+0x34>)
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007aa6:	4b0b      	ldr	r3, [pc, #44]	; (8007ad4 <vPortSetupTimerInterrupt+0x38>)
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007aac:	4b0a      	ldr	r3, [pc, #40]	; (8007ad8 <vPortSetupTimerInterrupt+0x3c>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a0a      	ldr	r2, [pc, #40]	; (8007adc <vPortSetupTimerInterrupt+0x40>)
 8007ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ab6:	099b      	lsrs	r3, r3, #6
 8007ab8:	4a09      	ldr	r2, [pc, #36]	; (8007ae0 <vPortSetupTimerInterrupt+0x44>)
 8007aba:	3b01      	subs	r3, #1
 8007abc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007abe:	4b04      	ldr	r3, [pc, #16]	; (8007ad0 <vPortSetupTimerInterrupt+0x34>)
 8007ac0:	2207      	movs	r2, #7
 8007ac2:	601a      	str	r2, [r3, #0]
}
 8007ac4:	bf00      	nop
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr
 8007ace:	bf00      	nop
 8007ad0:	e000e010 	.word	0xe000e010
 8007ad4:	e000e018 	.word	0xe000e018
 8007ad8:	20000000 	.word	0x20000000
 8007adc:	10624dd3 	.word	0x10624dd3
 8007ae0:	e000e014 	.word	0xe000e014

08007ae4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007ae4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007af4 <vPortEnableVFP+0x10>
 8007ae8:	6801      	ldr	r1, [r0, #0]
 8007aea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007aee:	6001      	str	r1, [r0, #0]
 8007af0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007af2:	bf00      	nop
 8007af4:	e000ed88 	.word	0xe000ed88

08007af8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007af8:	b480      	push	{r7}
 8007afa:	b085      	sub	sp, #20
 8007afc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007afe:	f3ef 8305 	mrs	r3, IPSR
 8007b02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2b0f      	cmp	r3, #15
 8007b08:	d914      	bls.n	8007b34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007b0a:	4a17      	ldr	r2, [pc, #92]	; (8007b68 <vPortValidateInterruptPriority+0x70>)
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	4413      	add	r3, r2
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007b14:	4b15      	ldr	r3, [pc, #84]	; (8007b6c <vPortValidateInterruptPriority+0x74>)
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	7afa      	ldrb	r2, [r7, #11]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d20a      	bcs.n	8007b34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b22:	f383 8811 	msr	BASEPRI, r3
 8007b26:	f3bf 8f6f 	isb	sy
 8007b2a:	f3bf 8f4f 	dsb	sy
 8007b2e:	607b      	str	r3, [r7, #4]
}
 8007b30:	bf00      	nop
 8007b32:	e7fe      	b.n	8007b32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007b34:	4b0e      	ldr	r3, [pc, #56]	; (8007b70 <vPortValidateInterruptPriority+0x78>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007b3c:	4b0d      	ldr	r3, [pc, #52]	; (8007b74 <vPortValidateInterruptPriority+0x7c>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d90a      	bls.n	8007b5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b48:	f383 8811 	msr	BASEPRI, r3
 8007b4c:	f3bf 8f6f 	isb	sy
 8007b50:	f3bf 8f4f 	dsb	sy
 8007b54:	603b      	str	r3, [r7, #0]
}
 8007b56:	bf00      	nop
 8007b58:	e7fe      	b.n	8007b58 <vPortValidateInterruptPriority+0x60>
	}
 8007b5a:	bf00      	nop
 8007b5c:	3714      	adds	r7, #20
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr
 8007b66:	bf00      	nop
 8007b68:	e000e3f0 	.word	0xe000e3f0
 8007b6c:	20001088 	.word	0x20001088
 8007b70:	e000ed0c 	.word	0xe000ed0c
 8007b74:	2000108c 	.word	0x2000108c

08007b78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b08a      	sub	sp, #40	; 0x28
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b80:	2300      	movs	r3, #0
 8007b82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b84:	f7fe fd9c 	bl	80066c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007b88:	4b5b      	ldr	r3, [pc, #364]	; (8007cf8 <pvPortMalloc+0x180>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d101      	bne.n	8007b94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007b90:	f000 f920 	bl	8007dd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007b94:	4b59      	ldr	r3, [pc, #356]	; (8007cfc <pvPortMalloc+0x184>)
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	4013      	ands	r3, r2
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	f040 8093 	bne.w	8007cc8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d01d      	beq.n	8007be4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007ba8:	2208      	movs	r2, #8
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	4413      	add	r3, r2
 8007bae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f003 0307 	and.w	r3, r3, #7
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d014      	beq.n	8007be4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f023 0307 	bic.w	r3, r3, #7
 8007bc0:	3308      	adds	r3, #8
 8007bc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f003 0307 	and.w	r3, r3, #7
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d00a      	beq.n	8007be4 <pvPortMalloc+0x6c>
	__asm volatile
 8007bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd2:	f383 8811 	msr	BASEPRI, r3
 8007bd6:	f3bf 8f6f 	isb	sy
 8007bda:	f3bf 8f4f 	dsb	sy
 8007bde:	617b      	str	r3, [r7, #20]
}
 8007be0:	bf00      	nop
 8007be2:	e7fe      	b.n	8007be2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d06e      	beq.n	8007cc8 <pvPortMalloc+0x150>
 8007bea:	4b45      	ldr	r3, [pc, #276]	; (8007d00 <pvPortMalloc+0x188>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d869      	bhi.n	8007cc8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007bf4:	4b43      	ldr	r3, [pc, #268]	; (8007d04 <pvPortMalloc+0x18c>)
 8007bf6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007bf8:	4b42      	ldr	r3, [pc, #264]	; (8007d04 <pvPortMalloc+0x18c>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bfe:	e004      	b.n	8007c0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d903      	bls.n	8007c1c <pvPortMalloc+0xa4>
 8007c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d1f1      	bne.n	8007c00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007c1c:	4b36      	ldr	r3, [pc, #216]	; (8007cf8 <pvPortMalloc+0x180>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d050      	beq.n	8007cc8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007c26:	6a3b      	ldr	r3, [r7, #32]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	2208      	movs	r2, #8
 8007c2c:	4413      	add	r3, r2
 8007c2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	6a3b      	ldr	r3, [r7, #32]
 8007c36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3a:	685a      	ldr	r2, [r3, #4]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	1ad2      	subs	r2, r2, r3
 8007c40:	2308      	movs	r3, #8
 8007c42:	005b      	lsls	r3, r3, #1
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d91f      	bls.n	8007c88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c50:	69bb      	ldr	r3, [r7, #24]
 8007c52:	f003 0307 	and.w	r3, r3, #7
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d00a      	beq.n	8007c70 <pvPortMalloc+0xf8>
	__asm volatile
 8007c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c5e:	f383 8811 	msr	BASEPRI, r3
 8007c62:	f3bf 8f6f 	isb	sy
 8007c66:	f3bf 8f4f 	dsb	sy
 8007c6a:	613b      	str	r3, [r7, #16]
}
 8007c6c:	bf00      	nop
 8007c6e:	e7fe      	b.n	8007c6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c72:	685a      	ldr	r2, [r3, #4]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	1ad2      	subs	r2, r2, r3
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c82:	69b8      	ldr	r0, [r7, #24]
 8007c84:	f000 f908 	bl	8007e98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c88:	4b1d      	ldr	r3, [pc, #116]	; (8007d00 <pvPortMalloc+0x188>)
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	1ad3      	subs	r3, r2, r3
 8007c92:	4a1b      	ldr	r2, [pc, #108]	; (8007d00 <pvPortMalloc+0x188>)
 8007c94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007c96:	4b1a      	ldr	r3, [pc, #104]	; (8007d00 <pvPortMalloc+0x188>)
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	4b1b      	ldr	r3, [pc, #108]	; (8007d08 <pvPortMalloc+0x190>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d203      	bcs.n	8007caa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007ca2:	4b17      	ldr	r3, [pc, #92]	; (8007d00 <pvPortMalloc+0x188>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a18      	ldr	r2, [pc, #96]	; (8007d08 <pvPortMalloc+0x190>)
 8007ca8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cac:	685a      	ldr	r2, [r3, #4]
 8007cae:	4b13      	ldr	r3, [pc, #76]	; (8007cfc <pvPortMalloc+0x184>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	431a      	orrs	r2, r3
 8007cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cba:	2200      	movs	r2, #0
 8007cbc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007cbe:	4b13      	ldr	r3, [pc, #76]	; (8007d0c <pvPortMalloc+0x194>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	4a11      	ldr	r2, [pc, #68]	; (8007d0c <pvPortMalloc+0x194>)
 8007cc6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007cc8:	f7fe fd08 	bl	80066dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	f003 0307 	and.w	r3, r3, #7
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d00a      	beq.n	8007cec <pvPortMalloc+0x174>
	__asm volatile
 8007cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cda:	f383 8811 	msr	BASEPRI, r3
 8007cde:	f3bf 8f6f 	isb	sy
 8007ce2:	f3bf 8f4f 	dsb	sy
 8007ce6:	60fb      	str	r3, [r7, #12]
}
 8007ce8:	bf00      	nop
 8007cea:	e7fe      	b.n	8007cea <pvPortMalloc+0x172>
	return pvReturn;
 8007cec:	69fb      	ldr	r3, [r7, #28]
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3728      	adds	r7, #40	; 0x28
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	20001c50 	.word	0x20001c50
 8007cfc:	20001c64 	.word	0x20001c64
 8007d00:	20001c54 	.word	0x20001c54
 8007d04:	20001c48 	.word	0x20001c48
 8007d08:	20001c58 	.word	0x20001c58
 8007d0c:	20001c5c 	.word	0x20001c5c

08007d10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b086      	sub	sp, #24
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d04d      	beq.n	8007dbe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007d22:	2308      	movs	r3, #8
 8007d24:	425b      	negs	r3, r3
 8007d26:	697a      	ldr	r2, [r7, #20]
 8007d28:	4413      	add	r3, r2
 8007d2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	685a      	ldr	r2, [r3, #4]
 8007d34:	4b24      	ldr	r3, [pc, #144]	; (8007dc8 <vPortFree+0xb8>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4013      	ands	r3, r2
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d10a      	bne.n	8007d54 <vPortFree+0x44>
	__asm volatile
 8007d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d42:	f383 8811 	msr	BASEPRI, r3
 8007d46:	f3bf 8f6f 	isb	sy
 8007d4a:	f3bf 8f4f 	dsb	sy
 8007d4e:	60fb      	str	r3, [r7, #12]
}
 8007d50:	bf00      	nop
 8007d52:	e7fe      	b.n	8007d52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d00a      	beq.n	8007d72 <vPortFree+0x62>
	__asm volatile
 8007d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d60:	f383 8811 	msr	BASEPRI, r3
 8007d64:	f3bf 8f6f 	isb	sy
 8007d68:	f3bf 8f4f 	dsb	sy
 8007d6c:	60bb      	str	r3, [r7, #8]
}
 8007d6e:	bf00      	nop
 8007d70:	e7fe      	b.n	8007d70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	685a      	ldr	r2, [r3, #4]
 8007d76:	4b14      	ldr	r3, [pc, #80]	; (8007dc8 <vPortFree+0xb8>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4013      	ands	r3, r2
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d01e      	beq.n	8007dbe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d11a      	bne.n	8007dbe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	685a      	ldr	r2, [r3, #4]
 8007d8c:	4b0e      	ldr	r3, [pc, #56]	; (8007dc8 <vPortFree+0xb8>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	43db      	mvns	r3, r3
 8007d92:	401a      	ands	r2, r3
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007d98:	f7fe fc92 	bl	80066c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	685a      	ldr	r2, [r3, #4]
 8007da0:	4b0a      	ldr	r3, [pc, #40]	; (8007dcc <vPortFree+0xbc>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4413      	add	r3, r2
 8007da6:	4a09      	ldr	r2, [pc, #36]	; (8007dcc <vPortFree+0xbc>)
 8007da8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007daa:	6938      	ldr	r0, [r7, #16]
 8007dac:	f000 f874 	bl	8007e98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007db0:	4b07      	ldr	r3, [pc, #28]	; (8007dd0 <vPortFree+0xc0>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	3301      	adds	r3, #1
 8007db6:	4a06      	ldr	r2, [pc, #24]	; (8007dd0 <vPortFree+0xc0>)
 8007db8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007dba:	f7fe fc8f 	bl	80066dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007dbe:	bf00      	nop
 8007dc0:	3718      	adds	r7, #24
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	bf00      	nop
 8007dc8:	20001c64 	.word	0x20001c64
 8007dcc:	20001c54 	.word	0x20001c54
 8007dd0:	20001c60 	.word	0x20001c60

08007dd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b085      	sub	sp, #20
 8007dd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007dda:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007dde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007de0:	4b27      	ldr	r3, [pc, #156]	; (8007e80 <prvHeapInit+0xac>)
 8007de2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f003 0307 	and.w	r3, r3, #7
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00c      	beq.n	8007e08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	3307      	adds	r3, #7
 8007df2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f023 0307 	bic.w	r3, r3, #7
 8007dfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007dfc:	68ba      	ldr	r2, [r7, #8]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	1ad3      	subs	r3, r2, r3
 8007e02:	4a1f      	ldr	r2, [pc, #124]	; (8007e80 <prvHeapInit+0xac>)
 8007e04:	4413      	add	r3, r2
 8007e06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007e0c:	4a1d      	ldr	r2, [pc, #116]	; (8007e84 <prvHeapInit+0xb0>)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007e12:	4b1c      	ldr	r3, [pc, #112]	; (8007e84 <prvHeapInit+0xb0>)
 8007e14:	2200      	movs	r2, #0
 8007e16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	68ba      	ldr	r2, [r7, #8]
 8007e1c:	4413      	add	r3, r2
 8007e1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007e20:	2208      	movs	r2, #8
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	1a9b      	subs	r3, r3, r2
 8007e26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f023 0307 	bic.w	r3, r3, #7
 8007e2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	4a15      	ldr	r2, [pc, #84]	; (8007e88 <prvHeapInit+0xb4>)
 8007e34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007e36:	4b14      	ldr	r3, [pc, #80]	; (8007e88 <prvHeapInit+0xb4>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007e3e:	4b12      	ldr	r3, [pc, #72]	; (8007e88 <prvHeapInit+0xb4>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	2200      	movs	r2, #0
 8007e44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	68fa      	ldr	r2, [r7, #12]
 8007e4e:	1ad2      	subs	r2, r2, r3
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e54:	4b0c      	ldr	r3, [pc, #48]	; (8007e88 <prvHeapInit+0xb4>)
 8007e56:	681a      	ldr	r2, [r3, #0]
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	4a0a      	ldr	r2, [pc, #40]	; (8007e8c <prvHeapInit+0xb8>)
 8007e62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	4a09      	ldr	r2, [pc, #36]	; (8007e90 <prvHeapInit+0xbc>)
 8007e6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e6c:	4b09      	ldr	r3, [pc, #36]	; (8007e94 <prvHeapInit+0xc0>)
 8007e6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007e72:	601a      	str	r2, [r3, #0]
}
 8007e74:	bf00      	nop
 8007e76:	3714      	adds	r7, #20
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr
 8007e80:	20001090 	.word	0x20001090
 8007e84:	20001c48 	.word	0x20001c48
 8007e88:	20001c50 	.word	0x20001c50
 8007e8c:	20001c58 	.word	0x20001c58
 8007e90:	20001c54 	.word	0x20001c54
 8007e94:	20001c64 	.word	0x20001c64

08007e98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ea0:	4b28      	ldr	r3, [pc, #160]	; (8007f44 <prvInsertBlockIntoFreeList+0xac>)
 8007ea2:	60fb      	str	r3, [r7, #12]
 8007ea4:	e002      	b.n	8007eac <prvInsertBlockIntoFreeList+0x14>
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	60fb      	str	r3, [r7, #12]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d8f7      	bhi.n	8007ea6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	68ba      	ldr	r2, [r7, #8]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d108      	bne.n	8007eda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	685a      	ldr	r2, [r3, #4]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	441a      	add	r2, r3
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	68ba      	ldr	r2, [r7, #8]
 8007ee4:	441a      	add	r2, r3
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d118      	bne.n	8007f20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	4b15      	ldr	r3, [pc, #84]	; (8007f48 <prvInsertBlockIntoFreeList+0xb0>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d00d      	beq.n	8007f16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	685a      	ldr	r2, [r3, #4]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	441a      	add	r2, r3
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	601a      	str	r2, [r3, #0]
 8007f14:	e008      	b.n	8007f28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007f16:	4b0c      	ldr	r3, [pc, #48]	; (8007f48 <prvInsertBlockIntoFreeList+0xb0>)
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	601a      	str	r2, [r3, #0]
 8007f1e:	e003      	b.n	8007f28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007f28:	68fa      	ldr	r2, [r7, #12]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d002      	beq.n	8007f36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f36:	bf00      	nop
 8007f38:	3714      	adds	r7, #20
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr
 8007f42:	bf00      	nop
 8007f44:	20001c48 	.word	0x20001c48
 8007f48:	20001c50 	.word	0x20001c50

08007f4c <__libc_init_array>:
 8007f4c:	b570      	push	{r4, r5, r6, lr}
 8007f4e:	4d0d      	ldr	r5, [pc, #52]	; (8007f84 <__libc_init_array+0x38>)
 8007f50:	4c0d      	ldr	r4, [pc, #52]	; (8007f88 <__libc_init_array+0x3c>)
 8007f52:	1b64      	subs	r4, r4, r5
 8007f54:	10a4      	asrs	r4, r4, #2
 8007f56:	2600      	movs	r6, #0
 8007f58:	42a6      	cmp	r6, r4
 8007f5a:	d109      	bne.n	8007f70 <__libc_init_array+0x24>
 8007f5c:	4d0b      	ldr	r5, [pc, #44]	; (8007f8c <__libc_init_array+0x40>)
 8007f5e:	4c0c      	ldr	r4, [pc, #48]	; (8007f90 <__libc_init_array+0x44>)
 8007f60:	f000 f82e 	bl	8007fc0 <_init>
 8007f64:	1b64      	subs	r4, r4, r5
 8007f66:	10a4      	asrs	r4, r4, #2
 8007f68:	2600      	movs	r6, #0
 8007f6a:	42a6      	cmp	r6, r4
 8007f6c:	d105      	bne.n	8007f7a <__libc_init_array+0x2e>
 8007f6e:	bd70      	pop	{r4, r5, r6, pc}
 8007f70:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f74:	4798      	blx	r3
 8007f76:	3601      	adds	r6, #1
 8007f78:	e7ee      	b.n	8007f58 <__libc_init_array+0xc>
 8007f7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f7e:	4798      	blx	r3
 8007f80:	3601      	adds	r6, #1
 8007f82:	e7f2      	b.n	8007f6a <__libc_init_array+0x1e>
 8007f84:	08008098 	.word	0x08008098
 8007f88:	08008098 	.word	0x08008098
 8007f8c:	08008098 	.word	0x08008098
 8007f90:	0800809c 	.word	0x0800809c

08007f94 <memcpy>:
 8007f94:	440a      	add	r2, r1
 8007f96:	4291      	cmp	r1, r2
 8007f98:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f9c:	d100      	bne.n	8007fa0 <memcpy+0xc>
 8007f9e:	4770      	bx	lr
 8007fa0:	b510      	push	{r4, lr}
 8007fa2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fa6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007faa:	4291      	cmp	r1, r2
 8007fac:	d1f9      	bne.n	8007fa2 <memcpy+0xe>
 8007fae:	bd10      	pop	{r4, pc}

08007fb0 <memset>:
 8007fb0:	4402      	add	r2, r0
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d100      	bne.n	8007fba <memset+0xa>
 8007fb8:	4770      	bx	lr
 8007fba:	f803 1b01 	strb.w	r1, [r3], #1
 8007fbe:	e7f9      	b.n	8007fb4 <memset+0x4>

08007fc0 <_init>:
 8007fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fc2:	bf00      	nop
 8007fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fc6:	bc08      	pop	{r3}
 8007fc8:	469e      	mov	lr, r3
 8007fca:	4770      	bx	lr

08007fcc <_fini>:
 8007fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fce:	bf00      	nop
 8007fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fd2:	bc08      	pop	{r3}
 8007fd4:	469e      	mov	lr, r3
 8007fd6:	4770      	bx	lr
