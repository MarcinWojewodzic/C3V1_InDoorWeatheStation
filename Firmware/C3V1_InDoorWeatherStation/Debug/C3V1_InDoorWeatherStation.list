
C3V1_InDoorWeatherStation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ef78  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000884  0800f138  0800f138  0001f138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f9bc  0800f9bc  00020254  2**0
                  CONTENTS
  4 .ARM          00000008  0800f9bc  0800f9bc  0001f9bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f9c4  0800f9c4  00020254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f9c4  0800f9c4  0001f9c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f9c8  0800f9c8  0001f9c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000254  20000000  0800f9cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000442c  20000254  0800fc20  00020254  2**2
                  ALLOC
 10 ._user_heap_stack 00000e00  20004680  0800fc20  00024680  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020f32  00000000  00000000  00020284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046f2  00000000  00000000  000411b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001980  00000000  00000000  000458a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001768  00000000  00000000  00047228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031822  00000000  00000000  00048990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000219d2  00000000  00000000  0007a1b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00120b1f  00000000  00000000  0009bb84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001bc6a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d30  00000000  00000000  001bc6f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000254 	.word	0x20000254
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800f120 	.word	0x0800f120

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000258 	.word	0x20000258
 80001fc:	0800f120 	.word	0x0800f120

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9aa 	b.w	8001024 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468e      	mov	lr, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d14d      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d62:	428a      	cmp	r2, r1
 8000d64:	4694      	mov	ip, r2
 8000d66:	d969      	bls.n	8000e3c <__udivmoddi4+0xe8>
 8000d68:	fab2 f282 	clz	r2, r2
 8000d6c:	b152      	cbz	r2, 8000d84 <__udivmoddi4+0x30>
 8000d6e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d72:	f1c2 0120 	rsb	r1, r2, #32
 8000d76:	fa20 f101 	lsr.w	r1, r0, r1
 8000d7a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d82:	4094      	lsls	r4, r2
 8000d84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d88:	0c21      	lsrs	r1, r4, #16
 8000d8a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d8e:	fa1f f78c 	uxth.w	r7, ip
 8000d92:	fb08 e316 	mls	r3, r8, r6, lr
 8000d96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d9a:	fb06 f107 	mul.w	r1, r6, r7
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000daa:	f080 811f 	bcs.w	8000fec <__udivmoddi4+0x298>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 811c 	bls.w	8000fec <__udivmoddi4+0x298>
 8000db4:	3e02      	subs	r6, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 f707 	mul.w	r7, r0, r7
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	d90a      	bls.n	8000de6 <__udivmoddi4+0x92>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd8:	f080 810a 	bcs.w	8000ff0 <__udivmoddi4+0x29c>
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	f240 8107 	bls.w	8000ff0 <__udivmoddi4+0x29c>
 8000de2:	4464      	add	r4, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dea:	1be4      	subs	r4, r4, r7
 8000dec:	2600      	movs	r6, #0
 8000dee:	b11d      	cbz	r5, 8000df8 <__udivmoddi4+0xa4>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c5 4300 	strd	r4, r3, [r5]
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d909      	bls.n	8000e16 <__udivmoddi4+0xc2>
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	f000 80ef 	beq.w	8000fe6 <__udivmoddi4+0x292>
 8000e08:	2600      	movs	r6, #0
 8000e0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e0e:	4630      	mov	r0, r6
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	fab3 f683 	clz	r6, r3
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	d14a      	bne.n	8000eb4 <__udivmoddi4+0x160>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d302      	bcc.n	8000e28 <__udivmoddi4+0xd4>
 8000e22:	4282      	cmp	r2, r0
 8000e24:	f200 80f9 	bhi.w	800101a <__udivmoddi4+0x2c6>
 8000e28:	1a84      	subs	r4, r0, r2
 8000e2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e2e:	2001      	movs	r0, #1
 8000e30:	469e      	mov	lr, r3
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	d0e0      	beq.n	8000df8 <__udivmoddi4+0xa4>
 8000e36:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e3a:	e7dd      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000e3c:	b902      	cbnz	r2, 8000e40 <__udivmoddi4+0xec>
 8000e3e:	deff      	udf	#255	; 0xff
 8000e40:	fab2 f282 	clz	r2, r2
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	f040 8092 	bne.w	8000f6e <__udivmoddi4+0x21a>
 8000e4a:	eba1 010c 	sub.w	r1, r1, ip
 8000e4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	2601      	movs	r6, #1
 8000e58:	0c20      	lsrs	r0, r4, #16
 8000e5a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e5e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e62:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e66:	fb0e f003 	mul.w	r0, lr, r3
 8000e6a:	4288      	cmp	r0, r1
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x12c>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x12a>
 8000e78:	4288      	cmp	r0, r1
 8000e7a:	f200 80cb 	bhi.w	8001014 <__udivmoddi4+0x2c0>
 8000e7e:	4643      	mov	r3, r8
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e88:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e90:	fb0e fe00 	mul.w	lr, lr, r0
 8000e94:	45a6      	cmp	lr, r4
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x156>
 8000e98:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea0:	d202      	bcs.n	8000ea8 <__udivmoddi4+0x154>
 8000ea2:	45a6      	cmp	lr, r4
 8000ea4:	f200 80bb 	bhi.w	800101e <__udivmoddi4+0x2ca>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000eb2:	e79c      	b.n	8000dee <__udivmoddi4+0x9a>
 8000eb4:	f1c6 0720 	rsb	r7, r6, #32
 8000eb8:	40b3      	lsls	r3, r6
 8000eba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ebe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ec2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ec6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eca:	431c      	orrs	r4, r3
 8000ecc:	40f9      	lsrs	r1, r7
 8000ece:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eda:	0c20      	lsrs	r0, r4, #16
 8000edc:	fa1f fe8c 	uxth.w	lr, ip
 8000ee0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ee4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ee8:	fb08 f00e 	mul.w	r0, r8, lr
 8000eec:	4288      	cmp	r0, r1
 8000eee:	fa02 f206 	lsl.w	r2, r2, r6
 8000ef2:	d90b      	bls.n	8000f0c <__udivmoddi4+0x1b8>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000efc:	f080 8088 	bcs.w	8001010 <__udivmoddi4+0x2bc>
 8000f00:	4288      	cmp	r0, r1
 8000f02:	f240 8085 	bls.w	8001010 <__udivmoddi4+0x2bc>
 8000f06:	f1a8 0802 	sub.w	r8, r8, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	1a09      	subs	r1, r1, r0
 8000f0e:	b2a4      	uxth	r4, r4
 8000f10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f14:	fb09 1110 	mls	r1, r9, r0, r1
 8000f18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f20:	458e      	cmp	lr, r1
 8000f22:	d908      	bls.n	8000f36 <__udivmoddi4+0x1e2>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f2c:	d26c      	bcs.n	8001008 <__udivmoddi4+0x2b4>
 8000f2e:	458e      	cmp	lr, r1
 8000f30:	d96a      	bls.n	8001008 <__udivmoddi4+0x2b4>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4461      	add	r1, ip
 8000f36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f3e:	eba1 010e 	sub.w	r1, r1, lr
 8000f42:	42a1      	cmp	r1, r4
 8000f44:	46c8      	mov	r8, r9
 8000f46:	46a6      	mov	lr, r4
 8000f48:	d356      	bcc.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f4a:	d053      	beq.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f4c:	b15d      	cbz	r5, 8000f66 <__udivmoddi4+0x212>
 8000f4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f52:	eb61 010e 	sbc.w	r1, r1, lr
 8000f56:	fa01 f707 	lsl.w	r7, r1, r7
 8000f5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f5e:	40f1      	lsrs	r1, r6
 8000f60:	431f      	orrs	r7, r3
 8000f62:	e9c5 7100 	strd	r7, r1, [r5]
 8000f66:	2600      	movs	r6, #0
 8000f68:	4631      	mov	r1, r6
 8000f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6e:	f1c2 0320 	rsb	r3, r2, #32
 8000f72:	40d8      	lsrs	r0, r3
 8000f74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f78:	fa21 f303 	lsr.w	r3, r1, r3
 8000f7c:	4091      	lsls	r1, r2
 8000f7e:	4301      	orrs	r1, r0
 8000f80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f84:	fa1f fe8c 	uxth.w	lr, ip
 8000f88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f90:	0c0b      	lsrs	r3, r1, #16
 8000f92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f96:	fb00 f60e 	mul.w	r6, r0, lr
 8000f9a:	429e      	cmp	r6, r3
 8000f9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000fa0:	d908      	bls.n	8000fb4 <__udivmoddi4+0x260>
 8000fa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000faa:	d22f      	bcs.n	800100c <__udivmoddi4+0x2b8>
 8000fac:	429e      	cmp	r6, r3
 8000fae:	d92d      	bls.n	800100c <__udivmoddi4+0x2b8>
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	4463      	add	r3, ip
 8000fb4:	1b9b      	subs	r3, r3, r6
 8000fb6:	b289      	uxth	r1, r1
 8000fb8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fbc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fc4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fc8:	428b      	cmp	r3, r1
 8000fca:	d908      	bls.n	8000fde <__udivmoddi4+0x28a>
 8000fcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fd0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fd4:	d216      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fd6:	428b      	cmp	r3, r1
 8000fd8:	d914      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fda:	3e02      	subs	r6, #2
 8000fdc:	4461      	add	r1, ip
 8000fde:	1ac9      	subs	r1, r1, r3
 8000fe0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fe4:	e738      	b.n	8000e58 <__udivmoddi4+0x104>
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e705      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e3      	b.n	8000db8 <__udivmoddi4+0x64>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6f8      	b.n	8000de6 <__udivmoddi4+0x92>
 8000ff4:	454b      	cmp	r3, r9
 8000ff6:	d2a9      	bcs.n	8000f4c <__udivmoddi4+0x1f8>
 8000ff8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ffc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001000:	3801      	subs	r0, #1
 8001002:	e7a3      	b.n	8000f4c <__udivmoddi4+0x1f8>
 8001004:	4646      	mov	r6, r8
 8001006:	e7ea      	b.n	8000fde <__udivmoddi4+0x28a>
 8001008:	4620      	mov	r0, r4
 800100a:	e794      	b.n	8000f36 <__udivmoddi4+0x1e2>
 800100c:	4640      	mov	r0, r8
 800100e:	e7d1      	b.n	8000fb4 <__udivmoddi4+0x260>
 8001010:	46d0      	mov	r8, sl
 8001012:	e77b      	b.n	8000f0c <__udivmoddi4+0x1b8>
 8001014:	3b02      	subs	r3, #2
 8001016:	4461      	add	r1, ip
 8001018:	e732      	b.n	8000e80 <__udivmoddi4+0x12c>
 800101a:	4630      	mov	r0, r6
 800101c:	e709      	b.n	8000e32 <__udivmoddi4+0xde>
 800101e:	4464      	add	r4, ip
 8001020:	3802      	subs	r0, #2
 8001022:	e742      	b.n	8000eaa <__udivmoddi4+0x156>

08001024 <__aeabi_idiv0>:
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <fram_CsLow>:
#include "main.h"
#include "spi.h"
#include "gpio.h"
#include "fram.h"
void fram_CsLow(fram_t *fram)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(fram->cs_port, fram->cs_pin, 0);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6898      	ldr	r0, [r3, #8]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	8a5b      	ldrh	r3, [r3, #18]
 8001038:	2200      	movs	r2, #0
 800103a:	4619      	mov	r1, r3
 800103c:	f003 fd48 	bl	8004ad0 <HAL_GPIO_WritePin>
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <fram_CsHigh>:
void fram_CsHigh(fram_t *fram)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(fram->cs_port, fram->cs_pin, 1);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6898      	ldr	r0, [r3, #8]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	8a5b      	ldrh	r3, [r3, #18]
 8001058:	2201      	movs	r2, #1
 800105a:	4619      	mov	r1, r3
 800105c:	f003 fd38 	bl	8004ad0 <HAL_GPIO_WritePin>
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <fram_SetWELBit>:
void fram_SetWELBit(fram_t *fram)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	uint8_t com=WREN;
 8001070:	2306      	movs	r3, #6
 8001072:	73fb      	strb	r3, [r7, #15]
	fram_CsLow(fram);
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff ffd7 	bl	8001028 <fram_CsLow>
	HAL_SPI_Transmit(fram->fram_spi, &com, 1, 1000);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6818      	ldr	r0, [r3, #0]
 800107e:	f107 010f 	add.w	r1, r7, #15
 8001082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001086:	2201      	movs	r2, #1
 8001088:	f005 fdf7 	bl	8006c7a <HAL_SPI_Transmit>
	fram_CsHigh(fram);
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff ffdb 	bl	8001048 <fram_CsHigh>
}
 8001092:	bf00      	nop
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <fram_SetProtectedBlocs>:
void fram_SetProtectedBlocs(fram_t *fram,uint8_t blocs)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b084      	sub	sp, #16
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
 80010a2:	460b      	mov	r3, r1
 80010a4:	70fb      	strb	r3, [r7, #3]
	if(blocs>3)
 80010a6:	78fb      	ldrb	r3, [r7, #3]
 80010a8:	2b03      	cmp	r3, #3
 80010aa:	d901      	bls.n	80010b0 <fram_SetProtectedBlocs+0x16>
	{
		blocs=3;
 80010ac:	2303      	movs	r3, #3
 80010ae:	70fb      	strb	r3, [r7, #3]
	}
	uint8_t data[2];
	data[0]=WRSR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	733b      	strb	r3, [r7, #12]
	data[1]=(blocs<<2);
 80010b4:	78fb      	ldrb	r3, [r7, #3]
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	737b      	strb	r3, [r7, #13]
	fram_SetWELBit(fram);
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ffd3 	bl	8001068 <fram_SetWELBit>
	fram_CsLow(fram);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff ffb0 	bl	8001028 <fram_CsLow>
	HAL_SPI_Transmit(fram->fram_spi, data, 2, 1000);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6818      	ldr	r0, [r3, #0]
 80010cc:	f107 010c 	add.w	r1, r7, #12
 80010d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d4:	2202      	movs	r2, #2
 80010d6:	f005 fdd0 	bl	8006c7a <HAL_SPI_Transmit>
	fram_CsHigh(fram);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff ffb4 	bl	8001048 <fram_CsHigh>
}
 80010e0:	bf00      	nop
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <fram_ReadSreg>:
uint8_t fram_ReadSreg(fram_t *fram)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	fram_CsLow(fram);
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff ff99 	bl	8001028 <fram_CsLow>
	uint8_t _sreg;
	uint8_t com=RDSR;
 80010f6:	2305      	movs	r3, #5
 80010f8:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(fram->fram_spi, &com, 1, 1000);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6818      	ldr	r0, [r3, #0]
 80010fe:	f107 010e 	add.w	r1, r7, #14
 8001102:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001106:	2201      	movs	r2, #1
 8001108:	f005 fdb7 	bl	8006c7a <HAL_SPI_Transmit>
	HAL_SPI_Receive(fram->fram_spi, &_sreg, 1, 1000);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6818      	ldr	r0, [r3, #0]
 8001110:	f107 010f 	add.w	r1, r7, #15
 8001114:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001118:	2201      	movs	r2, #1
 800111a:	f005 ff1c 	bl	8006f56 <HAL_SPI_Receive>
	fram_CsHigh(fram);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff ff92 	bl	8001048 <fram_CsHigh>
	return _sreg;
 8001124:	7bfb      	ldrb	r3, [r7, #15]
}
 8001126:	4618      	mov	r0, r3
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <fram_ReadID>:
	HAL_SPI_Transmit(fram->fram_spi, data, 3, 1000);
	HAL_SPI_Receive(fram->fram_spi, buff, length, 1000);
	fram_CsHigh(fram);
}
uint32_t fram_ReadID(fram_t *fram)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b084      	sub	sp, #16
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
	uint8_t com,id[4];
	com=RDID;
 8001136:	239f      	movs	r3, #159	; 0x9f
 8001138:	73fb      	strb	r3, [r7, #15]
	fram_CsLow(fram);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff ff74 	bl	8001028 <fram_CsLow>
	HAL_SPI_Transmit(fram->fram_spi, &com, 1, 1000);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6818      	ldr	r0, [r3, #0]
 8001144:	f107 010f 	add.w	r1, r7, #15
 8001148:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114c:	2201      	movs	r2, #1
 800114e:	f005 fd94 	bl	8006c7a <HAL_SPI_Transmit>
	HAL_SPI_Receive(fram->fram_spi, id, 4, 1000);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6818      	ldr	r0, [r3, #0]
 8001156:	f107 0108 	add.w	r1, r7, #8
 800115a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115e:	2204      	movs	r2, #4
 8001160:	f005 fef9 	bl	8006f56 <HAL_SPI_Receive>
	fram_CsHigh(fram);
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff ff6f 	bl	8001048 <fram_CsHigh>
	return ((id[0]<<24)|(id[1]<<16)|(id[2]<<8)|id[3]);
 800116a:	7a3b      	ldrb	r3, [r7, #8]
 800116c:	061a      	lsls	r2, r3, #24
 800116e:	7a7b      	ldrb	r3, [r7, #9]
 8001170:	041b      	lsls	r3, r3, #16
 8001172:	431a      	orrs	r2, r3
 8001174:	7abb      	ldrb	r3, [r7, #10]
 8001176:	021b      	lsls	r3, r3, #8
 8001178:	4313      	orrs	r3, r2
 800117a:	7afa      	ldrb	r2, [r7, #11]
 800117c:	4313      	orrs	r3, r2
}
 800117e:	4618      	mov	r0, r3
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <fram_Init>:
void fram_Init(fram_t *fram,SPI_HandleTypeDef *spi,GPIO_TypeDef *_hold_port,GPIO_TypeDef *_cs_port,GPIO_TypeDef *_wp_port,uint16_t _hold_pin,uint16_t _cs_pin,uint16_t _wp_pin)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b084      	sub	sp, #16
 800118a:	af00      	add	r7, sp, #0
 800118c:	60f8      	str	r0, [r7, #12]
 800118e:	60b9      	str	r1, [r7, #8]
 8001190:	607a      	str	r2, [r7, #4]
 8001192:	603b      	str	r3, [r7, #0]
	fram->fram_spi=spi;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	68ba      	ldr	r2, [r7, #8]
 8001198:	601a      	str	r2, [r3, #0]
	fram->hold_port=_hold_port;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	605a      	str	r2, [r3, #4]
	fram->hold_pin=_hold_pin;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	8bba      	ldrh	r2, [r7, #28]
 80011a4:	821a      	strh	r2, [r3, #16]
	fram->cs_port=_cs_port;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	609a      	str	r2, [r3, #8]
	fram->cs_pin=_cs_pin;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	8c3a      	ldrh	r2, [r7, #32]
 80011b0:	825a      	strh	r2, [r3, #18]
	fram->wp_port=_wp_port;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	60da      	str	r2, [r3, #12]
	fram->wp_pin=_wp_pin;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80011bc:	829a      	strh	r2, [r3, #20]
	HAL_GPIO_WritePin(fram->hold_port, fram->hold_pin, 1);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	6858      	ldr	r0, [r3, #4]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	8a1b      	ldrh	r3, [r3, #16]
 80011c6:	2201      	movs	r2, #1
 80011c8:	4619      	mov	r1, r3
 80011ca:	f003 fc81 	bl	8004ad0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(fram->wp_port, fram->wp_pin, 1);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	68d8      	ldr	r0, [r3, #12]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	8a9b      	ldrh	r3, [r3, #20]
 80011d6:	2201      	movs	r2, #1
 80011d8:	4619      	mov	r1, r3
 80011da:	f003 fc79 	bl	8004ad0 <HAL_GPIO_WritePin>
	fram_SetProtectedBlocs(fram, 0);
 80011de:	2100      	movs	r1, #0
 80011e0:	68f8      	ldr	r0, [r7, #12]
 80011e2:	f7ff ff5a 	bl	800109a <fram_SetProtectedBlocs>
	fram->sreg=fram_ReadSreg(fram);
 80011e6:	68f8      	ldr	r0, [r7, #12]
 80011e8:	f7ff ff7e 	bl	80010e8 <fram_ReadSreg>
 80011ec:	4603      	mov	r3, r0
 80011ee:	461a      	mov	r2, r3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	759a      	strb	r2, [r3, #22]
	fram->framID=fram_ReadID(fram);
 80011f4:	68f8      	ldr	r0, [r7, #12]
 80011f6:	f7ff ff9a 	bl	800112e <fram_ReadID>
 80011fa:	4602      	mov	r2, r0
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	619a      	str	r2, [r3, #24]
}
 8001200:	bf00      	nop
 8001202:	3710      	adds	r7, #16
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <GFX_DrawPixelScreen>:

#if USING_STRINGS == 1
const uint8_t *font;
uint8_t size = 1;
static void GFX_DrawPixelScreen(uint16_t x, uint16_t y, uint8_t color, Screen_TypeDef Screen)
{
 8001208:	b590      	push	{r4, r7, lr}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	4604      	mov	r4, r0
 8001210:	4608      	mov	r0, r1
 8001212:	4611      	mov	r1, r2
 8001214:	461a      	mov	r2, r3
 8001216:	4623      	mov	r3, r4
 8001218:	80fb      	strh	r3, [r7, #6]
 800121a:	4603      	mov	r3, r0
 800121c:	80bb      	strh	r3, [r7, #4]
 800121e:	460b      	mov	r3, r1
 8001220:	70fb      	strb	r3, [r7, #3]
 8001222:	4613      	mov	r3, r2
 8001224:	70bb      	strb	r3, [r7, #2]
   if(Screen == OLED)
 8001226:	78bb      	ldrb	r3, [r7, #2]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d108      	bne.n	800123e <GFX_DrawPixelScreen+0x36>
   {
      GFX_DrawPixelOled(x, y, color);
 800122c:	88fb      	ldrh	r3, [r7, #6]
 800122e:	b2db      	uxtb	r3, r3
 8001230:	88ba      	ldrh	r2, [r7, #4]
 8001232:	b2d1      	uxtb	r1, r2
 8001234:	78fa      	ldrb	r2, [r7, #3]
 8001236:	4618      	mov	r0, r3
 8001238:	f001 ff64 	bl	8003104 <ssd1306_set_pixel>
   }
   else if(Screen == E_PAPIER)
   {
      GFX_DrawPixelEpapier(x, y, color);
   }
}
 800123c:	e008      	b.n	8001250 <GFX_DrawPixelScreen+0x48>
   else if(Screen == E_PAPIER)
 800123e:	78bb      	ldrb	r3, [r7, #2]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d105      	bne.n	8001250 <GFX_DrawPixelScreen+0x48>
      GFX_DrawPixelEpapier(x, y, color);
 8001244:	88fb      	ldrh	r3, [r7, #6]
 8001246:	88b9      	ldrh	r1, [r7, #4]
 8001248:	78fa      	ldrb	r2, [r7, #3]
 800124a:	4618      	mov	r0, r3
 800124c:	f000 fb90 	bl	8001970 <e_papier_set_pixel>
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	bd90      	pop	{r4, r7, pc}

08001258 <GFX_SetFont>:
void GFX_SetFont(const uint8_t *font_t)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
   font = font_t;
 8001260:	4a04      	ldr	r2, [pc, #16]	; (8001274 <GFX_SetFont+0x1c>)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6013      	str	r3, [r2, #0]
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	20000270 	.word	0x20000270

08001278 <GFX_DrawChar>:
{
   return size;
}

void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background, Screen_TypeDef Screen)
{
 8001278:	b590      	push	{r4, r7, lr}
 800127a:	b089      	sub	sp, #36	; 0x24
 800127c:	af02      	add	r7, sp, #8
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	4611      	mov	r1, r2
 8001284:	461a      	mov	r2, r3
 8001286:	460b      	mov	r3, r1
 8001288:	71fb      	strb	r3, [r7, #7]
 800128a:	4613      	mov	r3, r2
 800128c:	71bb      	strb	r3, [r7, #6]
   if(chr > 0x7E)
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	2b7e      	cmp	r3, #126	; 0x7e
 8001292:	f200 80a7 	bhi.w	80013e4 <GFX_DrawChar+0x16c>
      return; // chr > '~'

   for(uint8_t i = 0; i < font[1]; i++) // Each column (Width)
 8001296:	2300      	movs	r3, #0
 8001298:	75fb      	strb	r3, [r7, #23]
 800129a:	e09a      	b.n	80013d2 <GFX_DrawChar+0x15a>
   {
      uint8_t line = (uint8_t)font[(chr - 0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 800129c:	4b53      	ldr	r3, [pc, #332]	; (80013ec <GFX_DrawChar+0x174>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	3b20      	subs	r3, #32
 80012a4:	4951      	ldr	r1, [pc, #324]	; (80013ec <GFX_DrawChar+0x174>)
 80012a6:	6809      	ldr	r1, [r1, #0]
 80012a8:	3101      	adds	r1, #1
 80012aa:	7809      	ldrb	r1, [r1, #0]
 80012ac:	fb03 f101 	mul.w	r1, r3, r1
 80012b0:	7dfb      	ldrb	r3, [r7, #23]
 80012b2:	440b      	add	r3, r1
 80012b4:	3302      	adds	r3, #2
 80012b6:	4413      	add	r3, r2
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	75bb      	strb	r3, [r7, #22]

      for(int8_t j = 0; j < font[0]; j++, line >>= 1) // For each pixel in column
 80012bc:	2300      	movs	r3, #0
 80012be:	757b      	strb	r3, [r7, #21]
 80012c0:	e07c      	b.n	80013bc <GFX_DrawChar+0x144>
      {
         if(line & 1) // Check last pixel in line
 80012c2:	7dbb      	ldrb	r3, [r7, #22]
 80012c4:	f003 0301 	and.w	r3, r3, #1
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d034      	beq.n	8001336 <GFX_DrawChar+0xbe>
         {
            if(size == 1)
 80012cc:	4b48      	ldr	r3, [pc, #288]	; (80013f0 <GFX_DrawChar+0x178>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d112      	bne.n	80012fa <GFX_DrawChar+0x82>
               GFX_DrawPixelScreen(x + i, y + j, color, Screen); // Draw this pixel
 80012d4:	7dfb      	ldrb	r3, [r7, #23]
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	b29b      	uxth	r3, r3
 80012dc:	4413      	add	r3, r2
 80012de:	b298      	uxth	r0, r3
 80012e0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80012e4:	b29a      	uxth	r2, r3
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	4413      	add	r3, r2
 80012ec:	b299      	uxth	r1, r3
 80012ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80012f2:	79ba      	ldrb	r2, [r7, #6]
 80012f4:	f7ff ff88 	bl	8001208 <GFX_DrawPixelScreen>
 80012f8:	e057      	b.n	80013aa <GFX_DrawChar+0x132>
            else
               GFX_DrawFillRectangle(x + i * size, y + j * size, size, size, color, Screen); // Or bigger pixel
 80012fa:	7dfb      	ldrb	r3, [r7, #23]
 80012fc:	4a3c      	ldr	r2, [pc, #240]	; (80013f0 <GFX_DrawChar+0x178>)
 80012fe:	7812      	ldrb	r2, [r2, #0]
 8001300:	fb03 f202 	mul.w	r2, r3, r2
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	18d0      	adds	r0, r2, r3
 8001308:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800130c:	4a38      	ldr	r2, [pc, #224]	; (80013f0 <GFX_DrawChar+0x178>)
 800130e:	7812      	ldrb	r2, [r2, #0]
 8001310:	fb03 f202 	mul.w	r2, r3, r2
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	18d1      	adds	r1, r2, r3
 8001318:	4b35      	ldr	r3, [pc, #212]	; (80013f0 <GFX_DrawChar+0x178>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	b29a      	uxth	r2, r3
 800131e:	4b34      	ldr	r3, [pc, #208]	; (80013f0 <GFX_DrawChar+0x178>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	b29c      	uxth	r4, r3
 8001324:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001328:	9301      	str	r3, [sp, #4]
 800132a:	79bb      	ldrb	r3, [r7, #6]
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	4623      	mov	r3, r4
 8001330:	f000 f968 	bl	8001604 <GFX_DrawFillRectangle>
 8001334:	e039      	b.n	80013aa <GFX_DrawChar+0x132>
         }
         else if(background == 0)
 8001336:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800133a:	2b00      	cmp	r3, #0
 800133c:	d135      	bne.n	80013aa <GFX_DrawChar+0x132>
         {
            if(size == 1)
 800133e:	4b2c      	ldr	r3, [pc, #176]	; (80013f0 <GFX_DrawChar+0x178>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d113      	bne.n	800136e <GFX_DrawChar+0xf6>
               GFX_DrawPixelScreen(x + i, y + j, background, Screen); // Draw black BG
 8001346:	7dfb      	ldrb	r3, [r7, #23]
 8001348:	b29a      	uxth	r2, r3
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	b29b      	uxth	r3, r3
 800134e:	4413      	add	r3, r2
 8001350:	b298      	uxth	r0, r3
 8001352:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001356:	b29a      	uxth	r2, r3
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	b29b      	uxth	r3, r3
 800135c:	4413      	add	r3, r2
 800135e:	b299      	uxth	r1, r3
 8001360:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001364:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001368:	f7ff ff4e 	bl	8001208 <GFX_DrawPixelScreen>
 800136c:	e01d      	b.n	80013aa <GFX_DrawChar+0x132>
            else
               GFX_DrawFillRectangle(x + i * size, y + j * size, size, size, background, Screen); // Or bigger
 800136e:	7dfb      	ldrb	r3, [r7, #23]
 8001370:	4a1f      	ldr	r2, [pc, #124]	; (80013f0 <GFX_DrawChar+0x178>)
 8001372:	7812      	ldrb	r2, [r2, #0]
 8001374:	fb03 f202 	mul.w	r2, r3, r2
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	18d0      	adds	r0, r2, r3
 800137c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001380:	4a1b      	ldr	r2, [pc, #108]	; (80013f0 <GFX_DrawChar+0x178>)
 8001382:	7812      	ldrb	r2, [r2, #0]
 8001384:	fb03 f202 	mul.w	r2, r3, r2
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	18d1      	adds	r1, r2, r3
 800138c:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <GFX_DrawChar+0x178>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	b29a      	uxth	r2, r3
 8001392:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <GFX_DrawChar+0x178>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	b29c      	uxth	r4, r3
 8001398:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800139c:	9301      	str	r3, [sp, #4]
 800139e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	4623      	mov	r3, r4
 80013a6:	f000 f92d 	bl	8001604 <GFX_DrawFillRectangle>
      for(int8_t j = 0; j < font[0]; j++, line >>= 1) // For each pixel in column
 80013aa:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	3301      	adds	r3, #1
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	757b      	strb	r3, [r7, #21]
 80013b6:	7dbb      	ldrb	r3, [r7, #22]
 80013b8:	085b      	lsrs	r3, r3, #1
 80013ba:	75bb      	strb	r3, [r7, #22]
 80013bc:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80013c0:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <GFX_DrawChar+0x174>)
 80013c2:	6812      	ldr	r2, [r2, #0]
 80013c4:	7812      	ldrb	r2, [r2, #0]
 80013c6:	4293      	cmp	r3, r2
 80013c8:	f6ff af7b 	blt.w	80012c2 <GFX_DrawChar+0x4a>
   for(uint8_t i = 0; i < font[1]; i++) // Each column (Width)
 80013cc:	7dfb      	ldrb	r3, [r7, #23]
 80013ce:	3301      	adds	r3, #1
 80013d0:	75fb      	strb	r3, [r7, #23]
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <GFX_DrawChar+0x174>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	3301      	adds	r3, #1
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	7dfa      	ldrb	r2, [r7, #23]
 80013dc:	429a      	cmp	r2, r3
 80013de:	f4ff af5d 	bcc.w	800129c <GFX_DrawChar+0x24>
 80013e2:	e000      	b.n	80013e6 <GFX_DrawChar+0x16e>
      return; // chr > '~'
 80013e4:	bf00      	nop
         }
      }
   }
}
 80013e6:	371c      	adds	r7, #28
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd90      	pop	{r4, r7, pc}
 80013ec:	20000270 	.word	0x20000270
 80013f0:	20000000 	.word	0x20000000

080013f4 <GFX_DrawString>:

void GFX_DrawString(int x, int y, char *str, uint8_t color, uint8_t background, Screen_TypeDef Screen)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b088      	sub	sp, #32
 80013f8:	af02      	add	r7, sp, #8
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
 8001400:	70fb      	strb	r3, [r7, #3]
   int x_tmp = x;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	617b      	str	r3, [r7, #20]

   char znak;
   znak = *str;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	74fb      	strb	r3, [r7, #19]

   while(*str++)
 800140c:	e040      	b.n	8001490 <GFX_DrawString+0x9c>
   {
      GFX_DrawChar(x_tmp, y, znak, color, background, Screen); // Draw current char
 800140e:	78f9      	ldrb	r1, [r7, #3]
 8001410:	7cfa      	ldrb	r2, [r7, #19]
 8001412:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001416:	9301      	str	r3, [sp, #4]
 8001418:	f897 3020 	ldrb.w	r3, [r7, #32]
 800141c:	9300      	str	r3, [sp, #0]
 800141e:	460b      	mov	r3, r1
 8001420:	68b9      	ldr	r1, [r7, #8]
 8001422:	6978      	ldr	r0, [r7, #20]
 8001424:	f7ff ff28 	bl	8001278 <GFX_DrawChar>

      x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 8001428:	4b1f      	ldr	r3, [pc, #124]	; (80014a8 <GFX_DrawString+0xb4>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	3301      	adds	r3, #1
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	461a      	mov	r2, r3
 8001432:	4b1e      	ldr	r3, [pc, #120]	; (80014ac <GFX_DrawString+0xb8>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	fb02 f303 	mul.w	r3, r2, r3
 800143a:	3301      	adds	r3, #1
 800143c:	697a      	ldr	r2, [r7, #20]
 800143e:	4413      	add	r3, r2
 8001440:	617b      	str	r3, [r7, #20]

      if(background == 0) // Draw black space if needed
 8001442:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d11f      	bne.n	800148a <GFX_DrawString+0x96>
      {
         for(uint8_t i = 0; i < (font[0] * size); i++)
 800144a:	2300      	movs	r3, #0
 800144c:	74bb      	strb	r3, [r7, #18]
 800144e:	e011      	b.n	8001474 <GFX_DrawString+0x80>
         {
            GFX_DrawPixelScreen(x_tmp - 1, y + i, PIXEL_BLACK, Screen);
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	b29b      	uxth	r3, r3
 8001454:	3b01      	subs	r3, #1
 8001456:	b298      	uxth	r0, r3
 8001458:	7cbb      	ldrb	r3, [r7, #18]
 800145a:	b29a      	uxth	r2, r3
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	b29b      	uxth	r3, r3
 8001460:	4413      	add	r3, r2
 8001462:	b299      	uxth	r1, r3
 8001464:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001468:	2200      	movs	r2, #0
 800146a:	f7ff fecd 	bl	8001208 <GFX_DrawPixelScreen>
         for(uint8_t i = 0; i < (font[0] * size); i++)
 800146e:	7cbb      	ldrb	r3, [r7, #18]
 8001470:	3301      	adds	r3, #1
 8001472:	74bb      	strb	r3, [r7, #18]
 8001474:	7cba      	ldrb	r2, [r7, #18]
 8001476:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <GFX_DrawString+0xb4>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	4619      	mov	r1, r3
 800147e:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <GFX_DrawString+0xb8>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	fb01 f303 	mul.w	r3, r1, r3
 8001486:	429a      	cmp	r2, r3
 8001488:	dbe2      	blt.n	8001450 <GFX_DrawString+0x5c>
         }
      }

      znak = *str; // Next char
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	74fb      	strb	r3, [r7, #19]
   while(*str++)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	1c5a      	adds	r2, r3, #1
 8001494:	607a      	str	r2, [r7, #4]
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1b8      	bne.n	800140e <GFX_DrawString+0x1a>
   }
}
 800149c:	bf00      	nop
 800149e:	bf00      	nop
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000270 	.word	0x20000270
 80014ac:	20000000 	.word	0x20000000

080014b0 <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint8_t color, Screen_TypeDef Screen)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08c      	sub	sp, #48	; 0x30
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
 80014bc:	603b      	str	r3, [r7, #0]
   int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 80014be:	683a      	ldr	r2, [r7, #0]
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80014c8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80014cc:	6879      	ldr	r1, [r7, #4]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	1acb      	subs	r3, r1, r3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	bfb8      	it	lt
 80014d6:	425b      	neglt	r3, r3
 80014d8:	429a      	cmp	r2, r3
 80014da:	bfcc      	ite	gt
 80014dc:	2301      	movgt	r3, #1
 80014de:	2300      	movle	r3, #0
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	857b      	strh	r3, [r7, #42]	; 0x2a

   if(steep)
 80014e4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d00b      	beq.n	8001504 <GFX_WriteLine+0x54>
   {
      _swap_int(x_start, y_start);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f6:	60bb      	str	r3, [r7, #8]
      _swap_int(x_end, y_end);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	623b      	str	r3, [r7, #32]
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	6a3b      	ldr	r3, [r7, #32]
 8001502:	603b      	str	r3, [r7, #0]
   }

   if(x_start > x_end)
 8001504:	68fa      	ldr	r2, [r7, #12]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	429a      	cmp	r2, r3
 800150a:	dd0b      	ble.n	8001524 <GFX_WriteLine+0x74>
   {
      _swap_int(x_start, x_end);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	61fb      	str	r3, [r7, #28]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	607b      	str	r3, [r7, #4]
      _swap_int(y_start, y_end);
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	61bb      	str	r3, [r7, #24]
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	603b      	str	r3, [r7, #0]
   }

   int16_t dx, dy;
   dx = x_end - x_start;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	b29a      	uxth	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	b29b      	uxth	r3, r3
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	b29b      	uxth	r3, r3
 8001530:	82fb      	strh	r3, [r7, #22]
   dy = abs(y_end - y_start);
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b00      	cmp	r3, #0
 800153a:	bfb8      	it	lt
 800153c:	425b      	neglt	r3, r3
 800153e:	82bb      	strh	r3, [r7, #20]

   int16_t err = dx / 2;
 8001540:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001544:	0fda      	lsrs	r2, r3, #31
 8001546:	4413      	add	r3, r2
 8001548:	105b      	asrs	r3, r3, #1
 800154a:	85fb      	strh	r3, [r7, #46]	; 0x2e
   int16_t ystep;

   if(y_start < y_end)
 800154c:	68ba      	ldr	r2, [r7, #8]
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	429a      	cmp	r2, r3
 8001552:	da02      	bge.n	800155a <GFX_WriteLine+0xaa>
   {
      ystep = 1;
 8001554:	2301      	movs	r3, #1
 8001556:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001558:	e032      	b.n	80015c0 <GFX_WriteLine+0x110>
   }
   else
   {
      ystep = -1;
 800155a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800155e:	85bb      	strh	r3, [r7, #44]	; 0x2c
   }

   for(; x_start <= x_end; x_start++)
 8001560:	e02e      	b.n	80015c0 <GFX_WriteLine+0x110>
   {
      if(steep)
 8001562:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001566:	2b00      	cmp	r3, #0
 8001568:	d00a      	beq.n	8001580 <GFX_WriteLine+0xd0>
      {
         GFX_DrawPixelScreen(y_start, x_start, color, Screen);
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	b298      	uxth	r0, r3
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	b299      	uxth	r1, r3
 8001572:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001576:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800157a:	f7ff fe45 	bl	8001208 <GFX_DrawPixelScreen>
 800157e:	e009      	b.n	8001594 <GFX_WriteLine+0xe4>
      }
      else
      {
         GFX_DrawPixelScreen(x_start, y_start, color, Screen);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	b298      	uxth	r0, r3
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	b299      	uxth	r1, r3
 8001588:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800158c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001590:	f7ff fe3a 	bl	8001208 <GFX_DrawPixelScreen>
      }
      err -= dy;
 8001594:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001596:	8abb      	ldrh	r3, [r7, #20]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	b29b      	uxth	r3, r3
 800159c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      if(err < 0)
 800159e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	da09      	bge.n	80015ba <GFX_WriteLine+0x10a>
      {
         y_start += ystep;
 80015a6:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80015aa:	68ba      	ldr	r2, [r7, #8]
 80015ac:	4413      	add	r3, r2
 80015ae:	60bb      	str	r3, [r7, #8]
         err += dx;
 80015b0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80015b2:	8afb      	ldrh	r3, [r7, #22]
 80015b4:	4413      	add	r3, r2
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
   for(; x_start <= x_end; x_start++)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	3301      	adds	r3, #1
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fa      	ldr	r2, [r7, #12]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	ddcc      	ble.n	8001562 <GFX_WriteLine+0xb2>
      }
   }
}
 80015c8:	bf00      	nop
 80015ca:	bf00      	nop
 80015cc:	3730      	adds	r7, #48	; 0x30
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint8_t color, Screen_TypeDef Screen)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b086      	sub	sp, #24
 80015d6:	af02      	add	r7, sp, #8
 80015d8:	60f8      	str	r0, [r7, #12]
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	607a      	str	r2, [r7, #4]
 80015de:	70fb      	strb	r3, [r7, #3]
   GFX_WriteLine(x_start, y_start, x_start, y_start + h - 1, color, Screen);
 80015e0:	68ba      	ldr	r2, [r7, #8]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4413      	add	r3, r2
 80015e6:	1e5a      	subs	r2, r3, #1
 80015e8:	7e3b      	ldrb	r3, [r7, #24]
 80015ea:	9301      	str	r3, [sp, #4]
 80015ec:	78fb      	ldrb	r3, [r7, #3]
 80015ee:	9300      	str	r3, [sp, #0]
 80015f0:	4613      	mov	r3, r2
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	68b9      	ldr	r1, [r7, #8]
 80015f6:	68f8      	ldr	r0, [r7, #12]
 80015f8:	f7ff ff5a 	bl	80014b0 <GFX_WriteLine>
}
 80015fc:	bf00      	nop
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <GFX_DrawFillRectangle>:
   GFX_DrawFastVLine(x + w - 1, y, h, color, Screen);
}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color, Screen_TypeDef Screen)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b088      	sub	sp, #32
 8001608:	af02      	add	r7, sp, #8
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	4611      	mov	r1, r2
 8001610:	461a      	mov	r2, r3
 8001612:	460b      	mov	r3, r1
 8001614:	80fb      	strh	r3, [r7, #6]
 8001616:	4613      	mov	r3, r2
 8001618:	80bb      	strh	r3, [r7, #4]
   for(int i = x; i < x + w; i++)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	617b      	str	r3, [r7, #20]
 800161e:	e00d      	b.n	800163c <GFX_DrawFillRectangle+0x38>
   {
      GFX_DrawFastVLine(i, y, h, color, Screen);
 8001620:	88ba      	ldrh	r2, [r7, #4]
 8001622:	f897 1020 	ldrb.w	r1, [r7, #32]
 8001626:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	460b      	mov	r3, r1
 800162e:	68b9      	ldr	r1, [r7, #8]
 8001630:	6978      	ldr	r0, [r7, #20]
 8001632:	f7ff ffce 	bl	80015d2 <GFX_DrawFastVLine>
   for(int i = x; i < x + w; i++)
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	3301      	adds	r3, #1
 800163a:	617b      	str	r3, [r7, #20]
 800163c:	88fa      	ldrh	r2, [r7, #6]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	4413      	add	r3, r2
 8001642:	697a      	ldr	r2, [r7, #20]
 8001644:	429a      	cmp	r2, r3
 8001646:	dbeb      	blt.n	8001620 <GFX_DrawFillRectangle+0x1c>
   }
}
 8001648:	bf00      	nop
 800164a:	bf00      	nop
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HC12_ExitCommandMode>:
void HC12_EnterCommandMode(void)
{
   HAL_GPIO_WritePin(HC12_SET_GPIO_Port, HC12_SET_Pin, 0);
}
void HC12_ExitCommandMode(void)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(HC12_SET_GPIO_Port, HC12_SET_Pin, 1);
 8001656:	2201      	movs	r2, #1
 8001658:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800165c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001660:	f003 fa36 	bl	8004ad0 <HAL_GPIO_WritePin>
}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}

08001668 <HC12_TransmitData>:
void HC12_TransmitData(uint8_t *Data, uint32_t Length)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
   HAL_UART_Transmit(&huart1, Data, Length, 1000);
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	b29a      	uxth	r2, r3
 8001676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800167a:	6879      	ldr	r1, [r7, #4]
 800167c:	4803      	ldr	r0, [pc, #12]	; (800168c <HC12_TransmitData+0x24>)
 800167e:	f007 fc29 	bl	8008ed4 <HAL_UART_Transmit>
}
 8001682:	bf00      	nop
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	200044ec 	.word	0x200044ec

08001690 <HC12_ReciveToIdleDMA>:
void HC12_ReciveToIdleDMA(uint8_t *Data, uint32_t Length)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
   HAL_UARTEx_ReceiveToIdle_DMA(&huart1, Data, Length);
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	b29b      	uxth	r3, r3
 800169e:	461a      	mov	r2, r3
 80016a0:	6879      	ldr	r1, [r7, #4]
 80016a2:	4803      	ldr	r0, [pc, #12]	; (80016b0 <HC12_ReciveToIdleDMA+0x20>)
 80016a4:	f008 fff0 	bl	800a688 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 80016a8:	bf00      	nop
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	200044ec 	.word	0x200044ec

080016b4 <HC12_Init>:
void HC12_Init(RFP_TypeDef *TempRfp, uint8_t *Buffer)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
   rfp      = TempRfp;
 80016be:	4a06      	ldr	r2, [pc, #24]	; (80016d8 <HC12_Init+0x24>)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6013      	str	r3, [r2, #0]
   HC12Data = Buffer;
 80016c4:	4a05      	ldr	r2, [pc, #20]	; (80016dc <HC12_Init+0x28>)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	6013      	str	r3, [r2, #0]
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	20000274 	.word	0x20000274
 80016dc:	20000278 	.word	0x20000278

080016e0 <Crc>:
#include "crc.h"
#include "main.h"
int RandomNumber[] = { 131456, 215134, 31254, 4135, 516454, 642754, 71363, 85362475, 9144316, 10341957, 11345134, 11354342 };
int k              = 0;
uint32_t Crc(uint32_t PreviuseCRC, uint32_t DataLength, uint8_t *data)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b087      	sub	sp, #28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
   PreviuseCRC ^= data[0];
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	461a      	mov	r2, r3
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	4053      	eors	r3, r2
 80016f6:	60fb      	str	r3, [r7, #12]
   for(uint32_t i = 1; i < DataLength; i++)
 80016f8:	2301      	movs	r3, #1
 80016fa:	617b      	str	r3, [r7, #20]
 80016fc:	e032      	b.n	8001764 <Crc+0x84>
   {
      uint32_t temp = data[i];
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	4413      	add	r3, r2
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	613b      	str	r3, [r7, #16]
      if(temp == 0x00000000 )
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d115      	bne.n	800173a <Crc+0x5a>
      {
         temp = RandomNumber[k % (sizeof(RandomNumber)-1)];
 800170e:	4b1c      	ldr	r3, [pc, #112]	; (8001780 <Crc+0xa0>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4619      	mov	r1, r3
 8001714:	4b1b      	ldr	r3, [pc, #108]	; (8001784 <Crc+0xa4>)
 8001716:	fba3 2301 	umull	r2, r3, r3, r1
 800171a:	095a      	lsrs	r2, r3, #5
 800171c:	4613      	mov	r3, r2
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	4413      	add	r3, r2
 8001722:	011b      	lsls	r3, r3, #4
 8001724:	1a9b      	subs	r3, r3, r2
 8001726:	1aca      	subs	r2, r1, r3
 8001728:	4b17      	ldr	r3, [pc, #92]	; (8001788 <Crc+0xa8>)
 800172a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800172e:	613b      	str	r3, [r7, #16]
         k++;
 8001730:	4b13      	ldr	r3, [pc, #76]	; (8001780 <Crc+0xa0>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	3301      	adds	r3, #1
 8001736:	4a12      	ldr	r2, [pc, #72]	; (8001780 <Crc+0xa0>)
 8001738:	6013      	str	r3, [r2, #0]
      }
      PreviuseCRC ^= ((uint32_t)(temp) * (256 * i));
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	fb02 f303 	mul.w	r3, r2, r3
 8001742:	021b      	lsls	r3, r3, #8
 8001744:	68fa      	ldr	r2, [r7, #12]
 8001746:	4053      	eors	r3, r2
 8001748:	60fb      	str	r3, [r7, #12]
      if(PreviuseCRC & 0x80000000)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2b00      	cmp	r3, #0
 800174e:	da03      	bge.n	8001758 <Crc+0x78>
      {
         PreviuseCRC ^= 0xABC245C2;
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	4b0e      	ldr	r3, [pc, #56]	; (800178c <Crc+0xac>)
 8001754:	4053      	eors	r3, r2
 8001756:	60fb      	str	r3, [r7, #12]
      }
      PreviuseCRC <<= 1;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	60fb      	str	r3, [r7, #12]
   for(uint32_t i = 1; i < DataLength; i++)
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	3301      	adds	r3, #1
 8001762:	617b      	str	r3, [r7, #20]
 8001764:	697a      	ldr	r2, [r7, #20]
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	429a      	cmp	r2, r3
 800176a:	d3c8      	bcc.n	80016fe <Crc+0x1e>
   }
   k = 0;
 800176c:	4b04      	ldr	r3, [pc, #16]	; (8001780 <Crc+0xa0>)
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
   return PreviuseCRC;
 8001772:	68fb      	ldr	r3, [r7, #12]
}
 8001774:	4618      	mov	r0, r3
 8001776:	371c      	adds	r7, #28
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	2000027c 	.word	0x2000027c
 8001784:	ae4c415d 	.word	0xae4c415d
 8001788:	20000004 	.word	0x20000004
 800178c:	abc245c2 	.word	0xabc245c2

08001790 <RepareMessage>:
CRCStatus_TypeDef RepareMessage(uint32_t OryginalCRC, uint8_t *data, uint32_t DataLength)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
   uint8_t temp = 1;
 800179c:	2301      	movs	r3, #1
 800179e:	75fb      	strb	r3, [r7, #23]
   for(int i = 0; i < DataLength; i++)
 80017a0:	2300      	movs	r3, #0
 80017a2:	61fb      	str	r3, [r7, #28]
 80017a4:	e03b      	b.n	800181e <RepareMessage+0x8e>
   {
      for(int j = 0; j < 8; j++)
 80017a6:	2300      	movs	r3, #0
 80017a8:	61bb      	str	r3, [r7, #24]
 80017aa:	e032      	b.n	8001812 <RepareMessage+0x82>
      {
         data[i] ^= (temp << j);
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	68ba      	ldr	r2, [r7, #8]
 80017b0:	4413      	add	r3, r2
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	b25a      	sxtb	r2, r3
 80017b6:	7df9      	ldrb	r1, [r7, #23]
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	fa01 f303 	lsl.w	r3, r1, r3
 80017be:	b25b      	sxtb	r3, r3
 80017c0:	4053      	eors	r3, r2
 80017c2:	b259      	sxtb	r1, r3
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	68ba      	ldr	r2, [r7, #8]
 80017c8:	4413      	add	r3, r2
 80017ca:	b2ca      	uxtb	r2, r1
 80017cc:	701a      	strb	r2, [r3, #0]
         if(OryginalCRC == Crc(CRC_INITIAL_VALUE, DataLength - 4, data))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	3b04      	subs	r3, #4
 80017d2:	68ba      	ldr	r2, [r7, #8]
 80017d4:	4619      	mov	r1, r3
 80017d6:	f04f 30ff 	mov.w	r0, #4294967295
 80017da:	f7ff ff81 	bl	80016e0 <Crc>
 80017de:	4602      	mov	r2, r0
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d101      	bne.n	80017ea <RepareMessage+0x5a>
         {
            return CRC_OK;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e01e      	b.n	8001828 <RepareMessage+0x98>
         }
         else
         {
            data[i] ^= (temp << j);
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	68ba      	ldr	r2, [r7, #8]
 80017ee:	4413      	add	r3, r2
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	b25a      	sxtb	r2, r3
 80017f4:	7df9      	ldrb	r1, [r7, #23]
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	fa01 f303 	lsl.w	r3, r1, r3
 80017fc:	b25b      	sxtb	r3, r3
 80017fe:	4053      	eors	r3, r2
 8001800:	b259      	sxtb	r1, r3
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	68ba      	ldr	r2, [r7, #8]
 8001806:	4413      	add	r3, r2
 8001808:	b2ca      	uxtb	r2, r1
 800180a:	701a      	strb	r2, [r3, #0]
      for(int j = 0; j < 8; j++)
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	3301      	adds	r3, #1
 8001810:	61bb      	str	r3, [r7, #24]
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	2b07      	cmp	r3, #7
 8001816:	ddc9      	ble.n	80017ac <RepareMessage+0x1c>
   for(int i = 0; i < DataLength; i++)
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	3301      	adds	r3, #1
 800181c:	61fb      	str	r3, [r7, #28]
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	429a      	cmp	r2, r3
 8001824:	d8bf      	bhi.n	80017a6 <RepareMessage+0x16>
         }
      }
   }
   return CRC_ERROR;
 8001826:	2300      	movs	r3, #0
}
 8001828:	4618      	mov	r0, r3
 800182a:	3720      	adds	r7, #32
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001836:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <MX_DMA_Init+0x44>)
 8001838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800183a:	4a0e      	ldr	r2, [pc, #56]	; (8001874 <MX_DMA_Init+0x44>)
 800183c:	f043 0304 	orr.w	r3, r3, #4
 8001840:	6493      	str	r3, [r2, #72]	; 0x48
 8001842:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <MX_DMA_Init+0x44>)
 8001844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001846:	f003 0304 	and.w	r3, r3, #4
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800184e:	4b09      	ldr	r3, [pc, #36]	; (8001874 <MX_DMA_Init+0x44>)
 8001850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001852:	4a08      	ldr	r2, [pc, #32]	; (8001874 <MX_DMA_Init+0x44>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	6493      	str	r3, [r2, #72]	; 0x48
 800185a:	4b06      	ldr	r3, [pc, #24]	; (8001874 <MX_DMA_Init+0x44>)
 800185c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	603b      	str	r3, [r7, #0]
 8001864:	683b      	ldr	r3, [r7, #0]

}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	40021000 	.word	0x40021000

08001878 <e_papier_reset>:
0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
void e_papier_reset(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EPAPIER_RST_GPIO_Port, EPAPIER_RST_Pin, 1);
 800187c:	2201      	movs	r2, #1
 800187e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001882:	480d      	ldr	r0, [pc, #52]	; (80018b8 <e_papier_reset+0x40>)
 8001884:	f003 f924 	bl	8004ad0 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001888:	20c8      	movs	r0, #200	; 0xc8
 800188a:	f002 fb13 	bl	8003eb4 <HAL_Delay>
	HAL_GPIO_WritePin(EPAPIER_RST_GPIO_Port, EPAPIER_RST_Pin, 0);
 800188e:	2200      	movs	r2, #0
 8001890:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001894:	4808      	ldr	r0, [pc, #32]	; (80018b8 <e_papier_reset+0x40>)
 8001896:	f003 f91b 	bl	8004ad0 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800189a:	20c8      	movs	r0, #200	; 0xc8
 800189c:	f002 fb0a 	bl	8003eb4 <HAL_Delay>
	HAL_GPIO_WritePin(EPAPIER_RST_GPIO_Port, EPAPIER_RST_Pin, 1);
 80018a0:	2201      	movs	r2, #1
 80018a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018a6:	4804      	ldr	r0, [pc, #16]	; (80018b8 <e_papier_reset+0x40>)
 80018a8:	f003 f912 	bl	8004ad0 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80018ac:	20c8      	movs	r0, #200	; 0xc8
 80018ae:	f002 fb01 	bl	8003eb4 <HAL_Delay>
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	48000400 	.word	0x48000400

080018bc <e_papier_send_command>:
void e_papier_send_command(uint8_t command)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SCREENS_DC_GPIO_Port, SCREENS_DC_Pin, 0);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2101      	movs	r1, #1
 80018ca:	480c      	ldr	r0, [pc, #48]	; (80018fc <e_papier_send_command+0x40>)
 80018cc:	f003 f900 	bl	8004ad0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPAPIER_CS_GPIO_Port, EPAPIER_CS_Pin, 0);
 80018d0:	2200      	movs	r2, #0
 80018d2:	2102      	movs	r1, #2
 80018d4:	4809      	ldr	r0, [pc, #36]	; (80018fc <e_papier_send_command+0x40>)
 80018d6:	f003 f8fb 	bl	8004ad0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(e_papier_spi, &command, 1, 1000);
 80018da:	4b09      	ldr	r3, [pc, #36]	; (8001900 <e_papier_send_command+0x44>)
 80018dc:	6818      	ldr	r0, [r3, #0]
 80018de:	1df9      	adds	r1, r7, #7
 80018e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018e4:	2201      	movs	r2, #1
 80018e6:	f005 f9c8 	bl	8006c7a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(EPAPIER_CS_GPIO_Port, EPAPIER_CS_Pin, 1);
 80018ea:	2201      	movs	r2, #1
 80018ec:	2102      	movs	r1, #2
 80018ee:	4803      	ldr	r0, [pc, #12]	; (80018fc <e_papier_send_command+0x40>)
 80018f0:	f003 f8ee 	bl	8004ad0 <HAL_GPIO_WritePin>
}
 80018f4:	bf00      	nop
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	48000400 	.word	0x48000400
 8001900:	20000280 	.word	0x20000280

08001904 <e_papier_send_data>:
void e_papier_send_data(uint8_t data)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SCREENS_DC_GPIO_Port, SCREENS_DC_Pin, 1);
 800190e:	2201      	movs	r2, #1
 8001910:	2101      	movs	r1, #1
 8001912:	480c      	ldr	r0, [pc, #48]	; (8001944 <e_papier_send_data+0x40>)
 8001914:	f003 f8dc 	bl	8004ad0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPAPIER_CS_GPIO_Port, EPAPIER_CS_Pin, 0);
 8001918:	2200      	movs	r2, #0
 800191a:	2102      	movs	r1, #2
 800191c:	4809      	ldr	r0, [pc, #36]	; (8001944 <e_papier_send_data+0x40>)
 800191e:	f003 f8d7 	bl	8004ad0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(e_papier_spi, &data, 1, 1000);
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <e_papier_send_data+0x44>)
 8001924:	6818      	ldr	r0, [r3, #0]
 8001926:	1df9      	adds	r1, r7, #7
 8001928:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800192c:	2201      	movs	r2, #1
 800192e:	f005 f9a4 	bl	8006c7a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(EPAPIER_CS_GPIO_Port, EPAPIER_CS_Pin, 1);
 8001932:	2201      	movs	r2, #1
 8001934:	2102      	movs	r1, #2
 8001936:	4803      	ldr	r0, [pc, #12]	; (8001944 <e_papier_send_data+0x40>)
 8001938:	f003 f8ca 	bl	8004ad0 <HAL_GPIO_WritePin>
}
 800193c:	bf00      	nop
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	48000400 	.word	0x48000400
 8001948:	20000280 	.word	0x20000280

0800194c <e_papier_wait_until_idle>:
void e_papier_wait_until_idle(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
	while(HAL_GPIO_ReadPin(EPAPIER_BUSY_GPIO_Port, EPAPIER_BUSY_Pin)==0)
 8001950:	e002      	b.n	8001958 <e_papier_wait_until_idle+0xc>
	{
		HAL_Delay(200);
 8001952:	20c8      	movs	r0, #200	; 0xc8
 8001954:	f002 faae 	bl	8003eb4 <HAL_Delay>
	while(HAL_GPIO_ReadPin(EPAPIER_BUSY_GPIO_Port, EPAPIER_BUSY_Pin)==0)
 8001958:	2104      	movs	r1, #4
 800195a:	4804      	ldr	r0, [pc, #16]	; (800196c <e_papier_wait_until_idle+0x20>)
 800195c:	f003 f8a0 	bl	8004aa0 <HAL_GPIO_ReadPin>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d0f5      	beq.n	8001952 <e_papier_wait_until_idle+0x6>
	}
}
 8001966:	bf00      	nop
 8001968:	bf00      	nop
 800196a:	bd80      	pop	{r7, pc}
 800196c:	48000400 	.word	0x48000400

08001970 <e_papier_set_pixel>:
void e_papier_set_pixel(uint16_t x,uint16_t y, color_t color)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	80fb      	strh	r3, [r7, #6]
 800197a:	460b      	mov	r3, r1
 800197c:	80bb      	strh	r3, [r7, #4]
 800197e:	4613      	mov	r3, r2
 8001980:	70fb      	strb	r3, [r7, #3]
	if(x>=EPD_WIDTH||x<0||y>=EPD_HEIGHT||y<0)
 8001982:	88fb      	ldrh	r3, [r7, #6]
 8001984:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001988:	d247      	bcs.n	8001a1a <e_papier_set_pixel+0xaa>
 800198a:	88bb      	ldrh	r3, [r7, #4]
 800198c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001990:	d243      	bcs.n	8001a1a <e_papier_set_pixel+0xaa>
	{
		return;
	}
	if(color==WHITE)
 8001992:	78fb      	ldrb	r3, [r7, #3]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d120      	bne.n	80019da <e_papier_set_pixel+0x6a>
	{
		buffer[x/8+y*EPD_WIDTH/8]|=(0x80>(x%8));
 8001998:	88fb      	ldrh	r3, [r7, #6]
 800199a:	08db      	lsrs	r3, r3, #3
 800199c:	b299      	uxth	r1, r3
 800199e:	4608      	mov	r0, r1
 80019a0:	88bb      	ldrh	r3, [r7, #4]
 80019a2:	2232      	movs	r2, #50	; 0x32
 80019a4:	fb02 f303 	mul.w	r3, r2, r3
 80019a8:	4403      	add	r3, r0
 80019aa:	4a1f      	ldr	r2, [pc, #124]	; (8001a28 <e_papier_set_pixel+0xb8>)
 80019ac:	5cd3      	ldrb	r3, [r2, r3]
 80019ae:	b25a      	sxtb	r2, r3
 80019b0:	88fb      	ldrh	r3, [r7, #6]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	2b7f      	cmp	r3, #127	; 0x7f
 80019ba:	bf94      	ite	ls
 80019bc:	2301      	movls	r3, #1
 80019be:	2300      	movhi	r3, #0
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	b25b      	sxtb	r3, r3
 80019c4:	4313      	orrs	r3, r2
 80019c6:	b258      	sxtb	r0, r3
 80019c8:	88bb      	ldrh	r3, [r7, #4]
 80019ca:	2232      	movs	r2, #50	; 0x32
 80019cc:	fb02 f303 	mul.w	r3, r2, r3
 80019d0:	440b      	add	r3, r1
 80019d2:	b2c1      	uxtb	r1, r0
 80019d4:	4a14      	ldr	r2, [pc, #80]	; (8001a28 <e_papier_set_pixel+0xb8>)
 80019d6:	54d1      	strb	r1, [r2, r3]
 80019d8:	e020      	b.n	8001a1c <e_papier_set_pixel+0xac>
	}
	else
	{
		buffer[x/8+y*EPD_WIDTH/8]&=~(0x80>>(x%8));
 80019da:	88fb      	ldrh	r3, [r7, #6]
 80019dc:	08db      	lsrs	r3, r3, #3
 80019de:	b298      	uxth	r0, r3
 80019e0:	4601      	mov	r1, r0
 80019e2:	88bb      	ldrh	r3, [r7, #4]
 80019e4:	2232      	movs	r2, #50	; 0x32
 80019e6:	fb02 f303 	mul.w	r3, r2, r3
 80019ea:	440b      	add	r3, r1
 80019ec:	4a0e      	ldr	r2, [pc, #56]	; (8001a28 <e_papier_set_pixel+0xb8>)
 80019ee:	5cd3      	ldrb	r3, [r2, r3]
 80019f0:	b25a      	sxtb	r2, r3
 80019f2:	88fb      	ldrh	r3, [r7, #6]
 80019f4:	f003 0307 	and.w	r3, r3, #7
 80019f8:	2180      	movs	r1, #128	; 0x80
 80019fa:	fa41 f303 	asr.w	r3, r1, r3
 80019fe:	b25b      	sxtb	r3, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	b25b      	sxtb	r3, r3
 8001a04:	4013      	ands	r3, r2
 8001a06:	b259      	sxtb	r1, r3
 8001a08:	88bb      	ldrh	r3, [r7, #4]
 8001a0a:	2232      	movs	r2, #50	; 0x32
 8001a0c:	fb02 f303 	mul.w	r3, r2, r3
 8001a10:	4403      	add	r3, r0
 8001a12:	b2c9      	uxtb	r1, r1
 8001a14:	4a04      	ldr	r2, [pc, #16]	; (8001a28 <e_papier_set_pixel+0xb8>)
 8001a16:	54d1      	strb	r1, [r2, r3]
 8001a18:	e000      	b.n	8001a1c <e_papier_set_pixel+0xac>
		return;
 8001a1a:	bf00      	nop
	}
}
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	20000284 	.word	0x20000284

08001a2c <e_papier_set_lut>:
void e_papier_set_lut(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
    uint16_t count;
    e_papier_send_command(LUT_FOR_VCOM);         //g vcom
 8001a32:	2020      	movs	r0, #32
 8001a34:	f7ff ff42 	bl	80018bc <e_papier_send_command>
    for(count=0; count<44; count++) {
 8001a38:	2300      	movs	r3, #0
 8001a3a:	80fb      	strh	r3, [r7, #6]
 8001a3c:	e008      	b.n	8001a50 <e_papier_set_lut+0x24>
        e_papier_send_data(lut_vcom0[count]);
 8001a3e:	88fb      	ldrh	r3, [r7, #6]
 8001a40:	4a2b      	ldr	r2, [pc, #172]	; (8001af0 <e_papier_set_lut+0xc4>)
 8001a42:	5cd3      	ldrb	r3, [r2, r3]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff ff5d 	bl	8001904 <e_papier_send_data>
    for(count=0; count<44; count++) {
 8001a4a:	88fb      	ldrh	r3, [r7, #6]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	80fb      	strh	r3, [r7, #6]
 8001a50:	88fb      	ldrh	r3, [r7, #6]
 8001a52:	2b2b      	cmp	r3, #43	; 0x2b
 8001a54:	d9f3      	bls.n	8001a3e <e_papier_set_lut+0x12>
    }

    e_papier_send_command(LUT_WHITE_TO_WHITE);
 8001a56:	2021      	movs	r0, #33	; 0x21
 8001a58:	f7ff ff30 	bl	80018bc <e_papier_send_command>
    for(count=0; count<42; count++) {
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	80fb      	strh	r3, [r7, #6]
 8001a60:	e008      	b.n	8001a74 <e_papier_set_lut+0x48>
        e_papier_send_data(lut_ww[count]);
 8001a62:	88fb      	ldrh	r3, [r7, #6]
 8001a64:	4a23      	ldr	r2, [pc, #140]	; (8001af4 <e_papier_set_lut+0xc8>)
 8001a66:	5cd3      	ldrb	r3, [r2, r3]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff ff4b 	bl	8001904 <e_papier_send_data>
    for(count=0; count<42; count++) {
 8001a6e:	88fb      	ldrh	r3, [r7, #6]
 8001a70:	3301      	adds	r3, #1
 8001a72:	80fb      	strh	r3, [r7, #6]
 8001a74:	88fb      	ldrh	r3, [r7, #6]
 8001a76:	2b29      	cmp	r3, #41	; 0x29
 8001a78:	d9f3      	bls.n	8001a62 <e_papier_set_lut+0x36>
    }

    e_papier_send_command(LUT_BLACK_TO_WHITE);
 8001a7a:	2022      	movs	r0, #34	; 0x22
 8001a7c:	f7ff ff1e 	bl	80018bc <e_papier_send_command>
    for(count=0; count<42; count++) {
 8001a80:	2300      	movs	r3, #0
 8001a82:	80fb      	strh	r3, [r7, #6]
 8001a84:	e008      	b.n	8001a98 <e_papier_set_lut+0x6c>
        e_papier_send_data(lut_bw[count]);
 8001a86:	88fb      	ldrh	r3, [r7, #6]
 8001a88:	4a1b      	ldr	r2, [pc, #108]	; (8001af8 <e_papier_set_lut+0xcc>)
 8001a8a:	5cd3      	ldrb	r3, [r2, r3]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff ff39 	bl	8001904 <e_papier_send_data>
    for(count=0; count<42; count++) {
 8001a92:	88fb      	ldrh	r3, [r7, #6]
 8001a94:	3301      	adds	r3, #1
 8001a96:	80fb      	strh	r3, [r7, #6]
 8001a98:	88fb      	ldrh	r3, [r7, #6]
 8001a9a:	2b29      	cmp	r3, #41	; 0x29
 8001a9c:	d9f3      	bls.n	8001a86 <e_papier_set_lut+0x5a>
    }

    e_papier_send_command(LUT_WHITE_TO_BLACK);
 8001a9e:	2023      	movs	r0, #35	; 0x23
 8001aa0:	f7ff ff0c 	bl	80018bc <e_papier_send_command>
    for(count=0; count<42; count++) {
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	80fb      	strh	r3, [r7, #6]
 8001aa8:	e008      	b.n	8001abc <e_papier_set_lut+0x90>
        e_papier_send_data(lut_wb[count]);
 8001aaa:	88fb      	ldrh	r3, [r7, #6]
 8001aac:	4a13      	ldr	r2, [pc, #76]	; (8001afc <e_papier_set_lut+0xd0>)
 8001aae:	5cd3      	ldrb	r3, [r2, r3]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff ff27 	bl	8001904 <e_papier_send_data>
    for(count=0; count<42; count++) {
 8001ab6:	88fb      	ldrh	r3, [r7, #6]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	80fb      	strh	r3, [r7, #6]
 8001abc:	88fb      	ldrh	r3, [r7, #6]
 8001abe:	2b29      	cmp	r3, #41	; 0x29
 8001ac0:	d9f3      	bls.n	8001aaa <e_papier_set_lut+0x7e>
    }

    e_papier_send_command(LUT_BLACK_TO_BLACK);
 8001ac2:	2024      	movs	r0, #36	; 0x24
 8001ac4:	f7ff fefa 	bl	80018bc <e_papier_send_command>
    for(count=0; count<42; count++) {
 8001ac8:	2300      	movs	r3, #0
 8001aca:	80fb      	strh	r3, [r7, #6]
 8001acc:	e008      	b.n	8001ae0 <e_papier_set_lut+0xb4>
        e_papier_send_data(lut_bb[count]);
 8001ace:	88fb      	ldrh	r3, [r7, #6]
 8001ad0:	4a0b      	ldr	r2, [pc, #44]	; (8001b00 <e_papier_set_lut+0xd4>)
 8001ad2:	5cd3      	ldrb	r3, [r2, r3]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff ff15 	bl	8001904 <e_papier_send_data>
    for(count=0; count<42; count++) {
 8001ada:	88fb      	ldrh	r3, [r7, #6]
 8001adc:	3301      	adds	r3, #1
 8001ade:	80fb      	strh	r3, [r7, #6]
 8001ae0:	88fb      	ldrh	r3, [r7, #6]
 8001ae2:	2b29      	cmp	r3, #41	; 0x29
 8001ae4:	d9f3      	bls.n	8001ace <e_papier_set_lut+0xa2>
    }
}
 8001ae6:	bf00      	nop
 8001ae8:	bf00      	nop
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	0800f1ec 	.word	0x0800f1ec
 8001af4:	0800f218 	.word	0x0800f218
 8001af8:	0800f244 	.word	0x0800f244
 8001afc:	0800f270 	.word	0x0800f270
 8001b00:	0800f29c 	.word	0x0800f29c

08001b04 <e_papier_turn_on_display>:
		}
	}
	//e_papier_wait_until_idle();
}
void e_papier_turn_on_display(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
	e_papier_send_command(DISPLAY_REFRESH);
 8001b08:	2012      	movs	r0, #18
 8001b0a:	f7ff fed7 	bl	80018bc <e_papier_send_command>
    e_papier_wait_until_idle();
 8001b0e:	f7ff ff1d 	bl	800194c <e_papier_wait_until_idle>
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
	...

08001b18 <e_papier_display>:
void e_papier_display(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
	uint16_t Width, Height;
    Width = (EPD_WIDTH % 8 == 0)? (EPD_WIDTH / 8 ): (EPD_WIDTH / 8 + 1);
 8001b1e:	2332      	movs	r3, #50	; 0x32
 8001b20:	80fb      	strh	r3, [r7, #6]
    Height = EPD_HEIGHT;
 8001b22:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001b26:	80bb      	strh	r3, [r7, #4]

    e_papier_send_command(DATA_START_TRANSMISSION_1);
 8001b28:	2010      	movs	r0, #16
 8001b2a:	f7ff fec7 	bl	80018bc <e_papier_send_command>
    for (uint16_t j = 0; j < Height; j++) {
 8001b2e:	2300      	movs	r3, #0
 8001b30:	81fb      	strh	r3, [r7, #14]
 8001b32:	e00f      	b.n	8001b54 <e_papier_display+0x3c>
        for (uint16_t i = 0; i < Width; i++) {
 8001b34:	2300      	movs	r3, #0
 8001b36:	81bb      	strh	r3, [r7, #12]
 8001b38:	e005      	b.n	8001b46 <e_papier_display+0x2e>
        	e_papier_send_data(0XFF);
 8001b3a:	20ff      	movs	r0, #255	; 0xff
 8001b3c:	f7ff fee2 	bl	8001904 <e_papier_send_data>
        for (uint16_t i = 0; i < Width; i++) {
 8001b40:	89bb      	ldrh	r3, [r7, #12]
 8001b42:	3301      	adds	r3, #1
 8001b44:	81bb      	strh	r3, [r7, #12]
 8001b46:	89ba      	ldrh	r2, [r7, #12]
 8001b48:	88fb      	ldrh	r3, [r7, #6]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d3f5      	bcc.n	8001b3a <e_papier_display+0x22>
    for (uint16_t j = 0; j < Height; j++) {
 8001b4e:	89fb      	ldrh	r3, [r7, #14]
 8001b50:	3301      	adds	r3, #1
 8001b52:	81fb      	strh	r3, [r7, #14]
 8001b54:	89fa      	ldrh	r2, [r7, #14]
 8001b56:	88bb      	ldrh	r3, [r7, #4]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d3eb      	bcc.n	8001b34 <e_papier_display+0x1c>
        }
    }
    e_papier_send_command(DATA_START_TRANSMISSION_2);
 8001b5c:	2013      	movs	r0, #19
 8001b5e:	f7ff fead 	bl	80018bc <e_papier_send_command>
    for (uint16_t j = 0; j < Height; j++) {
 8001b62:	2300      	movs	r3, #0
 8001b64:	817b      	strh	r3, [r7, #10]
 8001b66:	e017      	b.n	8001b98 <e_papier_display+0x80>
        for (uint16_t i = 0; i < Width; i++) {
 8001b68:	2300      	movs	r3, #0
 8001b6a:	813b      	strh	r3, [r7, #8]
 8001b6c:	e00d      	b.n	8001b8a <e_papier_display+0x72>
        	e_papier_send_data(buffer[i + j * Width]);
 8001b6e:	893a      	ldrh	r2, [r7, #8]
 8001b70:	897b      	ldrh	r3, [r7, #10]
 8001b72:	88f9      	ldrh	r1, [r7, #6]
 8001b74:	fb01 f303 	mul.w	r3, r1, r3
 8001b78:	4413      	add	r3, r2
 8001b7a:	4a0d      	ldr	r2, [pc, #52]	; (8001bb0 <e_papier_display+0x98>)
 8001b7c:	5cd3      	ldrb	r3, [r2, r3]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff fec0 	bl	8001904 <e_papier_send_data>
        for (uint16_t i = 0; i < Width; i++) {
 8001b84:	893b      	ldrh	r3, [r7, #8]
 8001b86:	3301      	adds	r3, #1
 8001b88:	813b      	strh	r3, [r7, #8]
 8001b8a:	893a      	ldrh	r2, [r7, #8]
 8001b8c:	88fb      	ldrh	r3, [r7, #6]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d3ed      	bcc.n	8001b6e <e_papier_display+0x56>
    for (uint16_t j = 0; j < Height; j++) {
 8001b92:	897b      	ldrh	r3, [r7, #10]
 8001b94:	3301      	adds	r3, #1
 8001b96:	817b      	strh	r3, [r7, #10]
 8001b98:	897a      	ldrh	r2, [r7, #10]
 8001b9a:	88bb      	ldrh	r3, [r7, #4]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d3e3      	bcc.n	8001b68 <e_papier_display+0x50>
        }
    }
    e_papier_turn_on_display();
 8001ba0:	f7ff ffb0 	bl	8001b04 <e_papier_turn_on_display>
    e_papier_wait_until_idle();
 8001ba4:	f7ff fed2 	bl	800194c <e_papier_wait_until_idle>
}
 8001ba8:	bf00      	nop
 8001baa:	3710      	adds	r7, #16
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20000284 	.word	0x20000284

08001bb4 <e_papier_clear>:
void e_papier_clear()
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
	memset(buffer,0xff,EPD_HEIGHT*EPD_WIDTH/8);
 8001bb8:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001bbc:	21ff      	movs	r1, #255	; 0xff
 8001bbe:	4802      	ldr	r0, [pc, #8]	; (8001bc8 <e_papier_clear+0x14>)
 8001bc0:	f008 fe36 	bl	800a830 <memset>
}
 8001bc4:	bf00      	nop
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	20000284 	.word	0x20000284

08001bcc <e_papier_init>:
void e_papier_init(SPI_HandleTypeDef *spi)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
	e_papier_spi=spi;
 8001bd4:	4a2b      	ldr	r2, [pc, #172]	; (8001c84 <e_papier_init+0xb8>)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6013      	str	r3, [r2, #0]
	e_papier_reset();
 8001bda:	f7ff fe4d 	bl	8001878 <e_papier_reset>

    e_papier_send_command(POWER_SETTING);			//POWER SETTING
 8001bde:	2001      	movs	r0, #1
 8001be0:	f7ff fe6c 	bl	80018bc <e_papier_send_command>
    e_papier_send_data(0x03);
 8001be4:	2003      	movs	r0, #3
 8001be6:	f7ff fe8d 	bl	8001904 <e_papier_send_data>
    e_papier_send_data(0x00);
 8001bea:	2000      	movs	r0, #0
 8001bec:	f7ff fe8a 	bl	8001904 <e_papier_send_data>
    e_papier_send_data(0x2b);
 8001bf0:	202b      	movs	r0, #43	; 0x2b
 8001bf2:	f7ff fe87 	bl	8001904 <e_papier_send_data>
    e_papier_send_data(0x2b);
 8001bf6:	202b      	movs	r0, #43	; 0x2b
 8001bf8:	f7ff fe84 	bl	8001904 <e_papier_send_data>

    e_papier_send_command(BOOSTER_SOFT_START);         //boost soft start
 8001bfc:	2006      	movs	r0, #6
 8001bfe:	f7ff fe5d 	bl	80018bc <e_papier_send_command>
    e_papier_send_data(0x17);		//A
 8001c02:	2017      	movs	r0, #23
 8001c04:	f7ff fe7e 	bl	8001904 <e_papier_send_data>
    e_papier_send_data(0x17);		//B
 8001c08:	2017      	movs	r0, #23
 8001c0a:	f7ff fe7b 	bl	8001904 <e_papier_send_data>
    e_papier_send_data(0x17);		//C
 8001c0e:	2017      	movs	r0, #23
 8001c10:	f7ff fe78 	bl	8001904 <e_papier_send_data>

    e_papier_send_command(POWER_ON);
 8001c14:	2004      	movs	r0, #4
 8001c16:	f7ff fe51 	bl	80018bc <e_papier_send_command>
    e_papier_wait_until_idle();
 8001c1a:	f7ff fe97 	bl	800194c <e_papier_wait_until_idle>

    e_papier_send_command(PANEL_SETTING);			//panel setting
 8001c1e:	2000      	movs	r0, #0
 8001c20:	f7ff fe4c 	bl	80018bc <e_papier_send_command>
    e_papier_send_data(0xbf);		//KW-BF   KWR-AF	BWROTP 0f	BWOTP 1f
 8001c24:	20bf      	movs	r0, #191	; 0xbf
 8001c26:	f7ff fe6d 	bl	8001904 <e_papier_send_data>
    e_papier_send_data(0x0d);
 8001c2a:	200d      	movs	r0, #13
 8001c2c:	f7ff fe6a 	bl	8001904 <e_papier_send_data>

    e_papier_send_command(PLL_CONTROL);			//PLL setting
 8001c30:	2030      	movs	r0, #48	; 0x30
 8001c32:	f7ff fe43 	bl	80018bc <e_papier_send_command>
    e_papier_send_data(0x3C);      	// 3A 100HZ   29 150Hz 39 200HZ	31 171HZ
 8001c36:	203c      	movs	r0, #60	; 0x3c
 8001c38:	f7ff fe64 	bl	8001904 <e_papier_send_data>

    e_papier_send_command(0x61);			//resolution setting
 8001c3c:	2061      	movs	r0, #97	; 0x61
 8001c3e:	f7ff fe3d 	bl	80018bc <e_papier_send_command>
    e_papier_send_data(0x01);
 8001c42:	2001      	movs	r0, #1
 8001c44:	f7ff fe5e 	bl	8001904 <e_papier_send_data>
    e_papier_send_data(0x90);       //128
 8001c48:	2090      	movs	r0, #144	; 0x90
 8001c4a:	f7ff fe5b 	bl	8001904 <e_papier_send_data>
    e_papier_send_data(0x01);		//
 8001c4e:	2001      	movs	r0, #1
 8001c50:	f7ff fe58 	bl	8001904 <e_papier_send_data>
    e_papier_send_data(0x2c);
 8001c54:	202c      	movs	r0, #44	; 0x2c
 8001c56:	f7ff fe55 	bl	8001904 <e_papier_send_data>

    e_papier_send_command(0x82);			//vcom_DC setting
 8001c5a:	2082      	movs	r0, #130	; 0x82
 8001c5c:	f7ff fe2e 	bl	80018bc <e_papier_send_command>
    e_papier_send_data(0x28);
 8001c60:	2028      	movs	r0, #40	; 0x28
 8001c62:	f7ff fe4f 	bl	8001904 <e_papier_send_data>

    e_papier_send_command(0X50);			//VCOM AND DATA INTERVAL SETTING
 8001c66:	2050      	movs	r0, #80	; 0x50
 8001c68:	f7ff fe28 	bl	80018bc <e_papier_send_command>
    e_papier_send_data(0x97);		//97white border 77black border		VBDF 17|D7 VBDW 97 VBDB 57		VBDF F7 VBDW 77 VBDB 37  VBDR B7
 8001c6c:	2097      	movs	r0, #151	; 0x97
 8001c6e:	f7ff fe49 	bl	8001904 <e_papier_send_data>

    e_papier_set_lut();
 8001c72:	f7ff fedb 	bl	8001a2c <e_papier_set_lut>
    e_papier_clear();
 8001c76:	f7ff ff9d 	bl	8001bb4 <e_papier_clear>
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	20000280 	.word	0x20000280

08001c88 <flash_CsLow>:
 *      Author: Marcin
 */
#include"main.h"
#include"flash_spi.h"
void flash_CsLow(flash_t *flash)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(flash->flash_CsPort, flash->flash_CsPin, 0);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68d8      	ldr	r0, [r3, #12]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	891b      	ldrh	r3, [r3, #8]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	f002 ff18 	bl	8004ad0 <HAL_GPIO_WritePin>
}
 8001ca0:	bf00      	nop
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <flash_CsHigh>:
void flash_CsHigh(flash_t *flash)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(flash->flash_CsPort, flash->flash_CsPin, 1);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	68d8      	ldr	r0, [r3, #12]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	891b      	ldrh	r3, [r3, #8]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	4619      	mov	r1, r3
 8001cbc:	f002 ff08 	bl	8004ad0 <HAL_GPIO_WritePin>
}
 8001cc0:	bf00      	nop
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <flash_WriteCommand>:
void flash_WriteCommand(flash_t *flash,uint8_t *command,uint8_t size)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(flash->flash_spi, command, size, 1000);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6818      	ldr	r0, [r3, #0]
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ce2:	68b9      	ldr	r1, [r7, #8]
 8001ce4:	f004 ffc9 	bl	8006c7a <HAL_SPI_Transmit>
}
 8001ce8:	bf00      	nop
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <flash_ReadCommand>:
void flash_ReadCommand(flash_t *flash,uint8_t *command,uint8_t size)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Receive(flash->flash_spi, command, size, 1000);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6818      	ldr	r0, [r3, #0]
 8001d02:	79fb      	ldrb	r3, [r7, #7]
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d0a:	68b9      	ldr	r1, [r7, #8]
 8001d0c:	f005 f923 	bl	8006f56 <HAL_SPI_Receive>
}
 8001d10:	bf00      	nop
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <flash_Reset>:
	flash_ReadCommand(flash, &command, 1);
	flash_CsHigh(flash);
	return command;
}
void flash_Reset(flash_t *flash)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
	uint8_t command=ENABLE_RESET;
 8001d20:	2366      	movs	r3, #102	; 0x66
 8001d22:	73fb      	strb	r3, [r7, #15]
	flash_CsLow(flash);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff ffaf 	bl	8001c88 <flash_CsLow>
	flash_WriteCommand(flash, &command, 1);
 8001d2a:	f107 030f 	add.w	r3, r7, #15
 8001d2e:	2201      	movs	r2, #1
 8001d30:	4619      	mov	r1, r3
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff ffc8 	bl	8001cc8 <flash_WriteCommand>
	flash_CsHigh(flash);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff ffb5 	bl	8001ca8 <flash_CsHigh>
	command=RESET;
 8001d3e:	2399      	movs	r3, #153	; 0x99
 8001d40:	73fb      	strb	r3, [r7, #15]
	flash_CsLow(flash);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7ff ffa0 	bl	8001c88 <flash_CsLow>
	flash_WriteCommand(flash, &command, 1);
 8001d48:	f107 030f 	add.w	r3, r7, #15
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	4619      	mov	r1, r3
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f7ff ffb9 	bl	8001cc8 <flash_WriteCommand>
	flash_CsHigh(flash);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f7ff ffa6 	bl	8001ca8 <flash_CsHigh>

}
 8001d5c:	bf00      	nop
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <flash_ReadID>:
	uint8_t command=WRITE_ENABLE;
	flash_WriteCommand(flash, &command, 1);
	flash_CsHigh(flash);
}
void flash_ReadID(flash_t *flash)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
	uint8_t id[3],command=JEDEC_ID;
 8001d6c:	239f      	movs	r3, #159	; 0x9f
 8001d6e:	72fb      	strb	r3, [r7, #11]
	flash_CsLow(flash);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7ff ff89 	bl	8001c88 <flash_CsLow>
	flash_WriteCommand(flash, &command, 1);
 8001d76:	f107 030b 	add.w	r3, r7, #11
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7ff ffa2 	bl	8001cc8 <flash_WriteCommand>
	flash_ReadCommand(flash, id, 3);
 8001d84:	f107 030c 	add.w	r3, r7, #12
 8001d88:	2203      	movs	r2, #3
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f7ff ffaf 	bl	8001cf0 <flash_ReadCommand>
	flash_CsHigh(flash);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7ff ff88 	bl	8001ca8 <flash_CsHigh>
	flash->id=((id[0]<<16)|(id[1]<<8)|id[2]);
 8001d98:	7b3b      	ldrb	r3, [r7, #12]
 8001d9a:	041a      	lsls	r2, r3, #16
 8001d9c:	7b7b      	ldrb	r3, [r7, #13]
 8001d9e:	021b      	lsls	r3, r3, #8
 8001da0:	4313      	orrs	r3, r2
 8001da2:	7bba      	ldrb	r2, [r7, #14]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	461a      	mov	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	605a      	str	r2, [r3, #4]
}
 8001dac:	bf00      	nop
 8001dae:	3710      	adds	r7, #16
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <flash_Init>:
	flash_WriteCommand(flash, dataToSend, 4);
	flash_CsHigh(flash);
	flash_WaitForEndProcess(flash);
}
void flash_Init(flash_t *flash,SPI_HandleTypeDef *spi, GPIO_TypeDef* cs_port,uint16_t cs_pin)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
 8001dc0:	807b      	strh	r3, [r7, #2]
	flash->flash_spi=spi;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	68ba      	ldr	r2, [r7, #8]
 8001dc6:	601a      	str	r2, [r3, #0]
	flash->flash_CsPort=cs_port;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	60da      	str	r2, [r3, #12]
	flash->flash_CsPin=cs_pin;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	887a      	ldrh	r2, [r7, #2]
 8001dd2:	811a      	strh	r2, [r3, #8]
	flash_Reset(flash);
 8001dd4:	68f8      	ldr	r0, [r7, #12]
 8001dd6:	f7ff ff9f 	bl	8001d18 <flash_Reset>
	flash_ReadID(flash);
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	f7ff ffc2 	bl	8001d64 <flash_ReadID>
}
 8001de0:	bf00      	nop
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b088      	sub	sp, #32
 8001dec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dee:	f107 030c 	add.w	r3, r7, #12
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	605a      	str	r2, [r3, #4]
 8001df8:	609a      	str	r2, [r3, #8]
 8001dfa:	60da      	str	r2, [r3, #12]
 8001dfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dfe:	4b50      	ldr	r3, [pc, #320]	; (8001f40 <MX_GPIO_Init+0x158>)
 8001e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e02:	4a4f      	ldr	r2, [pc, #316]	; (8001f40 <MX_GPIO_Init+0x158>)
 8001e04:	f043 0304 	orr.w	r3, r3, #4
 8001e08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e0a:	4b4d      	ldr	r3, [pc, #308]	; (8001f40 <MX_GPIO_Init+0x158>)
 8001e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0e:	f003 0304 	and.w	r3, r3, #4
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e16:	4b4a      	ldr	r3, [pc, #296]	; (8001f40 <MX_GPIO_Init+0x158>)
 8001e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1a:	4a49      	ldr	r2, [pc, #292]	; (8001f40 <MX_GPIO_Init+0x158>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e22:	4b47      	ldr	r3, [pc, #284]	; (8001f40 <MX_GPIO_Init+0x158>)
 8001e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	607b      	str	r3, [r7, #4]
 8001e2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2e:	4b44      	ldr	r3, [pc, #272]	; (8001f40 <MX_GPIO_Init+0x158>)
 8001e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e32:	4a43      	ldr	r2, [pc, #268]	; (8001f40 <MX_GPIO_Init+0x158>)
 8001e34:	f043 0302 	orr.w	r3, r3, #2
 8001e38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e3a:	4b41      	ldr	r3, [pc, #260]	; (8001f40 <MX_GPIO_Init+0x158>)
 8001e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	603b      	str	r3, [r7, #0]
 8001e44:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PMS_RST_GPIO_Port, PMS_RST_Pin, GPIO_PIN_RESET);
 8001e46:	2200      	movs	r2, #0
 8001e48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e4c:	483d      	ldr	r0, [pc, #244]	; (8001f44 <MX_GPIO_Init+0x15c>)
 8001e4e:	f002 fe3f 	bl	8004ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SSD1306_CS_Pin|HC12_SET_Pin, GPIO_PIN_SET);
 8001e52:	2201      	movs	r2, #1
 8001e54:	f44f 6101 	mov.w	r1, #2064	; 0x810
 8001e58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e5c:	f002 fe38 	bl	8004ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCREENS_DC_Pin|EPAPIER_CS_Pin|EPAPIER_RST_Pin|SSD1306_RST_Pin
 8001e60:	2201      	movs	r2, #1
 8001e62:	f642 71c3 	movw	r1, #12227	; 0x2fc3
 8001e66:	4838      	ldr	r0, [pc, #224]	; (8001f48 <MX_GPIO_Init+0x160>)
 8001e68:	f002 fe32 	bl	8004ad0 <HAL_GPIO_WritePin>
                          |BME280_CS_Pin|FRAM_CS_Pin|FRAM_WP_Pin|FRAM_HOLD_Pin
                          |FLASH_CS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HEARTBEAT_Pin|DS18B20_Pin, GPIO_PIN_RESET);
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 8001e72:	4835      	ldr	r0, [pc, #212]	; (8001f48 <MX_GPIO_Init+0x160>)
 8001e74:	f002 fe2c 	bl	8004ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PMS_SET_GPIO_Port, PMS_SET_Pin, GPIO_PIN_RESET);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e82:	f002 fe25 	bl	8004ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PMS_RST_Pin;
 8001e86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e94:	2300      	movs	r3, #0
 8001e96:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PMS_RST_GPIO_Port, &GPIO_InitStruct);
 8001e98:	f107 030c 	add.w	r3, r7, #12
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4829      	ldr	r0, [pc, #164]	; (8001f44 <MX_GPIO_Init+0x15c>)
 8001ea0:	f002 fc6c 	bl	800477c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SSD1306_CS_Pin;
 8001ea4:	2310      	movs	r3, #16
 8001ea6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SSD1306_CS_GPIO_Port, &GPIO_InitStruct);
 8001eb4:	f107 030c 	add.w	r3, r7, #12
 8001eb8:	4619      	mov	r1, r3
 8001eba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ebe:	f002 fc5d 	bl	800477c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SCREENS_DC_Pin|EPAPIER_CS_Pin|EPAPIER_RST_Pin|SSD1306_RST_Pin
 8001ec2:	f642 73c3 	movw	r3, #12227	; 0x2fc3
 8001ec6:	60fb      	str	r3, [r7, #12]
                          |BME280_CS_Pin|FRAM_CS_Pin|FRAM_WP_Pin|FRAM_HOLD_Pin
                          |FLASH_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed4:	f107 030c 	add.w	r3, r7, #12
 8001ed8:	4619      	mov	r1, r3
 8001eda:	481b      	ldr	r0, [pc, #108]	; (8001f48 <MX_GPIO_Init+0x160>)
 8001edc:	f002 fc4e 	bl	800477c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = EPAPIER_BUSY_Pin|ENCODER_SWITCH_Pin;
 8001ee0:	f244 0304 	movw	r3, #16388	; 0x4004
 8001ee4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eee:	f107 030c 	add.w	r3, r7, #12
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4814      	ldr	r0, [pc, #80]	; (8001f48 <MX_GPIO_Init+0x160>)
 8001ef6:	f002 fc41 	bl	800477c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = HEARTBEAT_Pin|DS18B20_Pin;
 8001efa:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8001efe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f00:	2301      	movs	r3, #1
 8001f02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f0c:	f107 030c 	add.w	r3, r7, #12
 8001f10:	4619      	mov	r1, r3
 8001f12:	480d      	ldr	r0, [pc, #52]	; (8001f48 <MX_GPIO_Init+0x160>)
 8001f14:	f002 fc32 	bl	800477c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = HC12_SET_Pin|PMS_SET_Pin;
 8001f18:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001f1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f26:	2300      	movs	r3, #0
 8001f28:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f2a:	f107 030c 	add.w	r3, r7, #12
 8001f2e:	4619      	mov	r1, r3
 8001f30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f34:	f002 fc22 	bl	800477c <HAL_GPIO_Init>

}
 8001f38:	bf00      	nop
 8001f3a:	3720      	adds	r7, #32
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40021000 	.word	0x40021000
 8001f44:	48000800 	.word	0x48000800
 8001f48:	48000400 	.word	0x48000400

08001f4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b0a0      	sub	sp, #128	; 0x80
 8001f50:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f52:	f001 ff3a 	bl	8003dca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f56:	f000 f9eb 	bl	8002330 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f5a:	f7ff ff45 	bl	8001de8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f5e:	f7ff fc67 	bl	8001830 <MX_DMA_Init>
  MX_TIM1_Init();
 8001f62:	f001 fb27 	bl	80035b4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001f66:	f001 fbd1 	bl	800370c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001f6a:	f001 fd9f 	bl	8003aac <MX_USART1_UART_Init>
  MX_TIM5_Init();
 8001f6e:	f001 fc43 	bl	80037f8 <MX_TIM5_Init>
  MX_USART2_UART_Init();
 8001f72:	f001 fde7 	bl	8003b44 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001f76:	f000 ffaf 	bl	8002ed8 <MX_SPI1_Init>
  MX_SPI3_Init();
 8001f7a:	f000 ffeb 	bl	8002f54 <MX_SPI3_Init>
  MX_RTC_Init();
 8001f7e:	f000 ff35 	bl	8002dec <MX_RTC_Init>
  MX_RNG_Init();
 8001f82:	f000 fed9 	bl	8002d38 <MX_RNG_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001f86:	f000 fa33 	bl	80023f0 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
   ssd1306_init(&hspi1);
 8001f8a:	489e      	ldr	r0, [pc, #632]	; (8002204 <main+0x2b8>)
 8001f8c:	f001 f94e 	bl	800322c <ssd1306_init>
   ssd1306_clear();
 8001f90:	f001 f940 	bl	8003214 <ssd1306_clear>
   ssd1306_display();
 8001f94:	f001 f912 	bl	80031bc <ssd1306_display>
   GFX_SetFont(font_8x5);
 8001f98:	489b      	ldr	r0, [pc, #620]	; (8002208 <main+0x2bc>)
 8001f9a:	f7ff f95d 	bl	8001258 <GFX_SetFont>
   GFX_DrawString(0, 50, "abcdef", WHITE, 0, OLED);
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	9301      	str	r3, [sp, #4]
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	4a98      	ldr	r2, [pc, #608]	; (800220c <main+0x2c0>)
 8001faa:	2132      	movs	r1, #50	; 0x32
 8001fac:	2000      	movs	r0, #0
 8001fae:	f7ff fa21 	bl	80013f4 <GFX_DrawString>
   ssd1306_display();
 8001fb2:	f001 f903 	bl	80031bc <ssd1306_display>
   e_papier_init(&hspi1);
 8001fb6:	4893      	ldr	r0, [pc, #588]	; (8002204 <main+0x2b8>)
 8001fb8:	f7ff fe08 	bl	8001bcc <e_papier_init>
   e_papier_display();
 8001fbc:	f7ff fdac 	bl	8001b18 <e_papier_display>
   ssd1306_display();
 8001fc0:	f001 f8fc 	bl	80031bc <ssd1306_display>
   fram_Init(&fram1, &hspi3, FRAM_HOLD_GPIO_Port, FRAM_CS_GPIO_Port, FRAM_WP_GPIO_Port, FRAM_HOLD_Pin, FRAM_CS_Pin, FRAM_WP_Pin);
 8001fc4:	2380      	movs	r3, #128	; 0x80
 8001fc6:	9303      	str	r3, [sp, #12]
 8001fc8:	2340      	movs	r3, #64	; 0x40
 8001fca:	9302      	str	r3, [sp, #8]
 8001fcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fd0:	9301      	str	r3, [sp, #4]
 8001fd2:	4b8f      	ldr	r3, [pc, #572]	; (8002210 <main+0x2c4>)
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	4b8e      	ldr	r3, [pc, #568]	; (8002210 <main+0x2c4>)
 8001fd8:	4a8d      	ldr	r2, [pc, #564]	; (8002210 <main+0x2c4>)
 8001fda:	498e      	ldr	r1, [pc, #568]	; (8002214 <main+0x2c8>)
 8001fdc:	488e      	ldr	r0, [pc, #568]	; (8002218 <main+0x2cc>)
 8001fde:	f7ff f8d2 	bl	8001186 <fram_Init>
   RFP_Init(&rfp, RFP_IDWS);
 8001fe2:	2103      	movs	r1, #3
 8001fe4:	488d      	ldr	r0, [pc, #564]	; (800221c <main+0x2d0>)
 8001fe6:	f000 fb3f 	bl	8002668 <RFP_Init>
   flash_Init(&flash1, &hspi3, FLASH_CS_GPIO_Port, FLASH_CS_Pin);
 8001fea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fee:	4a88      	ldr	r2, [pc, #544]	; (8002210 <main+0x2c4>)
 8001ff0:	4988      	ldr	r1, [pc, #544]	; (8002214 <main+0x2c8>)
 8001ff2:	488b      	ldr	r0, [pc, #556]	; (8002220 <main+0x2d4>)
 8001ff4:	f7ff fede 	bl	8001db4 <flash_Init>
   RFP_RegisterDataFunction(RFP_DataFunction);
 8001ff8:	488a      	ldr	r0, [pc, #552]	; (8002224 <main+0x2d8>)
 8001ffa:	f000 fbb5 	bl	8002768 <RFP_RegisterDataFunction>
   RFP_RegisterMessageFunction(RFP_EXIT_DEEP_SLEEP, RFP_MessageExitDeepSleep);
 8001ffe:	498a      	ldr	r1, [pc, #552]	; (8002228 <main+0x2dc>)
 8002000:	2005      	movs	r0, #5
 8002002:	f000 fbc1 	bl	8002788 <RFP_RegisterMessageFunction>
   uint8_t data = RFP_START_MEASURMENT;
 8002006:	2302      	movs	r3, #2
 8002008:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
   RFP_SendData(RFP_ODWS, RFP_COMMAND, &data, 1);
 800200c:	f107 026b 	add.w	r2, r7, #107	; 0x6b
 8002010:	2301      	movs	r3, #1
 8002012:	2101      	movs	r1, #1
 8002014:	2002      	movs	r0, #2
 8002016:	f000 fbd9 	bl	80027cc <RFP_SendData>
   HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 800201a:	213c      	movs	r1, #60	; 0x3c
 800201c:	4883      	ldr	r0, [pc, #524]	; (800222c <main+0x2e0>)
 800201e:	f005 fdf7 	bl	8007c10 <HAL_TIM_Encoder_Start>
   uint32_t Time = 0;
 8002022:	2300      	movs	r3, #0
 8002024:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   while(1)
   {
      if(HAL_GetTick() - Time > 1000)
 8002026:	f001 ff39 	bl	8003e9c <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002034:	d93b      	bls.n	80020ae <main+0x162>
      {
         ssd1306_clear();
 8002036:	f001 f8ed 	bl	8003214 <ssd1306_clear>
         Time = HAL_GetTick();
 800203a:	f001 ff2f 	bl	8003e9c <HAL_GetTick>
 800203e:	66f8      	str	r0, [r7, #108]	; 0x6c
         HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 8002040:	2200      	movs	r2, #0
 8002042:	497b      	ldr	r1, [pc, #492]	; (8002230 <main+0x2e4>)
 8002044:	487b      	ldr	r0, [pc, #492]	; (8002234 <main+0x2e8>)
 8002046:	f004 fc11 	bl	800686c <HAL_RTC_GetTime>
         HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 800204a:	2200      	movs	r2, #0
 800204c:	497a      	ldr	r1, [pc, #488]	; (8002238 <main+0x2ec>)
 800204e:	4879      	ldr	r0, [pc, #484]	; (8002234 <main+0x2e8>)
 8002050:	f004 fc6e 	bl	8006930 <HAL_RTC_GetDate>
         char data[100];
         sprintf(data, "%d h %d m %d s", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 8002054:	4b76      	ldr	r3, [pc, #472]	; (8002230 <main+0x2e4>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	461a      	mov	r2, r3
 800205a:	4b75      	ldr	r3, [pc, #468]	; (8002230 <main+0x2e4>)
 800205c:	785b      	ldrb	r3, [r3, #1]
 800205e:	4619      	mov	r1, r3
 8002060:	4b73      	ldr	r3, [pc, #460]	; (8002230 <main+0x2e4>)
 8002062:	789b      	ldrb	r3, [r3, #2]
 8002064:	1d38      	adds	r0, r7, #4
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	460b      	mov	r3, r1
 800206a:	4974      	ldr	r1, [pc, #464]	; (800223c <main+0x2f0>)
 800206c:	f009 fa68 	bl	800b540 <siprintf>
         GFX_DrawString(0, 0, data, WHITE, 0, OLED);
 8002070:	1d3a      	adds	r2, r7, #4
 8002072:	2300      	movs	r3, #0
 8002074:	9301      	str	r3, [sp, #4]
 8002076:	2300      	movs	r3, #0
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	2301      	movs	r3, #1
 800207c:	2100      	movs	r1, #0
 800207e:	2000      	movs	r0, #0
 8002080:	f7ff f9b8 	bl	80013f4 <GFX_DrawString>
         sprintf(data, "%d : %d ; 2022", RtcDate.Date, RtcDate.Month);
 8002084:	4b6c      	ldr	r3, [pc, #432]	; (8002238 <main+0x2ec>)
 8002086:	789b      	ldrb	r3, [r3, #2]
 8002088:	461a      	mov	r2, r3
 800208a:	4b6b      	ldr	r3, [pc, #428]	; (8002238 <main+0x2ec>)
 800208c:	785b      	ldrb	r3, [r3, #1]
 800208e:	1d38      	adds	r0, r7, #4
 8002090:	496b      	ldr	r1, [pc, #428]	; (8002240 <main+0x2f4>)
 8002092:	f009 fa55 	bl	800b540 <siprintf>
         GFX_DrawString(0, 10, data, WHITE, 0, OLED);
 8002096:	1d3a      	adds	r2, r7, #4
 8002098:	2300      	movs	r3, #0
 800209a:	9301      	str	r3, [sp, #4]
 800209c:	2300      	movs	r3, #0
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	2301      	movs	r3, #1
 80020a2:	210a      	movs	r1, #10
 80020a4:	2000      	movs	r0, #0
 80020a6:	f7ff f9a5 	bl	80013f4 <GFX_DrawString>
         ssd1306_display();
 80020aa:	f001 f887 	bl	80031bc <ssd1306_display>
      }
      RFP_Handle();
 80020ae:	f000 fabf 	bl	8002630 <RFP_Handle>
      if(f == 1)
 80020b2:	4b64      	ldr	r3, [pc, #400]	; (8002244 <main+0x2f8>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d1b5      	bne.n	8002026 <main+0xda>
      {
         f = 0;
 80020ba:	4b62      	ldr	r3, [pc, #392]	; (8002244 <main+0x2f8>)
 80020bc:	2200      	movs	r2, #0
 80020be:	701a      	strb	r2, [r3, #0]
         char mes[100];
         sprintf(mes, "H %0.2f", h);
 80020c0:	4b61      	ldr	r3, [pc, #388]	; (8002248 <main+0x2fc>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7fe fa57 	bl	8000578 <__aeabi_f2d>
 80020ca:	4602      	mov	r2, r0
 80020cc:	460b      	mov	r3, r1
 80020ce:	1d38      	adds	r0, r7, #4
 80020d0:	495e      	ldr	r1, [pc, #376]	; (800224c <main+0x300>)
 80020d2:	f009 fa35 	bl	800b540 <siprintf>
         GFX_DrawString(0, 0, mes, BLACK, 1, E_PAPIER);
 80020d6:	1d3a      	adds	r2, r7, #4
 80020d8:	2301      	movs	r3, #1
 80020da:	9301      	str	r3, [sp, #4]
 80020dc:	2301      	movs	r3, #1
 80020de:	9300      	str	r3, [sp, #0]
 80020e0:	2300      	movs	r3, #0
 80020e2:	2100      	movs	r1, #0
 80020e4:	2000      	movs	r0, #0
 80020e6:	f7ff f985 	bl	80013f4 <GFX_DrawString>
         sprintf(mes, "T %0.2f", t);
 80020ea:	4b59      	ldr	r3, [pc, #356]	; (8002250 <main+0x304>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7fe fa42 	bl	8000578 <__aeabi_f2d>
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	1d38      	adds	r0, r7, #4
 80020fa:	4956      	ldr	r1, [pc, #344]	; (8002254 <main+0x308>)
 80020fc:	f009 fa20 	bl	800b540 <siprintf>
         GFX_DrawString(0, 10, mes, BLACK, 1, E_PAPIER);
 8002100:	1d3a      	adds	r2, r7, #4
 8002102:	2301      	movs	r3, #1
 8002104:	9301      	str	r3, [sp, #4]
 8002106:	2301      	movs	r3, #1
 8002108:	9300      	str	r3, [sp, #0]
 800210a:	2300      	movs	r3, #0
 800210c:	210a      	movs	r1, #10
 800210e:	2000      	movs	r0, #0
 8002110:	f7ff f970 	bl	80013f4 <GFX_DrawString>
         sprintf(mes, "PM1 %d", pm1);
 8002114:	4b50      	ldr	r3, [pc, #320]	; (8002258 <main+0x30c>)
 8002116:	881b      	ldrh	r3, [r3, #0]
 8002118:	461a      	mov	r2, r3
 800211a:	1d3b      	adds	r3, r7, #4
 800211c:	494f      	ldr	r1, [pc, #316]	; (800225c <main+0x310>)
 800211e:	4618      	mov	r0, r3
 8002120:	f009 fa0e 	bl	800b540 <siprintf>
         GFX_DrawString(0, 20, mes, BLACK, 1, E_PAPIER);
 8002124:	1d3a      	adds	r2, r7, #4
 8002126:	2301      	movs	r3, #1
 8002128:	9301      	str	r3, [sp, #4]
 800212a:	2301      	movs	r3, #1
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	2300      	movs	r3, #0
 8002130:	2114      	movs	r1, #20
 8002132:	2000      	movs	r0, #0
 8002134:	f7ff f95e 	bl	80013f4 <GFX_DrawString>
         sprintf(mes, "PM10 %d", pm10);
 8002138:	4b49      	ldr	r3, [pc, #292]	; (8002260 <main+0x314>)
 800213a:	881b      	ldrh	r3, [r3, #0]
 800213c:	461a      	mov	r2, r3
 800213e:	1d3b      	adds	r3, r7, #4
 8002140:	4948      	ldr	r1, [pc, #288]	; (8002264 <main+0x318>)
 8002142:	4618      	mov	r0, r3
 8002144:	f009 f9fc 	bl	800b540 <siprintf>
         GFX_DrawString(0, 30, mes, BLACK, 1, E_PAPIER);
 8002148:	1d3a      	adds	r2, r7, #4
 800214a:	2301      	movs	r3, #1
 800214c:	9301      	str	r3, [sp, #4]
 800214e:	2301      	movs	r3, #1
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	2300      	movs	r3, #0
 8002154:	211e      	movs	r1, #30
 8002156:	2000      	movs	r0, #0
 8002158:	f7ff f94c 	bl	80013f4 <GFX_DrawString>
         sprintf(mes, "PM2,5 %d", pm25);
 800215c:	4b42      	ldr	r3, [pc, #264]	; (8002268 <main+0x31c>)
 800215e:	881b      	ldrh	r3, [r3, #0]
 8002160:	461a      	mov	r2, r3
 8002162:	1d3b      	adds	r3, r7, #4
 8002164:	4941      	ldr	r1, [pc, #260]	; (800226c <main+0x320>)
 8002166:	4618      	mov	r0, r3
 8002168:	f009 f9ea 	bl	800b540 <siprintf>
         GFX_DrawString(0, 40, mes, BLACK, 1, E_PAPIER);
 800216c:	1d3a      	adds	r2, r7, #4
 800216e:	2301      	movs	r3, #1
 8002170:	9301      	str	r3, [sp, #4]
 8002172:	2301      	movs	r3, #1
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	2300      	movs	r3, #0
 8002178:	2128      	movs	r1, #40	; 0x28
 800217a:	2000      	movs	r0, #0
 800217c:	f7ff f93a 	bl	80013f4 <GFX_DrawString>
         sprintf(mes, "Battery Level %0.2f", b);
 8002180:	4b3b      	ldr	r3, [pc, #236]	; (8002270 <main+0x324>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f7fe f9f7 	bl	8000578 <__aeabi_f2d>
 800218a:	4602      	mov	r2, r0
 800218c:	460b      	mov	r3, r1
 800218e:	1d38      	adds	r0, r7, #4
 8002190:	4938      	ldr	r1, [pc, #224]	; (8002274 <main+0x328>)
 8002192:	f009 f9d5 	bl	800b540 <siprintf>
         GFX_DrawString(0, 50, mes, BLACK, 1, E_PAPIER);
 8002196:	1d3a      	adds	r2, r7, #4
 8002198:	2301      	movs	r3, #1
 800219a:	9301      	str	r3, [sp, #4]
 800219c:	2301      	movs	r3, #1
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	2300      	movs	r3, #0
 80021a2:	2132      	movs	r1, #50	; 0x32
 80021a4:	2000      	movs	r0, #0
 80021a6:	f7ff f925 	bl	80013f4 <GFX_DrawString>
         if(!(State & 0x01))
 80021aa:	4b33      	ldr	r3, [pc, #204]	; (8002278 <main+0x32c>)
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d10a      	bne.n	80021cc <main+0x280>
         {
            GFX_DrawString(0, 60, "Battery Charging", BLACK, 1, E_PAPIER);
 80021b6:	2301      	movs	r3, #1
 80021b8:	9301      	str	r3, [sp, #4]
 80021ba:	2301      	movs	r3, #1
 80021bc:	9300      	str	r3, [sp, #0]
 80021be:	2300      	movs	r3, #0
 80021c0:	4a2e      	ldr	r2, [pc, #184]	; (800227c <main+0x330>)
 80021c2:	213c      	movs	r1, #60	; 0x3c
 80021c4:	2000      	movs	r0, #0
 80021c6:	f7ff f915 	bl	80013f4 <GFX_DrawString>
 80021ca:	e009      	b.n	80021e0 <main+0x294>
         }
         else
         {
            GFX_DrawString(0, 60, "Battery No Charging", BLACK, 1, E_PAPIER);
 80021cc:	2301      	movs	r3, #1
 80021ce:	9301      	str	r3, [sp, #4]
 80021d0:	2301      	movs	r3, #1
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	2300      	movs	r3, #0
 80021d6:	4a2a      	ldr	r2, [pc, #168]	; (8002280 <main+0x334>)
 80021d8:	213c      	movs	r1, #60	; 0x3c
 80021da:	2000      	movs	r0, #0
 80021dc:	f7ff f90a 	bl	80013f4 <GFX_DrawString>
         }
         if(!(State & 0x02))
 80021e0:	4b25      	ldr	r3, [pc, #148]	; (8002278 <main+0x32c>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d14d      	bne.n	8002288 <main+0x33c>
         {
            GFX_DrawString(0, 70, "Battery Standby", BLACK, 1, E_PAPIER);
 80021ec:	2301      	movs	r3, #1
 80021ee:	9301      	str	r3, [sp, #4]
 80021f0:	2301      	movs	r3, #1
 80021f2:	9300      	str	r3, [sp, #0]
 80021f4:	2300      	movs	r3, #0
 80021f6:	4a23      	ldr	r2, [pc, #140]	; (8002284 <main+0x338>)
 80021f8:	2146      	movs	r1, #70	; 0x46
 80021fa:	2000      	movs	r0, #0
 80021fc:	f7ff f8fa 	bl	80013f4 <GFX_DrawString>
 8002200:	e04c      	b.n	800229c <main+0x350>
 8002202:	bf00      	nop
 8002204:	20003ed8 	.word	0x20003ed8
 8002208:	0800f2c8 	.word	0x0800f2c8
 800220c:	0800f138 	.word	0x0800f138
 8002210:	48000400 	.word	0x48000400
 8002214:	20003f3c 	.word	0x20003f3c
 8002218:	20003d68 	.word	0x20003d68
 800221c:	20003d4c 	.word	0x20003d4c
 8002220:	20003d84 	.word	0x20003d84
 8002224:	08002429 	.word	0x08002429
 8002228:	080025cd 	.word	0x080025cd
 800222c:	20004440 	.word	0x20004440
 8002230:	20003d30 	.word	0x20003d30
 8002234:	20003ea4 	.word	0x20003ea4
 8002238:	20003d44 	.word	0x20003d44
 800223c:	0800f140 	.word	0x0800f140
 8002240:	0800f150 	.word	0x0800f150
 8002244:	20003d2e 	.word	0x20003d2e
 8002248:	20003d1c 	.word	0x20003d1c
 800224c:	0800f160 	.word	0x0800f160
 8002250:	20003d20 	.word	0x20003d20
 8002254:	0800f168 	.word	0x0800f168
 8002258:	20003d28 	.word	0x20003d28
 800225c:	0800f170 	.word	0x0800f170
 8002260:	20003d2c 	.word	0x20003d2c
 8002264:	0800f178 	.word	0x0800f178
 8002268:	20003d2a 	.word	0x20003d2a
 800226c:	0800f180 	.word	0x0800f180
 8002270:	20003d24 	.word	0x20003d24
 8002274:	0800f18c 	.word	0x0800f18c
 8002278:	20003d48 	.word	0x20003d48
 800227c:	0800f1a0 	.word	0x0800f1a0
 8002280:	0800f1b4 	.word	0x0800f1b4
 8002284:	0800f1c8 	.word	0x0800f1c8
         }
         else
         {
            GFX_DrawString(0, 70, "Battery No Standby", BLACK, 1, E_PAPIER);
 8002288:	2301      	movs	r3, #1
 800228a:	9301      	str	r3, [sp, #4]
 800228c:	2301      	movs	r3, #1
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	2300      	movs	r3, #0
 8002292:	4a21      	ldr	r2, [pc, #132]	; (8002318 <main+0x3cc>)
 8002294:	2146      	movs	r1, #70	; 0x46
 8002296:	2000      	movs	r0, #0
 8002298:	f7ff f8ac 	bl	80013f4 <GFX_DrawString>
         }
         HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 800229c:	2200      	movs	r2, #0
 800229e:	491f      	ldr	r1, [pc, #124]	; (800231c <main+0x3d0>)
 80022a0:	481f      	ldr	r0, [pc, #124]	; (8002320 <main+0x3d4>)
 80022a2:	f004 fae3 	bl	800686c <HAL_RTC_GetTime>
         HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 80022a6:	2200      	movs	r2, #0
 80022a8:	491e      	ldr	r1, [pc, #120]	; (8002324 <main+0x3d8>)
 80022aa:	481d      	ldr	r0, [pc, #116]	; (8002320 <main+0x3d4>)
 80022ac:	f004 fb40 	bl	8006930 <HAL_RTC_GetDate>
         sprintf(mes, "%d h %d m %d s", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 80022b0:	4b1a      	ldr	r3, [pc, #104]	; (800231c <main+0x3d0>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	461a      	mov	r2, r3
 80022b6:	4b19      	ldr	r3, [pc, #100]	; (800231c <main+0x3d0>)
 80022b8:	785b      	ldrb	r3, [r3, #1]
 80022ba:	4619      	mov	r1, r3
 80022bc:	4b17      	ldr	r3, [pc, #92]	; (800231c <main+0x3d0>)
 80022be:	789b      	ldrb	r3, [r3, #2]
 80022c0:	1d38      	adds	r0, r7, #4
 80022c2:	9300      	str	r3, [sp, #0]
 80022c4:	460b      	mov	r3, r1
 80022c6:	4918      	ldr	r1, [pc, #96]	; (8002328 <main+0x3dc>)
 80022c8:	f009 f93a 	bl	800b540 <siprintf>
         GFX_DrawString(0, 80, mes, BLACK, 1, E_PAPIER);
 80022cc:	1d3a      	adds	r2, r7, #4
 80022ce:	2301      	movs	r3, #1
 80022d0:	9301      	str	r3, [sp, #4]
 80022d2:	2301      	movs	r3, #1
 80022d4:	9300      	str	r3, [sp, #0]
 80022d6:	2300      	movs	r3, #0
 80022d8:	2150      	movs	r1, #80	; 0x50
 80022da:	2000      	movs	r0, #0
 80022dc:	f7ff f88a 	bl	80013f4 <GFX_DrawString>
         sprintf(mes, "%d : %d ; 2022", RtcDate.Date, RtcDate.Month);
 80022e0:	4b10      	ldr	r3, [pc, #64]	; (8002324 <main+0x3d8>)
 80022e2:	789b      	ldrb	r3, [r3, #2]
 80022e4:	461a      	mov	r2, r3
 80022e6:	4b0f      	ldr	r3, [pc, #60]	; (8002324 <main+0x3d8>)
 80022e8:	785b      	ldrb	r3, [r3, #1]
 80022ea:	1d38      	adds	r0, r7, #4
 80022ec:	490f      	ldr	r1, [pc, #60]	; (800232c <main+0x3e0>)
 80022ee:	f009 f927 	bl	800b540 <siprintf>
         GFX_DrawString(0, 90, mes, BLACK, 1, E_PAPIER);
 80022f2:	1d3a      	adds	r2, r7, #4
 80022f4:	2301      	movs	r3, #1
 80022f6:	9301      	str	r3, [sp, #4]
 80022f8:	2301      	movs	r3, #1
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	2300      	movs	r3, #0
 80022fe:	215a      	movs	r1, #90	; 0x5a
 8002300:	2000      	movs	r0, #0
 8002302:	f7ff f877 	bl	80013f4 <GFX_DrawString>
         e_papier_display();
 8002306:	f7ff fc07 	bl	8001b18 <e_papier_display>
         e_papier_clear();
 800230a:	f7ff fc53 	bl	8001bb4 <e_papier_clear>
         HAL_Delay(10000);
 800230e:	f242 7010 	movw	r0, #10000	; 0x2710
 8002312:	f001 fdcf 	bl	8003eb4 <HAL_Delay>
      if(HAL_GetTick() - Time > 1000)
 8002316:	e686      	b.n	8002026 <main+0xda>
 8002318:	0800f1d8 	.word	0x0800f1d8
 800231c:	20003d30 	.word	0x20003d30
 8002320:	20003ea4 	.word	0x20003ea4
 8002324:	20003d44 	.word	0x20003d44
 8002328:	0800f140 	.word	0x0800f140
 800232c:	0800f150 	.word	0x0800f150

08002330 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b098      	sub	sp, #96	; 0x60
 8002334:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002336:	f107 0318 	add.w	r3, r7, #24
 800233a:	2248      	movs	r2, #72	; 0x48
 800233c:	2100      	movs	r1, #0
 800233e:	4618      	mov	r0, r3
 8002340:	f008 fa76 	bl	800a830 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002344:	1d3b      	adds	r3, r7, #4
 8002346:	2200      	movs	r2, #0
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	605a      	str	r2, [r3, #4]
 800234c:	609a      	str	r2, [r3, #8]
 800234e:	60da      	str	r2, [r3, #12]
 8002350:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8002352:	2000      	movs	r0, #0
 8002354:	f002 fc1e 	bl	8004b94 <HAL_PWREx_ControlVoltageScaling>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800235e:	f000 f961 	bl	8002624 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002362:	f002 fbe7 	bl	8004b34 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002366:	4b21      	ldr	r3, [pc, #132]	; (80023ec <SystemClock_Config+0xbc>)
 8002368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236c:	4a1f      	ldr	r2, [pc, #124]	; (80023ec <SystemClock_Config+0xbc>)
 800236e:	f023 0318 	bic.w	r3, r3, #24
 8002372:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002376:	2314      	movs	r3, #20
 8002378:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800237a:	2301      	movs	r3, #1
 800237c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800237e:	2301      	movs	r3, #1
 8002380:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002382:	2300      	movs	r3, #0
 8002384:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002386:	2360      	movs	r3, #96	; 0x60
 8002388:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800238a:	2302      	movs	r3, #2
 800238c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800238e:	2301      	movs	r3, #1
 8002390:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002392:	2301      	movs	r3, #1
 8002394:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 60;
 8002396:	233c      	movs	r3, #60	; 0x3c
 8002398:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800239a:	2302      	movs	r3, #2
 800239c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800239e:	2302      	movs	r3, #2
 80023a0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80023a2:	2302      	movs	r3, #2
 80023a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023a6:	f107 0318 	add.w	r3, r7, #24
 80023aa:	4618      	mov	r0, r3
 80023ac:	f002 fc96 	bl	8004cdc <HAL_RCC_OscConfig>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80023b6:	f000 f935 	bl	8002624 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023ba:	230f      	movs	r3, #15
 80023bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023be:	2303      	movs	r3, #3
 80023c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023c2:	2300      	movs	r3, #0
 80023c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023c6:	2300      	movs	r3, #0
 80023c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023ca:	2300      	movs	r3, #0
 80023cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80023ce:	1d3b      	adds	r3, r7, #4
 80023d0:	2105      	movs	r1, #5
 80023d2:	4618      	mov	r0, r3
 80023d4:	f003 f8fe 	bl	80055d4 <HAL_RCC_ClockConfig>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80023de:	f000 f921 	bl	8002624 <Error_Handler>
  }
}
 80023e2:	bf00      	nop
 80023e4:	3760      	adds	r7, #96	; 0x60
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40021000 	.word	0x40021000

080023f0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80023f4:	2200      	movs	r2, #0
 80023f6:	2100      	movs	r1, #0
 80023f8:	2025      	movs	r0, #37	; 0x25
 80023fa:	f001 fe5a 	bl	80040b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023fe:	2025      	movs	r0, #37	; 0x25
 8002400:	f001 fe73 	bl	80040ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002404:	2200      	movs	r2, #0
 8002406:	2100      	movs	r1, #0
 8002408:	200b      	movs	r0, #11
 800240a:	f001 fe52 	bl	80040b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800240e:	200b      	movs	r0, #11
 8002410:	f001 fe6b 	bl	80040ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002414:	2200      	movs	r2, #0
 8002416:	2100      	movs	r1, #0
 8002418:	200c      	movs	r0, #12
 800241a:	f001 fe4a 	bl	80040b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800241e:	200c      	movs	r0, #12
 8002420:	f001 fe63 	bl	80040ea <HAL_NVIC_EnableIRQ>
}
 8002424:	bf00      	nop
 8002426:	bd80      	pop	{r7, pc}

08002428 <RFP_DataFunction>:

/* USER CODE BEGIN 4 */
void RFP_DataFunction(uint8_t *Data, uint32_t DataLength, uint32_t DataStart)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
   uint8_t *TempPtr;
   TempPtr  = &h;
 8002434:	4b5d      	ldr	r3, [pc, #372]	; (80025ac <RFP_DataFunction+0x184>)
 8002436:	617b      	str	r3, [r7, #20]
   *TempPtr = Data[DataStart];
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4413      	add	r3, r2
 800243e:	781a      	ldrb	r2, [r3, #0]
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	3301      	adds	r3, #1
 8002448:	617b      	str	r3, [r7, #20]
   *TempPtr = Data[DataStart + 1];
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	3301      	adds	r3, #1
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	4413      	add	r3, r2
 8002452:	781a      	ldrb	r2, [r3, #0]
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	3301      	adds	r3, #1
 800245c:	617b      	str	r3, [r7, #20]
   *TempPtr = Data[DataStart + 2];
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	3302      	adds	r3, #2
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	4413      	add	r3, r2
 8002466:	781a      	ldrb	r2, [r3, #0]
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	3301      	adds	r3, #1
 8002470:	617b      	str	r3, [r7, #20]
   *TempPtr = Data[DataStart + 3];
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	3303      	adds	r3, #3
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	4413      	add	r3, r2
 800247a:	781a      	ldrb	r2, [r3, #0]
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	3301      	adds	r3, #1
 8002484:	617b      	str	r3, [r7, #20]
   TempPtr  = &t;
 8002486:	4b4a      	ldr	r3, [pc, #296]	; (80025b0 <RFP_DataFunction+0x188>)
 8002488:	617b      	str	r3, [r7, #20]
   *TempPtr = Data[DataStart + 5];
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	3305      	adds	r3, #5
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	4413      	add	r3, r2
 8002492:	781a      	ldrb	r2, [r3, #0]
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	3301      	adds	r3, #1
 800249c:	617b      	str	r3, [r7, #20]
   *TempPtr = Data[DataStart + 6];
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3306      	adds	r3, #6
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	4413      	add	r3, r2
 80024a6:	781a      	ldrb	r2, [r3, #0]
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	3301      	adds	r3, #1
 80024b0:	617b      	str	r3, [r7, #20]
   *TempPtr = Data[DataStart + 7];
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	3307      	adds	r3, #7
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	4413      	add	r3, r2
 80024ba:	781a      	ldrb	r2, [r3, #0]
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	3301      	adds	r3, #1
 80024c4:	617b      	str	r3, [r7, #20]
   *TempPtr = Data[DataStart + 8];
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	3308      	adds	r3, #8
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	4413      	add	r3, r2
 80024ce:	781a      	ldrb	r2, [r3, #0]
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	701a      	strb	r2, [r3, #0]
   TempPtr  = &b;
 80024d4:	4b37      	ldr	r3, [pc, #220]	; (80025b4 <RFP_DataFunction+0x18c>)
 80024d6:	617b      	str	r3, [r7, #20]
   *TempPtr = Data[DataStart + 13];
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	330d      	adds	r3, #13
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	4413      	add	r3, r2
 80024e0:	781a      	ldrb	r2, [r3, #0]
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	3301      	adds	r3, #1
 80024ea:	617b      	str	r3, [r7, #20]
   *TempPtr = Data[DataStart + 14];
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	330e      	adds	r3, #14
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	4413      	add	r3, r2
 80024f4:	781a      	ldrb	r2, [r3, #0]
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	3301      	adds	r3, #1
 80024fe:	617b      	str	r3, [r7, #20]
   *TempPtr = Data[DataStart + 15];
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	330f      	adds	r3, #15
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	4413      	add	r3, r2
 8002508:	781a      	ldrb	r2, [r3, #0]
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	701a      	strb	r2, [r3, #0]
   TempPtr++;
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	3301      	adds	r3, #1
 8002512:	617b      	str	r3, [r7, #20]
   *TempPtr        = Data[DataStart + 16];
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3310      	adds	r3, #16
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	4413      	add	r3, r2
 800251c:	781a      	ldrb	r2, [r3, #0]
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	701a      	strb	r2, [r3, #0]
   TempPtr         = NULL;
 8002522:	2300      	movs	r3, #0
 8002524:	617b      	str	r3, [r7, #20]
   pm1             = (Data[22 + 3] | (Data[21 + 3] << 8));
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	3319      	adds	r3, #25
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	b21a      	sxth	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	3318      	adds	r3, #24
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	021b      	lsls	r3, r3, #8
 8002536:	b21b      	sxth	r3, r3
 8002538:	4313      	orrs	r3, r2
 800253a:	b21b      	sxth	r3, r3
 800253c:	b29a      	uxth	r2, r3
 800253e:	4b1e      	ldr	r3, [pc, #120]	; (80025b8 <RFP_DataFunction+0x190>)
 8002540:	801a      	strh	r2, [r3, #0]
   pm25            = (Data[28 + 3] | (Data[27 + 3] << 8));
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	331f      	adds	r3, #31
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	b21a      	sxth	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	331e      	adds	r3, #30
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	021b      	lsls	r3, r3, #8
 8002552:	b21b      	sxth	r3, r3
 8002554:	4313      	orrs	r3, r2
 8002556:	b21b      	sxth	r3, r3
 8002558:	b29a      	uxth	r2, r3
 800255a:	4b18      	ldr	r3, [pc, #96]	; (80025bc <RFP_DataFunction+0x194>)
 800255c:	801a      	strh	r2, [r3, #0]
   pm10            = (Data[25 + 3] | (Data[24 + 3] << 8));
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	331c      	adds	r3, #28
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	b21a      	sxth	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	331b      	adds	r3, #27
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	021b      	lsls	r3, r3, #8
 800256e:	b21b      	sxth	r3, r3
 8002570:	4313      	orrs	r3, r2
 8002572:	b21b      	sxth	r3, r3
 8002574:	b29a      	uxth	r2, r3
 8002576:	4b12      	ldr	r3, [pc, #72]	; (80025c0 <RFP_DataFunction+0x198>)
 8002578:	801a      	strh	r2, [r3, #0]
   State           = Data[DataStart + 18];
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	3312      	adds	r3, #18
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	4413      	add	r3, r2
 8002582:	781a      	ldrb	r2, [r3, #0]
 8002584:	4b0f      	ldr	r3, [pc, #60]	; (80025c4 <RFP_DataFunction+0x19c>)
 8002586:	701a      	strb	r2, [r3, #0]
   f               = 1;
 8002588:	4b0f      	ldr	r3, [pc, #60]	; (80025c8 <RFP_DataFunction+0x1a0>)
 800258a:	2201      	movs	r2, #1
 800258c:	701a      	strb	r2, [r3, #0]
   uint8_t Temp[2] = { RFP_GO_TO_DEEP_SLEEP, 5 };
 800258e:	f240 5303 	movw	r3, #1283	; 0x503
 8002592:	823b      	strh	r3, [r7, #16]
   RFP_SendData(RFP_ODWS, RFP_COMMAND, Temp, 2);
 8002594:	f107 0210 	add.w	r2, r7, #16
 8002598:	2302      	movs	r3, #2
 800259a:	2101      	movs	r1, #1
 800259c:	2002      	movs	r0, #2
 800259e:	f000 f915 	bl	80027cc <RFP_SendData>
}
 80025a2:	bf00      	nop
 80025a4:	3718      	adds	r7, #24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	20003d1c 	.word	0x20003d1c
 80025b0:	20003d20 	.word	0x20003d20
 80025b4:	20003d24 	.word	0x20003d24
 80025b8:	20003d28 	.word	0x20003d28
 80025bc:	20003d2a 	.word	0x20003d2a
 80025c0:	20003d2c 	.word	0x20003d2c
 80025c4:	20003d48 	.word	0x20003d48
 80025c8:	20003d2e 	.word	0x20003d2e

080025cc <RFP_MessageExitDeepSleep>:
void RFP_MessageExitDeepSleep(uint8_t *Data, uint32_t DataLength, uint32_t DataStart)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
   uint8_t data = RFP_START_MEASURMENT;
 80025d8:	2302      	movs	r3, #2
 80025da:	75fb      	strb	r3, [r7, #23]
   RFP_SendData(RFP_ODWS, RFP_COMMAND, &data, 1);
 80025dc:	f107 0217 	add.w	r2, r7, #23
 80025e0:	2301      	movs	r3, #1
 80025e2:	2101      	movs	r1, #1
 80025e4:	2002      	movs	r0, #2
 80025e6:	f000 f8f1 	bl	80027cc <RFP_SendData>
}
 80025ea:	bf00      	nop
 80025ec:	3718      	adds	r7, #24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
	...

080025f4 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	460b      	mov	r3, r1
 80025fe:	807b      	strh	r3, [r7, #2]
   HAL_GPIO_TogglePin(HEARTBEAT_GPIO_Port, HEARTBEAT_Pin);
 8002600:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002604:	4805      	ldr	r0, [pc, #20]	; (800261c <HAL_UARTEx_RxEventCallback+0x28>)
 8002606:	f002 fa7b 	bl	8004b00 <HAL_GPIO_TogglePin>
   rfp.DataSize = Size;
 800260a:	887b      	ldrh	r3, [r7, #2]
 800260c:	4a04      	ldr	r2, [pc, #16]	; (8002620 <HAL_UARTEx_RxEventCallback+0x2c>)
 800260e:	6093      	str	r3, [r2, #8]
   RFP_InterruptTask();
 8002610:	f000 f8ce 	bl	80027b0 <RFP_InterruptTask>
}
 8002614:	bf00      	nop
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	48000400 	.word	0x48000400
 8002620:	20003d4c 	.word	0x20003d4c

08002624 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002628:	b672      	cpsid	i
}
 800262a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
   /* User can add his own implementation to report the HAL error return state */
   __disable_irq();
   while(1)
 800262c:	e7fe      	b.n	800262c <Error_Handler+0x8>
	...

08002630 <RFP_Handle>:
        { RFP_WaitForResponseFunction }, { RFP_ParseResponseFunction } };
RFPCommandFunctions_TypeDef RfpCommandFunction[RFP_COMMAND_CNT];
RFPDataFunctions_TypeDef RfpDataFunctions;
RFPMessageFunctions_TypeDef RfpMessageFunction[RFP_MESSAGE_CNT];
void RFP_Handle(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
   RFP_ChangeState();
 8002634:	f000 f856 	bl	80026e4 <RFP_ChangeState>
   if(RfpFunction[Rfp->State].RfpFunction != NULL)
 8002638:	4b09      	ldr	r3, [pc, #36]	; (8002660 <RFP_Handle+0x30>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	461a      	mov	r2, r3
 8002640:	4b08      	ldr	r3, [pc, #32]	; (8002664 <RFP_Handle+0x34>)
 8002642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d007      	beq.n	800265a <RFP_Handle+0x2a>
   {
      RfpFunction[Rfp->State].RfpFunction();
 800264a:	4b05      	ldr	r3, [pc, #20]	; (8002660 <RFP_Handle+0x30>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	461a      	mov	r2, r3
 8002652:	4b04      	ldr	r3, [pc, #16]	; (8002664 <RFP_Handle+0x34>)
 8002654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002658:	4798      	blx	r3
   }
}
 800265a:	bf00      	nop
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20003e5c 	.word	0x20003e5c
 8002664:	20000058 	.word	0x20000058

08002668 <RFP_Init>:
void RFP_Init(RFP_TypeDef *RadioProtocol, RFPDeviceID_TypeDef Device)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	460b      	mov	r3, r1
 8002672:	70fb      	strb	r3, [r7, #3]
   Rfp             = RadioProtocol;
 8002674:	4a17      	ldr	r2, [pc, #92]	; (80026d4 <RFP_Init+0x6c>)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6013      	str	r3, [r2, #0]
   Rfp->Initialize = RFP_INITIALIZE;
 800267a:	4b16      	ldr	r3, [pc, #88]	; (80026d4 <RFP_Init+0x6c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2201      	movs	r2, #1
 8002680:	70da      	strb	r2, [r3, #3]
   Rfp->DeviceType = Device;
 8002682:	4b14      	ldr	r3, [pc, #80]	; (80026d4 <RFP_Init+0x6c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	78fa      	ldrb	r2, [r7, #3]
 8002688:	715a      	strb	r2, [r3, #5]
   for(int i = 0; i < RFP_COMMAND_CNT; i++)
 800268a:	2300      	movs	r3, #0
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	e007      	b.n	80026a0 <RFP_Init+0x38>
   {
      RfpCommandFunction[i].RfpCommandFunction = NULL;
 8002690:	4a11      	ldr	r2, [pc, #68]	; (80026d8 <RFP_Init+0x70>)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2100      	movs	r1, #0
 8002696:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   for(int i = 0; i < RFP_COMMAND_CNT; i++)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	3301      	adds	r3, #1
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2b05      	cmp	r3, #5
 80026a4:	ddf4      	ble.n	8002690 <RFP_Init+0x28>
   }
   for(int i = 0; i < RFP_MESSAGE_CNT; i++)
 80026a6:	2300      	movs	r3, #0
 80026a8:	60bb      	str	r3, [r7, #8]
 80026aa:	e007      	b.n	80026bc <RFP_Init+0x54>
   {
      RfpMessageFunction[i].RfpMessageFunction = NULL;
 80026ac:	4a0b      	ldr	r2, [pc, #44]	; (80026dc <RFP_Init+0x74>)
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	2100      	movs	r1, #0
 80026b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   for(int i = 0; i < RFP_MESSAGE_CNT; i++)
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	3301      	adds	r3, #1
 80026ba:	60bb      	str	r3, [r7, #8]
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	2b04      	cmp	r3, #4
 80026c0:	ddf4      	ble.n	80026ac <RFP_Init+0x44>
   }
   RfpDataFunctions.RfpDataFunction = NULL;
 80026c2:	4b07      	ldr	r3, [pc, #28]	; (80026e0 <RFP_Init+0x78>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
}
 80026c8:	bf00      	nop
 80026ca:	3714      	adds	r7, #20
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	20003e5c 	.word	0x20003e5c
 80026d8:	20003e60 	.word	0x20003e60
 80026dc:	20003e7c 	.word	0x20003e7c
 80026e0:	20003e78 	.word	0x20003e78

080026e4 <RFP_ChangeState>:
static void RFP_ChangeState(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
   for(int i = 0; i < RFP_TRANSITION_TABLE_SIZE; i++)
 80026ea:	2300      	movs	r3, #0
 80026ec:	607b      	str	r3, [r7, #4]
 80026ee:	e02b      	b.n	8002748 <RFP_ChangeState+0x64>
   {
      if(Rfp->State == RfpTransitionTable[i].Source && Rfp->NewEvent == RfpTransitionTable[i].Event)
 80026f0:	4b1b      	ldr	r3, [pc, #108]	; (8002760 <RFP_ChangeState+0x7c>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	7819      	ldrb	r1, [r3, #0]
 80026f6:	481b      	ldr	r0, [pc, #108]	; (8002764 <RFP_ChangeState+0x80>)
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	4613      	mov	r3, r2
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	4413      	add	r3, r2
 8002700:	4403      	add	r3, r0
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	4299      	cmp	r1, r3
 8002706:	d11c      	bne.n	8002742 <RFP_ChangeState+0x5e>
 8002708:	4b15      	ldr	r3, [pc, #84]	; (8002760 <RFP_ChangeState+0x7c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	7859      	ldrb	r1, [r3, #1]
 800270e:	4815      	ldr	r0, [pc, #84]	; (8002764 <RFP_ChangeState+0x80>)
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	4613      	mov	r3, r2
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	4413      	add	r3, r2
 8002718:	4403      	add	r3, r0
 800271a:	3302      	adds	r3, #2
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	4299      	cmp	r1, r3
 8002720:	d10f      	bne.n	8002742 <RFP_ChangeState+0x5e>
      {
         Rfp->State    = RfpTransitionTable[i].Destination;
 8002722:	4b0f      	ldr	r3, [pc, #60]	; (8002760 <RFP_ChangeState+0x7c>)
 8002724:	6819      	ldr	r1, [r3, #0]
 8002726:	480f      	ldr	r0, [pc, #60]	; (8002764 <RFP_ChangeState+0x80>)
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	4613      	mov	r3, r2
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	4413      	add	r3, r2
 8002730:	4403      	add	r3, r0
 8002732:	3301      	adds	r3, #1
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	700b      	strb	r3, [r1, #0]
         Rfp->NewEvent = RFP_EVENT_NOTHING;
 8002738:	4b09      	ldr	r3, [pc, #36]	; (8002760 <RFP_ChangeState+0x7c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2200      	movs	r2, #0
 800273e:	705a      	strb	r2, [r3, #1]
         return;
 8002740:	e009      	b.n	8002756 <RFP_ChangeState+0x72>
   for(int i = 0; i < RFP_TRANSITION_TABLE_SIZE; i++)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	3301      	adds	r3, #1
 8002746:	607b      	str	r3, [r7, #4]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b0b      	cmp	r3, #11
 800274c:	d9d0      	bls.n	80026f0 <RFP_ChangeState+0xc>
      }
   }
   Rfp->NewEvent = RFP_EVENT_NOTHING;
 800274e:	4b04      	ldr	r3, [pc, #16]	; (8002760 <RFP_ChangeState+0x7c>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2200      	movs	r2, #0
 8002754:	705a      	strb	r2, [r3, #1]
}
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	20003e5c 	.word	0x20003e5c
 8002764:	20000034 	.word	0x20000034

08002768 <RFP_RegisterDataFunction>:
void RFP_RegisterCommandFunction(RFPCommands_TypeDef Command, void (*Callback)(uint8_t *, uint32_t, uint32_t))
{
   RfpCommandFunction[Command - 1].RfpCommandFunction = Callback;
}
void RFP_RegisterDataFunction(void (*Callback)(uint8_t *, uint32_t, uint32_t))
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
   RfpDataFunctions.RfpDataFunction = Callback;
 8002770:	4a04      	ldr	r2, [pc, #16]	; (8002784 <RFP_RegisterDataFunction+0x1c>)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6013      	str	r3, [r2, #0]
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	20003e78 	.word	0x20003e78

08002788 <RFP_RegisterMessageFunction>:
void RFP_RegisterMessageFunction(RFPMessage_TypeDef Message, void (*Callback)(uint8_t *, uint32_t, uint32_t))
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	6039      	str	r1, [r7, #0]
 8002792:	71fb      	strb	r3, [r7, #7]
   RfpMessageFunction[Message - 1].RfpMessageFunction = Callback;
 8002794:	79fb      	ldrb	r3, [r7, #7]
 8002796:	3b01      	subs	r3, #1
 8002798:	4904      	ldr	r1, [pc, #16]	; (80027ac <RFP_RegisterMessageFunction+0x24>)
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	20003e7c 	.word	0x20003e7c

080027b0 <RFP_InterruptTask>:
void RFP_InterruptTask(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
   Rfp->NewDataFlag = RFP_NEW_DATA_FLAG_SET;
 80027b4:	4b04      	ldr	r3, [pc, #16]	; (80027c8 <RFP_InterruptTask+0x18>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2201      	movs	r2, #1
 80027ba:	711a      	strb	r2, [r3, #4]
}
 80027bc:	bf00      	nop
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	20003e5c 	.word	0x20003e5c

080027cc <RFP_SendData>:
void RFP_SendData(RFPDeviceID_TypeDef Destination, RFPMessageType_TypeDef Type, uint8_t *Data, uint32_t Length)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60ba      	str	r2, [r7, #8]
 80027d4:	607b      	str	r3, [r7, #4]
 80027d6:	4603      	mov	r3, r0
 80027d8:	73fb      	strb	r3, [r7, #15]
 80027da:	460b      	mov	r3, r1
 80027dc:	73bb      	strb	r3, [r7, #14]
   RfpDataTransmit[0] = Destination;
 80027de:	4a27      	ldr	r2, [pc, #156]	; (800287c <RFP_SendData+0xb0>)
 80027e0:	7bfb      	ldrb	r3, [r7, #15]
 80027e2:	7013      	strb	r3, [r2, #0]
   RfpDataTransmit[1] = Rfp->DeviceType;
 80027e4:	4b26      	ldr	r3, [pc, #152]	; (8002880 <RFP_SendData+0xb4>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	795a      	ldrb	r2, [r3, #5]
 80027ea:	4b24      	ldr	r3, [pc, #144]	; (800287c <RFP_SendData+0xb0>)
 80027ec:	705a      	strb	r2, [r3, #1]
   RfpDataTransmit[2] = Type;
 80027ee:	4a23      	ldr	r2, [pc, #140]	; (800287c <RFP_SendData+0xb0>)
 80027f0:	7bbb      	ldrb	r3, [r7, #14]
 80027f2:	7093      	strb	r3, [r2, #2]
   for(int i = 0; i < Length; i++)
 80027f4:	2300      	movs	r3, #0
 80027f6:	617b      	str	r3, [r7, #20]
 80027f8:	e00a      	b.n	8002810 <RFP_SendData+0x44>
   {
      RfpDataTransmit[i + 3] = Data[i];
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	68ba      	ldr	r2, [r7, #8]
 80027fe:	441a      	add	r2, r3
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	3303      	adds	r3, #3
 8002804:	7811      	ldrb	r1, [r2, #0]
 8002806:	4a1d      	ldr	r2, [pc, #116]	; (800287c <RFP_SendData+0xb0>)
 8002808:	54d1      	strb	r1, [r2, r3]
   for(int i = 0; i < Length; i++)
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	3301      	adds	r3, #1
 800280e:	617b      	str	r3, [r7, #20]
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	429a      	cmp	r2, r3
 8002816:	d8f0      	bhi.n	80027fa <RFP_SendData+0x2e>
   }
   uint32_t crc                    = Crc(CRC_INITIAL_VALUE, 3 + Length, RfpDataTransmit);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3303      	adds	r3, #3
 800281c:	4a17      	ldr	r2, [pc, #92]	; (800287c <RFP_SendData+0xb0>)
 800281e:	4619      	mov	r1, r3
 8002820:	f04f 30ff 	mov.w	r0, #4294967295
 8002824:	f7fe ff5c 	bl	80016e0 <Crc>
 8002828:	6138      	str	r0, [r7, #16]
   RfpDataTransmit[3 + Length]     = ((crc >> 24) & 0xff);
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	0e1a      	lsrs	r2, r3, #24
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	3303      	adds	r3, #3
 8002832:	b2d1      	uxtb	r1, r2
 8002834:	4a11      	ldr	r2, [pc, #68]	; (800287c <RFP_SendData+0xb0>)
 8002836:	54d1      	strb	r1, [r2, r3]
   RfpDataTransmit[3 + Length + 1] = ((crc >> 16) & 0xff);
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	0c1a      	lsrs	r2, r3, #16
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3304      	adds	r3, #4
 8002840:	b2d1      	uxtb	r1, r2
 8002842:	4a0e      	ldr	r2, [pc, #56]	; (800287c <RFP_SendData+0xb0>)
 8002844:	54d1      	strb	r1, [r2, r3]
   RfpDataTransmit[3 + Length + 2] = ((crc >> 8) & 0xff);
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	0a1a      	lsrs	r2, r3, #8
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	3305      	adds	r3, #5
 800284e:	b2d1      	uxtb	r1, r2
 8002850:	4a0a      	ldr	r2, [pc, #40]	; (800287c <RFP_SendData+0xb0>)
 8002852:	54d1      	strb	r1, [r2, r3]
   RfpDataTransmit[3 + Length + 3] = (crc & 0xff);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3306      	adds	r3, #6
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	b2d1      	uxtb	r1, r2
 800285c:	4a07      	ldr	r2, [pc, #28]	; (800287c <RFP_SendData+0xb0>)
 800285e:	54d1      	strb	r1, [r2, r3]
   Rfp->SendFlag                   = RFP_SEND_FLAG_SET;
 8002860:	4b07      	ldr	r3, [pc, #28]	; (8002880 <RFP_SendData+0xb4>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2201      	movs	r2, #1
 8002866:	745a      	strb	r2, [r3, #17]
   Rfp->DataSizeTransmit           = 3 + Length + 4;
 8002868:	4b05      	ldr	r3, [pc, #20]	; (8002880 <RFP_SendData+0xb4>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	3207      	adds	r2, #7
 8002870:	60da      	str	r2, [r3, #12]
}
 8002872:	bf00      	nop
 8002874:	3718      	adds	r7, #24
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	20003df8 	.word	0x20003df8
 8002880:	20003e5c 	.word	0x20003e5c

08002884 <RFP_SendResponseFunction>:
static void RFP_SendResponseFunction(RFPMessageType_TypeDef Response)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	71fb      	strb	r3, [r7, #7]
   HAL_Delay(200);
 800288e:	20c8      	movs	r0, #200	; 0xc8
 8002890:	f001 fb10 	bl	8003eb4 <HAL_Delay>
   RfpDataTransmit[0] = Rfp->SourceMessage;
 8002894:	4b18      	ldr	r3, [pc, #96]	; (80028f8 <RFP_SendResponseFunction+0x74>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	7c1a      	ldrb	r2, [r3, #16]
 800289a:	4b18      	ldr	r3, [pc, #96]	; (80028fc <RFP_SendResponseFunction+0x78>)
 800289c:	701a      	strb	r2, [r3, #0]
   RfpDataTransmit[1] = Rfp->DeviceType;
 800289e:	4b16      	ldr	r3, [pc, #88]	; (80028f8 <RFP_SendResponseFunction+0x74>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	795a      	ldrb	r2, [r3, #5]
 80028a4:	4b15      	ldr	r3, [pc, #84]	; (80028fc <RFP_SendResponseFunction+0x78>)
 80028a6:	705a      	strb	r2, [r3, #1]
   RfpDataTransmit[2] = RFP_MESSAGE;
 80028a8:	4b14      	ldr	r3, [pc, #80]	; (80028fc <RFP_SendResponseFunction+0x78>)
 80028aa:	2203      	movs	r2, #3
 80028ac:	709a      	strb	r2, [r3, #2]
   RfpDataTransmit[3] = Response;
 80028ae:	4a13      	ldr	r2, [pc, #76]	; (80028fc <RFP_SendResponseFunction+0x78>)
 80028b0:	79fb      	ldrb	r3, [r7, #7]
 80028b2:	70d3      	strb	r3, [r2, #3]
   uint32_t crc       = Crc(CRC_INITIAL_VALUE, 4, RfpDataTransmit);
 80028b4:	4a11      	ldr	r2, [pc, #68]	; (80028fc <RFP_SendResponseFunction+0x78>)
 80028b6:	2104      	movs	r1, #4
 80028b8:	f04f 30ff 	mov.w	r0, #4294967295
 80028bc:	f7fe ff10 	bl	80016e0 <Crc>
 80028c0:	60f8      	str	r0, [r7, #12]
   RfpDataTransmit[4] = ((crc >> 24) & 0xff);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	0e1b      	lsrs	r3, r3, #24
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	4b0c      	ldr	r3, [pc, #48]	; (80028fc <RFP_SendResponseFunction+0x78>)
 80028ca:	711a      	strb	r2, [r3, #4]
   RfpDataTransmit[5] = ((crc >> 16) & 0xff);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	0c1b      	lsrs	r3, r3, #16
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	4b0a      	ldr	r3, [pc, #40]	; (80028fc <RFP_SendResponseFunction+0x78>)
 80028d4:	715a      	strb	r2, [r3, #5]
   RfpDataTransmit[6] = ((crc >> 8) & 0xff);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	0a1b      	lsrs	r3, r3, #8
 80028da:	b2da      	uxtb	r2, r3
 80028dc:	4b07      	ldr	r3, [pc, #28]	; (80028fc <RFP_SendResponseFunction+0x78>)
 80028de:	719a      	strb	r2, [r3, #6]
   RfpDataTransmit[7] = (crc & 0xff);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	4b05      	ldr	r3, [pc, #20]	; (80028fc <RFP_SendResponseFunction+0x78>)
 80028e6:	71da      	strb	r2, [r3, #7]
   HC12_TransmitData(RfpDataTransmit, 8);
 80028e8:	2108      	movs	r1, #8
 80028ea:	4804      	ldr	r0, [pc, #16]	; (80028fc <RFP_SendResponseFunction+0x78>)
 80028ec:	f7fe febc 	bl	8001668 <HC12_TransmitData>
}
 80028f0:	bf00      	nop
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	20003e5c 	.word	0x20003e5c
 80028fc:	20003df8 	.word	0x20003df8

08002900 <RFP_InitializeFunction>:
static void RFP_InitializeFunction(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
   Rfp->NewEvent = RFP_EVENT_END_INITIALIZE;
 8002904:	4b08      	ldr	r3, [pc, #32]	; (8002928 <RFP_InitializeFunction+0x28>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2202      	movs	r2, #2
 800290a:	705a      	strb	r2, [r3, #1]
   HC12_ExitCommandMode();
 800290c:	f7fe fea1 	bl	8001652 <HC12_ExitCommandMode>
   HC12_Init(Rfp, RfpDataRecive);
 8002910:	4b05      	ldr	r3, [pc, #20]	; (8002928 <RFP_InitializeFunction+0x28>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4905      	ldr	r1, [pc, #20]	; (800292c <RFP_InitializeFunction+0x2c>)
 8002916:	4618      	mov	r0, r3
 8002918:	f7fe fecc 	bl	80016b4 <HC12_Init>
   HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800291c:	2164      	movs	r1, #100	; 0x64
 800291e:	4803      	ldr	r0, [pc, #12]	; (800292c <RFP_InitializeFunction+0x2c>)
 8002920:	f7fe feb6 	bl	8001690 <HC12_ReciveToIdleDMA>
}
 8002924:	bf00      	nop
 8002926:	bd80      	pop	{r7, pc}
 8002928:	20003e5c 	.word	0x20003e5c
 800292c:	20003d94 	.word	0x20003d94

08002930 <RFP_IdleFunction>:
static void RFP_IdleFunction(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
   if(Rfp->NewDataFlag == RFP_NEW_DATA_FLAG_SET)
 8002934:	4b10      	ldr	r3, [pc, #64]	; (8002978 <RFP_IdleFunction+0x48>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	791b      	ldrb	r3, [r3, #4]
 800293a:	b2db      	uxtb	r3, r3
 800293c:	2b01      	cmp	r3, #1
 800293e:	d108      	bne.n	8002952 <RFP_IdleFunction+0x22>
   {
      Rfp->NewDataFlag = RFP_NEW_DATA_FLAG_RESET;
 8002940:	4b0d      	ldr	r3, [pc, #52]	; (8002978 <RFP_IdleFunction+0x48>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2200      	movs	r2, #0
 8002946:	711a      	strb	r2, [r3, #4]
      Rfp->NewEvent    = RFP_EVENT_NEW_DATA;
 8002948:	4b0b      	ldr	r3, [pc, #44]	; (8002978 <RFP_IdleFunction+0x48>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2201      	movs	r2, #1
 800294e:	705a      	strb	r2, [r3, #1]
   {
      Rfp->SendFlag = RFP_SEND_FLAG_RESET;
      Rfp->NewEvent = RFP_EVENT_SEND;
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
   }
}
 8002950:	e010      	b.n	8002974 <RFP_IdleFunction+0x44>
   else if(Rfp->SendFlag == RFP_SEND_FLAG_SET)
 8002952:	4b09      	ldr	r3, [pc, #36]	; (8002978 <RFP_IdleFunction+0x48>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	7c5b      	ldrb	r3, [r3, #17]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d10b      	bne.n	8002974 <RFP_IdleFunction+0x44>
      Rfp->SendFlag = RFP_SEND_FLAG_RESET;
 800295c:	4b06      	ldr	r3, [pc, #24]	; (8002978 <RFP_IdleFunction+0x48>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2200      	movs	r2, #0
 8002962:	745a      	strb	r2, [r3, #17]
      Rfp->NewEvent = RFP_EVENT_SEND;
 8002964:	4b04      	ldr	r3, [pc, #16]	; (8002978 <RFP_IdleFunction+0x48>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2206      	movs	r2, #6
 800296a:	705a      	strb	r2, [r3, #1]
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 800296c:	2164      	movs	r1, #100	; 0x64
 800296e:	4803      	ldr	r0, [pc, #12]	; (800297c <RFP_IdleFunction+0x4c>)
 8002970:	f7fe fe8e 	bl	8001690 <HC12_ReciveToIdleDMA>
}
 8002974:	bf00      	nop
 8002976:	bd80      	pop	{r7, pc}
 8002978:	20003e5c 	.word	0x20003e5c
 800297c:	20003d94 	.word	0x20003d94

08002980 <RFP_ParseFunction>:
static void RFP_ParseFunction(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
   uint32_t MessageCRC = 0;
 8002986:	2300      	movs	r3, #0
 8002988:	607b      	str	r3, [r7, #4]
   Rfp->SourceMessage  = RfpDataRecive[1];
 800298a:	4b3a      	ldr	r3, [pc, #232]	; (8002a74 <RFP_ParseFunction+0xf4>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a3a      	ldr	r2, [pc, #232]	; (8002a78 <RFP_ParseFunction+0xf8>)
 8002990:	7852      	ldrb	r2, [r2, #1]
 8002992:	741a      	strb	r2, [r3, #16]
   if(RfpDataRecive[0] != Rfp->DeviceType)
 8002994:	4b38      	ldr	r3, [pc, #224]	; (8002a78 <RFP_ParseFunction+0xf8>)
 8002996:	781a      	ldrb	r2, [r3, #0]
 8002998:	4b36      	ldr	r3, [pc, #216]	; (8002a74 <RFP_ParseFunction+0xf4>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	795b      	ldrb	r3, [r3, #5]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d00b      	beq.n	80029ba <RFP_ParseFunction+0x3a>
   {
      Rfp->NewEvent = RFP_EVENT_ERROR;
 80029a2:	4b34      	ldr	r3, [pc, #208]	; (8002a74 <RFP_ParseFunction+0xf4>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2203      	movs	r2, #3
 80029a8:	705a      	strb	r2, [r3, #1]
      RFP_SendResponseFunction(RFP_ERROR);
 80029aa:	2001      	movs	r0, #1
 80029ac:	f7ff ff6a 	bl	8002884 <RFP_SendResponseFunction>
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 80029b0:	2164      	movs	r1, #100	; 0x64
 80029b2:	4831      	ldr	r0, [pc, #196]	; (8002a78 <RFP_ParseFunction+0xf8>)
 80029b4:	f7fe fe6c 	bl	8001690 <HC12_ReciveToIdleDMA>
               HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
            }
         }
      }
   }
}
 80029b8:	e057      	b.n	8002a6a <RFP_ParseFunction+0xea>
      if(Rfp->DataSize != 0)
 80029ba:	4b2e      	ldr	r3, [pc, #184]	; (8002a74 <RFP_ParseFunction+0xf4>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d052      	beq.n	8002a6a <RFP_ParseFunction+0xea>
         MessageCRC = (((uint32_t)RfpDataRecive[Rfp->DataSize - 4] << 24) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 3] << 16)
 80029c4:	4b2b      	ldr	r3, [pc, #172]	; (8002a74 <RFP_ParseFunction+0xf4>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	3b04      	subs	r3, #4
 80029cc:	4a2a      	ldr	r2, [pc, #168]	; (8002a78 <RFP_ParseFunction+0xf8>)
 80029ce:	5cd3      	ldrb	r3, [r2, r3]
 80029d0:	061a      	lsls	r2, r3, #24
 80029d2:	4b28      	ldr	r3, [pc, #160]	; (8002a74 <RFP_ParseFunction+0xf4>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	3b03      	subs	r3, #3
 80029da:	4927      	ldr	r1, [pc, #156]	; (8002a78 <RFP_ParseFunction+0xf8>)
 80029dc:	5ccb      	ldrb	r3, [r1, r3]
 80029de:	041b      	lsls	r3, r3, #16
 80029e0:	431a      	orrs	r2, r3
                       | ((uint32_t)RfpDataRecive[Rfp->DataSize - 2] << 8) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 1]));
 80029e2:	4b24      	ldr	r3, [pc, #144]	; (8002a74 <RFP_ParseFunction+0xf4>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	3b02      	subs	r3, #2
 80029ea:	4923      	ldr	r1, [pc, #140]	; (8002a78 <RFP_ParseFunction+0xf8>)
 80029ec:	5ccb      	ldrb	r3, [r1, r3]
 80029ee:	021b      	lsls	r3, r3, #8
 80029f0:	4313      	orrs	r3, r2
 80029f2:	4a20      	ldr	r2, [pc, #128]	; (8002a74 <RFP_ParseFunction+0xf4>)
 80029f4:	6812      	ldr	r2, [r2, #0]
 80029f6:	6892      	ldr	r2, [r2, #8]
 80029f8:	3a01      	subs	r2, #1
 80029fa:	491f      	ldr	r1, [pc, #124]	; (8002a78 <RFP_ParseFunction+0xf8>)
 80029fc:	5c8a      	ldrb	r2, [r1, r2]
         MessageCRC = (((uint32_t)RfpDataRecive[Rfp->DataSize - 4] << 24) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 3] << 16)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	607b      	str	r3, [r7, #4]
         if(MessageCRC == Crc(CRC_INITIAL_VALUE, Rfp->DataSize - 4, RfpDataRecive))
 8002a02:	4b1c      	ldr	r3, [pc, #112]	; (8002a74 <RFP_ParseFunction+0xf4>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	3b04      	subs	r3, #4
 8002a0a:	4a1b      	ldr	r2, [pc, #108]	; (8002a78 <RFP_ParseFunction+0xf8>)
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	f04f 30ff 	mov.w	r0, #4294967295
 8002a12:	f7fe fe65 	bl	80016e0 <Crc>
 8002a16:	4602      	mov	r2, r0
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d107      	bne.n	8002a2e <RFP_ParseFunction+0xae>
            Rfp->NewEvent = RFP_EVENT_DATA_OK;
 8002a1e:	4b15      	ldr	r3, [pc, #84]	; (8002a74 <RFP_ParseFunction+0xf4>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2204      	movs	r2, #4
 8002a24:	705a      	strb	r2, [r3, #1]
            RFP_SendResponseFunction(RFP_OK);
 8002a26:	2004      	movs	r0, #4
 8002a28:	f7ff ff2c 	bl	8002884 <RFP_SendResponseFunction>
}
 8002a2c:	e01d      	b.n	8002a6a <RFP_ParseFunction+0xea>
            if(RepareMessage(MessageCRC, RfpDataRecive, Rfp->DataSize) == CRC_OK)
 8002a2e:	4b11      	ldr	r3, [pc, #68]	; (8002a74 <RFP_ParseFunction+0xf4>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	461a      	mov	r2, r3
 8002a36:	4910      	ldr	r1, [pc, #64]	; (8002a78 <RFP_ParseFunction+0xf8>)
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f7fe fea9 	bl	8001790 <RepareMessage>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d107      	bne.n	8002a54 <RFP_ParseFunction+0xd4>
               Rfp->NewEvent = RFP_EVENT_DATA_OK;
 8002a44:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <RFP_ParseFunction+0xf4>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2204      	movs	r2, #4
 8002a4a:	705a      	strb	r2, [r3, #1]
               RFP_SendResponseFunction(RFP_OK);
 8002a4c:	2004      	movs	r0, #4
 8002a4e:	f7ff ff19 	bl	8002884 <RFP_SendResponseFunction>
}
 8002a52:	e00a      	b.n	8002a6a <RFP_ParseFunction+0xea>
               Rfp->NewEvent = RFP_EVENT_ERROR;
 8002a54:	4b07      	ldr	r3, [pc, #28]	; (8002a74 <RFP_ParseFunction+0xf4>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2203      	movs	r2, #3
 8002a5a:	705a      	strb	r2, [r3, #1]
               RFP_SendResponseFunction(RFP_CRC_ERROR);
 8002a5c:	2002      	movs	r0, #2
 8002a5e:	f7ff ff11 	bl	8002884 <RFP_SendResponseFunction>
               HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8002a62:	2164      	movs	r1, #100	; 0x64
 8002a64:	4804      	ldr	r0, [pc, #16]	; (8002a78 <RFP_ParseFunction+0xf8>)
 8002a66:	f7fe fe13 	bl	8001690 <HC12_ReciveToIdleDMA>
}
 8002a6a:	bf00      	nop
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	20003e5c 	.word	0x20003e5c
 8002a78:	20003d94 	.word	0x20003d94

08002a7c <RFP_RunningFunction>:
static void RFP_RunningFunction(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
   switch(RfpDataRecive[2])
 8002a80:	4b27      	ldr	r3, [pc, #156]	; (8002b20 <RFP_RunningFunction+0xa4>)
 8002a82:	789b      	ldrb	r3, [r3, #2]
 8002a84:	2b03      	cmp	r3, #3
 8002a86:	d028      	beq.n	8002ada <RFP_RunningFunction+0x5e>
 8002a88:	2b03      	cmp	r3, #3
 8002a8a:	dc3b      	bgt.n	8002b04 <RFP_RunningFunction+0x88>
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d002      	beq.n	8002a96 <RFP_RunningFunction+0x1a>
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d015      	beq.n	8002ac0 <RFP_RunningFunction+0x44>
         }
         break;
      }
      default:
      {
         break;
 8002a94:	e036      	b.n	8002b04 <RFP_RunningFunction+0x88>
         if(RfpCommandFunction[RfpDataRecive[3] - 1].RfpCommandFunction != NULL)
 8002a96:	4b22      	ldr	r3, [pc, #136]	; (8002b20 <RFP_RunningFunction+0xa4>)
 8002a98:	78db      	ldrb	r3, [r3, #3]
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	4a21      	ldr	r2, [pc, #132]	; (8002b24 <RFP_RunningFunction+0xa8>)
 8002a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d030      	beq.n	8002b08 <RFP_RunningFunction+0x8c>
            RfpCommandFunction[RfpDataRecive[3] - 1].RfpCommandFunction(RfpDataRecive, Rfp->DataSize, 4);
 8002aa6:	4b1e      	ldr	r3, [pc, #120]	; (8002b20 <RFP_RunningFunction+0xa4>)
 8002aa8:	78db      	ldrb	r3, [r3, #3]
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	4a1d      	ldr	r2, [pc, #116]	; (8002b24 <RFP_RunningFunction+0xa8>)
 8002aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab2:	4a1d      	ldr	r2, [pc, #116]	; (8002b28 <RFP_RunningFunction+0xac>)
 8002ab4:	6812      	ldr	r2, [r2, #0]
 8002ab6:	6891      	ldr	r1, [r2, #8]
 8002ab8:	2204      	movs	r2, #4
 8002aba:	4819      	ldr	r0, [pc, #100]	; (8002b20 <RFP_RunningFunction+0xa4>)
 8002abc:	4798      	blx	r3
         break;
 8002abe:	e023      	b.n	8002b08 <RFP_RunningFunction+0x8c>
         if(RfpDataFunctions.RfpDataFunction != NULL)
 8002ac0:	4b1a      	ldr	r3, [pc, #104]	; (8002b2c <RFP_RunningFunction+0xb0>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d021      	beq.n	8002b0c <RFP_RunningFunction+0x90>
            RfpDataFunctions.RfpDataFunction(RfpDataRecive, Rfp->DataSize, 4);
 8002ac8:	4b18      	ldr	r3, [pc, #96]	; (8002b2c <RFP_RunningFunction+0xb0>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a16      	ldr	r2, [pc, #88]	; (8002b28 <RFP_RunningFunction+0xac>)
 8002ace:	6812      	ldr	r2, [r2, #0]
 8002ad0:	6891      	ldr	r1, [r2, #8]
 8002ad2:	2204      	movs	r2, #4
 8002ad4:	4812      	ldr	r0, [pc, #72]	; (8002b20 <RFP_RunningFunction+0xa4>)
 8002ad6:	4798      	blx	r3
         break;
 8002ad8:	e018      	b.n	8002b0c <RFP_RunningFunction+0x90>
         if(RfpMessageFunction[RfpDataRecive[3] - 1].RfpMessageFunction != NULL)
 8002ada:	4b11      	ldr	r3, [pc, #68]	; (8002b20 <RFP_RunningFunction+0xa4>)
 8002adc:	78db      	ldrb	r3, [r3, #3]
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	4a13      	ldr	r2, [pc, #76]	; (8002b30 <RFP_RunningFunction+0xb4>)
 8002ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d012      	beq.n	8002b10 <RFP_RunningFunction+0x94>
            RfpMessageFunction[RfpDataRecive[3] - 1].RfpMessageFunction(RfpDataRecive, Rfp->DataSize, 4);
 8002aea:	4b0d      	ldr	r3, [pc, #52]	; (8002b20 <RFP_RunningFunction+0xa4>)
 8002aec:	78db      	ldrb	r3, [r3, #3]
 8002aee:	3b01      	subs	r3, #1
 8002af0:	4a0f      	ldr	r2, [pc, #60]	; (8002b30 <RFP_RunningFunction+0xb4>)
 8002af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af6:	4a0c      	ldr	r2, [pc, #48]	; (8002b28 <RFP_RunningFunction+0xac>)
 8002af8:	6812      	ldr	r2, [r2, #0]
 8002afa:	6891      	ldr	r1, [r2, #8]
 8002afc:	2204      	movs	r2, #4
 8002afe:	4808      	ldr	r0, [pc, #32]	; (8002b20 <RFP_RunningFunction+0xa4>)
 8002b00:	4798      	blx	r3
         break;
 8002b02:	e005      	b.n	8002b10 <RFP_RunningFunction+0x94>
         break;
 8002b04:	bf00      	nop
 8002b06:	e004      	b.n	8002b12 <RFP_RunningFunction+0x96>
         break;
 8002b08:	bf00      	nop
 8002b0a:	e002      	b.n	8002b12 <RFP_RunningFunction+0x96>
         break;
 8002b0c:	bf00      	nop
 8002b0e:	e000      	b.n	8002b12 <RFP_RunningFunction+0x96>
         break;
 8002b10:	bf00      	nop
      }
   }
   HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8002b12:	2164      	movs	r1, #100	; 0x64
 8002b14:	4802      	ldr	r0, [pc, #8]	; (8002b20 <RFP_RunningFunction+0xa4>)
 8002b16:	f7fe fdbb 	bl	8001690 <HC12_ReciveToIdleDMA>
}
 8002b1a:	bf00      	nop
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	20003d94 	.word	0x20003d94
 8002b24:	20003e60 	.word	0x20003e60
 8002b28:	20003e5c 	.word	0x20003e5c
 8002b2c:	20003e78 	.word	0x20003e78
 8002b30:	20003e7c 	.word	0x20003e7c

08002b34 <RFP_SendFunction>:
static void RFP_SendFunction(void)
{
 8002b34:	b598      	push	{r3, r4, r7, lr}
 8002b36:	af00      	add	r7, sp, #0
   if(Rfp->Cnt < 5)
 8002b38:	4b16      	ldr	r3, [pc, #88]	; (8002b94 <RFP_SendFunction+0x60>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d819      	bhi.n	8002b76 <RFP_SendFunction+0x42>
   {
      HAL_Delay(200);
 8002b42:	20c8      	movs	r0, #200	; 0xc8
 8002b44:	f001 f9b6 	bl	8003eb4 <HAL_Delay>
      HC12_TransmitData(RfpDataTransmit, Rfp->DataSizeTransmit);
 8002b48:	4b12      	ldr	r3, [pc, #72]	; (8002b94 <RFP_SendFunction+0x60>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4811      	ldr	r0, [pc, #68]	; (8002b98 <RFP_SendFunction+0x64>)
 8002b52:	f7fe fd89 	bl	8001668 <HC12_TransmitData>
      Rfp->Cnt++;
 8002b56:	4b0f      	ldr	r3, [pc, #60]	; (8002b94 <RFP_SendFunction+0x60>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	695a      	ldr	r2, [r3, #20]
 8002b5c:	3201      	adds	r2, #1
 8002b5e:	615a      	str	r2, [r3, #20]
      Rfp->NewEvent = RFP_EVENT_WAIT_FOR_RESPONSE;
 8002b60:	4b0c      	ldr	r3, [pc, #48]	; (8002b94 <RFP_SendFunction+0x60>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2205      	movs	r2, #5
 8002b66:	705a      	strb	r2, [r3, #1]
      Rfp->LastTick = HAL_GetTick();
 8002b68:	4b0a      	ldr	r3, [pc, #40]	; (8002b94 <RFP_SendFunction+0x60>)
 8002b6a:	681c      	ldr	r4, [r3, #0]
 8002b6c:	f001 f996 	bl	8003e9c <HAL_GetTick>
 8002b70:	4603      	mov	r3, r0
 8002b72:	61a3      	str	r3, [r4, #24]
   {
      Rfp->Cnt      = 0;
      Rfp->NewEvent = RFP_EVENT_ERROR;
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
   }
}
 8002b74:	e00b      	b.n	8002b8e <RFP_SendFunction+0x5a>
      Rfp->Cnt      = 0;
 8002b76:	4b07      	ldr	r3, [pc, #28]	; (8002b94 <RFP_SendFunction+0x60>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	615a      	str	r2, [r3, #20]
      Rfp->NewEvent = RFP_EVENT_ERROR;
 8002b7e:	4b05      	ldr	r3, [pc, #20]	; (8002b94 <RFP_SendFunction+0x60>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2203      	movs	r2, #3
 8002b84:	705a      	strb	r2, [r3, #1]
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8002b86:	2164      	movs	r1, #100	; 0x64
 8002b88:	4804      	ldr	r0, [pc, #16]	; (8002b9c <RFP_SendFunction+0x68>)
 8002b8a:	f7fe fd81 	bl	8001690 <HC12_ReciveToIdleDMA>
}
 8002b8e:	bf00      	nop
 8002b90:	bd98      	pop	{r3, r4, r7, pc}
 8002b92:	bf00      	nop
 8002b94:	20003e5c 	.word	0x20003e5c
 8002b98:	20003df8 	.word	0x20003df8
 8002b9c:	20003d94 	.word	0x20003d94

08002ba0 <RFP_WaitForResponseFunction>:
static void RFP_WaitForResponseFunction(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
   if(HAL_GetTick() - Rfp->LastTick > 2000)
 8002ba4:	f001 f97a 	bl	8003e9c <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	4b0e      	ldr	r3, [pc, #56]	; (8002be4 <RFP_WaitForResponseFunction+0x44>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002bb6:	d904      	bls.n	8002bc2 <RFP_WaitForResponseFunction+0x22>
   {
      Rfp->NewEvent = RFP_EVENT_ERROR;
 8002bb8:	4b0a      	ldr	r3, [pc, #40]	; (8002be4 <RFP_WaitForResponseFunction+0x44>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2203      	movs	r2, #3
 8002bbe:	705a      	strb	r2, [r3, #1]
   else if(Rfp->NewDataFlag == RFP_NEW_DATA_FLAG_SET)
   {
      Rfp->NewDataFlag = RFP_NEW_DATA_FLAG_RESET;
      Rfp->NewEvent    = RFP_EVENT_NEW_DATA;
   }
}
 8002bc0:	e00d      	b.n	8002bde <RFP_WaitForResponseFunction+0x3e>
   else if(Rfp->NewDataFlag == RFP_NEW_DATA_FLAG_SET)
 8002bc2:	4b08      	ldr	r3, [pc, #32]	; (8002be4 <RFP_WaitForResponseFunction+0x44>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	791b      	ldrb	r3, [r3, #4]
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d107      	bne.n	8002bde <RFP_WaitForResponseFunction+0x3e>
      Rfp->NewDataFlag = RFP_NEW_DATA_FLAG_RESET;
 8002bce:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <RFP_WaitForResponseFunction+0x44>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	711a      	strb	r2, [r3, #4]
      Rfp->NewEvent    = RFP_EVENT_NEW_DATA;
 8002bd6:	4b03      	ldr	r3, [pc, #12]	; (8002be4 <RFP_WaitForResponseFunction+0x44>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	705a      	strb	r2, [r3, #1]
}
 8002bde:	bf00      	nop
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	20003e5c 	.word	0x20003e5c

08002be8 <RFP_ParseResponseFunction>:
static void RFP_ParseResponseFunction(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
   uint32_t MessageCRC = (((uint32_t)RfpDataRecive[Rfp->DataSize - 4] << 24) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 3] << 16)
 8002bee:	4b50      	ldr	r3, [pc, #320]	; (8002d30 <RFP_ParseResponseFunction+0x148>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	3b04      	subs	r3, #4
 8002bf6:	4a4f      	ldr	r2, [pc, #316]	; (8002d34 <RFP_ParseResponseFunction+0x14c>)
 8002bf8:	5cd3      	ldrb	r3, [r2, r3]
 8002bfa:	061a      	lsls	r2, r3, #24
 8002bfc:	4b4c      	ldr	r3, [pc, #304]	; (8002d30 <RFP_ParseResponseFunction+0x148>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	3b03      	subs	r3, #3
 8002c04:	494b      	ldr	r1, [pc, #300]	; (8002d34 <RFP_ParseResponseFunction+0x14c>)
 8002c06:	5ccb      	ldrb	r3, [r1, r3]
 8002c08:	041b      	lsls	r3, r3, #16
 8002c0a:	431a      	orrs	r2, r3
                          | ((uint32_t)RfpDataRecive[Rfp->DataSize - 2] << 8) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 1]));
 8002c0c:	4b48      	ldr	r3, [pc, #288]	; (8002d30 <RFP_ParseResponseFunction+0x148>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	3b02      	subs	r3, #2
 8002c14:	4947      	ldr	r1, [pc, #284]	; (8002d34 <RFP_ParseResponseFunction+0x14c>)
 8002c16:	5ccb      	ldrb	r3, [r1, r3]
 8002c18:	021b      	lsls	r3, r3, #8
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	4a44      	ldr	r2, [pc, #272]	; (8002d30 <RFP_ParseResponseFunction+0x148>)
 8002c1e:	6812      	ldr	r2, [r2, #0]
 8002c20:	6892      	ldr	r2, [r2, #8]
 8002c22:	3a01      	subs	r2, #1
 8002c24:	4943      	ldr	r1, [pc, #268]	; (8002d34 <RFP_ParseResponseFunction+0x14c>)
 8002c26:	5c8a      	ldrb	r2, [r1, r2]
   uint32_t MessageCRC = (((uint32_t)RfpDataRecive[Rfp->DataSize - 4] << 24) | ((uint32_t)RfpDataRecive[Rfp->DataSize - 3] << 16)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	607b      	str	r3, [r7, #4]
   if(MessageCRC == Crc(CRC_INITIAL_VALUE, Rfp->DataSize - 4, RfpDataRecive))
 8002c2c:	4b40      	ldr	r3, [pc, #256]	; (8002d30 <RFP_ParseResponseFunction+0x148>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	3b04      	subs	r3, #4
 8002c34:	4a3f      	ldr	r2, [pc, #252]	; (8002d34 <RFP_ParseResponseFunction+0x14c>)
 8002c36:	4619      	mov	r1, r3
 8002c38:	f04f 30ff 	mov.w	r0, #4294967295
 8002c3c:	f7fe fd50 	bl	80016e0 <Crc>
 8002c40:	4602      	mov	r2, r0
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d12d      	bne.n	8002ca4 <RFP_ParseResponseFunction+0xbc>
   {
      if(RfpDataRecive[0] == Rfp->DeviceType && RfpDataRecive[2] == RFP_MESSAGE)
 8002c48:	4b3a      	ldr	r3, [pc, #232]	; (8002d34 <RFP_ParseResponseFunction+0x14c>)
 8002c4a:	781a      	ldrb	r2, [r3, #0]
 8002c4c:	4b38      	ldr	r3, [pc, #224]	; (8002d30 <RFP_ParseResponseFunction+0x148>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	795b      	ldrb	r3, [r3, #5]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d11d      	bne.n	8002c92 <RFP_ParseResponseFunction+0xaa>
 8002c56:	4b37      	ldr	r3, [pc, #220]	; (8002d34 <RFP_ParseResponseFunction+0x14c>)
 8002c58:	789b      	ldrb	r3, [r3, #2]
 8002c5a:	2b03      	cmp	r3, #3
 8002c5c:	d119      	bne.n	8002c92 <RFP_ParseResponseFunction+0xaa>
      {
         if(RfpDataRecive[3] == RFP_OK)
 8002c5e:	4b35      	ldr	r3, [pc, #212]	; (8002d34 <RFP_ParseResponseFunction+0x14c>)
 8002c60:	78db      	ldrb	r3, [r3, #3]
 8002c62:	2b04      	cmp	r3, #4
 8002c64:	d10c      	bne.n	8002c80 <RFP_ParseResponseFunction+0x98>
         {
            Rfp->NewEvent = RFP_EVENT_DATA_OK;
 8002c66:	4b32      	ldr	r3, [pc, #200]	; (8002d30 <RFP_ParseResponseFunction+0x148>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2204      	movs	r2, #4
 8002c6c:	705a      	strb	r2, [r3, #1]
            Rfp->Cnt      = 0;
 8002c6e:	4b30      	ldr	r3, [pc, #192]	; (8002d30 <RFP_ParseResponseFunction+0x148>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2200      	movs	r2, #0
 8002c74:	615a      	str	r2, [r3, #20]
            HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8002c76:	2164      	movs	r1, #100	; 0x64
 8002c78:	482e      	ldr	r0, [pc, #184]	; (8002d34 <RFP_ParseResponseFunction+0x14c>)
 8002c7a:	f7fe fd09 	bl	8001690 <HC12_ReciveToIdleDMA>
         if(RfpDataRecive[3] == RFP_OK)
 8002c7e:	e053      	b.n	8002d28 <RFP_ParseResponseFunction+0x140>
         }
         else
         {
            Rfp->NewEvent = RFP_EVENT_ERROR;
 8002c80:	4b2b      	ldr	r3, [pc, #172]	; (8002d30 <RFP_ParseResponseFunction+0x148>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2203      	movs	r2, #3
 8002c86:	705a      	strb	r2, [r3, #1]
            HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8002c88:	2164      	movs	r1, #100	; 0x64
 8002c8a:	482a      	ldr	r0, [pc, #168]	; (8002d34 <RFP_ParseResponseFunction+0x14c>)
 8002c8c:	f7fe fd00 	bl	8001690 <HC12_ReciveToIdleDMA>
         if(RfpDataRecive[3] == RFP_OK)
 8002c90:	e04a      	b.n	8002d28 <RFP_ParseResponseFunction+0x140>
         }
      }
      else
      {
         Rfp->NewEvent = RFP_EVENT_ERROR;
 8002c92:	4b27      	ldr	r3, [pc, #156]	; (8002d30 <RFP_ParseResponseFunction+0x148>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2203      	movs	r2, #3
 8002c98:	705a      	strb	r2, [r3, #1]
         HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8002c9a:	2164      	movs	r1, #100	; 0x64
 8002c9c:	4825      	ldr	r0, [pc, #148]	; (8002d34 <RFP_ParseResponseFunction+0x14c>)
 8002c9e:	f7fe fcf7 	bl	8001690 <HC12_ReciveToIdleDMA>
   else
   {
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
      Rfp->NewEvent = RFP_EVENT_ERROR;
   }
}
 8002ca2:	e041      	b.n	8002d28 <RFP_ParseResponseFunction+0x140>
   else if(RepareMessage(MessageCRC, RfpDataRecive, Rfp->DataSize) == CRC_OK)
 8002ca4:	4b22      	ldr	r3, [pc, #136]	; (8002d30 <RFP_ParseResponseFunction+0x148>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	461a      	mov	r2, r3
 8002cac:	4921      	ldr	r1, [pc, #132]	; (8002d34 <RFP_ParseResponseFunction+0x14c>)
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f7fe fd6e 	bl	8001790 <RepareMessage>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d12d      	bne.n	8002d16 <RFP_ParseResponseFunction+0x12e>
      if(RfpDataRecive[0] == Rfp->DeviceType && RfpDataRecive[2] == RFP_MESSAGE)
 8002cba:	4b1e      	ldr	r3, [pc, #120]	; (8002d34 <RFP_ParseResponseFunction+0x14c>)
 8002cbc:	781a      	ldrb	r2, [r3, #0]
 8002cbe:	4b1c      	ldr	r3, [pc, #112]	; (8002d30 <RFP_ParseResponseFunction+0x148>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	795b      	ldrb	r3, [r3, #5]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d11d      	bne.n	8002d04 <RFP_ParseResponseFunction+0x11c>
 8002cc8:	4b1a      	ldr	r3, [pc, #104]	; (8002d34 <RFP_ParseResponseFunction+0x14c>)
 8002cca:	789b      	ldrb	r3, [r3, #2]
 8002ccc:	2b03      	cmp	r3, #3
 8002cce:	d119      	bne.n	8002d04 <RFP_ParseResponseFunction+0x11c>
         if(RfpDataRecive[3] == RFP_OK)
 8002cd0:	4b18      	ldr	r3, [pc, #96]	; (8002d34 <RFP_ParseResponseFunction+0x14c>)
 8002cd2:	78db      	ldrb	r3, [r3, #3]
 8002cd4:	2b04      	cmp	r3, #4
 8002cd6:	d10c      	bne.n	8002cf2 <RFP_ParseResponseFunction+0x10a>
            Rfp->NewEvent = RFP_EVENT_DATA_OK;
 8002cd8:	4b15      	ldr	r3, [pc, #84]	; (8002d30 <RFP_ParseResponseFunction+0x148>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2204      	movs	r2, #4
 8002cde:	705a      	strb	r2, [r3, #1]
            Rfp->Cnt      = 0;
 8002ce0:	4b13      	ldr	r3, [pc, #76]	; (8002d30 <RFP_ParseResponseFunction+0x148>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	615a      	str	r2, [r3, #20]
            HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8002ce8:	2164      	movs	r1, #100	; 0x64
 8002cea:	4812      	ldr	r0, [pc, #72]	; (8002d34 <RFP_ParseResponseFunction+0x14c>)
 8002cec:	f7fe fcd0 	bl	8001690 <HC12_ReciveToIdleDMA>
         if(RfpDataRecive[3] == RFP_OK)
 8002cf0:	e01a      	b.n	8002d28 <RFP_ParseResponseFunction+0x140>
            Rfp->NewEvent = RFP_EVENT_ERROR;
 8002cf2:	4b0f      	ldr	r3, [pc, #60]	; (8002d30 <RFP_ParseResponseFunction+0x148>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2203      	movs	r2, #3
 8002cf8:	705a      	strb	r2, [r3, #1]
            HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8002cfa:	2164      	movs	r1, #100	; 0x64
 8002cfc:	480d      	ldr	r0, [pc, #52]	; (8002d34 <RFP_ParseResponseFunction+0x14c>)
 8002cfe:	f7fe fcc7 	bl	8001690 <HC12_ReciveToIdleDMA>
         if(RfpDataRecive[3] == RFP_OK)
 8002d02:	e011      	b.n	8002d28 <RFP_ParseResponseFunction+0x140>
         Rfp->NewEvent = RFP_EVENT_ERROR;
 8002d04:	4b0a      	ldr	r3, [pc, #40]	; (8002d30 <RFP_ParseResponseFunction+0x148>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2203      	movs	r2, #3
 8002d0a:	705a      	strb	r2, [r3, #1]
         HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8002d0c:	2164      	movs	r1, #100	; 0x64
 8002d0e:	4809      	ldr	r0, [pc, #36]	; (8002d34 <RFP_ParseResponseFunction+0x14c>)
 8002d10:	f7fe fcbe 	bl	8001690 <HC12_ReciveToIdleDMA>
}
 8002d14:	e008      	b.n	8002d28 <RFP_ParseResponseFunction+0x140>
      HC12_ReciveToIdleDMA(RfpDataRecive, sizeof(RfpDataRecive));
 8002d16:	2164      	movs	r1, #100	; 0x64
 8002d18:	4806      	ldr	r0, [pc, #24]	; (8002d34 <RFP_ParseResponseFunction+0x14c>)
 8002d1a:	f7fe fcb9 	bl	8001690 <HC12_ReciveToIdleDMA>
      Rfp->NewEvent = RFP_EVENT_ERROR;
 8002d1e:	4b04      	ldr	r3, [pc, #16]	; (8002d30 <RFP_ParseResponseFunction+0x148>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2203      	movs	r2, #3
 8002d24:	705a      	strb	r2, [r3, #1]
}
 8002d26:	e7ff      	b.n	8002d28 <RFP_ParseResponseFunction+0x140>
 8002d28:	bf00      	nop
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	20003e5c 	.word	0x20003e5c
 8002d34:	20003d94 	.word	0x20003d94

08002d38 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002d3c:	4b07      	ldr	r3, [pc, #28]	; (8002d5c <MX_RNG_Init+0x24>)
 8002d3e:	4a08      	ldr	r2, [pc, #32]	; (8002d60 <MX_RNG_Init+0x28>)
 8002d40:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8002d42:	4b06      	ldr	r3, [pc, #24]	; (8002d5c <MX_RNG_Init+0x24>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002d48:	4804      	ldr	r0, [pc, #16]	; (8002d5c <MX_RNG_Init+0x24>)
 8002d4a:	f003 fc55 	bl	80065f8 <HAL_RNG_Init>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8002d54:	f7ff fc66 	bl	8002624 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002d58:	bf00      	nop
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	20003e90 	.word	0x20003e90
 8002d60:	50060800 	.word	0x50060800

08002d64 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b0aa      	sub	sp, #168	; 0xa8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d6c:	f107 0310 	add.w	r3, r7, #16
 8002d70:	2298      	movs	r2, #152	; 0x98
 8002d72:	2100      	movs	r1, #0
 8002d74:	4618      	mov	r0, r3
 8002d76:	f007 fd5b 	bl	800a830 <memset>
  if(rngHandle->Instance==RNG)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a19      	ldr	r2, [pc, #100]	; (8002de4 <HAL_RNG_MspInit+0x80>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d12b      	bne.n	8002ddc <HAL_RNG_MspInit+0x78>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002d84:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d88:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8002d8a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002d8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002d92:	2301      	movs	r3, #1
 8002d94:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002d96:	2301      	movs	r3, #1
 8002d98:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8002d9a:	2310      	movs	r3, #16
 8002d9c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8002d9e:	2302      	movs	r3, #2
 8002da0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002da2:	2302      	movs	r3, #2
 8002da4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002da6:	2302      	movs	r3, #2
 8002da8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8002daa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002dae:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002db0:	f107 0310 	add.w	r3, r7, #16
 8002db4:	4618      	mov	r0, r3
 8002db6:	f002 fecb 	bl	8005b50 <HAL_RCCEx_PeriphCLKConfig>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <HAL_RNG_MspInit+0x60>
    {
      Error_Handler();
 8002dc0:	f7ff fc30 	bl	8002624 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002dc4:	4b08      	ldr	r3, [pc, #32]	; (8002de8 <HAL_RNG_MspInit+0x84>)
 8002dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dc8:	4a07      	ldr	r2, [pc, #28]	; (8002de8 <HAL_RNG_MspInit+0x84>)
 8002dca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dd0:	4b05      	ldr	r3, [pc, #20]	; (8002de8 <HAL_RNG_MspInit+0x84>)
 8002dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dd8:	60fb      	str	r3, [r7, #12]
 8002dda:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8002ddc:	bf00      	nop
 8002dde:	37a8      	adds	r7, #168	; 0xa8
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	50060800 	.word	0x50060800
 8002de8:	40021000 	.word	0x40021000

08002dec <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002df2:	1d3b      	adds	r3, r7, #4
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	605a      	str	r2, [r3, #4]
 8002dfa:	609a      	str	r2, [r3, #8]
 8002dfc:	60da      	str	r2, [r3, #12]
 8002dfe:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002e00:	2300      	movs	r3, #0
 8002e02:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002e04:	4b13      	ldr	r3, [pc, #76]	; (8002e54 <MX_RTC_Init+0x68>)
 8002e06:	4a14      	ldr	r2, [pc, #80]	; (8002e58 <MX_RTC_Init+0x6c>)
 8002e08:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002e0a:	4b12      	ldr	r3, [pc, #72]	; (8002e54 <MX_RTC_Init+0x68>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8002e10:	4b10      	ldr	r3, [pc, #64]	; (8002e54 <MX_RTC_Init+0x68>)
 8002e12:	227f      	movs	r2, #127	; 0x7f
 8002e14:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8002e16:	4b0f      	ldr	r3, [pc, #60]	; (8002e54 <MX_RTC_Init+0x68>)
 8002e18:	22ff      	movs	r2, #255	; 0xff
 8002e1a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002e1c:	4b0d      	ldr	r3, [pc, #52]	; (8002e54 <MX_RTC_Init+0x68>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002e22:	4b0c      	ldr	r3, [pc, #48]	; (8002e54 <MX_RTC_Init+0x68>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002e28:	4b0a      	ldr	r3, [pc, #40]	; (8002e54 <MX_RTC_Init+0x68>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002e2e:	4b09      	ldr	r3, [pc, #36]	; (8002e54 <MX_RTC_Init+0x68>)
 8002e30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e34:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8002e36:	4b07      	ldr	r3, [pc, #28]	; (8002e54 <MX_RTC_Init+0x68>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002e3c:	4805      	ldr	r0, [pc, #20]	; (8002e54 <MX_RTC_Init+0x68>)
 8002e3e:	f003 fc85 	bl	800674c <HAL_RTC_Init>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8002e48:	f7ff fbec 	bl	8002624 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002e4c:	3718      	adds	r7, #24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	20003ea4 	.word	0x20003ea4
 8002e58:	40002800 	.word	0x40002800

08002e5c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b0aa      	sub	sp, #168	; 0xa8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e64:	f107 0310 	add.w	r3, r7, #16
 8002e68:	2298      	movs	r2, #152	; 0x98
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f007 fcdf 	bl	800a830 <memset>
  if(rtcHandle->Instance==RTC)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a16      	ldr	r2, [pc, #88]	; (8002ed0 <HAL_RTC_MspInit+0x74>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d124      	bne.n	8002ec6 <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002e7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e80:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002e82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e8a:	f107 0310 	add.w	r3, r7, #16
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f002 fe5e 	bl	8005b50 <HAL_RCCEx_PeriphCLKConfig>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002e9a:	f7ff fbc3 	bl	8002624 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002e9e:	4b0d      	ldr	r3, [pc, #52]	; (8002ed4 <HAL_RTC_MspInit+0x78>)
 8002ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea4:	4a0b      	ldr	r2, [pc, #44]	; (8002ed4 <HAL_RTC_MspInit+0x78>)
 8002ea6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002eae:	4b09      	ldr	r3, [pc, #36]	; (8002ed4 <HAL_RTC_MspInit+0x78>)
 8002eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb2:	4a08      	ldr	r2, [pc, #32]	; (8002ed4 <HAL_RTC_MspInit+0x78>)
 8002eb4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002eb8:	6593      	str	r3, [r2, #88]	; 0x58
 8002eba:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <HAL_RTC_MspInit+0x78>)
 8002ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ebe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec2:	60fb      	str	r3, [r7, #12]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002ec6:	bf00      	nop
 8002ec8:	37a8      	adds	r7, #168	; 0xa8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	40002800 	.word	0x40002800
 8002ed4:	40021000 	.word	0x40021000

08002ed8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002edc:	4b1b      	ldr	r3, [pc, #108]	; (8002f4c <MX_SPI1_Init+0x74>)
 8002ede:	4a1c      	ldr	r2, [pc, #112]	; (8002f50 <MX_SPI1_Init+0x78>)
 8002ee0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002ee2:	4b1a      	ldr	r3, [pc, #104]	; (8002f4c <MX_SPI1_Init+0x74>)
 8002ee4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ee8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002eea:	4b18      	ldr	r3, [pc, #96]	; (8002f4c <MX_SPI1_Init+0x74>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ef0:	4b16      	ldr	r3, [pc, #88]	; (8002f4c <MX_SPI1_Init+0x74>)
 8002ef2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002ef6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ef8:	4b14      	ldr	r3, [pc, #80]	; (8002f4c <MX_SPI1_Init+0x74>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002efe:	4b13      	ldr	r3, [pc, #76]	; (8002f4c <MX_SPI1_Init+0x74>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002f04:	4b11      	ldr	r3, [pc, #68]	; (8002f4c <MX_SPI1_Init+0x74>)
 8002f06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f0a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002f0c:	4b0f      	ldr	r3, [pc, #60]	; (8002f4c <MX_SPI1_Init+0x74>)
 8002f0e:	2228      	movs	r2, #40	; 0x28
 8002f10:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f12:	4b0e      	ldr	r3, [pc, #56]	; (8002f4c <MX_SPI1_Init+0x74>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f18:	4b0c      	ldr	r3, [pc, #48]	; (8002f4c <MX_SPI1_Init+0x74>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f1e:	4b0b      	ldr	r3, [pc, #44]	; (8002f4c <MX_SPI1_Init+0x74>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002f24:	4b09      	ldr	r3, [pc, #36]	; (8002f4c <MX_SPI1_Init+0x74>)
 8002f26:	2207      	movs	r2, #7
 8002f28:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002f2a:	4b08      	ldr	r3, [pc, #32]	; (8002f4c <MX_SPI1_Init+0x74>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002f30:	4b06      	ldr	r3, [pc, #24]	; (8002f4c <MX_SPI1_Init+0x74>)
 8002f32:	2208      	movs	r2, #8
 8002f34:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002f36:	4805      	ldr	r0, [pc, #20]	; (8002f4c <MX_SPI1_Init+0x74>)
 8002f38:	f003 fdfc 	bl	8006b34 <HAL_SPI_Init>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002f42:	f7ff fb6f 	bl	8002624 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002f46:	bf00      	nop
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	20003ed8 	.word	0x20003ed8
 8002f50:	40013000 	.word	0x40013000

08002f54 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8002f58:	4b1b      	ldr	r3, [pc, #108]	; (8002fc8 <MX_SPI3_Init+0x74>)
 8002f5a:	4a1c      	ldr	r2, [pc, #112]	; (8002fcc <MX_SPI3_Init+0x78>)
 8002f5c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002f5e:	4b1a      	ldr	r3, [pc, #104]	; (8002fc8 <MX_SPI3_Init+0x74>)
 8002f60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f64:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002f66:	4b18      	ldr	r3, [pc, #96]	; (8002fc8 <MX_SPI3_Init+0x74>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f6c:	4b16      	ldr	r3, [pc, #88]	; (8002fc8 <MX_SPI3_Init+0x74>)
 8002f6e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002f72:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f74:	4b14      	ldr	r3, [pc, #80]	; (8002fc8 <MX_SPI3_Init+0x74>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f7a:	4b13      	ldr	r3, [pc, #76]	; (8002fc8 <MX_SPI3_Init+0x74>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002f80:	4b11      	ldr	r3, [pc, #68]	; (8002fc8 <MX_SPI3_Init+0x74>)
 8002f82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f86:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002f88:	4b0f      	ldr	r3, [pc, #60]	; (8002fc8 <MX_SPI3_Init+0x74>)
 8002f8a:	2238      	movs	r2, #56	; 0x38
 8002f8c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f8e:	4b0e      	ldr	r3, [pc, #56]	; (8002fc8 <MX_SPI3_Init+0x74>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f94:	4b0c      	ldr	r3, [pc, #48]	; (8002fc8 <MX_SPI3_Init+0x74>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f9a:	4b0b      	ldr	r3, [pc, #44]	; (8002fc8 <MX_SPI3_Init+0x74>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002fa0:	4b09      	ldr	r3, [pc, #36]	; (8002fc8 <MX_SPI3_Init+0x74>)
 8002fa2:	2207      	movs	r2, #7
 8002fa4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002fa6:	4b08      	ldr	r3, [pc, #32]	; (8002fc8 <MX_SPI3_Init+0x74>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002fac:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <MX_SPI3_Init+0x74>)
 8002fae:	2208      	movs	r2, #8
 8002fb0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002fb2:	4805      	ldr	r0, [pc, #20]	; (8002fc8 <MX_SPI3_Init+0x74>)
 8002fb4:	f003 fdbe 	bl	8006b34 <HAL_SPI_Init>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002fbe:	f7ff fb31 	bl	8002624 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002fc2:	bf00      	nop
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	20003f3c 	.word	0x20003f3c
 8002fcc:	40003c00 	.word	0x40003c00

08002fd0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b08c      	sub	sp, #48	; 0x30
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd8:	f107 031c 	add.w	r3, r7, #28
 8002fdc:	2200      	movs	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	605a      	str	r2, [r3, #4]
 8002fe2:	609a      	str	r2, [r3, #8]
 8002fe4:	60da      	str	r2, [r3, #12]
 8002fe6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a2e      	ldr	r2, [pc, #184]	; (80030a8 <HAL_SPI_MspInit+0xd8>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d129      	bne.n	8003046 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ff2:	4b2e      	ldr	r3, [pc, #184]	; (80030ac <HAL_SPI_MspInit+0xdc>)
 8002ff4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ff6:	4a2d      	ldr	r2, [pc, #180]	; (80030ac <HAL_SPI_MspInit+0xdc>)
 8002ff8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ffc:	6613      	str	r3, [r2, #96]	; 0x60
 8002ffe:	4b2b      	ldr	r3, [pc, #172]	; (80030ac <HAL_SPI_MspInit+0xdc>)
 8003000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003002:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003006:	61bb      	str	r3, [r7, #24]
 8003008:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800300a:	4b28      	ldr	r3, [pc, #160]	; (80030ac <HAL_SPI_MspInit+0xdc>)
 800300c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800300e:	4a27      	ldr	r2, [pc, #156]	; (80030ac <HAL_SPI_MspInit+0xdc>)
 8003010:	f043 0301 	orr.w	r3, r3, #1
 8003014:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003016:	4b25      	ldr	r3, [pc, #148]	; (80030ac <HAL_SPI_MspInit+0xdc>)
 8003018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	617b      	str	r3, [r7, #20]
 8003020:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003022:	23e0      	movs	r3, #224	; 0xe0
 8003024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003026:	2302      	movs	r3, #2
 8003028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302a:	2300      	movs	r3, #0
 800302c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800302e:	2303      	movs	r3, #3
 8003030:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003032:	2305      	movs	r3, #5
 8003034:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003036:	f107 031c 	add.w	r3, r7, #28
 800303a:	4619      	mov	r1, r3
 800303c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003040:	f001 fb9c 	bl	800477c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8003044:	e02c      	b.n	80030a0 <HAL_SPI_MspInit+0xd0>
  else if(spiHandle->Instance==SPI3)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a19      	ldr	r2, [pc, #100]	; (80030b0 <HAL_SPI_MspInit+0xe0>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d127      	bne.n	80030a0 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003050:	4b16      	ldr	r3, [pc, #88]	; (80030ac <HAL_SPI_MspInit+0xdc>)
 8003052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003054:	4a15      	ldr	r2, [pc, #84]	; (80030ac <HAL_SPI_MspInit+0xdc>)
 8003056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800305a:	6593      	str	r3, [r2, #88]	; 0x58
 800305c:	4b13      	ldr	r3, [pc, #76]	; (80030ac <HAL_SPI_MspInit+0xdc>)
 800305e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003060:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003064:	613b      	str	r3, [r7, #16]
 8003066:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003068:	4b10      	ldr	r3, [pc, #64]	; (80030ac <HAL_SPI_MspInit+0xdc>)
 800306a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800306c:	4a0f      	ldr	r2, [pc, #60]	; (80030ac <HAL_SPI_MspInit+0xdc>)
 800306e:	f043 0302 	orr.w	r3, r3, #2
 8003072:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003074:	4b0d      	ldr	r3, [pc, #52]	; (80030ac <HAL_SPI_MspInit+0xdc>)
 8003076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	60fb      	str	r3, [r7, #12]
 800307e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003080:	2338      	movs	r3, #56	; 0x38
 8003082:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003084:	2302      	movs	r3, #2
 8003086:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003088:	2300      	movs	r3, #0
 800308a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800308c:	2303      	movs	r3, #3
 800308e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003090:	2306      	movs	r3, #6
 8003092:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003094:	f107 031c 	add.w	r3, r7, #28
 8003098:	4619      	mov	r1, r3
 800309a:	4806      	ldr	r0, [pc, #24]	; (80030b4 <HAL_SPI_MspInit+0xe4>)
 800309c:	f001 fb6e 	bl	800477c <HAL_GPIO_Init>
}
 80030a0:	bf00      	nop
 80030a2:	3730      	adds	r7, #48	; 0x30
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	40013000 	.word	0x40013000
 80030ac:	40021000 	.word	0x40021000
 80030b0:	40003c00 	.word	0x40003c00
 80030b4:	48000400 	.word	0x48000400

080030b8 <ssd1306_command>:
#include "main.h"
#include "string.h"
SPI_HandleTypeDef *ssd1306_spi;
static uint8_t buffer[(SSD1306_LCDWIDTH * SSD1306_LCDHEIGHT) / 8];
static void ssd1306_command(uint8_t command)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	4603      	mov	r3, r0
 80030c0:	71fb      	strb	r3, [r7, #7]
   HAL_GPIO_WritePin(ssd1306_dc_GPIO_Port, ssd1306_dc_Pin, GPIO_PIN_RESET);
 80030c2:	2200      	movs	r2, #0
 80030c4:	2101      	movs	r1, #1
 80030c6:	480d      	ldr	r0, [pc, #52]	; (80030fc <ssd1306_command+0x44>)
 80030c8:	f001 fd02 	bl	8004ad0 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_RESET);
 80030cc:	2200      	movs	r2, #0
 80030ce:	2110      	movs	r1, #16
 80030d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030d4:	f001 fcfc 	bl	8004ad0 <HAL_GPIO_WritePin>
   HAL_SPI_Transmit(ssd1306_spi, &command, 1, 10);
 80030d8:	4b09      	ldr	r3, [pc, #36]	; (8003100 <ssd1306_command+0x48>)
 80030da:	6818      	ldr	r0, [r3, #0]
 80030dc:	1df9      	adds	r1, r7, #7
 80030de:	230a      	movs	r3, #10
 80030e0:	2201      	movs	r2, #1
 80030e2:	f003 fdca 	bl	8006c7a <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_SET);
 80030e6:	2201      	movs	r2, #1
 80030e8:	2110      	movs	r1, #16
 80030ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030ee:	f001 fcef 	bl	8004ad0 <HAL_GPIO_WritePin>
}
 80030f2:	bf00      	nop
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	48000400 	.word	0x48000400
 8003100:	20003fa0 	.word	0x20003fa0

08003104 <ssd1306_set_pixel>:
   HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_RESET);
   HAL_SPI_Transmit(ssd1306_spi, &data, 1, 10);
   HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_SET);
}
void ssd1306_set_pixel(uint8_t x, uint8_t y, uint8_t color)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	4603      	mov	r3, r0
 800310c:	71fb      	strb	r3, [r7, #7]
 800310e:	460b      	mov	r3, r1
 8003110:	71bb      	strb	r3, [r7, #6]
 8003112:	4613      	mov	r3, r2
 8003114:	717b      	strb	r3, [r7, #5]
   if((x < 0) || (x >= SSD1306_LCDWIDTH) || (y < 0) || (y >= SSD1306_LCDHEIGHT))
 8003116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311a:	2b00      	cmp	r3, #0
 800311c:	db43      	blt.n	80031a6 <ssd1306_set_pixel+0xa2>
 800311e:	79bb      	ldrb	r3, [r7, #6]
 8003120:	2b3f      	cmp	r3, #63	; 0x3f
 8003122:	d840      	bhi.n	80031a6 <ssd1306_set_pixel+0xa2>
   {
      return;
   }
   if(color != 0 && color != 1)
 8003124:	797b      	ldrb	r3, [r7, #5]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d002      	beq.n	8003130 <ssd1306_set_pixel+0x2c>
 800312a:	797b      	ldrb	r3, [r7, #5]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d13c      	bne.n	80031aa <ssd1306_set_pixel+0xa6>
   {
      return;
   }
   if(color == 0)
 8003130:	797b      	ldrb	r3, [r7, #5]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d11c      	bne.n	8003170 <ssd1306_set_pixel+0x6c>
   {
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y & 7));
 8003136:	79fa      	ldrb	r2, [r7, #7]
 8003138:	79bb      	ldrb	r3, [r7, #6]
 800313a:	08db      	lsrs	r3, r3, #3
 800313c:	b2d8      	uxtb	r0, r3
 800313e:	4603      	mov	r3, r0
 8003140:	01db      	lsls	r3, r3, #7
 8003142:	4413      	add	r3, r2
 8003144:	4a1c      	ldr	r2, [pc, #112]	; (80031b8 <ssd1306_set_pixel+0xb4>)
 8003146:	5cd3      	ldrb	r3, [r2, r3]
 8003148:	b25a      	sxtb	r2, r3
 800314a:	79bb      	ldrb	r3, [r7, #6]
 800314c:	f003 0307 	and.w	r3, r3, #7
 8003150:	2101      	movs	r1, #1
 8003152:	fa01 f303 	lsl.w	r3, r1, r3
 8003156:	b25b      	sxtb	r3, r3
 8003158:	43db      	mvns	r3, r3
 800315a:	b25b      	sxtb	r3, r3
 800315c:	4013      	ands	r3, r2
 800315e:	b259      	sxtb	r1, r3
 8003160:	79fa      	ldrb	r2, [r7, #7]
 8003162:	4603      	mov	r3, r0
 8003164:	01db      	lsls	r3, r3, #7
 8003166:	4413      	add	r3, r2
 8003168:	b2c9      	uxtb	r1, r1
 800316a:	4a13      	ldr	r2, [pc, #76]	; (80031b8 <ssd1306_set_pixel+0xb4>)
 800316c:	54d1      	strb	r1, [r2, r3]
 800316e:	e01d      	b.n	80031ac <ssd1306_set_pixel+0xa8>
   }
   else
   {
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= (1 << (y & 7));
 8003170:	79fa      	ldrb	r2, [r7, #7]
 8003172:	79bb      	ldrb	r3, [r7, #6]
 8003174:	08db      	lsrs	r3, r3, #3
 8003176:	b2d8      	uxtb	r0, r3
 8003178:	4603      	mov	r3, r0
 800317a:	01db      	lsls	r3, r3, #7
 800317c:	4413      	add	r3, r2
 800317e:	4a0e      	ldr	r2, [pc, #56]	; (80031b8 <ssd1306_set_pixel+0xb4>)
 8003180:	5cd3      	ldrb	r3, [r2, r3]
 8003182:	b25a      	sxtb	r2, r3
 8003184:	79bb      	ldrb	r3, [r7, #6]
 8003186:	f003 0307 	and.w	r3, r3, #7
 800318a:	2101      	movs	r1, #1
 800318c:	fa01 f303 	lsl.w	r3, r1, r3
 8003190:	b25b      	sxtb	r3, r3
 8003192:	4313      	orrs	r3, r2
 8003194:	b259      	sxtb	r1, r3
 8003196:	79fa      	ldrb	r2, [r7, #7]
 8003198:	4603      	mov	r3, r0
 800319a:	01db      	lsls	r3, r3, #7
 800319c:	4413      	add	r3, r2
 800319e:	b2c9      	uxtb	r1, r1
 80031a0:	4a05      	ldr	r2, [pc, #20]	; (80031b8 <ssd1306_set_pixel+0xb4>)
 80031a2:	54d1      	strb	r1, [r2, r3]
 80031a4:	e002      	b.n	80031ac <ssd1306_set_pixel+0xa8>
      return;
 80031a6:	bf00      	nop
 80031a8:	e000      	b.n	80031ac <ssd1306_set_pixel+0xa8>
      return;
 80031aa:	bf00      	nop
   }
}
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	20003fa4 	.word	0x20003fa4

080031bc <ssd1306_display>:
void ssd1306_display()
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
   ssd1306_command(0x22);
 80031c0:	2022      	movs	r0, #34	; 0x22
 80031c2:	f7ff ff79 	bl	80030b8 <ssd1306_command>
   ssd1306_command(0x00);
 80031c6:	2000      	movs	r0, #0
 80031c8:	f7ff ff76 	bl	80030b8 <ssd1306_command>
   ssd1306_command(0x07);
 80031cc:	2007      	movs	r0, #7
 80031ce:	f7ff ff73 	bl	80030b8 <ssd1306_command>
   HAL_GPIO_WritePin(ssd1306_dc_GPIO_Port, ssd1306_dc_Pin, GPIO_PIN_SET);
 80031d2:	2201      	movs	r2, #1
 80031d4:	2101      	movs	r1, #1
 80031d6:	480c      	ldr	r0, [pc, #48]	; (8003208 <ssd1306_display+0x4c>)
 80031d8:	f001 fc7a 	bl	8004ad0 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_RESET);
 80031dc:	2200      	movs	r2, #0
 80031de:	2110      	movs	r1, #16
 80031e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031e4:	f001 fc74 	bl	8004ad0 <HAL_GPIO_WritePin>
   HAL_SPI_Transmit(ssd1306_spi, (uint8_t *)&buffer, (SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8), 100);
 80031e8:	4b08      	ldr	r3, [pc, #32]	; (800320c <ssd1306_display+0x50>)
 80031ea:	6818      	ldr	r0, [r3, #0]
 80031ec:	2364      	movs	r3, #100	; 0x64
 80031ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031f2:	4907      	ldr	r1, [pc, #28]	; (8003210 <ssd1306_display+0x54>)
 80031f4:	f003 fd41 	bl	8006c7a <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(ssd1306_cs_GPIO_Port, ssd1306_cs_Pin, GPIO_PIN_SET);
 80031f8:	2201      	movs	r2, #1
 80031fa:	2110      	movs	r1, #16
 80031fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003200:	f001 fc66 	bl	8004ad0 <HAL_GPIO_WritePin>
}
 8003204:	bf00      	nop
 8003206:	bd80      	pop	{r7, pc}
 8003208:	48000400 	.word	0x48000400
 800320c:	20003fa0 	.word	0x20003fa0
 8003210:	20003fa4 	.word	0x20003fa4

08003214 <ssd1306_clear>:
void ssd1306_clear()
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
   memset(buffer, 0x00, (SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8));
 8003218:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800321c:	2100      	movs	r1, #0
 800321e:	4802      	ldr	r0, [pc, #8]	; (8003228 <ssd1306_clear+0x14>)
 8003220:	f007 fb06 	bl	800a830 <memset>
}
 8003224:	bf00      	nop
 8003226:	bd80      	pop	{r7, pc}
 8003228:	20003fa4 	.word	0x20003fa4

0800322c <ssd1306_init>:
void ssd1306_init(SPI_HandleTypeDef *spi)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(ssd1306_res_GPIO_Port, ssd1306_res_Pin, GPIO_PIN_RESET);
 8003234:	2200      	movs	r2, #0
 8003236:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800323a:	4833      	ldr	r0, [pc, #204]	; (8003308 <ssd1306_init+0xdc>)
 800323c:	f001 fc48 	bl	8004ad0 <HAL_GPIO_WritePin>
   HAL_Delay(150);
 8003240:	2096      	movs	r0, #150	; 0x96
 8003242:	f000 fe37 	bl	8003eb4 <HAL_Delay>
   HAL_GPIO_WritePin(ssd1306_res_GPIO_Port, ssd1306_res_Pin, GPIO_PIN_SET);
 8003246:	2201      	movs	r2, #1
 8003248:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800324c:	482e      	ldr	r0, [pc, #184]	; (8003308 <ssd1306_init+0xdc>)
 800324e:	f001 fc3f 	bl	8004ad0 <HAL_GPIO_WritePin>
   HAL_Delay(100);
 8003252:	2064      	movs	r0, #100	; 0x64
 8003254:	f000 fe2e 	bl	8003eb4 <HAL_Delay>
   ssd1306_spi = spi;
 8003258:	4a2c      	ldr	r2, [pc, #176]	; (800330c <ssd1306_init+0xe0>)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6013      	str	r3, [r2, #0]
   ssd1306_command(0xAE); // Display Off
 800325e:	20ae      	movs	r0, #174	; 0xae
 8003260:	f7ff ff2a 	bl	80030b8 <ssd1306_command>

   ssd1306_command(0x00);
 8003264:	2000      	movs	r0, #0
 8003266:	f7ff ff27 	bl	80030b8 <ssd1306_command>
   ssd1306_command(0x10);
 800326a:	2010      	movs	r0, #16
 800326c:	f7ff ff24 	bl	80030b8 <ssd1306_command>
   ssd1306_command(0x40);
 8003270:	2040      	movs	r0, #64	; 0x40
 8003272:	f7ff ff21 	bl	80030b8 <ssd1306_command>
   ssd1306_command(0x20); // Set addressing mode
 8003276:	2020      	movs	r0, #32
 8003278:	f7ff ff1e 	bl	80030b8 <ssd1306_command>
   ssd1306_command(0x00); // Horizontal Addressing Mode
 800327c:	2000      	movs	r0, #0
 800327e:	f7ff ff1b 	bl	80030b8 <ssd1306_command>

   ssd1306_command(0x81); // Set Contrast Control
 8003282:	2081      	movs	r0, #129	; 0x81
 8003284:	f7ff ff18 	bl	80030b8 <ssd1306_command>
   ssd1306_command(0xff);
 8003288:	20ff      	movs	r0, #255	; 0xff
 800328a:	f7ff ff15 	bl	80030b8 <ssd1306_command>
   ssd1306_command(0xA0 | (0x01 & 1));
 800328e:	20a1      	movs	r0, #161	; 0xa1
 8003290:	f7ff ff12 	bl	80030b8 <ssd1306_command>
   ssd1306_command(0xC0 | (0x08 & (1 << 3)));
 8003294:	20c8      	movs	r0, #200	; 0xc8
 8003296:	f7ff ff0f 	bl	80030b8 <ssd1306_command>

   ssd1306_command(0xA6); // Set Normal Display
 800329a:	20a6      	movs	r0, #166	; 0xa6
 800329c:	f7ff ff0c 	bl	80030b8 <ssd1306_command>

   ssd1306_command(0xA8); // Select Multiplex Ratio
 80032a0:	20a8      	movs	r0, #168	; 0xa8
 80032a2:	f7ff ff09 	bl	80030b8 <ssd1306_command>
   ssd1306_command(0x3F); // Default => 0x3F (1/64 Duty)	0x1F(1/32 Duty)
 80032a6:	203f      	movs	r0, #63	; 0x3f
 80032a8:	f7ff ff06 	bl	80030b8 <ssd1306_command>

   ssd1306_command(0xD3); // Setting Display Offset
 80032ac:	20d3      	movs	r0, #211	; 0xd3
 80032ae:	f7ff ff03 	bl	80030b8 <ssd1306_command>
   ssd1306_command(0x00); // 00H Reset
 80032b2:	2000      	movs	r0, #0
 80032b4:	f7ff ff00 	bl	80030b8 <ssd1306_command>

   ssd1306_command(0xD5); // SET DISPLAY CLOCK
 80032b8:	20d5      	movs	r0, #213	; 0xd5
 80032ba:	f7ff fefd 	bl	80030b8 <ssd1306_command>
   ssd1306_command(0x80); // 105HZ
 80032be:	2080      	movs	r0, #128	; 0x80
 80032c0:	f7ff fefa 	bl	80030b8 <ssd1306_command>

   ssd1306_command(0xD9); // Set Pre-Charge period
 80032c4:	20d9      	movs	r0, #217	; 0xd9
 80032c6:	f7ff fef7 	bl	80030b8 <ssd1306_command>
   ssd1306_command(0x22);
 80032ca:	2022      	movs	r0, #34	; 0x22
 80032cc:	f7ff fef4 	bl	80030b8 <ssd1306_command>

   ssd1306_command(0xDA); // Set COM Hardware Configuration
 80032d0:	20da      	movs	r0, #218	; 0xda
 80032d2:	f7ff fef1 	bl	80030b8 <ssd1306_command>
   ssd1306_command(0x12); // Alternative COM Pin---See IC Spec page 34
 80032d6:	2012      	movs	r0, #18
 80032d8:	f7ff feee 	bl	80030b8 <ssd1306_command>
                          // (0x02)=> A4=0;Sequential COM pin configuration;A5=0;Disable COM Left/Right remap

   ssd1306_command(0xDB); // Set Deselect Vcomh level
 80032dc:	20db      	movs	r0, #219	; 0xdb
 80032de:	f7ff feeb 	bl	80030b8 <ssd1306_command>
   ssd1306_command(0x40);
 80032e2:	2040      	movs	r0, #64	; 0x40
 80032e4:	f7ff fee8 	bl	80030b8 <ssd1306_command>

   ssd1306_command(0x8D); // Set Charge Pump
 80032e8:	208d      	movs	r0, #141	; 0x8d
 80032ea:	f7ff fee5 	bl	80030b8 <ssd1306_command>
   // ssd1306_command(0x10);  // Disable Charge Pump
   ssd1306_command(0x14); // Endable Charge Pump
 80032ee:	2014      	movs	r0, #20
 80032f0:	f7ff fee2 	bl	80030b8 <ssd1306_command>

   ssd1306_command(0xA4); // Entire Display ON
 80032f4:	20a4      	movs	r0, #164	; 0xa4
 80032f6:	f7ff fedf 	bl	80030b8 <ssd1306_command>
   ssd1306_command(SSD1306_DISPLAYON);
 80032fa:	20af      	movs	r0, #175	; 0xaf
 80032fc:	f7ff fedc 	bl	80030b8 <ssd1306_command>
}
 8003300:	bf00      	nop
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	48000400 	.word	0x48000400
 800330c:	20003fa0 	.word	0x20003fa0

08003310 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003316:	4b0f      	ldr	r3, [pc, #60]	; (8003354 <HAL_MspInit+0x44>)
 8003318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800331a:	4a0e      	ldr	r2, [pc, #56]	; (8003354 <HAL_MspInit+0x44>)
 800331c:	f043 0301 	orr.w	r3, r3, #1
 8003320:	6613      	str	r3, [r2, #96]	; 0x60
 8003322:	4b0c      	ldr	r3, [pc, #48]	; (8003354 <HAL_MspInit+0x44>)
 8003324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	607b      	str	r3, [r7, #4]
 800332c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800332e:	4b09      	ldr	r3, [pc, #36]	; (8003354 <HAL_MspInit+0x44>)
 8003330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003332:	4a08      	ldr	r2, [pc, #32]	; (8003354 <HAL_MspInit+0x44>)
 8003334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003338:	6593      	str	r3, [r2, #88]	; 0x58
 800333a:	4b06      	ldr	r3, [pc, #24]	; (8003354 <HAL_MspInit+0x44>)
 800333c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800333e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003342:	603b      	str	r3, [r7, #0]
 8003344:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	40021000 	.word	0x40021000

08003358 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800335c:	e7fe      	b.n	800335c <NMI_Handler+0x4>

0800335e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800335e:	b480      	push	{r7}
 8003360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003362:	e7fe      	b.n	8003362 <HardFault_Handler+0x4>

08003364 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003368:	e7fe      	b.n	8003368 <MemManage_Handler+0x4>

0800336a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800336a:	b480      	push	{r7}
 800336c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800336e:	e7fe      	b.n	800336e <BusFault_Handler+0x4>

08003370 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003374:	e7fe      	b.n	8003374 <UsageFault_Handler+0x4>

08003376 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003376:	b480      	push	{r7}
 8003378:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800337a:	bf00      	nop
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003388:	bf00      	nop
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr

08003392 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003392:	b480      	push	{r7}
 8003394:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003396:	bf00      	nop
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033a4:	f000 fd66 	bl	8003e74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033a8:	bf00      	nop
 80033aa:	bd80      	pop	{r7, pc}

080033ac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80033b0:	4802      	ldr	r0, [pc, #8]	; (80033bc <DMA1_Channel1_IRQHandler+0x10>)
 80033b2:	f001 f893 	bl	80044dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80033b6:	bf00      	nop
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	2000448c 	.word	0x2000448c

080033c0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80033c4:	4802      	ldr	r0, [pc, #8]	; (80033d0 <DMA1_Channel2_IRQHandler+0x10>)
 80033c6:	f001 f889 	bl	80044dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80033ca:	bf00      	nop
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	2000460c 	.word	0x2000460c

080033d4 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80033d8:	4802      	ldr	r0, [pc, #8]	; (80033e4 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80033da:	f004 fca7 	bl	8007d2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80033de:	bf00      	nop
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	200043a8 	.word	0x200043a8

080033e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80033ec:	4802      	ldr	r0, [pc, #8]	; (80033f8 <USART1_IRQHandler+0x10>)
 80033ee:	f005 fe07 	bl	8009000 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80033f2:	bf00      	nop
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	200044ec 	.word	0x200044ec

080033fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
	return 1;
 8003400:	2301      	movs	r3, #1
}
 8003402:	4618      	mov	r0, r3
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <_kill>:

int _kill(int pid, int sig)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003416:	f007 f9e1 	bl	800a7dc <__errno>
 800341a:	4603      	mov	r3, r0
 800341c:	2216      	movs	r2, #22
 800341e:	601a      	str	r2, [r3, #0]
	return -1;
 8003420:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003424:	4618      	mov	r0, r3
 8003426:	3708      	adds	r7, #8
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <_exit>:

void _exit (int status)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003434:	f04f 31ff 	mov.w	r1, #4294967295
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f7ff ffe7 	bl	800340c <_kill>
	while (1) {}		/* Make sure we hang here */
 800343e:	e7fe      	b.n	800343e <_exit+0x12>

08003440 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800344c:	2300      	movs	r3, #0
 800344e:	617b      	str	r3, [r7, #20]
 8003450:	e00a      	b.n	8003468 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003452:	f3af 8000 	nop.w
 8003456:	4601      	mov	r1, r0
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	1c5a      	adds	r2, r3, #1
 800345c:	60ba      	str	r2, [r7, #8]
 800345e:	b2ca      	uxtb	r2, r1
 8003460:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	3301      	adds	r3, #1
 8003466:	617b      	str	r3, [r7, #20]
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	429a      	cmp	r2, r3
 800346e:	dbf0      	blt.n	8003452 <_read+0x12>
	}

return len;
 8003470:	687b      	ldr	r3, [r7, #4]
}
 8003472:	4618      	mov	r0, r3
 8003474:	3718      	adds	r7, #24
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b086      	sub	sp, #24
 800347e:	af00      	add	r7, sp, #0
 8003480:	60f8      	str	r0, [r7, #12]
 8003482:	60b9      	str	r1, [r7, #8]
 8003484:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003486:	2300      	movs	r3, #0
 8003488:	617b      	str	r3, [r7, #20]
 800348a:	e009      	b.n	80034a0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	1c5a      	adds	r2, r3, #1
 8003490:	60ba      	str	r2, [r7, #8]
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	4618      	mov	r0, r3
 8003496:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	3301      	adds	r3, #1
 800349e:	617b      	str	r3, [r7, #20]
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	dbf1      	blt.n	800348c <_write+0x12>
	}
	return len;
 80034a8:	687b      	ldr	r3, [r7, #4]
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3718      	adds	r7, #24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <_close>:

int _close(int file)
{
 80034b2:	b480      	push	{r7}
 80034b4:	b083      	sub	sp, #12
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
	return -1;
 80034ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034be:	4618      	mov	r0, r3
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr

080034ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034ca:	b480      	push	{r7}
 80034cc:	b083      	sub	sp, #12
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
 80034d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80034da:	605a      	str	r2, [r3, #4]
	return 0;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <_isatty>:

int _isatty(int file)
{
 80034ea:	b480      	push	{r7}
 80034ec:	b083      	sub	sp, #12
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
	return 1;
 80034f2:	2301      	movs	r3, #1
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
	return 0;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3714      	adds	r7, #20
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
	...

0800351c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003524:	4a14      	ldr	r2, [pc, #80]	; (8003578 <_sbrk+0x5c>)
 8003526:	4b15      	ldr	r3, [pc, #84]	; (800357c <_sbrk+0x60>)
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003530:	4b13      	ldr	r3, [pc, #76]	; (8003580 <_sbrk+0x64>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d102      	bne.n	800353e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003538:	4b11      	ldr	r3, [pc, #68]	; (8003580 <_sbrk+0x64>)
 800353a:	4a12      	ldr	r2, [pc, #72]	; (8003584 <_sbrk+0x68>)
 800353c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800353e:	4b10      	ldr	r3, [pc, #64]	; (8003580 <_sbrk+0x64>)
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4413      	add	r3, r2
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	429a      	cmp	r2, r3
 800354a:	d207      	bcs.n	800355c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800354c:	f007 f946 	bl	800a7dc <__errno>
 8003550:	4603      	mov	r3, r0
 8003552:	220c      	movs	r2, #12
 8003554:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003556:	f04f 33ff 	mov.w	r3, #4294967295
 800355a:	e009      	b.n	8003570 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800355c:	4b08      	ldr	r3, [pc, #32]	; (8003580 <_sbrk+0x64>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003562:	4b07      	ldr	r3, [pc, #28]	; (8003580 <_sbrk+0x64>)
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4413      	add	r3, r2
 800356a:	4a05      	ldr	r2, [pc, #20]	; (8003580 <_sbrk+0x64>)
 800356c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800356e:	68fb      	ldr	r3, [r7, #12]
}
 8003570:	4618      	mov	r0, r3
 8003572:	3718      	adds	r7, #24
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	20050000 	.word	0x20050000
 800357c:	00000c00 	.word	0x00000c00
 8003580:	200043a4 	.word	0x200043a4
 8003584:	20004680 	.word	0x20004680

08003588 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
#if defined(USER_VECT_TAB_ADDRESS)
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 800358c:	4b08      	ldr	r3, [pc, #32]	; (80035b0 <SystemInit+0x28>)
 800358e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003592:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003594:	4b06      	ldr	r3, [pc, #24]	; (80035b0 <SystemInit+0x28>)
 8003596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359a:	4a05      	ldr	r2, [pc, #20]	; (80035b0 <SystemInit+0x28>)
 800359c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80035a4:	bf00      	nop
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	e000ed00 	.word	0xe000ed00

080035b4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b09a      	sub	sp, #104	; 0x68
 80035b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80035be:	2200      	movs	r2, #0
 80035c0:	601a      	str	r2, [r3, #0]
 80035c2:	605a      	str	r2, [r3, #4]
 80035c4:	609a      	str	r2, [r3, #8]
 80035c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035c8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80035cc:	2200      	movs	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	605a      	str	r2, [r3, #4]
 80035d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80035d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80035d8:	2200      	movs	r2, #0
 80035da:	601a      	str	r2, [r3, #0]
 80035dc:	605a      	str	r2, [r3, #4]
 80035de:	609a      	str	r2, [r3, #8]
 80035e0:	60da      	str	r2, [r3, #12]
 80035e2:	611a      	str	r2, [r3, #16]
 80035e4:	615a      	str	r2, [r3, #20]
 80035e6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80035e8:	1d3b      	adds	r3, r7, #4
 80035ea:	222c      	movs	r2, #44	; 0x2c
 80035ec:	2100      	movs	r1, #0
 80035ee:	4618      	mov	r0, r3
 80035f0:	f007 f91e 	bl	800a830 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80035f4:	4b43      	ldr	r3, [pc, #268]	; (8003704 <MX_TIM1_Init+0x150>)
 80035f6:	4a44      	ldr	r2, [pc, #272]	; (8003708 <MX_TIM1_Init+0x154>)
 80035f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80035fa:	4b42      	ldr	r3, [pc, #264]	; (8003704 <MX_TIM1_Init+0x150>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003600:	4b40      	ldr	r3, [pc, #256]	; (8003704 <MX_TIM1_Init+0x150>)
 8003602:	2200      	movs	r2, #0
 8003604:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003606:	4b3f      	ldr	r3, [pc, #252]	; (8003704 <MX_TIM1_Init+0x150>)
 8003608:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800360c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800360e:	4b3d      	ldr	r3, [pc, #244]	; (8003704 <MX_TIM1_Init+0x150>)
 8003610:	2200      	movs	r2, #0
 8003612:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003614:	4b3b      	ldr	r3, [pc, #236]	; (8003704 <MX_TIM1_Init+0x150>)
 8003616:	2200      	movs	r2, #0
 8003618:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800361a:	4b3a      	ldr	r3, [pc, #232]	; (8003704 <MX_TIM1_Init+0x150>)
 800361c:	2200      	movs	r2, #0
 800361e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003620:	4838      	ldr	r0, [pc, #224]	; (8003704 <MX_TIM1_Init+0x150>)
 8003622:	f004 f997 	bl	8007954 <HAL_TIM_Base_Init>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800362c:	f7fe fffa 	bl	8002624 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003634:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003636:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800363a:	4619      	mov	r1, r3
 800363c:	4831      	ldr	r0, [pc, #196]	; (8003704 <MX_TIM1_Init+0x150>)
 800363e:	f004 fda9 	bl	8008194 <HAL_TIM_ConfigClockSource>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003648:	f7fe ffec 	bl	8002624 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800364c:	482d      	ldr	r0, [pc, #180]	; (8003704 <MX_TIM1_Init+0x150>)
 800364e:	f004 f9d8 	bl	8007a02 <HAL_TIM_PWM_Init>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d001      	beq.n	800365c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003658:	f7fe ffe4 	bl	8002624 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800365c:	2300      	movs	r3, #0
 800365e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003660:	2300      	movs	r3, #0
 8003662:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003664:	2300      	movs	r3, #0
 8003666:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003668:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800366c:	4619      	mov	r1, r3
 800366e:	4825      	ldr	r0, [pc, #148]	; (8003704 <MX_TIM1_Init+0x150>)
 8003670:	f005 fabc 	bl	8008bec <HAL_TIMEx_MasterConfigSynchronization>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800367a:	f7fe ffd3 	bl	8002624 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800367e:	2360      	movs	r3, #96	; 0x60
 8003680:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8003682:	2300      	movs	r3, #0
 8003684:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003686:	2300      	movs	r3, #0
 8003688:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800368a:	2300      	movs	r3, #0
 800368c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800368e:	2300      	movs	r3, #0
 8003690:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003692:	2300      	movs	r3, #0
 8003694:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003696:	2300      	movs	r3, #0
 8003698:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800369a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800369e:	2200      	movs	r2, #0
 80036a0:	4619      	mov	r1, r3
 80036a2:	4818      	ldr	r0, [pc, #96]	; (8003704 <MX_TIM1_Init+0x150>)
 80036a4:	f004 fc62 	bl	8007f6c <HAL_TIM_PWM_ConfigChannel>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80036ae:	f7fe ffb9 	bl	8002624 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80036b2:	2300      	movs	r3, #0
 80036b4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80036b6:	2300      	movs	r3, #0
 80036b8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80036ba:	2300      	movs	r3, #0
 80036bc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80036be:	2300      	movs	r3, #0
 80036c0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80036c2:	2300      	movs	r3, #0
 80036c4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80036c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036ca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80036cc:	2300      	movs	r3, #0
 80036ce:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80036d0:	2300      	movs	r3, #0
 80036d2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80036d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036d8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80036da:	2300      	movs	r3, #0
 80036dc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80036de:	2300      	movs	r3, #0
 80036e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80036e2:	1d3b      	adds	r3, r7, #4
 80036e4:	4619      	mov	r1, r3
 80036e6:	4807      	ldr	r0, [pc, #28]	; (8003704 <MX_TIM1_Init+0x150>)
 80036e8:	f005 fb08 	bl	8008cfc <HAL_TIMEx_ConfigBreakDeadTime>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80036f2:	f7fe ff97 	bl	8002624 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80036f6:	4803      	ldr	r0, [pc, #12]	; (8003704 <MX_TIM1_Init+0x150>)
 80036f8:	f000 f97c 	bl	80039f4 <HAL_TIM_MspPostInit>

}
 80036fc:	bf00      	nop
 80036fe:	3768      	adds	r7, #104	; 0x68
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	200043a8 	.word	0x200043a8
 8003708:	40012c00 	.word	0x40012c00

0800370c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b08e      	sub	sp, #56	; 0x38
 8003710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003712:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003716:	2200      	movs	r2, #0
 8003718:	601a      	str	r2, [r3, #0]
 800371a:	605a      	str	r2, [r3, #4]
 800371c:	609a      	str	r2, [r3, #8]
 800371e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003720:	f107 031c 	add.w	r3, r7, #28
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]
 8003728:	605a      	str	r2, [r3, #4]
 800372a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800372c:	463b      	mov	r3, r7
 800372e:	2200      	movs	r2, #0
 8003730:	601a      	str	r2, [r3, #0]
 8003732:	605a      	str	r2, [r3, #4]
 8003734:	609a      	str	r2, [r3, #8]
 8003736:	60da      	str	r2, [r3, #12]
 8003738:	611a      	str	r2, [r3, #16]
 800373a:	615a      	str	r2, [r3, #20]
 800373c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800373e:	4b2d      	ldr	r3, [pc, #180]	; (80037f4 <MX_TIM2_Init+0xe8>)
 8003740:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003744:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003746:	4b2b      	ldr	r3, [pc, #172]	; (80037f4 <MX_TIM2_Init+0xe8>)
 8003748:	2200      	movs	r2, #0
 800374a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800374c:	4b29      	ldr	r3, [pc, #164]	; (80037f4 <MX_TIM2_Init+0xe8>)
 800374e:	2200      	movs	r2, #0
 8003750:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003752:	4b28      	ldr	r3, [pc, #160]	; (80037f4 <MX_TIM2_Init+0xe8>)
 8003754:	f04f 32ff 	mov.w	r2, #4294967295
 8003758:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800375a:	4b26      	ldr	r3, [pc, #152]	; (80037f4 <MX_TIM2_Init+0xe8>)
 800375c:	2200      	movs	r2, #0
 800375e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003760:	4b24      	ldr	r3, [pc, #144]	; (80037f4 <MX_TIM2_Init+0xe8>)
 8003762:	2200      	movs	r2, #0
 8003764:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003766:	4823      	ldr	r0, [pc, #140]	; (80037f4 <MX_TIM2_Init+0xe8>)
 8003768:	f004 f8f4 	bl	8007954 <HAL_TIM_Base_Init>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003772:	f7fe ff57 	bl	8002624 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003776:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800377a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800377c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003780:	4619      	mov	r1, r3
 8003782:	481c      	ldr	r0, [pc, #112]	; (80037f4 <MX_TIM2_Init+0xe8>)
 8003784:	f004 fd06 	bl	8008194 <HAL_TIM_ConfigClockSource>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800378e:	f7fe ff49 	bl	8002624 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003792:	4818      	ldr	r0, [pc, #96]	; (80037f4 <MX_TIM2_Init+0xe8>)
 8003794:	f004 f935 	bl	8007a02 <HAL_TIM_PWM_Init>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800379e:	f7fe ff41 	bl	8002624 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037a2:	2300      	movs	r3, #0
 80037a4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037a6:	2300      	movs	r3, #0
 80037a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80037aa:	f107 031c 	add.w	r3, r7, #28
 80037ae:	4619      	mov	r1, r3
 80037b0:	4810      	ldr	r0, [pc, #64]	; (80037f4 <MX_TIM2_Init+0xe8>)
 80037b2:	f005 fa1b 	bl	8008bec <HAL_TIMEx_MasterConfigSynchronization>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80037bc:	f7fe ff32 	bl	8002624 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037c0:	2360      	movs	r3, #96	; 0x60
 80037c2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80037c4:	2300      	movs	r3, #0
 80037c6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037c8:	2300      	movs	r3, #0
 80037ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037cc:	2300      	movs	r3, #0
 80037ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80037d0:	463b      	mov	r3, r7
 80037d2:	2200      	movs	r2, #0
 80037d4:	4619      	mov	r1, r3
 80037d6:	4807      	ldr	r0, [pc, #28]	; (80037f4 <MX_TIM2_Init+0xe8>)
 80037d8:	f004 fbc8 	bl	8007f6c <HAL_TIM_PWM_ConfigChannel>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80037e2:	f7fe ff1f 	bl	8002624 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80037e6:	4803      	ldr	r0, [pc, #12]	; (80037f4 <MX_TIM2_Init+0xe8>)
 80037e8:	f000 f904 	bl	80039f4 <HAL_TIM_MspPostInit>

}
 80037ec:	bf00      	nop
 80037ee:	3738      	adds	r7, #56	; 0x38
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	200043f4 	.word	0x200043f4

080037f8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b08c      	sub	sp, #48	; 0x30
 80037fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80037fe:	f107 030c 	add.w	r3, r7, #12
 8003802:	2224      	movs	r2, #36	; 0x24
 8003804:	2100      	movs	r1, #0
 8003806:	4618      	mov	r0, r3
 8003808:	f007 f812 	bl	800a830 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800380c:	463b      	mov	r3, r7
 800380e:	2200      	movs	r2, #0
 8003810:	601a      	str	r2, [r3, #0]
 8003812:	605a      	str	r2, [r3, #4]
 8003814:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003816:	4b21      	ldr	r3, [pc, #132]	; (800389c <MX_TIM5_Init+0xa4>)
 8003818:	4a21      	ldr	r2, [pc, #132]	; (80038a0 <MX_TIM5_Init+0xa8>)
 800381a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800381c:	4b1f      	ldr	r3, [pc, #124]	; (800389c <MX_TIM5_Init+0xa4>)
 800381e:	2200      	movs	r2, #0
 8003820:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003822:	4b1e      	ldr	r3, [pc, #120]	; (800389c <MX_TIM5_Init+0xa4>)
 8003824:	2200      	movs	r2, #0
 8003826:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003828:	4b1c      	ldr	r3, [pc, #112]	; (800389c <MX_TIM5_Init+0xa4>)
 800382a:	f04f 32ff 	mov.w	r2, #4294967295
 800382e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003830:	4b1a      	ldr	r3, [pc, #104]	; (800389c <MX_TIM5_Init+0xa4>)
 8003832:	2200      	movs	r2, #0
 8003834:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003836:	4b19      	ldr	r3, [pc, #100]	; (800389c <MX_TIM5_Init+0xa4>)
 8003838:	2200      	movs	r2, #0
 800383a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800383c:	2301      	movs	r3, #1
 800383e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003840:	2300      	movs	r3, #0
 8003842:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003844:	2301      	movs	r3, #1
 8003846:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003848:	2300      	movs	r3, #0
 800384a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800384c:	230f      	movs	r3, #15
 800384e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003850:	2300      	movs	r3, #0
 8003852:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003854:	2301      	movs	r3, #1
 8003856:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003858:	2300      	movs	r3, #0
 800385a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800385c:	2300      	movs	r3, #0
 800385e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8003860:	f107 030c 	add.w	r3, r7, #12
 8003864:	4619      	mov	r1, r3
 8003866:	480d      	ldr	r0, [pc, #52]	; (800389c <MX_TIM5_Init+0xa4>)
 8003868:	f004 f92c 	bl	8007ac4 <HAL_TIM_Encoder_Init>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8003872:	f7fe fed7 	bl	8002624 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003876:	2300      	movs	r3, #0
 8003878:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800387a:	2300      	movs	r3, #0
 800387c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800387e:	463b      	mov	r3, r7
 8003880:	4619      	mov	r1, r3
 8003882:	4806      	ldr	r0, [pc, #24]	; (800389c <MX_TIM5_Init+0xa4>)
 8003884:	f005 f9b2 	bl	8008bec <HAL_TIMEx_MasterConfigSynchronization>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 800388e:	f7fe fec9 	bl	8002624 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003892:	bf00      	nop
 8003894:	3730      	adds	r7, #48	; 0x30
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	20004440 	.word	0x20004440
 80038a0:	40000c00 	.word	0x40000c00

080038a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a2b      	ldr	r2, [pc, #172]	; (8003960 <HAL_TIM_Base_MspInit+0xbc>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d13f      	bne.n	8003936 <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80038b6:	4b2b      	ldr	r3, [pc, #172]	; (8003964 <HAL_TIM_Base_MspInit+0xc0>)
 80038b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ba:	4a2a      	ldr	r2, [pc, #168]	; (8003964 <HAL_TIM_Base_MspInit+0xc0>)
 80038bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80038c0:	6613      	str	r3, [r2, #96]	; 0x60
 80038c2:	4b28      	ldr	r3, [pc, #160]	; (8003964 <HAL_TIM_Base_MspInit+0xc0>)
 80038c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038ca:	60fb      	str	r3, [r7, #12]
 80038cc:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel1;
 80038ce:	4b26      	ldr	r3, [pc, #152]	; (8003968 <HAL_TIM_Base_MspInit+0xc4>)
 80038d0:	4a26      	ldr	r2, [pc, #152]	; (800396c <HAL_TIM_Base_MspInit+0xc8>)
 80038d2:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 80038d4:	4b24      	ldr	r3, [pc, #144]	; (8003968 <HAL_TIM_Base_MspInit+0xc4>)
 80038d6:	222b      	movs	r2, #43	; 0x2b
 80038d8:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80038da:	4b23      	ldr	r3, [pc, #140]	; (8003968 <HAL_TIM_Base_MspInit+0xc4>)
 80038dc:	2200      	movs	r2, #0
 80038de:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80038e0:	4b21      	ldr	r3, [pc, #132]	; (8003968 <HAL_TIM_Base_MspInit+0xc4>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80038e6:	4b20      	ldr	r3, [pc, #128]	; (8003968 <HAL_TIM_Base_MspInit+0xc4>)
 80038e8:	2280      	movs	r2, #128	; 0x80
 80038ea:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80038ec:	4b1e      	ldr	r3, [pc, #120]	; (8003968 <HAL_TIM_Base_MspInit+0xc4>)
 80038ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038f2:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80038f4:	4b1c      	ldr	r3, [pc, #112]	; (8003968 <HAL_TIM_Base_MspInit+0xc4>)
 80038f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038fa:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80038fc:	4b1a      	ldr	r3, [pc, #104]	; (8003968 <HAL_TIM_Base_MspInit+0xc4>)
 80038fe:	2200      	movs	r2, #0
 8003900:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003902:	4b19      	ldr	r3, [pc, #100]	; (8003968 <HAL_TIM_Base_MspInit+0xc4>)
 8003904:	2200      	movs	r2, #0
 8003906:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8003908:	4817      	ldr	r0, [pc, #92]	; (8003968 <HAL_TIM_Base_MspInit+0xc4>)
 800390a:	f000 fc09 	bl	8004120 <HAL_DMA_Init>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d001      	beq.n	8003918 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 8003914:	f7fe fe86 	bl	8002624 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a13      	ldr	r2, [pc, #76]	; (8003968 <HAL_TIM_Base_MspInit+0xc4>)
 800391c:	625a      	str	r2, [r3, #36]	; 0x24
 800391e:	4a12      	ldr	r2, [pc, #72]	; (8003968 <HAL_TIM_Base_MspInit+0xc4>)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 15, 0);
 8003924:	2200      	movs	r2, #0
 8003926:	210f      	movs	r1, #15
 8003928:	201a      	movs	r0, #26
 800392a:	f000 fbc2 	bl	80040b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800392e:	201a      	movs	r0, #26
 8003930:	f000 fbdb 	bl	80040ea <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003934:	e010      	b.n	8003958 <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM2)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800393e:	d10b      	bne.n	8003958 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003940:	4b08      	ldr	r3, [pc, #32]	; (8003964 <HAL_TIM_Base_MspInit+0xc0>)
 8003942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003944:	4a07      	ldr	r2, [pc, #28]	; (8003964 <HAL_TIM_Base_MspInit+0xc0>)
 8003946:	f043 0301 	orr.w	r3, r3, #1
 800394a:	6593      	str	r3, [r2, #88]	; 0x58
 800394c:	4b05      	ldr	r3, [pc, #20]	; (8003964 <HAL_TIM_Base_MspInit+0xc0>)
 800394e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	60bb      	str	r3, [r7, #8]
 8003956:	68bb      	ldr	r3, [r7, #8]
}
 8003958:	bf00      	nop
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	40012c00 	.word	0x40012c00
 8003964:	40021000 	.word	0x40021000
 8003968:	2000448c 	.word	0x2000448c
 800396c:	40020008 	.word	0x40020008

08003970 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b08a      	sub	sp, #40	; 0x28
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003978:	f107 0314 	add.w	r3, r7, #20
 800397c:	2200      	movs	r2, #0
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	605a      	str	r2, [r3, #4]
 8003982:	609a      	str	r2, [r3, #8]
 8003984:	60da      	str	r2, [r3, #12]
 8003986:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM5)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a17      	ldr	r2, [pc, #92]	; (80039ec <HAL_TIM_Encoder_MspInit+0x7c>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d128      	bne.n	80039e4 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003992:	4b17      	ldr	r3, [pc, #92]	; (80039f0 <HAL_TIM_Encoder_MspInit+0x80>)
 8003994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003996:	4a16      	ldr	r2, [pc, #88]	; (80039f0 <HAL_TIM_Encoder_MspInit+0x80>)
 8003998:	f043 0308 	orr.w	r3, r3, #8
 800399c:	6593      	str	r3, [r2, #88]	; 0x58
 800399e:	4b14      	ldr	r3, [pc, #80]	; (80039f0 <HAL_TIM_Encoder_MspInit+0x80>)
 80039a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a2:	f003 0308 	and.w	r3, r3, #8
 80039a6:	613b      	str	r3, [r7, #16]
 80039a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039aa:	4b11      	ldr	r3, [pc, #68]	; (80039f0 <HAL_TIM_Encoder_MspInit+0x80>)
 80039ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ae:	4a10      	ldr	r2, [pc, #64]	; (80039f0 <HAL_TIM_Encoder_MspInit+0x80>)
 80039b0:	f043 0301 	orr.w	r3, r3, #1
 80039b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039b6:	4b0e      	ldr	r3, [pc, #56]	; (80039f0 <HAL_TIM_Encoder_MspInit+0x80>)
 80039b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80039c2:	2303      	movs	r3, #3
 80039c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039c6:	2302      	movs	r3, #2
 80039c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ca:	2300      	movs	r3, #0
 80039cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039ce:	2300      	movs	r3, #0
 80039d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80039d2:	2302      	movs	r3, #2
 80039d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039d6:	f107 0314 	add.w	r3, r7, #20
 80039da:	4619      	mov	r1, r3
 80039dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039e0:	f000 fecc 	bl	800477c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80039e4:	bf00      	nop
 80039e6:	3728      	adds	r7, #40	; 0x28
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	40000c00 	.word	0x40000c00
 80039f0:	40021000 	.word	0x40021000

080039f4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b08a      	sub	sp, #40	; 0x28
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039fc:	f107 0314 	add.w	r3, r7, #20
 8003a00:	2200      	movs	r2, #0
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	605a      	str	r2, [r3, #4]
 8003a06:	609a      	str	r2, [r3, #8]
 8003a08:	60da      	str	r2, [r3, #12]
 8003a0a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a24      	ldr	r2, [pc, #144]	; (8003aa4 <HAL_TIM_MspPostInit+0xb0>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d11e      	bne.n	8003a54 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a16:	4b24      	ldr	r3, [pc, #144]	; (8003aa8 <HAL_TIM_MspPostInit+0xb4>)
 8003a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a1a:	4a23      	ldr	r2, [pc, #140]	; (8003aa8 <HAL_TIM_MspPostInit+0xb4>)
 8003a1c:	f043 0301 	orr.w	r3, r3, #1
 8003a20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a22:	4b21      	ldr	r3, [pc, #132]	; (8003aa8 <HAL_TIM_MspPostInit+0xb4>)
 8003a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	613b      	str	r3, [r7, #16]
 8003a2c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003a2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a34:	2302      	movs	r3, #2
 8003a36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003a40:	2301      	movs	r3, #1
 8003a42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a44:	f107 0314 	add.w	r3, r7, #20
 8003a48:	4619      	mov	r1, r3
 8003a4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a4e:	f000 fe95 	bl	800477c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003a52:	e022      	b.n	8003a9a <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM2)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a5c:	d11d      	bne.n	8003a9a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a5e:	4b12      	ldr	r3, [pc, #72]	; (8003aa8 <HAL_TIM_MspPostInit+0xb4>)
 8003a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a62:	4a11      	ldr	r2, [pc, #68]	; (8003aa8 <HAL_TIM_MspPostInit+0xb4>)
 8003a64:	f043 0301 	orr.w	r3, r3, #1
 8003a68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a6a:	4b0f      	ldr	r3, [pc, #60]	; (8003aa8 <HAL_TIM_MspPostInit+0xb4>)
 8003a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	60fb      	str	r3, [r7, #12]
 8003a74:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003a76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a80:	2300      	movs	r3, #0
 8003a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a84:	2300      	movs	r3, #0
 8003a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a8c:	f107 0314 	add.w	r3, r7, #20
 8003a90:	4619      	mov	r1, r3
 8003a92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a96:	f000 fe71 	bl	800477c <HAL_GPIO_Init>
}
 8003a9a:	bf00      	nop
 8003a9c:	3728      	adds	r7, #40	; 0x28
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	40012c00 	.word	0x40012c00
 8003aa8:	40021000 	.word	0x40021000

08003aac <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003ab0:	4b22      	ldr	r3, [pc, #136]	; (8003b3c <MX_USART1_UART_Init+0x90>)
 8003ab2:	4a23      	ldr	r2, [pc, #140]	; (8003b40 <MX_USART1_UART_Init+0x94>)
 8003ab4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2400;
 8003ab6:	4b21      	ldr	r3, [pc, #132]	; (8003b3c <MX_USART1_UART_Init+0x90>)
 8003ab8:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8003abc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003abe:	4b1f      	ldr	r3, [pc, #124]	; (8003b3c <MX_USART1_UART_Init+0x90>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003ac4:	4b1d      	ldr	r3, [pc, #116]	; (8003b3c <MX_USART1_UART_Init+0x90>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003aca:	4b1c      	ldr	r3, [pc, #112]	; (8003b3c <MX_USART1_UART_Init+0x90>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003ad0:	4b1a      	ldr	r3, [pc, #104]	; (8003b3c <MX_USART1_UART_Init+0x90>)
 8003ad2:	220c      	movs	r2, #12
 8003ad4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ad6:	4b19      	ldr	r3, [pc, #100]	; (8003b3c <MX_USART1_UART_Init+0x90>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003adc:	4b17      	ldr	r3, [pc, #92]	; (8003b3c <MX_USART1_UART_Init+0x90>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003ae2:	4b16      	ldr	r3, [pc, #88]	; (8003b3c <MX_USART1_UART_Init+0x90>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003ae8:	4b14      	ldr	r3, [pc, #80]	; (8003b3c <MX_USART1_UART_Init+0x90>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003aee:	4b13      	ldr	r3, [pc, #76]	; (8003b3c <MX_USART1_UART_Init+0x90>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003af4:	4811      	ldr	r0, [pc, #68]	; (8003b3c <MX_USART1_UART_Init+0x90>)
 8003af6:	f005 f99d 	bl	8008e34 <HAL_UART_Init>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d001      	beq.n	8003b04 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003b00:	f7fe fd90 	bl	8002624 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b04:	2100      	movs	r1, #0
 8003b06:	480d      	ldr	r0, [pc, #52]	; (8003b3c <MX_USART1_UART_Init+0x90>)
 8003b08:	f006 fd42 	bl	800a590 <HAL_UARTEx_SetTxFifoThreshold>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003b12:	f7fe fd87 	bl	8002624 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b16:	2100      	movs	r1, #0
 8003b18:	4808      	ldr	r0, [pc, #32]	; (8003b3c <MX_USART1_UART_Init+0x90>)
 8003b1a:	f006 fd77 	bl	800a60c <HAL_UARTEx_SetRxFifoThreshold>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003b24:	f7fe fd7e 	bl	8002624 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003b28:	4804      	ldr	r0, [pc, #16]	; (8003b3c <MX_USART1_UART_Init+0x90>)
 8003b2a:	f006 fcf8 	bl	800a51e <HAL_UARTEx_DisableFifoMode>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d001      	beq.n	8003b38 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003b34:	f7fe fd76 	bl	8002624 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003b38:	bf00      	nop
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	200044ec 	.word	0x200044ec
 8003b40:	40013800 	.word	0x40013800

08003b44 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003b48:	4b22      	ldr	r3, [pc, #136]	; (8003bd4 <MX_USART2_UART_Init+0x90>)
 8003b4a:	4a23      	ldr	r2, [pc, #140]	; (8003bd8 <MX_USART2_UART_Init+0x94>)
 8003b4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003b4e:	4b21      	ldr	r3, [pc, #132]	; (8003bd4 <MX_USART2_UART_Init+0x90>)
 8003b50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003b54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003b56:	4b1f      	ldr	r3, [pc, #124]	; (8003bd4 <MX_USART2_UART_Init+0x90>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003b5c:	4b1d      	ldr	r3, [pc, #116]	; (8003bd4 <MX_USART2_UART_Init+0x90>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003b62:	4b1c      	ldr	r3, [pc, #112]	; (8003bd4 <MX_USART2_UART_Init+0x90>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003b68:	4b1a      	ldr	r3, [pc, #104]	; (8003bd4 <MX_USART2_UART_Init+0x90>)
 8003b6a:	220c      	movs	r2, #12
 8003b6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b6e:	4b19      	ldr	r3, [pc, #100]	; (8003bd4 <MX_USART2_UART_Init+0x90>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b74:	4b17      	ldr	r3, [pc, #92]	; (8003bd4 <MX_USART2_UART_Init+0x90>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b7a:	4b16      	ldr	r3, [pc, #88]	; (8003bd4 <MX_USART2_UART_Init+0x90>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003b80:	4b14      	ldr	r3, [pc, #80]	; (8003bd4 <MX_USART2_UART_Init+0x90>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b86:	4b13      	ldr	r3, [pc, #76]	; (8003bd4 <MX_USART2_UART_Init+0x90>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003b8c:	4811      	ldr	r0, [pc, #68]	; (8003bd4 <MX_USART2_UART_Init+0x90>)
 8003b8e:	f005 f951 	bl	8008e34 <HAL_UART_Init>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d001      	beq.n	8003b9c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003b98:	f7fe fd44 	bl	8002624 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	480d      	ldr	r0, [pc, #52]	; (8003bd4 <MX_USART2_UART_Init+0x90>)
 8003ba0:	f006 fcf6 	bl	800a590 <HAL_UARTEx_SetTxFifoThreshold>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8003baa:	f7fe fd3b 	bl	8002624 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003bae:	2100      	movs	r1, #0
 8003bb0:	4808      	ldr	r0, [pc, #32]	; (8003bd4 <MX_USART2_UART_Init+0x90>)
 8003bb2:	f006 fd2b 	bl	800a60c <HAL_UARTEx_SetRxFifoThreshold>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003bbc:	f7fe fd32 	bl	8002624 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003bc0:	4804      	ldr	r0, [pc, #16]	; (8003bd4 <MX_USART2_UART_Init+0x90>)
 8003bc2:	f006 fcac 	bl	800a51e <HAL_UARTEx_DisableFifoMode>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003bcc:	f7fe fd2a 	bl	8002624 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003bd0:	bf00      	nop
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	2000457c 	.word	0x2000457c
 8003bd8:	40004400 	.word	0x40004400

08003bdc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b0b2      	sub	sp, #200	; 0xc8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003be4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003be8:	2200      	movs	r2, #0
 8003bea:	601a      	str	r2, [r3, #0]
 8003bec:	605a      	str	r2, [r3, #4]
 8003bee:	609a      	str	r2, [r3, #8]
 8003bf0:	60da      	str	r2, [r3, #12]
 8003bf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003bf4:	f107 031c 	add.w	r3, r7, #28
 8003bf8:	2298      	movs	r2, #152	; 0x98
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f006 fe17 	bl	800a830 <memset>
  if(uartHandle->Instance==USART1)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a57      	ldr	r2, [pc, #348]	; (8003d64 <HAL_UART_MspInit+0x188>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d166      	bne.n	8003cda <HAL_UART_MspInit+0xfe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003c10:	2300      	movs	r3, #0
 8003c12:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c14:	f107 031c 	add.w	r3, r7, #28
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f001 ff99 	bl	8005b50 <HAL_RCCEx_PeriphCLKConfig>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d001      	beq.n	8003c28 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003c24:	f7fe fcfe 	bl	8002624 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c28:	4b4f      	ldr	r3, [pc, #316]	; (8003d68 <HAL_UART_MspInit+0x18c>)
 8003c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c2c:	4a4e      	ldr	r2, [pc, #312]	; (8003d68 <HAL_UART_MspInit+0x18c>)
 8003c2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c32:	6613      	str	r3, [r2, #96]	; 0x60
 8003c34:	4b4c      	ldr	r3, [pc, #304]	; (8003d68 <HAL_UART_MspInit+0x18c>)
 8003c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c3c:	61bb      	str	r3, [r7, #24]
 8003c3e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c40:	4b49      	ldr	r3, [pc, #292]	; (8003d68 <HAL_UART_MspInit+0x18c>)
 8003c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c44:	4a48      	ldr	r2, [pc, #288]	; (8003d68 <HAL_UART_MspInit+0x18c>)
 8003c46:	f043 0301 	orr.w	r3, r3, #1
 8003c4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c4c:	4b46      	ldr	r3, [pc, #280]	; (8003d68 <HAL_UART_MspInit+0x18c>)
 8003c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	617b      	str	r3, [r7, #20]
 8003c56:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003c58:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003c5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c60:	2302      	movs	r3, #2
 8003c62:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c66:	2300      	movs	r3, #0
 8003c68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003c72:	2307      	movs	r3, #7
 8003c74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c78:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c82:	f000 fd7b 	bl	800477c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8003c86:	4b39      	ldr	r3, [pc, #228]	; (8003d6c <HAL_UART_MspInit+0x190>)
 8003c88:	4a39      	ldr	r2, [pc, #228]	; (8003d70 <HAL_UART_MspInit+0x194>)
 8003c8a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003c8c:	4b37      	ldr	r3, [pc, #220]	; (8003d6c <HAL_UART_MspInit+0x190>)
 8003c8e:	2219      	movs	r2, #25
 8003c90:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c92:	4b36      	ldr	r3, [pc, #216]	; (8003d6c <HAL_UART_MspInit+0x190>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c98:	4b34      	ldr	r3, [pc, #208]	; (8003d6c <HAL_UART_MspInit+0x190>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c9e:	4b33      	ldr	r3, [pc, #204]	; (8003d6c <HAL_UART_MspInit+0x190>)
 8003ca0:	2280      	movs	r2, #128	; 0x80
 8003ca2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ca4:	4b31      	ldr	r3, [pc, #196]	; (8003d6c <HAL_UART_MspInit+0x190>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003caa:	4b30      	ldr	r3, [pc, #192]	; (8003d6c <HAL_UART_MspInit+0x190>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003cb0:	4b2e      	ldr	r3, [pc, #184]	; (8003d6c <HAL_UART_MspInit+0x190>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003cb6:	4b2d      	ldr	r3, [pc, #180]	; (8003d6c <HAL_UART_MspInit+0x190>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003cbc:	482b      	ldr	r0, [pc, #172]	; (8003d6c <HAL_UART_MspInit+0x190>)
 8003cbe:	f000 fa2f 	bl	8004120 <HAL_DMA_Init>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8003cc8:	f7fe fcac 	bl	8002624 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a27      	ldr	r2, [pc, #156]	; (8003d6c <HAL_UART_MspInit+0x190>)
 8003cd0:	67da      	str	r2, [r3, #124]	; 0x7c
 8003cd2:	4a26      	ldr	r2, [pc, #152]	; (8003d6c <HAL_UART_MspInit+0x190>)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003cd8:	e040      	b.n	8003d5c <HAL_UART_MspInit+0x180>
  else if(uartHandle->Instance==USART2)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a25      	ldr	r2, [pc, #148]	; (8003d74 <HAL_UART_MspInit+0x198>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d13b      	bne.n	8003d5c <HAL_UART_MspInit+0x180>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003cec:	f107 031c 	add.w	r3, r7, #28
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f001 ff2d 	bl	8005b50 <HAL_RCCEx_PeriphCLKConfig>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d001      	beq.n	8003d00 <HAL_UART_MspInit+0x124>
      Error_Handler();
 8003cfc:	f7fe fc92 	bl	8002624 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003d00:	4b19      	ldr	r3, [pc, #100]	; (8003d68 <HAL_UART_MspInit+0x18c>)
 8003d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d04:	4a18      	ldr	r2, [pc, #96]	; (8003d68 <HAL_UART_MspInit+0x18c>)
 8003d06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d0a:	6593      	str	r3, [r2, #88]	; 0x58
 8003d0c:	4b16      	ldr	r3, [pc, #88]	; (8003d68 <HAL_UART_MspInit+0x18c>)
 8003d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d14:	613b      	str	r3, [r7, #16]
 8003d16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d18:	4b13      	ldr	r3, [pc, #76]	; (8003d68 <HAL_UART_MspInit+0x18c>)
 8003d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d1c:	4a12      	ldr	r2, [pc, #72]	; (8003d68 <HAL_UART_MspInit+0x18c>)
 8003d1e:	f043 0301 	orr.w	r3, r3, #1
 8003d22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d24:	4b10      	ldr	r3, [pc, #64]	; (8003d68 <HAL_UART_MspInit+0x18c>)
 8003d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	60fb      	str	r3, [r7, #12]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003d30:	230c      	movs	r3, #12
 8003d32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d36:	2302      	movs	r3, #2
 8003d38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d42:	2303      	movs	r3, #3
 8003d44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003d48:	2307      	movs	r3, #7
 8003d4a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d4e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003d52:	4619      	mov	r1, r3
 8003d54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d58:	f000 fd10 	bl	800477c <HAL_GPIO_Init>
}
 8003d5c:	bf00      	nop
 8003d5e:	37c8      	adds	r7, #200	; 0xc8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	40013800 	.word	0x40013800
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	2000460c 	.word	0x2000460c
 8003d70:	4002001c 	.word	0x4002001c
 8003d74:	40004400 	.word	0x40004400

08003d78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003d78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003db0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003d7c:	f7ff fc04 	bl	8003588 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003d80:	480c      	ldr	r0, [pc, #48]	; (8003db4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003d82:	490d      	ldr	r1, [pc, #52]	; (8003db8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003d84:	4a0d      	ldr	r2, [pc, #52]	; (8003dbc <LoopForever+0xe>)
  movs r3, #0
 8003d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d88:	e002      	b.n	8003d90 <LoopCopyDataInit>

08003d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d8e:	3304      	adds	r3, #4

08003d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d94:	d3f9      	bcc.n	8003d8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d96:	4a0a      	ldr	r2, [pc, #40]	; (8003dc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003d98:	4c0a      	ldr	r4, [pc, #40]	; (8003dc4 <LoopForever+0x16>)
  movs r3, #0
 8003d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d9c:	e001      	b.n	8003da2 <LoopFillZerobss>

08003d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003da0:	3204      	adds	r2, #4

08003da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003da4:	d3fb      	bcc.n	8003d9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003da6:	f006 fd1f 	bl	800a7e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003daa:	f7fe f8cf 	bl	8001f4c <main>

08003dae <LoopForever>:

LoopForever:
    b LoopForever
 8003dae:	e7fe      	b.n	8003dae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003db0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003db8:	20000254 	.word	0x20000254
  ldr r2, =_sidata
 8003dbc:	0800f9cc 	.word	0x0800f9cc
  ldr r2, =_sbss
 8003dc0:	20000254 	.word	0x20000254
  ldr r4, =_ebss
 8003dc4:	20004680 	.word	0x20004680

08003dc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003dc8:	e7fe      	b.n	8003dc8 <ADC1_2_IRQHandler>

08003dca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b082      	sub	sp, #8
 8003dce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003dd4:	2003      	movs	r0, #3
 8003dd6:	f000 f961 	bl	800409c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003dda:	200f      	movs	r0, #15
 8003ddc:	f000 f80e 	bl	8003dfc <HAL_InitTick>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d002      	beq.n	8003dec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	71fb      	strb	r3, [r7, #7]
 8003dea:	e001      	b.n	8003df0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003dec:	f7ff fa90 	bl	8003310 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003df0:	79fb      	ldrb	r3, [r7, #7]
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
	...

08003dfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003e04:	2300      	movs	r3, #0
 8003e06:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003e08:	4b17      	ldr	r3, [pc, #92]	; (8003e68 <HAL_InitTick+0x6c>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d023      	beq.n	8003e58 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003e10:	4b16      	ldr	r3, [pc, #88]	; (8003e6c <HAL_InitTick+0x70>)
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	4b14      	ldr	r3, [pc, #80]	; (8003e68 <HAL_InitTick+0x6c>)
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	4619      	mov	r1, r3
 8003e1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e26:	4618      	mov	r0, r3
 8003e28:	f000 f96d 	bl	8004106 <HAL_SYSTICK_Config>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10f      	bne.n	8003e52 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2b0f      	cmp	r3, #15
 8003e36:	d809      	bhi.n	8003e4c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e38:	2200      	movs	r2, #0
 8003e3a:	6879      	ldr	r1, [r7, #4]
 8003e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e40:	f000 f937 	bl	80040b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003e44:	4a0a      	ldr	r2, [pc, #40]	; (8003e70 <HAL_InitTick+0x74>)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6013      	str	r3, [r2, #0]
 8003e4a:	e007      	b.n	8003e5c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	73fb      	strb	r3, [r7, #15]
 8003e50:	e004      	b.n	8003e5c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	73fb      	strb	r3, [r7, #15]
 8003e56:	e001      	b.n	8003e5c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	2000007c 	.word	0x2000007c
 8003e6c:	20000074 	.word	0x20000074
 8003e70:	20000078 	.word	0x20000078

08003e74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003e78:	4b06      	ldr	r3, [pc, #24]	; (8003e94 <HAL_IncTick+0x20>)
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	4b06      	ldr	r3, [pc, #24]	; (8003e98 <HAL_IncTick+0x24>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4413      	add	r3, r2
 8003e84:	4a04      	ldr	r2, [pc, #16]	; (8003e98 <HAL_IncTick+0x24>)
 8003e86:	6013      	str	r3, [r2, #0]
}
 8003e88:	bf00      	nop
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	2000007c 	.word	0x2000007c
 8003e98:	2000466c 	.word	0x2000466c

08003e9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8003ea0:	4b03      	ldr	r3, [pc, #12]	; (8003eb0 <HAL_GetTick+0x14>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	2000466c 	.word	0x2000466c

08003eb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ebc:	f7ff ffee 	bl	8003e9c <HAL_GetTick>
 8003ec0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ecc:	d005      	beq.n	8003eda <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003ece:	4b0a      	ldr	r3, [pc, #40]	; (8003ef8 <HAL_Delay+0x44>)
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003eda:	bf00      	nop
 8003edc:	f7ff ffde 	bl	8003e9c <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d8f7      	bhi.n	8003edc <HAL_Delay+0x28>
  {
  }
}
 8003eec:	bf00      	nop
 8003eee:	bf00      	nop
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	2000007c 	.word	0x2000007c

08003efc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f003 0307 	and.w	r3, r3, #7
 8003f0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f0c:	4b0c      	ldr	r3, [pc, #48]	; (8003f40 <__NVIC_SetPriorityGrouping+0x44>)
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f18:	4013      	ands	r3, r2
 8003f1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f2e:	4a04      	ldr	r2, [pc, #16]	; (8003f40 <__NVIC_SetPriorityGrouping+0x44>)
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	60d3      	str	r3, [r2, #12]
}
 8003f34:	bf00      	nop
 8003f36:	3714      	adds	r7, #20
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr
 8003f40:	e000ed00 	.word	0xe000ed00

08003f44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f48:	4b04      	ldr	r3, [pc, #16]	; (8003f5c <__NVIC_GetPriorityGrouping+0x18>)
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	0a1b      	lsrs	r3, r3, #8
 8003f4e:	f003 0307 	and.w	r3, r3, #7
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr
 8003f5c:	e000ed00 	.word	0xe000ed00

08003f60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	4603      	mov	r3, r0
 8003f68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	db0b      	blt.n	8003f8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f72:	79fb      	ldrb	r3, [r7, #7]
 8003f74:	f003 021f 	and.w	r2, r3, #31
 8003f78:	4907      	ldr	r1, [pc, #28]	; (8003f98 <__NVIC_EnableIRQ+0x38>)
 8003f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f7e:	095b      	lsrs	r3, r3, #5
 8003f80:	2001      	movs	r0, #1
 8003f82:	fa00 f202 	lsl.w	r2, r0, r2
 8003f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f8a:	bf00      	nop
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	e000e100 	.word	0xe000e100

08003f9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	6039      	str	r1, [r7, #0]
 8003fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	db0a      	blt.n	8003fc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	b2da      	uxtb	r2, r3
 8003fb4:	490c      	ldr	r1, [pc, #48]	; (8003fe8 <__NVIC_SetPriority+0x4c>)
 8003fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fba:	0112      	lsls	r2, r2, #4
 8003fbc:	b2d2      	uxtb	r2, r2
 8003fbe:	440b      	add	r3, r1
 8003fc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003fc4:	e00a      	b.n	8003fdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	b2da      	uxtb	r2, r3
 8003fca:	4908      	ldr	r1, [pc, #32]	; (8003fec <__NVIC_SetPriority+0x50>)
 8003fcc:	79fb      	ldrb	r3, [r7, #7]
 8003fce:	f003 030f 	and.w	r3, r3, #15
 8003fd2:	3b04      	subs	r3, #4
 8003fd4:	0112      	lsls	r2, r2, #4
 8003fd6:	b2d2      	uxtb	r2, r2
 8003fd8:	440b      	add	r3, r1
 8003fda:	761a      	strb	r2, [r3, #24]
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	e000e100 	.word	0xe000e100
 8003fec:	e000ed00 	.word	0xe000ed00

08003ff0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b089      	sub	sp, #36	; 0x24
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f003 0307 	and.w	r3, r3, #7
 8004002:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	f1c3 0307 	rsb	r3, r3, #7
 800400a:	2b04      	cmp	r3, #4
 800400c:	bf28      	it	cs
 800400e:	2304      	movcs	r3, #4
 8004010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	3304      	adds	r3, #4
 8004016:	2b06      	cmp	r3, #6
 8004018:	d902      	bls.n	8004020 <NVIC_EncodePriority+0x30>
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	3b03      	subs	r3, #3
 800401e:	e000      	b.n	8004022 <NVIC_EncodePriority+0x32>
 8004020:	2300      	movs	r3, #0
 8004022:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004024:	f04f 32ff 	mov.w	r2, #4294967295
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	fa02 f303 	lsl.w	r3, r2, r3
 800402e:	43da      	mvns	r2, r3
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	401a      	ands	r2, r3
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004038:	f04f 31ff 	mov.w	r1, #4294967295
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	fa01 f303 	lsl.w	r3, r1, r3
 8004042:	43d9      	mvns	r1, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004048:	4313      	orrs	r3, r2
         );
}
 800404a:	4618      	mov	r0, r3
 800404c:	3724      	adds	r7, #36	; 0x24
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
	...

08004058 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	3b01      	subs	r3, #1
 8004064:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004068:	d301      	bcc.n	800406e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800406a:	2301      	movs	r3, #1
 800406c:	e00f      	b.n	800408e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800406e:	4a0a      	ldr	r2, [pc, #40]	; (8004098 <SysTick_Config+0x40>)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	3b01      	subs	r3, #1
 8004074:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004076:	210f      	movs	r1, #15
 8004078:	f04f 30ff 	mov.w	r0, #4294967295
 800407c:	f7ff ff8e 	bl	8003f9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004080:	4b05      	ldr	r3, [pc, #20]	; (8004098 <SysTick_Config+0x40>)
 8004082:	2200      	movs	r2, #0
 8004084:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004086:	4b04      	ldr	r3, [pc, #16]	; (8004098 <SysTick_Config+0x40>)
 8004088:	2207      	movs	r2, #7
 800408a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3708      	adds	r7, #8
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	e000e010 	.word	0xe000e010

0800409c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f7ff ff29 	bl	8003efc <__NVIC_SetPriorityGrouping>
}
 80040aa:	bf00      	nop
 80040ac:	3708      	adds	r7, #8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b086      	sub	sp, #24
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	4603      	mov	r3, r0
 80040ba:	60b9      	str	r1, [r7, #8]
 80040bc:	607a      	str	r2, [r7, #4]
 80040be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80040c0:	2300      	movs	r3, #0
 80040c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80040c4:	f7ff ff3e 	bl	8003f44 <__NVIC_GetPriorityGrouping>
 80040c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	68b9      	ldr	r1, [r7, #8]
 80040ce:	6978      	ldr	r0, [r7, #20]
 80040d0:	f7ff ff8e 	bl	8003ff0 <NVIC_EncodePriority>
 80040d4:	4602      	mov	r2, r0
 80040d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040da:	4611      	mov	r1, r2
 80040dc:	4618      	mov	r0, r3
 80040de:	f7ff ff5d 	bl	8003f9c <__NVIC_SetPriority>
}
 80040e2:	bf00      	nop
 80040e4:	3718      	adds	r7, #24
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b082      	sub	sp, #8
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	4603      	mov	r3, r0
 80040f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7ff ff31 	bl	8003f60 <__NVIC_EnableIRQ>
}
 80040fe:	bf00      	nop
 8004100:	3708      	adds	r7, #8
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004106:	b580      	push	{r7, lr}
 8004108:	b082      	sub	sp, #8
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f7ff ffa2 	bl	8004058 <SysTick_Config>
 8004114:	4603      	mov	r3, r0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
	...

08004120 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e08d      	b.n	800424e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	461a      	mov	r2, r3
 8004138:	4b47      	ldr	r3, [pc, #284]	; (8004258 <HAL_DMA_Init+0x138>)
 800413a:	429a      	cmp	r2, r3
 800413c:	d80f      	bhi.n	800415e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	461a      	mov	r2, r3
 8004144:	4b45      	ldr	r3, [pc, #276]	; (800425c <HAL_DMA_Init+0x13c>)
 8004146:	4413      	add	r3, r2
 8004148:	4a45      	ldr	r2, [pc, #276]	; (8004260 <HAL_DMA_Init+0x140>)
 800414a:	fba2 2303 	umull	r2, r3, r2, r3
 800414e:	091b      	lsrs	r3, r3, #4
 8004150:	009a      	lsls	r2, r3, #2
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a42      	ldr	r2, [pc, #264]	; (8004264 <HAL_DMA_Init+0x144>)
 800415a:	641a      	str	r2, [r3, #64]	; 0x40
 800415c:	e00e      	b.n	800417c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	461a      	mov	r2, r3
 8004164:	4b40      	ldr	r3, [pc, #256]	; (8004268 <HAL_DMA_Init+0x148>)
 8004166:	4413      	add	r3, r2
 8004168:	4a3d      	ldr	r2, [pc, #244]	; (8004260 <HAL_DMA_Init+0x140>)
 800416a:	fba2 2303 	umull	r2, r3, r2, r3
 800416e:	091b      	lsrs	r3, r3, #4
 8004170:	009a      	lsls	r2, r3, #2
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a3c      	ldr	r2, [pc, #240]	; (800426c <HAL_DMA_Init+0x14c>)
 800417a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2202      	movs	r2, #2
 8004180:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004196:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80041a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 fa72 	bl	80046b8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041dc:	d102      	bne.n	80041e4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ec:	b2d2      	uxtb	r2, r2
 80041ee:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80041f8:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d010      	beq.n	8004224 <HAL_DMA_Init+0x104>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	2b04      	cmp	r3, #4
 8004208:	d80c      	bhi.n	8004224 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 fa92 	bl	8004734 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004214:	2200      	movs	r2, #0
 8004216:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004220:	605a      	str	r2, [r3, #4]
 8004222:	e008      	b.n	8004236 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	40020407 	.word	0x40020407
 800425c:	bffdfff8 	.word	0xbffdfff8
 8004260:	cccccccd 	.word	0xcccccccd
 8004264:	40020000 	.word	0x40020000
 8004268:	bffdfbf8 	.word	0xbffdfbf8
 800426c:	40020400 	.word	0x40020400

08004270 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
 800427c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800427e:	2300      	movs	r3, #0
 8004280:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004288:	2b01      	cmp	r3, #1
 800428a:	d101      	bne.n	8004290 <HAL_DMA_Start_IT+0x20>
 800428c:	2302      	movs	r3, #2
 800428e:	e066      	b.n	800435e <HAL_DMA_Start_IT+0xee>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d155      	bne.n	8004350 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2202      	movs	r2, #2
 80042a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 0201 	bic.w	r2, r2, #1
 80042c0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	68b9      	ldr	r1, [r7, #8]
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f000 f9b6 	bl	800463a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d008      	beq.n	80042e8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f042 020e 	orr.w	r2, r2, #14
 80042e4:	601a      	str	r2, [r3, #0]
 80042e6:	e00f      	b.n	8004308 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 0204 	bic.w	r2, r2, #4
 80042f6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f042 020a 	orr.w	r2, r2, #10
 8004306:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d007      	beq.n	8004326 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004320:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004324:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432a:	2b00      	cmp	r3, #0
 800432c:	d007      	beq.n	800433e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004338:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800433c:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f042 0201 	orr.w	r2, r2, #1
 800434c:	601a      	str	r2, [r3, #0]
 800434e:	e005      	b.n	800435c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004358:	2302      	movs	r3, #2
 800435a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800435c:	7dfb      	ldrb	r3, [r7, #23]
}
 800435e:	4618      	mov	r0, r3
 8004360:	3718      	adds	r7, #24
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004366:	b480      	push	{r7}
 8004368:	b085      	sub	sp, #20
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800436e:	2300      	movs	r3, #0
 8004370:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b02      	cmp	r3, #2
 800437c:	d008      	beq.n	8004390 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2204      	movs	r2, #4
 8004382:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e040      	b.n	8004412 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f022 020e 	bic.w	r2, r2, #14
 800439e:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043ae:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f022 0201 	bic.w	r2, r2, #1
 80043be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c4:	f003 021c 	and.w	r2, r3, #28
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043cc:	2101      	movs	r1, #1
 80043ce:	fa01 f202 	lsl.w	r2, r1, r2
 80043d2:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80043dc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00c      	beq.n	8004400 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043f4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80043fe:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8004410:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004412:	4618      	mov	r0, r3
 8004414:	3714      	adds	r7, #20
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr

0800441e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b084      	sub	sp, #16
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004426:	2300      	movs	r3, #0
 8004428:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d005      	beq.n	8004442 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2204      	movs	r2, #4
 800443a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	73fb      	strb	r3, [r7, #15]
 8004440:	e047      	b.n	80044d2 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f022 020e 	bic.w	r2, r2, #14
 8004450:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f022 0201 	bic.w	r2, r2, #1
 8004460:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800446c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004470:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004476:	f003 021c 	and.w	r2, r3, #28
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447e:	2101      	movs	r1, #1
 8004480:	fa01 f202 	lsl.w	r2, r1, r2
 8004484:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800448e:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00c      	beq.n	80044b2 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044a6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80044b0:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2201      	movs	r2, #1
 80044b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d003      	beq.n	80044d2 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	4798      	blx	r3
    }
  }
  return status;
 80044d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3710      	adds	r7, #16
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f8:	f003 031c 	and.w	r3, r3, #28
 80044fc:	2204      	movs	r2, #4
 80044fe:	409a      	lsls	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	4013      	ands	r3, r2
 8004504:	2b00      	cmp	r3, #0
 8004506:	d026      	beq.n	8004556 <HAL_DMA_IRQHandler+0x7a>
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	f003 0304 	and.w	r3, r3, #4
 800450e:	2b00      	cmp	r3, #0
 8004510:	d021      	beq.n	8004556 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0320 	and.w	r3, r3, #32
 800451c:	2b00      	cmp	r3, #0
 800451e:	d107      	bne.n	8004530 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 0204 	bic.w	r2, r2, #4
 800452e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004534:	f003 021c 	and.w	r2, r3, #28
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453c:	2104      	movs	r1, #4
 800453e:	fa01 f202 	lsl.w	r2, r1, r2
 8004542:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004548:	2b00      	cmp	r3, #0
 800454a:	d071      	beq.n	8004630 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004554:	e06c      	b.n	8004630 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800455a:	f003 031c 	and.w	r3, r3, #28
 800455e:	2202      	movs	r2, #2
 8004560:	409a      	lsls	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	4013      	ands	r3, r2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d02e      	beq.n	80045c8 <HAL_DMA_IRQHandler+0xec>
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d029      	beq.n	80045c8 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0320 	and.w	r3, r3, #32
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10b      	bne.n	800459a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f022 020a 	bic.w	r2, r2, #10
 8004590:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800459e:	f003 021c 	and.w	r2, r3, #28
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a6:	2102      	movs	r1, #2
 80045a8:	fa01 f202 	lsl.w	r2, r1, r2
 80045ac:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d038      	beq.n	8004630 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80045c6:	e033      	b.n	8004630 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045cc:	f003 031c 	and.w	r3, r3, #28
 80045d0:	2208      	movs	r2, #8
 80045d2:	409a      	lsls	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	4013      	ands	r3, r2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d02a      	beq.n	8004632 <HAL_DMA_IRQHandler+0x156>
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	f003 0308 	and.w	r3, r3, #8
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d025      	beq.n	8004632 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f022 020e 	bic.w	r2, r2, #14
 80045f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fa:	f003 021c 	and.w	r2, r3, #28
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004602:	2101      	movs	r1, #1
 8004604:	fa01 f202 	lsl.w	r2, r1, r2
 8004608:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2201      	movs	r2, #1
 800460e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004624:	2b00      	cmp	r3, #0
 8004626:	d004      	beq.n	8004632 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004630:	bf00      	nop
 8004632:	bf00      	nop
}
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800463a:	b480      	push	{r7}
 800463c:	b085      	sub	sp, #20
 800463e:	af00      	add	r7, sp, #0
 8004640:	60f8      	str	r0, [r7, #12]
 8004642:	60b9      	str	r1, [r7, #8]
 8004644:	607a      	str	r2, [r7, #4]
 8004646:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004650:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004656:	2b00      	cmp	r3, #0
 8004658:	d004      	beq.n	8004664 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004662:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004668:	f003 021c 	and.w	r2, r3, #28
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004670:	2101      	movs	r1, #1
 8004672:	fa01 f202 	lsl.w	r2, r1, r2
 8004676:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	683a      	ldr	r2, [r7, #0]
 800467e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	2b10      	cmp	r3, #16
 8004686:	d108      	bne.n	800469a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68ba      	ldr	r2, [r7, #8]
 8004696:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004698:	e007      	b.n	80046aa <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68ba      	ldr	r2, [r7, #8]
 80046a0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	60da      	str	r2, [r3, #12]
}
 80046aa:	bf00      	nop
 80046ac:	3714      	adds	r7, #20
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
	...

080046b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	461a      	mov	r2, r3
 80046c6:	4b17      	ldr	r3, [pc, #92]	; (8004724 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d80a      	bhi.n	80046e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d0:	089b      	lsrs	r3, r3, #2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80046d8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	6493      	str	r3, [r2, #72]	; 0x48
 80046e0:	e007      	b.n	80046f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e6:	089b      	lsrs	r3, r3, #2
 80046e8:	009a      	lsls	r2, r3, #2
 80046ea:	4b0f      	ldr	r3, [pc, #60]	; (8004728 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80046ec:	4413      	add	r3, r2
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	3b08      	subs	r3, #8
 80046fa:	4a0c      	ldr	r2, [pc, #48]	; (800472c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80046fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004700:	091b      	lsrs	r3, r3, #4
 8004702:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a0a      	ldr	r2, [pc, #40]	; (8004730 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004708:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f003 031f 	and.w	r3, r3, #31
 8004710:	2201      	movs	r2, #1
 8004712:	409a      	lsls	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004718:	bf00      	nop
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr
 8004724:	40020407 	.word	0x40020407
 8004728:	4002081c 	.word	0x4002081c
 800472c:	cccccccd 	.word	0xcccccccd
 8004730:	40020880 	.word	0x40020880

08004734 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	b2db      	uxtb	r3, r3
 8004742:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	4b0b      	ldr	r3, [pc, #44]	; (8004774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004748:	4413      	add	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	461a      	mov	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a08      	ldr	r2, [pc, #32]	; (8004778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004756:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	3b01      	subs	r3, #1
 800475c:	f003 0303 	and.w	r3, r3, #3
 8004760:	2201      	movs	r2, #1
 8004762:	409a      	lsls	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004768:	bf00      	nop
 800476a:	3714      	adds	r7, #20
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr
 8004774:	1000823f 	.word	0x1000823f
 8004778:	40020940 	.word	0x40020940

0800477c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800477c:	b480      	push	{r7}
 800477e:	b087      	sub	sp, #28
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004786:	2300      	movs	r3, #0
 8004788:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800478a:	e166      	b.n	8004a5a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	2101      	movs	r1, #1
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	fa01 f303 	lsl.w	r3, r1, r3
 8004798:	4013      	ands	r3, r2
 800479a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f000 8158 	beq.w	8004a54 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f003 0303 	and.w	r3, r3, #3
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d005      	beq.n	80047bc <HAL_GPIO_Init+0x40>
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f003 0303 	and.w	r3, r3, #3
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d130      	bne.n	800481e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	005b      	lsls	r3, r3, #1
 80047c6:	2203      	movs	r2, #3
 80047c8:	fa02 f303 	lsl.w	r3, r2, r3
 80047cc:	43db      	mvns	r3, r3
 80047ce:	693a      	ldr	r2, [r7, #16]
 80047d0:	4013      	ands	r3, r2
 80047d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	68da      	ldr	r2, [r3, #12]
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	fa02 f303 	lsl.w	r3, r2, r3
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	693a      	ldr	r2, [r7, #16]
 80047ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80047f2:	2201      	movs	r2, #1
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	fa02 f303 	lsl.w	r3, r2, r3
 80047fa:	43db      	mvns	r3, r3
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	4013      	ands	r3, r2
 8004800:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	091b      	lsrs	r3, r3, #4
 8004808:	f003 0201 	and.w	r2, r3, #1
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	fa02 f303 	lsl.w	r3, r2, r3
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	4313      	orrs	r3, r2
 8004816:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f003 0303 	and.w	r3, r3, #3
 8004826:	2b03      	cmp	r3, #3
 8004828:	d017      	beq.n	800485a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	005b      	lsls	r3, r3, #1
 8004834:	2203      	movs	r2, #3
 8004836:	fa02 f303 	lsl.w	r3, r2, r3
 800483a:	43db      	mvns	r3, r3
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	4013      	ands	r3, r2
 8004840:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	689a      	ldr	r2, [r3, #8]
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	fa02 f303 	lsl.w	r3, r2, r3
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	4313      	orrs	r3, r2
 8004852:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f003 0303 	and.w	r3, r3, #3
 8004862:	2b02      	cmp	r3, #2
 8004864:	d123      	bne.n	80048ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	08da      	lsrs	r2, r3, #3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	3208      	adds	r2, #8
 800486e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004872:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	f003 0307 	and.w	r3, r3, #7
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	220f      	movs	r2, #15
 800487e:	fa02 f303 	lsl.w	r3, r2, r3
 8004882:	43db      	mvns	r3, r3
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	4013      	ands	r3, r2
 8004888:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	691a      	ldr	r2, [r3, #16]
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	f003 0307 	and.w	r3, r3, #7
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	fa02 f303 	lsl.w	r3, r2, r3
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	4313      	orrs	r3, r2
 800489e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	08da      	lsrs	r2, r3, #3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	3208      	adds	r2, #8
 80048a8:	6939      	ldr	r1, [r7, #16]
 80048aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	005b      	lsls	r3, r3, #1
 80048b8:	2203      	movs	r2, #3
 80048ba:	fa02 f303 	lsl.w	r3, r2, r3
 80048be:	43db      	mvns	r3, r3
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	4013      	ands	r3, r2
 80048c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f003 0203 	and.w	r2, r3, #3
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	fa02 f303 	lsl.w	r3, r2, r3
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	4313      	orrs	r3, r2
 80048da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f000 80b2 	beq.w	8004a54 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048f0:	4b61      	ldr	r3, [pc, #388]	; (8004a78 <HAL_GPIO_Init+0x2fc>)
 80048f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048f4:	4a60      	ldr	r2, [pc, #384]	; (8004a78 <HAL_GPIO_Init+0x2fc>)
 80048f6:	f043 0301 	orr.w	r3, r3, #1
 80048fa:	6613      	str	r3, [r2, #96]	; 0x60
 80048fc:	4b5e      	ldr	r3, [pc, #376]	; (8004a78 <HAL_GPIO_Init+0x2fc>)
 80048fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004900:	f003 0301 	and.w	r3, r3, #1
 8004904:	60bb      	str	r3, [r7, #8]
 8004906:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004908:	4a5c      	ldr	r2, [pc, #368]	; (8004a7c <HAL_GPIO_Init+0x300>)
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	089b      	lsrs	r3, r3, #2
 800490e:	3302      	adds	r3, #2
 8004910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004914:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	f003 0303 	and.w	r3, r3, #3
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	220f      	movs	r2, #15
 8004920:	fa02 f303 	lsl.w	r3, r2, r3
 8004924:	43db      	mvns	r3, r3
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	4013      	ands	r3, r2
 800492a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004932:	d02b      	beq.n	800498c <HAL_GPIO_Init+0x210>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a52      	ldr	r2, [pc, #328]	; (8004a80 <HAL_GPIO_Init+0x304>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d025      	beq.n	8004988 <HAL_GPIO_Init+0x20c>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a51      	ldr	r2, [pc, #324]	; (8004a84 <HAL_GPIO_Init+0x308>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d01f      	beq.n	8004984 <HAL_GPIO_Init+0x208>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a50      	ldr	r2, [pc, #320]	; (8004a88 <HAL_GPIO_Init+0x30c>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d019      	beq.n	8004980 <HAL_GPIO_Init+0x204>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a4f      	ldr	r2, [pc, #316]	; (8004a8c <HAL_GPIO_Init+0x310>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d013      	beq.n	800497c <HAL_GPIO_Init+0x200>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a4e      	ldr	r2, [pc, #312]	; (8004a90 <HAL_GPIO_Init+0x314>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d00d      	beq.n	8004978 <HAL_GPIO_Init+0x1fc>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a4d      	ldr	r2, [pc, #308]	; (8004a94 <HAL_GPIO_Init+0x318>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d007      	beq.n	8004974 <HAL_GPIO_Init+0x1f8>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a4c      	ldr	r2, [pc, #304]	; (8004a98 <HAL_GPIO_Init+0x31c>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d101      	bne.n	8004970 <HAL_GPIO_Init+0x1f4>
 800496c:	2307      	movs	r3, #7
 800496e:	e00e      	b.n	800498e <HAL_GPIO_Init+0x212>
 8004970:	2308      	movs	r3, #8
 8004972:	e00c      	b.n	800498e <HAL_GPIO_Init+0x212>
 8004974:	2306      	movs	r3, #6
 8004976:	e00a      	b.n	800498e <HAL_GPIO_Init+0x212>
 8004978:	2305      	movs	r3, #5
 800497a:	e008      	b.n	800498e <HAL_GPIO_Init+0x212>
 800497c:	2304      	movs	r3, #4
 800497e:	e006      	b.n	800498e <HAL_GPIO_Init+0x212>
 8004980:	2303      	movs	r3, #3
 8004982:	e004      	b.n	800498e <HAL_GPIO_Init+0x212>
 8004984:	2302      	movs	r3, #2
 8004986:	e002      	b.n	800498e <HAL_GPIO_Init+0x212>
 8004988:	2301      	movs	r3, #1
 800498a:	e000      	b.n	800498e <HAL_GPIO_Init+0x212>
 800498c:	2300      	movs	r3, #0
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	f002 0203 	and.w	r2, r2, #3
 8004994:	0092      	lsls	r2, r2, #2
 8004996:	4093      	lsls	r3, r2
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	4313      	orrs	r3, r2
 800499c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800499e:	4937      	ldr	r1, [pc, #220]	; (8004a7c <HAL_GPIO_Init+0x300>)
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	089b      	lsrs	r3, r3, #2
 80049a4:	3302      	adds	r3, #2
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80049ac:	4b3b      	ldr	r3, [pc, #236]	; (8004a9c <HAL_GPIO_Init+0x320>)
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	43db      	mvns	r3, r3
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	4013      	ands	r3, r2
 80049ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d003      	beq.n	80049d0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80049d0:	4a32      	ldr	r2, [pc, #200]	; (8004a9c <HAL_GPIO_Init+0x320>)
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80049d6:	4b31      	ldr	r3, [pc, #196]	; (8004a9c <HAL_GPIO_Init+0x320>)
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	43db      	mvns	r3, r3
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	4013      	ands	r3, r2
 80049e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d003      	beq.n	80049fa <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80049f2:	693a      	ldr	r2, [r7, #16]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80049fa:	4a28      	ldr	r2, [pc, #160]	; (8004a9c <HAL_GPIO_Init+0x320>)
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004a00:	4b26      	ldr	r3, [pc, #152]	; (8004a9c <HAL_GPIO_Init+0x320>)
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	43db      	mvns	r3, r3
 8004a0a:	693a      	ldr	r2, [r7, #16]
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d003      	beq.n	8004a24 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004a1c:	693a      	ldr	r2, [r7, #16]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004a24:	4a1d      	ldr	r2, [pc, #116]	; (8004a9c <HAL_GPIO_Init+0x320>)
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004a2a:	4b1c      	ldr	r3, [pc, #112]	; (8004a9c <HAL_GPIO_Init+0x320>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	43db      	mvns	r3, r3
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	4013      	ands	r3, r2
 8004a38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d003      	beq.n	8004a4e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004a4e:	4a13      	ldr	r2, [pc, #76]	; (8004a9c <HAL_GPIO_Init+0x320>)
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	3301      	adds	r3, #1
 8004a58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	fa22 f303 	lsr.w	r3, r2, r3
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	f47f ae91 	bne.w	800478c <HAL_GPIO_Init+0x10>
  }
}
 8004a6a:	bf00      	nop
 8004a6c:	bf00      	nop
 8004a6e:	371c      	adds	r7, #28
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr
 8004a78:	40021000 	.word	0x40021000
 8004a7c:	40010000 	.word	0x40010000
 8004a80:	48000400 	.word	0x48000400
 8004a84:	48000800 	.word	0x48000800
 8004a88:	48000c00 	.word	0x48000c00
 8004a8c:	48001000 	.word	0x48001000
 8004a90:	48001400 	.word	0x48001400
 8004a94:	48001800 	.word	0x48001800
 8004a98:	48001c00 	.word	0x48001c00
 8004a9c:	40010400 	.word	0x40010400

08004aa0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	691a      	ldr	r2, [r3, #16]
 8004ab0:	887b      	ldrh	r3, [r7, #2]
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d002      	beq.n	8004abe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	73fb      	strb	r3, [r7, #15]
 8004abc:	e001      	b.n	8004ac2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3714      	adds	r7, #20
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	460b      	mov	r3, r1
 8004ada:	807b      	strh	r3, [r7, #2]
 8004adc:	4613      	mov	r3, r2
 8004ade:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ae0:	787b      	ldrb	r3, [r7, #1]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d003      	beq.n	8004aee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ae6:	887a      	ldrh	r2, [r7, #2]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004aec:	e002      	b.n	8004af4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004aee:	887a      	ldrh	r2, [r7, #2]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	460b      	mov	r3, r1
 8004b0a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	695b      	ldr	r3, [r3, #20]
 8004b10:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004b12:	887a      	ldrh	r2, [r7, #2]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	4013      	ands	r3, r2
 8004b18:	041a      	lsls	r2, r3, #16
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	43d9      	mvns	r1, r3
 8004b1e:	887b      	ldrh	r3, [r7, #2]
 8004b20:	400b      	ands	r3, r1
 8004b22:	431a      	orrs	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	619a      	str	r2, [r3, #24]
}
 8004b28:	bf00      	nop
 8004b2a:	3714      	adds	r7, #20
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004b34:	b480      	push	{r7}
 8004b36:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b38:	4b05      	ldr	r3, [pc, #20]	; (8004b50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a04      	ldr	r2, [pc, #16]	; (8004b50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004b3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b42:	6013      	str	r3, [r2, #0]
}
 8004b44:	bf00      	nop
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	40007000 	.word	0x40007000

08004b54 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004b54:	b480      	push	{r7}
 8004b56:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b58:	4b0d      	ldr	r3, [pc, #52]	; (8004b90 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b64:	d102      	bne.n	8004b6c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004b66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b6a:	e00b      	b.n	8004b84 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004b6c:	4b08      	ldr	r3, [pc, #32]	; (8004b90 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b7a:	d102      	bne.n	8004b82 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004b7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b80:	e000      	b.n	8004b84 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004b82:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	40007000 	.word	0x40007000

08004b94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d141      	bne.n	8004c26 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ba2:	4b4b      	ldr	r3, [pc, #300]	; (8004cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004baa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bae:	d131      	bne.n	8004c14 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bb0:	4b47      	ldr	r3, [pc, #284]	; (8004cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bb6:	4a46      	ldr	r2, [pc, #280]	; (8004cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bbc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004bc0:	4b43      	ldr	r3, [pc, #268]	; (8004cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004bc8:	4a41      	ldr	r2, [pc, #260]	; (8004cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004bce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004bd0:	4b40      	ldr	r3, [pc, #256]	; (8004cd4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2232      	movs	r2, #50	; 0x32
 8004bd6:	fb02 f303 	mul.w	r3, r2, r3
 8004bda:	4a3f      	ldr	r2, [pc, #252]	; (8004cd8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8004be0:	0c9b      	lsrs	r3, r3, #18
 8004be2:	3301      	adds	r3, #1
 8004be4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004be6:	e002      	b.n	8004bee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	3b01      	subs	r3, #1
 8004bec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bee:	4b38      	ldr	r3, [pc, #224]	; (8004cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bfa:	d102      	bne.n	8004c02 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1f2      	bne.n	8004be8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c02:	4b33      	ldr	r3, [pc, #204]	; (8004cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c0e:	d158      	bne.n	8004cc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e057      	b.n	8004cc4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c14:	4b2e      	ldr	r3, [pc, #184]	; (8004cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c1a:	4a2d      	ldr	r2, [pc, #180]	; (8004cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004c24:	e04d      	b.n	8004cc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c2c:	d141      	bne.n	8004cb2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c2e:	4b28      	ldr	r3, [pc, #160]	; (8004cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c3a:	d131      	bne.n	8004ca0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c3c:	4b24      	ldr	r3, [pc, #144]	; (8004cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c42:	4a23      	ldr	r2, [pc, #140]	; (8004cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c48:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c4c:	4b20      	ldr	r3, [pc, #128]	; (8004cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004c54:	4a1e      	ldr	r2, [pc, #120]	; (8004cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c5a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004c5c:	4b1d      	ldr	r3, [pc, #116]	; (8004cd4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2232      	movs	r2, #50	; 0x32
 8004c62:	fb02 f303 	mul.w	r3, r2, r3
 8004c66:	4a1c      	ldr	r2, [pc, #112]	; (8004cd8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004c68:	fba2 2303 	umull	r2, r3, r2, r3
 8004c6c:	0c9b      	lsrs	r3, r3, #18
 8004c6e:	3301      	adds	r3, #1
 8004c70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c72:	e002      	b.n	8004c7a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	3b01      	subs	r3, #1
 8004c78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c7a:	4b15      	ldr	r3, [pc, #84]	; (8004cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c86:	d102      	bne.n	8004c8e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1f2      	bne.n	8004c74 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c8e:	4b10      	ldr	r3, [pc, #64]	; (8004cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c9a:	d112      	bne.n	8004cc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e011      	b.n	8004cc4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ca0:	4b0b      	ldr	r3, [pc, #44]	; (8004cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ca6:	4a0a      	ldr	r2, [pc, #40]	; (8004cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004cb0:	e007      	b.n	8004cc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004cb2:	4b07      	ldr	r3, [pc, #28]	; (8004cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004cba:	4a05      	ldr	r2, [pc, #20]	; (8004cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cbc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004cc0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3714      	adds	r7, #20
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr
 8004cd0:	40007000 	.word	0x40007000
 8004cd4:	20000074 	.word	0x20000074
 8004cd8:	431bde83 	.word	0x431bde83

08004cdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b08a      	sub	sp, #40	; 0x28
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d102      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	f000 bc68 	b.w	80055c0 <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cf0:	4b97      	ldr	r3, [pc, #604]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f003 030c 	and.w	r3, r3, #12
 8004cf8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cfa:	4b95      	ldr	r3, [pc, #596]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	f003 0303 	and.w	r3, r3, #3
 8004d02:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0310 	and.w	r3, r3, #16
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f000 80e6 	beq.w	8004ede <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d12:	6a3b      	ldr	r3, [r7, #32]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d007      	beq.n	8004d28 <HAL_RCC_OscConfig+0x4c>
 8004d18:	6a3b      	ldr	r3, [r7, #32]
 8004d1a:	2b0c      	cmp	r3, #12
 8004d1c:	f040 808d 	bne.w	8004e3a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	f040 8089 	bne.w	8004e3a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d28:	4b89      	ldr	r3, [pc, #548]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0302 	and.w	r3, r3, #2
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d006      	beq.n	8004d42 <HAL_RCC_OscConfig+0x66>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	69db      	ldr	r3, [r3, #28]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d102      	bne.n	8004d42 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	f000 bc3f 	b.w	80055c0 <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d46:	4b82      	ldr	r3, [pc, #520]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0308 	and.w	r3, r3, #8
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d004      	beq.n	8004d5c <HAL_RCC_OscConfig+0x80>
 8004d52:	4b7f      	ldr	r3, [pc, #508]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d5a:	e005      	b.n	8004d68 <HAL_RCC_OscConfig+0x8c>
 8004d5c:	4b7c      	ldr	r3, [pc, #496]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004d5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d62:	091b      	lsrs	r3, r3, #4
 8004d64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d224      	bcs.n	8004db6 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d70:	4618      	mov	r0, r3
 8004d72:	f000 fe2d 	bl	80059d0 <RCC_SetFlashLatencyFromMSIRange>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d002      	beq.n	8004d82 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	f000 bc1f 	b.w	80055c0 <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d82:	4b73      	ldr	r3, [pc, #460]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a72      	ldr	r2, [pc, #456]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004d88:	f043 0308 	orr.w	r3, r3, #8
 8004d8c:	6013      	str	r3, [r2, #0]
 8004d8e:	4b70      	ldr	r3, [pc, #448]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9a:	496d      	ldr	r1, [pc, #436]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004da0:	4b6b      	ldr	r3, [pc, #428]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	021b      	lsls	r3, r3, #8
 8004dae:	4968      	ldr	r1, [pc, #416]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	604b      	str	r3, [r1, #4]
 8004db4:	e025      	b.n	8004e02 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004db6:	4b66      	ldr	r3, [pc, #408]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a65      	ldr	r2, [pc, #404]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004dbc:	f043 0308 	orr.w	r3, r3, #8
 8004dc0:	6013      	str	r3, [r2, #0]
 8004dc2:	4b63      	ldr	r3, [pc, #396]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dce:	4960      	ldr	r1, [pc, #384]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004dd4:	4b5e      	ldr	r3, [pc, #376]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a1b      	ldr	r3, [r3, #32]
 8004de0:	021b      	lsls	r3, r3, #8
 8004de2:	495b      	ldr	r1, [pc, #364]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004de8:	6a3b      	ldr	r3, [r7, #32]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d109      	bne.n	8004e02 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df2:	4618      	mov	r0, r3
 8004df4:	f000 fdec 	bl	80059d0 <RCC_SetFlashLatencyFromMSIRange>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d001      	beq.n	8004e02 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e3de      	b.n	80055c0 <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e02:	f000 fd21 	bl	8005848 <HAL_RCC_GetSysClockFreq>
 8004e06:	4602      	mov	r2, r0
 8004e08:	4b51      	ldr	r3, [pc, #324]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	091b      	lsrs	r3, r3, #4
 8004e0e:	f003 030f 	and.w	r3, r3, #15
 8004e12:	4950      	ldr	r1, [pc, #320]	; (8004f54 <HAL_RCC_OscConfig+0x278>)
 8004e14:	5ccb      	ldrb	r3, [r1, r3]
 8004e16:	f003 031f 	and.w	r3, r3, #31
 8004e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e1e:	4a4e      	ldr	r2, [pc, #312]	; (8004f58 <HAL_RCC_OscConfig+0x27c>)
 8004e20:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004e22:	4b4e      	ldr	r3, [pc, #312]	; (8004f5c <HAL_RCC_OscConfig+0x280>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7fe ffe8 	bl	8003dfc <HAL_InitTick>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8004e30:	7dfb      	ldrb	r3, [r7, #23]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d052      	beq.n	8004edc <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8004e36:	7dfb      	ldrb	r3, [r7, #23]
 8004e38:	e3c2      	b.n	80055c0 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	69db      	ldr	r3, [r3, #28]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d032      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004e42:	4b43      	ldr	r3, [pc, #268]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a42      	ldr	r2, [pc, #264]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004e48:	f043 0301 	orr.w	r3, r3, #1
 8004e4c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004e4e:	f7ff f825 	bl	8003e9c <HAL_GetTick>
 8004e52:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e54:	e008      	b.n	8004e68 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e56:	f7ff f821 	bl	8003e9c <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d901      	bls.n	8004e68 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e3ab      	b.n	80055c0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e68:	4b39      	ldr	r3, [pc, #228]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0302 	and.w	r3, r3, #2
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d0f0      	beq.n	8004e56 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e74:	4b36      	ldr	r3, [pc, #216]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a35      	ldr	r2, [pc, #212]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004e7a:	f043 0308 	orr.w	r3, r3, #8
 8004e7e:	6013      	str	r3, [r2, #0]
 8004e80:	4b33      	ldr	r3, [pc, #204]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8c:	4930      	ldr	r1, [pc, #192]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e92:	4b2f      	ldr	r3, [pc, #188]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	021b      	lsls	r3, r3, #8
 8004ea0:	492b      	ldr	r1, [pc, #172]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	604b      	str	r3, [r1, #4]
 8004ea6:	e01a      	b.n	8004ede <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004ea8:	4b29      	ldr	r3, [pc, #164]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a28      	ldr	r2, [pc, #160]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004eae:	f023 0301 	bic.w	r3, r3, #1
 8004eb2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004eb4:	f7fe fff2 	bl	8003e9c <HAL_GetTick>
 8004eb8:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004eba:	e008      	b.n	8004ece <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ebc:	f7fe ffee 	bl	8003e9c <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e378      	b.n	80055c0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004ece:	4b20      	ldr	r3, [pc, #128]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1f0      	bne.n	8004ebc <HAL_RCC_OscConfig+0x1e0>
 8004eda:	e000      	b.n	8004ede <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004edc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d073      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004eea:	6a3b      	ldr	r3, [r7, #32]
 8004eec:	2b08      	cmp	r3, #8
 8004eee:	d005      	beq.n	8004efc <HAL_RCC_OscConfig+0x220>
 8004ef0:	6a3b      	ldr	r3, [r7, #32]
 8004ef2:	2b0c      	cmp	r3, #12
 8004ef4:	d10e      	bne.n	8004f14 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	2b03      	cmp	r3, #3
 8004efa:	d10b      	bne.n	8004f14 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004efc:	4b14      	ldr	r3, [pc, #80]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d063      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x2f4>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d15f      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e355      	b.n	80055c0 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f1c:	d106      	bne.n	8004f2c <HAL_RCC_OscConfig+0x250>
 8004f1e:	4b0c      	ldr	r3, [pc, #48]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a0b      	ldr	r2, [pc, #44]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f28:	6013      	str	r3, [r2, #0]
 8004f2a:	e025      	b.n	8004f78 <HAL_RCC_OscConfig+0x29c>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f34:	d114      	bne.n	8004f60 <HAL_RCC_OscConfig+0x284>
 8004f36:	4b06      	ldr	r3, [pc, #24]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a05      	ldr	r2, [pc, #20]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004f3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f40:	6013      	str	r3, [r2, #0]
 8004f42:	4b03      	ldr	r3, [pc, #12]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a02      	ldr	r2, [pc, #8]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f4c:	6013      	str	r3, [r2, #0]
 8004f4e:	e013      	b.n	8004f78 <HAL_RCC_OscConfig+0x29c>
 8004f50:	40021000 	.word	0x40021000
 8004f54:	0800f4a8 	.word	0x0800f4a8
 8004f58:	20000074 	.word	0x20000074
 8004f5c:	20000078 	.word	0x20000078
 8004f60:	4b8f      	ldr	r3, [pc, #572]	; (80051a0 <HAL_RCC_OscConfig+0x4c4>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a8e      	ldr	r2, [pc, #568]	; (80051a0 <HAL_RCC_OscConfig+0x4c4>)
 8004f66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f6a:	6013      	str	r3, [r2, #0]
 8004f6c:	4b8c      	ldr	r3, [pc, #560]	; (80051a0 <HAL_RCC_OscConfig+0x4c4>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a8b      	ldr	r2, [pc, #556]	; (80051a0 <HAL_RCC_OscConfig+0x4c4>)
 8004f72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d013      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f80:	f7fe ff8c 	bl	8003e9c <HAL_GetTick>
 8004f84:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f86:	e008      	b.n	8004f9a <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f88:	f7fe ff88 	bl	8003e9c <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	2b64      	cmp	r3, #100	; 0x64
 8004f94:	d901      	bls.n	8004f9a <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e312      	b.n	80055c0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f9a:	4b81      	ldr	r3, [pc, #516]	; (80051a0 <HAL_RCC_OscConfig+0x4c4>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d0f0      	beq.n	8004f88 <HAL_RCC_OscConfig+0x2ac>
 8004fa6:	e014      	b.n	8004fd2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa8:	f7fe ff78 	bl	8003e9c <HAL_GetTick>
 8004fac:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004fae:	e008      	b.n	8004fc2 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fb0:	f7fe ff74 	bl	8003e9c <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	2b64      	cmp	r3, #100	; 0x64
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e2fe      	b.n	80055c0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004fc2:	4b77      	ldr	r3, [pc, #476]	; (80051a0 <HAL_RCC_OscConfig+0x4c4>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1f0      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x2d4>
 8004fce:	e000      	b.n	8004fd2 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d060      	beq.n	80050a0 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004fde:	6a3b      	ldr	r3, [r7, #32]
 8004fe0:	2b04      	cmp	r3, #4
 8004fe2:	d005      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x314>
 8004fe4:	6a3b      	ldr	r3, [r7, #32]
 8004fe6:	2b0c      	cmp	r3, #12
 8004fe8:	d119      	bne.n	800501e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d116      	bne.n	800501e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ff0:	4b6b      	ldr	r3, [pc, #428]	; (80051a0 <HAL_RCC_OscConfig+0x4c4>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d005      	beq.n	8005008 <HAL_RCC_OscConfig+0x32c>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d101      	bne.n	8005008 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e2db      	b.n	80055c0 <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005008:	4b65      	ldr	r3, [pc, #404]	; (80051a0 <HAL_RCC_OscConfig+0x4c4>)
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	061b      	lsls	r3, r3, #24
 8005016:	4962      	ldr	r1, [pc, #392]	; (80051a0 <HAL_RCC_OscConfig+0x4c4>)
 8005018:	4313      	orrs	r3, r2
 800501a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800501c:	e040      	b.n	80050a0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d023      	beq.n	800506e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005026:	4b5e      	ldr	r3, [pc, #376]	; (80051a0 <HAL_RCC_OscConfig+0x4c4>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a5d      	ldr	r2, [pc, #372]	; (80051a0 <HAL_RCC_OscConfig+0x4c4>)
 800502c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005030:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005032:	f7fe ff33 	bl	8003e9c <HAL_GetTick>
 8005036:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005038:	e008      	b.n	800504c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800503a:	f7fe ff2f 	bl	8003e9c <HAL_GetTick>
 800503e:	4602      	mov	r2, r0
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	2b02      	cmp	r3, #2
 8005046:	d901      	bls.n	800504c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e2b9      	b.n	80055c0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800504c:	4b54      	ldr	r3, [pc, #336]	; (80051a0 <HAL_RCC_OscConfig+0x4c4>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005054:	2b00      	cmp	r3, #0
 8005056:	d0f0      	beq.n	800503a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005058:	4b51      	ldr	r3, [pc, #324]	; (80051a0 <HAL_RCC_OscConfig+0x4c4>)
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	061b      	lsls	r3, r3, #24
 8005066:	494e      	ldr	r1, [pc, #312]	; (80051a0 <HAL_RCC_OscConfig+0x4c4>)
 8005068:	4313      	orrs	r3, r2
 800506a:	604b      	str	r3, [r1, #4]
 800506c:	e018      	b.n	80050a0 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800506e:	4b4c      	ldr	r3, [pc, #304]	; (80051a0 <HAL_RCC_OscConfig+0x4c4>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a4b      	ldr	r2, [pc, #300]	; (80051a0 <HAL_RCC_OscConfig+0x4c4>)
 8005074:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005078:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800507a:	f7fe ff0f 	bl	8003e9c <HAL_GetTick>
 800507e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005080:	e008      	b.n	8005094 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005082:	f7fe ff0b 	bl	8003e9c <HAL_GetTick>
 8005086:	4602      	mov	r2, r0
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	2b02      	cmp	r3, #2
 800508e:	d901      	bls.n	8005094 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	e295      	b.n	80055c0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005094:	4b42      	ldr	r3, [pc, #264]	; (80051a0 <HAL_RCC_OscConfig+0x4c4>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1f0      	bne.n	8005082 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0308 	and.w	r3, r3, #8
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f000 8082 	beq.w	80051b2 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d05f      	beq.n	8005176 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80050b6:	4b3a      	ldr	r3, [pc, #232]	; (80051a0 <HAL_RCC_OscConfig+0x4c4>)
 80050b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050bc:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	699a      	ldr	r2, [r3, #24]
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	f003 0310 	and.w	r3, r3, #16
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d037      	beq.n	800513c <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d006      	beq.n	80050e4 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d101      	bne.n	80050e4 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e26d      	b.n	80055c0 <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	f003 0301 	and.w	r3, r3, #1
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d01b      	beq.n	8005126 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 80050ee:	4b2c      	ldr	r3, [pc, #176]	; (80051a0 <HAL_RCC_OscConfig+0x4c4>)
 80050f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050f4:	4a2a      	ldr	r2, [pc, #168]	; (80051a0 <HAL_RCC_OscConfig+0x4c4>)
 80050f6:	f023 0301 	bic.w	r3, r3, #1
 80050fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80050fe:	f7fe fecd 	bl	8003e9c <HAL_GetTick>
 8005102:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005104:	e008      	b.n	8005118 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005106:	f7fe fec9 	bl	8003e9c <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	2b11      	cmp	r3, #17
 8005112:	d901      	bls.n	8005118 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e253      	b.n	80055c0 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005118:	4b21      	ldr	r3, [pc, #132]	; (80051a0 <HAL_RCC_OscConfig+0x4c4>)
 800511a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1ef      	bne.n	8005106 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8005126:	4b1e      	ldr	r3, [pc, #120]	; (80051a0 <HAL_RCC_OscConfig+0x4c4>)
 8005128:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800512c:	f023 0210 	bic.w	r2, r3, #16
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	699b      	ldr	r3, [r3, #24]
 8005134:	491a      	ldr	r1, [pc, #104]	; (80051a0 <HAL_RCC_OscConfig+0x4c4>)
 8005136:	4313      	orrs	r3, r2
 8005138:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800513c:	4b18      	ldr	r3, [pc, #96]	; (80051a0 <HAL_RCC_OscConfig+0x4c4>)
 800513e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005142:	4a17      	ldr	r2, [pc, #92]	; (80051a0 <HAL_RCC_OscConfig+0x4c4>)
 8005144:	f043 0301 	orr.w	r3, r3, #1
 8005148:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800514c:	f7fe fea6 	bl	8003e9c <HAL_GetTick>
 8005150:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005152:	e008      	b.n	8005166 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005154:	f7fe fea2 	bl	8003e9c <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b11      	cmp	r3, #17
 8005160:	d901      	bls.n	8005166 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e22c      	b.n	80055c0 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005166:	4b0e      	ldr	r3, [pc, #56]	; (80051a0 <HAL_RCC_OscConfig+0x4c4>)
 8005168:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800516c:	f003 0302 	and.w	r3, r3, #2
 8005170:	2b00      	cmp	r3, #0
 8005172:	d0ef      	beq.n	8005154 <HAL_RCC_OscConfig+0x478>
 8005174:	e01d      	b.n	80051b2 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005176:	4b0a      	ldr	r3, [pc, #40]	; (80051a0 <HAL_RCC_OscConfig+0x4c4>)
 8005178:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800517c:	4a08      	ldr	r2, [pc, #32]	; (80051a0 <HAL_RCC_OscConfig+0x4c4>)
 800517e:	f023 0301 	bic.w	r3, r3, #1
 8005182:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005186:	f7fe fe89 	bl	8003e9c <HAL_GetTick>
 800518a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800518c:	e00a      	b.n	80051a4 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800518e:	f7fe fe85 	bl	8003e9c <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	2b11      	cmp	r3, #17
 800519a:	d903      	bls.n	80051a4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e20f      	b.n	80055c0 <HAL_RCC_OscConfig+0x8e4>
 80051a0:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051a4:	4b83      	ldr	r3, [pc, #524]	; (80053b4 <HAL_RCC_OscConfig+0x6d8>)
 80051a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1ed      	bne.n	800518e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0304 	and.w	r3, r3, #4
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f000 80bd 	beq.w	800533a <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051c0:	2300      	movs	r3, #0
 80051c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80051c6:	4b7b      	ldr	r3, [pc, #492]	; (80053b4 <HAL_RCC_OscConfig+0x6d8>)
 80051c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10e      	bne.n	80051f0 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051d2:	4b78      	ldr	r3, [pc, #480]	; (80053b4 <HAL_RCC_OscConfig+0x6d8>)
 80051d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051d6:	4a77      	ldr	r2, [pc, #476]	; (80053b4 <HAL_RCC_OscConfig+0x6d8>)
 80051d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051dc:	6593      	str	r3, [r2, #88]	; 0x58
 80051de:	4b75      	ldr	r3, [pc, #468]	; (80053b4 <HAL_RCC_OscConfig+0x6d8>)
 80051e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051e6:	60fb      	str	r3, [r7, #12]
 80051e8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80051ea:	2301      	movs	r3, #1
 80051ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051f0:	4b71      	ldr	r3, [pc, #452]	; (80053b8 <HAL_RCC_OscConfig+0x6dc>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d118      	bne.n	800522e <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051fc:	4b6e      	ldr	r3, [pc, #440]	; (80053b8 <HAL_RCC_OscConfig+0x6dc>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a6d      	ldr	r2, [pc, #436]	; (80053b8 <HAL_RCC_OscConfig+0x6dc>)
 8005202:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005206:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005208:	f7fe fe48 	bl	8003e9c <HAL_GetTick>
 800520c:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800520e:	e008      	b.n	8005222 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005210:	f7fe fe44 	bl	8003e9c <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	2b02      	cmp	r3, #2
 800521c:	d901      	bls.n	8005222 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e1ce      	b.n	80055c0 <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005222:	4b65      	ldr	r3, [pc, #404]	; (80053b8 <HAL_RCC_OscConfig+0x6dc>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800522a:	2b00      	cmp	r3, #0
 800522c:	d0f0      	beq.n	8005210 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f003 0301 	and.w	r3, r3, #1
 8005236:	2b00      	cmp	r3, #0
 8005238:	d02c      	beq.n	8005294 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800523a:	4b5e      	ldr	r3, [pc, #376]	; (80053b4 <HAL_RCC_OscConfig+0x6d8>)
 800523c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005240:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800524c:	4959      	ldr	r1, [pc, #356]	; (80053b4 <HAL_RCC_OscConfig+0x6d8>)
 800524e:	4313      	orrs	r3, r2
 8005250:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	f003 0304 	and.w	r3, r3, #4
 800525c:	2b00      	cmp	r3, #0
 800525e:	d010      	beq.n	8005282 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005260:	4b54      	ldr	r3, [pc, #336]	; (80053b4 <HAL_RCC_OscConfig+0x6d8>)
 8005262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005266:	4a53      	ldr	r2, [pc, #332]	; (80053b4 <HAL_RCC_OscConfig+0x6d8>)
 8005268:	f043 0304 	orr.w	r3, r3, #4
 800526c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005270:	4b50      	ldr	r3, [pc, #320]	; (80053b4 <HAL_RCC_OscConfig+0x6d8>)
 8005272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005276:	4a4f      	ldr	r2, [pc, #316]	; (80053b4 <HAL_RCC_OscConfig+0x6d8>)
 8005278:	f043 0301 	orr.w	r3, r3, #1
 800527c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005280:	e018      	b.n	80052b4 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005282:	4b4c      	ldr	r3, [pc, #304]	; (80053b4 <HAL_RCC_OscConfig+0x6d8>)
 8005284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005288:	4a4a      	ldr	r2, [pc, #296]	; (80053b4 <HAL_RCC_OscConfig+0x6d8>)
 800528a:	f043 0301 	orr.w	r3, r3, #1
 800528e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005292:	e00f      	b.n	80052b4 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005294:	4b47      	ldr	r3, [pc, #284]	; (80053b4 <HAL_RCC_OscConfig+0x6d8>)
 8005296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800529a:	4a46      	ldr	r2, [pc, #280]	; (80053b4 <HAL_RCC_OscConfig+0x6d8>)
 800529c:	f023 0301 	bic.w	r3, r3, #1
 80052a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80052a4:	4b43      	ldr	r3, [pc, #268]	; (80053b4 <HAL_RCC_OscConfig+0x6d8>)
 80052a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052aa:	4a42      	ldr	r2, [pc, #264]	; (80053b4 <HAL_RCC_OscConfig+0x6d8>)
 80052ac:	f023 0304 	bic.w	r3, r3, #4
 80052b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d016      	beq.n	80052ea <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052bc:	f7fe fdee 	bl	8003e9c <HAL_GetTick>
 80052c0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052c2:	e00a      	b.n	80052da <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052c4:	f7fe fdea 	bl	8003e9c <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d901      	bls.n	80052da <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e172      	b.n	80055c0 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052da:	4b36      	ldr	r3, [pc, #216]	; (80053b4 <HAL_RCC_OscConfig+0x6d8>)
 80052dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e0:	f003 0302 	and.w	r3, r3, #2
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d0ed      	beq.n	80052c4 <HAL_RCC_OscConfig+0x5e8>
 80052e8:	e01d      	b.n	8005326 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ea:	f7fe fdd7 	bl	8003e9c <HAL_GetTick>
 80052ee:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052f0:	e00a      	b.n	8005308 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052f2:	f7fe fdd3 	bl	8003e9c <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005300:	4293      	cmp	r3, r2
 8005302:	d901      	bls.n	8005308 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e15b      	b.n	80055c0 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005308:	4b2a      	ldr	r3, [pc, #168]	; (80053b4 <HAL_RCC_OscConfig+0x6d8>)
 800530a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800530e:	f003 0302 	and.w	r3, r3, #2
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1ed      	bne.n	80052f2 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8005316:	4b27      	ldr	r3, [pc, #156]	; (80053b4 <HAL_RCC_OscConfig+0x6d8>)
 8005318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800531c:	4a25      	ldr	r2, [pc, #148]	; (80053b4 <HAL_RCC_OscConfig+0x6d8>)
 800531e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005322:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005326:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800532a:	2b01      	cmp	r3, #1
 800532c:	d105      	bne.n	800533a <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800532e:	4b21      	ldr	r3, [pc, #132]	; (80053b4 <HAL_RCC_OscConfig+0x6d8>)
 8005330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005332:	4a20      	ldr	r2, [pc, #128]	; (80053b4 <HAL_RCC_OscConfig+0x6d8>)
 8005334:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005338:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0320 	and.w	r3, r3, #32
 8005342:	2b00      	cmp	r3, #0
 8005344:	d041      	beq.n	80053ca <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534a:	2b00      	cmp	r3, #0
 800534c:	d01c      	beq.n	8005388 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800534e:	4b19      	ldr	r3, [pc, #100]	; (80053b4 <HAL_RCC_OscConfig+0x6d8>)
 8005350:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005354:	4a17      	ldr	r2, [pc, #92]	; (80053b4 <HAL_RCC_OscConfig+0x6d8>)
 8005356:	f043 0301 	orr.w	r3, r3, #1
 800535a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800535e:	f7fe fd9d 	bl	8003e9c <HAL_GetTick>
 8005362:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005364:	e008      	b.n	8005378 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005366:	f7fe fd99 	bl	8003e9c <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	2b02      	cmp	r3, #2
 8005372:	d901      	bls.n	8005378 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e123      	b.n	80055c0 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005378:	4b0e      	ldr	r3, [pc, #56]	; (80053b4 <HAL_RCC_OscConfig+0x6d8>)
 800537a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800537e:	f003 0302 	and.w	r3, r3, #2
 8005382:	2b00      	cmp	r3, #0
 8005384:	d0ef      	beq.n	8005366 <HAL_RCC_OscConfig+0x68a>
 8005386:	e020      	b.n	80053ca <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005388:	4b0a      	ldr	r3, [pc, #40]	; (80053b4 <HAL_RCC_OscConfig+0x6d8>)
 800538a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800538e:	4a09      	ldr	r2, [pc, #36]	; (80053b4 <HAL_RCC_OscConfig+0x6d8>)
 8005390:	f023 0301 	bic.w	r3, r3, #1
 8005394:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005398:	f7fe fd80 	bl	8003e9c <HAL_GetTick>
 800539c:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800539e:	e00d      	b.n	80053bc <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053a0:	f7fe fd7c 	bl	8003e9c <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d906      	bls.n	80053bc <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e106      	b.n	80055c0 <HAL_RCC_OscConfig+0x8e4>
 80053b2:	bf00      	nop
 80053b4:	40021000 	.word	0x40021000
 80053b8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80053bc:	4b82      	ldr	r3, [pc, #520]	; (80055c8 <HAL_RCC_OscConfig+0x8ec>)
 80053be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053c2:	f003 0302 	and.w	r3, r3, #2
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1ea      	bne.n	80053a0 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	f000 80f5 	beq.w	80055be <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d8:	2b02      	cmp	r3, #2
 80053da:	f040 80cb 	bne.w	8005574 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80053de:	4b7a      	ldr	r3, [pc, #488]	; (80055c8 <HAL_RCC_OscConfig+0x8ec>)
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	f003 0203 	and.w	r2, r3, #3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d12c      	bne.n	800544c <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053fc:	3b01      	subs	r3, #1
 80053fe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005400:	429a      	cmp	r2, r3
 8005402:	d123      	bne.n	800544c <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005410:	429a      	cmp	r2, r3
 8005412:	d11b      	bne.n	800544c <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800541e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005420:	429a      	cmp	r2, r3
 8005422:	d113      	bne.n	800544c <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542e:	085b      	lsrs	r3, r3, #1
 8005430:	3b01      	subs	r3, #1
 8005432:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005434:	429a      	cmp	r2, r3
 8005436:	d109      	bne.n	800544c <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005442:	085b      	lsrs	r3, r3, #1
 8005444:	3b01      	subs	r3, #1
 8005446:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005448:	429a      	cmp	r2, r3
 800544a:	d06d      	beq.n	8005528 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800544c:	6a3b      	ldr	r3, [r7, #32]
 800544e:	2b0c      	cmp	r3, #12
 8005450:	d068      	beq.n	8005524 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005452:	4b5d      	ldr	r3, [pc, #372]	; (80055c8 <HAL_RCC_OscConfig+0x8ec>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d105      	bne.n	800546a <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800545e:	4b5a      	ldr	r3, [pc, #360]	; (80055c8 <HAL_RCC_OscConfig+0x8ec>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d001      	beq.n	800546e <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e0a8      	b.n	80055c0 <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800546e:	4b56      	ldr	r3, [pc, #344]	; (80055c8 <HAL_RCC_OscConfig+0x8ec>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a55      	ldr	r2, [pc, #340]	; (80055c8 <HAL_RCC_OscConfig+0x8ec>)
 8005474:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005478:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800547a:	f7fe fd0f 	bl	8003e9c <HAL_GetTick>
 800547e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005480:	e008      	b.n	8005494 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005482:	f7fe fd0b 	bl	8003e9c <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	2b02      	cmp	r3, #2
 800548e:	d901      	bls.n	8005494 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	e095      	b.n	80055c0 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005494:	4b4c      	ldr	r3, [pc, #304]	; (80055c8 <HAL_RCC_OscConfig+0x8ec>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1f0      	bne.n	8005482 <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054a0:	4b49      	ldr	r3, [pc, #292]	; (80055c8 <HAL_RCC_OscConfig+0x8ec>)
 80054a2:	68da      	ldr	r2, [r3, #12]
 80054a4:	4b49      	ldr	r3, [pc, #292]	; (80055cc <HAL_RCC_OscConfig+0x8f0>)
 80054a6:	4013      	ands	r3, r2
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80054b0:	3a01      	subs	r2, #1
 80054b2:	0112      	lsls	r2, r2, #4
 80054b4:	4311      	orrs	r1, r2
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80054ba:	0212      	lsls	r2, r2, #8
 80054bc:	4311      	orrs	r1, r2
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80054c2:	0852      	lsrs	r2, r2, #1
 80054c4:	3a01      	subs	r2, #1
 80054c6:	0552      	lsls	r2, r2, #21
 80054c8:	4311      	orrs	r1, r2
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80054ce:	0852      	lsrs	r2, r2, #1
 80054d0:	3a01      	subs	r2, #1
 80054d2:	0652      	lsls	r2, r2, #25
 80054d4:	4311      	orrs	r1, r2
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80054da:	06d2      	lsls	r2, r2, #27
 80054dc:	430a      	orrs	r2, r1
 80054de:	493a      	ldr	r1, [pc, #232]	; (80055c8 <HAL_RCC_OscConfig+0x8ec>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80054e4:	4b38      	ldr	r3, [pc, #224]	; (80055c8 <HAL_RCC_OscConfig+0x8ec>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a37      	ldr	r2, [pc, #220]	; (80055c8 <HAL_RCC_OscConfig+0x8ec>)
 80054ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054ee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80054f0:	4b35      	ldr	r3, [pc, #212]	; (80055c8 <HAL_RCC_OscConfig+0x8ec>)
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	4a34      	ldr	r2, [pc, #208]	; (80055c8 <HAL_RCC_OscConfig+0x8ec>)
 80054f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80054fc:	f7fe fcce 	bl	8003e9c <HAL_GetTick>
 8005500:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005502:	e008      	b.n	8005516 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005504:	f7fe fcca 	bl	8003e9c <HAL_GetTick>
 8005508:	4602      	mov	r2, r0
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	2b02      	cmp	r3, #2
 8005510:	d901      	bls.n	8005516 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e054      	b.n	80055c0 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005516:	4b2c      	ldr	r3, [pc, #176]	; (80055c8 <HAL_RCC_OscConfig+0x8ec>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d0f0      	beq.n	8005504 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005522:	e04c      	b.n	80055be <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e04b      	b.n	80055c0 <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005528:	4b27      	ldr	r3, [pc, #156]	; (80055c8 <HAL_RCC_OscConfig+0x8ec>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d144      	bne.n	80055be <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005534:	4b24      	ldr	r3, [pc, #144]	; (80055c8 <HAL_RCC_OscConfig+0x8ec>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a23      	ldr	r2, [pc, #140]	; (80055c8 <HAL_RCC_OscConfig+0x8ec>)
 800553a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800553e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005540:	4b21      	ldr	r3, [pc, #132]	; (80055c8 <HAL_RCC_OscConfig+0x8ec>)
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	4a20      	ldr	r2, [pc, #128]	; (80055c8 <HAL_RCC_OscConfig+0x8ec>)
 8005546:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800554a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800554c:	f7fe fca6 	bl	8003e9c <HAL_GetTick>
 8005550:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005552:	e008      	b.n	8005566 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005554:	f7fe fca2 	bl	8003e9c <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	2b02      	cmp	r3, #2
 8005560:	d901      	bls.n	8005566 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e02c      	b.n	80055c0 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005566:	4b18      	ldr	r3, [pc, #96]	; (80055c8 <HAL_RCC_OscConfig+0x8ec>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d0f0      	beq.n	8005554 <HAL_RCC_OscConfig+0x878>
 8005572:	e024      	b.n	80055be <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005574:	6a3b      	ldr	r3, [r7, #32]
 8005576:	2b0c      	cmp	r3, #12
 8005578:	d01f      	beq.n	80055ba <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800557a:	4b13      	ldr	r3, [pc, #76]	; (80055c8 <HAL_RCC_OscConfig+0x8ec>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a12      	ldr	r2, [pc, #72]	; (80055c8 <HAL_RCC_OscConfig+0x8ec>)
 8005580:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005584:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005586:	f7fe fc89 	bl	8003e9c <HAL_GetTick>
 800558a:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800558c:	e008      	b.n	80055a0 <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800558e:	f7fe fc85 	bl	8003e9c <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	2b02      	cmp	r3, #2
 800559a:	d901      	bls.n	80055a0 <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e00f      	b.n	80055c0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055a0:	4b09      	ldr	r3, [pc, #36]	; (80055c8 <HAL_RCC_OscConfig+0x8ec>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d1f0      	bne.n	800558e <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80055ac:	4b06      	ldr	r3, [pc, #24]	; (80055c8 <HAL_RCC_OscConfig+0x8ec>)
 80055ae:	68da      	ldr	r2, [r3, #12]
 80055b0:	4905      	ldr	r1, [pc, #20]	; (80055c8 <HAL_RCC_OscConfig+0x8ec>)
 80055b2:	4b07      	ldr	r3, [pc, #28]	; (80055d0 <HAL_RCC_OscConfig+0x8f4>)
 80055b4:	4013      	ands	r3, r2
 80055b6:	60cb      	str	r3, [r1, #12]
 80055b8:	e001      	b.n	80055be <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e000      	b.n	80055c0 <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3728      	adds	r7, #40	; 0x28
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	40021000 	.word	0x40021000
 80055cc:	019d800c 	.word	0x019d800c
 80055d0:	feeefffc 	.word	0xfeeefffc

080055d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80055de:	2300      	movs	r3, #0
 80055e0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d101      	bne.n	80055ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e11d      	b.n	8005828 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055ec:	4b90      	ldr	r3, [pc, #576]	; (8005830 <HAL_RCC_ClockConfig+0x25c>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 030f 	and.w	r3, r3, #15
 80055f4:	683a      	ldr	r2, [r7, #0]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d910      	bls.n	800561c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055fa:	4b8d      	ldr	r3, [pc, #564]	; (8005830 <HAL_RCC_ClockConfig+0x25c>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f023 020f 	bic.w	r2, r3, #15
 8005602:	498b      	ldr	r1, [pc, #556]	; (8005830 <HAL_RCC_ClockConfig+0x25c>)
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	4313      	orrs	r3, r2
 8005608:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800560a:	4b89      	ldr	r3, [pc, #548]	; (8005830 <HAL_RCC_ClockConfig+0x25c>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 030f 	and.w	r3, r3, #15
 8005612:	683a      	ldr	r2, [r7, #0]
 8005614:	429a      	cmp	r2, r3
 8005616:	d001      	beq.n	800561c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e105      	b.n	8005828 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0302 	and.w	r3, r3, #2
 8005624:	2b00      	cmp	r3, #0
 8005626:	d010      	beq.n	800564a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	689a      	ldr	r2, [r3, #8]
 800562c:	4b81      	ldr	r3, [pc, #516]	; (8005834 <HAL_RCC_ClockConfig+0x260>)
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005634:	429a      	cmp	r2, r3
 8005636:	d908      	bls.n	800564a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005638:	4b7e      	ldr	r3, [pc, #504]	; (8005834 <HAL_RCC_ClockConfig+0x260>)
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	497b      	ldr	r1, [pc, #492]	; (8005834 <HAL_RCC_ClockConfig+0x260>)
 8005646:	4313      	orrs	r3, r2
 8005648:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	2b00      	cmp	r3, #0
 8005654:	d079      	beq.n	800574a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	2b03      	cmp	r3, #3
 800565c:	d11e      	bne.n	800569c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800565e:	4b75      	ldr	r3, [pc, #468]	; (8005834 <HAL_RCC_ClockConfig+0x260>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d101      	bne.n	800566e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e0dc      	b.n	8005828 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800566e:	f000 fa09 	bl	8005a84 <RCC_GetSysClockFreqFromPLLSource>
 8005672:	4603      	mov	r3, r0
 8005674:	4a70      	ldr	r2, [pc, #448]	; (8005838 <HAL_RCC_ClockConfig+0x264>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d946      	bls.n	8005708 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800567a:	4b6e      	ldr	r3, [pc, #440]	; (8005834 <HAL_RCC_ClockConfig+0x260>)
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d140      	bne.n	8005708 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005686:	4b6b      	ldr	r3, [pc, #428]	; (8005834 <HAL_RCC_ClockConfig+0x260>)
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800568e:	4a69      	ldr	r2, [pc, #420]	; (8005834 <HAL_RCC_ClockConfig+0x260>)
 8005690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005694:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005696:	2380      	movs	r3, #128	; 0x80
 8005698:	617b      	str	r3, [r7, #20]
 800569a:	e035      	b.n	8005708 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d107      	bne.n	80056b4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056a4:	4b63      	ldr	r3, [pc, #396]	; (8005834 <HAL_RCC_ClockConfig+0x260>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d115      	bne.n	80056dc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e0b9      	b.n	8005828 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d107      	bne.n	80056cc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80056bc:	4b5d      	ldr	r3, [pc, #372]	; (8005834 <HAL_RCC_ClockConfig+0x260>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0302 	and.w	r3, r3, #2
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d109      	bne.n	80056dc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e0ad      	b.n	8005828 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056cc:	4b59      	ldr	r3, [pc, #356]	; (8005834 <HAL_RCC_ClockConfig+0x260>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d101      	bne.n	80056dc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e0a5      	b.n	8005828 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80056dc:	f000 f8b4 	bl	8005848 <HAL_RCC_GetSysClockFreq>
 80056e0:	4603      	mov	r3, r0
 80056e2:	4a55      	ldr	r2, [pc, #340]	; (8005838 <HAL_RCC_ClockConfig+0x264>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d90f      	bls.n	8005708 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80056e8:	4b52      	ldr	r3, [pc, #328]	; (8005834 <HAL_RCC_ClockConfig+0x260>)
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d109      	bne.n	8005708 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80056f4:	4b4f      	ldr	r3, [pc, #316]	; (8005834 <HAL_RCC_ClockConfig+0x260>)
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056fc:	4a4d      	ldr	r2, [pc, #308]	; (8005834 <HAL_RCC_ClockConfig+0x260>)
 80056fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005702:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005704:	2380      	movs	r3, #128	; 0x80
 8005706:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005708:	4b4a      	ldr	r3, [pc, #296]	; (8005834 <HAL_RCC_ClockConfig+0x260>)
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	f023 0203 	bic.w	r2, r3, #3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	4947      	ldr	r1, [pc, #284]	; (8005834 <HAL_RCC_ClockConfig+0x260>)
 8005716:	4313      	orrs	r3, r2
 8005718:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800571a:	f7fe fbbf 	bl	8003e9c <HAL_GetTick>
 800571e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005720:	e00a      	b.n	8005738 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005722:	f7fe fbbb 	bl	8003e9c <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005730:	4293      	cmp	r3, r2
 8005732:	d901      	bls.n	8005738 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e077      	b.n	8005828 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005738:	4b3e      	ldr	r3, [pc, #248]	; (8005834 <HAL_RCC_ClockConfig+0x260>)
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f003 020c 	and.w	r2, r3, #12
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	429a      	cmp	r2, r3
 8005748:	d1eb      	bne.n	8005722 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	2b80      	cmp	r3, #128	; 0x80
 800574e:	d105      	bne.n	800575c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005750:	4b38      	ldr	r3, [pc, #224]	; (8005834 <HAL_RCC_ClockConfig+0x260>)
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	4a37      	ldr	r2, [pc, #220]	; (8005834 <HAL_RCC_ClockConfig+0x260>)
 8005756:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800575a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0302 	and.w	r3, r3, #2
 8005764:	2b00      	cmp	r3, #0
 8005766:	d010      	beq.n	800578a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	689a      	ldr	r2, [r3, #8]
 800576c:	4b31      	ldr	r3, [pc, #196]	; (8005834 <HAL_RCC_ClockConfig+0x260>)
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005774:	429a      	cmp	r2, r3
 8005776:	d208      	bcs.n	800578a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005778:	4b2e      	ldr	r3, [pc, #184]	; (8005834 <HAL_RCC_ClockConfig+0x260>)
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	492b      	ldr	r1, [pc, #172]	; (8005834 <HAL_RCC_ClockConfig+0x260>)
 8005786:	4313      	orrs	r3, r2
 8005788:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800578a:	4b29      	ldr	r3, [pc, #164]	; (8005830 <HAL_RCC_ClockConfig+0x25c>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 030f 	and.w	r3, r3, #15
 8005792:	683a      	ldr	r2, [r7, #0]
 8005794:	429a      	cmp	r2, r3
 8005796:	d210      	bcs.n	80057ba <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005798:	4b25      	ldr	r3, [pc, #148]	; (8005830 <HAL_RCC_ClockConfig+0x25c>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f023 020f 	bic.w	r2, r3, #15
 80057a0:	4923      	ldr	r1, [pc, #140]	; (8005830 <HAL_RCC_ClockConfig+0x25c>)
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057a8:	4b21      	ldr	r3, [pc, #132]	; (8005830 <HAL_RCC_ClockConfig+0x25c>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 030f 	and.w	r3, r3, #15
 80057b0:	683a      	ldr	r2, [r7, #0]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d001      	beq.n	80057ba <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e036      	b.n	8005828 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0304 	and.w	r3, r3, #4
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d008      	beq.n	80057d8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057c6:	4b1b      	ldr	r3, [pc, #108]	; (8005834 <HAL_RCC_ClockConfig+0x260>)
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	4918      	ldr	r1, [pc, #96]	; (8005834 <HAL_RCC_ClockConfig+0x260>)
 80057d4:	4313      	orrs	r3, r2
 80057d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0308 	and.w	r3, r3, #8
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d009      	beq.n	80057f8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057e4:	4b13      	ldr	r3, [pc, #76]	; (8005834 <HAL_RCC_ClockConfig+0x260>)
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	00db      	lsls	r3, r3, #3
 80057f2:	4910      	ldr	r1, [pc, #64]	; (8005834 <HAL_RCC_ClockConfig+0x260>)
 80057f4:	4313      	orrs	r3, r2
 80057f6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80057f8:	f000 f826 	bl	8005848 <HAL_RCC_GetSysClockFreq>
 80057fc:	4602      	mov	r2, r0
 80057fe:	4b0d      	ldr	r3, [pc, #52]	; (8005834 <HAL_RCC_ClockConfig+0x260>)
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	091b      	lsrs	r3, r3, #4
 8005804:	f003 030f 	and.w	r3, r3, #15
 8005808:	490c      	ldr	r1, [pc, #48]	; (800583c <HAL_RCC_ClockConfig+0x268>)
 800580a:	5ccb      	ldrb	r3, [r1, r3]
 800580c:	f003 031f 	and.w	r3, r3, #31
 8005810:	fa22 f303 	lsr.w	r3, r2, r3
 8005814:	4a0a      	ldr	r2, [pc, #40]	; (8005840 <HAL_RCC_ClockConfig+0x26c>)
 8005816:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005818:	4b0a      	ldr	r3, [pc, #40]	; (8005844 <HAL_RCC_ClockConfig+0x270>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4618      	mov	r0, r3
 800581e:	f7fe faed 	bl	8003dfc <HAL_InitTick>
 8005822:	4603      	mov	r3, r0
 8005824:	73fb      	strb	r3, [r7, #15]

  return status;
 8005826:	7bfb      	ldrb	r3, [r7, #15]
}
 8005828:	4618      	mov	r0, r3
 800582a:	3718      	adds	r7, #24
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	40022000 	.word	0x40022000
 8005834:	40021000 	.word	0x40021000
 8005838:	04c4b400 	.word	0x04c4b400
 800583c:	0800f4a8 	.word	0x0800f4a8
 8005840:	20000074 	.word	0x20000074
 8005844:	20000078 	.word	0x20000078

08005848 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005848:	b480      	push	{r7}
 800584a:	b089      	sub	sp, #36	; 0x24
 800584c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800584e:	2300      	movs	r3, #0
 8005850:	61fb      	str	r3, [r7, #28]
 8005852:	2300      	movs	r3, #0
 8005854:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005856:	4b3e      	ldr	r3, [pc, #248]	; (8005950 <HAL_RCC_GetSysClockFreq+0x108>)
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f003 030c 	and.w	r3, r3, #12
 800585e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005860:	4b3b      	ldr	r3, [pc, #236]	; (8005950 <HAL_RCC_GetSysClockFreq+0x108>)
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	f003 0303 	and.w	r3, r3, #3
 8005868:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d005      	beq.n	800587c <HAL_RCC_GetSysClockFreq+0x34>
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	2b0c      	cmp	r3, #12
 8005874:	d121      	bne.n	80058ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2b01      	cmp	r3, #1
 800587a:	d11e      	bne.n	80058ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800587c:	4b34      	ldr	r3, [pc, #208]	; (8005950 <HAL_RCC_GetSysClockFreq+0x108>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0308 	and.w	r3, r3, #8
 8005884:	2b00      	cmp	r3, #0
 8005886:	d107      	bne.n	8005898 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005888:	4b31      	ldr	r3, [pc, #196]	; (8005950 <HAL_RCC_GetSysClockFreq+0x108>)
 800588a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800588e:	0a1b      	lsrs	r3, r3, #8
 8005890:	f003 030f 	and.w	r3, r3, #15
 8005894:	61fb      	str	r3, [r7, #28]
 8005896:	e005      	b.n	80058a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005898:	4b2d      	ldr	r3, [pc, #180]	; (8005950 <HAL_RCC_GetSysClockFreq+0x108>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	091b      	lsrs	r3, r3, #4
 800589e:	f003 030f 	and.w	r3, r3, #15
 80058a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80058a4:	4a2b      	ldr	r2, [pc, #172]	; (8005954 <HAL_RCC_GetSysClockFreq+0x10c>)
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d10d      	bne.n	80058d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80058b8:	e00a      	b.n	80058d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	2b04      	cmp	r3, #4
 80058be:	d102      	bne.n	80058c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80058c0:	4b25      	ldr	r3, [pc, #148]	; (8005958 <HAL_RCC_GetSysClockFreq+0x110>)
 80058c2:	61bb      	str	r3, [r7, #24]
 80058c4:	e004      	b.n	80058d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	2b08      	cmp	r3, #8
 80058ca:	d101      	bne.n	80058d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80058cc:	4b23      	ldr	r3, [pc, #140]	; (800595c <HAL_RCC_GetSysClockFreq+0x114>)
 80058ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	2b0c      	cmp	r3, #12
 80058d4:	d134      	bne.n	8005940 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80058d6:	4b1e      	ldr	r3, [pc, #120]	; (8005950 <HAL_RCC_GetSysClockFreq+0x108>)
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	f003 0303 	and.w	r3, r3, #3
 80058de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d003      	beq.n	80058ee <HAL_RCC_GetSysClockFreq+0xa6>
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	2b03      	cmp	r3, #3
 80058ea:	d003      	beq.n	80058f4 <HAL_RCC_GetSysClockFreq+0xac>
 80058ec:	e005      	b.n	80058fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80058ee:	4b1a      	ldr	r3, [pc, #104]	; (8005958 <HAL_RCC_GetSysClockFreq+0x110>)
 80058f0:	617b      	str	r3, [r7, #20]
      break;
 80058f2:	e005      	b.n	8005900 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80058f4:	4b19      	ldr	r3, [pc, #100]	; (800595c <HAL_RCC_GetSysClockFreq+0x114>)
 80058f6:	617b      	str	r3, [r7, #20]
      break;
 80058f8:	e002      	b.n	8005900 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	617b      	str	r3, [r7, #20]
      break;
 80058fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005900:	4b13      	ldr	r3, [pc, #76]	; (8005950 <HAL_RCC_GetSysClockFreq+0x108>)
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	091b      	lsrs	r3, r3, #4
 8005906:	f003 030f 	and.w	r3, r3, #15
 800590a:	3301      	adds	r3, #1
 800590c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800590e:	4b10      	ldr	r3, [pc, #64]	; (8005950 <HAL_RCC_GetSysClockFreq+0x108>)
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	0a1b      	lsrs	r3, r3, #8
 8005914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005918:	697a      	ldr	r2, [r7, #20]
 800591a:	fb03 f202 	mul.w	r2, r3, r2
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	fbb2 f3f3 	udiv	r3, r2, r3
 8005924:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005926:	4b0a      	ldr	r3, [pc, #40]	; (8005950 <HAL_RCC_GetSysClockFreq+0x108>)
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	0e5b      	lsrs	r3, r3, #25
 800592c:	f003 0303 	and.w	r3, r3, #3
 8005930:	3301      	adds	r3, #1
 8005932:	005b      	lsls	r3, r3, #1
 8005934:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005936:	697a      	ldr	r2, [r7, #20]
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	fbb2 f3f3 	udiv	r3, r2, r3
 800593e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005940:	69bb      	ldr	r3, [r7, #24]
}
 8005942:	4618      	mov	r0, r3
 8005944:	3724      	adds	r7, #36	; 0x24
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	40021000 	.word	0x40021000
 8005954:	0800f4c0 	.word	0x0800f4c0
 8005958:	00f42400 	.word	0x00f42400
 800595c:	007a1200 	.word	0x007a1200

08005960 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005960:	b480      	push	{r7}
 8005962:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005964:	4b03      	ldr	r3, [pc, #12]	; (8005974 <HAL_RCC_GetHCLKFreq+0x14>)
 8005966:	681b      	ldr	r3, [r3, #0]
}
 8005968:	4618      	mov	r0, r3
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	20000074 	.word	0x20000074

08005978 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800597c:	f7ff fff0 	bl	8005960 <HAL_RCC_GetHCLKFreq>
 8005980:	4602      	mov	r2, r0
 8005982:	4b06      	ldr	r3, [pc, #24]	; (800599c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	0a1b      	lsrs	r3, r3, #8
 8005988:	f003 0307 	and.w	r3, r3, #7
 800598c:	4904      	ldr	r1, [pc, #16]	; (80059a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800598e:	5ccb      	ldrb	r3, [r1, r3]
 8005990:	f003 031f 	and.w	r3, r3, #31
 8005994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005998:	4618      	mov	r0, r3
 800599a:	bd80      	pop	{r7, pc}
 800599c:	40021000 	.word	0x40021000
 80059a0:	0800f4b8 	.word	0x0800f4b8

080059a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80059a8:	f7ff ffda 	bl	8005960 <HAL_RCC_GetHCLKFreq>
 80059ac:	4602      	mov	r2, r0
 80059ae:	4b06      	ldr	r3, [pc, #24]	; (80059c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	0adb      	lsrs	r3, r3, #11
 80059b4:	f003 0307 	and.w	r3, r3, #7
 80059b8:	4904      	ldr	r1, [pc, #16]	; (80059cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80059ba:	5ccb      	ldrb	r3, [r1, r3]
 80059bc:	f003 031f 	and.w	r3, r3, #31
 80059c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	40021000 	.word	0x40021000
 80059cc:	0800f4b8 	.word	0x0800f4b8

080059d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b086      	sub	sp, #24
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80059d8:	2300      	movs	r3, #0
 80059da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80059dc:	4b27      	ldr	r3, [pc, #156]	; (8005a7c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80059de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d003      	beq.n	80059f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80059e8:	f7ff f8b4 	bl	8004b54 <HAL_PWREx_GetVoltageRange>
 80059ec:	6178      	str	r0, [r7, #20]
 80059ee:	e014      	b.n	8005a1a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80059f0:	4b22      	ldr	r3, [pc, #136]	; (8005a7c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80059f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059f4:	4a21      	ldr	r2, [pc, #132]	; (8005a7c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80059f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059fa:	6593      	str	r3, [r2, #88]	; 0x58
 80059fc:	4b1f      	ldr	r3, [pc, #124]	; (8005a7c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80059fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a04:	60fb      	str	r3, [r7, #12]
 8005a06:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005a08:	f7ff f8a4 	bl	8004b54 <HAL_PWREx_GetVoltageRange>
 8005a0c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005a0e:	4b1b      	ldr	r3, [pc, #108]	; (8005a7c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a12:	4a1a      	ldr	r2, [pc, #104]	; (8005a7c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005a14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a18:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a20:	d10b      	bne.n	8005a3a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2b80      	cmp	r3, #128	; 0x80
 8005a26:	d913      	bls.n	8005a50 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2ba0      	cmp	r3, #160	; 0xa0
 8005a2c:	d902      	bls.n	8005a34 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005a2e:	2302      	movs	r3, #2
 8005a30:	613b      	str	r3, [r7, #16]
 8005a32:	e00d      	b.n	8005a50 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005a34:	2301      	movs	r3, #1
 8005a36:	613b      	str	r3, [r7, #16]
 8005a38:	e00a      	b.n	8005a50 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2b7f      	cmp	r3, #127	; 0x7f
 8005a3e:	d902      	bls.n	8005a46 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005a40:	2302      	movs	r3, #2
 8005a42:	613b      	str	r3, [r7, #16]
 8005a44:	e004      	b.n	8005a50 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b70      	cmp	r3, #112	; 0x70
 8005a4a:	d101      	bne.n	8005a50 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005a50:	4b0b      	ldr	r3, [pc, #44]	; (8005a80 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f023 020f 	bic.w	r2, r3, #15
 8005a58:	4909      	ldr	r1, [pc, #36]	; (8005a80 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005a60:	4b07      	ldr	r3, [pc, #28]	; (8005a80 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 030f 	and.w	r3, r3, #15
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d001      	beq.n	8005a72 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e000      	b.n	8005a74 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3718      	adds	r7, #24
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	40021000 	.word	0x40021000
 8005a80:	40022000 	.word	0x40022000

08005a84 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b087      	sub	sp, #28
 8005a88:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a8a:	4b2d      	ldr	r3, [pc, #180]	; (8005b40 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	f003 0303 	and.w	r3, r3, #3
 8005a92:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2b03      	cmp	r3, #3
 8005a98:	d00b      	beq.n	8005ab2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2b03      	cmp	r3, #3
 8005a9e:	d825      	bhi.n	8005aec <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d008      	beq.n	8005ab8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d11f      	bne.n	8005aec <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005aac:	4b25      	ldr	r3, [pc, #148]	; (8005b44 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005aae:	613b      	str	r3, [r7, #16]
    break;
 8005ab0:	e01f      	b.n	8005af2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005ab2:	4b25      	ldr	r3, [pc, #148]	; (8005b48 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005ab4:	613b      	str	r3, [r7, #16]
    break;
 8005ab6:	e01c      	b.n	8005af2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005ab8:	4b21      	ldr	r3, [pc, #132]	; (8005b40 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 0308 	and.w	r3, r3, #8
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d107      	bne.n	8005ad4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005ac4:	4b1e      	ldr	r3, [pc, #120]	; (8005b40 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005ac6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005aca:	0a1b      	lsrs	r3, r3, #8
 8005acc:	f003 030f 	and.w	r3, r3, #15
 8005ad0:	617b      	str	r3, [r7, #20]
 8005ad2:	e005      	b.n	8005ae0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005ad4:	4b1a      	ldr	r3, [pc, #104]	; (8005b40 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	091b      	lsrs	r3, r3, #4
 8005ada:	f003 030f 	and.w	r3, r3, #15
 8005ade:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005ae0:	4a1a      	ldr	r2, [pc, #104]	; (8005b4c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ae8:	613b      	str	r3, [r7, #16]
    break;
 8005aea:	e002      	b.n	8005af2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005aec:	2300      	movs	r3, #0
 8005aee:	613b      	str	r3, [r7, #16]
    break;
 8005af0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005af2:	4b13      	ldr	r3, [pc, #76]	; (8005b40 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	091b      	lsrs	r3, r3, #4
 8005af8:	f003 030f 	and.w	r3, r3, #15
 8005afc:	3301      	adds	r3, #1
 8005afe:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005b00:	4b0f      	ldr	r3, [pc, #60]	; (8005b40 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	0a1b      	lsrs	r3, r3, #8
 8005b06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	fb03 f202 	mul.w	r2, r3, r2
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b16:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b18:	4b09      	ldr	r3, [pc, #36]	; (8005b40 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	0e5b      	lsrs	r3, r3, #25
 8005b1e:	f003 0303 	and.w	r3, r3, #3
 8005b22:	3301      	adds	r3, #1
 8005b24:	005b      	lsls	r3, r3, #1
 8005b26:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005b28:	693a      	ldr	r2, [r7, #16]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b30:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005b32:	683b      	ldr	r3, [r7, #0]
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	371c      	adds	r7, #28
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr
 8005b40:	40021000 	.word	0x40021000
 8005b44:	00f42400 	.word	0x00f42400
 8005b48:	007a1200 	.word	0x007a1200
 8005b4c:	0800f4c0 	.word	0x0800f4c0

08005b50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b086      	sub	sp, #24
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005b58:	2300      	movs	r3, #0
 8005b5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d040      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b70:	2b80      	cmp	r3, #128	; 0x80
 8005b72:	d02a      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005b74:	2b80      	cmp	r3, #128	; 0x80
 8005b76:	d825      	bhi.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005b78:	2b60      	cmp	r3, #96	; 0x60
 8005b7a:	d026      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005b7c:	2b60      	cmp	r3, #96	; 0x60
 8005b7e:	d821      	bhi.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005b80:	2b40      	cmp	r3, #64	; 0x40
 8005b82:	d006      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005b84:	2b40      	cmp	r3, #64	; 0x40
 8005b86:	d81d      	bhi.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d009      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005b8c:	2b20      	cmp	r3, #32
 8005b8e:	d010      	beq.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005b90:	e018      	b.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005b92:	4b89      	ldr	r3, [pc, #548]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	4a88      	ldr	r2, [pc, #544]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b9c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005b9e:	e015      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	3304      	adds	r3, #4
 8005ba4:	2100      	movs	r1, #0
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f000 fb3e 	bl	8006228 <RCCEx_PLLSAI1_Config>
 8005bac:	4603      	mov	r3, r0
 8005bae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005bb0:	e00c      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	3320      	adds	r3, #32
 8005bb6:	2100      	movs	r1, #0
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f000 fc29 	bl	8006410 <RCCEx_PLLSAI2_Config>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005bc2:	e003      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	74fb      	strb	r3, [r7, #19]
      break;
 8005bc8:	e000      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005bca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bcc:	7cfb      	ldrb	r3, [r7, #19]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d10b      	bne.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005bd2:	4b79      	ldr	r3, [pc, #484]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005bd4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bd8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005be0:	4975      	ldr	r1, [pc, #468]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005be8:	e001      	b.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bea:	7cfb      	ldrb	r3, [r7, #19]
 8005bec:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d047      	beq.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c02:	d030      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005c04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c08:	d82a      	bhi.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005c0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c0e:	d02a      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005c10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c14:	d824      	bhi.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005c16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c1a:	d008      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005c1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c20:	d81e      	bhi.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00a      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005c26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c2a:	d010      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005c2c:	e018      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005c2e:	4b62      	ldr	r3, [pc, #392]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	4a61      	ldr	r2, [pc, #388]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c38:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005c3a:	e015      	b.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	3304      	adds	r3, #4
 8005c40:	2100      	movs	r1, #0
 8005c42:	4618      	mov	r0, r3
 8005c44:	f000 faf0 	bl	8006228 <RCCEx_PLLSAI1_Config>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005c4c:	e00c      	b.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	3320      	adds	r3, #32
 8005c52:	2100      	movs	r1, #0
 8005c54:	4618      	mov	r0, r3
 8005c56:	f000 fbdb 	bl	8006410 <RCCEx_PLLSAI2_Config>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005c5e:	e003      	b.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	74fb      	strb	r3, [r7, #19]
      break;
 8005c64:	e000      	b.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005c66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c68:	7cfb      	ldrb	r3, [r7, #19]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d10b      	bne.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005c6e:	4b52      	ldr	r3, [pc, #328]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c70:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c7c:	494e      	ldr	r1, [pc, #312]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005c84:	e001      	b.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c86:	7cfb      	ldrb	r3, [r7, #19]
 8005c88:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	f000 809f 	beq.w	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005c9c:	4b46      	ldr	r3, [pc, #280]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d101      	bne.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e000      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005cac:	2300      	movs	r3, #0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d00d      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cb2:	4b41      	ldr	r3, [pc, #260]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cb6:	4a40      	ldr	r2, [pc, #256]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cbc:	6593      	str	r3, [r2, #88]	; 0x58
 8005cbe:	4b3e      	ldr	r3, [pc, #248]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cc6:	60bb      	str	r3, [r7, #8]
 8005cc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005cce:	4b3b      	ldr	r3, [pc, #236]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a3a      	ldr	r2, [pc, #232]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cd8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005cda:	f7fe f8df 	bl	8003e9c <HAL_GetTick>
 8005cde:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005ce0:	e009      	b.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ce2:	f7fe f8db 	bl	8003e9c <HAL_GetTick>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d902      	bls.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	74fb      	strb	r3, [r7, #19]
        break;
 8005cf4:	e005      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005cf6:	4b31      	ldr	r3, [pc, #196]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d0ef      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005d02:	7cfb      	ldrb	r3, [r7, #19]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d15b      	bne.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005d08:	4b2b      	ldr	r3, [pc, #172]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d12:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d01f      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d20:	697a      	ldr	r2, [r7, #20]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d019      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005d26:	4b24      	ldr	r3, [pc, #144]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d30:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d32:	4b21      	ldr	r3, [pc, #132]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d38:	4a1f      	ldr	r2, [pc, #124]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d42:	4b1d      	ldr	r3, [pc, #116]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d48:	4a1b      	ldr	r2, [pc, #108]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005d52:	4a19      	ldr	r2, [pc, #100]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	f003 0301 	and.w	r3, r3, #1
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d016      	beq.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d64:	f7fe f89a 	bl	8003e9c <HAL_GetTick>
 8005d68:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d6a:	e00b      	b.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d6c:	f7fe f896 	bl	8003e9c <HAL_GetTick>
 8005d70:	4602      	mov	r2, r0
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d902      	bls.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	74fb      	strb	r3, [r7, #19]
            break;
 8005d82:	e006      	b.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d84:	4b0c      	ldr	r3, [pc, #48]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d8a:	f003 0302 	and.w	r3, r3, #2
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d0ec      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005d92:	7cfb      	ldrb	r3, [r7, #19]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d10c      	bne.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d98:	4b07      	ldr	r3, [pc, #28]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d9e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005da8:	4903      	ldr	r1, [pc, #12]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005daa:	4313      	orrs	r3, r2
 8005dac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005db0:	e008      	b.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005db2:	7cfb      	ldrb	r3, [r7, #19]
 8005db4:	74bb      	strb	r3, [r7, #18]
 8005db6:	e005      	b.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005db8:	40021000 	.word	0x40021000
 8005dbc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dc0:	7cfb      	ldrb	r3, [r7, #19]
 8005dc2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005dc4:	7c7b      	ldrb	r3, [r7, #17]
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d105      	bne.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dca:	4ba0      	ldr	r3, [pc, #640]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dce:	4a9f      	ldr	r2, [pc, #636]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005dd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dd4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 0301 	and.w	r3, r3, #1
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00a      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005de2:	4b9a      	ldr	r3, [pc, #616]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005de8:	f023 0203 	bic.w	r2, r3, #3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df0:	4996      	ldr	r1, [pc, #600]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0302 	and.w	r3, r3, #2
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00a      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e04:	4b91      	ldr	r3, [pc, #580]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e0a:	f023 020c 	bic.w	r2, r3, #12
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e12:	498e      	ldr	r1, [pc, #568]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e14:	4313      	orrs	r3, r2
 8005e16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 0304 	and.w	r3, r3, #4
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00a      	beq.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005e26:	4b89      	ldr	r3, [pc, #548]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e2c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e34:	4985      	ldr	r1, [pc, #532]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e36:	4313      	orrs	r3, r2
 8005e38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 0308 	and.w	r3, r3, #8
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d00a      	beq.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005e48:	4b80      	ldr	r3, [pc, #512]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e4e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e56:	497d      	ldr	r1, [pc, #500]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0310 	and.w	r3, r3, #16
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00a      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005e6a:	4b78      	ldr	r3, [pc, #480]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e78:	4974      	ldr	r1, [pc, #464]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0320 	and.w	r3, r3, #32
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00a      	beq.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e8c:	4b6f      	ldr	r3, [pc, #444]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e92:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e9a:	496c      	ldr	r1, [pc, #432]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00a      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005eae:	4b67      	ldr	r3, [pc, #412]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eb4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ebc:	4963      	ldr	r1, [pc, #396]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d00a      	beq.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005ed0:	4b5e      	ldr	r3, [pc, #376]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ed6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ede:	495b      	ldr	r1, [pc, #364]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00a      	beq.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ef2:	4b56      	ldr	r3, [pc, #344]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ef8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f00:	4952      	ldr	r1, [pc, #328]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f02:	4313      	orrs	r3, r2
 8005f04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00a      	beq.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005f14:	4b4d      	ldr	r3, [pc, #308]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f1a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f22:	494a      	ldr	r1, [pc, #296]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f24:	4313      	orrs	r3, r2
 8005f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00a      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f36:	4b45      	ldr	r3, [pc, #276]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f44:	4941      	ldr	r1, [pc, #260]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f46:	4313      	orrs	r3, r2
 8005f48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d00a      	beq.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005f58:	4b3c      	ldr	r3, [pc, #240]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f5e:	f023 0203 	bic.w	r2, r3, #3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f66:	4939      	ldr	r1, [pc, #228]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d028      	beq.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f7a:	4b34      	ldr	r3, [pc, #208]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f80:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f88:	4930      	ldr	r1, [pc, #192]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f98:	d106      	bne.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f9a:	4b2c      	ldr	r3, [pc, #176]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	4a2b      	ldr	r2, [pc, #172]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fa0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fa4:	60d3      	str	r3, [r2, #12]
 8005fa6:	e011      	b.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005fb0:	d10c      	bne.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	3304      	adds	r3, #4
 8005fb6:	2101      	movs	r1, #1
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f000 f935 	bl	8006228 <RCCEx_PLLSAI1_Config>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005fc2:	7cfb      	ldrb	r3, [r7, #19]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d001      	beq.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005fc8:	7cfb      	ldrb	r3, [r7, #19]
 8005fca:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d04d      	beq.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fe0:	d108      	bne.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005fe2:	4b1a      	ldr	r3, [pc, #104]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fe4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005fe8:	4a18      	ldr	r2, [pc, #96]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005fee:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005ff2:	e012      	b.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005ff4:	4b15      	ldr	r3, [pc, #84]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ff6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ffa:	4a14      	ldr	r2, [pc, #80]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ffc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006000:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006004:	4b11      	ldr	r3, [pc, #68]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800600a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006012:	490e      	ldr	r1, [pc, #56]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006014:	4313      	orrs	r3, r2
 8006016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800601e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006022:	d106      	bne.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006024:	4b09      	ldr	r3, [pc, #36]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	4a08      	ldr	r2, [pc, #32]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800602a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800602e:	60d3      	str	r3, [r2, #12]
 8006030:	e020      	b.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006036:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800603a:	d109      	bne.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800603c:	4b03      	ldr	r3, [pc, #12]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	4a02      	ldr	r2, [pc, #8]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006042:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006046:	60d3      	str	r3, [r2, #12]
 8006048:	e014      	b.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800604a:	bf00      	nop
 800604c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006054:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006058:	d10c      	bne.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	3304      	adds	r3, #4
 800605e:	2101      	movs	r1, #1
 8006060:	4618      	mov	r0, r3
 8006062:	f000 f8e1 	bl	8006228 <RCCEx_PLLSAI1_Config>
 8006066:	4603      	mov	r3, r0
 8006068:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800606a:	7cfb      	ldrb	r3, [r7, #19]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d001      	beq.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8006070:	7cfb      	ldrb	r3, [r7, #19]
 8006072:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800607c:	2b00      	cmp	r3, #0
 800607e:	d028      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006080:	4b68      	ldr	r3, [pc, #416]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8006082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006086:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800608e:	4965      	ldr	r1, [pc, #404]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8006090:	4313      	orrs	r3, r2
 8006092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800609a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800609e:	d106      	bne.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060a0:	4b60      	ldr	r3, [pc, #384]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	4a5f      	ldr	r2, [pc, #380]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80060a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060aa:	60d3      	str	r3, [r2, #12]
 80060ac:	e011      	b.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80060b6:	d10c      	bne.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	3304      	adds	r3, #4
 80060bc:	2101      	movs	r1, #1
 80060be:	4618      	mov	r0, r3
 80060c0:	f000 f8b2 	bl	8006228 <RCCEx_PLLSAI1_Config>
 80060c4:	4603      	mov	r3, r0
 80060c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80060c8:	7cfb      	ldrb	r3, [r7, #19]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d001      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80060ce:	7cfb      	ldrb	r3, [r7, #19]
 80060d0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d01e      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80060de:	4b51      	ldr	r3, [pc, #324]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80060e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060e4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060ee:	494d      	ldr	r1, [pc, #308]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80060f0:	4313      	orrs	r3, r2
 80060f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006100:	d10c      	bne.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	3304      	adds	r3, #4
 8006106:	2102      	movs	r1, #2
 8006108:	4618      	mov	r0, r3
 800610a:	f000 f88d 	bl	8006228 <RCCEx_PLLSAI1_Config>
 800610e:	4603      	mov	r3, r0
 8006110:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006112:	7cfb      	ldrb	r3, [r7, #19]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d001      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006118:	7cfb      	ldrb	r3, [r7, #19]
 800611a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00b      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006128:	4b3e      	ldr	r3, [pc, #248]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800612a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800612e:	f023 0204 	bic.w	r2, r3, #4
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006138:	493a      	ldr	r1, [pc, #232]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800613a:	4313      	orrs	r3, r2
 800613c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00b      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800614c:	4b35      	ldr	r3, [pc, #212]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800614e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006152:	f023 0218 	bic.w	r2, r3, #24
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800615c:	4931      	ldr	r1, [pc, #196]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800615e:	4313      	orrs	r3, r2
 8006160:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800616c:	2b00      	cmp	r3, #0
 800616e:	d035      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006170:	4b2c      	ldr	r3, [pc, #176]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a2b      	ldr	r2, [pc, #172]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8006176:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800617a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800617c:	f7fd fe8e 	bl	8003e9c <HAL_GetTick>
 8006180:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006182:	e009      	b.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006184:	f7fd fe8a 	bl	8003e9c <HAL_GetTick>
 8006188:	4602      	mov	r2, r0
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	1ad3      	subs	r3, r2, r3
 800618e:	2b02      	cmp	r3, #2
 8006190:	d902      	bls.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	74fb      	strb	r3, [r7, #19]
        break;
 8006196:	e005      	b.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006198:	4b22      	ldr	r3, [pc, #136]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d1ef      	bne.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 80061a4:	7cfb      	ldrb	r3, [r7, #19]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d113      	bne.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 80061aa:	4b1e      	ldr	r3, [pc, #120]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80061ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061ba:	491a      	ldr	r1, [pc, #104]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80061bc:	4313      	orrs	r3, r2
 80061be:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	3320      	adds	r3, #32
 80061c6:	2102      	movs	r1, #2
 80061c8:	4618      	mov	r0, r3
 80061ca:	f000 f921 	bl	8006410 <RCCEx_PLLSAI2_Config>
 80061ce:	4603      	mov	r3, r0
 80061d0:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 80061d2:	7cfb      	ldrb	r3, [r7, #19]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d001      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 80061d8:	7cfb      	ldrb	r3, [r7, #19]
 80061da:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d017      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80061e8:	4b0e      	ldr	r3, [pc, #56]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80061ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061f8:	490a      	ldr	r1, [pc, #40]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80061fa:	4313      	orrs	r3, r2
 80061fc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006206:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800620a:	d105      	bne.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800620c:	4b05      	ldr	r3, [pc, #20]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	4a04      	ldr	r2, [pc, #16]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8006212:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006216:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006218:	7cbb      	ldrb	r3, [r7, #18]
}
 800621a:	4618      	mov	r0, r3
 800621c:	3718      	adds	r7, #24
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	40021000 	.word	0x40021000

08006228 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006232:	2300      	movs	r3, #0
 8006234:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006236:	4b72      	ldr	r3, [pc, #456]	; (8006400 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	f003 0303 	and.w	r3, r3, #3
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00e      	beq.n	8006260 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006242:	4b6f      	ldr	r3, [pc, #444]	; (8006400 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	f003 0203 	and.w	r2, r3, #3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	429a      	cmp	r2, r3
 8006250:	d103      	bne.n	800625a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
       ||
 8006256:	2b00      	cmp	r3, #0
 8006258:	d142      	bne.n	80062e0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	73fb      	strb	r3, [r7, #15]
 800625e:	e03f      	b.n	80062e0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2b03      	cmp	r3, #3
 8006266:	d018      	beq.n	800629a <RCCEx_PLLSAI1_Config+0x72>
 8006268:	2b03      	cmp	r3, #3
 800626a:	d825      	bhi.n	80062b8 <RCCEx_PLLSAI1_Config+0x90>
 800626c:	2b01      	cmp	r3, #1
 800626e:	d002      	beq.n	8006276 <RCCEx_PLLSAI1_Config+0x4e>
 8006270:	2b02      	cmp	r3, #2
 8006272:	d009      	beq.n	8006288 <RCCEx_PLLSAI1_Config+0x60>
 8006274:	e020      	b.n	80062b8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006276:	4b62      	ldr	r3, [pc, #392]	; (8006400 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 0302 	and.w	r3, r3, #2
 800627e:	2b00      	cmp	r3, #0
 8006280:	d11d      	bne.n	80062be <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006286:	e01a      	b.n	80062be <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006288:	4b5d      	ldr	r3, [pc, #372]	; (8006400 <RCCEx_PLLSAI1_Config+0x1d8>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006290:	2b00      	cmp	r3, #0
 8006292:	d116      	bne.n	80062c2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006298:	e013      	b.n	80062c2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800629a:	4b59      	ldr	r3, [pc, #356]	; (8006400 <RCCEx_PLLSAI1_Config+0x1d8>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d10f      	bne.n	80062c6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80062a6:	4b56      	ldr	r3, [pc, #344]	; (8006400 <RCCEx_PLLSAI1_Config+0x1d8>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d109      	bne.n	80062c6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80062b6:	e006      	b.n	80062c6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	73fb      	strb	r3, [r7, #15]
      break;
 80062bc:	e004      	b.n	80062c8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80062be:	bf00      	nop
 80062c0:	e002      	b.n	80062c8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80062c2:	bf00      	nop
 80062c4:	e000      	b.n	80062c8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80062c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80062c8:	7bfb      	ldrb	r3, [r7, #15]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d108      	bne.n	80062e0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80062ce:	4b4c      	ldr	r3, [pc, #304]	; (8006400 <RCCEx_PLLSAI1_Config+0x1d8>)
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	f023 0203 	bic.w	r2, r3, #3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4949      	ldr	r1, [pc, #292]	; (8006400 <RCCEx_PLLSAI1_Config+0x1d8>)
 80062dc:	4313      	orrs	r3, r2
 80062de:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80062e0:	7bfb      	ldrb	r3, [r7, #15]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	f040 8086 	bne.w	80063f4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80062e8:	4b45      	ldr	r3, [pc, #276]	; (8006400 <RCCEx_PLLSAI1_Config+0x1d8>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a44      	ldr	r2, [pc, #272]	; (8006400 <RCCEx_PLLSAI1_Config+0x1d8>)
 80062ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80062f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062f4:	f7fd fdd2 	bl	8003e9c <HAL_GetTick>
 80062f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80062fa:	e009      	b.n	8006310 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80062fc:	f7fd fdce 	bl	8003e9c <HAL_GetTick>
 8006300:	4602      	mov	r2, r0
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	2b02      	cmp	r3, #2
 8006308:	d902      	bls.n	8006310 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	73fb      	strb	r3, [r7, #15]
        break;
 800630e:	e005      	b.n	800631c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006310:	4b3b      	ldr	r3, [pc, #236]	; (8006400 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006318:	2b00      	cmp	r3, #0
 800631a:	d1ef      	bne.n	80062fc <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800631c:	7bfb      	ldrb	r3, [r7, #15]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d168      	bne.n	80063f4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d113      	bne.n	8006350 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006328:	4b35      	ldr	r3, [pc, #212]	; (8006400 <RCCEx_PLLSAI1_Config+0x1d8>)
 800632a:	691a      	ldr	r2, [r3, #16]
 800632c:	4b35      	ldr	r3, [pc, #212]	; (8006404 <RCCEx_PLLSAI1_Config+0x1dc>)
 800632e:	4013      	ands	r3, r2
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	6892      	ldr	r2, [r2, #8]
 8006334:	0211      	lsls	r1, r2, #8
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	68d2      	ldr	r2, [r2, #12]
 800633a:	06d2      	lsls	r2, r2, #27
 800633c:	4311      	orrs	r1, r2
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	6852      	ldr	r2, [r2, #4]
 8006342:	3a01      	subs	r2, #1
 8006344:	0112      	lsls	r2, r2, #4
 8006346:	430a      	orrs	r2, r1
 8006348:	492d      	ldr	r1, [pc, #180]	; (8006400 <RCCEx_PLLSAI1_Config+0x1d8>)
 800634a:	4313      	orrs	r3, r2
 800634c:	610b      	str	r3, [r1, #16]
 800634e:	e02d      	b.n	80063ac <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	2b01      	cmp	r3, #1
 8006354:	d115      	bne.n	8006382 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006356:	4b2a      	ldr	r3, [pc, #168]	; (8006400 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006358:	691a      	ldr	r2, [r3, #16]
 800635a:	4b2b      	ldr	r3, [pc, #172]	; (8006408 <RCCEx_PLLSAI1_Config+0x1e0>)
 800635c:	4013      	ands	r3, r2
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	6892      	ldr	r2, [r2, #8]
 8006362:	0211      	lsls	r1, r2, #8
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	6912      	ldr	r2, [r2, #16]
 8006368:	0852      	lsrs	r2, r2, #1
 800636a:	3a01      	subs	r2, #1
 800636c:	0552      	lsls	r2, r2, #21
 800636e:	4311      	orrs	r1, r2
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	6852      	ldr	r2, [r2, #4]
 8006374:	3a01      	subs	r2, #1
 8006376:	0112      	lsls	r2, r2, #4
 8006378:	430a      	orrs	r2, r1
 800637a:	4921      	ldr	r1, [pc, #132]	; (8006400 <RCCEx_PLLSAI1_Config+0x1d8>)
 800637c:	4313      	orrs	r3, r2
 800637e:	610b      	str	r3, [r1, #16]
 8006380:	e014      	b.n	80063ac <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006382:	4b1f      	ldr	r3, [pc, #124]	; (8006400 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006384:	691a      	ldr	r2, [r3, #16]
 8006386:	4b21      	ldr	r3, [pc, #132]	; (800640c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006388:	4013      	ands	r3, r2
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	6892      	ldr	r2, [r2, #8]
 800638e:	0211      	lsls	r1, r2, #8
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	6952      	ldr	r2, [r2, #20]
 8006394:	0852      	lsrs	r2, r2, #1
 8006396:	3a01      	subs	r2, #1
 8006398:	0652      	lsls	r2, r2, #25
 800639a:	4311      	orrs	r1, r2
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	6852      	ldr	r2, [r2, #4]
 80063a0:	3a01      	subs	r2, #1
 80063a2:	0112      	lsls	r2, r2, #4
 80063a4:	430a      	orrs	r2, r1
 80063a6:	4916      	ldr	r1, [pc, #88]	; (8006400 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063a8:	4313      	orrs	r3, r2
 80063aa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80063ac:	4b14      	ldr	r3, [pc, #80]	; (8006400 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a13      	ldr	r2, [pc, #76]	; (8006400 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80063b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063b8:	f7fd fd70 	bl	8003e9c <HAL_GetTick>
 80063bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80063be:	e009      	b.n	80063d4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80063c0:	f7fd fd6c 	bl	8003e9c <HAL_GetTick>
 80063c4:	4602      	mov	r2, r0
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d902      	bls.n	80063d4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	73fb      	strb	r3, [r7, #15]
          break;
 80063d2:	e005      	b.n	80063e0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80063d4:	4b0a      	ldr	r3, [pc, #40]	; (8006400 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d0ef      	beq.n	80063c0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80063e0:	7bfb      	ldrb	r3, [r7, #15]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d106      	bne.n	80063f4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80063e6:	4b06      	ldr	r3, [pc, #24]	; (8006400 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063e8:	691a      	ldr	r2, [r3, #16]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	699b      	ldr	r3, [r3, #24]
 80063ee:	4904      	ldr	r1, [pc, #16]	; (8006400 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063f0:	4313      	orrs	r3, r2
 80063f2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80063f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3710      	adds	r7, #16
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	bf00      	nop
 8006400:	40021000 	.word	0x40021000
 8006404:	07ff800f 	.word	0x07ff800f
 8006408:	ff9f800f 	.word	0xff9f800f
 800640c:	f9ff800f 	.word	0xf9ff800f

08006410 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800641a:	2300      	movs	r3, #0
 800641c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800641e:	4b72      	ldr	r3, [pc, #456]	; (80065e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	f003 0303 	and.w	r3, r3, #3
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00e      	beq.n	8006448 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800642a:	4b6f      	ldr	r3, [pc, #444]	; (80065e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	f003 0203 	and.w	r2, r3, #3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	429a      	cmp	r2, r3
 8006438:	d103      	bne.n	8006442 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
       ||
 800643e:	2b00      	cmp	r3, #0
 8006440:	d142      	bne.n	80064c8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	73fb      	strb	r3, [r7, #15]
 8006446:	e03f      	b.n	80064c8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2b03      	cmp	r3, #3
 800644e:	d018      	beq.n	8006482 <RCCEx_PLLSAI2_Config+0x72>
 8006450:	2b03      	cmp	r3, #3
 8006452:	d825      	bhi.n	80064a0 <RCCEx_PLLSAI2_Config+0x90>
 8006454:	2b01      	cmp	r3, #1
 8006456:	d002      	beq.n	800645e <RCCEx_PLLSAI2_Config+0x4e>
 8006458:	2b02      	cmp	r3, #2
 800645a:	d009      	beq.n	8006470 <RCCEx_PLLSAI2_Config+0x60>
 800645c:	e020      	b.n	80064a0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800645e:	4b62      	ldr	r3, [pc, #392]	; (80065e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 0302 	and.w	r3, r3, #2
 8006466:	2b00      	cmp	r3, #0
 8006468:	d11d      	bne.n	80064a6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800646e:	e01a      	b.n	80064a6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006470:	4b5d      	ldr	r3, [pc, #372]	; (80065e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006478:	2b00      	cmp	r3, #0
 800647a:	d116      	bne.n	80064aa <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006480:	e013      	b.n	80064aa <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006482:	4b59      	ldr	r3, [pc, #356]	; (80065e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800648a:	2b00      	cmp	r3, #0
 800648c:	d10f      	bne.n	80064ae <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800648e:	4b56      	ldr	r3, [pc, #344]	; (80065e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006496:	2b00      	cmp	r3, #0
 8006498:	d109      	bne.n	80064ae <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800649e:	e006      	b.n	80064ae <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	73fb      	strb	r3, [r7, #15]
      break;
 80064a4:	e004      	b.n	80064b0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80064a6:	bf00      	nop
 80064a8:	e002      	b.n	80064b0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80064aa:	bf00      	nop
 80064ac:	e000      	b.n	80064b0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80064ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80064b0:	7bfb      	ldrb	r3, [r7, #15]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d108      	bne.n	80064c8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80064b6:	4b4c      	ldr	r3, [pc, #304]	; (80065e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	f023 0203 	bic.w	r2, r3, #3
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4949      	ldr	r1, [pc, #292]	; (80065e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80064c4:	4313      	orrs	r3, r2
 80064c6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80064c8:	7bfb      	ldrb	r3, [r7, #15]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	f040 8086 	bne.w	80065dc <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80064d0:	4b45      	ldr	r3, [pc, #276]	; (80065e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a44      	ldr	r2, [pc, #272]	; (80065e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80064d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064dc:	f7fd fcde 	bl	8003e9c <HAL_GetTick>
 80064e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80064e2:	e009      	b.n	80064f8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80064e4:	f7fd fcda 	bl	8003e9c <HAL_GetTick>
 80064e8:	4602      	mov	r2, r0
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	1ad3      	subs	r3, r2, r3
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	d902      	bls.n	80064f8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	73fb      	strb	r3, [r7, #15]
        break;
 80064f6:	e005      	b.n	8006504 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80064f8:	4b3b      	ldr	r3, [pc, #236]	; (80065e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006500:	2b00      	cmp	r3, #0
 8006502:	d1ef      	bne.n	80064e4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006504:	7bfb      	ldrb	r3, [r7, #15]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d168      	bne.n	80065dc <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d113      	bne.n	8006538 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006510:	4b35      	ldr	r3, [pc, #212]	; (80065e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006512:	695a      	ldr	r2, [r3, #20]
 8006514:	4b35      	ldr	r3, [pc, #212]	; (80065ec <RCCEx_PLLSAI2_Config+0x1dc>)
 8006516:	4013      	ands	r3, r2
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	6892      	ldr	r2, [r2, #8]
 800651c:	0211      	lsls	r1, r2, #8
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	68d2      	ldr	r2, [r2, #12]
 8006522:	06d2      	lsls	r2, r2, #27
 8006524:	4311      	orrs	r1, r2
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	6852      	ldr	r2, [r2, #4]
 800652a:	3a01      	subs	r2, #1
 800652c:	0112      	lsls	r2, r2, #4
 800652e:	430a      	orrs	r2, r1
 8006530:	492d      	ldr	r1, [pc, #180]	; (80065e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006532:	4313      	orrs	r3, r2
 8006534:	614b      	str	r3, [r1, #20]
 8006536:	e02d      	b.n	8006594 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	2b01      	cmp	r3, #1
 800653c:	d115      	bne.n	800656a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800653e:	4b2a      	ldr	r3, [pc, #168]	; (80065e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006540:	695a      	ldr	r2, [r3, #20]
 8006542:	4b2b      	ldr	r3, [pc, #172]	; (80065f0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006544:	4013      	ands	r3, r2
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	6892      	ldr	r2, [r2, #8]
 800654a:	0211      	lsls	r1, r2, #8
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	6912      	ldr	r2, [r2, #16]
 8006550:	0852      	lsrs	r2, r2, #1
 8006552:	3a01      	subs	r2, #1
 8006554:	0552      	lsls	r2, r2, #21
 8006556:	4311      	orrs	r1, r2
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	6852      	ldr	r2, [r2, #4]
 800655c:	3a01      	subs	r2, #1
 800655e:	0112      	lsls	r2, r2, #4
 8006560:	430a      	orrs	r2, r1
 8006562:	4921      	ldr	r1, [pc, #132]	; (80065e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006564:	4313      	orrs	r3, r2
 8006566:	614b      	str	r3, [r1, #20]
 8006568:	e014      	b.n	8006594 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800656a:	4b1f      	ldr	r3, [pc, #124]	; (80065e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800656c:	695a      	ldr	r2, [r3, #20]
 800656e:	4b21      	ldr	r3, [pc, #132]	; (80065f4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006570:	4013      	ands	r3, r2
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	6892      	ldr	r2, [r2, #8]
 8006576:	0211      	lsls	r1, r2, #8
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	6952      	ldr	r2, [r2, #20]
 800657c:	0852      	lsrs	r2, r2, #1
 800657e:	3a01      	subs	r2, #1
 8006580:	0652      	lsls	r2, r2, #25
 8006582:	4311      	orrs	r1, r2
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	6852      	ldr	r2, [r2, #4]
 8006588:	3a01      	subs	r2, #1
 800658a:	0112      	lsls	r2, r2, #4
 800658c:	430a      	orrs	r2, r1
 800658e:	4916      	ldr	r1, [pc, #88]	; (80065e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006590:	4313      	orrs	r3, r2
 8006592:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006594:	4b14      	ldr	r3, [pc, #80]	; (80065e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a13      	ldr	r2, [pc, #76]	; (80065e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800659a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800659e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065a0:	f7fd fc7c 	bl	8003e9c <HAL_GetTick>
 80065a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80065a6:	e009      	b.n	80065bc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80065a8:	f7fd fc78 	bl	8003e9c <HAL_GetTick>
 80065ac:	4602      	mov	r2, r0
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d902      	bls.n	80065bc <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80065b6:	2303      	movs	r3, #3
 80065b8:	73fb      	strb	r3, [r7, #15]
          break;
 80065ba:	e005      	b.n	80065c8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80065bc:	4b0a      	ldr	r3, [pc, #40]	; (80065e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d0ef      	beq.n	80065a8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80065c8:	7bfb      	ldrb	r3, [r7, #15]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d106      	bne.n	80065dc <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80065ce:	4b06      	ldr	r3, [pc, #24]	; (80065e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065d0:	695a      	ldr	r2, [r3, #20]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	699b      	ldr	r3, [r3, #24]
 80065d6:	4904      	ldr	r1, [pc, #16]	; (80065e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80065dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	40021000 	.word	0x40021000
 80065ec:	07ff800f 	.word	0x07ff800f
 80065f0:	ff9f800f 	.word	0xff9f800f
 80065f4:	f9ff800f 	.word	0xf9ff800f

080065f8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d101      	bne.n	800660a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e096      	b.n	8006738 <HAL_RNG_Init+0x140>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	7a5b      	ldrb	r3, [r3, #9]
 800660e:	b2db      	uxtb	r3, r3
 8006610:	2b00      	cmp	r3, #0
 8006612:	d105      	bne.n	8006620 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f7fc fba2 	bl	8002d64 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2202      	movs	r2, #2
 8006624:	725a      	strb	r2, [r3, #9]

#if defined(RNG_CR_CONDRST)
  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f022 0204 	bic.w	r2, r2, #4
 8006634:	601a      	str	r2, [r3, #0]

  /* RNG CR register configuration. Set value in CR register for CONFIG 1, CONFIG 2 and CONFIG 3 values */
  cr_value = (uint32_t) (RNG_CR_CONFIG_VAL);
 8006636:	4b42      	ldr	r3, [pc, #264]	; (8006740 <HAL_RNG_Init+0x148>)
 8006638:	60fb      	str	r3, [r7, #12]

  /* Configuration of 
     - Clock Error Detection 
     - CONFIG1, CONFIG2, CONFIG3 fields
     when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST | RNG_CR_RNG_CONFIG1
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	4b40      	ldr	r3, [pc, #256]	; (8006744 <HAL_RNG_Init+0x14c>)
 8006642:	4013      	ands	r3, r2
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	6851      	ldr	r1, [r2, #4]
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	430a      	orrs	r2, r1
 800664c:	431a      	orrs	r2, r3
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006656:	601a      	str	r2, [r3, #0]
                                 | RNG_CR_RNG_CONFIG2 | RNG_CR_RNG_CONFIG3,
                                 (uint32_t) (RNG_CR_CONDRST | hrng->Init.ClockErrorDetection | cr_value));

#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a3a      	ldr	r2, [pc, #232]	; (8006748 <HAL_RNG_Init+0x150>)
 800665e:	611a      	str	r2, [r3, #16]
  /* for best latency and to be compliant with NIST */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f64a 2274 	movw	r2, #43636	; 0xaa74
 8006668:	611a      	str	r2, [r3, #16]
#endif /* RNG_VER_3_2 || RNG_VER_3_1 || RNG_VER_3_0 */

  /* Writing bits CONDRST=0*/
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8006678:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800667a:	f7fd fc0f 	bl	8003e9c <HAL_GetTick>
 800667e:	60b8      	str	r0, [r7, #8]

  /* Wait for conditioning reset process to be completed */
  while(HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8006680:	e016      	b.n	80066b0 <HAL_RNG_Init+0xb8>
  {
    if((HAL_GetTick() - tickstart ) > RNG_TIMEOUT_VALUE)
 8006682:	f7fd fc0b 	bl	8003e9c <HAL_GetTick>
 8006686:	4602      	mov	r2, r0
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	2b02      	cmp	r3, #2
 800668e:	d90f      	bls.n	80066b0 <HAL_RNG_Init+0xb8>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800669a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800669e:	d107      	bne.n	80066b0 <HAL_RNG_Init+0xb8>
      {
        hrng->State = HAL_RNG_STATE_READY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2202      	movs	r2, #2
 80066aa:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e043      	b.n	8006738 <HAL_RNG_Init+0x140>
  while(HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80066ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066be:	d0e0      	beq.n	8006682 <HAL_RNG_Init+0x8a>
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f042 0204 	orr.w	r2, r2, #4
 80066ce:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066da:	2b40      	cmp	r3, #64	; 0x40
 80066dc:	d104      	bne.n	80066e8 <HAL_RNG_Init+0xf0>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2204      	movs	r2, #4
 80066e2:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e027      	b.n	8006738 <HAL_RNG_Init+0x140>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 80066e8:	f7fd fbd8 	bl	8003e9c <HAL_GetTick>
 80066ec:	60b8      	str	r0, [r7, #8]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80066ee:	e015      	b.n	800671c <HAL_RNG_Init+0x124>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80066f0:	f7fd fbd4 	bl	8003e9c <HAL_GetTick>
 80066f4:	4602      	mov	r2, r0
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d90e      	bls.n	800671c <HAL_RNG_Init+0x124>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	f003 0304 	and.w	r3, r3, #4
 8006708:	2b04      	cmp	r3, #4
 800670a:	d107      	bne.n	800671c <HAL_RNG_Init+0x124>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2204      	movs	r2, #4
 8006710:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2202      	movs	r2, #2
 8006716:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e00d      	b.n	8006738 <HAL_RNG_Init+0x140>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	f003 0304 	and.w	r3, r3, #4
 8006726:	2b04      	cmp	r3, #4
 8006728:	d0e2      	beq.n	80066f0 <HAL_RNG_Init+0xf8>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2201      	movs	r2, #1
 800672e:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	3710      	adds	r7, #16
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}
 8006740:	00f00d00 	.word	0x00f00d00
 8006744:	bc0f10df 	.word	0xbc0f10df
 8006748:	17590abc 	.word	0x17590abc

0800674c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d07f      	beq.n	800685e <HAL_RTC_Init+0x112>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006764:	b2db      	uxtb	r3, r3
 8006766:	2b00      	cmp	r3, #0
 8006768:	d106      	bne.n	8006778 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f7fc fb72 	bl	8002e5c <HAL_RTC_MspInit>
    }
#endif /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800677e:	605a      	str	r2, [r3, #4]
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2202      	movs	r2, #2
 8006784:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	22ca      	movs	r2, #202	; 0xca
 800678e:	625a      	str	r2, [r3, #36]	; 0x24
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2253      	movs	r2, #83	; 0x53
 8006796:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 f93d 	bl	8006a18 <RTC_EnterInitMode>
 800679e:	4603      	mov	r3, r0
 80067a0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80067a2:	7bfb      	ldrb	r3, [r7, #15]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d15a      	bne.n	800685e <HAL_RTC_Init+0x112>
    {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	6812      	ldr	r2, [r2, #0]
 80067b2:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80067b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067ba:	6193      	str	r3, [r2, #24]
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	6999      	ldr	r1, [r3, #24]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	689a      	ldr	r2, [r3, #8]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	695b      	ldr	r3, [r3, #20]
 80067ca:	431a      	orrs	r2, r3
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	69db      	ldr	r3, [r3, #28]
 80067d0:	431a      	orrs	r2, r3
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	430a      	orrs	r2, r1
 80067d8:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	6912      	ldr	r2, [r2, #16]
 80067e2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	6919      	ldr	r1, [r3, #16]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	041a      	lsls	r2, r3, #16
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	430a      	orrs	r2, r1
 80067f6:	611a      	str	r2, [r3, #16]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80067f8:	4b1b      	ldr	r3, [pc, #108]	; (8006868 <HAL_RTC_Init+0x11c>)
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006808:	430b      	orrs	r3, r1
 800680a:	4917      	ldr	r1, [pc, #92]	; (8006868 <HAL_RTC_Init+0x11c>)
 800680c:	4313      	orrs	r3, r2
 800680e:	60cb      	str	r3, [r1, #12]
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 f937 	bl	8006a84 <RTC_ExitInitMode>
 8006816:	4603      	mov	r3, r0
 8006818:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800681a:	7bfb      	ldrb	r3, [r7, #15]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d11e      	bne.n	800685e <HAL_RTC_Init+0x112>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	699a      	ldr	r2, [r3, #24]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800682e:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	6999      	ldr	r1, [r3, #24]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	431a      	orrs	r2, r3
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	699b      	ldr	r3, [r3, #24]
 8006844:	431a      	orrs	r2, r3
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	430a      	orrs	r2, r1
 800684c:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	22ff      	movs	r2, #255	; 0xff
 8006854:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2201      	movs	r2, #1
 800685a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      }
    }
  }

  return status;
 800685e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006860:	4618      	mov	r0, r3
 8006862:	3710      	adds	r7, #16
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}
 8006868:	40002800 	.word	0x40002800

0800686c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b086      	sub	sp, #24
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8006878:	4b2c      	ldr	r3, [pc, #176]	; (800692c <HAL_RTC_GetTime+0xc0>)
 800687a:	689a      	ldr	r2, [r3, #8]
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8006880:	4b2a      	ldr	r3, [pc, #168]	; (800692c <HAL_RTC_GetTime+0xc0>)
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006888:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800688c:	d049      	beq.n	8006922 <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 800688e:	4b27      	ldr	r3, [pc, #156]	; (800692c <HAL_RTC_GetTime+0xc0>)
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 800689a:	4b24      	ldr	r3, [pc, #144]	; (800692c <HAL_RTC_GetTime+0xc0>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80068a2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80068a6:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	0c1b      	lsrs	r3, r3, #16
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068b2:	b2da      	uxtb	r2, r3
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	0a1b      	lsrs	r3, r3, #8
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068c2:	b2da      	uxtb	r2, r3
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068d0:	b2da      	uxtb	r2, r3
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	0d9b      	lsrs	r3, r3, #22
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	f003 0301 	and.w	r3, r3, #1
 80068e0:	b2da      	uxtb	r2, r3
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d11a      	bne.n	8006922 <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	4618      	mov	r0, r3
 80068f2:	f000 f905 	bl	8006b00 <RTC_Bcd2ToByte>
 80068f6:	4603      	mov	r3, r0
 80068f8:	461a      	mov	r2, r3
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	785b      	ldrb	r3, [r3, #1]
 8006902:	4618      	mov	r0, r3
 8006904:	f000 f8fc 	bl	8006b00 <RTC_Bcd2ToByte>
 8006908:	4603      	mov	r3, r0
 800690a:	461a      	mov	r2, r3
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	789b      	ldrb	r3, [r3, #2]
 8006914:	4618      	mov	r0, r3
 8006916:	f000 f8f3 	bl	8006b00 <RTC_Bcd2ToByte>
 800691a:	4603      	mov	r3, r0
 800691c:	461a      	mov	r2, r3
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3718      	adds	r7, #24
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	40002800 	.word	0x40002800

08006930 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b086      	sub	sp, #24
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 800693c:	4b22      	ldr	r3, [pc, #136]	; (80069c8 <HAL_RTC_GetDate+0x98>)
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006944:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006948:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	0c1b      	lsrs	r3, r3, #16
 800694e:	b2da      	uxtb	r2, r3
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	0a1b      	lsrs	r3, r3, #8
 8006958:	b2db      	uxtb	r3, r3
 800695a:	f003 031f 	and.w	r3, r3, #31
 800695e:	b2da      	uxtb	r2, r3
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	b2db      	uxtb	r3, r3
 8006968:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800696c:	b2da      	uxtb	r2, r3
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	0b5b      	lsrs	r3, r3, #13
 8006976:	b2db      	uxtb	r3, r3
 8006978:	f003 0307 	and.w	r3, r3, #7
 800697c:	b2da      	uxtb	r2, r3
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d11a      	bne.n	80069be <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	78db      	ldrb	r3, [r3, #3]
 800698c:	4618      	mov	r0, r3
 800698e:	f000 f8b7 	bl	8006b00 <RTC_Bcd2ToByte>
 8006992:	4603      	mov	r3, r0
 8006994:	461a      	mov	r2, r3
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	785b      	ldrb	r3, [r3, #1]
 800699e:	4618      	mov	r0, r3
 80069a0:	f000 f8ae 	bl	8006b00 <RTC_Bcd2ToByte>
 80069a4:	4603      	mov	r3, r0
 80069a6:	461a      	mov	r2, r3
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	789b      	ldrb	r3, [r3, #2]
 80069b0:	4618      	mov	r0, r3
 80069b2:	f000 f8a5 	bl	8006b00 <RTC_Bcd2ToByte>
 80069b6:	4603      	mov	r3, r0
 80069b8:	461a      	mov	r2, r3
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80069be:	2300      	movs	r3, #0
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3718      	adds	r7, #24
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	40002800 	.word	0x40002800

080069cc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68da      	ldr	r2, [r3, #12]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80069e2:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
#endif

  tickstart = HAL_GetTick();
 80069e4:	f7fd fa5a 	bl	8003e9c <HAL_GetTick>
 80069e8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80069ea:	e009      	b.n	8006a00 <HAL_RTC_WaitForSynchro+0x34>
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80069ec:	f7fd fa56 	bl	8003e9c <HAL_GetTick>
 80069f0:	4602      	mov	r2, r0
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	1ad3      	subs	r3, r2, r3
 80069f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069fa:	d901      	bls.n	8006a00 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80069fc:	2303      	movs	r3, #3
 80069fe:	e007      	b.n	8006a10 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	f003 0320 	and.w	r3, r3, #32
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d0ee      	beq.n	80069ec <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3710      	adds	r7, #16
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a20:	2300      	movs	r3, #0
 8006a22:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d123      	bne.n	8006a7a <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68da      	ldr	r2, [r3, #12]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006a40:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006a42:	f7fd fa2b 	bl	8003e9c <HAL_GetTick>
 8006a46:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006a48:	e00d      	b.n	8006a66 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006a4a:	f7fd fa27 	bl	8003e9c <HAL_GetTick>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	1ad3      	subs	r3, r2, r3
 8006a54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a58:	d905      	bls.n	8006a66 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8006a5a:	2303      	movs	r3, #3
 8006a5c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2203      	movs	r2, #3
 8006a62:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d102      	bne.n	8006a7a <RTC_EnterInitMode+0x62>
 8006a74:	7bfb      	ldrb	r3, [r7, #15]
 8006a76:	2b03      	cmp	r3, #3
 8006a78:	d1e7      	bne.n	8006a4a <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8006a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3710      	adds	r7, #16
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006a90:	4b1a      	ldr	r3, [pc, #104]	; (8006afc <RTC_ExitInitMode+0x78>)
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	4a19      	ldr	r2, [pc, #100]	; (8006afc <RTC_ExitInitMode+0x78>)
 8006a96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a9a:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006a9c:	4b17      	ldr	r3, [pc, #92]	; (8006afc <RTC_ExitInitMode+0x78>)
 8006a9e:	699b      	ldr	r3, [r3, #24]
 8006aa0:	f003 0320 	and.w	r3, r3, #32
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d10c      	bne.n	8006ac2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f7ff ff8f 	bl	80069cc <HAL_RTC_WaitForSynchro>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d01e      	beq.n	8006af2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2203      	movs	r2, #3
 8006ab8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 8006abc:	2303      	movs	r3, #3
 8006abe:	73fb      	strb	r3, [r7, #15]
 8006ac0:	e017      	b.n	8006af2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006ac2:	4b0e      	ldr	r3, [pc, #56]	; (8006afc <RTC_ExitInitMode+0x78>)
 8006ac4:	699b      	ldr	r3, [r3, #24]
 8006ac6:	4a0d      	ldr	r2, [pc, #52]	; (8006afc <RTC_ExitInitMode+0x78>)
 8006ac8:	f023 0320 	bic.w	r3, r3, #32
 8006acc:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f7ff ff7c 	bl	80069cc <HAL_RTC_WaitForSynchro>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d005      	beq.n	8006ae6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2203      	movs	r2, #3
 8006ade:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 8006ae2:	2303      	movs	r3, #3
 8006ae4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006ae6:	4b05      	ldr	r3, [pc, #20]	; (8006afc <RTC_ExitInitMode+0x78>)
 8006ae8:	699b      	ldr	r3, [r3, #24]
 8006aea:	4a04      	ldr	r2, [pc, #16]	; (8006afc <RTC_ExitInitMode+0x78>)
 8006aec:	f043 0320 	orr.w	r3, r3, #32
 8006af0:	6193      	str	r3, [r2, #24]
  }

  return status;
 8006af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3710      	adds	r7, #16
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	40002800 	.word	0x40002800

08006b00 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	4603      	mov	r3, r0
 8006b08:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8006b0a:	79fb      	ldrb	r3, [r7, #7]
 8006b0c:	091b      	lsrs	r3, r3, #4
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	461a      	mov	r2, r3
 8006b12:	0092      	lsls	r2, r2, #2
 8006b14:	4413      	add	r3, r2
 8006b16:	005b      	lsls	r3, r3, #1
 8006b18:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8006b1a:	79fb      	ldrb	r3, [r7, #7]
 8006b1c:	f003 030f 	and.w	r3, r3, #15
 8006b20:	b2da      	uxtb	r2, r3
 8006b22:	7bfb      	ldrb	r3, [r7, #15]
 8006b24:	4413      	add	r3, r2
 8006b26:	b2db      	uxtb	r3, r3
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3714      	adds	r7, #20
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d101      	bne.n	8006b46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e095      	b.n	8006c72 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d108      	bne.n	8006b60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b56:	d009      	beq.n	8006b6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	61da      	str	r2, [r3, #28]
 8006b5e:	e005      	b.n	8006b6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d106      	bne.n	8006b8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f7fc fa22 	bl	8002fd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2202      	movs	r2, #2
 8006b90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ba2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006bac:	d902      	bls.n	8006bb4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	60fb      	str	r3, [r7, #12]
 8006bb2:	e002      	b.n	8006bba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006bb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006bb8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006bc2:	d007      	beq.n	8006bd4 <HAL_SPI_Init+0xa0>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006bcc:	d002      	beq.n	8006bd4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006be4:	431a      	orrs	r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	f003 0302 	and.w	r3, r3, #2
 8006bee:	431a      	orrs	r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	695b      	ldr	r3, [r3, #20]
 8006bf4:	f003 0301 	and.w	r3, r3, #1
 8006bf8:	431a      	orrs	r2, r3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	699b      	ldr	r3, [r3, #24]
 8006bfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c02:	431a      	orrs	r2, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	69db      	ldr	r3, [r3, #28]
 8006c08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c0c:	431a      	orrs	r2, r3
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a1b      	ldr	r3, [r3, #32]
 8006c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c16:	ea42 0103 	orr.w	r1, r2, r3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c1e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	430a      	orrs	r2, r1
 8006c28:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	699b      	ldr	r3, [r3, #24]
 8006c2e:	0c1b      	lsrs	r3, r3, #16
 8006c30:	f003 0204 	and.w	r2, r3, #4
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c38:	f003 0310 	and.w	r3, r3, #16
 8006c3c:	431a      	orrs	r2, r3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c42:	f003 0308 	and.w	r3, r3, #8
 8006c46:	431a      	orrs	r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006c50:	ea42 0103 	orr.w	r1, r2, r3
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	430a      	orrs	r2, r1
 8006c60:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3710      	adds	r7, #16
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}

08006c7a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c7a:	b580      	push	{r7, lr}
 8006c7c:	b088      	sub	sp, #32
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	60f8      	str	r0, [r7, #12]
 8006c82:	60b9      	str	r1, [r7, #8]
 8006c84:	603b      	str	r3, [r7, #0]
 8006c86:	4613      	mov	r3, r2
 8006c88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d101      	bne.n	8006c9c <HAL_SPI_Transmit+0x22>
 8006c98:	2302      	movs	r3, #2
 8006c9a:	e158      	b.n	8006f4e <HAL_SPI_Transmit+0x2d4>
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ca4:	f7fd f8fa 	bl	8003e9c <HAL_GetTick>
 8006ca8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006caa:	88fb      	ldrh	r3, [r7, #6]
 8006cac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d002      	beq.n	8006cc0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006cba:	2302      	movs	r3, #2
 8006cbc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006cbe:	e13d      	b.n	8006f3c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d002      	beq.n	8006ccc <HAL_SPI_Transmit+0x52>
 8006cc6:	88fb      	ldrh	r3, [r7, #6]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d102      	bne.n	8006cd2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006cd0:	e134      	b.n	8006f3c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2203      	movs	r2, #3
 8006cd6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	68ba      	ldr	r2, [r7, #8]
 8006ce4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	88fa      	ldrh	r2, [r7, #6]
 8006cea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	88fa      	ldrh	r2, [r7, #6]
 8006cf0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2200      	movs	r2, #0
 8006d12:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d1c:	d10f      	bne.n	8006d3e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d2c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d3c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d48:	2b40      	cmp	r3, #64	; 0x40
 8006d4a:	d007      	beq.n	8006d5c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	68db      	ldr	r3, [r3, #12]
 8006d60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006d64:	d94b      	bls.n	8006dfe <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d002      	beq.n	8006d74 <HAL_SPI_Transmit+0xfa>
 8006d6e:	8afb      	ldrh	r3, [r7, #22]
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d13e      	bne.n	8006df2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d78:	881a      	ldrh	r2, [r3, #0]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d84:	1c9a      	adds	r2, r3, #2
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	3b01      	subs	r3, #1
 8006d92:	b29a      	uxth	r2, r3
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006d98:	e02b      	b.n	8006df2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	f003 0302 	and.w	r3, r3, #2
 8006da4:	2b02      	cmp	r3, #2
 8006da6:	d112      	bne.n	8006dce <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dac:	881a      	ldrh	r2, [r3, #0]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db8:	1c9a      	adds	r2, r3, #2
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	3b01      	subs	r3, #1
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006dcc:	e011      	b.n	8006df2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006dce:	f7fd f865 	bl	8003e9c <HAL_GetTick>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	69bb      	ldr	r3, [r7, #24]
 8006dd6:	1ad3      	subs	r3, r2, r3
 8006dd8:	683a      	ldr	r2, [r7, #0]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d803      	bhi.n	8006de6 <HAL_SPI_Transmit+0x16c>
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de4:	d102      	bne.n	8006dec <HAL_SPI_Transmit+0x172>
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d102      	bne.n	8006df2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006dec:	2303      	movs	r3, #3
 8006dee:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006df0:	e0a4      	b.n	8006f3c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d1ce      	bne.n	8006d9a <HAL_SPI_Transmit+0x120>
 8006dfc:	e07c      	b.n	8006ef8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d002      	beq.n	8006e0c <HAL_SPI_Transmit+0x192>
 8006e06:	8afb      	ldrh	r3, [r7, #22]
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d170      	bne.n	8006eee <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d912      	bls.n	8006e3c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e1a:	881a      	ldrh	r2, [r3, #0]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e26:	1c9a      	adds	r2, r3, #2
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	3b02      	subs	r3, #2
 8006e34:	b29a      	uxth	r2, r3
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006e3a:	e058      	b.n	8006eee <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	330c      	adds	r3, #12
 8006e46:	7812      	ldrb	r2, [r2, #0]
 8006e48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e4e:	1c5a      	adds	r2, r3, #1
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	3b01      	subs	r3, #1
 8006e5c:	b29a      	uxth	r2, r3
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006e62:	e044      	b.n	8006eee <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	f003 0302 	and.w	r3, r3, #2
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	d12b      	bne.n	8006eca <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d912      	bls.n	8006ea2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e80:	881a      	ldrh	r2, [r3, #0]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e8c:	1c9a      	adds	r2, r3, #2
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	3b02      	subs	r3, #2
 8006e9a:	b29a      	uxth	r2, r3
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ea0:	e025      	b.n	8006eee <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	330c      	adds	r3, #12
 8006eac:	7812      	ldrb	r2, [r2, #0]
 8006eae:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb4:	1c5a      	adds	r2, r3, #1
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	3b01      	subs	r3, #1
 8006ec2:	b29a      	uxth	r2, r3
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ec8:	e011      	b.n	8006eee <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006eca:	f7fc ffe7 	bl	8003e9c <HAL_GetTick>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	1ad3      	subs	r3, r2, r3
 8006ed4:	683a      	ldr	r2, [r7, #0]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d803      	bhi.n	8006ee2 <HAL_SPI_Transmit+0x268>
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee0:	d102      	bne.n	8006ee8 <HAL_SPI_Transmit+0x26e>
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d102      	bne.n	8006eee <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006ee8:	2303      	movs	r3, #3
 8006eea:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006eec:	e026      	b.n	8006f3c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d1b5      	bne.n	8006e64 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ef8:	69ba      	ldr	r2, [r7, #24]
 8006efa:	6839      	ldr	r1, [r7, #0]
 8006efc:	68f8      	ldr	r0, [r7, #12]
 8006efe:	f000 fce3 	bl	80078c8 <SPI_EndRxTxTransaction>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d002      	beq.n	8006f0e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2220      	movs	r2, #32
 8006f0c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d10a      	bne.n	8006f2c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f16:	2300      	movs	r3, #0
 8006f18:	613b      	str	r3, [r7, #16]
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	613b      	str	r3, [r7, #16]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	613b      	str	r3, [r7, #16]
 8006f2a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d002      	beq.n	8006f3a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	77fb      	strb	r3, [r7, #31]
 8006f38:	e000      	b.n	8006f3c <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006f3a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2200      	movs	r2, #0
 8006f48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006f4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3720      	adds	r7, #32
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b088      	sub	sp, #32
 8006f5a:	af02      	add	r7, sp, #8
 8006f5c:	60f8      	str	r0, [r7, #12]
 8006f5e:	60b9      	str	r1, [r7, #8]
 8006f60:	603b      	str	r3, [r7, #0]
 8006f62:	4613      	mov	r3, r2
 8006f64:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f66:	2300      	movs	r3, #0
 8006f68:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f72:	d112      	bne.n	8006f9a <HAL_SPI_Receive+0x44>
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d10e      	bne.n	8006f9a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2204      	movs	r2, #4
 8006f80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006f84:	88fa      	ldrh	r2, [r7, #6]
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	9300      	str	r3, [sp, #0]
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	68ba      	ldr	r2, [r7, #8]
 8006f8e:	68b9      	ldr	r1, [r7, #8]
 8006f90:	68f8      	ldr	r0, [r7, #12]
 8006f92:	f000 f910 	bl	80071b6 <HAL_SPI_TransmitReceive>
 8006f96:	4603      	mov	r3, r0
 8006f98:	e109      	b.n	80071ae <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d101      	bne.n	8006fa8 <HAL_SPI_Receive+0x52>
 8006fa4:	2302      	movs	r3, #2
 8006fa6:	e102      	b.n	80071ae <HAL_SPI_Receive+0x258>
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006fb0:	f7fc ff74 	bl	8003e9c <HAL_GetTick>
 8006fb4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d002      	beq.n	8006fc8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006fc2:	2302      	movs	r3, #2
 8006fc4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006fc6:	e0e9      	b.n	800719c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d002      	beq.n	8006fd4 <HAL_SPI_Receive+0x7e>
 8006fce:	88fb      	ldrh	r3, [r7, #6]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d102      	bne.n	8006fda <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006fd8:	e0e0      	b.n	800719c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2204      	movs	r2, #4
 8006fde:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	68ba      	ldr	r2, [r7, #8]
 8006fec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	88fa      	ldrh	r2, [r7, #6]
 8006ff2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	88fa      	ldrh	r2, [r7, #6]
 8006ffa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2200      	movs	r2, #0
 8007002:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2200      	movs	r2, #0
 8007008:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2200      	movs	r2, #0
 800700e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2200      	movs	r2, #0
 8007014:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2200      	movs	r2, #0
 800701a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007024:	d908      	bls.n	8007038 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	685a      	ldr	r2, [r3, #4]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007034:	605a      	str	r2, [r3, #4]
 8007036:	e007      	b.n	8007048 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	685a      	ldr	r2, [r3, #4]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007046:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007050:	d10f      	bne.n	8007072 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007060:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007070:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800707c:	2b40      	cmp	r3, #64	; 0x40
 800707e:	d007      	beq.n	8007090 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800708e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007098:	d867      	bhi.n	800716a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800709a:	e030      	b.n	80070fe <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	f003 0301 	and.w	r3, r3, #1
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d117      	bne.n	80070da <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f103 020c 	add.w	r2, r3, #12
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b6:	7812      	ldrb	r2, [r2, #0]
 80070b8:	b2d2      	uxtb	r2, r2
 80070ba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c0:	1c5a      	adds	r2, r3, #1
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	3b01      	subs	r3, #1
 80070d0:	b29a      	uxth	r2, r3
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80070d8:	e011      	b.n	80070fe <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070da:	f7fc fedf 	bl	8003e9c <HAL_GetTick>
 80070de:	4602      	mov	r2, r0
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	1ad3      	subs	r3, r2, r3
 80070e4:	683a      	ldr	r2, [r7, #0]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d803      	bhi.n	80070f2 <HAL_SPI_Receive+0x19c>
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070f0:	d102      	bne.n	80070f8 <HAL_SPI_Receive+0x1a2>
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d102      	bne.n	80070fe <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80070f8:	2303      	movs	r3, #3
 80070fa:	75fb      	strb	r3, [r7, #23]
          goto error;
 80070fc:	e04e      	b.n	800719c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007104:	b29b      	uxth	r3, r3
 8007106:	2b00      	cmp	r3, #0
 8007108:	d1c8      	bne.n	800709c <HAL_SPI_Receive+0x146>
 800710a:	e034      	b.n	8007176 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	f003 0301 	and.w	r3, r3, #1
 8007116:	2b01      	cmp	r3, #1
 8007118:	d115      	bne.n	8007146 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	68da      	ldr	r2, [r3, #12]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007124:	b292      	uxth	r2, r2
 8007126:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712c:	1c9a      	adds	r2, r3, #2
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007138:	b29b      	uxth	r3, r3
 800713a:	3b01      	subs	r3, #1
 800713c:	b29a      	uxth	r2, r3
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007144:	e011      	b.n	800716a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007146:	f7fc fea9 	bl	8003e9c <HAL_GetTick>
 800714a:	4602      	mov	r2, r0
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	1ad3      	subs	r3, r2, r3
 8007150:	683a      	ldr	r2, [r7, #0]
 8007152:	429a      	cmp	r2, r3
 8007154:	d803      	bhi.n	800715e <HAL_SPI_Receive+0x208>
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800715c:	d102      	bne.n	8007164 <HAL_SPI_Receive+0x20e>
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d102      	bne.n	800716a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8007164:	2303      	movs	r3, #3
 8007166:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007168:	e018      	b.n	800719c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007170:	b29b      	uxth	r3, r3
 8007172:	2b00      	cmp	r3, #0
 8007174:	d1ca      	bne.n	800710c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007176:	693a      	ldr	r2, [r7, #16]
 8007178:	6839      	ldr	r1, [r7, #0]
 800717a:	68f8      	ldr	r0, [r7, #12]
 800717c:	f000 fb4c 	bl	8007818 <SPI_EndRxTransaction>
 8007180:	4603      	mov	r3, r0
 8007182:	2b00      	cmp	r3, #0
 8007184:	d002      	beq.n	800718c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2220      	movs	r2, #32
 800718a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007190:	2b00      	cmp	r3, #0
 8007192:	d002      	beq.n	800719a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	75fb      	strb	r3, [r7, #23]
 8007198:	e000      	b.n	800719c <HAL_SPI_Receive+0x246>
  }

error :
 800719a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80071ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3718      	adds	r7, #24
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b08a      	sub	sp, #40	; 0x28
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	60f8      	str	r0, [r7, #12]
 80071be:	60b9      	str	r1, [r7, #8]
 80071c0:	607a      	str	r2, [r7, #4]
 80071c2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80071c4:	2301      	movs	r3, #1
 80071c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80071c8:	2300      	movs	r3, #0
 80071ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d101      	bne.n	80071dc <HAL_SPI_TransmitReceive+0x26>
 80071d8:	2302      	movs	r3, #2
 80071da:	e1fb      	b.n	80075d4 <HAL_SPI_TransmitReceive+0x41e>
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071e4:	f7fc fe5a 	bl	8003e9c <HAL_GetTick>
 80071e8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80071f0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80071f8:	887b      	ldrh	r3, [r7, #2]
 80071fa:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80071fc:	887b      	ldrh	r3, [r7, #2]
 80071fe:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007200:	7efb      	ldrb	r3, [r7, #27]
 8007202:	2b01      	cmp	r3, #1
 8007204:	d00e      	beq.n	8007224 <HAL_SPI_TransmitReceive+0x6e>
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800720c:	d106      	bne.n	800721c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d102      	bne.n	800721c <HAL_SPI_TransmitReceive+0x66>
 8007216:	7efb      	ldrb	r3, [r7, #27]
 8007218:	2b04      	cmp	r3, #4
 800721a:	d003      	beq.n	8007224 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800721c:	2302      	movs	r3, #2
 800721e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007222:	e1cd      	b.n	80075c0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d005      	beq.n	8007236 <HAL_SPI_TransmitReceive+0x80>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d002      	beq.n	8007236 <HAL_SPI_TransmitReceive+0x80>
 8007230:	887b      	ldrh	r3, [r7, #2]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d103      	bne.n	800723e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800723c:	e1c0      	b.n	80075c0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007244:	b2db      	uxtb	r3, r3
 8007246:	2b04      	cmp	r3, #4
 8007248:	d003      	beq.n	8007252 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2205      	movs	r2, #5
 800724e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2200      	movs	r2, #0
 8007256:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	887a      	ldrh	r2, [r7, #2]
 8007262:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	887a      	ldrh	r2, [r7, #2]
 800726a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	68ba      	ldr	r2, [r7, #8]
 8007272:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	887a      	ldrh	r2, [r7, #2]
 8007278:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	887a      	ldrh	r2, [r7, #2]
 800727e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2200      	movs	r2, #0
 8007284:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2200      	movs	r2, #0
 800728a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	68db      	ldr	r3, [r3, #12]
 8007290:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007294:	d802      	bhi.n	800729c <HAL_SPI_TransmitReceive+0xe6>
 8007296:	8a3b      	ldrh	r3, [r7, #16]
 8007298:	2b01      	cmp	r3, #1
 800729a:	d908      	bls.n	80072ae <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	685a      	ldr	r2, [r3, #4]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80072aa:	605a      	str	r2, [r3, #4]
 80072ac:	e007      	b.n	80072be <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	685a      	ldr	r2, [r3, #4]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80072bc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072c8:	2b40      	cmp	r3, #64	; 0x40
 80072ca:	d007      	beq.n	80072dc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80072e4:	d97c      	bls.n	80073e0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d002      	beq.n	80072f4 <HAL_SPI_TransmitReceive+0x13e>
 80072ee:	8a7b      	ldrh	r3, [r7, #18]
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d169      	bne.n	80073c8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f8:	881a      	ldrh	r2, [r3, #0]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007304:	1c9a      	adds	r2, r3, #2
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800730e:	b29b      	uxth	r3, r3
 8007310:	3b01      	subs	r3, #1
 8007312:	b29a      	uxth	r2, r3
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007318:	e056      	b.n	80073c8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	f003 0302 	and.w	r3, r3, #2
 8007324:	2b02      	cmp	r3, #2
 8007326:	d11b      	bne.n	8007360 <HAL_SPI_TransmitReceive+0x1aa>
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800732c:	b29b      	uxth	r3, r3
 800732e:	2b00      	cmp	r3, #0
 8007330:	d016      	beq.n	8007360 <HAL_SPI_TransmitReceive+0x1aa>
 8007332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007334:	2b01      	cmp	r3, #1
 8007336:	d113      	bne.n	8007360 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800733c:	881a      	ldrh	r2, [r3, #0]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007348:	1c9a      	adds	r2, r3, #2
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007352:	b29b      	uxth	r3, r3
 8007354:	3b01      	subs	r3, #1
 8007356:	b29a      	uxth	r2, r3
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800735c:	2300      	movs	r3, #0
 800735e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	f003 0301 	and.w	r3, r3, #1
 800736a:	2b01      	cmp	r3, #1
 800736c:	d11c      	bne.n	80073a8 <HAL_SPI_TransmitReceive+0x1f2>
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007374:	b29b      	uxth	r3, r3
 8007376:	2b00      	cmp	r3, #0
 8007378:	d016      	beq.n	80073a8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	68da      	ldr	r2, [r3, #12]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007384:	b292      	uxth	r2, r2
 8007386:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738c:	1c9a      	adds	r2, r3, #2
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007398:	b29b      	uxth	r3, r3
 800739a:	3b01      	subs	r3, #1
 800739c:	b29a      	uxth	r2, r3
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80073a4:	2301      	movs	r3, #1
 80073a6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80073a8:	f7fc fd78 	bl	8003e9c <HAL_GetTick>
 80073ac:	4602      	mov	r2, r0
 80073ae:	69fb      	ldr	r3, [r7, #28]
 80073b0:	1ad3      	subs	r3, r2, r3
 80073b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d807      	bhi.n	80073c8 <HAL_SPI_TransmitReceive+0x212>
 80073b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073be:	d003      	beq.n	80073c8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80073c0:	2303      	movs	r3, #3
 80073c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80073c6:	e0fb      	b.n	80075c0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d1a3      	bne.n	800731a <HAL_SPI_TransmitReceive+0x164>
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073d8:	b29b      	uxth	r3, r3
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d19d      	bne.n	800731a <HAL_SPI_TransmitReceive+0x164>
 80073de:	e0df      	b.n	80075a0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d003      	beq.n	80073f0 <HAL_SPI_TransmitReceive+0x23a>
 80073e8:	8a7b      	ldrh	r3, [r7, #18]
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	f040 80cb 	bne.w	8007586 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d912      	bls.n	8007420 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fe:	881a      	ldrh	r2, [r3, #0]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800740a:	1c9a      	adds	r2, r3, #2
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007414:	b29b      	uxth	r3, r3
 8007416:	3b02      	subs	r3, #2
 8007418:	b29a      	uxth	r2, r3
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800741e:	e0b2      	b.n	8007586 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	330c      	adds	r3, #12
 800742a:	7812      	ldrb	r2, [r2, #0]
 800742c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007432:	1c5a      	adds	r2, r3, #1
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800743c:	b29b      	uxth	r3, r3
 800743e:	3b01      	subs	r3, #1
 8007440:	b29a      	uxth	r2, r3
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007446:	e09e      	b.n	8007586 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	f003 0302 	and.w	r3, r3, #2
 8007452:	2b02      	cmp	r3, #2
 8007454:	d134      	bne.n	80074c0 <HAL_SPI_TransmitReceive+0x30a>
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800745a:	b29b      	uxth	r3, r3
 800745c:	2b00      	cmp	r3, #0
 800745e:	d02f      	beq.n	80074c0 <HAL_SPI_TransmitReceive+0x30a>
 8007460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007462:	2b01      	cmp	r3, #1
 8007464:	d12c      	bne.n	80074c0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800746a:	b29b      	uxth	r3, r3
 800746c:	2b01      	cmp	r3, #1
 800746e:	d912      	bls.n	8007496 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007474:	881a      	ldrh	r2, [r3, #0]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007480:	1c9a      	adds	r2, r3, #2
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800748a:	b29b      	uxth	r3, r3
 800748c:	3b02      	subs	r3, #2
 800748e:	b29a      	uxth	r2, r3
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007494:	e012      	b.n	80074bc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	330c      	adds	r3, #12
 80074a0:	7812      	ldrb	r2, [r2, #0]
 80074a2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a8:	1c5a      	adds	r2, r3, #1
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	3b01      	subs	r3, #1
 80074b6:	b29a      	uxth	r2, r3
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80074bc:	2300      	movs	r3, #0
 80074be:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	f003 0301 	and.w	r3, r3, #1
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d148      	bne.n	8007560 <HAL_SPI_TransmitReceive+0x3aa>
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d042      	beq.n	8007560 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d923      	bls.n	800752e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	68da      	ldr	r2, [r3, #12]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f0:	b292      	uxth	r2, r2
 80074f2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f8:	1c9a      	adds	r2, r3, #2
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007504:	b29b      	uxth	r3, r3
 8007506:	3b02      	subs	r3, #2
 8007508:	b29a      	uxth	r2, r3
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007516:	b29b      	uxth	r3, r3
 8007518:	2b01      	cmp	r3, #1
 800751a:	d81f      	bhi.n	800755c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	685a      	ldr	r2, [r3, #4]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800752a:	605a      	str	r2, [r3, #4]
 800752c:	e016      	b.n	800755c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f103 020c 	add.w	r2, r3, #12
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753a:	7812      	ldrb	r2, [r2, #0]
 800753c:	b2d2      	uxtb	r2, r2
 800753e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007544:	1c5a      	adds	r2, r3, #1
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007550:	b29b      	uxth	r3, r3
 8007552:	3b01      	subs	r3, #1
 8007554:	b29a      	uxth	r2, r3
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800755c:	2301      	movs	r3, #1
 800755e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007560:	f7fc fc9c 	bl	8003e9c <HAL_GetTick>
 8007564:	4602      	mov	r2, r0
 8007566:	69fb      	ldr	r3, [r7, #28]
 8007568:	1ad3      	subs	r3, r2, r3
 800756a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800756c:	429a      	cmp	r2, r3
 800756e:	d803      	bhi.n	8007578 <HAL_SPI_TransmitReceive+0x3c2>
 8007570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007576:	d102      	bne.n	800757e <HAL_SPI_TransmitReceive+0x3c8>
 8007578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757a:	2b00      	cmp	r3, #0
 800757c:	d103      	bne.n	8007586 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800757e:	2303      	movs	r3, #3
 8007580:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007584:	e01c      	b.n	80075c0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800758a:	b29b      	uxth	r3, r3
 800758c:	2b00      	cmp	r3, #0
 800758e:	f47f af5b 	bne.w	8007448 <HAL_SPI_TransmitReceive+0x292>
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007598:	b29b      	uxth	r3, r3
 800759a:	2b00      	cmp	r3, #0
 800759c:	f47f af54 	bne.w	8007448 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80075a0:	69fa      	ldr	r2, [r7, #28]
 80075a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80075a4:	68f8      	ldr	r0, [r7, #12]
 80075a6:	f000 f98f 	bl	80078c8 <SPI_EndRxTxTransaction>
 80075aa:	4603      	mov	r3, r0
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d006      	beq.n	80075be <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80075b0:	2301      	movs	r3, #1
 80075b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2220      	movs	r2, #32
 80075ba:	661a      	str	r2, [r3, #96]	; 0x60
 80075bc:	e000      	b.n	80075c0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80075be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2200      	movs	r2, #0
 80075cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80075d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3728      	adds	r7, #40	; 0x28
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b088      	sub	sp, #32
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	60b9      	str	r1, [r7, #8]
 80075e6:	603b      	str	r3, [r7, #0]
 80075e8:	4613      	mov	r3, r2
 80075ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80075ec:	f7fc fc56 	bl	8003e9c <HAL_GetTick>
 80075f0:	4602      	mov	r2, r0
 80075f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f4:	1a9b      	subs	r3, r3, r2
 80075f6:	683a      	ldr	r2, [r7, #0]
 80075f8:	4413      	add	r3, r2
 80075fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80075fc:	f7fc fc4e 	bl	8003e9c <HAL_GetTick>
 8007600:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007602:	4b39      	ldr	r3, [pc, #228]	; (80076e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	015b      	lsls	r3, r3, #5
 8007608:	0d1b      	lsrs	r3, r3, #20
 800760a:	69fa      	ldr	r2, [r7, #28]
 800760c:	fb02 f303 	mul.w	r3, r2, r3
 8007610:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007612:	e054      	b.n	80076be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800761a:	d050      	beq.n	80076be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800761c:	f7fc fc3e 	bl	8003e9c <HAL_GetTick>
 8007620:	4602      	mov	r2, r0
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	1ad3      	subs	r3, r2, r3
 8007626:	69fa      	ldr	r2, [r7, #28]
 8007628:	429a      	cmp	r2, r3
 800762a:	d902      	bls.n	8007632 <SPI_WaitFlagStateUntilTimeout+0x56>
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d13d      	bne.n	80076ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	685a      	ldr	r2, [r3, #4]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007640:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800764a:	d111      	bne.n	8007670 <SPI_WaitFlagStateUntilTimeout+0x94>
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007654:	d004      	beq.n	8007660 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800765e:	d107      	bne.n	8007670 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800766e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007674:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007678:	d10f      	bne.n	800769a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007688:	601a      	str	r2, [r3, #0]
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007698:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2201      	movs	r2, #1
 800769e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80076aa:	2303      	movs	r3, #3
 80076ac:	e017      	b.n	80076de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d101      	bne.n	80076b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80076b4:	2300      	movs	r3, #0
 80076b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	3b01      	subs	r3, #1
 80076bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	689a      	ldr	r2, [r3, #8]
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	4013      	ands	r3, r2
 80076c8:	68ba      	ldr	r2, [r7, #8]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	bf0c      	ite	eq
 80076ce:	2301      	moveq	r3, #1
 80076d0:	2300      	movne	r3, #0
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	461a      	mov	r2, r3
 80076d6:	79fb      	ldrb	r3, [r7, #7]
 80076d8:	429a      	cmp	r2, r3
 80076da:	d19b      	bne.n	8007614 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3720      	adds	r7, #32
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	bf00      	nop
 80076e8:	20000074 	.word	0x20000074

080076ec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b08a      	sub	sp, #40	; 0x28
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	60f8      	str	r0, [r7, #12]
 80076f4:	60b9      	str	r1, [r7, #8]
 80076f6:	607a      	str	r2, [r7, #4]
 80076f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80076fa:	2300      	movs	r3, #0
 80076fc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80076fe:	f7fc fbcd 	bl	8003e9c <HAL_GetTick>
 8007702:	4602      	mov	r2, r0
 8007704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007706:	1a9b      	subs	r3, r3, r2
 8007708:	683a      	ldr	r2, [r7, #0]
 800770a:	4413      	add	r3, r2
 800770c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800770e:	f7fc fbc5 	bl	8003e9c <HAL_GetTick>
 8007712:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	330c      	adds	r3, #12
 800771a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800771c:	4b3d      	ldr	r3, [pc, #244]	; (8007814 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	4613      	mov	r3, r2
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	4413      	add	r3, r2
 8007726:	00da      	lsls	r2, r3, #3
 8007728:	1ad3      	subs	r3, r2, r3
 800772a:	0d1b      	lsrs	r3, r3, #20
 800772c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800772e:	fb02 f303 	mul.w	r3, r2, r3
 8007732:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007734:	e060      	b.n	80077f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800773c:	d107      	bne.n	800774e <SPI_WaitFifoStateUntilTimeout+0x62>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d104      	bne.n	800774e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	b2db      	uxtb	r3, r3
 800774a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800774c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007754:	d050      	beq.n	80077f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007756:	f7fc fba1 	bl	8003e9c <HAL_GetTick>
 800775a:	4602      	mov	r2, r0
 800775c:	6a3b      	ldr	r3, [r7, #32]
 800775e:	1ad3      	subs	r3, r2, r3
 8007760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007762:	429a      	cmp	r2, r3
 8007764:	d902      	bls.n	800776c <SPI_WaitFifoStateUntilTimeout+0x80>
 8007766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007768:	2b00      	cmp	r3, #0
 800776a:	d13d      	bne.n	80077e8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	685a      	ldr	r2, [r3, #4]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800777a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007784:	d111      	bne.n	80077aa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800778e:	d004      	beq.n	800779a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007798:	d107      	bne.n	80077aa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077a8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077b2:	d10f      	bne.n	80077d4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80077c2:	601a      	str	r2, [r3, #0]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80077d2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2200      	movs	r2, #0
 80077e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80077e4:	2303      	movs	r3, #3
 80077e6:	e010      	b.n	800780a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80077e8:	69bb      	ldr	r3, [r7, #24]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d101      	bne.n	80077f2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80077ee:	2300      	movs	r3, #0
 80077f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	3b01      	subs	r3, #1
 80077f6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	689a      	ldr	r2, [r3, #8]
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	4013      	ands	r3, r2
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	429a      	cmp	r2, r3
 8007806:	d196      	bne.n	8007736 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007808:	2300      	movs	r3, #0
}
 800780a:	4618      	mov	r0, r3
 800780c:	3728      	adds	r7, #40	; 0x28
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
 8007812:	bf00      	nop
 8007814:	20000074 	.word	0x20000074

08007818 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b086      	sub	sp, #24
 800781c:	af02      	add	r7, sp, #8
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800782c:	d111      	bne.n	8007852 <SPI_EndRxTransaction+0x3a>
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007836:	d004      	beq.n	8007842 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007840:	d107      	bne.n	8007852 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007850:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	9300      	str	r3, [sp, #0]
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	2200      	movs	r2, #0
 800785a:	2180      	movs	r1, #128	; 0x80
 800785c:	68f8      	ldr	r0, [r7, #12]
 800785e:	f7ff febd 	bl	80075dc <SPI_WaitFlagStateUntilTimeout>
 8007862:	4603      	mov	r3, r0
 8007864:	2b00      	cmp	r3, #0
 8007866:	d007      	beq.n	8007878 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800786c:	f043 0220 	orr.w	r2, r3, #32
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007874:	2303      	movs	r3, #3
 8007876:	e023      	b.n	80078c0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007880:	d11d      	bne.n	80078be <SPI_EndRxTransaction+0xa6>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800788a:	d004      	beq.n	8007896 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007894:	d113      	bne.n	80078be <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	9300      	str	r3, [sp, #0]
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	2200      	movs	r2, #0
 800789e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80078a2:	68f8      	ldr	r0, [r7, #12]
 80078a4:	f7ff ff22 	bl	80076ec <SPI_WaitFifoStateUntilTimeout>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d007      	beq.n	80078be <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078b2:	f043 0220 	orr.w	r2, r3, #32
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80078ba:	2303      	movs	r3, #3
 80078bc:	e000      	b.n	80078c0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80078be:	2300      	movs	r3, #0
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3710      	adds	r7, #16
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b086      	sub	sp, #24
 80078cc:	af02      	add	r7, sp, #8
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	9300      	str	r3, [sp, #0]
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	2200      	movs	r2, #0
 80078dc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	f7ff ff03 	bl	80076ec <SPI_WaitFifoStateUntilTimeout>
 80078e6:	4603      	mov	r3, r0
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d007      	beq.n	80078fc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078f0:	f043 0220 	orr.w	r2, r3, #32
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80078f8:	2303      	movs	r3, #3
 80078fa:	e027      	b.n	800794c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	9300      	str	r3, [sp, #0]
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	2200      	movs	r2, #0
 8007904:	2180      	movs	r1, #128	; 0x80
 8007906:	68f8      	ldr	r0, [r7, #12]
 8007908:	f7ff fe68 	bl	80075dc <SPI_WaitFlagStateUntilTimeout>
 800790c:	4603      	mov	r3, r0
 800790e:	2b00      	cmp	r3, #0
 8007910:	d007      	beq.n	8007922 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007916:	f043 0220 	orr.w	r2, r3, #32
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800791e:	2303      	movs	r3, #3
 8007920:	e014      	b.n	800794c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	9300      	str	r3, [sp, #0]
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	2200      	movs	r2, #0
 800792a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800792e:	68f8      	ldr	r0, [r7, #12]
 8007930:	f7ff fedc 	bl	80076ec <SPI_WaitFifoStateUntilTimeout>
 8007934:	4603      	mov	r3, r0
 8007936:	2b00      	cmp	r3, #0
 8007938:	d007      	beq.n	800794a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800793e:	f043 0220 	orr.w	r2, r3, #32
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007946:	2303      	movs	r3, #3
 8007948:	e000      	b.n	800794c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800794a:	2300      	movs	r3, #0
}
 800794c:	4618      	mov	r0, r3
 800794e:	3710      	adds	r7, #16
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d101      	bne.n	8007966 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	e049      	b.n	80079fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800796c:	b2db      	uxtb	r3, r3
 800796e:	2b00      	cmp	r3, #0
 8007970:	d106      	bne.n	8007980 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f7fb ff92 	bl	80038a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2202      	movs	r2, #2
 8007984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	3304      	adds	r3, #4
 8007990:	4619      	mov	r1, r3
 8007992:	4610      	mov	r0, r2
 8007994:	f000 fcfa 	bl	800838c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3708      	adds	r7, #8
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}

08007a02 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007a02:	b580      	push	{r7, lr}
 8007a04:	b082      	sub	sp, #8
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d101      	bne.n	8007a14 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007a10:	2301      	movs	r3, #1
 8007a12:	e049      	b.n	8007aa8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d106      	bne.n	8007a2e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 f841 	bl	8007ab0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2202      	movs	r2, #2
 8007a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	3304      	adds	r3, #4
 8007a3e:	4619      	mov	r1, r3
 8007a40:	4610      	mov	r0, r2
 8007a42:	f000 fca3 	bl	800838c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2201      	movs	r2, #1
 8007a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2201      	movs	r2, #1
 8007a5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2201      	movs	r2, #1
 8007a62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2201      	movs	r2, #1
 8007a72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2201      	movs	r2, #1
 8007a82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2201      	movs	r2, #1
 8007a8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2201      	movs	r2, #1
 8007a92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3708      	adds	r7, #8
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007ab8:	bf00      	nop
 8007aba:	370c      	adds	r7, #12
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b086      	sub	sp, #24
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d101      	bne.n	8007ad8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	e097      	b.n	8007c08 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d106      	bne.n	8007af2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f7fb ff3f 	bl	8003970 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2202      	movs	r2, #2
 8007af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	6812      	ldr	r2, [r2, #0]
 8007b04:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8007b08:	f023 0307 	bic.w	r3, r3, #7
 8007b0c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	3304      	adds	r3, #4
 8007b16:	4619      	mov	r1, r3
 8007b18:	4610      	mov	r0, r2
 8007b1a:	f000 fc37 	bl	800838c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	699b      	ldr	r3, [r3, #24]
 8007b2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	6a1b      	ldr	r3, [r3, #32]
 8007b34:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	697a      	ldr	r2, [r7, #20]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b46:	f023 0303 	bic.w	r3, r3, #3
 8007b4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	689a      	ldr	r2, [r3, #8]
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	699b      	ldr	r3, [r3, #24]
 8007b54:	021b      	lsls	r3, r3, #8
 8007b56:	4313      	orrs	r3, r2
 8007b58:	693a      	ldr	r2, [r7, #16]
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007b64:	f023 030c 	bic.w	r3, r3, #12
 8007b68:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	68da      	ldr	r2, [r3, #12]
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	69db      	ldr	r3, [r3, #28]
 8007b7e:	021b      	lsls	r3, r3, #8
 8007b80:	4313      	orrs	r3, r2
 8007b82:	693a      	ldr	r2, [r7, #16]
 8007b84:	4313      	orrs	r3, r2
 8007b86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	691b      	ldr	r3, [r3, #16]
 8007b8c:	011a      	lsls	r2, r3, #4
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	6a1b      	ldr	r3, [r3, #32]
 8007b92:	031b      	lsls	r3, r3, #12
 8007b94:	4313      	orrs	r3, r2
 8007b96:	693a      	ldr	r2, [r7, #16]
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007ba2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007baa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	685a      	ldr	r2, [r3, #4]
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	695b      	ldr	r3, [r3, #20]
 8007bb4:	011b      	lsls	r3, r3, #4
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	68fa      	ldr	r2, [r7, #12]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	697a      	ldr	r2, [r7, #20]
 8007bc4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	693a      	ldr	r2, [r7, #16]
 8007bcc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	68fa      	ldr	r2, [r7, #12]
 8007bd4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2201      	movs	r2, #1
 8007bda:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2201      	movs	r2, #1
 8007be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2201      	movs	r2, #1
 8007bea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2201      	movs	r2, #1
 8007c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c06:	2300      	movs	r3, #0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3718      	adds	r7, #24
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c20:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007c28:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c30:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c38:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d110      	bne.n	8007c62 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c40:	7bfb      	ldrb	r3, [r7, #15]
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d102      	bne.n	8007c4c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007c46:	7b7b      	ldrb	r3, [r7, #13]
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d001      	beq.n	8007c50 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	e069      	b.n	8007d24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2202      	movs	r2, #2
 8007c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2202      	movs	r2, #2
 8007c5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c60:	e031      	b.n	8007cc6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	2b04      	cmp	r3, #4
 8007c66:	d110      	bne.n	8007c8a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c68:	7bbb      	ldrb	r3, [r7, #14]
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d102      	bne.n	8007c74 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007c6e:	7b3b      	ldrb	r3, [r7, #12]
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d001      	beq.n	8007c78 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	e055      	b.n	8007d24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2202      	movs	r2, #2
 8007c7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2202      	movs	r2, #2
 8007c84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c88:	e01d      	b.n	8007cc6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c8a:	7bfb      	ldrb	r3, [r7, #15]
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d108      	bne.n	8007ca2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c90:	7bbb      	ldrb	r3, [r7, #14]
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d105      	bne.n	8007ca2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c96:	7b7b      	ldrb	r3, [r7, #13]
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d102      	bne.n	8007ca2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007c9c:	7b3b      	ldrb	r3, [r7, #12]
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d001      	beq.n	8007ca6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e03e      	b.n	8007d24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2202      	movs	r2, #2
 8007caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2202      	movs	r2, #2
 8007cb2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2202      	movs	r2, #2
 8007cba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2202      	movs	r2, #2
 8007cc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d003      	beq.n	8007cd4 <HAL_TIM_Encoder_Start+0xc4>
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	2b04      	cmp	r3, #4
 8007cd0:	d008      	beq.n	8007ce4 <HAL_TIM_Encoder_Start+0xd4>
 8007cd2:	e00f      	b.n	8007cf4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	2100      	movs	r1, #0
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f000 ff5f 	bl	8008ba0 <TIM_CCxChannelCmd>
      break;
 8007ce2:	e016      	b.n	8007d12 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	2201      	movs	r2, #1
 8007cea:	2104      	movs	r1, #4
 8007cec:	4618      	mov	r0, r3
 8007cee:	f000 ff57 	bl	8008ba0 <TIM_CCxChannelCmd>
      break;
 8007cf2:	e00e      	b.n	8007d12 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	2100      	movs	r1, #0
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f000 ff4f 	bl	8008ba0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	2201      	movs	r2, #1
 8007d08:	2104      	movs	r1, #4
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f000 ff48 	bl	8008ba0 <TIM_CCxChannelCmd>
      break;
 8007d10:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	681a      	ldr	r2, [r3, #0]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f042 0201 	orr.w	r2, r2, #1
 8007d20:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007d22:	2300      	movs	r3, #0
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3710      	adds	r7, #16
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	691b      	ldr	r3, [r3, #16]
 8007d3a:	f003 0302 	and.w	r3, r3, #2
 8007d3e:	2b02      	cmp	r3, #2
 8007d40:	d122      	bne.n	8007d88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	f003 0302 	and.w	r3, r3, #2
 8007d4c:	2b02      	cmp	r3, #2
 8007d4e:	d11b      	bne.n	8007d88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f06f 0202 	mvn.w	r2, #2
 8007d58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	699b      	ldr	r3, [r3, #24]
 8007d66:	f003 0303 	and.w	r3, r3, #3
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d003      	beq.n	8007d76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 faed 	bl	800834e <HAL_TIM_IC_CaptureCallback>
 8007d74:	e005      	b.n	8007d82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 fadf 	bl	800833a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 faf0 	bl	8008362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	691b      	ldr	r3, [r3, #16]
 8007d8e:	f003 0304 	and.w	r3, r3, #4
 8007d92:	2b04      	cmp	r3, #4
 8007d94:	d122      	bne.n	8007ddc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	f003 0304 	and.w	r3, r3, #4
 8007da0:	2b04      	cmp	r3, #4
 8007da2:	d11b      	bne.n	8007ddc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f06f 0204 	mvn.w	r2, #4
 8007dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2202      	movs	r2, #2
 8007db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	699b      	ldr	r3, [r3, #24]
 8007dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d003      	beq.n	8007dca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 fac3 	bl	800834e <HAL_TIM_IC_CaptureCallback>
 8007dc8:	e005      	b.n	8007dd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 fab5 	bl	800833a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 fac6 	bl	8008362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	691b      	ldr	r3, [r3, #16]
 8007de2:	f003 0308 	and.w	r3, r3, #8
 8007de6:	2b08      	cmp	r3, #8
 8007de8:	d122      	bne.n	8007e30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	f003 0308 	and.w	r3, r3, #8
 8007df4:	2b08      	cmp	r3, #8
 8007df6:	d11b      	bne.n	8007e30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f06f 0208 	mvn.w	r2, #8
 8007e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2204      	movs	r2, #4
 8007e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	69db      	ldr	r3, [r3, #28]
 8007e0e:	f003 0303 	and.w	r3, r3, #3
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d003      	beq.n	8007e1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 fa99 	bl	800834e <HAL_TIM_IC_CaptureCallback>
 8007e1c:	e005      	b.n	8007e2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 fa8b 	bl	800833a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 fa9c 	bl	8008362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	691b      	ldr	r3, [r3, #16]
 8007e36:	f003 0310 	and.w	r3, r3, #16
 8007e3a:	2b10      	cmp	r3, #16
 8007e3c:	d122      	bne.n	8007e84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	f003 0310 	and.w	r3, r3, #16
 8007e48:	2b10      	cmp	r3, #16
 8007e4a:	d11b      	bne.n	8007e84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f06f 0210 	mvn.w	r2, #16
 8007e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2208      	movs	r2, #8
 8007e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	69db      	ldr	r3, [r3, #28]
 8007e62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d003      	beq.n	8007e72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 fa6f 	bl	800834e <HAL_TIM_IC_CaptureCallback>
 8007e70:	e005      	b.n	8007e7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 fa61 	bl	800833a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 fa72 	bl	8008362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2200      	movs	r2, #0
 8007e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	f003 0301 	and.w	r3, r3, #1
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d10e      	bne.n	8007eb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	68db      	ldr	r3, [r3, #12]
 8007e98:	f003 0301 	and.w	r3, r3, #1
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d107      	bne.n	8007eb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f06f 0201 	mvn.w	r2, #1
 8007ea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 fa3b 	bl	8008326 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	691b      	ldr	r3, [r3, #16]
 8007eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eba:	2b80      	cmp	r3, #128	; 0x80
 8007ebc:	d10e      	bne.n	8007edc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ec8:	2b80      	cmp	r3, #128	; 0x80
 8007eca:	d107      	bne.n	8007edc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 ff98 	bl	8008e0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ee6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007eea:	d10e      	bne.n	8007f0a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ef6:	2b80      	cmp	r3, #128	; 0x80
 8007ef8:	d107      	bne.n	8007f0a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007f02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 ff8b 	bl	8008e20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	691b      	ldr	r3, [r3, #16]
 8007f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f14:	2b40      	cmp	r3, #64	; 0x40
 8007f16:	d10e      	bne.n	8007f36 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	68db      	ldr	r3, [r3, #12]
 8007f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f22:	2b40      	cmp	r3, #64	; 0x40
 8007f24:	d107      	bne.n	8007f36 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007f2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 fa20 	bl	8008376 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	691b      	ldr	r3, [r3, #16]
 8007f3c:	f003 0320 	and.w	r3, r3, #32
 8007f40:	2b20      	cmp	r3, #32
 8007f42:	d10e      	bne.n	8007f62 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	f003 0320 	and.w	r3, r3, #32
 8007f4e:	2b20      	cmp	r3, #32
 8007f50:	d107      	bne.n	8007f62 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f06f 0220 	mvn.w	r2, #32
 8007f5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f000 ff4b 	bl	8008df8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f62:	bf00      	nop
 8007f64:	3708      	adds	r7, #8
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
	...

08007f6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b086      	sub	sp, #24
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d101      	bne.n	8007f8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007f86:	2302      	movs	r3, #2
 8007f88:	e0ff      	b.n	800818a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2b14      	cmp	r3, #20
 8007f96:	f200 80f0 	bhi.w	800817a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007f9a:	a201      	add	r2, pc, #4	; (adr r2, 8007fa0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa0:	08007ff5 	.word	0x08007ff5
 8007fa4:	0800817b 	.word	0x0800817b
 8007fa8:	0800817b 	.word	0x0800817b
 8007fac:	0800817b 	.word	0x0800817b
 8007fb0:	08008035 	.word	0x08008035
 8007fb4:	0800817b 	.word	0x0800817b
 8007fb8:	0800817b 	.word	0x0800817b
 8007fbc:	0800817b 	.word	0x0800817b
 8007fc0:	08008077 	.word	0x08008077
 8007fc4:	0800817b 	.word	0x0800817b
 8007fc8:	0800817b 	.word	0x0800817b
 8007fcc:	0800817b 	.word	0x0800817b
 8007fd0:	080080b7 	.word	0x080080b7
 8007fd4:	0800817b 	.word	0x0800817b
 8007fd8:	0800817b 	.word	0x0800817b
 8007fdc:	0800817b 	.word	0x0800817b
 8007fe0:	080080f9 	.word	0x080080f9
 8007fe4:	0800817b 	.word	0x0800817b
 8007fe8:	0800817b 	.word	0x0800817b
 8007fec:	0800817b 	.word	0x0800817b
 8007ff0:	08008139 	.word	0x08008139
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	68b9      	ldr	r1, [r7, #8]
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f000 fa60 	bl	80084c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	699a      	ldr	r2, [r3, #24]
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f042 0208 	orr.w	r2, r2, #8
 800800e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	699a      	ldr	r2, [r3, #24]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f022 0204 	bic.w	r2, r2, #4
 800801e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	6999      	ldr	r1, [r3, #24]
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	691a      	ldr	r2, [r3, #16]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	430a      	orrs	r2, r1
 8008030:	619a      	str	r2, [r3, #24]
      break;
 8008032:	e0a5      	b.n	8008180 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	68b9      	ldr	r1, [r7, #8]
 800803a:	4618      	mov	r0, r3
 800803c:	f000 fad0 	bl	80085e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	699a      	ldr	r2, [r3, #24]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800804e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	699a      	ldr	r2, [r3, #24]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800805e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	6999      	ldr	r1, [r3, #24]
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	691b      	ldr	r3, [r3, #16]
 800806a:	021a      	lsls	r2, r3, #8
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	430a      	orrs	r2, r1
 8008072:	619a      	str	r2, [r3, #24]
      break;
 8008074:	e084      	b.n	8008180 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	68b9      	ldr	r1, [r7, #8]
 800807c:	4618      	mov	r0, r3
 800807e:	f000 fb39 	bl	80086f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	69da      	ldr	r2, [r3, #28]
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f042 0208 	orr.w	r2, r2, #8
 8008090:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	69da      	ldr	r2, [r3, #28]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f022 0204 	bic.w	r2, r2, #4
 80080a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	69d9      	ldr	r1, [r3, #28]
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	691a      	ldr	r2, [r3, #16]
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	430a      	orrs	r2, r1
 80080b2:	61da      	str	r2, [r3, #28]
      break;
 80080b4:	e064      	b.n	8008180 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	68b9      	ldr	r1, [r7, #8]
 80080bc:	4618      	mov	r0, r3
 80080be:	f000 fba1 	bl	8008804 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	69da      	ldr	r2, [r3, #28]
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80080d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	69da      	ldr	r2, [r3, #28]
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	69d9      	ldr	r1, [r3, #28]
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	691b      	ldr	r3, [r3, #16]
 80080ec:	021a      	lsls	r2, r3, #8
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	430a      	orrs	r2, r1
 80080f4:	61da      	str	r2, [r3, #28]
      break;
 80080f6:	e043      	b.n	8008180 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	68b9      	ldr	r1, [r7, #8]
 80080fe:	4618      	mov	r0, r3
 8008100:	f000 fbea 	bl	80088d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f042 0208 	orr.w	r2, r2, #8
 8008112:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f022 0204 	bic.w	r2, r2, #4
 8008122:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	691a      	ldr	r2, [r3, #16]
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	430a      	orrs	r2, r1
 8008134:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008136:	e023      	b.n	8008180 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	68b9      	ldr	r1, [r7, #8]
 800813e:	4618      	mov	r0, r3
 8008140:	f000 fc2e 	bl	80089a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008152:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008162:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	691b      	ldr	r3, [r3, #16]
 800816e:	021a      	lsls	r2, r3, #8
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	430a      	orrs	r2, r1
 8008176:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008178:	e002      	b.n	8008180 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800817a:	2301      	movs	r3, #1
 800817c:	75fb      	strb	r3, [r7, #23]
      break;
 800817e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2200      	movs	r2, #0
 8008184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008188:	7dfb      	ldrb	r3, [r7, #23]
}
 800818a:	4618      	mov	r0, r3
 800818c:	3718      	adds	r7, #24
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop

08008194 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b084      	sub	sp, #16
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800819e:	2300      	movs	r3, #0
 80081a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d101      	bne.n	80081b0 <HAL_TIM_ConfigClockSource+0x1c>
 80081ac:	2302      	movs	r3, #2
 80081ae:	e0b6      	b.n	800831e <HAL_TIM_ConfigClockSource+0x18a>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2201      	movs	r2, #1
 80081b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2202      	movs	r2, #2
 80081bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	689b      	ldr	r3, [r3, #8]
 80081c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80081d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80081da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	68ba      	ldr	r2, [r7, #8]
 80081e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081ec:	d03e      	beq.n	800826c <HAL_TIM_ConfigClockSource+0xd8>
 80081ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081f2:	f200 8087 	bhi.w	8008304 <HAL_TIM_ConfigClockSource+0x170>
 80081f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081fa:	f000 8086 	beq.w	800830a <HAL_TIM_ConfigClockSource+0x176>
 80081fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008202:	d87f      	bhi.n	8008304 <HAL_TIM_ConfigClockSource+0x170>
 8008204:	2b70      	cmp	r3, #112	; 0x70
 8008206:	d01a      	beq.n	800823e <HAL_TIM_ConfigClockSource+0xaa>
 8008208:	2b70      	cmp	r3, #112	; 0x70
 800820a:	d87b      	bhi.n	8008304 <HAL_TIM_ConfigClockSource+0x170>
 800820c:	2b60      	cmp	r3, #96	; 0x60
 800820e:	d050      	beq.n	80082b2 <HAL_TIM_ConfigClockSource+0x11e>
 8008210:	2b60      	cmp	r3, #96	; 0x60
 8008212:	d877      	bhi.n	8008304 <HAL_TIM_ConfigClockSource+0x170>
 8008214:	2b50      	cmp	r3, #80	; 0x50
 8008216:	d03c      	beq.n	8008292 <HAL_TIM_ConfigClockSource+0xfe>
 8008218:	2b50      	cmp	r3, #80	; 0x50
 800821a:	d873      	bhi.n	8008304 <HAL_TIM_ConfigClockSource+0x170>
 800821c:	2b40      	cmp	r3, #64	; 0x40
 800821e:	d058      	beq.n	80082d2 <HAL_TIM_ConfigClockSource+0x13e>
 8008220:	2b40      	cmp	r3, #64	; 0x40
 8008222:	d86f      	bhi.n	8008304 <HAL_TIM_ConfigClockSource+0x170>
 8008224:	2b30      	cmp	r3, #48	; 0x30
 8008226:	d064      	beq.n	80082f2 <HAL_TIM_ConfigClockSource+0x15e>
 8008228:	2b30      	cmp	r3, #48	; 0x30
 800822a:	d86b      	bhi.n	8008304 <HAL_TIM_ConfigClockSource+0x170>
 800822c:	2b20      	cmp	r3, #32
 800822e:	d060      	beq.n	80082f2 <HAL_TIM_ConfigClockSource+0x15e>
 8008230:	2b20      	cmp	r3, #32
 8008232:	d867      	bhi.n	8008304 <HAL_TIM_ConfigClockSource+0x170>
 8008234:	2b00      	cmp	r3, #0
 8008236:	d05c      	beq.n	80082f2 <HAL_TIM_ConfigClockSource+0x15e>
 8008238:	2b10      	cmp	r3, #16
 800823a:	d05a      	beq.n	80082f2 <HAL_TIM_ConfigClockSource+0x15e>
 800823c:	e062      	b.n	8008304 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6818      	ldr	r0, [r3, #0]
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	6899      	ldr	r1, [r3, #8]
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	685a      	ldr	r2, [r3, #4]
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	68db      	ldr	r3, [r3, #12]
 800824e:	f000 fc87 	bl	8008b60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	689b      	ldr	r3, [r3, #8]
 8008258:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008260:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	68ba      	ldr	r2, [r7, #8]
 8008268:	609a      	str	r2, [r3, #8]
      break;
 800826a:	e04f      	b.n	800830c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6818      	ldr	r0, [r3, #0]
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	6899      	ldr	r1, [r3, #8]
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	685a      	ldr	r2, [r3, #4]
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	68db      	ldr	r3, [r3, #12]
 800827c:	f000 fc70 	bl	8008b60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	689a      	ldr	r2, [r3, #8]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800828e:	609a      	str	r2, [r3, #8]
      break;
 8008290:	e03c      	b.n	800830c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6818      	ldr	r0, [r3, #0]
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	6859      	ldr	r1, [r3, #4]
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	68db      	ldr	r3, [r3, #12]
 800829e:	461a      	mov	r2, r3
 80082a0:	f000 fbe4 	bl	8008a6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	2150      	movs	r1, #80	; 0x50
 80082aa:	4618      	mov	r0, r3
 80082ac:	f000 fc3d 	bl	8008b2a <TIM_ITRx_SetConfig>
      break;
 80082b0:	e02c      	b.n	800830c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6818      	ldr	r0, [r3, #0]
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	6859      	ldr	r1, [r3, #4]
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	461a      	mov	r2, r3
 80082c0:	f000 fc03 	bl	8008aca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	2160      	movs	r1, #96	; 0x60
 80082ca:	4618      	mov	r0, r3
 80082cc:	f000 fc2d 	bl	8008b2a <TIM_ITRx_SetConfig>
      break;
 80082d0:	e01c      	b.n	800830c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6818      	ldr	r0, [r3, #0]
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	6859      	ldr	r1, [r3, #4]
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	68db      	ldr	r3, [r3, #12]
 80082de:	461a      	mov	r2, r3
 80082e0:	f000 fbc4 	bl	8008a6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	2140      	movs	r1, #64	; 0x40
 80082ea:	4618      	mov	r0, r3
 80082ec:	f000 fc1d 	bl	8008b2a <TIM_ITRx_SetConfig>
      break;
 80082f0:	e00c      	b.n	800830c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4619      	mov	r1, r3
 80082fc:	4610      	mov	r0, r2
 80082fe:	f000 fc14 	bl	8008b2a <TIM_ITRx_SetConfig>
      break;
 8008302:	e003      	b.n	800830c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008304:	2301      	movs	r3, #1
 8008306:	73fb      	strb	r3, [r7, #15]
      break;
 8008308:	e000      	b.n	800830c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800830a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2200      	movs	r2, #0
 8008318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800831c:	7bfb      	ldrb	r3, [r7, #15]
}
 800831e:	4618      	mov	r0, r3
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008326:	b480      	push	{r7}
 8008328:	b083      	sub	sp, #12
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800832e:	bf00      	nop
 8008330:	370c      	adds	r7, #12
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr

0800833a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800833a:	b480      	push	{r7}
 800833c:	b083      	sub	sp, #12
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008342:	bf00      	nop
 8008344:	370c      	adds	r7, #12
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr

0800834e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800834e:	b480      	push	{r7}
 8008350:	b083      	sub	sp, #12
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008356:	bf00      	nop
 8008358:	370c      	adds	r7, #12
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr

08008362 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008362:	b480      	push	{r7}
 8008364:	b083      	sub	sp, #12
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800836a:	bf00      	nop
 800836c:	370c      	adds	r7, #12
 800836e:	46bd      	mov	sp, r7
 8008370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008374:	4770      	bx	lr

08008376 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008376:	b480      	push	{r7}
 8008378:	b083      	sub	sp, #12
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800837e:	bf00      	nop
 8008380:	370c      	adds	r7, #12
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr
	...

0800838c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800838c:	b480      	push	{r7}
 800838e:	b085      	sub	sp, #20
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	4a40      	ldr	r2, [pc, #256]	; (80084a0 <TIM_Base_SetConfig+0x114>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d013      	beq.n	80083cc <TIM_Base_SetConfig+0x40>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083aa:	d00f      	beq.n	80083cc <TIM_Base_SetConfig+0x40>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	4a3d      	ldr	r2, [pc, #244]	; (80084a4 <TIM_Base_SetConfig+0x118>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d00b      	beq.n	80083cc <TIM_Base_SetConfig+0x40>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	4a3c      	ldr	r2, [pc, #240]	; (80084a8 <TIM_Base_SetConfig+0x11c>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d007      	beq.n	80083cc <TIM_Base_SetConfig+0x40>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	4a3b      	ldr	r2, [pc, #236]	; (80084ac <TIM_Base_SetConfig+0x120>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d003      	beq.n	80083cc <TIM_Base_SetConfig+0x40>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4a3a      	ldr	r2, [pc, #232]	; (80084b0 <TIM_Base_SetConfig+0x124>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d108      	bne.n	80083de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	68fa      	ldr	r2, [r7, #12]
 80083da:	4313      	orrs	r3, r2
 80083dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	4a2f      	ldr	r2, [pc, #188]	; (80084a0 <TIM_Base_SetConfig+0x114>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d01f      	beq.n	8008426 <TIM_Base_SetConfig+0x9a>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083ec:	d01b      	beq.n	8008426 <TIM_Base_SetConfig+0x9a>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	4a2c      	ldr	r2, [pc, #176]	; (80084a4 <TIM_Base_SetConfig+0x118>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d017      	beq.n	8008426 <TIM_Base_SetConfig+0x9a>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	4a2b      	ldr	r2, [pc, #172]	; (80084a8 <TIM_Base_SetConfig+0x11c>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d013      	beq.n	8008426 <TIM_Base_SetConfig+0x9a>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	4a2a      	ldr	r2, [pc, #168]	; (80084ac <TIM_Base_SetConfig+0x120>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d00f      	beq.n	8008426 <TIM_Base_SetConfig+0x9a>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	4a29      	ldr	r2, [pc, #164]	; (80084b0 <TIM_Base_SetConfig+0x124>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d00b      	beq.n	8008426 <TIM_Base_SetConfig+0x9a>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4a28      	ldr	r2, [pc, #160]	; (80084b4 <TIM_Base_SetConfig+0x128>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d007      	beq.n	8008426 <TIM_Base_SetConfig+0x9a>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4a27      	ldr	r2, [pc, #156]	; (80084b8 <TIM_Base_SetConfig+0x12c>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d003      	beq.n	8008426 <TIM_Base_SetConfig+0x9a>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	4a26      	ldr	r2, [pc, #152]	; (80084bc <TIM_Base_SetConfig+0x130>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d108      	bne.n	8008438 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800842c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	68db      	ldr	r3, [r3, #12]
 8008432:	68fa      	ldr	r2, [r7, #12]
 8008434:	4313      	orrs	r3, r2
 8008436:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	695b      	ldr	r3, [r3, #20]
 8008442:	4313      	orrs	r3, r2
 8008444:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	68fa      	ldr	r2, [r7, #12]
 800844a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	689a      	ldr	r2, [r3, #8]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	4a10      	ldr	r2, [pc, #64]	; (80084a0 <TIM_Base_SetConfig+0x114>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d00f      	beq.n	8008484 <TIM_Base_SetConfig+0xf8>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	4a12      	ldr	r2, [pc, #72]	; (80084b0 <TIM_Base_SetConfig+0x124>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d00b      	beq.n	8008484 <TIM_Base_SetConfig+0xf8>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	4a11      	ldr	r2, [pc, #68]	; (80084b4 <TIM_Base_SetConfig+0x128>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d007      	beq.n	8008484 <TIM_Base_SetConfig+0xf8>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	4a10      	ldr	r2, [pc, #64]	; (80084b8 <TIM_Base_SetConfig+0x12c>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d003      	beq.n	8008484 <TIM_Base_SetConfig+0xf8>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	4a0f      	ldr	r2, [pc, #60]	; (80084bc <TIM_Base_SetConfig+0x130>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d103      	bne.n	800848c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	691a      	ldr	r2, [r3, #16]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2201      	movs	r2, #1
 8008490:	615a      	str	r2, [r3, #20]
}
 8008492:	bf00      	nop
 8008494:	3714      	adds	r7, #20
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr
 800849e:	bf00      	nop
 80084a0:	40012c00 	.word	0x40012c00
 80084a4:	40000400 	.word	0x40000400
 80084a8:	40000800 	.word	0x40000800
 80084ac:	40000c00 	.word	0x40000c00
 80084b0:	40013400 	.word	0x40013400
 80084b4:	40014000 	.word	0x40014000
 80084b8:	40014400 	.word	0x40014400
 80084bc:	40014800 	.word	0x40014800

080084c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b087      	sub	sp, #28
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6a1b      	ldr	r3, [r3, #32]
 80084ce:	f023 0201 	bic.w	r2, r3, #1
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6a1b      	ldr	r3, [r3, #32]
 80084da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	699b      	ldr	r3, [r3, #24]
 80084e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f023 0303 	bic.w	r3, r3, #3
 80084fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	68fa      	ldr	r2, [r7, #12]
 8008502:	4313      	orrs	r3, r2
 8008504:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	f023 0302 	bic.w	r3, r3, #2
 800850c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	689b      	ldr	r3, [r3, #8]
 8008512:	697a      	ldr	r2, [r7, #20]
 8008514:	4313      	orrs	r3, r2
 8008516:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	4a2c      	ldr	r2, [pc, #176]	; (80085cc <TIM_OC1_SetConfig+0x10c>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d00f      	beq.n	8008540 <TIM_OC1_SetConfig+0x80>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	4a2b      	ldr	r2, [pc, #172]	; (80085d0 <TIM_OC1_SetConfig+0x110>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d00b      	beq.n	8008540 <TIM_OC1_SetConfig+0x80>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	4a2a      	ldr	r2, [pc, #168]	; (80085d4 <TIM_OC1_SetConfig+0x114>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d007      	beq.n	8008540 <TIM_OC1_SetConfig+0x80>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	4a29      	ldr	r2, [pc, #164]	; (80085d8 <TIM_OC1_SetConfig+0x118>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d003      	beq.n	8008540 <TIM_OC1_SetConfig+0x80>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	4a28      	ldr	r2, [pc, #160]	; (80085dc <TIM_OC1_SetConfig+0x11c>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d10c      	bne.n	800855a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	f023 0308 	bic.w	r3, r3, #8
 8008546:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	68db      	ldr	r3, [r3, #12]
 800854c:	697a      	ldr	r2, [r7, #20]
 800854e:	4313      	orrs	r3, r2
 8008550:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	f023 0304 	bic.w	r3, r3, #4
 8008558:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	4a1b      	ldr	r2, [pc, #108]	; (80085cc <TIM_OC1_SetConfig+0x10c>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d00f      	beq.n	8008582 <TIM_OC1_SetConfig+0xc2>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4a1a      	ldr	r2, [pc, #104]	; (80085d0 <TIM_OC1_SetConfig+0x110>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d00b      	beq.n	8008582 <TIM_OC1_SetConfig+0xc2>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4a19      	ldr	r2, [pc, #100]	; (80085d4 <TIM_OC1_SetConfig+0x114>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d007      	beq.n	8008582 <TIM_OC1_SetConfig+0xc2>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	4a18      	ldr	r2, [pc, #96]	; (80085d8 <TIM_OC1_SetConfig+0x118>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d003      	beq.n	8008582 <TIM_OC1_SetConfig+0xc2>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4a17      	ldr	r2, [pc, #92]	; (80085dc <TIM_OC1_SetConfig+0x11c>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d111      	bne.n	80085a6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008588:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008590:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	695b      	ldr	r3, [r3, #20]
 8008596:	693a      	ldr	r2, [r7, #16]
 8008598:	4313      	orrs	r3, r2
 800859a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	699b      	ldr	r3, [r3, #24]
 80085a0:	693a      	ldr	r2, [r7, #16]
 80085a2:	4313      	orrs	r3, r2
 80085a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	693a      	ldr	r2, [r7, #16]
 80085aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	68fa      	ldr	r2, [r7, #12]
 80085b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	685a      	ldr	r2, [r3, #4]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	697a      	ldr	r2, [r7, #20]
 80085be:	621a      	str	r2, [r3, #32]
}
 80085c0:	bf00      	nop
 80085c2:	371c      	adds	r7, #28
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr
 80085cc:	40012c00 	.word	0x40012c00
 80085d0:	40013400 	.word	0x40013400
 80085d4:	40014000 	.word	0x40014000
 80085d8:	40014400 	.word	0x40014400
 80085dc:	40014800 	.word	0x40014800

080085e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b087      	sub	sp, #28
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6a1b      	ldr	r3, [r3, #32]
 80085ee:	f023 0210 	bic.w	r2, r3, #16
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6a1b      	ldr	r3, [r3, #32]
 80085fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	699b      	ldr	r3, [r3, #24]
 8008606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800860e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800861a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	021b      	lsls	r3, r3, #8
 8008622:	68fa      	ldr	r2, [r7, #12]
 8008624:	4313      	orrs	r3, r2
 8008626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	f023 0320 	bic.w	r3, r3, #32
 800862e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	689b      	ldr	r3, [r3, #8]
 8008634:	011b      	lsls	r3, r3, #4
 8008636:	697a      	ldr	r2, [r7, #20]
 8008638:	4313      	orrs	r3, r2
 800863a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	4a28      	ldr	r2, [pc, #160]	; (80086e0 <TIM_OC2_SetConfig+0x100>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d003      	beq.n	800864c <TIM_OC2_SetConfig+0x6c>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	4a27      	ldr	r2, [pc, #156]	; (80086e4 <TIM_OC2_SetConfig+0x104>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d10d      	bne.n	8008668 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008652:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	68db      	ldr	r3, [r3, #12]
 8008658:	011b      	lsls	r3, r3, #4
 800865a:	697a      	ldr	r2, [r7, #20]
 800865c:	4313      	orrs	r3, r2
 800865e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008666:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	4a1d      	ldr	r2, [pc, #116]	; (80086e0 <TIM_OC2_SetConfig+0x100>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d00f      	beq.n	8008690 <TIM_OC2_SetConfig+0xb0>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	4a1c      	ldr	r2, [pc, #112]	; (80086e4 <TIM_OC2_SetConfig+0x104>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d00b      	beq.n	8008690 <TIM_OC2_SetConfig+0xb0>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	4a1b      	ldr	r2, [pc, #108]	; (80086e8 <TIM_OC2_SetConfig+0x108>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d007      	beq.n	8008690 <TIM_OC2_SetConfig+0xb0>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	4a1a      	ldr	r2, [pc, #104]	; (80086ec <TIM_OC2_SetConfig+0x10c>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d003      	beq.n	8008690 <TIM_OC2_SetConfig+0xb0>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	4a19      	ldr	r2, [pc, #100]	; (80086f0 <TIM_OC2_SetConfig+0x110>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d113      	bne.n	80086b8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008696:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800869e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	695b      	ldr	r3, [r3, #20]
 80086a4:	009b      	lsls	r3, r3, #2
 80086a6:	693a      	ldr	r2, [r7, #16]
 80086a8:	4313      	orrs	r3, r2
 80086aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	699b      	ldr	r3, [r3, #24]
 80086b0:	009b      	lsls	r3, r3, #2
 80086b2:	693a      	ldr	r2, [r7, #16]
 80086b4:	4313      	orrs	r3, r2
 80086b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	693a      	ldr	r2, [r7, #16]
 80086bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	68fa      	ldr	r2, [r7, #12]
 80086c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	685a      	ldr	r2, [r3, #4]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	697a      	ldr	r2, [r7, #20]
 80086d0:	621a      	str	r2, [r3, #32]
}
 80086d2:	bf00      	nop
 80086d4:	371c      	adds	r7, #28
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr
 80086de:	bf00      	nop
 80086e0:	40012c00 	.word	0x40012c00
 80086e4:	40013400 	.word	0x40013400
 80086e8:	40014000 	.word	0x40014000
 80086ec:	40014400 	.word	0x40014400
 80086f0:	40014800 	.word	0x40014800

080086f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b087      	sub	sp, #28
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6a1b      	ldr	r3, [r3, #32]
 8008702:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6a1b      	ldr	r3, [r3, #32]
 800870e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	69db      	ldr	r3, [r3, #28]
 800871a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008726:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f023 0303 	bic.w	r3, r3, #3
 800872e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	68fa      	ldr	r2, [r7, #12]
 8008736:	4313      	orrs	r3, r2
 8008738:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008740:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	689b      	ldr	r3, [r3, #8]
 8008746:	021b      	lsls	r3, r3, #8
 8008748:	697a      	ldr	r2, [r7, #20]
 800874a:	4313      	orrs	r3, r2
 800874c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	4a27      	ldr	r2, [pc, #156]	; (80087f0 <TIM_OC3_SetConfig+0xfc>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d003      	beq.n	800875e <TIM_OC3_SetConfig+0x6a>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	4a26      	ldr	r2, [pc, #152]	; (80087f4 <TIM_OC3_SetConfig+0x100>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d10d      	bne.n	800877a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008764:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	021b      	lsls	r3, r3, #8
 800876c:	697a      	ldr	r2, [r7, #20]
 800876e:	4313      	orrs	r3, r2
 8008770:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008778:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	4a1c      	ldr	r2, [pc, #112]	; (80087f0 <TIM_OC3_SetConfig+0xfc>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d00f      	beq.n	80087a2 <TIM_OC3_SetConfig+0xae>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4a1b      	ldr	r2, [pc, #108]	; (80087f4 <TIM_OC3_SetConfig+0x100>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d00b      	beq.n	80087a2 <TIM_OC3_SetConfig+0xae>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	4a1a      	ldr	r2, [pc, #104]	; (80087f8 <TIM_OC3_SetConfig+0x104>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d007      	beq.n	80087a2 <TIM_OC3_SetConfig+0xae>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	4a19      	ldr	r2, [pc, #100]	; (80087fc <TIM_OC3_SetConfig+0x108>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d003      	beq.n	80087a2 <TIM_OC3_SetConfig+0xae>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	4a18      	ldr	r2, [pc, #96]	; (8008800 <TIM_OC3_SetConfig+0x10c>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d113      	bne.n	80087ca <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80087b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	695b      	ldr	r3, [r3, #20]
 80087b6:	011b      	lsls	r3, r3, #4
 80087b8:	693a      	ldr	r2, [r7, #16]
 80087ba:	4313      	orrs	r3, r2
 80087bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	699b      	ldr	r3, [r3, #24]
 80087c2:	011b      	lsls	r3, r3, #4
 80087c4:	693a      	ldr	r2, [r7, #16]
 80087c6:	4313      	orrs	r3, r2
 80087c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	693a      	ldr	r2, [r7, #16]
 80087ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	68fa      	ldr	r2, [r7, #12]
 80087d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	685a      	ldr	r2, [r3, #4]
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	697a      	ldr	r2, [r7, #20]
 80087e2:	621a      	str	r2, [r3, #32]
}
 80087e4:	bf00      	nop
 80087e6:	371c      	adds	r7, #28
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr
 80087f0:	40012c00 	.word	0x40012c00
 80087f4:	40013400 	.word	0x40013400
 80087f8:	40014000 	.word	0x40014000
 80087fc:	40014400 	.word	0x40014400
 8008800:	40014800 	.word	0x40014800

08008804 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008804:	b480      	push	{r7}
 8008806:	b087      	sub	sp, #28
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6a1b      	ldr	r3, [r3, #32]
 8008812:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6a1b      	ldr	r3, [r3, #32]
 800881e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	69db      	ldr	r3, [r3, #28]
 800882a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008832:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800883e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	021b      	lsls	r3, r3, #8
 8008846:	68fa      	ldr	r2, [r7, #12]
 8008848:	4313      	orrs	r3, r2
 800884a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008852:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	689b      	ldr	r3, [r3, #8]
 8008858:	031b      	lsls	r3, r3, #12
 800885a:	693a      	ldr	r2, [r7, #16]
 800885c:	4313      	orrs	r3, r2
 800885e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	4a18      	ldr	r2, [pc, #96]	; (80088c4 <TIM_OC4_SetConfig+0xc0>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d00f      	beq.n	8008888 <TIM_OC4_SetConfig+0x84>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4a17      	ldr	r2, [pc, #92]	; (80088c8 <TIM_OC4_SetConfig+0xc4>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d00b      	beq.n	8008888 <TIM_OC4_SetConfig+0x84>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	4a16      	ldr	r2, [pc, #88]	; (80088cc <TIM_OC4_SetConfig+0xc8>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d007      	beq.n	8008888 <TIM_OC4_SetConfig+0x84>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	4a15      	ldr	r2, [pc, #84]	; (80088d0 <TIM_OC4_SetConfig+0xcc>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d003      	beq.n	8008888 <TIM_OC4_SetConfig+0x84>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	4a14      	ldr	r2, [pc, #80]	; (80088d4 <TIM_OC4_SetConfig+0xd0>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d109      	bne.n	800889c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800888e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	695b      	ldr	r3, [r3, #20]
 8008894:	019b      	lsls	r3, r3, #6
 8008896:	697a      	ldr	r2, [r7, #20]
 8008898:	4313      	orrs	r3, r2
 800889a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	697a      	ldr	r2, [r7, #20]
 80088a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	68fa      	ldr	r2, [r7, #12]
 80088a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	685a      	ldr	r2, [r3, #4]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	693a      	ldr	r2, [r7, #16]
 80088b4:	621a      	str	r2, [r3, #32]
}
 80088b6:	bf00      	nop
 80088b8:	371c      	adds	r7, #28
 80088ba:	46bd      	mov	sp, r7
 80088bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c0:	4770      	bx	lr
 80088c2:	bf00      	nop
 80088c4:	40012c00 	.word	0x40012c00
 80088c8:	40013400 	.word	0x40013400
 80088cc:	40014000 	.word	0x40014000
 80088d0:	40014400 	.word	0x40014400
 80088d4:	40014800 	.word	0x40014800

080088d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80088d8:	b480      	push	{r7}
 80088da:	b087      	sub	sp, #28
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6a1b      	ldr	r3, [r3, #32]
 80088e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6a1b      	ldr	r3, [r3, #32]
 80088f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800890a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	68fa      	ldr	r2, [r7, #12]
 8008912:	4313      	orrs	r3, r2
 8008914:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800891c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	041b      	lsls	r3, r3, #16
 8008924:	693a      	ldr	r2, [r7, #16]
 8008926:	4313      	orrs	r3, r2
 8008928:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	4a17      	ldr	r2, [pc, #92]	; (800898c <TIM_OC5_SetConfig+0xb4>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d00f      	beq.n	8008952 <TIM_OC5_SetConfig+0x7a>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	4a16      	ldr	r2, [pc, #88]	; (8008990 <TIM_OC5_SetConfig+0xb8>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d00b      	beq.n	8008952 <TIM_OC5_SetConfig+0x7a>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	4a15      	ldr	r2, [pc, #84]	; (8008994 <TIM_OC5_SetConfig+0xbc>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d007      	beq.n	8008952 <TIM_OC5_SetConfig+0x7a>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	4a14      	ldr	r2, [pc, #80]	; (8008998 <TIM_OC5_SetConfig+0xc0>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d003      	beq.n	8008952 <TIM_OC5_SetConfig+0x7a>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	4a13      	ldr	r2, [pc, #76]	; (800899c <TIM_OC5_SetConfig+0xc4>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d109      	bne.n	8008966 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008958:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	695b      	ldr	r3, [r3, #20]
 800895e:	021b      	lsls	r3, r3, #8
 8008960:	697a      	ldr	r2, [r7, #20]
 8008962:	4313      	orrs	r3, r2
 8008964:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	697a      	ldr	r2, [r7, #20]
 800896a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	68fa      	ldr	r2, [r7, #12]
 8008970:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	685a      	ldr	r2, [r3, #4]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	693a      	ldr	r2, [r7, #16]
 800897e:	621a      	str	r2, [r3, #32]
}
 8008980:	bf00      	nop
 8008982:	371c      	adds	r7, #28
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr
 800898c:	40012c00 	.word	0x40012c00
 8008990:	40013400 	.word	0x40013400
 8008994:	40014000 	.word	0x40014000
 8008998:	40014400 	.word	0x40014400
 800899c:	40014800 	.word	0x40014800

080089a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b087      	sub	sp, #28
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6a1b      	ldr	r3, [r3, #32]
 80089ae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6a1b      	ldr	r3, [r3, #32]
 80089ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80089ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	021b      	lsls	r3, r3, #8
 80089da:	68fa      	ldr	r2, [r7, #12]
 80089dc:	4313      	orrs	r3, r2
 80089de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80089e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	689b      	ldr	r3, [r3, #8]
 80089ec:	051b      	lsls	r3, r3, #20
 80089ee:	693a      	ldr	r2, [r7, #16]
 80089f0:	4313      	orrs	r3, r2
 80089f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	4a18      	ldr	r2, [pc, #96]	; (8008a58 <TIM_OC6_SetConfig+0xb8>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d00f      	beq.n	8008a1c <TIM_OC6_SetConfig+0x7c>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	4a17      	ldr	r2, [pc, #92]	; (8008a5c <TIM_OC6_SetConfig+0xbc>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d00b      	beq.n	8008a1c <TIM_OC6_SetConfig+0x7c>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	4a16      	ldr	r2, [pc, #88]	; (8008a60 <TIM_OC6_SetConfig+0xc0>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d007      	beq.n	8008a1c <TIM_OC6_SetConfig+0x7c>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	4a15      	ldr	r2, [pc, #84]	; (8008a64 <TIM_OC6_SetConfig+0xc4>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d003      	beq.n	8008a1c <TIM_OC6_SetConfig+0x7c>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	4a14      	ldr	r2, [pc, #80]	; (8008a68 <TIM_OC6_SetConfig+0xc8>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d109      	bne.n	8008a30 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008a22:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	695b      	ldr	r3, [r3, #20]
 8008a28:	029b      	lsls	r3, r3, #10
 8008a2a:	697a      	ldr	r2, [r7, #20]
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	697a      	ldr	r2, [r7, #20]
 8008a34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	68fa      	ldr	r2, [r7, #12]
 8008a3a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	685a      	ldr	r2, [r3, #4]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	693a      	ldr	r2, [r7, #16]
 8008a48:	621a      	str	r2, [r3, #32]
}
 8008a4a:	bf00      	nop
 8008a4c:	371c      	adds	r7, #28
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr
 8008a56:	bf00      	nop
 8008a58:	40012c00 	.word	0x40012c00
 8008a5c:	40013400 	.word	0x40013400
 8008a60:	40014000 	.word	0x40014000
 8008a64:	40014400 	.word	0x40014400
 8008a68:	40014800 	.word	0x40014800

08008a6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b087      	sub	sp, #28
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	60f8      	str	r0, [r7, #12]
 8008a74:	60b9      	str	r1, [r7, #8]
 8008a76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	6a1b      	ldr	r3, [r3, #32]
 8008a7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	6a1b      	ldr	r3, [r3, #32]
 8008a82:	f023 0201 	bic.w	r2, r3, #1
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	699b      	ldr	r3, [r3, #24]
 8008a8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	011b      	lsls	r3, r3, #4
 8008a9c:	693a      	ldr	r2, [r7, #16]
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	f023 030a 	bic.w	r3, r3, #10
 8008aa8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008aaa:	697a      	ldr	r2, [r7, #20]
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	693a      	ldr	r2, [r7, #16]
 8008ab6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	697a      	ldr	r2, [r7, #20]
 8008abc:	621a      	str	r2, [r3, #32]
}
 8008abe:	bf00      	nop
 8008ac0:	371c      	adds	r7, #28
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac8:	4770      	bx	lr

08008aca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008aca:	b480      	push	{r7}
 8008acc:	b087      	sub	sp, #28
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	60f8      	str	r0, [r7, #12]
 8008ad2:	60b9      	str	r1, [r7, #8]
 8008ad4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	6a1b      	ldr	r3, [r3, #32]
 8008ada:	f023 0210 	bic.w	r2, r3, #16
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	699b      	ldr	r3, [r3, #24]
 8008ae6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	6a1b      	ldr	r3, [r3, #32]
 8008aec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008af4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	031b      	lsls	r3, r3, #12
 8008afa:	697a      	ldr	r2, [r7, #20]
 8008afc:	4313      	orrs	r3, r2
 8008afe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008b06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	011b      	lsls	r3, r3, #4
 8008b0c:	693a      	ldr	r2, [r7, #16]
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	697a      	ldr	r2, [r7, #20]
 8008b16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	693a      	ldr	r2, [r7, #16]
 8008b1c:	621a      	str	r2, [r3, #32]
}
 8008b1e:	bf00      	nop
 8008b20:	371c      	adds	r7, #28
 8008b22:	46bd      	mov	sp, r7
 8008b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b28:	4770      	bx	lr

08008b2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008b2a:	b480      	push	{r7}
 8008b2c:	b085      	sub	sp, #20
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
 8008b32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	689b      	ldr	r3, [r3, #8]
 8008b38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008b42:	683a      	ldr	r2, [r7, #0]
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	4313      	orrs	r3, r2
 8008b48:	f043 0307 	orr.w	r3, r3, #7
 8008b4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	68fa      	ldr	r2, [r7, #12]
 8008b52:	609a      	str	r2, [r3, #8]
}
 8008b54:	bf00      	nop
 8008b56:	3714      	adds	r7, #20
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr

08008b60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b087      	sub	sp, #28
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	60f8      	str	r0, [r7, #12]
 8008b68:	60b9      	str	r1, [r7, #8]
 8008b6a:	607a      	str	r2, [r7, #4]
 8008b6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	689b      	ldr	r3, [r3, #8]
 8008b72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	021a      	lsls	r2, r3, #8
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	431a      	orrs	r2, r3
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	4313      	orrs	r3, r2
 8008b88:	697a      	ldr	r2, [r7, #20]
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	697a      	ldr	r2, [r7, #20]
 8008b92:	609a      	str	r2, [r3, #8]
}
 8008b94:	bf00      	nop
 8008b96:	371c      	adds	r7, #28
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr

08008ba0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b087      	sub	sp, #28
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	60f8      	str	r0, [r7, #12]
 8008ba8:	60b9      	str	r1, [r7, #8]
 8008baa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	f003 031f 	and.w	r3, r3, #31
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8008bb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	6a1a      	ldr	r2, [r3, #32]
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	43db      	mvns	r3, r3
 8008bc2:	401a      	ands	r2, r3
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6a1a      	ldr	r2, [r3, #32]
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	f003 031f 	and.w	r3, r3, #31
 8008bd2:	6879      	ldr	r1, [r7, #4]
 8008bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8008bd8:	431a      	orrs	r2, r3
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	621a      	str	r2, [r3, #32]
}
 8008bde:	bf00      	nop
 8008be0:	371c      	adds	r7, #28
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr
	...

08008bec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b085      	sub	sp, #20
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d101      	bne.n	8008c04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c00:	2302      	movs	r3, #2
 8008c02:	e068      	b.n	8008cd6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2201      	movs	r2, #1
 8008c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2202      	movs	r2, #2
 8008c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	689b      	ldr	r3, [r3, #8]
 8008c22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4a2e      	ldr	r2, [pc, #184]	; (8008ce4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d004      	beq.n	8008c38 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	4a2d      	ldr	r2, [pc, #180]	; (8008ce8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d108      	bne.n	8008c4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008c3e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	68fa      	ldr	r2, [r7, #12]
 8008c46:	4313      	orrs	r3, r2
 8008c48:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c50:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	68fa      	ldr	r2, [r7, #12]
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	68fa      	ldr	r2, [r7, #12]
 8008c62:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a1e      	ldr	r2, [pc, #120]	; (8008ce4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d01d      	beq.n	8008caa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c76:	d018      	beq.n	8008caa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a1b      	ldr	r2, [pc, #108]	; (8008cec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d013      	beq.n	8008caa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a1a      	ldr	r2, [pc, #104]	; (8008cf0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d00e      	beq.n	8008caa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a18      	ldr	r2, [pc, #96]	; (8008cf4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d009      	beq.n	8008caa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4a13      	ldr	r2, [pc, #76]	; (8008ce8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d004      	beq.n	8008caa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a14      	ldr	r2, [pc, #80]	; (8008cf8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d10c      	bne.n	8008cc4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008cb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	689b      	ldr	r3, [r3, #8]
 8008cb6:	68ba      	ldr	r2, [r7, #8]
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	68ba      	ldr	r2, [r7, #8]
 8008cc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008cd4:	2300      	movs	r3, #0
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3714      	adds	r7, #20
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce0:	4770      	bx	lr
 8008ce2:	bf00      	nop
 8008ce4:	40012c00 	.word	0x40012c00
 8008ce8:	40013400 	.word	0x40013400
 8008cec:	40000400 	.word	0x40000400
 8008cf0:	40000800 	.word	0x40000800
 8008cf4:	40000c00 	.word	0x40000c00
 8008cf8:	40014000 	.word	0x40014000

08008cfc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b085      	sub	sp, #20
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008d06:	2300      	movs	r3, #0
 8008d08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	d101      	bne.n	8008d18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008d14:	2302      	movs	r3, #2
 8008d16:	e065      	b.n	8008de4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	68db      	ldr	r3, [r3, #12]
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	689b      	ldr	r3, [r3, #8]
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	4313      	orrs	r3, r2
 8008d48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4313      	orrs	r3, r2
 8008d56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	691b      	ldr	r3, [r3, #16]
 8008d62:	4313      	orrs	r3, r2
 8008d64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	695b      	ldr	r3, [r3, #20]
 8008d70:	4313      	orrs	r3, r2
 8008d72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	699b      	ldr	r3, [r3, #24]
 8008d8c:	041b      	lsls	r3, r3, #16
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a16      	ldr	r2, [pc, #88]	; (8008df0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d004      	beq.n	8008da6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a14      	ldr	r2, [pc, #80]	; (8008df4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d115      	bne.n	8008dd2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db0:	051b      	lsls	r3, r3, #20
 8008db2:	4313      	orrs	r3, r2
 8008db4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	69db      	ldr	r3, [r3, #28]
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	6a1b      	ldr	r3, [r3, #32]
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	68fa      	ldr	r2, [r7, #12]
 8008dd8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008de2:	2300      	movs	r3, #0
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3714      	adds	r7, #20
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr
 8008df0:	40012c00 	.word	0x40012c00
 8008df4:	40013400 	.word	0x40013400

08008df8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b083      	sub	sp, #12
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008e00:	bf00      	nop
 8008e02:	370c      	adds	r7, #12
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008e14:	bf00      	nop
 8008e16:	370c      	adds	r7, #12
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr

08008e20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b083      	sub	sp, #12
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008e28:	bf00      	nop
 8008e2a:	370c      	adds	r7, #12
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr

08008e34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b082      	sub	sp, #8
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d101      	bne.n	8008e46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	e042      	b.n	8008ecc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d106      	bne.n	8008e5e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2200      	movs	r2, #0
 8008e54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f7fa febf 	bl	8003bdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2224      	movs	r2, #36	; 0x24
 8008e62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	681a      	ldr	r2, [r3, #0]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f022 0201 	bic.w	r2, r2, #1
 8008e74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 fc02 	bl	8009680 <UART_SetConfig>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	d101      	bne.n	8008e86 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008e82:	2301      	movs	r3, #1
 8008e84:	e022      	b.n	8008ecc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d002      	beq.n	8008e94 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 fef2 	bl	8009c78 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	685a      	ldr	r2, [r3, #4]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008ea2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	689a      	ldr	r2, [r3, #8]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008eb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	681a      	ldr	r2, [r3, #0]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f042 0201 	orr.w	r2, r2, #1
 8008ec2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f000 ff79 	bl	8009dbc <UART_CheckIdleState>
 8008eca:	4603      	mov	r3, r0
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3708      	adds	r7, #8
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}

08008ed4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b08a      	sub	sp, #40	; 0x28
 8008ed8:	af02      	add	r7, sp, #8
 8008eda:	60f8      	str	r0, [r7, #12]
 8008edc:	60b9      	str	r1, [r7, #8]
 8008ede:	603b      	str	r3, [r7, #0]
 8008ee0:	4613      	mov	r3, r2
 8008ee2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008eea:	2b20      	cmp	r3, #32
 8008eec:	f040 8083 	bne.w	8008ff6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d002      	beq.n	8008efc <HAL_UART_Transmit+0x28>
 8008ef6:	88fb      	ldrh	r3, [r7, #6]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d101      	bne.n	8008f00 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008efc:	2301      	movs	r3, #1
 8008efe:	e07b      	b.n	8008ff8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008f06:	2b01      	cmp	r3, #1
 8008f08:	d101      	bne.n	8008f0e <HAL_UART_Transmit+0x3a>
 8008f0a:	2302      	movs	r3, #2
 8008f0c:	e074      	b.n	8008ff8 <HAL_UART_Transmit+0x124>
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2201      	movs	r2, #1
 8008f12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2221      	movs	r2, #33	; 0x21
 8008f22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008f26:	f7fa ffb9 	bl	8003e9c <HAL_GetTick>
 8008f2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	88fa      	ldrh	r2, [r7, #6]
 8008f30:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	88fa      	ldrh	r2, [r7, #6]
 8008f38:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f44:	d108      	bne.n	8008f58 <HAL_UART_Transmit+0x84>
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	691b      	ldr	r3, [r3, #16]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d104      	bne.n	8008f58 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	61bb      	str	r3, [r7, #24]
 8008f56:	e003      	b.n	8008f60 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2200      	movs	r2, #0
 8008f64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8008f68:	e02c      	b.n	8008fc4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	9300      	str	r3, [sp, #0]
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	2200      	movs	r2, #0
 8008f72:	2180      	movs	r1, #128	; 0x80
 8008f74:	68f8      	ldr	r0, [r7, #12]
 8008f76:	f000 ff6c 	bl	8009e52 <UART_WaitOnFlagUntilTimeout>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d001      	beq.n	8008f84 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8008f80:	2303      	movs	r3, #3
 8008f82:	e039      	b.n	8008ff8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008f84:	69fb      	ldr	r3, [r7, #28]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d10b      	bne.n	8008fa2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008f8a:	69bb      	ldr	r3, [r7, #24]
 8008f8c:	881b      	ldrh	r3, [r3, #0]
 8008f8e:	461a      	mov	r2, r3
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f98:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008f9a:	69bb      	ldr	r3, [r7, #24]
 8008f9c:	3302      	adds	r3, #2
 8008f9e:	61bb      	str	r3, [r7, #24]
 8008fa0:	e007      	b.n	8008fb2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008fa2:	69fb      	ldr	r3, [r7, #28]
 8008fa4:	781a      	ldrb	r2, [r3, #0]
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008fac:	69fb      	ldr	r3, [r7, #28]
 8008fae:	3301      	adds	r3, #1
 8008fb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	3b01      	subs	r3, #1
 8008fbc:	b29a      	uxth	r2, r3
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d1cc      	bne.n	8008f6a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	9300      	str	r3, [sp, #0]
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	2140      	movs	r1, #64	; 0x40
 8008fda:	68f8      	ldr	r0, [r7, #12]
 8008fdc:	f000 ff39 	bl	8009e52 <UART_WaitOnFlagUntilTimeout>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d001      	beq.n	8008fea <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008fe6:	2303      	movs	r3, #3
 8008fe8:	e006      	b.n	8008ff8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2220      	movs	r2, #32
 8008fee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	e000      	b.n	8008ff8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008ff6:	2302      	movs	r3, #2
  }
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3720      	adds	r7, #32
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b0ba      	sub	sp, #232	; 0xe8
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	69db      	ldr	r3, [r3, #28]
 800900e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	689b      	ldr	r3, [r3, #8]
 8009022:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009026:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800902a:	f640 030f 	movw	r3, #2063	; 0x80f
 800902e:	4013      	ands	r3, r2
 8009030:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009034:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009038:	2b00      	cmp	r3, #0
 800903a:	d11b      	bne.n	8009074 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800903c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009040:	f003 0320 	and.w	r3, r3, #32
 8009044:	2b00      	cmp	r3, #0
 8009046:	d015      	beq.n	8009074 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800904c:	f003 0320 	and.w	r3, r3, #32
 8009050:	2b00      	cmp	r3, #0
 8009052:	d105      	bne.n	8009060 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009054:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800905c:	2b00      	cmp	r3, #0
 800905e:	d009      	beq.n	8009074 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009064:	2b00      	cmp	r3, #0
 8009066:	f000 82d6 	beq.w	8009616 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	4798      	blx	r3
      }
      return;
 8009072:	e2d0      	b.n	8009616 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8009074:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009078:	2b00      	cmp	r3, #0
 800907a:	f000 811f 	beq.w	80092bc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800907e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009082:	4b8b      	ldr	r3, [pc, #556]	; (80092b0 <HAL_UART_IRQHandler+0x2b0>)
 8009084:	4013      	ands	r3, r2
 8009086:	2b00      	cmp	r3, #0
 8009088:	d106      	bne.n	8009098 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800908a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800908e:	4b89      	ldr	r3, [pc, #548]	; (80092b4 <HAL_UART_IRQHandler+0x2b4>)
 8009090:	4013      	ands	r3, r2
 8009092:	2b00      	cmp	r3, #0
 8009094:	f000 8112 	beq.w	80092bc <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800909c:	f003 0301 	and.w	r3, r3, #1
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d011      	beq.n	80090c8 <HAL_UART_IRQHandler+0xc8>
 80090a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d00b      	beq.n	80090c8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	2201      	movs	r2, #1
 80090b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090be:	f043 0201 	orr.w	r2, r3, #1
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80090c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090cc:	f003 0302 	and.w	r3, r3, #2
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d011      	beq.n	80090f8 <HAL_UART_IRQHandler+0xf8>
 80090d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80090d8:	f003 0301 	and.w	r3, r3, #1
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d00b      	beq.n	80090f8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	2202      	movs	r2, #2
 80090e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090ee:	f043 0204 	orr.w	r2, r3, #4
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80090f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090fc:	f003 0304 	and.w	r3, r3, #4
 8009100:	2b00      	cmp	r3, #0
 8009102:	d011      	beq.n	8009128 <HAL_UART_IRQHandler+0x128>
 8009104:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009108:	f003 0301 	and.w	r3, r3, #1
 800910c:	2b00      	cmp	r3, #0
 800910e:	d00b      	beq.n	8009128 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	2204      	movs	r2, #4
 8009116:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800911e:	f043 0202 	orr.w	r2, r3, #2
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800912c:	f003 0308 	and.w	r3, r3, #8
 8009130:	2b00      	cmp	r3, #0
 8009132:	d017      	beq.n	8009164 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009138:	f003 0320 	and.w	r3, r3, #32
 800913c:	2b00      	cmp	r3, #0
 800913e:	d105      	bne.n	800914c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009140:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009144:	4b5a      	ldr	r3, [pc, #360]	; (80092b0 <HAL_UART_IRQHandler+0x2b0>)
 8009146:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009148:	2b00      	cmp	r3, #0
 800914a:	d00b      	beq.n	8009164 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	2208      	movs	r2, #8
 8009152:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800915a:	f043 0208 	orr.w	r2, r3, #8
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009168:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800916c:	2b00      	cmp	r3, #0
 800916e:	d012      	beq.n	8009196 <HAL_UART_IRQHandler+0x196>
 8009170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009174:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009178:	2b00      	cmp	r3, #0
 800917a:	d00c      	beq.n	8009196 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009184:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800918c:	f043 0220 	orr.w	r2, r3, #32
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800919c:	2b00      	cmp	r3, #0
 800919e:	f000 823c 	beq.w	800961a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80091a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091a6:	f003 0320 	and.w	r3, r3, #32
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d013      	beq.n	80091d6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80091ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091b2:	f003 0320 	and.w	r3, r3, #32
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d105      	bne.n	80091c6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80091ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80091be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d007      	beq.n	80091d6 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d003      	beq.n	80091d6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	689b      	ldr	r3, [r3, #8]
 80091e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091ea:	2b40      	cmp	r3, #64	; 0x40
 80091ec:	d005      	beq.n	80091fa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80091ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80091f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d04f      	beq.n	800929a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 ffdb 	bl	800a1b6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	689b      	ldr	r3, [r3, #8]
 8009206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800920a:	2b40      	cmp	r3, #64	; 0x40
 800920c:	d141      	bne.n	8009292 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	3308      	adds	r3, #8
 8009214:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009218:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800921c:	e853 3f00 	ldrex	r3, [r3]
 8009220:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009224:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009228:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800922c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	3308      	adds	r3, #8
 8009236:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800923a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800923e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009242:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009246:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800924a:	e841 2300 	strex	r3, r2, [r1]
 800924e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009252:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009256:	2b00      	cmp	r3, #0
 8009258:	d1d9      	bne.n	800920e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800925e:	2b00      	cmp	r3, #0
 8009260:	d013      	beq.n	800928a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009266:	4a14      	ldr	r2, [pc, #80]	; (80092b8 <HAL_UART_IRQHandler+0x2b8>)
 8009268:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800926e:	4618      	mov	r0, r3
 8009270:	f7fb f8d5 	bl	800441e <HAL_DMA_Abort_IT>
 8009274:	4603      	mov	r3, r0
 8009276:	2b00      	cmp	r3, #0
 8009278:	d017      	beq.n	80092aa <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800927e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009280:	687a      	ldr	r2, [r7, #4]
 8009282:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8009284:	4610      	mov	r0, r2
 8009286:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009288:	e00f      	b.n	80092aa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 f9ee 	bl	800966c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009290:	e00b      	b.n	80092aa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f000 f9ea 	bl	800966c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009298:	e007      	b.n	80092aa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 f9e6 	bl	800966c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2200      	movs	r2, #0
 80092a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80092a8:	e1b7      	b.n	800961a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092aa:	bf00      	nop
    return;
 80092ac:	e1b5      	b.n	800961a <HAL_UART_IRQHandler+0x61a>
 80092ae:	bf00      	nop
 80092b0:	10000001 	.word	0x10000001
 80092b4:	04000120 	.word	0x04000120
 80092b8:	0800a461 	.word	0x0800a461

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	f040 814a 	bne.w	800955a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80092c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092ca:	f003 0310 	and.w	r3, r3, #16
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	f000 8143 	beq.w	800955a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80092d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092d8:	f003 0310 	and.w	r3, r3, #16
 80092dc:	2b00      	cmp	r3, #0
 80092de:	f000 813c 	beq.w	800955a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	2210      	movs	r2, #16
 80092e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092f4:	2b40      	cmp	r3, #64	; 0x40
 80092f6:	f040 80b5 	bne.w	8009464 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009306:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800930a:	2b00      	cmp	r3, #0
 800930c:	f000 8187 	beq.w	800961e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009316:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800931a:	429a      	cmp	r2, r3
 800931c:	f080 817f 	bcs.w	800961e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009326:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f003 0320 	and.w	r3, r3, #32
 8009336:	2b00      	cmp	r3, #0
 8009338:	f040 8086 	bne.w	8009448 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009344:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009348:	e853 3f00 	ldrex	r3, [r3]
 800934c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009350:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009354:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009358:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	461a      	mov	r2, r3
 8009362:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009366:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800936a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800936e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009372:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009376:	e841 2300 	strex	r3, r2, [r1]
 800937a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800937e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009382:	2b00      	cmp	r3, #0
 8009384:	d1da      	bne.n	800933c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	3308      	adds	r3, #8
 800938c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800938e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009390:	e853 3f00 	ldrex	r3, [r3]
 8009394:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009396:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009398:	f023 0301 	bic.w	r3, r3, #1
 800939c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	3308      	adds	r3, #8
 80093a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80093aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80093ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80093b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80093b6:	e841 2300 	strex	r3, r2, [r1]
 80093ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80093bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d1e1      	bne.n	8009386 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	3308      	adds	r3, #8
 80093c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80093cc:	e853 3f00 	ldrex	r3, [r3]
 80093d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80093d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	3308      	adds	r3, #8
 80093e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80093e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80093e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80093ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80093ee:	e841 2300 	strex	r3, r2, [r1]
 80093f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80093f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d1e3      	bne.n	80093c2 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2220      	movs	r2, #32
 80093fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2200      	movs	r2, #0
 8009406:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800940e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009410:	e853 3f00 	ldrex	r3, [r3]
 8009414:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009418:	f023 0310 	bic.w	r3, r3, #16
 800941c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	461a      	mov	r2, r3
 8009426:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800942a:	65bb      	str	r3, [r7, #88]	; 0x58
 800942c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800942e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009430:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009432:	e841 2300 	strex	r3, r2, [r1]
 8009436:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009438:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800943a:	2b00      	cmp	r3, #0
 800943c:	d1e4      	bne.n	8009408 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009442:	4618      	mov	r0, r3
 8009444:	f7fa ff8f 	bl	8004366 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009454:	b29b      	uxth	r3, r3
 8009456:	1ad3      	subs	r3, r2, r3
 8009458:	b29b      	uxth	r3, r3
 800945a:	4619      	mov	r1, r3
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f7f9 f8c9 	bl	80025f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009462:	e0dc      	b.n	800961e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009470:	b29b      	uxth	r3, r3
 8009472:	1ad3      	subs	r3, r2, r3
 8009474:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800947e:	b29b      	uxth	r3, r3
 8009480:	2b00      	cmp	r3, #0
 8009482:	f000 80ce 	beq.w	8009622 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8009486:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800948a:	2b00      	cmp	r3, #0
 800948c:	f000 80c9 	beq.w	8009622 <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009498:	e853 3f00 	ldrex	r3, [r3]
 800949c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800949e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80094a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	461a      	mov	r2, r3
 80094ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80094b2:	647b      	str	r3, [r7, #68]	; 0x44
 80094b4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80094b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80094ba:	e841 2300 	strex	r3, r2, [r1]
 80094be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80094c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d1e4      	bne.n	8009490 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	3308      	adds	r3, #8
 80094cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d0:	e853 3f00 	ldrex	r3, [r3]
 80094d4:	623b      	str	r3, [r7, #32]
   return(result);
 80094d6:	6a3b      	ldr	r3, [r7, #32]
 80094d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80094dc:	f023 0301 	bic.w	r3, r3, #1
 80094e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	3308      	adds	r3, #8
 80094ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80094ee:	633a      	str	r2, [r7, #48]	; 0x30
 80094f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094f6:	e841 2300 	strex	r3, r2, [r1]
 80094fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80094fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d1e1      	bne.n	80094c6 <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2220      	movs	r2, #32
 8009506:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2200      	movs	r2, #0
 800950e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2200      	movs	r2, #0
 8009514:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	e853 3f00 	ldrex	r3, [r3]
 8009522:	60fb      	str	r3, [r7, #12]
   return(result);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f023 0310 	bic.w	r3, r3, #16
 800952a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	461a      	mov	r2, r3
 8009534:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009538:	61fb      	str	r3, [r7, #28]
 800953a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800953c:	69b9      	ldr	r1, [r7, #24]
 800953e:	69fa      	ldr	r2, [r7, #28]
 8009540:	e841 2300 	strex	r3, r2, [r1]
 8009544:	617b      	str	r3, [r7, #20]
   return(result);
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d1e4      	bne.n	8009516 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800954c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009550:	4619      	mov	r1, r3
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f7f9 f84e 	bl	80025f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009558:	e063      	b.n	8009622 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800955a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800955e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009562:	2b00      	cmp	r3, #0
 8009564:	d00e      	beq.n	8009584 <HAL_UART_IRQHandler+0x584>
 8009566:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800956a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800956e:	2b00      	cmp	r3, #0
 8009570:	d008      	beq.n	8009584 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800957a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 ffb0 	bl	800a4e2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009582:	e051      	b.n	8009628 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800958c:	2b00      	cmp	r3, #0
 800958e:	d014      	beq.n	80095ba <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009598:	2b00      	cmp	r3, #0
 800959a:	d105      	bne.n	80095a8 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800959c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d008      	beq.n	80095ba <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d03a      	beq.n	8009626 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	4798      	blx	r3
    }
    return;
 80095b8:	e035      	b.n	8009626 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80095ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d009      	beq.n	80095da <HAL_UART_IRQHandler+0x5da>
 80095c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d003      	beq.n	80095da <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f000 ff5a 	bl	800a48c <UART_EndTransmit_IT>
    return;
 80095d8:	e026      	b.n	8009628 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80095da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d009      	beq.n	80095fa <HAL_UART_IRQHandler+0x5fa>
 80095e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095ea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d003      	beq.n	80095fa <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f000 ff89 	bl	800a50a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80095f8:	e016      	b.n	8009628 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80095fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009602:	2b00      	cmp	r3, #0
 8009604:	d010      	beq.n	8009628 <HAL_UART_IRQHandler+0x628>
 8009606:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800960a:	2b00      	cmp	r3, #0
 800960c:	da0c      	bge.n	8009628 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f000 ff71 	bl	800a4f6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009614:	e008      	b.n	8009628 <HAL_UART_IRQHandler+0x628>
      return;
 8009616:	bf00      	nop
 8009618:	e006      	b.n	8009628 <HAL_UART_IRQHandler+0x628>
    return;
 800961a:	bf00      	nop
 800961c:	e004      	b.n	8009628 <HAL_UART_IRQHandler+0x628>
      return;
 800961e:	bf00      	nop
 8009620:	e002      	b.n	8009628 <HAL_UART_IRQHandler+0x628>
      return;
 8009622:	bf00      	nop
 8009624:	e000      	b.n	8009628 <HAL_UART_IRQHandler+0x628>
    return;
 8009626:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8009628:	37e8      	adds	r7, #232	; 0xe8
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}
 800962e:	bf00      	nop

08009630 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009630:	b480      	push	{r7}
 8009632:	b083      	sub	sp, #12
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009638:	bf00      	nop
 800963a:	370c      	adds	r7, #12
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr

08009644 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009644:	b480      	push	{r7}
 8009646:	b083      	sub	sp, #12
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800964c:	bf00      	nop
 800964e:	370c      	adds	r7, #12
 8009650:	46bd      	mov	sp, r7
 8009652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009656:	4770      	bx	lr

08009658 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009658:	b480      	push	{r7}
 800965a:	b083      	sub	sp, #12
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009660:	bf00      	nop
 8009662:	370c      	adds	r7, #12
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr

0800966c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800966c:	b480      	push	{r7}
 800966e:	b083      	sub	sp, #12
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009674:	bf00      	nop
 8009676:	370c      	adds	r7, #12
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009680:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009684:	b08c      	sub	sp, #48	; 0x30
 8009686:	af00      	add	r7, sp, #0
 8009688:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800968a:	2300      	movs	r3, #0
 800968c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	689a      	ldr	r2, [r3, #8]
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	691b      	ldr	r3, [r3, #16]
 8009698:	431a      	orrs	r2, r3
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	695b      	ldr	r3, [r3, #20]
 800969e:	431a      	orrs	r2, r3
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	69db      	ldr	r3, [r3, #28]
 80096a4:	4313      	orrs	r3, r2
 80096a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	681a      	ldr	r2, [r3, #0]
 80096ae:	4baa      	ldr	r3, [pc, #680]	; (8009958 <UART_SetConfig+0x2d8>)
 80096b0:	4013      	ands	r3, r2
 80096b2:	697a      	ldr	r2, [r7, #20]
 80096b4:	6812      	ldr	r2, [r2, #0]
 80096b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80096b8:	430b      	orrs	r3, r1
 80096ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	68da      	ldr	r2, [r3, #12]
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	430a      	orrs	r2, r1
 80096d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	699b      	ldr	r3, [r3, #24]
 80096d6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4a9f      	ldr	r2, [pc, #636]	; (800995c <UART_SetConfig+0x2dc>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d004      	beq.n	80096ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	6a1b      	ldr	r3, [r3, #32]
 80096e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096e8:	4313      	orrs	r3, r2
 80096ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	689b      	ldr	r3, [r3, #8]
 80096f2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80096f6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80096fa:	697a      	ldr	r2, [r7, #20]
 80096fc:	6812      	ldr	r2, [r2, #0]
 80096fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009700:	430b      	orrs	r3, r1
 8009702:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800970a:	f023 010f 	bic.w	r1, r3, #15
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	430a      	orrs	r2, r1
 8009718:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	4a90      	ldr	r2, [pc, #576]	; (8009960 <UART_SetConfig+0x2e0>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d125      	bne.n	8009770 <UART_SetConfig+0xf0>
 8009724:	4b8f      	ldr	r3, [pc, #572]	; (8009964 <UART_SetConfig+0x2e4>)
 8009726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800972a:	f003 0303 	and.w	r3, r3, #3
 800972e:	2b03      	cmp	r3, #3
 8009730:	d81a      	bhi.n	8009768 <UART_SetConfig+0xe8>
 8009732:	a201      	add	r2, pc, #4	; (adr r2, 8009738 <UART_SetConfig+0xb8>)
 8009734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009738:	08009749 	.word	0x08009749
 800973c:	08009759 	.word	0x08009759
 8009740:	08009751 	.word	0x08009751
 8009744:	08009761 	.word	0x08009761
 8009748:	2301      	movs	r3, #1
 800974a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800974e:	e116      	b.n	800997e <UART_SetConfig+0x2fe>
 8009750:	2302      	movs	r3, #2
 8009752:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009756:	e112      	b.n	800997e <UART_SetConfig+0x2fe>
 8009758:	2304      	movs	r3, #4
 800975a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800975e:	e10e      	b.n	800997e <UART_SetConfig+0x2fe>
 8009760:	2308      	movs	r3, #8
 8009762:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009766:	e10a      	b.n	800997e <UART_SetConfig+0x2fe>
 8009768:	2310      	movs	r3, #16
 800976a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800976e:	e106      	b.n	800997e <UART_SetConfig+0x2fe>
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4a7c      	ldr	r2, [pc, #496]	; (8009968 <UART_SetConfig+0x2e8>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d138      	bne.n	80097ec <UART_SetConfig+0x16c>
 800977a:	4b7a      	ldr	r3, [pc, #488]	; (8009964 <UART_SetConfig+0x2e4>)
 800977c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009780:	f003 030c 	and.w	r3, r3, #12
 8009784:	2b0c      	cmp	r3, #12
 8009786:	d82d      	bhi.n	80097e4 <UART_SetConfig+0x164>
 8009788:	a201      	add	r2, pc, #4	; (adr r2, 8009790 <UART_SetConfig+0x110>)
 800978a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800978e:	bf00      	nop
 8009790:	080097c5 	.word	0x080097c5
 8009794:	080097e5 	.word	0x080097e5
 8009798:	080097e5 	.word	0x080097e5
 800979c:	080097e5 	.word	0x080097e5
 80097a0:	080097d5 	.word	0x080097d5
 80097a4:	080097e5 	.word	0x080097e5
 80097a8:	080097e5 	.word	0x080097e5
 80097ac:	080097e5 	.word	0x080097e5
 80097b0:	080097cd 	.word	0x080097cd
 80097b4:	080097e5 	.word	0x080097e5
 80097b8:	080097e5 	.word	0x080097e5
 80097bc:	080097e5 	.word	0x080097e5
 80097c0:	080097dd 	.word	0x080097dd
 80097c4:	2300      	movs	r3, #0
 80097c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097ca:	e0d8      	b.n	800997e <UART_SetConfig+0x2fe>
 80097cc:	2302      	movs	r3, #2
 80097ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097d2:	e0d4      	b.n	800997e <UART_SetConfig+0x2fe>
 80097d4:	2304      	movs	r3, #4
 80097d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097da:	e0d0      	b.n	800997e <UART_SetConfig+0x2fe>
 80097dc:	2308      	movs	r3, #8
 80097de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097e2:	e0cc      	b.n	800997e <UART_SetConfig+0x2fe>
 80097e4:	2310      	movs	r3, #16
 80097e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097ea:	e0c8      	b.n	800997e <UART_SetConfig+0x2fe>
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4a5e      	ldr	r2, [pc, #376]	; (800996c <UART_SetConfig+0x2ec>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d125      	bne.n	8009842 <UART_SetConfig+0x1c2>
 80097f6:	4b5b      	ldr	r3, [pc, #364]	; (8009964 <UART_SetConfig+0x2e4>)
 80097f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097fc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009800:	2b30      	cmp	r3, #48	; 0x30
 8009802:	d016      	beq.n	8009832 <UART_SetConfig+0x1b2>
 8009804:	2b30      	cmp	r3, #48	; 0x30
 8009806:	d818      	bhi.n	800983a <UART_SetConfig+0x1ba>
 8009808:	2b20      	cmp	r3, #32
 800980a:	d00a      	beq.n	8009822 <UART_SetConfig+0x1a2>
 800980c:	2b20      	cmp	r3, #32
 800980e:	d814      	bhi.n	800983a <UART_SetConfig+0x1ba>
 8009810:	2b00      	cmp	r3, #0
 8009812:	d002      	beq.n	800981a <UART_SetConfig+0x19a>
 8009814:	2b10      	cmp	r3, #16
 8009816:	d008      	beq.n	800982a <UART_SetConfig+0x1aa>
 8009818:	e00f      	b.n	800983a <UART_SetConfig+0x1ba>
 800981a:	2300      	movs	r3, #0
 800981c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009820:	e0ad      	b.n	800997e <UART_SetConfig+0x2fe>
 8009822:	2302      	movs	r3, #2
 8009824:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009828:	e0a9      	b.n	800997e <UART_SetConfig+0x2fe>
 800982a:	2304      	movs	r3, #4
 800982c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009830:	e0a5      	b.n	800997e <UART_SetConfig+0x2fe>
 8009832:	2308      	movs	r3, #8
 8009834:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009838:	e0a1      	b.n	800997e <UART_SetConfig+0x2fe>
 800983a:	2310      	movs	r3, #16
 800983c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009840:	e09d      	b.n	800997e <UART_SetConfig+0x2fe>
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4a4a      	ldr	r2, [pc, #296]	; (8009970 <UART_SetConfig+0x2f0>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d125      	bne.n	8009898 <UART_SetConfig+0x218>
 800984c:	4b45      	ldr	r3, [pc, #276]	; (8009964 <UART_SetConfig+0x2e4>)
 800984e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009852:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009856:	2bc0      	cmp	r3, #192	; 0xc0
 8009858:	d016      	beq.n	8009888 <UART_SetConfig+0x208>
 800985a:	2bc0      	cmp	r3, #192	; 0xc0
 800985c:	d818      	bhi.n	8009890 <UART_SetConfig+0x210>
 800985e:	2b80      	cmp	r3, #128	; 0x80
 8009860:	d00a      	beq.n	8009878 <UART_SetConfig+0x1f8>
 8009862:	2b80      	cmp	r3, #128	; 0x80
 8009864:	d814      	bhi.n	8009890 <UART_SetConfig+0x210>
 8009866:	2b00      	cmp	r3, #0
 8009868:	d002      	beq.n	8009870 <UART_SetConfig+0x1f0>
 800986a:	2b40      	cmp	r3, #64	; 0x40
 800986c:	d008      	beq.n	8009880 <UART_SetConfig+0x200>
 800986e:	e00f      	b.n	8009890 <UART_SetConfig+0x210>
 8009870:	2300      	movs	r3, #0
 8009872:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009876:	e082      	b.n	800997e <UART_SetConfig+0x2fe>
 8009878:	2302      	movs	r3, #2
 800987a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800987e:	e07e      	b.n	800997e <UART_SetConfig+0x2fe>
 8009880:	2304      	movs	r3, #4
 8009882:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009886:	e07a      	b.n	800997e <UART_SetConfig+0x2fe>
 8009888:	2308      	movs	r3, #8
 800988a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800988e:	e076      	b.n	800997e <UART_SetConfig+0x2fe>
 8009890:	2310      	movs	r3, #16
 8009892:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009896:	e072      	b.n	800997e <UART_SetConfig+0x2fe>
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4a35      	ldr	r2, [pc, #212]	; (8009974 <UART_SetConfig+0x2f4>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d12a      	bne.n	80098f8 <UART_SetConfig+0x278>
 80098a2:	4b30      	ldr	r3, [pc, #192]	; (8009964 <UART_SetConfig+0x2e4>)
 80098a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80098b0:	d01a      	beq.n	80098e8 <UART_SetConfig+0x268>
 80098b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80098b6:	d81b      	bhi.n	80098f0 <UART_SetConfig+0x270>
 80098b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098bc:	d00c      	beq.n	80098d8 <UART_SetConfig+0x258>
 80098be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098c2:	d815      	bhi.n	80098f0 <UART_SetConfig+0x270>
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d003      	beq.n	80098d0 <UART_SetConfig+0x250>
 80098c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098cc:	d008      	beq.n	80098e0 <UART_SetConfig+0x260>
 80098ce:	e00f      	b.n	80098f0 <UART_SetConfig+0x270>
 80098d0:	2300      	movs	r3, #0
 80098d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098d6:	e052      	b.n	800997e <UART_SetConfig+0x2fe>
 80098d8:	2302      	movs	r3, #2
 80098da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098de:	e04e      	b.n	800997e <UART_SetConfig+0x2fe>
 80098e0:	2304      	movs	r3, #4
 80098e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098e6:	e04a      	b.n	800997e <UART_SetConfig+0x2fe>
 80098e8:	2308      	movs	r3, #8
 80098ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098ee:	e046      	b.n	800997e <UART_SetConfig+0x2fe>
 80098f0:	2310      	movs	r3, #16
 80098f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098f6:	e042      	b.n	800997e <UART_SetConfig+0x2fe>
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4a17      	ldr	r2, [pc, #92]	; (800995c <UART_SetConfig+0x2dc>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d13a      	bne.n	8009978 <UART_SetConfig+0x2f8>
 8009902:	4b18      	ldr	r3, [pc, #96]	; (8009964 <UART_SetConfig+0x2e4>)
 8009904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009908:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800990c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009910:	d01a      	beq.n	8009948 <UART_SetConfig+0x2c8>
 8009912:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009916:	d81b      	bhi.n	8009950 <UART_SetConfig+0x2d0>
 8009918:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800991c:	d00c      	beq.n	8009938 <UART_SetConfig+0x2b8>
 800991e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009922:	d815      	bhi.n	8009950 <UART_SetConfig+0x2d0>
 8009924:	2b00      	cmp	r3, #0
 8009926:	d003      	beq.n	8009930 <UART_SetConfig+0x2b0>
 8009928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800992c:	d008      	beq.n	8009940 <UART_SetConfig+0x2c0>
 800992e:	e00f      	b.n	8009950 <UART_SetConfig+0x2d0>
 8009930:	2300      	movs	r3, #0
 8009932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009936:	e022      	b.n	800997e <UART_SetConfig+0x2fe>
 8009938:	2302      	movs	r3, #2
 800993a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800993e:	e01e      	b.n	800997e <UART_SetConfig+0x2fe>
 8009940:	2304      	movs	r3, #4
 8009942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009946:	e01a      	b.n	800997e <UART_SetConfig+0x2fe>
 8009948:	2308      	movs	r3, #8
 800994a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800994e:	e016      	b.n	800997e <UART_SetConfig+0x2fe>
 8009950:	2310      	movs	r3, #16
 8009952:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009956:	e012      	b.n	800997e <UART_SetConfig+0x2fe>
 8009958:	cfff69f3 	.word	0xcfff69f3
 800995c:	40008000 	.word	0x40008000
 8009960:	40013800 	.word	0x40013800
 8009964:	40021000 	.word	0x40021000
 8009968:	40004400 	.word	0x40004400
 800996c:	40004800 	.word	0x40004800
 8009970:	40004c00 	.word	0x40004c00
 8009974:	40005000 	.word	0x40005000
 8009978:	2310      	movs	r3, #16
 800997a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4aae      	ldr	r2, [pc, #696]	; (8009c3c <UART_SetConfig+0x5bc>)
 8009984:	4293      	cmp	r3, r2
 8009986:	f040 8097 	bne.w	8009ab8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800998a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800998e:	2b08      	cmp	r3, #8
 8009990:	d823      	bhi.n	80099da <UART_SetConfig+0x35a>
 8009992:	a201      	add	r2, pc, #4	; (adr r2, 8009998 <UART_SetConfig+0x318>)
 8009994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009998:	080099bd 	.word	0x080099bd
 800999c:	080099db 	.word	0x080099db
 80099a0:	080099c5 	.word	0x080099c5
 80099a4:	080099db 	.word	0x080099db
 80099a8:	080099cb 	.word	0x080099cb
 80099ac:	080099db 	.word	0x080099db
 80099b0:	080099db 	.word	0x080099db
 80099b4:	080099db 	.word	0x080099db
 80099b8:	080099d3 	.word	0x080099d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80099bc:	f7fb ffdc 	bl	8005978 <HAL_RCC_GetPCLK1Freq>
 80099c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80099c2:	e010      	b.n	80099e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80099c4:	4b9e      	ldr	r3, [pc, #632]	; (8009c40 <UART_SetConfig+0x5c0>)
 80099c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80099c8:	e00d      	b.n	80099e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80099ca:	f7fb ff3d 	bl	8005848 <HAL_RCC_GetSysClockFreq>
 80099ce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80099d0:	e009      	b.n	80099e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80099d8:	e005      	b.n	80099e6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80099da:	2300      	movs	r3, #0
 80099dc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80099de:	2301      	movs	r3, #1
 80099e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80099e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80099e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	f000 8130 	beq.w	8009c4e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f2:	4a94      	ldr	r2, [pc, #592]	; (8009c44 <UART_SetConfig+0x5c4>)
 80099f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099f8:	461a      	mov	r2, r3
 80099fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a00:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	685a      	ldr	r2, [r3, #4]
 8009a06:	4613      	mov	r3, r2
 8009a08:	005b      	lsls	r3, r3, #1
 8009a0a:	4413      	add	r3, r2
 8009a0c:	69ba      	ldr	r2, [r7, #24]
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	d305      	bcc.n	8009a1e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	685b      	ldr	r3, [r3, #4]
 8009a16:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009a18:	69ba      	ldr	r2, [r7, #24]
 8009a1a:	429a      	cmp	r2, r3
 8009a1c:	d903      	bls.n	8009a26 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009a1e:	2301      	movs	r3, #1
 8009a20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009a24:	e113      	b.n	8009c4e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a28:	2200      	movs	r2, #0
 8009a2a:	60bb      	str	r3, [r7, #8]
 8009a2c:	60fa      	str	r2, [r7, #12]
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a32:	4a84      	ldr	r2, [pc, #528]	; (8009c44 <UART_SetConfig+0x5c4>)
 8009a34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a38:	b29b      	uxth	r3, r3
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	603b      	str	r3, [r7, #0]
 8009a3e:	607a      	str	r2, [r7, #4]
 8009a40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a44:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009a48:	f7f7 f936 	bl	8000cb8 <__aeabi_uldivmod>
 8009a4c:	4602      	mov	r2, r0
 8009a4e:	460b      	mov	r3, r1
 8009a50:	4610      	mov	r0, r2
 8009a52:	4619      	mov	r1, r3
 8009a54:	f04f 0200 	mov.w	r2, #0
 8009a58:	f04f 0300 	mov.w	r3, #0
 8009a5c:	020b      	lsls	r3, r1, #8
 8009a5e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009a62:	0202      	lsls	r2, r0, #8
 8009a64:	6979      	ldr	r1, [r7, #20]
 8009a66:	6849      	ldr	r1, [r1, #4]
 8009a68:	0849      	lsrs	r1, r1, #1
 8009a6a:	2000      	movs	r0, #0
 8009a6c:	460c      	mov	r4, r1
 8009a6e:	4605      	mov	r5, r0
 8009a70:	eb12 0804 	adds.w	r8, r2, r4
 8009a74:	eb43 0905 	adc.w	r9, r3, r5
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	469a      	mov	sl, r3
 8009a80:	4693      	mov	fp, r2
 8009a82:	4652      	mov	r2, sl
 8009a84:	465b      	mov	r3, fp
 8009a86:	4640      	mov	r0, r8
 8009a88:	4649      	mov	r1, r9
 8009a8a:	f7f7 f915 	bl	8000cb8 <__aeabi_uldivmod>
 8009a8e:	4602      	mov	r2, r0
 8009a90:	460b      	mov	r3, r1
 8009a92:	4613      	mov	r3, r2
 8009a94:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009a96:	6a3b      	ldr	r3, [r7, #32]
 8009a98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a9c:	d308      	bcc.n	8009ab0 <UART_SetConfig+0x430>
 8009a9e:	6a3b      	ldr	r3, [r7, #32]
 8009aa0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009aa4:	d204      	bcs.n	8009ab0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	6a3a      	ldr	r2, [r7, #32]
 8009aac:	60da      	str	r2, [r3, #12]
 8009aae:	e0ce      	b.n	8009c4e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009ab6:	e0ca      	b.n	8009c4e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	69db      	ldr	r3, [r3, #28]
 8009abc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ac0:	d166      	bne.n	8009b90 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009ac2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009ac6:	2b08      	cmp	r3, #8
 8009ac8:	d827      	bhi.n	8009b1a <UART_SetConfig+0x49a>
 8009aca:	a201      	add	r2, pc, #4	; (adr r2, 8009ad0 <UART_SetConfig+0x450>)
 8009acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad0:	08009af5 	.word	0x08009af5
 8009ad4:	08009afd 	.word	0x08009afd
 8009ad8:	08009b05 	.word	0x08009b05
 8009adc:	08009b1b 	.word	0x08009b1b
 8009ae0:	08009b0b 	.word	0x08009b0b
 8009ae4:	08009b1b 	.word	0x08009b1b
 8009ae8:	08009b1b 	.word	0x08009b1b
 8009aec:	08009b1b 	.word	0x08009b1b
 8009af0:	08009b13 	.word	0x08009b13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009af4:	f7fb ff40 	bl	8005978 <HAL_RCC_GetPCLK1Freq>
 8009af8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009afa:	e014      	b.n	8009b26 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009afc:	f7fb ff52 	bl	80059a4 <HAL_RCC_GetPCLK2Freq>
 8009b00:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009b02:	e010      	b.n	8009b26 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009b04:	4b4e      	ldr	r3, [pc, #312]	; (8009c40 <UART_SetConfig+0x5c0>)
 8009b06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009b08:	e00d      	b.n	8009b26 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b0a:	f7fb fe9d 	bl	8005848 <HAL_RCC_GetSysClockFreq>
 8009b0e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009b10:	e009      	b.n	8009b26 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009b18:	e005      	b.n	8009b26 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009b24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	f000 8090 	beq.w	8009c4e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b32:	4a44      	ldr	r2, [pc, #272]	; (8009c44 <UART_SetConfig+0x5c4>)
 8009b34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b38:	461a      	mov	r2, r3
 8009b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b40:	005a      	lsls	r2, r3, #1
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	085b      	lsrs	r3, r3, #1
 8009b48:	441a      	add	r2, r3
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b52:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b54:	6a3b      	ldr	r3, [r7, #32]
 8009b56:	2b0f      	cmp	r3, #15
 8009b58:	d916      	bls.n	8009b88 <UART_SetConfig+0x508>
 8009b5a:	6a3b      	ldr	r3, [r7, #32]
 8009b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b60:	d212      	bcs.n	8009b88 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009b62:	6a3b      	ldr	r3, [r7, #32]
 8009b64:	b29b      	uxth	r3, r3
 8009b66:	f023 030f 	bic.w	r3, r3, #15
 8009b6a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009b6c:	6a3b      	ldr	r3, [r7, #32]
 8009b6e:	085b      	lsrs	r3, r3, #1
 8009b70:	b29b      	uxth	r3, r3
 8009b72:	f003 0307 	and.w	r3, r3, #7
 8009b76:	b29a      	uxth	r2, r3
 8009b78:	8bfb      	ldrh	r3, [r7, #30]
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	8bfa      	ldrh	r2, [r7, #30]
 8009b84:	60da      	str	r2, [r3, #12]
 8009b86:	e062      	b.n	8009c4e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009b88:	2301      	movs	r3, #1
 8009b8a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009b8e:	e05e      	b.n	8009c4e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009b90:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009b94:	2b08      	cmp	r3, #8
 8009b96:	d828      	bhi.n	8009bea <UART_SetConfig+0x56a>
 8009b98:	a201      	add	r2, pc, #4	; (adr r2, 8009ba0 <UART_SetConfig+0x520>)
 8009b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b9e:	bf00      	nop
 8009ba0:	08009bc5 	.word	0x08009bc5
 8009ba4:	08009bcd 	.word	0x08009bcd
 8009ba8:	08009bd5 	.word	0x08009bd5
 8009bac:	08009beb 	.word	0x08009beb
 8009bb0:	08009bdb 	.word	0x08009bdb
 8009bb4:	08009beb 	.word	0x08009beb
 8009bb8:	08009beb 	.word	0x08009beb
 8009bbc:	08009beb 	.word	0x08009beb
 8009bc0:	08009be3 	.word	0x08009be3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009bc4:	f7fb fed8 	bl	8005978 <HAL_RCC_GetPCLK1Freq>
 8009bc8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009bca:	e014      	b.n	8009bf6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009bcc:	f7fb feea 	bl	80059a4 <HAL_RCC_GetPCLK2Freq>
 8009bd0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009bd2:	e010      	b.n	8009bf6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009bd4:	4b1a      	ldr	r3, [pc, #104]	; (8009c40 <UART_SetConfig+0x5c0>)
 8009bd6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009bd8:	e00d      	b.n	8009bf6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009bda:	f7fb fe35 	bl	8005848 <HAL_RCC_GetSysClockFreq>
 8009bde:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009be0:	e009      	b.n	8009bf6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009be2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009be6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009be8:	e005      	b.n	8009bf6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009bea:	2300      	movs	r3, #0
 8009bec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009bee:	2301      	movs	r3, #1
 8009bf0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009bf4:	bf00      	nop
    }

    if (pclk != 0U)
 8009bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d028      	beq.n	8009c4e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c00:	4a10      	ldr	r2, [pc, #64]	; (8009c44 <UART_SetConfig+0x5c4>)
 8009c02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c06:	461a      	mov	r2, r3
 8009c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c0a:	fbb3 f2f2 	udiv	r2, r3, r2
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	685b      	ldr	r3, [r3, #4]
 8009c12:	085b      	lsrs	r3, r3, #1
 8009c14:	441a      	add	r2, r3
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	685b      	ldr	r3, [r3, #4]
 8009c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c1e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c20:	6a3b      	ldr	r3, [r7, #32]
 8009c22:	2b0f      	cmp	r3, #15
 8009c24:	d910      	bls.n	8009c48 <UART_SetConfig+0x5c8>
 8009c26:	6a3b      	ldr	r3, [r7, #32]
 8009c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c2c:	d20c      	bcs.n	8009c48 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009c2e:	6a3b      	ldr	r3, [r7, #32]
 8009c30:	b29a      	uxth	r2, r3
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	60da      	str	r2, [r3, #12]
 8009c38:	e009      	b.n	8009c4e <UART_SetConfig+0x5ce>
 8009c3a:	bf00      	nop
 8009c3c:	40008000 	.word	0x40008000
 8009c40:	00f42400 	.word	0x00f42400
 8009c44:	0800f4f0 	.word	0x0800f4f0
      }
      else
      {
        ret = HAL_ERROR;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	2201      	movs	r2, #1
 8009c52:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	2201      	movs	r2, #1
 8009c5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	2200      	movs	r2, #0
 8009c62:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	2200      	movs	r2, #0
 8009c68:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009c6a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3730      	adds	r7, #48	; 0x30
 8009c72:	46bd      	mov	sp, r7
 8009c74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009c78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b083      	sub	sp, #12
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c84:	f003 0301 	and.w	r3, r3, #1
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d00a      	beq.n	8009ca2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	430a      	orrs	r2, r1
 8009ca0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ca6:	f003 0302 	and.w	r3, r3, #2
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d00a      	beq.n	8009cc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	430a      	orrs	r2, r1
 8009cc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cc8:	f003 0304 	and.w	r3, r3, #4
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d00a      	beq.n	8009ce6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	430a      	orrs	r2, r1
 8009ce4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cea:	f003 0308 	and.w	r3, r3, #8
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d00a      	beq.n	8009d08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	430a      	orrs	r2, r1
 8009d06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d0c:	f003 0310 	and.w	r3, r3, #16
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d00a      	beq.n	8009d2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	689b      	ldr	r3, [r3, #8]
 8009d1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	430a      	orrs	r2, r1
 8009d28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d2e:	f003 0320 	and.w	r3, r3, #32
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d00a      	beq.n	8009d4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	689b      	ldr	r3, [r3, #8]
 8009d3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	430a      	orrs	r2, r1
 8009d4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d01a      	beq.n	8009d8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	430a      	orrs	r2, r1
 8009d6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d76:	d10a      	bne.n	8009d8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	685b      	ldr	r3, [r3, #4]
 8009d7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	430a      	orrs	r2, r1
 8009d8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d00a      	beq.n	8009db0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	430a      	orrs	r2, r1
 8009dae:	605a      	str	r2, [r3, #4]
  }
}
 8009db0:	bf00      	nop
 8009db2:	370c      	adds	r7, #12
 8009db4:	46bd      	mov	sp, r7
 8009db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dba:	4770      	bx	lr

08009dbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b086      	sub	sp, #24
 8009dc0:	af02      	add	r7, sp, #8
 8009dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009dcc:	f7fa f866 	bl	8003e9c <HAL_GetTick>
 8009dd0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f003 0308 	and.w	r3, r3, #8
 8009ddc:	2b08      	cmp	r3, #8
 8009dde:	d10e      	bne.n	8009dfe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009de0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009de4:	9300      	str	r3, [sp, #0]
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2200      	movs	r2, #0
 8009dea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f000 f82f 	bl	8009e52 <UART_WaitOnFlagUntilTimeout>
 8009df4:	4603      	mov	r3, r0
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d001      	beq.n	8009dfe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009dfa:	2303      	movs	r3, #3
 8009dfc:	e025      	b.n	8009e4a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f003 0304 	and.w	r3, r3, #4
 8009e08:	2b04      	cmp	r3, #4
 8009e0a:	d10e      	bne.n	8009e2a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009e10:	9300      	str	r3, [sp, #0]
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2200      	movs	r2, #0
 8009e16:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f000 f819 	bl	8009e52 <UART_WaitOnFlagUntilTimeout>
 8009e20:	4603      	mov	r3, r0
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d001      	beq.n	8009e2a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e26:	2303      	movs	r3, #3
 8009e28:	e00f      	b.n	8009e4a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2220      	movs	r2, #32
 8009e2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2220      	movs	r2, #32
 8009e36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2200      	movs	r2, #0
 8009e44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009e48:	2300      	movs	r3, #0
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3710      	adds	r7, #16
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}

08009e52 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009e52:	b580      	push	{r7, lr}
 8009e54:	b09c      	sub	sp, #112	; 0x70
 8009e56:	af00      	add	r7, sp, #0
 8009e58:	60f8      	str	r0, [r7, #12]
 8009e5a:	60b9      	str	r1, [r7, #8]
 8009e5c:	603b      	str	r3, [r7, #0]
 8009e5e:	4613      	mov	r3, r2
 8009e60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e62:	e0a9      	b.n	8009fb8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e6a:	f000 80a5 	beq.w	8009fb8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e6e:	f7fa f815 	bl	8003e9c <HAL_GetTick>
 8009e72:	4602      	mov	r2, r0
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	1ad3      	subs	r3, r2, r3
 8009e78:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d302      	bcc.n	8009e84 <UART_WaitOnFlagUntilTimeout+0x32>
 8009e7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d140      	bne.n	8009f06 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e8c:	e853 3f00 	ldrex	r3, [r3]
 8009e90:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009e92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009e98:	667b      	str	r3, [r7, #100]	; 0x64
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	461a      	mov	r2, r3
 8009ea0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ea2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ea4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ea6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009ea8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009eaa:	e841 2300 	strex	r3, r2, [r1]
 8009eae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009eb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d1e6      	bne.n	8009e84 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	3308      	adds	r3, #8
 8009ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ec0:	e853 3f00 	ldrex	r3, [r3]
 8009ec4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec8:	f023 0301 	bic.w	r3, r3, #1
 8009ecc:	663b      	str	r3, [r7, #96]	; 0x60
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	3308      	adds	r3, #8
 8009ed4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009ed6:	64ba      	str	r2, [r7, #72]	; 0x48
 8009ed8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009edc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ede:	e841 2300 	strex	r3, r2, [r1]
 8009ee2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009ee4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d1e5      	bne.n	8009eb6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2220      	movs	r2, #32
 8009eee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	2220      	movs	r2, #32
 8009ef6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2200      	movs	r2, #0
 8009efe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009f02:	2303      	movs	r3, #3
 8009f04:	e069      	b.n	8009fda <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f003 0304 	and.w	r3, r3, #4
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d051      	beq.n	8009fb8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	69db      	ldr	r3, [r3, #28]
 8009f1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f22:	d149      	bne.n	8009fb8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009f2c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f36:	e853 3f00 	ldrex	r3, [r3]
 8009f3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f3e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009f42:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	461a      	mov	r2, r3
 8009f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f4c:	637b      	str	r3, [r7, #52]	; 0x34
 8009f4e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009f52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f54:	e841 2300 	strex	r3, r2, [r1]
 8009f58:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d1e6      	bne.n	8009f2e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	3308      	adds	r3, #8
 8009f66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	e853 3f00 	ldrex	r3, [r3]
 8009f6e:	613b      	str	r3, [r7, #16]
   return(result);
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	f023 0301 	bic.w	r3, r3, #1
 8009f76:	66bb      	str	r3, [r7, #104]	; 0x68
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	3308      	adds	r3, #8
 8009f7e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009f80:	623a      	str	r2, [r7, #32]
 8009f82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f84:	69f9      	ldr	r1, [r7, #28]
 8009f86:	6a3a      	ldr	r2, [r7, #32]
 8009f88:	e841 2300 	strex	r3, r2, [r1]
 8009f8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8009f8e:	69bb      	ldr	r3, [r7, #24]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d1e5      	bne.n	8009f60 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2220      	movs	r2, #32
 8009f98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	2220      	movs	r2, #32
 8009fa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2220      	movs	r2, #32
 8009fa8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009fb4:	2303      	movs	r3, #3
 8009fb6:	e010      	b.n	8009fda <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	69da      	ldr	r2, [r3, #28]
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	4013      	ands	r3, r2
 8009fc2:	68ba      	ldr	r2, [r7, #8]
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	bf0c      	ite	eq
 8009fc8:	2301      	moveq	r3, #1
 8009fca:	2300      	movne	r3, #0
 8009fcc:	b2db      	uxtb	r3, r3
 8009fce:	461a      	mov	r2, r3
 8009fd0:	79fb      	ldrb	r3, [r7, #7]
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	f43f af46 	beq.w	8009e64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009fd8:	2300      	movs	r3, #0
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3770      	adds	r7, #112	; 0x70
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
	...

08009fe4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b096      	sub	sp, #88	; 0x58
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	60b9      	str	r1, [r7, #8]
 8009fee:	4613      	mov	r3, r2
 8009ff0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	68ba      	ldr	r2, [r7, #8]
 8009ff6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	88fa      	ldrh	r2, [r7, #6]
 8009ffc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	2200      	movs	r2, #0
 800a004:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	2222      	movs	r2, #34	; 0x22
 800a00c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a014:	2b00      	cmp	r3, #0
 800a016:	d02c      	beq.n	800a072 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a01c:	4a42      	ldr	r2, [pc, #264]	; (800a128 <UART_Start_Receive_DMA+0x144>)
 800a01e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a024:	4a41      	ldr	r2, [pc, #260]	; (800a12c <UART_Start_Receive_DMA+0x148>)
 800a026:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a02c:	4a40      	ldr	r2, [pc, #256]	; (800a130 <UART_Start_Receive_DMA+0x14c>)
 800a02e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a034:	2200      	movs	r2, #0
 800a036:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	3324      	adds	r3, #36	; 0x24
 800a042:	4619      	mov	r1, r3
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a048:	461a      	mov	r2, r3
 800a04a:	88fb      	ldrh	r3, [r7, #6]
 800a04c:	f7fa f910 	bl	8004270 <HAL_DMA_Start_IT>
 800a050:	4603      	mov	r3, r0
 800a052:	2b00      	cmp	r3, #0
 800a054:	d00d      	beq.n	800a072 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	2210      	movs	r2, #16
 800a05a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	2200      	movs	r2, #0
 800a062:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2220      	movs	r2, #32
 800a06a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800a06e:	2301      	movs	r3, #1
 800a070:	e055      	b.n	800a11e <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2200      	movs	r2, #0
 800a076:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	691b      	ldr	r3, [r3, #16]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d018      	beq.n	800a0b4 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a08a:	e853 3f00 	ldrex	r3, [r3]
 800a08e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a096:	657b      	str	r3, [r7, #84]	; 0x54
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	461a      	mov	r2, r3
 800a09e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0a0:	64bb      	str	r3, [r7, #72]	; 0x48
 800a0a2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0a4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a0a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a0a8:	e841 2300 	strex	r3, r2, [r1]
 800a0ac:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a0ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d1e6      	bne.n	800a082 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	3308      	adds	r3, #8
 800a0ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0be:	e853 3f00 	ldrex	r3, [r3]
 800a0c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c6:	f043 0301 	orr.w	r3, r3, #1
 800a0ca:	653b      	str	r3, [r7, #80]	; 0x50
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	3308      	adds	r3, #8
 800a0d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a0d4:	637a      	str	r2, [r7, #52]	; 0x34
 800a0d6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a0da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a0dc:	e841 2300 	strex	r3, r2, [r1]
 800a0e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d1e5      	bne.n	800a0b4 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	3308      	adds	r3, #8
 800a0ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0f0:	697b      	ldr	r3, [r7, #20]
 800a0f2:	e853 3f00 	ldrex	r3, [r3]
 800a0f6:	613b      	str	r3, [r7, #16]
   return(result);
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	3308      	adds	r3, #8
 800a106:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a108:	623a      	str	r2, [r7, #32]
 800a10a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a10c:	69f9      	ldr	r1, [r7, #28]
 800a10e:	6a3a      	ldr	r2, [r7, #32]
 800a110:	e841 2300 	strex	r3, r2, [r1]
 800a114:	61bb      	str	r3, [r7, #24]
   return(result);
 800a116:	69bb      	ldr	r3, [r7, #24]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d1e5      	bne.n	800a0e8 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800a11c:	2300      	movs	r3, #0
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3758      	adds	r7, #88	; 0x58
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
 800a126:	bf00      	nop
 800a128:	0800a283 	.word	0x0800a283
 800a12c:	0800a3a9 	.word	0x0800a3a9
 800a130:	0800a3e1 	.word	0x0800a3e1

0800a134 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a134:	b480      	push	{r7}
 800a136:	b08f      	sub	sp, #60	; 0x3c
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
#if defined(USART_CR1_FIFOEN)
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a142:	6a3b      	ldr	r3, [r7, #32]
 800a144:	e853 3f00 	ldrex	r3, [r3]
 800a148:	61fb      	str	r3, [r7, #28]
   return(result);
 800a14a:	69fb      	ldr	r3, [r7, #28]
 800a14c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a150:	637b      	str	r3, [r7, #52]	; 0x34
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	461a      	mov	r2, r3
 800a158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a15a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a15c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a15e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a160:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a162:	e841 2300 	strex	r3, r2, [r1]
 800a166:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d1e6      	bne.n	800a13c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	3308      	adds	r3, #8
 800a174:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	e853 3f00 	ldrex	r3, [r3]
 800a17c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a184:	633b      	str	r3, [r7, #48]	; 0x30
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	3308      	adds	r3, #8
 800a18c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a18e:	61ba      	str	r2, [r7, #24]
 800a190:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a192:	6979      	ldr	r1, [r7, #20]
 800a194:	69ba      	ldr	r2, [r7, #24]
 800a196:	e841 2300 	strex	r3, r2, [r1]
 800a19a:	613b      	str	r3, [r7, #16]
   return(result);
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d1e5      	bne.n	800a16e <UART_EndTxTransfer+0x3a>
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2220      	movs	r2, #32
 800a1a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800a1aa:	bf00      	nop
 800a1ac:	373c      	adds	r7, #60	; 0x3c
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b4:	4770      	bx	lr

0800a1b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a1b6:	b480      	push	{r7}
 800a1b8:	b095      	sub	sp, #84	; 0x54
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1c6:	e853 3f00 	ldrex	r3, [r3]
 800a1ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a1d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	461a      	mov	r2, r3
 800a1da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1dc:	643b      	str	r3, [r7, #64]	; 0x40
 800a1de:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a1e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a1e4:	e841 2300 	strex	r3, r2, [r1]
 800a1e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a1ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d1e6      	bne.n	800a1be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	3308      	adds	r3, #8
 800a1f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1f8:	6a3b      	ldr	r3, [r7, #32]
 800a1fa:	e853 3f00 	ldrex	r3, [r3]
 800a1fe:	61fb      	str	r3, [r7, #28]
   return(result);
 800a200:	69fb      	ldr	r3, [r7, #28]
 800a202:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a206:	f023 0301 	bic.w	r3, r3, #1
 800a20a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	3308      	adds	r3, #8
 800a212:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a214:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a216:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a218:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a21a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a21c:	e841 2300 	strex	r3, r2, [r1]
 800a220:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a224:	2b00      	cmp	r3, #0
 800a226:	d1e3      	bne.n	800a1f0 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	d118      	bne.n	800a262 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	e853 3f00 	ldrex	r3, [r3]
 800a23c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	f023 0310 	bic.w	r3, r3, #16
 800a244:	647b      	str	r3, [r7, #68]	; 0x44
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	461a      	mov	r2, r3
 800a24c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a24e:	61bb      	str	r3, [r7, #24]
 800a250:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a252:	6979      	ldr	r1, [r7, #20]
 800a254:	69ba      	ldr	r2, [r7, #24]
 800a256:	e841 2300 	strex	r3, r2, [r1]
 800a25a:	613b      	str	r3, [r7, #16]
   return(result);
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d1e6      	bne.n	800a230 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2220      	movs	r2, #32
 800a266:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2200      	movs	r2, #0
 800a26e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2200      	movs	r2, #0
 800a274:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a276:	bf00      	nop
 800a278:	3754      	adds	r7, #84	; 0x54
 800a27a:	46bd      	mov	sp, r7
 800a27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a280:	4770      	bx	lr

0800a282 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a282:	b580      	push	{r7, lr}
 800a284:	b09c      	sub	sp, #112	; 0x70
 800a286:	af00      	add	r7, sp, #0
 800a288:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a28e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f003 0320 	and.w	r3, r3, #32
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d171      	bne.n	800a382 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800a29e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a2a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2ae:	e853 3f00 	ldrex	r3, [r3]
 800a2b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a2b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a2ba:	66bb      	str	r3, [r7, #104]	; 0x68
 800a2bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	461a      	mov	r2, r3
 800a2c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a2c4:	65bb      	str	r3, [r7, #88]	; 0x58
 800a2c6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a2ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a2cc:	e841 2300 	strex	r3, r2, [r1]
 800a2d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a2d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d1e6      	bne.n	800a2a6 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	3308      	adds	r3, #8
 800a2de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e2:	e853 3f00 	ldrex	r3, [r3]
 800a2e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a2e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2ea:	f023 0301 	bic.w	r3, r3, #1
 800a2ee:	667b      	str	r3, [r7, #100]	; 0x64
 800a2f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	3308      	adds	r3, #8
 800a2f6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a2f8:	647a      	str	r2, [r7, #68]	; 0x44
 800a2fa:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a2fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a300:	e841 2300 	strex	r3, r2, [r1]
 800a304:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d1e5      	bne.n	800a2d8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a30c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	3308      	adds	r3, #8
 800a312:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a316:	e853 3f00 	ldrex	r3, [r3]
 800a31a:	623b      	str	r3, [r7, #32]
   return(result);
 800a31c:	6a3b      	ldr	r3, [r7, #32]
 800a31e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a322:	663b      	str	r3, [r7, #96]	; 0x60
 800a324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	3308      	adds	r3, #8
 800a32a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a32c:	633a      	str	r2, [r7, #48]	; 0x30
 800a32e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a330:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a332:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a334:	e841 2300 	strex	r3, r2, [r1]
 800a338:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d1e5      	bne.n	800a30c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a340:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a342:	2220      	movs	r2, #32
 800a344:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a34a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a34c:	2b01      	cmp	r3, #1
 800a34e:	d118      	bne.n	800a382 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a350:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	e853 3f00 	ldrex	r3, [r3]
 800a35c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	f023 0310 	bic.w	r3, r3, #16
 800a364:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a366:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	461a      	mov	r2, r3
 800a36c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a36e:	61fb      	str	r3, [r7, #28]
 800a370:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a372:	69b9      	ldr	r1, [r7, #24]
 800a374:	69fa      	ldr	r2, [r7, #28]
 800a376:	e841 2300 	strex	r3, r2, [r1]
 800a37a:	617b      	str	r3, [r7, #20]
   return(result);
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d1e6      	bne.n	800a350 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a382:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a384:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a386:	2b01      	cmp	r3, #1
 800a388:	d107      	bne.n	800a39a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a38a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a38c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a390:	4619      	mov	r1, r3
 800a392:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a394:	f7f8 f92e 	bl	80025f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a398:	e002      	b.n	800a3a0 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800a39a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a39c:	f7ff f952 	bl	8009644 <HAL_UART_RxCpltCallback>
}
 800a3a0:	bf00      	nop
 800a3a2:	3770      	adds	r7, #112	; 0x70
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}

0800a3a8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b084      	sub	sp, #16
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3b4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3ba:	2b01      	cmp	r3, #1
 800a3bc:	d109      	bne.n	800a3d2 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a3c4:	085b      	lsrs	r3, r3, #1
 800a3c6:	b29b      	uxth	r3, r3
 800a3c8:	4619      	mov	r1, r3
 800a3ca:	68f8      	ldr	r0, [r7, #12]
 800a3cc:	f7f8 f912 	bl	80025f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a3d0:	e002      	b.n	800a3d8 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800a3d2:	68f8      	ldr	r0, [r7, #12]
 800a3d4:	f7ff f940 	bl	8009658 <HAL_UART_RxHalfCpltCallback>
}
 800a3d8:	bf00      	nop
 800a3da:	3710      	adds	r7, #16
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}

0800a3e0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b086      	sub	sp, #24
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3ec:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3f4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3fc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	689b      	ldr	r3, [r3, #8]
 800a404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a408:	2b80      	cmp	r3, #128	; 0x80
 800a40a:	d109      	bne.n	800a420 <UART_DMAError+0x40>
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	2b21      	cmp	r3, #33	; 0x21
 800a410:	d106      	bne.n	800a420 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	2200      	movs	r2, #0
 800a416:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800a41a:	6978      	ldr	r0, [r7, #20]
 800a41c:	f7ff fe8a 	bl	800a134 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	689b      	ldr	r3, [r3, #8]
 800a426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a42a:	2b40      	cmp	r3, #64	; 0x40
 800a42c:	d109      	bne.n	800a442 <UART_DMAError+0x62>
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	2b22      	cmp	r3, #34	; 0x22
 800a432:	d106      	bne.n	800a442 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	2200      	movs	r2, #0
 800a438:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800a43c:	6978      	ldr	r0, [r7, #20]
 800a43e:	f7ff feba 	bl	800a1b6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a448:	f043 0210 	orr.w	r2, r3, #16
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a452:	6978      	ldr	r0, [r7, #20]
 800a454:	f7ff f90a 	bl	800966c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a458:	bf00      	nop
 800a45a:	3718      	adds	r7, #24
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}

0800a460 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b084      	sub	sp, #16
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a46c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	2200      	movs	r2, #0
 800a472:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	2200      	movs	r2, #0
 800a47a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a47e:	68f8      	ldr	r0, [r7, #12]
 800a480:	f7ff f8f4 	bl	800966c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a484:	bf00      	nop
 800a486:	3710      	adds	r7, #16
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b088      	sub	sp, #32
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	e853 3f00 	ldrex	r3, [r3]
 800a4a0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4a8:	61fb      	str	r3, [r7, #28]
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	69fb      	ldr	r3, [r7, #28]
 800a4b2:	61bb      	str	r3, [r7, #24]
 800a4b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b6:	6979      	ldr	r1, [r7, #20]
 800a4b8:	69ba      	ldr	r2, [r7, #24]
 800a4ba:	e841 2300 	strex	r3, r2, [r1]
 800a4be:	613b      	str	r3, [r7, #16]
   return(result);
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d1e6      	bne.n	800a494 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2220      	movs	r2, #32
 800a4ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f7ff f8ab 	bl	8009630 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4da:	bf00      	nop
 800a4dc:	3720      	adds	r7, #32
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}

0800a4e2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a4e2:	b480      	push	{r7}
 800a4e4:	b083      	sub	sp, #12
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a4ea:	bf00      	nop
 800a4ec:	370c      	adds	r7, #12
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f4:	4770      	bx	lr

0800a4f6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a4f6:	b480      	push	{r7}
 800a4f8:	b083      	sub	sp, #12
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a4fe:	bf00      	nop
 800a500:	370c      	adds	r7, #12
 800a502:	46bd      	mov	sp, r7
 800a504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a508:	4770      	bx	lr

0800a50a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a50a:	b480      	push	{r7}
 800a50c:	b083      	sub	sp, #12
 800a50e:	af00      	add	r7, sp, #0
 800a510:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a512:	bf00      	nop
 800a514:	370c      	adds	r7, #12
 800a516:	46bd      	mov	sp, r7
 800a518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51c:	4770      	bx	lr

0800a51e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a51e:	b480      	push	{r7}
 800a520:	b085      	sub	sp, #20
 800a522:	af00      	add	r7, sp, #0
 800a524:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d101      	bne.n	800a534 <HAL_UARTEx_DisableFifoMode+0x16>
 800a530:	2302      	movs	r3, #2
 800a532:	e027      	b.n	800a584 <HAL_UARTEx_DisableFifoMode+0x66>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2201      	movs	r2, #1
 800a538:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2224      	movs	r2, #36	; 0x24
 800a540:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	681a      	ldr	r2, [r3, #0]
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f022 0201 	bic.w	r2, r2, #1
 800a55a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a562:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2200      	movs	r2, #0
 800a568:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	68fa      	ldr	r2, [r7, #12]
 800a570:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2220      	movs	r2, #32
 800a576:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2200      	movs	r2, #0
 800a57e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a582:	2300      	movs	r3, #0
}
 800a584:	4618      	mov	r0, r3
 800a586:	3714      	adds	r7, #20
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr

0800a590 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b084      	sub	sp, #16
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a5a0:	2b01      	cmp	r3, #1
 800a5a2:	d101      	bne.n	800a5a8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a5a4:	2302      	movs	r3, #2
 800a5a6:	e02d      	b.n	800a604 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2224      	movs	r2, #36	; 0x24
 800a5b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	681a      	ldr	r2, [r3, #0]
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f022 0201 	bic.w	r2, r2, #1
 800a5ce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	689b      	ldr	r3, [r3, #8]
 800a5d6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	683a      	ldr	r2, [r7, #0]
 800a5e0:	430a      	orrs	r2, r1
 800a5e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f000 f8ab 	bl	800a740 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	68fa      	ldr	r2, [r7, #12]
 800a5f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2220      	movs	r2, #32
 800a5f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a602:	2300      	movs	r3, #0
}
 800a604:	4618      	mov	r0, r3
 800a606:	3710      	adds	r7, #16
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b084      	sub	sp, #16
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	d101      	bne.n	800a624 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a620:	2302      	movs	r3, #2
 800a622:	e02d      	b.n	800a680 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2201      	movs	r2, #1
 800a628:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2224      	movs	r2, #36	; 0x24
 800a630:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	681a      	ldr	r2, [r3, #0]
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f022 0201 	bic.w	r2, r2, #1
 800a64a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	689b      	ldr	r3, [r3, #8]
 800a652:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	683a      	ldr	r2, [r7, #0]
 800a65c:	430a      	orrs	r2, r1
 800a65e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f000 f86d 	bl	800a740 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	68fa      	ldr	r2, [r7, #12]
 800a66c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2220      	movs	r2, #32
 800a672:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2200      	movs	r2, #0
 800a67a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a67e:	2300      	movs	r3, #0
}
 800a680:	4618      	mov	r0, r3
 800a682:	3710      	adds	r7, #16
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}

0800a688 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b08c      	sub	sp, #48	; 0x30
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	60f8      	str	r0, [r7, #12]
 800a690:	60b9      	str	r1, [r7, #8]
 800a692:	4613      	mov	r3, r2
 800a694:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a69c:	2b20      	cmp	r3, #32
 800a69e:	d14a      	bne.n	800a736 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d002      	beq.n	800a6ac <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800a6a6:	88fb      	ldrh	r3, [r7, #6]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d101      	bne.n	800a6b0 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	e043      	b.n	800a738 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a6b6:	2b01      	cmp	r3, #1
 800a6b8:	d101      	bne.n	800a6be <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 800a6ba:	2302      	movs	r3, #2
 800a6bc:	e03c      	b.n	800a738 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2201      	movs	r2, #1
 800a6c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800a6cc:	88fb      	ldrh	r3, [r7, #6]
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	68b9      	ldr	r1, [r7, #8]
 800a6d2:	68f8      	ldr	r0, [r7, #12]
 800a6d4:	f7ff fc86 	bl	8009fe4 <UART_Start_Receive_DMA>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a6de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d124      	bne.n	800a730 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6ea:	2b01      	cmp	r3, #1
 800a6ec:	d11d      	bne.n	800a72a <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	2210      	movs	r2, #16
 800a6f4:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6fc:	69bb      	ldr	r3, [r7, #24]
 800a6fe:	e853 3f00 	ldrex	r3, [r3]
 800a702:	617b      	str	r3, [r7, #20]
   return(result);
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	f043 0310 	orr.w	r3, r3, #16
 800a70a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	461a      	mov	r2, r3
 800a712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a714:	627b      	str	r3, [r7, #36]	; 0x24
 800a716:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a718:	6a39      	ldr	r1, [r7, #32]
 800a71a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a71c:	e841 2300 	strex	r3, r2, [r1]
 800a720:	61fb      	str	r3, [r7, #28]
   return(result);
 800a722:	69fb      	ldr	r3, [r7, #28]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d1e6      	bne.n	800a6f6 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800a728:	e002      	b.n	800a730 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a72a:	2301      	movs	r3, #1
 800a72c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800a730:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a734:	e000      	b.n	800a738 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800a736:	2302      	movs	r3, #2
  }
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3730      	adds	r7, #48	; 0x30
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}

0800a740 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a740:	b480      	push	{r7}
 800a742:	b085      	sub	sp, #20
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d108      	bne.n	800a762 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2201      	movs	r2, #1
 800a754:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2201      	movs	r2, #1
 800a75c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a760:	e031      	b.n	800a7c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a762:	2308      	movs	r3, #8
 800a764:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a766:	2308      	movs	r3, #8
 800a768:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	689b      	ldr	r3, [r3, #8]
 800a770:	0e5b      	lsrs	r3, r3, #25
 800a772:	b2db      	uxtb	r3, r3
 800a774:	f003 0307 	and.w	r3, r3, #7
 800a778:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	689b      	ldr	r3, [r3, #8]
 800a780:	0f5b      	lsrs	r3, r3, #29
 800a782:	b2db      	uxtb	r3, r3
 800a784:	f003 0307 	and.w	r3, r3, #7
 800a788:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a78a:	7bbb      	ldrb	r3, [r7, #14]
 800a78c:	7b3a      	ldrb	r2, [r7, #12]
 800a78e:	4911      	ldr	r1, [pc, #68]	; (800a7d4 <UARTEx_SetNbDataToProcess+0x94>)
 800a790:	5c8a      	ldrb	r2, [r1, r2]
 800a792:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a796:	7b3a      	ldrb	r2, [r7, #12]
 800a798:	490f      	ldr	r1, [pc, #60]	; (800a7d8 <UARTEx_SetNbDataToProcess+0x98>)
 800a79a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a79c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a7a0:	b29a      	uxth	r2, r3
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a7a8:	7bfb      	ldrb	r3, [r7, #15]
 800a7aa:	7b7a      	ldrb	r2, [r7, #13]
 800a7ac:	4909      	ldr	r1, [pc, #36]	; (800a7d4 <UARTEx_SetNbDataToProcess+0x94>)
 800a7ae:	5c8a      	ldrb	r2, [r1, r2]
 800a7b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a7b4:	7b7a      	ldrb	r2, [r7, #13]
 800a7b6:	4908      	ldr	r1, [pc, #32]	; (800a7d8 <UARTEx_SetNbDataToProcess+0x98>)
 800a7b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a7ba:	fb93 f3f2 	sdiv	r3, r3, r2
 800a7be:	b29a      	uxth	r2, r3
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a7c6:	bf00      	nop
 800a7c8:	3714      	adds	r7, #20
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d0:	4770      	bx	lr
 800a7d2:	bf00      	nop
 800a7d4:	0800f508 	.word	0x0800f508
 800a7d8:	0800f510 	.word	0x0800f510

0800a7dc <__errno>:
 800a7dc:	4b01      	ldr	r3, [pc, #4]	; (800a7e4 <__errno+0x8>)
 800a7de:	6818      	ldr	r0, [r3, #0]
 800a7e0:	4770      	bx	lr
 800a7e2:	bf00      	nop
 800a7e4:	20000080 	.word	0x20000080

0800a7e8 <__libc_init_array>:
 800a7e8:	b570      	push	{r4, r5, r6, lr}
 800a7ea:	4d0d      	ldr	r5, [pc, #52]	; (800a820 <__libc_init_array+0x38>)
 800a7ec:	4c0d      	ldr	r4, [pc, #52]	; (800a824 <__libc_init_array+0x3c>)
 800a7ee:	1b64      	subs	r4, r4, r5
 800a7f0:	10a4      	asrs	r4, r4, #2
 800a7f2:	2600      	movs	r6, #0
 800a7f4:	42a6      	cmp	r6, r4
 800a7f6:	d109      	bne.n	800a80c <__libc_init_array+0x24>
 800a7f8:	4d0b      	ldr	r5, [pc, #44]	; (800a828 <__libc_init_array+0x40>)
 800a7fa:	4c0c      	ldr	r4, [pc, #48]	; (800a82c <__libc_init_array+0x44>)
 800a7fc:	f004 fc90 	bl	800f120 <_init>
 800a800:	1b64      	subs	r4, r4, r5
 800a802:	10a4      	asrs	r4, r4, #2
 800a804:	2600      	movs	r6, #0
 800a806:	42a6      	cmp	r6, r4
 800a808:	d105      	bne.n	800a816 <__libc_init_array+0x2e>
 800a80a:	bd70      	pop	{r4, r5, r6, pc}
 800a80c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a810:	4798      	blx	r3
 800a812:	3601      	adds	r6, #1
 800a814:	e7ee      	b.n	800a7f4 <__libc_init_array+0xc>
 800a816:	f855 3b04 	ldr.w	r3, [r5], #4
 800a81a:	4798      	blx	r3
 800a81c:	3601      	adds	r6, #1
 800a81e:	e7f2      	b.n	800a806 <__libc_init_array+0x1e>
 800a820:	0800f9c4 	.word	0x0800f9c4
 800a824:	0800f9c4 	.word	0x0800f9c4
 800a828:	0800f9c4 	.word	0x0800f9c4
 800a82c:	0800f9c8 	.word	0x0800f9c8

0800a830 <memset>:
 800a830:	4402      	add	r2, r0
 800a832:	4603      	mov	r3, r0
 800a834:	4293      	cmp	r3, r2
 800a836:	d100      	bne.n	800a83a <memset+0xa>
 800a838:	4770      	bx	lr
 800a83a:	f803 1b01 	strb.w	r1, [r3], #1
 800a83e:	e7f9      	b.n	800a834 <memset+0x4>

0800a840 <__cvt>:
 800a840:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a844:	ec55 4b10 	vmov	r4, r5, d0
 800a848:	2d00      	cmp	r5, #0
 800a84a:	460e      	mov	r6, r1
 800a84c:	4619      	mov	r1, r3
 800a84e:	462b      	mov	r3, r5
 800a850:	bfbb      	ittet	lt
 800a852:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a856:	461d      	movlt	r5, r3
 800a858:	2300      	movge	r3, #0
 800a85a:	232d      	movlt	r3, #45	; 0x2d
 800a85c:	700b      	strb	r3, [r1, #0]
 800a85e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a860:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a864:	4691      	mov	r9, r2
 800a866:	f023 0820 	bic.w	r8, r3, #32
 800a86a:	bfbc      	itt	lt
 800a86c:	4622      	movlt	r2, r4
 800a86e:	4614      	movlt	r4, r2
 800a870:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a874:	d005      	beq.n	800a882 <__cvt+0x42>
 800a876:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a87a:	d100      	bne.n	800a87e <__cvt+0x3e>
 800a87c:	3601      	adds	r6, #1
 800a87e:	2102      	movs	r1, #2
 800a880:	e000      	b.n	800a884 <__cvt+0x44>
 800a882:	2103      	movs	r1, #3
 800a884:	ab03      	add	r3, sp, #12
 800a886:	9301      	str	r3, [sp, #4]
 800a888:	ab02      	add	r3, sp, #8
 800a88a:	9300      	str	r3, [sp, #0]
 800a88c:	ec45 4b10 	vmov	d0, r4, r5
 800a890:	4653      	mov	r3, sl
 800a892:	4632      	mov	r2, r6
 800a894:	f001 fdac 	bl	800c3f0 <_dtoa_r>
 800a898:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a89c:	4607      	mov	r7, r0
 800a89e:	d102      	bne.n	800a8a6 <__cvt+0x66>
 800a8a0:	f019 0f01 	tst.w	r9, #1
 800a8a4:	d022      	beq.n	800a8ec <__cvt+0xac>
 800a8a6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a8aa:	eb07 0906 	add.w	r9, r7, r6
 800a8ae:	d110      	bne.n	800a8d2 <__cvt+0x92>
 800a8b0:	783b      	ldrb	r3, [r7, #0]
 800a8b2:	2b30      	cmp	r3, #48	; 0x30
 800a8b4:	d10a      	bne.n	800a8cc <__cvt+0x8c>
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	4620      	mov	r0, r4
 800a8bc:	4629      	mov	r1, r5
 800a8be:	f7f6 f91b 	bl	8000af8 <__aeabi_dcmpeq>
 800a8c2:	b918      	cbnz	r0, 800a8cc <__cvt+0x8c>
 800a8c4:	f1c6 0601 	rsb	r6, r6, #1
 800a8c8:	f8ca 6000 	str.w	r6, [sl]
 800a8cc:	f8da 3000 	ldr.w	r3, [sl]
 800a8d0:	4499      	add	r9, r3
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	4620      	mov	r0, r4
 800a8d8:	4629      	mov	r1, r5
 800a8da:	f7f6 f90d 	bl	8000af8 <__aeabi_dcmpeq>
 800a8de:	b108      	cbz	r0, 800a8e4 <__cvt+0xa4>
 800a8e0:	f8cd 900c 	str.w	r9, [sp, #12]
 800a8e4:	2230      	movs	r2, #48	; 0x30
 800a8e6:	9b03      	ldr	r3, [sp, #12]
 800a8e8:	454b      	cmp	r3, r9
 800a8ea:	d307      	bcc.n	800a8fc <__cvt+0xbc>
 800a8ec:	9b03      	ldr	r3, [sp, #12]
 800a8ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a8f0:	1bdb      	subs	r3, r3, r7
 800a8f2:	4638      	mov	r0, r7
 800a8f4:	6013      	str	r3, [r2, #0]
 800a8f6:	b004      	add	sp, #16
 800a8f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8fc:	1c59      	adds	r1, r3, #1
 800a8fe:	9103      	str	r1, [sp, #12]
 800a900:	701a      	strb	r2, [r3, #0]
 800a902:	e7f0      	b.n	800a8e6 <__cvt+0xa6>

0800a904 <__exponent>:
 800a904:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a906:	4603      	mov	r3, r0
 800a908:	2900      	cmp	r1, #0
 800a90a:	bfb8      	it	lt
 800a90c:	4249      	neglt	r1, r1
 800a90e:	f803 2b02 	strb.w	r2, [r3], #2
 800a912:	bfb4      	ite	lt
 800a914:	222d      	movlt	r2, #45	; 0x2d
 800a916:	222b      	movge	r2, #43	; 0x2b
 800a918:	2909      	cmp	r1, #9
 800a91a:	7042      	strb	r2, [r0, #1]
 800a91c:	dd2a      	ble.n	800a974 <__exponent+0x70>
 800a91e:	f10d 0407 	add.w	r4, sp, #7
 800a922:	46a4      	mov	ip, r4
 800a924:	270a      	movs	r7, #10
 800a926:	46a6      	mov	lr, r4
 800a928:	460a      	mov	r2, r1
 800a92a:	fb91 f6f7 	sdiv	r6, r1, r7
 800a92e:	fb07 1516 	mls	r5, r7, r6, r1
 800a932:	3530      	adds	r5, #48	; 0x30
 800a934:	2a63      	cmp	r2, #99	; 0x63
 800a936:	f104 34ff 	add.w	r4, r4, #4294967295
 800a93a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a93e:	4631      	mov	r1, r6
 800a940:	dcf1      	bgt.n	800a926 <__exponent+0x22>
 800a942:	3130      	adds	r1, #48	; 0x30
 800a944:	f1ae 0502 	sub.w	r5, lr, #2
 800a948:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a94c:	1c44      	adds	r4, r0, #1
 800a94e:	4629      	mov	r1, r5
 800a950:	4561      	cmp	r1, ip
 800a952:	d30a      	bcc.n	800a96a <__exponent+0x66>
 800a954:	f10d 0209 	add.w	r2, sp, #9
 800a958:	eba2 020e 	sub.w	r2, r2, lr
 800a95c:	4565      	cmp	r5, ip
 800a95e:	bf88      	it	hi
 800a960:	2200      	movhi	r2, #0
 800a962:	4413      	add	r3, r2
 800a964:	1a18      	subs	r0, r3, r0
 800a966:	b003      	add	sp, #12
 800a968:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a96a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a96e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a972:	e7ed      	b.n	800a950 <__exponent+0x4c>
 800a974:	2330      	movs	r3, #48	; 0x30
 800a976:	3130      	adds	r1, #48	; 0x30
 800a978:	7083      	strb	r3, [r0, #2]
 800a97a:	70c1      	strb	r1, [r0, #3]
 800a97c:	1d03      	adds	r3, r0, #4
 800a97e:	e7f1      	b.n	800a964 <__exponent+0x60>

0800a980 <_printf_float>:
 800a980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a984:	ed2d 8b02 	vpush	{d8}
 800a988:	b08d      	sub	sp, #52	; 0x34
 800a98a:	460c      	mov	r4, r1
 800a98c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a990:	4616      	mov	r6, r2
 800a992:	461f      	mov	r7, r3
 800a994:	4605      	mov	r5, r0
 800a996:	f002 fe89 	bl	800d6ac <_localeconv_r>
 800a99a:	f8d0 a000 	ldr.w	sl, [r0]
 800a99e:	4650      	mov	r0, sl
 800a9a0:	f7f5 fc2e 	bl	8000200 <strlen>
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	930a      	str	r3, [sp, #40]	; 0x28
 800a9a8:	6823      	ldr	r3, [r4, #0]
 800a9aa:	9305      	str	r3, [sp, #20]
 800a9ac:	f8d8 3000 	ldr.w	r3, [r8]
 800a9b0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a9b4:	3307      	adds	r3, #7
 800a9b6:	f023 0307 	bic.w	r3, r3, #7
 800a9ba:	f103 0208 	add.w	r2, r3, #8
 800a9be:	f8c8 2000 	str.w	r2, [r8]
 800a9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a9ca:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a9ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a9d2:	9307      	str	r3, [sp, #28]
 800a9d4:	f8cd 8018 	str.w	r8, [sp, #24]
 800a9d8:	ee08 0a10 	vmov	s16, r0
 800a9dc:	4b9f      	ldr	r3, [pc, #636]	; (800ac5c <_printf_float+0x2dc>)
 800a9de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a9e2:	f04f 32ff 	mov.w	r2, #4294967295
 800a9e6:	f7f6 f8b9 	bl	8000b5c <__aeabi_dcmpun>
 800a9ea:	bb88      	cbnz	r0, 800aa50 <_printf_float+0xd0>
 800a9ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a9f0:	4b9a      	ldr	r3, [pc, #616]	; (800ac5c <_printf_float+0x2dc>)
 800a9f2:	f04f 32ff 	mov.w	r2, #4294967295
 800a9f6:	f7f6 f893 	bl	8000b20 <__aeabi_dcmple>
 800a9fa:	bb48      	cbnz	r0, 800aa50 <_printf_float+0xd0>
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	2300      	movs	r3, #0
 800aa00:	4640      	mov	r0, r8
 800aa02:	4649      	mov	r1, r9
 800aa04:	f7f6 f882 	bl	8000b0c <__aeabi_dcmplt>
 800aa08:	b110      	cbz	r0, 800aa10 <_printf_float+0x90>
 800aa0a:	232d      	movs	r3, #45	; 0x2d
 800aa0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa10:	4b93      	ldr	r3, [pc, #588]	; (800ac60 <_printf_float+0x2e0>)
 800aa12:	4894      	ldr	r0, [pc, #592]	; (800ac64 <_printf_float+0x2e4>)
 800aa14:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800aa18:	bf94      	ite	ls
 800aa1a:	4698      	movls	r8, r3
 800aa1c:	4680      	movhi	r8, r0
 800aa1e:	2303      	movs	r3, #3
 800aa20:	6123      	str	r3, [r4, #16]
 800aa22:	9b05      	ldr	r3, [sp, #20]
 800aa24:	f023 0204 	bic.w	r2, r3, #4
 800aa28:	6022      	str	r2, [r4, #0]
 800aa2a:	f04f 0900 	mov.w	r9, #0
 800aa2e:	9700      	str	r7, [sp, #0]
 800aa30:	4633      	mov	r3, r6
 800aa32:	aa0b      	add	r2, sp, #44	; 0x2c
 800aa34:	4621      	mov	r1, r4
 800aa36:	4628      	mov	r0, r5
 800aa38:	f000 f9d8 	bl	800adec <_printf_common>
 800aa3c:	3001      	adds	r0, #1
 800aa3e:	f040 8090 	bne.w	800ab62 <_printf_float+0x1e2>
 800aa42:	f04f 30ff 	mov.w	r0, #4294967295
 800aa46:	b00d      	add	sp, #52	; 0x34
 800aa48:	ecbd 8b02 	vpop	{d8}
 800aa4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa50:	4642      	mov	r2, r8
 800aa52:	464b      	mov	r3, r9
 800aa54:	4640      	mov	r0, r8
 800aa56:	4649      	mov	r1, r9
 800aa58:	f7f6 f880 	bl	8000b5c <__aeabi_dcmpun>
 800aa5c:	b140      	cbz	r0, 800aa70 <_printf_float+0xf0>
 800aa5e:	464b      	mov	r3, r9
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	bfbc      	itt	lt
 800aa64:	232d      	movlt	r3, #45	; 0x2d
 800aa66:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800aa6a:	487f      	ldr	r0, [pc, #508]	; (800ac68 <_printf_float+0x2e8>)
 800aa6c:	4b7f      	ldr	r3, [pc, #508]	; (800ac6c <_printf_float+0x2ec>)
 800aa6e:	e7d1      	b.n	800aa14 <_printf_float+0x94>
 800aa70:	6863      	ldr	r3, [r4, #4]
 800aa72:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800aa76:	9206      	str	r2, [sp, #24]
 800aa78:	1c5a      	adds	r2, r3, #1
 800aa7a:	d13f      	bne.n	800aafc <_printf_float+0x17c>
 800aa7c:	2306      	movs	r3, #6
 800aa7e:	6063      	str	r3, [r4, #4]
 800aa80:	9b05      	ldr	r3, [sp, #20]
 800aa82:	6861      	ldr	r1, [r4, #4]
 800aa84:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800aa88:	2300      	movs	r3, #0
 800aa8a:	9303      	str	r3, [sp, #12]
 800aa8c:	ab0a      	add	r3, sp, #40	; 0x28
 800aa8e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800aa92:	ab09      	add	r3, sp, #36	; 0x24
 800aa94:	ec49 8b10 	vmov	d0, r8, r9
 800aa98:	9300      	str	r3, [sp, #0]
 800aa9a:	6022      	str	r2, [r4, #0]
 800aa9c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800aaa0:	4628      	mov	r0, r5
 800aaa2:	f7ff fecd 	bl	800a840 <__cvt>
 800aaa6:	9b06      	ldr	r3, [sp, #24]
 800aaa8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aaaa:	2b47      	cmp	r3, #71	; 0x47
 800aaac:	4680      	mov	r8, r0
 800aaae:	d108      	bne.n	800aac2 <_printf_float+0x142>
 800aab0:	1cc8      	adds	r0, r1, #3
 800aab2:	db02      	blt.n	800aaba <_printf_float+0x13a>
 800aab4:	6863      	ldr	r3, [r4, #4]
 800aab6:	4299      	cmp	r1, r3
 800aab8:	dd41      	ble.n	800ab3e <_printf_float+0x1be>
 800aaba:	f1ab 0b02 	sub.w	fp, fp, #2
 800aabe:	fa5f fb8b 	uxtb.w	fp, fp
 800aac2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800aac6:	d820      	bhi.n	800ab0a <_printf_float+0x18a>
 800aac8:	3901      	subs	r1, #1
 800aaca:	465a      	mov	r2, fp
 800aacc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800aad0:	9109      	str	r1, [sp, #36]	; 0x24
 800aad2:	f7ff ff17 	bl	800a904 <__exponent>
 800aad6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aad8:	1813      	adds	r3, r2, r0
 800aada:	2a01      	cmp	r2, #1
 800aadc:	4681      	mov	r9, r0
 800aade:	6123      	str	r3, [r4, #16]
 800aae0:	dc02      	bgt.n	800aae8 <_printf_float+0x168>
 800aae2:	6822      	ldr	r2, [r4, #0]
 800aae4:	07d2      	lsls	r2, r2, #31
 800aae6:	d501      	bpl.n	800aaec <_printf_float+0x16c>
 800aae8:	3301      	adds	r3, #1
 800aaea:	6123      	str	r3, [r4, #16]
 800aaec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d09c      	beq.n	800aa2e <_printf_float+0xae>
 800aaf4:	232d      	movs	r3, #45	; 0x2d
 800aaf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aafa:	e798      	b.n	800aa2e <_printf_float+0xae>
 800aafc:	9a06      	ldr	r2, [sp, #24]
 800aafe:	2a47      	cmp	r2, #71	; 0x47
 800ab00:	d1be      	bne.n	800aa80 <_printf_float+0x100>
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d1bc      	bne.n	800aa80 <_printf_float+0x100>
 800ab06:	2301      	movs	r3, #1
 800ab08:	e7b9      	b.n	800aa7e <_printf_float+0xfe>
 800ab0a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ab0e:	d118      	bne.n	800ab42 <_printf_float+0x1c2>
 800ab10:	2900      	cmp	r1, #0
 800ab12:	6863      	ldr	r3, [r4, #4]
 800ab14:	dd0b      	ble.n	800ab2e <_printf_float+0x1ae>
 800ab16:	6121      	str	r1, [r4, #16]
 800ab18:	b913      	cbnz	r3, 800ab20 <_printf_float+0x1a0>
 800ab1a:	6822      	ldr	r2, [r4, #0]
 800ab1c:	07d0      	lsls	r0, r2, #31
 800ab1e:	d502      	bpl.n	800ab26 <_printf_float+0x1a6>
 800ab20:	3301      	adds	r3, #1
 800ab22:	440b      	add	r3, r1
 800ab24:	6123      	str	r3, [r4, #16]
 800ab26:	65a1      	str	r1, [r4, #88]	; 0x58
 800ab28:	f04f 0900 	mov.w	r9, #0
 800ab2c:	e7de      	b.n	800aaec <_printf_float+0x16c>
 800ab2e:	b913      	cbnz	r3, 800ab36 <_printf_float+0x1b6>
 800ab30:	6822      	ldr	r2, [r4, #0]
 800ab32:	07d2      	lsls	r2, r2, #31
 800ab34:	d501      	bpl.n	800ab3a <_printf_float+0x1ba>
 800ab36:	3302      	adds	r3, #2
 800ab38:	e7f4      	b.n	800ab24 <_printf_float+0x1a4>
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	e7f2      	b.n	800ab24 <_printf_float+0x1a4>
 800ab3e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ab42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab44:	4299      	cmp	r1, r3
 800ab46:	db05      	blt.n	800ab54 <_printf_float+0x1d4>
 800ab48:	6823      	ldr	r3, [r4, #0]
 800ab4a:	6121      	str	r1, [r4, #16]
 800ab4c:	07d8      	lsls	r0, r3, #31
 800ab4e:	d5ea      	bpl.n	800ab26 <_printf_float+0x1a6>
 800ab50:	1c4b      	adds	r3, r1, #1
 800ab52:	e7e7      	b.n	800ab24 <_printf_float+0x1a4>
 800ab54:	2900      	cmp	r1, #0
 800ab56:	bfd4      	ite	le
 800ab58:	f1c1 0202 	rsble	r2, r1, #2
 800ab5c:	2201      	movgt	r2, #1
 800ab5e:	4413      	add	r3, r2
 800ab60:	e7e0      	b.n	800ab24 <_printf_float+0x1a4>
 800ab62:	6823      	ldr	r3, [r4, #0]
 800ab64:	055a      	lsls	r2, r3, #21
 800ab66:	d407      	bmi.n	800ab78 <_printf_float+0x1f8>
 800ab68:	6923      	ldr	r3, [r4, #16]
 800ab6a:	4642      	mov	r2, r8
 800ab6c:	4631      	mov	r1, r6
 800ab6e:	4628      	mov	r0, r5
 800ab70:	47b8      	blx	r7
 800ab72:	3001      	adds	r0, #1
 800ab74:	d12c      	bne.n	800abd0 <_printf_float+0x250>
 800ab76:	e764      	b.n	800aa42 <_printf_float+0xc2>
 800ab78:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ab7c:	f240 80e0 	bls.w	800ad40 <_printf_float+0x3c0>
 800ab80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ab84:	2200      	movs	r2, #0
 800ab86:	2300      	movs	r3, #0
 800ab88:	f7f5 ffb6 	bl	8000af8 <__aeabi_dcmpeq>
 800ab8c:	2800      	cmp	r0, #0
 800ab8e:	d034      	beq.n	800abfa <_printf_float+0x27a>
 800ab90:	4a37      	ldr	r2, [pc, #220]	; (800ac70 <_printf_float+0x2f0>)
 800ab92:	2301      	movs	r3, #1
 800ab94:	4631      	mov	r1, r6
 800ab96:	4628      	mov	r0, r5
 800ab98:	47b8      	blx	r7
 800ab9a:	3001      	adds	r0, #1
 800ab9c:	f43f af51 	beq.w	800aa42 <_printf_float+0xc2>
 800aba0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aba4:	429a      	cmp	r2, r3
 800aba6:	db02      	blt.n	800abae <_printf_float+0x22e>
 800aba8:	6823      	ldr	r3, [r4, #0]
 800abaa:	07d8      	lsls	r0, r3, #31
 800abac:	d510      	bpl.n	800abd0 <_printf_float+0x250>
 800abae:	ee18 3a10 	vmov	r3, s16
 800abb2:	4652      	mov	r2, sl
 800abb4:	4631      	mov	r1, r6
 800abb6:	4628      	mov	r0, r5
 800abb8:	47b8      	blx	r7
 800abba:	3001      	adds	r0, #1
 800abbc:	f43f af41 	beq.w	800aa42 <_printf_float+0xc2>
 800abc0:	f04f 0800 	mov.w	r8, #0
 800abc4:	f104 091a 	add.w	r9, r4, #26
 800abc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abca:	3b01      	subs	r3, #1
 800abcc:	4543      	cmp	r3, r8
 800abce:	dc09      	bgt.n	800abe4 <_printf_float+0x264>
 800abd0:	6823      	ldr	r3, [r4, #0]
 800abd2:	079b      	lsls	r3, r3, #30
 800abd4:	f100 8105 	bmi.w	800ade2 <_printf_float+0x462>
 800abd8:	68e0      	ldr	r0, [r4, #12]
 800abda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abdc:	4298      	cmp	r0, r3
 800abde:	bfb8      	it	lt
 800abe0:	4618      	movlt	r0, r3
 800abe2:	e730      	b.n	800aa46 <_printf_float+0xc6>
 800abe4:	2301      	movs	r3, #1
 800abe6:	464a      	mov	r2, r9
 800abe8:	4631      	mov	r1, r6
 800abea:	4628      	mov	r0, r5
 800abec:	47b8      	blx	r7
 800abee:	3001      	adds	r0, #1
 800abf0:	f43f af27 	beq.w	800aa42 <_printf_float+0xc2>
 800abf4:	f108 0801 	add.w	r8, r8, #1
 800abf8:	e7e6      	b.n	800abc8 <_printf_float+0x248>
 800abfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	dc39      	bgt.n	800ac74 <_printf_float+0x2f4>
 800ac00:	4a1b      	ldr	r2, [pc, #108]	; (800ac70 <_printf_float+0x2f0>)
 800ac02:	2301      	movs	r3, #1
 800ac04:	4631      	mov	r1, r6
 800ac06:	4628      	mov	r0, r5
 800ac08:	47b8      	blx	r7
 800ac0a:	3001      	adds	r0, #1
 800ac0c:	f43f af19 	beq.w	800aa42 <_printf_float+0xc2>
 800ac10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac14:	4313      	orrs	r3, r2
 800ac16:	d102      	bne.n	800ac1e <_printf_float+0x29e>
 800ac18:	6823      	ldr	r3, [r4, #0]
 800ac1a:	07d9      	lsls	r1, r3, #31
 800ac1c:	d5d8      	bpl.n	800abd0 <_printf_float+0x250>
 800ac1e:	ee18 3a10 	vmov	r3, s16
 800ac22:	4652      	mov	r2, sl
 800ac24:	4631      	mov	r1, r6
 800ac26:	4628      	mov	r0, r5
 800ac28:	47b8      	blx	r7
 800ac2a:	3001      	adds	r0, #1
 800ac2c:	f43f af09 	beq.w	800aa42 <_printf_float+0xc2>
 800ac30:	f04f 0900 	mov.w	r9, #0
 800ac34:	f104 0a1a 	add.w	sl, r4, #26
 800ac38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac3a:	425b      	negs	r3, r3
 800ac3c:	454b      	cmp	r3, r9
 800ac3e:	dc01      	bgt.n	800ac44 <_printf_float+0x2c4>
 800ac40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac42:	e792      	b.n	800ab6a <_printf_float+0x1ea>
 800ac44:	2301      	movs	r3, #1
 800ac46:	4652      	mov	r2, sl
 800ac48:	4631      	mov	r1, r6
 800ac4a:	4628      	mov	r0, r5
 800ac4c:	47b8      	blx	r7
 800ac4e:	3001      	adds	r0, #1
 800ac50:	f43f aef7 	beq.w	800aa42 <_printf_float+0xc2>
 800ac54:	f109 0901 	add.w	r9, r9, #1
 800ac58:	e7ee      	b.n	800ac38 <_printf_float+0x2b8>
 800ac5a:	bf00      	nop
 800ac5c:	7fefffff 	.word	0x7fefffff
 800ac60:	0800f51c 	.word	0x0800f51c
 800ac64:	0800f520 	.word	0x0800f520
 800ac68:	0800f528 	.word	0x0800f528
 800ac6c:	0800f524 	.word	0x0800f524
 800ac70:	0800f52c 	.word	0x0800f52c
 800ac74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ac78:	429a      	cmp	r2, r3
 800ac7a:	bfa8      	it	ge
 800ac7c:	461a      	movge	r2, r3
 800ac7e:	2a00      	cmp	r2, #0
 800ac80:	4691      	mov	r9, r2
 800ac82:	dc37      	bgt.n	800acf4 <_printf_float+0x374>
 800ac84:	f04f 0b00 	mov.w	fp, #0
 800ac88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ac8c:	f104 021a 	add.w	r2, r4, #26
 800ac90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ac92:	9305      	str	r3, [sp, #20]
 800ac94:	eba3 0309 	sub.w	r3, r3, r9
 800ac98:	455b      	cmp	r3, fp
 800ac9a:	dc33      	bgt.n	800ad04 <_printf_float+0x384>
 800ac9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aca0:	429a      	cmp	r2, r3
 800aca2:	db3b      	blt.n	800ad1c <_printf_float+0x39c>
 800aca4:	6823      	ldr	r3, [r4, #0]
 800aca6:	07da      	lsls	r2, r3, #31
 800aca8:	d438      	bmi.n	800ad1c <_printf_float+0x39c>
 800acaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acac:	9a05      	ldr	r2, [sp, #20]
 800acae:	9909      	ldr	r1, [sp, #36]	; 0x24
 800acb0:	1a9a      	subs	r2, r3, r2
 800acb2:	eba3 0901 	sub.w	r9, r3, r1
 800acb6:	4591      	cmp	r9, r2
 800acb8:	bfa8      	it	ge
 800acba:	4691      	movge	r9, r2
 800acbc:	f1b9 0f00 	cmp.w	r9, #0
 800acc0:	dc35      	bgt.n	800ad2e <_printf_float+0x3ae>
 800acc2:	f04f 0800 	mov.w	r8, #0
 800acc6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800acca:	f104 0a1a 	add.w	sl, r4, #26
 800acce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800acd2:	1a9b      	subs	r3, r3, r2
 800acd4:	eba3 0309 	sub.w	r3, r3, r9
 800acd8:	4543      	cmp	r3, r8
 800acda:	f77f af79 	ble.w	800abd0 <_printf_float+0x250>
 800acde:	2301      	movs	r3, #1
 800ace0:	4652      	mov	r2, sl
 800ace2:	4631      	mov	r1, r6
 800ace4:	4628      	mov	r0, r5
 800ace6:	47b8      	blx	r7
 800ace8:	3001      	adds	r0, #1
 800acea:	f43f aeaa 	beq.w	800aa42 <_printf_float+0xc2>
 800acee:	f108 0801 	add.w	r8, r8, #1
 800acf2:	e7ec      	b.n	800acce <_printf_float+0x34e>
 800acf4:	4613      	mov	r3, r2
 800acf6:	4631      	mov	r1, r6
 800acf8:	4642      	mov	r2, r8
 800acfa:	4628      	mov	r0, r5
 800acfc:	47b8      	blx	r7
 800acfe:	3001      	adds	r0, #1
 800ad00:	d1c0      	bne.n	800ac84 <_printf_float+0x304>
 800ad02:	e69e      	b.n	800aa42 <_printf_float+0xc2>
 800ad04:	2301      	movs	r3, #1
 800ad06:	4631      	mov	r1, r6
 800ad08:	4628      	mov	r0, r5
 800ad0a:	9205      	str	r2, [sp, #20]
 800ad0c:	47b8      	blx	r7
 800ad0e:	3001      	adds	r0, #1
 800ad10:	f43f ae97 	beq.w	800aa42 <_printf_float+0xc2>
 800ad14:	9a05      	ldr	r2, [sp, #20]
 800ad16:	f10b 0b01 	add.w	fp, fp, #1
 800ad1a:	e7b9      	b.n	800ac90 <_printf_float+0x310>
 800ad1c:	ee18 3a10 	vmov	r3, s16
 800ad20:	4652      	mov	r2, sl
 800ad22:	4631      	mov	r1, r6
 800ad24:	4628      	mov	r0, r5
 800ad26:	47b8      	blx	r7
 800ad28:	3001      	adds	r0, #1
 800ad2a:	d1be      	bne.n	800acaa <_printf_float+0x32a>
 800ad2c:	e689      	b.n	800aa42 <_printf_float+0xc2>
 800ad2e:	9a05      	ldr	r2, [sp, #20]
 800ad30:	464b      	mov	r3, r9
 800ad32:	4442      	add	r2, r8
 800ad34:	4631      	mov	r1, r6
 800ad36:	4628      	mov	r0, r5
 800ad38:	47b8      	blx	r7
 800ad3a:	3001      	adds	r0, #1
 800ad3c:	d1c1      	bne.n	800acc2 <_printf_float+0x342>
 800ad3e:	e680      	b.n	800aa42 <_printf_float+0xc2>
 800ad40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad42:	2a01      	cmp	r2, #1
 800ad44:	dc01      	bgt.n	800ad4a <_printf_float+0x3ca>
 800ad46:	07db      	lsls	r3, r3, #31
 800ad48:	d538      	bpl.n	800adbc <_printf_float+0x43c>
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	4642      	mov	r2, r8
 800ad4e:	4631      	mov	r1, r6
 800ad50:	4628      	mov	r0, r5
 800ad52:	47b8      	blx	r7
 800ad54:	3001      	adds	r0, #1
 800ad56:	f43f ae74 	beq.w	800aa42 <_printf_float+0xc2>
 800ad5a:	ee18 3a10 	vmov	r3, s16
 800ad5e:	4652      	mov	r2, sl
 800ad60:	4631      	mov	r1, r6
 800ad62:	4628      	mov	r0, r5
 800ad64:	47b8      	blx	r7
 800ad66:	3001      	adds	r0, #1
 800ad68:	f43f ae6b 	beq.w	800aa42 <_printf_float+0xc2>
 800ad6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ad70:	2200      	movs	r2, #0
 800ad72:	2300      	movs	r3, #0
 800ad74:	f7f5 fec0 	bl	8000af8 <__aeabi_dcmpeq>
 800ad78:	b9d8      	cbnz	r0, 800adb2 <_printf_float+0x432>
 800ad7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad7c:	f108 0201 	add.w	r2, r8, #1
 800ad80:	3b01      	subs	r3, #1
 800ad82:	4631      	mov	r1, r6
 800ad84:	4628      	mov	r0, r5
 800ad86:	47b8      	blx	r7
 800ad88:	3001      	adds	r0, #1
 800ad8a:	d10e      	bne.n	800adaa <_printf_float+0x42a>
 800ad8c:	e659      	b.n	800aa42 <_printf_float+0xc2>
 800ad8e:	2301      	movs	r3, #1
 800ad90:	4652      	mov	r2, sl
 800ad92:	4631      	mov	r1, r6
 800ad94:	4628      	mov	r0, r5
 800ad96:	47b8      	blx	r7
 800ad98:	3001      	adds	r0, #1
 800ad9a:	f43f ae52 	beq.w	800aa42 <_printf_float+0xc2>
 800ad9e:	f108 0801 	add.w	r8, r8, #1
 800ada2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ada4:	3b01      	subs	r3, #1
 800ada6:	4543      	cmp	r3, r8
 800ada8:	dcf1      	bgt.n	800ad8e <_printf_float+0x40e>
 800adaa:	464b      	mov	r3, r9
 800adac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800adb0:	e6dc      	b.n	800ab6c <_printf_float+0x1ec>
 800adb2:	f04f 0800 	mov.w	r8, #0
 800adb6:	f104 0a1a 	add.w	sl, r4, #26
 800adba:	e7f2      	b.n	800ada2 <_printf_float+0x422>
 800adbc:	2301      	movs	r3, #1
 800adbe:	4642      	mov	r2, r8
 800adc0:	e7df      	b.n	800ad82 <_printf_float+0x402>
 800adc2:	2301      	movs	r3, #1
 800adc4:	464a      	mov	r2, r9
 800adc6:	4631      	mov	r1, r6
 800adc8:	4628      	mov	r0, r5
 800adca:	47b8      	blx	r7
 800adcc:	3001      	adds	r0, #1
 800adce:	f43f ae38 	beq.w	800aa42 <_printf_float+0xc2>
 800add2:	f108 0801 	add.w	r8, r8, #1
 800add6:	68e3      	ldr	r3, [r4, #12]
 800add8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800adda:	1a5b      	subs	r3, r3, r1
 800addc:	4543      	cmp	r3, r8
 800adde:	dcf0      	bgt.n	800adc2 <_printf_float+0x442>
 800ade0:	e6fa      	b.n	800abd8 <_printf_float+0x258>
 800ade2:	f04f 0800 	mov.w	r8, #0
 800ade6:	f104 0919 	add.w	r9, r4, #25
 800adea:	e7f4      	b.n	800add6 <_printf_float+0x456>

0800adec <_printf_common>:
 800adec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adf0:	4616      	mov	r6, r2
 800adf2:	4699      	mov	r9, r3
 800adf4:	688a      	ldr	r2, [r1, #8]
 800adf6:	690b      	ldr	r3, [r1, #16]
 800adf8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800adfc:	4293      	cmp	r3, r2
 800adfe:	bfb8      	it	lt
 800ae00:	4613      	movlt	r3, r2
 800ae02:	6033      	str	r3, [r6, #0]
 800ae04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ae08:	4607      	mov	r7, r0
 800ae0a:	460c      	mov	r4, r1
 800ae0c:	b10a      	cbz	r2, 800ae12 <_printf_common+0x26>
 800ae0e:	3301      	adds	r3, #1
 800ae10:	6033      	str	r3, [r6, #0]
 800ae12:	6823      	ldr	r3, [r4, #0]
 800ae14:	0699      	lsls	r1, r3, #26
 800ae16:	bf42      	ittt	mi
 800ae18:	6833      	ldrmi	r3, [r6, #0]
 800ae1a:	3302      	addmi	r3, #2
 800ae1c:	6033      	strmi	r3, [r6, #0]
 800ae1e:	6825      	ldr	r5, [r4, #0]
 800ae20:	f015 0506 	ands.w	r5, r5, #6
 800ae24:	d106      	bne.n	800ae34 <_printf_common+0x48>
 800ae26:	f104 0a19 	add.w	sl, r4, #25
 800ae2a:	68e3      	ldr	r3, [r4, #12]
 800ae2c:	6832      	ldr	r2, [r6, #0]
 800ae2e:	1a9b      	subs	r3, r3, r2
 800ae30:	42ab      	cmp	r3, r5
 800ae32:	dc26      	bgt.n	800ae82 <_printf_common+0x96>
 800ae34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ae38:	1e13      	subs	r3, r2, #0
 800ae3a:	6822      	ldr	r2, [r4, #0]
 800ae3c:	bf18      	it	ne
 800ae3e:	2301      	movne	r3, #1
 800ae40:	0692      	lsls	r2, r2, #26
 800ae42:	d42b      	bmi.n	800ae9c <_printf_common+0xb0>
 800ae44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ae48:	4649      	mov	r1, r9
 800ae4a:	4638      	mov	r0, r7
 800ae4c:	47c0      	blx	r8
 800ae4e:	3001      	adds	r0, #1
 800ae50:	d01e      	beq.n	800ae90 <_printf_common+0xa4>
 800ae52:	6823      	ldr	r3, [r4, #0]
 800ae54:	68e5      	ldr	r5, [r4, #12]
 800ae56:	6832      	ldr	r2, [r6, #0]
 800ae58:	f003 0306 	and.w	r3, r3, #6
 800ae5c:	2b04      	cmp	r3, #4
 800ae5e:	bf08      	it	eq
 800ae60:	1aad      	subeq	r5, r5, r2
 800ae62:	68a3      	ldr	r3, [r4, #8]
 800ae64:	6922      	ldr	r2, [r4, #16]
 800ae66:	bf0c      	ite	eq
 800ae68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ae6c:	2500      	movne	r5, #0
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	bfc4      	itt	gt
 800ae72:	1a9b      	subgt	r3, r3, r2
 800ae74:	18ed      	addgt	r5, r5, r3
 800ae76:	2600      	movs	r6, #0
 800ae78:	341a      	adds	r4, #26
 800ae7a:	42b5      	cmp	r5, r6
 800ae7c:	d11a      	bne.n	800aeb4 <_printf_common+0xc8>
 800ae7e:	2000      	movs	r0, #0
 800ae80:	e008      	b.n	800ae94 <_printf_common+0xa8>
 800ae82:	2301      	movs	r3, #1
 800ae84:	4652      	mov	r2, sl
 800ae86:	4649      	mov	r1, r9
 800ae88:	4638      	mov	r0, r7
 800ae8a:	47c0      	blx	r8
 800ae8c:	3001      	adds	r0, #1
 800ae8e:	d103      	bne.n	800ae98 <_printf_common+0xac>
 800ae90:	f04f 30ff 	mov.w	r0, #4294967295
 800ae94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae98:	3501      	adds	r5, #1
 800ae9a:	e7c6      	b.n	800ae2a <_printf_common+0x3e>
 800ae9c:	18e1      	adds	r1, r4, r3
 800ae9e:	1c5a      	adds	r2, r3, #1
 800aea0:	2030      	movs	r0, #48	; 0x30
 800aea2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aea6:	4422      	add	r2, r4
 800aea8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aeac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aeb0:	3302      	adds	r3, #2
 800aeb2:	e7c7      	b.n	800ae44 <_printf_common+0x58>
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	4622      	mov	r2, r4
 800aeb8:	4649      	mov	r1, r9
 800aeba:	4638      	mov	r0, r7
 800aebc:	47c0      	blx	r8
 800aebe:	3001      	adds	r0, #1
 800aec0:	d0e6      	beq.n	800ae90 <_printf_common+0xa4>
 800aec2:	3601      	adds	r6, #1
 800aec4:	e7d9      	b.n	800ae7a <_printf_common+0x8e>
	...

0800aec8 <_printf_i>:
 800aec8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aecc:	7e0f      	ldrb	r7, [r1, #24]
 800aece:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aed0:	2f78      	cmp	r7, #120	; 0x78
 800aed2:	4691      	mov	r9, r2
 800aed4:	4680      	mov	r8, r0
 800aed6:	460c      	mov	r4, r1
 800aed8:	469a      	mov	sl, r3
 800aeda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aede:	d807      	bhi.n	800aef0 <_printf_i+0x28>
 800aee0:	2f62      	cmp	r7, #98	; 0x62
 800aee2:	d80a      	bhi.n	800aefa <_printf_i+0x32>
 800aee4:	2f00      	cmp	r7, #0
 800aee6:	f000 80d8 	beq.w	800b09a <_printf_i+0x1d2>
 800aeea:	2f58      	cmp	r7, #88	; 0x58
 800aeec:	f000 80a3 	beq.w	800b036 <_printf_i+0x16e>
 800aef0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aef4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aef8:	e03a      	b.n	800af70 <_printf_i+0xa8>
 800aefa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aefe:	2b15      	cmp	r3, #21
 800af00:	d8f6      	bhi.n	800aef0 <_printf_i+0x28>
 800af02:	a101      	add	r1, pc, #4	; (adr r1, 800af08 <_printf_i+0x40>)
 800af04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800af08:	0800af61 	.word	0x0800af61
 800af0c:	0800af75 	.word	0x0800af75
 800af10:	0800aef1 	.word	0x0800aef1
 800af14:	0800aef1 	.word	0x0800aef1
 800af18:	0800aef1 	.word	0x0800aef1
 800af1c:	0800aef1 	.word	0x0800aef1
 800af20:	0800af75 	.word	0x0800af75
 800af24:	0800aef1 	.word	0x0800aef1
 800af28:	0800aef1 	.word	0x0800aef1
 800af2c:	0800aef1 	.word	0x0800aef1
 800af30:	0800aef1 	.word	0x0800aef1
 800af34:	0800b081 	.word	0x0800b081
 800af38:	0800afa5 	.word	0x0800afa5
 800af3c:	0800b063 	.word	0x0800b063
 800af40:	0800aef1 	.word	0x0800aef1
 800af44:	0800aef1 	.word	0x0800aef1
 800af48:	0800b0a3 	.word	0x0800b0a3
 800af4c:	0800aef1 	.word	0x0800aef1
 800af50:	0800afa5 	.word	0x0800afa5
 800af54:	0800aef1 	.word	0x0800aef1
 800af58:	0800aef1 	.word	0x0800aef1
 800af5c:	0800b06b 	.word	0x0800b06b
 800af60:	682b      	ldr	r3, [r5, #0]
 800af62:	1d1a      	adds	r2, r3, #4
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	602a      	str	r2, [r5, #0]
 800af68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800af70:	2301      	movs	r3, #1
 800af72:	e0a3      	b.n	800b0bc <_printf_i+0x1f4>
 800af74:	6820      	ldr	r0, [r4, #0]
 800af76:	6829      	ldr	r1, [r5, #0]
 800af78:	0606      	lsls	r6, r0, #24
 800af7a:	f101 0304 	add.w	r3, r1, #4
 800af7e:	d50a      	bpl.n	800af96 <_printf_i+0xce>
 800af80:	680e      	ldr	r6, [r1, #0]
 800af82:	602b      	str	r3, [r5, #0]
 800af84:	2e00      	cmp	r6, #0
 800af86:	da03      	bge.n	800af90 <_printf_i+0xc8>
 800af88:	232d      	movs	r3, #45	; 0x2d
 800af8a:	4276      	negs	r6, r6
 800af8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af90:	485e      	ldr	r0, [pc, #376]	; (800b10c <_printf_i+0x244>)
 800af92:	230a      	movs	r3, #10
 800af94:	e019      	b.n	800afca <_printf_i+0x102>
 800af96:	680e      	ldr	r6, [r1, #0]
 800af98:	602b      	str	r3, [r5, #0]
 800af9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800af9e:	bf18      	it	ne
 800afa0:	b236      	sxthne	r6, r6
 800afa2:	e7ef      	b.n	800af84 <_printf_i+0xbc>
 800afa4:	682b      	ldr	r3, [r5, #0]
 800afa6:	6820      	ldr	r0, [r4, #0]
 800afa8:	1d19      	adds	r1, r3, #4
 800afaa:	6029      	str	r1, [r5, #0]
 800afac:	0601      	lsls	r1, r0, #24
 800afae:	d501      	bpl.n	800afb4 <_printf_i+0xec>
 800afb0:	681e      	ldr	r6, [r3, #0]
 800afb2:	e002      	b.n	800afba <_printf_i+0xf2>
 800afb4:	0646      	lsls	r6, r0, #25
 800afb6:	d5fb      	bpl.n	800afb0 <_printf_i+0xe8>
 800afb8:	881e      	ldrh	r6, [r3, #0]
 800afba:	4854      	ldr	r0, [pc, #336]	; (800b10c <_printf_i+0x244>)
 800afbc:	2f6f      	cmp	r7, #111	; 0x6f
 800afbe:	bf0c      	ite	eq
 800afc0:	2308      	moveq	r3, #8
 800afc2:	230a      	movne	r3, #10
 800afc4:	2100      	movs	r1, #0
 800afc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800afca:	6865      	ldr	r5, [r4, #4]
 800afcc:	60a5      	str	r5, [r4, #8]
 800afce:	2d00      	cmp	r5, #0
 800afd0:	bfa2      	ittt	ge
 800afd2:	6821      	ldrge	r1, [r4, #0]
 800afd4:	f021 0104 	bicge.w	r1, r1, #4
 800afd8:	6021      	strge	r1, [r4, #0]
 800afda:	b90e      	cbnz	r6, 800afe0 <_printf_i+0x118>
 800afdc:	2d00      	cmp	r5, #0
 800afde:	d04d      	beq.n	800b07c <_printf_i+0x1b4>
 800afe0:	4615      	mov	r5, r2
 800afe2:	fbb6 f1f3 	udiv	r1, r6, r3
 800afe6:	fb03 6711 	mls	r7, r3, r1, r6
 800afea:	5dc7      	ldrb	r7, [r0, r7]
 800afec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aff0:	4637      	mov	r7, r6
 800aff2:	42bb      	cmp	r3, r7
 800aff4:	460e      	mov	r6, r1
 800aff6:	d9f4      	bls.n	800afe2 <_printf_i+0x11a>
 800aff8:	2b08      	cmp	r3, #8
 800affa:	d10b      	bne.n	800b014 <_printf_i+0x14c>
 800affc:	6823      	ldr	r3, [r4, #0]
 800affe:	07de      	lsls	r6, r3, #31
 800b000:	d508      	bpl.n	800b014 <_printf_i+0x14c>
 800b002:	6923      	ldr	r3, [r4, #16]
 800b004:	6861      	ldr	r1, [r4, #4]
 800b006:	4299      	cmp	r1, r3
 800b008:	bfde      	ittt	le
 800b00a:	2330      	movle	r3, #48	; 0x30
 800b00c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b010:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b014:	1b52      	subs	r2, r2, r5
 800b016:	6122      	str	r2, [r4, #16]
 800b018:	f8cd a000 	str.w	sl, [sp]
 800b01c:	464b      	mov	r3, r9
 800b01e:	aa03      	add	r2, sp, #12
 800b020:	4621      	mov	r1, r4
 800b022:	4640      	mov	r0, r8
 800b024:	f7ff fee2 	bl	800adec <_printf_common>
 800b028:	3001      	adds	r0, #1
 800b02a:	d14c      	bne.n	800b0c6 <_printf_i+0x1fe>
 800b02c:	f04f 30ff 	mov.w	r0, #4294967295
 800b030:	b004      	add	sp, #16
 800b032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b036:	4835      	ldr	r0, [pc, #212]	; (800b10c <_printf_i+0x244>)
 800b038:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b03c:	6829      	ldr	r1, [r5, #0]
 800b03e:	6823      	ldr	r3, [r4, #0]
 800b040:	f851 6b04 	ldr.w	r6, [r1], #4
 800b044:	6029      	str	r1, [r5, #0]
 800b046:	061d      	lsls	r5, r3, #24
 800b048:	d514      	bpl.n	800b074 <_printf_i+0x1ac>
 800b04a:	07df      	lsls	r7, r3, #31
 800b04c:	bf44      	itt	mi
 800b04e:	f043 0320 	orrmi.w	r3, r3, #32
 800b052:	6023      	strmi	r3, [r4, #0]
 800b054:	b91e      	cbnz	r6, 800b05e <_printf_i+0x196>
 800b056:	6823      	ldr	r3, [r4, #0]
 800b058:	f023 0320 	bic.w	r3, r3, #32
 800b05c:	6023      	str	r3, [r4, #0]
 800b05e:	2310      	movs	r3, #16
 800b060:	e7b0      	b.n	800afc4 <_printf_i+0xfc>
 800b062:	6823      	ldr	r3, [r4, #0]
 800b064:	f043 0320 	orr.w	r3, r3, #32
 800b068:	6023      	str	r3, [r4, #0]
 800b06a:	2378      	movs	r3, #120	; 0x78
 800b06c:	4828      	ldr	r0, [pc, #160]	; (800b110 <_printf_i+0x248>)
 800b06e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b072:	e7e3      	b.n	800b03c <_printf_i+0x174>
 800b074:	0659      	lsls	r1, r3, #25
 800b076:	bf48      	it	mi
 800b078:	b2b6      	uxthmi	r6, r6
 800b07a:	e7e6      	b.n	800b04a <_printf_i+0x182>
 800b07c:	4615      	mov	r5, r2
 800b07e:	e7bb      	b.n	800aff8 <_printf_i+0x130>
 800b080:	682b      	ldr	r3, [r5, #0]
 800b082:	6826      	ldr	r6, [r4, #0]
 800b084:	6961      	ldr	r1, [r4, #20]
 800b086:	1d18      	adds	r0, r3, #4
 800b088:	6028      	str	r0, [r5, #0]
 800b08a:	0635      	lsls	r5, r6, #24
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	d501      	bpl.n	800b094 <_printf_i+0x1cc>
 800b090:	6019      	str	r1, [r3, #0]
 800b092:	e002      	b.n	800b09a <_printf_i+0x1d2>
 800b094:	0670      	lsls	r0, r6, #25
 800b096:	d5fb      	bpl.n	800b090 <_printf_i+0x1c8>
 800b098:	8019      	strh	r1, [r3, #0]
 800b09a:	2300      	movs	r3, #0
 800b09c:	6123      	str	r3, [r4, #16]
 800b09e:	4615      	mov	r5, r2
 800b0a0:	e7ba      	b.n	800b018 <_printf_i+0x150>
 800b0a2:	682b      	ldr	r3, [r5, #0]
 800b0a4:	1d1a      	adds	r2, r3, #4
 800b0a6:	602a      	str	r2, [r5, #0]
 800b0a8:	681d      	ldr	r5, [r3, #0]
 800b0aa:	6862      	ldr	r2, [r4, #4]
 800b0ac:	2100      	movs	r1, #0
 800b0ae:	4628      	mov	r0, r5
 800b0b0:	f7f5 f8ae 	bl	8000210 <memchr>
 800b0b4:	b108      	cbz	r0, 800b0ba <_printf_i+0x1f2>
 800b0b6:	1b40      	subs	r0, r0, r5
 800b0b8:	6060      	str	r0, [r4, #4]
 800b0ba:	6863      	ldr	r3, [r4, #4]
 800b0bc:	6123      	str	r3, [r4, #16]
 800b0be:	2300      	movs	r3, #0
 800b0c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0c4:	e7a8      	b.n	800b018 <_printf_i+0x150>
 800b0c6:	6923      	ldr	r3, [r4, #16]
 800b0c8:	462a      	mov	r2, r5
 800b0ca:	4649      	mov	r1, r9
 800b0cc:	4640      	mov	r0, r8
 800b0ce:	47d0      	blx	sl
 800b0d0:	3001      	adds	r0, #1
 800b0d2:	d0ab      	beq.n	800b02c <_printf_i+0x164>
 800b0d4:	6823      	ldr	r3, [r4, #0]
 800b0d6:	079b      	lsls	r3, r3, #30
 800b0d8:	d413      	bmi.n	800b102 <_printf_i+0x23a>
 800b0da:	68e0      	ldr	r0, [r4, #12]
 800b0dc:	9b03      	ldr	r3, [sp, #12]
 800b0de:	4298      	cmp	r0, r3
 800b0e0:	bfb8      	it	lt
 800b0e2:	4618      	movlt	r0, r3
 800b0e4:	e7a4      	b.n	800b030 <_printf_i+0x168>
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	4632      	mov	r2, r6
 800b0ea:	4649      	mov	r1, r9
 800b0ec:	4640      	mov	r0, r8
 800b0ee:	47d0      	blx	sl
 800b0f0:	3001      	adds	r0, #1
 800b0f2:	d09b      	beq.n	800b02c <_printf_i+0x164>
 800b0f4:	3501      	adds	r5, #1
 800b0f6:	68e3      	ldr	r3, [r4, #12]
 800b0f8:	9903      	ldr	r1, [sp, #12]
 800b0fa:	1a5b      	subs	r3, r3, r1
 800b0fc:	42ab      	cmp	r3, r5
 800b0fe:	dcf2      	bgt.n	800b0e6 <_printf_i+0x21e>
 800b100:	e7eb      	b.n	800b0da <_printf_i+0x212>
 800b102:	2500      	movs	r5, #0
 800b104:	f104 0619 	add.w	r6, r4, #25
 800b108:	e7f5      	b.n	800b0f6 <_printf_i+0x22e>
 800b10a:	bf00      	nop
 800b10c:	0800f52e 	.word	0x0800f52e
 800b110:	0800f53f 	.word	0x0800f53f

0800b114 <_scanf_float>:
 800b114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b118:	b087      	sub	sp, #28
 800b11a:	4617      	mov	r7, r2
 800b11c:	9303      	str	r3, [sp, #12]
 800b11e:	688b      	ldr	r3, [r1, #8]
 800b120:	1e5a      	subs	r2, r3, #1
 800b122:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b126:	bf83      	ittte	hi
 800b128:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b12c:	195b      	addhi	r3, r3, r5
 800b12e:	9302      	strhi	r3, [sp, #8]
 800b130:	2300      	movls	r3, #0
 800b132:	bf86      	itte	hi
 800b134:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b138:	608b      	strhi	r3, [r1, #8]
 800b13a:	9302      	strls	r3, [sp, #8]
 800b13c:	680b      	ldr	r3, [r1, #0]
 800b13e:	468b      	mov	fp, r1
 800b140:	2500      	movs	r5, #0
 800b142:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b146:	f84b 3b1c 	str.w	r3, [fp], #28
 800b14a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b14e:	4680      	mov	r8, r0
 800b150:	460c      	mov	r4, r1
 800b152:	465e      	mov	r6, fp
 800b154:	46aa      	mov	sl, r5
 800b156:	46a9      	mov	r9, r5
 800b158:	9501      	str	r5, [sp, #4]
 800b15a:	68a2      	ldr	r2, [r4, #8]
 800b15c:	b152      	cbz	r2, 800b174 <_scanf_float+0x60>
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	781b      	ldrb	r3, [r3, #0]
 800b162:	2b4e      	cmp	r3, #78	; 0x4e
 800b164:	d864      	bhi.n	800b230 <_scanf_float+0x11c>
 800b166:	2b40      	cmp	r3, #64	; 0x40
 800b168:	d83c      	bhi.n	800b1e4 <_scanf_float+0xd0>
 800b16a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b16e:	b2c8      	uxtb	r0, r1
 800b170:	280e      	cmp	r0, #14
 800b172:	d93a      	bls.n	800b1ea <_scanf_float+0xd6>
 800b174:	f1b9 0f00 	cmp.w	r9, #0
 800b178:	d003      	beq.n	800b182 <_scanf_float+0x6e>
 800b17a:	6823      	ldr	r3, [r4, #0]
 800b17c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b180:	6023      	str	r3, [r4, #0]
 800b182:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b186:	f1ba 0f01 	cmp.w	sl, #1
 800b18a:	f200 8113 	bhi.w	800b3b4 <_scanf_float+0x2a0>
 800b18e:	455e      	cmp	r6, fp
 800b190:	f200 8105 	bhi.w	800b39e <_scanf_float+0x28a>
 800b194:	2501      	movs	r5, #1
 800b196:	4628      	mov	r0, r5
 800b198:	b007      	add	sp, #28
 800b19a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b19e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b1a2:	2a0d      	cmp	r2, #13
 800b1a4:	d8e6      	bhi.n	800b174 <_scanf_float+0x60>
 800b1a6:	a101      	add	r1, pc, #4	; (adr r1, 800b1ac <_scanf_float+0x98>)
 800b1a8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b1ac:	0800b2eb 	.word	0x0800b2eb
 800b1b0:	0800b175 	.word	0x0800b175
 800b1b4:	0800b175 	.word	0x0800b175
 800b1b8:	0800b175 	.word	0x0800b175
 800b1bc:	0800b34b 	.word	0x0800b34b
 800b1c0:	0800b323 	.word	0x0800b323
 800b1c4:	0800b175 	.word	0x0800b175
 800b1c8:	0800b175 	.word	0x0800b175
 800b1cc:	0800b2f9 	.word	0x0800b2f9
 800b1d0:	0800b175 	.word	0x0800b175
 800b1d4:	0800b175 	.word	0x0800b175
 800b1d8:	0800b175 	.word	0x0800b175
 800b1dc:	0800b175 	.word	0x0800b175
 800b1e0:	0800b2b1 	.word	0x0800b2b1
 800b1e4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b1e8:	e7db      	b.n	800b1a2 <_scanf_float+0x8e>
 800b1ea:	290e      	cmp	r1, #14
 800b1ec:	d8c2      	bhi.n	800b174 <_scanf_float+0x60>
 800b1ee:	a001      	add	r0, pc, #4	; (adr r0, 800b1f4 <_scanf_float+0xe0>)
 800b1f0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b1f4:	0800b2a3 	.word	0x0800b2a3
 800b1f8:	0800b175 	.word	0x0800b175
 800b1fc:	0800b2a3 	.word	0x0800b2a3
 800b200:	0800b337 	.word	0x0800b337
 800b204:	0800b175 	.word	0x0800b175
 800b208:	0800b251 	.word	0x0800b251
 800b20c:	0800b28d 	.word	0x0800b28d
 800b210:	0800b28d 	.word	0x0800b28d
 800b214:	0800b28d 	.word	0x0800b28d
 800b218:	0800b28d 	.word	0x0800b28d
 800b21c:	0800b28d 	.word	0x0800b28d
 800b220:	0800b28d 	.word	0x0800b28d
 800b224:	0800b28d 	.word	0x0800b28d
 800b228:	0800b28d 	.word	0x0800b28d
 800b22c:	0800b28d 	.word	0x0800b28d
 800b230:	2b6e      	cmp	r3, #110	; 0x6e
 800b232:	d809      	bhi.n	800b248 <_scanf_float+0x134>
 800b234:	2b60      	cmp	r3, #96	; 0x60
 800b236:	d8b2      	bhi.n	800b19e <_scanf_float+0x8a>
 800b238:	2b54      	cmp	r3, #84	; 0x54
 800b23a:	d077      	beq.n	800b32c <_scanf_float+0x218>
 800b23c:	2b59      	cmp	r3, #89	; 0x59
 800b23e:	d199      	bne.n	800b174 <_scanf_float+0x60>
 800b240:	2d07      	cmp	r5, #7
 800b242:	d197      	bne.n	800b174 <_scanf_float+0x60>
 800b244:	2508      	movs	r5, #8
 800b246:	e029      	b.n	800b29c <_scanf_float+0x188>
 800b248:	2b74      	cmp	r3, #116	; 0x74
 800b24a:	d06f      	beq.n	800b32c <_scanf_float+0x218>
 800b24c:	2b79      	cmp	r3, #121	; 0x79
 800b24e:	e7f6      	b.n	800b23e <_scanf_float+0x12a>
 800b250:	6821      	ldr	r1, [r4, #0]
 800b252:	05c8      	lsls	r0, r1, #23
 800b254:	d51a      	bpl.n	800b28c <_scanf_float+0x178>
 800b256:	9b02      	ldr	r3, [sp, #8]
 800b258:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b25c:	6021      	str	r1, [r4, #0]
 800b25e:	f109 0901 	add.w	r9, r9, #1
 800b262:	b11b      	cbz	r3, 800b26c <_scanf_float+0x158>
 800b264:	3b01      	subs	r3, #1
 800b266:	3201      	adds	r2, #1
 800b268:	9302      	str	r3, [sp, #8]
 800b26a:	60a2      	str	r2, [r4, #8]
 800b26c:	68a3      	ldr	r3, [r4, #8]
 800b26e:	3b01      	subs	r3, #1
 800b270:	60a3      	str	r3, [r4, #8]
 800b272:	6923      	ldr	r3, [r4, #16]
 800b274:	3301      	adds	r3, #1
 800b276:	6123      	str	r3, [r4, #16]
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	3b01      	subs	r3, #1
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	607b      	str	r3, [r7, #4]
 800b280:	f340 8084 	ble.w	800b38c <_scanf_float+0x278>
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	3301      	adds	r3, #1
 800b288:	603b      	str	r3, [r7, #0]
 800b28a:	e766      	b.n	800b15a <_scanf_float+0x46>
 800b28c:	eb1a 0f05 	cmn.w	sl, r5
 800b290:	f47f af70 	bne.w	800b174 <_scanf_float+0x60>
 800b294:	6822      	ldr	r2, [r4, #0]
 800b296:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b29a:	6022      	str	r2, [r4, #0]
 800b29c:	f806 3b01 	strb.w	r3, [r6], #1
 800b2a0:	e7e4      	b.n	800b26c <_scanf_float+0x158>
 800b2a2:	6822      	ldr	r2, [r4, #0]
 800b2a4:	0610      	lsls	r0, r2, #24
 800b2a6:	f57f af65 	bpl.w	800b174 <_scanf_float+0x60>
 800b2aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b2ae:	e7f4      	b.n	800b29a <_scanf_float+0x186>
 800b2b0:	f1ba 0f00 	cmp.w	sl, #0
 800b2b4:	d10e      	bne.n	800b2d4 <_scanf_float+0x1c0>
 800b2b6:	f1b9 0f00 	cmp.w	r9, #0
 800b2ba:	d10e      	bne.n	800b2da <_scanf_float+0x1c6>
 800b2bc:	6822      	ldr	r2, [r4, #0]
 800b2be:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b2c2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b2c6:	d108      	bne.n	800b2da <_scanf_float+0x1c6>
 800b2c8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b2cc:	6022      	str	r2, [r4, #0]
 800b2ce:	f04f 0a01 	mov.w	sl, #1
 800b2d2:	e7e3      	b.n	800b29c <_scanf_float+0x188>
 800b2d4:	f1ba 0f02 	cmp.w	sl, #2
 800b2d8:	d055      	beq.n	800b386 <_scanf_float+0x272>
 800b2da:	2d01      	cmp	r5, #1
 800b2dc:	d002      	beq.n	800b2e4 <_scanf_float+0x1d0>
 800b2de:	2d04      	cmp	r5, #4
 800b2e0:	f47f af48 	bne.w	800b174 <_scanf_float+0x60>
 800b2e4:	3501      	adds	r5, #1
 800b2e6:	b2ed      	uxtb	r5, r5
 800b2e8:	e7d8      	b.n	800b29c <_scanf_float+0x188>
 800b2ea:	f1ba 0f01 	cmp.w	sl, #1
 800b2ee:	f47f af41 	bne.w	800b174 <_scanf_float+0x60>
 800b2f2:	f04f 0a02 	mov.w	sl, #2
 800b2f6:	e7d1      	b.n	800b29c <_scanf_float+0x188>
 800b2f8:	b97d      	cbnz	r5, 800b31a <_scanf_float+0x206>
 800b2fa:	f1b9 0f00 	cmp.w	r9, #0
 800b2fe:	f47f af3c 	bne.w	800b17a <_scanf_float+0x66>
 800b302:	6822      	ldr	r2, [r4, #0]
 800b304:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b308:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b30c:	f47f af39 	bne.w	800b182 <_scanf_float+0x6e>
 800b310:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b314:	6022      	str	r2, [r4, #0]
 800b316:	2501      	movs	r5, #1
 800b318:	e7c0      	b.n	800b29c <_scanf_float+0x188>
 800b31a:	2d03      	cmp	r5, #3
 800b31c:	d0e2      	beq.n	800b2e4 <_scanf_float+0x1d0>
 800b31e:	2d05      	cmp	r5, #5
 800b320:	e7de      	b.n	800b2e0 <_scanf_float+0x1cc>
 800b322:	2d02      	cmp	r5, #2
 800b324:	f47f af26 	bne.w	800b174 <_scanf_float+0x60>
 800b328:	2503      	movs	r5, #3
 800b32a:	e7b7      	b.n	800b29c <_scanf_float+0x188>
 800b32c:	2d06      	cmp	r5, #6
 800b32e:	f47f af21 	bne.w	800b174 <_scanf_float+0x60>
 800b332:	2507      	movs	r5, #7
 800b334:	e7b2      	b.n	800b29c <_scanf_float+0x188>
 800b336:	6822      	ldr	r2, [r4, #0]
 800b338:	0591      	lsls	r1, r2, #22
 800b33a:	f57f af1b 	bpl.w	800b174 <_scanf_float+0x60>
 800b33e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800b342:	6022      	str	r2, [r4, #0]
 800b344:	f8cd 9004 	str.w	r9, [sp, #4]
 800b348:	e7a8      	b.n	800b29c <_scanf_float+0x188>
 800b34a:	6822      	ldr	r2, [r4, #0]
 800b34c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b350:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b354:	d006      	beq.n	800b364 <_scanf_float+0x250>
 800b356:	0550      	lsls	r0, r2, #21
 800b358:	f57f af0c 	bpl.w	800b174 <_scanf_float+0x60>
 800b35c:	f1b9 0f00 	cmp.w	r9, #0
 800b360:	f43f af0f 	beq.w	800b182 <_scanf_float+0x6e>
 800b364:	0591      	lsls	r1, r2, #22
 800b366:	bf58      	it	pl
 800b368:	9901      	ldrpl	r1, [sp, #4]
 800b36a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b36e:	bf58      	it	pl
 800b370:	eba9 0101 	subpl.w	r1, r9, r1
 800b374:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b378:	bf58      	it	pl
 800b37a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b37e:	6022      	str	r2, [r4, #0]
 800b380:	f04f 0900 	mov.w	r9, #0
 800b384:	e78a      	b.n	800b29c <_scanf_float+0x188>
 800b386:	f04f 0a03 	mov.w	sl, #3
 800b38a:	e787      	b.n	800b29c <_scanf_float+0x188>
 800b38c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b390:	4639      	mov	r1, r7
 800b392:	4640      	mov	r0, r8
 800b394:	4798      	blx	r3
 800b396:	2800      	cmp	r0, #0
 800b398:	f43f aedf 	beq.w	800b15a <_scanf_float+0x46>
 800b39c:	e6ea      	b.n	800b174 <_scanf_float+0x60>
 800b39e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b3a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b3a6:	463a      	mov	r2, r7
 800b3a8:	4640      	mov	r0, r8
 800b3aa:	4798      	blx	r3
 800b3ac:	6923      	ldr	r3, [r4, #16]
 800b3ae:	3b01      	subs	r3, #1
 800b3b0:	6123      	str	r3, [r4, #16]
 800b3b2:	e6ec      	b.n	800b18e <_scanf_float+0x7a>
 800b3b4:	1e6b      	subs	r3, r5, #1
 800b3b6:	2b06      	cmp	r3, #6
 800b3b8:	d825      	bhi.n	800b406 <_scanf_float+0x2f2>
 800b3ba:	2d02      	cmp	r5, #2
 800b3bc:	d836      	bhi.n	800b42c <_scanf_float+0x318>
 800b3be:	455e      	cmp	r6, fp
 800b3c0:	f67f aee8 	bls.w	800b194 <_scanf_float+0x80>
 800b3c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b3c8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b3cc:	463a      	mov	r2, r7
 800b3ce:	4640      	mov	r0, r8
 800b3d0:	4798      	blx	r3
 800b3d2:	6923      	ldr	r3, [r4, #16]
 800b3d4:	3b01      	subs	r3, #1
 800b3d6:	6123      	str	r3, [r4, #16]
 800b3d8:	e7f1      	b.n	800b3be <_scanf_float+0x2aa>
 800b3da:	9802      	ldr	r0, [sp, #8]
 800b3dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b3e0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b3e4:	9002      	str	r0, [sp, #8]
 800b3e6:	463a      	mov	r2, r7
 800b3e8:	4640      	mov	r0, r8
 800b3ea:	4798      	blx	r3
 800b3ec:	6923      	ldr	r3, [r4, #16]
 800b3ee:	3b01      	subs	r3, #1
 800b3f0:	6123      	str	r3, [r4, #16]
 800b3f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b3f6:	fa5f fa8a 	uxtb.w	sl, sl
 800b3fa:	f1ba 0f02 	cmp.w	sl, #2
 800b3fe:	d1ec      	bne.n	800b3da <_scanf_float+0x2c6>
 800b400:	3d03      	subs	r5, #3
 800b402:	b2ed      	uxtb	r5, r5
 800b404:	1b76      	subs	r6, r6, r5
 800b406:	6823      	ldr	r3, [r4, #0]
 800b408:	05da      	lsls	r2, r3, #23
 800b40a:	d52f      	bpl.n	800b46c <_scanf_float+0x358>
 800b40c:	055b      	lsls	r3, r3, #21
 800b40e:	d510      	bpl.n	800b432 <_scanf_float+0x31e>
 800b410:	455e      	cmp	r6, fp
 800b412:	f67f aebf 	bls.w	800b194 <_scanf_float+0x80>
 800b416:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b41a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b41e:	463a      	mov	r2, r7
 800b420:	4640      	mov	r0, r8
 800b422:	4798      	blx	r3
 800b424:	6923      	ldr	r3, [r4, #16]
 800b426:	3b01      	subs	r3, #1
 800b428:	6123      	str	r3, [r4, #16]
 800b42a:	e7f1      	b.n	800b410 <_scanf_float+0x2fc>
 800b42c:	46aa      	mov	sl, r5
 800b42e:	9602      	str	r6, [sp, #8]
 800b430:	e7df      	b.n	800b3f2 <_scanf_float+0x2de>
 800b432:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b436:	6923      	ldr	r3, [r4, #16]
 800b438:	2965      	cmp	r1, #101	; 0x65
 800b43a:	f103 33ff 	add.w	r3, r3, #4294967295
 800b43e:	f106 35ff 	add.w	r5, r6, #4294967295
 800b442:	6123      	str	r3, [r4, #16]
 800b444:	d00c      	beq.n	800b460 <_scanf_float+0x34c>
 800b446:	2945      	cmp	r1, #69	; 0x45
 800b448:	d00a      	beq.n	800b460 <_scanf_float+0x34c>
 800b44a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b44e:	463a      	mov	r2, r7
 800b450:	4640      	mov	r0, r8
 800b452:	4798      	blx	r3
 800b454:	6923      	ldr	r3, [r4, #16]
 800b456:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b45a:	3b01      	subs	r3, #1
 800b45c:	1eb5      	subs	r5, r6, #2
 800b45e:	6123      	str	r3, [r4, #16]
 800b460:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b464:	463a      	mov	r2, r7
 800b466:	4640      	mov	r0, r8
 800b468:	4798      	blx	r3
 800b46a:	462e      	mov	r6, r5
 800b46c:	6825      	ldr	r5, [r4, #0]
 800b46e:	f015 0510 	ands.w	r5, r5, #16
 800b472:	d159      	bne.n	800b528 <_scanf_float+0x414>
 800b474:	7035      	strb	r5, [r6, #0]
 800b476:	6823      	ldr	r3, [r4, #0]
 800b478:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b47c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b480:	d11b      	bne.n	800b4ba <_scanf_float+0x3a6>
 800b482:	9b01      	ldr	r3, [sp, #4]
 800b484:	454b      	cmp	r3, r9
 800b486:	eba3 0209 	sub.w	r2, r3, r9
 800b48a:	d123      	bne.n	800b4d4 <_scanf_float+0x3c0>
 800b48c:	2200      	movs	r2, #0
 800b48e:	4659      	mov	r1, fp
 800b490:	4640      	mov	r0, r8
 800b492:	f000 fe97 	bl	800c1c4 <_strtod_r>
 800b496:	6822      	ldr	r2, [r4, #0]
 800b498:	9b03      	ldr	r3, [sp, #12]
 800b49a:	f012 0f02 	tst.w	r2, #2
 800b49e:	ec57 6b10 	vmov	r6, r7, d0
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	d021      	beq.n	800b4ea <_scanf_float+0x3d6>
 800b4a6:	9903      	ldr	r1, [sp, #12]
 800b4a8:	1d1a      	adds	r2, r3, #4
 800b4aa:	600a      	str	r2, [r1, #0]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	e9c3 6700 	strd	r6, r7, [r3]
 800b4b2:	68e3      	ldr	r3, [r4, #12]
 800b4b4:	3301      	adds	r3, #1
 800b4b6:	60e3      	str	r3, [r4, #12]
 800b4b8:	e66d      	b.n	800b196 <_scanf_float+0x82>
 800b4ba:	9b04      	ldr	r3, [sp, #16]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d0e5      	beq.n	800b48c <_scanf_float+0x378>
 800b4c0:	9905      	ldr	r1, [sp, #20]
 800b4c2:	230a      	movs	r3, #10
 800b4c4:	462a      	mov	r2, r5
 800b4c6:	3101      	adds	r1, #1
 800b4c8:	4640      	mov	r0, r8
 800b4ca:	f000 ff03 	bl	800c2d4 <_strtol_r>
 800b4ce:	9b04      	ldr	r3, [sp, #16]
 800b4d0:	9e05      	ldr	r6, [sp, #20]
 800b4d2:	1ac2      	subs	r2, r0, r3
 800b4d4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b4d8:	429e      	cmp	r6, r3
 800b4da:	bf28      	it	cs
 800b4dc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b4e0:	4912      	ldr	r1, [pc, #72]	; (800b52c <_scanf_float+0x418>)
 800b4e2:	4630      	mov	r0, r6
 800b4e4:	f000 f82c 	bl	800b540 <siprintf>
 800b4e8:	e7d0      	b.n	800b48c <_scanf_float+0x378>
 800b4ea:	9903      	ldr	r1, [sp, #12]
 800b4ec:	f012 0f04 	tst.w	r2, #4
 800b4f0:	f103 0204 	add.w	r2, r3, #4
 800b4f4:	600a      	str	r2, [r1, #0]
 800b4f6:	d1d9      	bne.n	800b4ac <_scanf_float+0x398>
 800b4f8:	f8d3 8000 	ldr.w	r8, [r3]
 800b4fc:	ee10 2a10 	vmov	r2, s0
 800b500:	ee10 0a10 	vmov	r0, s0
 800b504:	463b      	mov	r3, r7
 800b506:	4639      	mov	r1, r7
 800b508:	f7f5 fb28 	bl	8000b5c <__aeabi_dcmpun>
 800b50c:	b128      	cbz	r0, 800b51a <_scanf_float+0x406>
 800b50e:	4808      	ldr	r0, [pc, #32]	; (800b530 <_scanf_float+0x41c>)
 800b510:	f000 f810 	bl	800b534 <nanf>
 800b514:	ed88 0a00 	vstr	s0, [r8]
 800b518:	e7cb      	b.n	800b4b2 <_scanf_float+0x39e>
 800b51a:	4630      	mov	r0, r6
 800b51c:	4639      	mov	r1, r7
 800b51e:	f7f5 fb7b 	bl	8000c18 <__aeabi_d2f>
 800b522:	f8c8 0000 	str.w	r0, [r8]
 800b526:	e7c4      	b.n	800b4b2 <_scanf_float+0x39e>
 800b528:	2500      	movs	r5, #0
 800b52a:	e634      	b.n	800b196 <_scanf_float+0x82>
 800b52c:	0800f550 	.word	0x0800f550
 800b530:	0800f958 	.word	0x0800f958

0800b534 <nanf>:
 800b534:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b53c <nanf+0x8>
 800b538:	4770      	bx	lr
 800b53a:	bf00      	nop
 800b53c:	7fc00000 	.word	0x7fc00000

0800b540 <siprintf>:
 800b540:	b40e      	push	{r1, r2, r3}
 800b542:	b500      	push	{lr}
 800b544:	b09c      	sub	sp, #112	; 0x70
 800b546:	ab1d      	add	r3, sp, #116	; 0x74
 800b548:	9002      	str	r0, [sp, #8]
 800b54a:	9006      	str	r0, [sp, #24]
 800b54c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b550:	4809      	ldr	r0, [pc, #36]	; (800b578 <siprintf+0x38>)
 800b552:	9107      	str	r1, [sp, #28]
 800b554:	9104      	str	r1, [sp, #16]
 800b556:	4909      	ldr	r1, [pc, #36]	; (800b57c <siprintf+0x3c>)
 800b558:	f853 2b04 	ldr.w	r2, [r3], #4
 800b55c:	9105      	str	r1, [sp, #20]
 800b55e:	6800      	ldr	r0, [r0, #0]
 800b560:	9301      	str	r3, [sp, #4]
 800b562:	a902      	add	r1, sp, #8
 800b564:	f002 fee2 	bl	800e32c <_svfiprintf_r>
 800b568:	9b02      	ldr	r3, [sp, #8]
 800b56a:	2200      	movs	r2, #0
 800b56c:	701a      	strb	r2, [r3, #0]
 800b56e:	b01c      	add	sp, #112	; 0x70
 800b570:	f85d eb04 	ldr.w	lr, [sp], #4
 800b574:	b003      	add	sp, #12
 800b576:	4770      	bx	lr
 800b578:	20000080 	.word	0x20000080
 800b57c:	ffff0208 	.word	0xffff0208

0800b580 <sulp>:
 800b580:	b570      	push	{r4, r5, r6, lr}
 800b582:	4604      	mov	r4, r0
 800b584:	460d      	mov	r5, r1
 800b586:	ec45 4b10 	vmov	d0, r4, r5
 800b58a:	4616      	mov	r6, r2
 800b58c:	f002 fc2c 	bl	800dde8 <__ulp>
 800b590:	ec51 0b10 	vmov	r0, r1, d0
 800b594:	b17e      	cbz	r6, 800b5b6 <sulp+0x36>
 800b596:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b59a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	dd09      	ble.n	800b5b6 <sulp+0x36>
 800b5a2:	051b      	lsls	r3, r3, #20
 800b5a4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b5a8:	2400      	movs	r4, #0
 800b5aa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b5ae:	4622      	mov	r2, r4
 800b5b0:	462b      	mov	r3, r5
 800b5b2:	f7f5 f839 	bl	8000628 <__aeabi_dmul>
 800b5b6:	bd70      	pop	{r4, r5, r6, pc}

0800b5b8 <_strtod_l>:
 800b5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5bc:	ed2d 8b02 	vpush	{d8}
 800b5c0:	b09d      	sub	sp, #116	; 0x74
 800b5c2:	461f      	mov	r7, r3
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	9318      	str	r3, [sp, #96]	; 0x60
 800b5c8:	4ba2      	ldr	r3, [pc, #648]	; (800b854 <_strtod_l+0x29c>)
 800b5ca:	9213      	str	r2, [sp, #76]	; 0x4c
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	9305      	str	r3, [sp, #20]
 800b5d0:	4604      	mov	r4, r0
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	4688      	mov	r8, r1
 800b5d6:	f7f4 fe13 	bl	8000200 <strlen>
 800b5da:	f04f 0a00 	mov.w	sl, #0
 800b5de:	4605      	mov	r5, r0
 800b5e0:	f04f 0b00 	mov.w	fp, #0
 800b5e4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b5e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b5ea:	781a      	ldrb	r2, [r3, #0]
 800b5ec:	2a2b      	cmp	r2, #43	; 0x2b
 800b5ee:	d04e      	beq.n	800b68e <_strtod_l+0xd6>
 800b5f0:	d83b      	bhi.n	800b66a <_strtod_l+0xb2>
 800b5f2:	2a0d      	cmp	r2, #13
 800b5f4:	d834      	bhi.n	800b660 <_strtod_l+0xa8>
 800b5f6:	2a08      	cmp	r2, #8
 800b5f8:	d834      	bhi.n	800b664 <_strtod_l+0xac>
 800b5fa:	2a00      	cmp	r2, #0
 800b5fc:	d03e      	beq.n	800b67c <_strtod_l+0xc4>
 800b5fe:	2300      	movs	r3, #0
 800b600:	930a      	str	r3, [sp, #40]	; 0x28
 800b602:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b604:	7833      	ldrb	r3, [r6, #0]
 800b606:	2b30      	cmp	r3, #48	; 0x30
 800b608:	f040 80b0 	bne.w	800b76c <_strtod_l+0x1b4>
 800b60c:	7873      	ldrb	r3, [r6, #1]
 800b60e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b612:	2b58      	cmp	r3, #88	; 0x58
 800b614:	d168      	bne.n	800b6e8 <_strtod_l+0x130>
 800b616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b618:	9301      	str	r3, [sp, #4]
 800b61a:	ab18      	add	r3, sp, #96	; 0x60
 800b61c:	9702      	str	r7, [sp, #8]
 800b61e:	9300      	str	r3, [sp, #0]
 800b620:	4a8d      	ldr	r2, [pc, #564]	; (800b858 <_strtod_l+0x2a0>)
 800b622:	ab19      	add	r3, sp, #100	; 0x64
 800b624:	a917      	add	r1, sp, #92	; 0x5c
 800b626:	4620      	mov	r0, r4
 800b628:	f001 fd38 	bl	800d09c <__gethex>
 800b62c:	f010 0707 	ands.w	r7, r0, #7
 800b630:	4605      	mov	r5, r0
 800b632:	d005      	beq.n	800b640 <_strtod_l+0x88>
 800b634:	2f06      	cmp	r7, #6
 800b636:	d12c      	bne.n	800b692 <_strtod_l+0xda>
 800b638:	3601      	adds	r6, #1
 800b63a:	2300      	movs	r3, #0
 800b63c:	9617      	str	r6, [sp, #92]	; 0x5c
 800b63e:	930a      	str	r3, [sp, #40]	; 0x28
 800b640:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b642:	2b00      	cmp	r3, #0
 800b644:	f040 8590 	bne.w	800c168 <_strtod_l+0xbb0>
 800b648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b64a:	b1eb      	cbz	r3, 800b688 <_strtod_l+0xd0>
 800b64c:	4652      	mov	r2, sl
 800b64e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b652:	ec43 2b10 	vmov	d0, r2, r3
 800b656:	b01d      	add	sp, #116	; 0x74
 800b658:	ecbd 8b02 	vpop	{d8}
 800b65c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b660:	2a20      	cmp	r2, #32
 800b662:	d1cc      	bne.n	800b5fe <_strtod_l+0x46>
 800b664:	3301      	adds	r3, #1
 800b666:	9317      	str	r3, [sp, #92]	; 0x5c
 800b668:	e7be      	b.n	800b5e8 <_strtod_l+0x30>
 800b66a:	2a2d      	cmp	r2, #45	; 0x2d
 800b66c:	d1c7      	bne.n	800b5fe <_strtod_l+0x46>
 800b66e:	2201      	movs	r2, #1
 800b670:	920a      	str	r2, [sp, #40]	; 0x28
 800b672:	1c5a      	adds	r2, r3, #1
 800b674:	9217      	str	r2, [sp, #92]	; 0x5c
 800b676:	785b      	ldrb	r3, [r3, #1]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d1c2      	bne.n	800b602 <_strtod_l+0x4a>
 800b67c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b67e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b682:	2b00      	cmp	r3, #0
 800b684:	f040 856e 	bne.w	800c164 <_strtod_l+0xbac>
 800b688:	4652      	mov	r2, sl
 800b68a:	465b      	mov	r3, fp
 800b68c:	e7e1      	b.n	800b652 <_strtod_l+0x9a>
 800b68e:	2200      	movs	r2, #0
 800b690:	e7ee      	b.n	800b670 <_strtod_l+0xb8>
 800b692:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b694:	b13a      	cbz	r2, 800b6a6 <_strtod_l+0xee>
 800b696:	2135      	movs	r1, #53	; 0x35
 800b698:	a81a      	add	r0, sp, #104	; 0x68
 800b69a:	f002 fcb0 	bl	800dffe <__copybits>
 800b69e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b6a0:	4620      	mov	r0, r4
 800b6a2:	f002 f86f 	bl	800d784 <_Bfree>
 800b6a6:	3f01      	subs	r7, #1
 800b6a8:	2f04      	cmp	r7, #4
 800b6aa:	d806      	bhi.n	800b6ba <_strtod_l+0x102>
 800b6ac:	e8df f007 	tbb	[pc, r7]
 800b6b0:	1714030a 	.word	0x1714030a
 800b6b4:	0a          	.byte	0x0a
 800b6b5:	00          	.byte	0x00
 800b6b6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800b6ba:	0728      	lsls	r0, r5, #28
 800b6bc:	d5c0      	bpl.n	800b640 <_strtod_l+0x88>
 800b6be:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b6c2:	e7bd      	b.n	800b640 <_strtod_l+0x88>
 800b6c4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800b6c8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b6ca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b6ce:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b6d2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b6d6:	e7f0      	b.n	800b6ba <_strtod_l+0x102>
 800b6d8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800b85c <_strtod_l+0x2a4>
 800b6dc:	e7ed      	b.n	800b6ba <_strtod_l+0x102>
 800b6de:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b6e2:	f04f 3aff 	mov.w	sl, #4294967295
 800b6e6:	e7e8      	b.n	800b6ba <_strtod_l+0x102>
 800b6e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b6ea:	1c5a      	adds	r2, r3, #1
 800b6ec:	9217      	str	r2, [sp, #92]	; 0x5c
 800b6ee:	785b      	ldrb	r3, [r3, #1]
 800b6f0:	2b30      	cmp	r3, #48	; 0x30
 800b6f2:	d0f9      	beq.n	800b6e8 <_strtod_l+0x130>
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d0a3      	beq.n	800b640 <_strtod_l+0x88>
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	f04f 0900 	mov.w	r9, #0
 800b6fe:	9304      	str	r3, [sp, #16]
 800b700:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b702:	9308      	str	r3, [sp, #32]
 800b704:	f8cd 901c 	str.w	r9, [sp, #28]
 800b708:	464f      	mov	r7, r9
 800b70a:	220a      	movs	r2, #10
 800b70c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b70e:	7806      	ldrb	r6, [r0, #0]
 800b710:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b714:	b2d9      	uxtb	r1, r3
 800b716:	2909      	cmp	r1, #9
 800b718:	d92a      	bls.n	800b770 <_strtod_l+0x1b8>
 800b71a:	9905      	ldr	r1, [sp, #20]
 800b71c:	462a      	mov	r2, r5
 800b71e:	f002 ff1f 	bl	800e560 <strncmp>
 800b722:	b398      	cbz	r0, 800b78c <_strtod_l+0x1d4>
 800b724:	2000      	movs	r0, #0
 800b726:	4632      	mov	r2, r6
 800b728:	463d      	mov	r5, r7
 800b72a:	9005      	str	r0, [sp, #20]
 800b72c:	4603      	mov	r3, r0
 800b72e:	2a65      	cmp	r2, #101	; 0x65
 800b730:	d001      	beq.n	800b736 <_strtod_l+0x17e>
 800b732:	2a45      	cmp	r2, #69	; 0x45
 800b734:	d118      	bne.n	800b768 <_strtod_l+0x1b0>
 800b736:	b91d      	cbnz	r5, 800b740 <_strtod_l+0x188>
 800b738:	9a04      	ldr	r2, [sp, #16]
 800b73a:	4302      	orrs	r2, r0
 800b73c:	d09e      	beq.n	800b67c <_strtod_l+0xc4>
 800b73e:	2500      	movs	r5, #0
 800b740:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800b744:	f108 0201 	add.w	r2, r8, #1
 800b748:	9217      	str	r2, [sp, #92]	; 0x5c
 800b74a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800b74e:	2a2b      	cmp	r2, #43	; 0x2b
 800b750:	d075      	beq.n	800b83e <_strtod_l+0x286>
 800b752:	2a2d      	cmp	r2, #45	; 0x2d
 800b754:	d07b      	beq.n	800b84e <_strtod_l+0x296>
 800b756:	f04f 0c00 	mov.w	ip, #0
 800b75a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b75e:	2909      	cmp	r1, #9
 800b760:	f240 8082 	bls.w	800b868 <_strtod_l+0x2b0>
 800b764:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b768:	2600      	movs	r6, #0
 800b76a:	e09d      	b.n	800b8a8 <_strtod_l+0x2f0>
 800b76c:	2300      	movs	r3, #0
 800b76e:	e7c4      	b.n	800b6fa <_strtod_l+0x142>
 800b770:	2f08      	cmp	r7, #8
 800b772:	bfd8      	it	le
 800b774:	9907      	ldrle	r1, [sp, #28]
 800b776:	f100 0001 	add.w	r0, r0, #1
 800b77a:	bfda      	itte	le
 800b77c:	fb02 3301 	mlale	r3, r2, r1, r3
 800b780:	9307      	strle	r3, [sp, #28]
 800b782:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b786:	3701      	adds	r7, #1
 800b788:	9017      	str	r0, [sp, #92]	; 0x5c
 800b78a:	e7bf      	b.n	800b70c <_strtod_l+0x154>
 800b78c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b78e:	195a      	adds	r2, r3, r5
 800b790:	9217      	str	r2, [sp, #92]	; 0x5c
 800b792:	5d5a      	ldrb	r2, [r3, r5]
 800b794:	2f00      	cmp	r7, #0
 800b796:	d037      	beq.n	800b808 <_strtod_l+0x250>
 800b798:	9005      	str	r0, [sp, #20]
 800b79a:	463d      	mov	r5, r7
 800b79c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b7a0:	2b09      	cmp	r3, #9
 800b7a2:	d912      	bls.n	800b7ca <_strtod_l+0x212>
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	e7c2      	b.n	800b72e <_strtod_l+0x176>
 800b7a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b7aa:	1c5a      	adds	r2, r3, #1
 800b7ac:	9217      	str	r2, [sp, #92]	; 0x5c
 800b7ae:	785a      	ldrb	r2, [r3, #1]
 800b7b0:	3001      	adds	r0, #1
 800b7b2:	2a30      	cmp	r2, #48	; 0x30
 800b7b4:	d0f8      	beq.n	800b7a8 <_strtod_l+0x1f0>
 800b7b6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b7ba:	2b08      	cmp	r3, #8
 800b7bc:	f200 84d9 	bhi.w	800c172 <_strtod_l+0xbba>
 800b7c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b7c2:	9005      	str	r0, [sp, #20]
 800b7c4:	2000      	movs	r0, #0
 800b7c6:	9308      	str	r3, [sp, #32]
 800b7c8:	4605      	mov	r5, r0
 800b7ca:	3a30      	subs	r2, #48	; 0x30
 800b7cc:	f100 0301 	add.w	r3, r0, #1
 800b7d0:	d014      	beq.n	800b7fc <_strtod_l+0x244>
 800b7d2:	9905      	ldr	r1, [sp, #20]
 800b7d4:	4419      	add	r1, r3
 800b7d6:	9105      	str	r1, [sp, #20]
 800b7d8:	462b      	mov	r3, r5
 800b7da:	eb00 0e05 	add.w	lr, r0, r5
 800b7de:	210a      	movs	r1, #10
 800b7e0:	4573      	cmp	r3, lr
 800b7e2:	d113      	bne.n	800b80c <_strtod_l+0x254>
 800b7e4:	182b      	adds	r3, r5, r0
 800b7e6:	2b08      	cmp	r3, #8
 800b7e8:	f105 0501 	add.w	r5, r5, #1
 800b7ec:	4405      	add	r5, r0
 800b7ee:	dc1c      	bgt.n	800b82a <_strtod_l+0x272>
 800b7f0:	9907      	ldr	r1, [sp, #28]
 800b7f2:	230a      	movs	r3, #10
 800b7f4:	fb03 2301 	mla	r3, r3, r1, r2
 800b7f8:	9307      	str	r3, [sp, #28]
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b7fe:	1c51      	adds	r1, r2, #1
 800b800:	9117      	str	r1, [sp, #92]	; 0x5c
 800b802:	7852      	ldrb	r2, [r2, #1]
 800b804:	4618      	mov	r0, r3
 800b806:	e7c9      	b.n	800b79c <_strtod_l+0x1e4>
 800b808:	4638      	mov	r0, r7
 800b80a:	e7d2      	b.n	800b7b2 <_strtod_l+0x1fa>
 800b80c:	2b08      	cmp	r3, #8
 800b80e:	dc04      	bgt.n	800b81a <_strtod_l+0x262>
 800b810:	9e07      	ldr	r6, [sp, #28]
 800b812:	434e      	muls	r6, r1
 800b814:	9607      	str	r6, [sp, #28]
 800b816:	3301      	adds	r3, #1
 800b818:	e7e2      	b.n	800b7e0 <_strtod_l+0x228>
 800b81a:	f103 0c01 	add.w	ip, r3, #1
 800b81e:	f1bc 0f10 	cmp.w	ip, #16
 800b822:	bfd8      	it	le
 800b824:	fb01 f909 	mulle.w	r9, r1, r9
 800b828:	e7f5      	b.n	800b816 <_strtod_l+0x25e>
 800b82a:	2d10      	cmp	r5, #16
 800b82c:	bfdc      	itt	le
 800b82e:	230a      	movle	r3, #10
 800b830:	fb03 2909 	mlale	r9, r3, r9, r2
 800b834:	e7e1      	b.n	800b7fa <_strtod_l+0x242>
 800b836:	2300      	movs	r3, #0
 800b838:	9305      	str	r3, [sp, #20]
 800b83a:	2301      	movs	r3, #1
 800b83c:	e77c      	b.n	800b738 <_strtod_l+0x180>
 800b83e:	f04f 0c00 	mov.w	ip, #0
 800b842:	f108 0202 	add.w	r2, r8, #2
 800b846:	9217      	str	r2, [sp, #92]	; 0x5c
 800b848:	f898 2002 	ldrb.w	r2, [r8, #2]
 800b84c:	e785      	b.n	800b75a <_strtod_l+0x1a2>
 800b84e:	f04f 0c01 	mov.w	ip, #1
 800b852:	e7f6      	b.n	800b842 <_strtod_l+0x28a>
 800b854:	0800f7a0 	.word	0x0800f7a0
 800b858:	0800f558 	.word	0x0800f558
 800b85c:	7ff00000 	.word	0x7ff00000
 800b860:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b862:	1c51      	adds	r1, r2, #1
 800b864:	9117      	str	r1, [sp, #92]	; 0x5c
 800b866:	7852      	ldrb	r2, [r2, #1]
 800b868:	2a30      	cmp	r2, #48	; 0x30
 800b86a:	d0f9      	beq.n	800b860 <_strtod_l+0x2a8>
 800b86c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b870:	2908      	cmp	r1, #8
 800b872:	f63f af79 	bhi.w	800b768 <_strtod_l+0x1b0>
 800b876:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b87a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b87c:	9206      	str	r2, [sp, #24]
 800b87e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b880:	1c51      	adds	r1, r2, #1
 800b882:	9117      	str	r1, [sp, #92]	; 0x5c
 800b884:	7852      	ldrb	r2, [r2, #1]
 800b886:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800b88a:	2e09      	cmp	r6, #9
 800b88c:	d937      	bls.n	800b8fe <_strtod_l+0x346>
 800b88e:	9e06      	ldr	r6, [sp, #24]
 800b890:	1b89      	subs	r1, r1, r6
 800b892:	2908      	cmp	r1, #8
 800b894:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b898:	dc02      	bgt.n	800b8a0 <_strtod_l+0x2e8>
 800b89a:	4576      	cmp	r6, lr
 800b89c:	bfa8      	it	ge
 800b89e:	4676      	movge	r6, lr
 800b8a0:	f1bc 0f00 	cmp.w	ip, #0
 800b8a4:	d000      	beq.n	800b8a8 <_strtod_l+0x2f0>
 800b8a6:	4276      	negs	r6, r6
 800b8a8:	2d00      	cmp	r5, #0
 800b8aa:	d14d      	bne.n	800b948 <_strtod_l+0x390>
 800b8ac:	9904      	ldr	r1, [sp, #16]
 800b8ae:	4301      	orrs	r1, r0
 800b8b0:	f47f aec6 	bne.w	800b640 <_strtod_l+0x88>
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	f47f aee1 	bne.w	800b67c <_strtod_l+0xc4>
 800b8ba:	2a69      	cmp	r2, #105	; 0x69
 800b8bc:	d027      	beq.n	800b90e <_strtod_l+0x356>
 800b8be:	dc24      	bgt.n	800b90a <_strtod_l+0x352>
 800b8c0:	2a49      	cmp	r2, #73	; 0x49
 800b8c2:	d024      	beq.n	800b90e <_strtod_l+0x356>
 800b8c4:	2a4e      	cmp	r2, #78	; 0x4e
 800b8c6:	f47f aed9 	bne.w	800b67c <_strtod_l+0xc4>
 800b8ca:	499f      	ldr	r1, [pc, #636]	; (800bb48 <_strtod_l+0x590>)
 800b8cc:	a817      	add	r0, sp, #92	; 0x5c
 800b8ce:	f001 fe3d 	bl	800d54c <__match>
 800b8d2:	2800      	cmp	r0, #0
 800b8d4:	f43f aed2 	beq.w	800b67c <_strtod_l+0xc4>
 800b8d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b8da:	781b      	ldrb	r3, [r3, #0]
 800b8dc:	2b28      	cmp	r3, #40	; 0x28
 800b8de:	d12d      	bne.n	800b93c <_strtod_l+0x384>
 800b8e0:	499a      	ldr	r1, [pc, #616]	; (800bb4c <_strtod_l+0x594>)
 800b8e2:	aa1a      	add	r2, sp, #104	; 0x68
 800b8e4:	a817      	add	r0, sp, #92	; 0x5c
 800b8e6:	f001 fe45 	bl	800d574 <__hexnan>
 800b8ea:	2805      	cmp	r0, #5
 800b8ec:	d126      	bne.n	800b93c <_strtod_l+0x384>
 800b8ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b8f0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800b8f4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b8f8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b8fc:	e6a0      	b.n	800b640 <_strtod_l+0x88>
 800b8fe:	210a      	movs	r1, #10
 800b900:	fb01 2e0e 	mla	lr, r1, lr, r2
 800b904:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b908:	e7b9      	b.n	800b87e <_strtod_l+0x2c6>
 800b90a:	2a6e      	cmp	r2, #110	; 0x6e
 800b90c:	e7db      	b.n	800b8c6 <_strtod_l+0x30e>
 800b90e:	4990      	ldr	r1, [pc, #576]	; (800bb50 <_strtod_l+0x598>)
 800b910:	a817      	add	r0, sp, #92	; 0x5c
 800b912:	f001 fe1b 	bl	800d54c <__match>
 800b916:	2800      	cmp	r0, #0
 800b918:	f43f aeb0 	beq.w	800b67c <_strtod_l+0xc4>
 800b91c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b91e:	498d      	ldr	r1, [pc, #564]	; (800bb54 <_strtod_l+0x59c>)
 800b920:	3b01      	subs	r3, #1
 800b922:	a817      	add	r0, sp, #92	; 0x5c
 800b924:	9317      	str	r3, [sp, #92]	; 0x5c
 800b926:	f001 fe11 	bl	800d54c <__match>
 800b92a:	b910      	cbnz	r0, 800b932 <_strtod_l+0x37a>
 800b92c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b92e:	3301      	adds	r3, #1
 800b930:	9317      	str	r3, [sp, #92]	; 0x5c
 800b932:	f8df b230 	ldr.w	fp, [pc, #560]	; 800bb64 <_strtod_l+0x5ac>
 800b936:	f04f 0a00 	mov.w	sl, #0
 800b93a:	e681      	b.n	800b640 <_strtod_l+0x88>
 800b93c:	4886      	ldr	r0, [pc, #536]	; (800bb58 <_strtod_l+0x5a0>)
 800b93e:	f002 fdf7 	bl	800e530 <nan>
 800b942:	ec5b ab10 	vmov	sl, fp, d0
 800b946:	e67b      	b.n	800b640 <_strtod_l+0x88>
 800b948:	9b05      	ldr	r3, [sp, #20]
 800b94a:	9807      	ldr	r0, [sp, #28]
 800b94c:	1af3      	subs	r3, r6, r3
 800b94e:	2f00      	cmp	r7, #0
 800b950:	bf08      	it	eq
 800b952:	462f      	moveq	r7, r5
 800b954:	2d10      	cmp	r5, #16
 800b956:	9306      	str	r3, [sp, #24]
 800b958:	46a8      	mov	r8, r5
 800b95a:	bfa8      	it	ge
 800b95c:	f04f 0810 	movge.w	r8, #16
 800b960:	f7f4 fde8 	bl	8000534 <__aeabi_ui2d>
 800b964:	2d09      	cmp	r5, #9
 800b966:	4682      	mov	sl, r0
 800b968:	468b      	mov	fp, r1
 800b96a:	dd13      	ble.n	800b994 <_strtod_l+0x3dc>
 800b96c:	4b7b      	ldr	r3, [pc, #492]	; (800bb5c <_strtod_l+0x5a4>)
 800b96e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b972:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b976:	f7f4 fe57 	bl	8000628 <__aeabi_dmul>
 800b97a:	4682      	mov	sl, r0
 800b97c:	4648      	mov	r0, r9
 800b97e:	468b      	mov	fp, r1
 800b980:	f7f4 fdd8 	bl	8000534 <__aeabi_ui2d>
 800b984:	4602      	mov	r2, r0
 800b986:	460b      	mov	r3, r1
 800b988:	4650      	mov	r0, sl
 800b98a:	4659      	mov	r1, fp
 800b98c:	f7f4 fc96 	bl	80002bc <__adddf3>
 800b990:	4682      	mov	sl, r0
 800b992:	468b      	mov	fp, r1
 800b994:	2d0f      	cmp	r5, #15
 800b996:	dc38      	bgt.n	800ba0a <_strtod_l+0x452>
 800b998:	9b06      	ldr	r3, [sp, #24]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	f43f ae50 	beq.w	800b640 <_strtod_l+0x88>
 800b9a0:	dd24      	ble.n	800b9ec <_strtod_l+0x434>
 800b9a2:	2b16      	cmp	r3, #22
 800b9a4:	dc0b      	bgt.n	800b9be <_strtod_l+0x406>
 800b9a6:	496d      	ldr	r1, [pc, #436]	; (800bb5c <_strtod_l+0x5a4>)
 800b9a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b9ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9b0:	4652      	mov	r2, sl
 800b9b2:	465b      	mov	r3, fp
 800b9b4:	f7f4 fe38 	bl	8000628 <__aeabi_dmul>
 800b9b8:	4682      	mov	sl, r0
 800b9ba:	468b      	mov	fp, r1
 800b9bc:	e640      	b.n	800b640 <_strtod_l+0x88>
 800b9be:	9a06      	ldr	r2, [sp, #24]
 800b9c0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b9c4:	4293      	cmp	r3, r2
 800b9c6:	db20      	blt.n	800ba0a <_strtod_l+0x452>
 800b9c8:	4c64      	ldr	r4, [pc, #400]	; (800bb5c <_strtod_l+0x5a4>)
 800b9ca:	f1c5 050f 	rsb	r5, r5, #15
 800b9ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b9d2:	4652      	mov	r2, sl
 800b9d4:	465b      	mov	r3, fp
 800b9d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9da:	f7f4 fe25 	bl	8000628 <__aeabi_dmul>
 800b9de:	9b06      	ldr	r3, [sp, #24]
 800b9e0:	1b5d      	subs	r5, r3, r5
 800b9e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b9e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b9ea:	e7e3      	b.n	800b9b4 <_strtod_l+0x3fc>
 800b9ec:	9b06      	ldr	r3, [sp, #24]
 800b9ee:	3316      	adds	r3, #22
 800b9f0:	db0b      	blt.n	800ba0a <_strtod_l+0x452>
 800b9f2:	9b05      	ldr	r3, [sp, #20]
 800b9f4:	1b9e      	subs	r6, r3, r6
 800b9f6:	4b59      	ldr	r3, [pc, #356]	; (800bb5c <_strtod_l+0x5a4>)
 800b9f8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800b9fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ba00:	4650      	mov	r0, sl
 800ba02:	4659      	mov	r1, fp
 800ba04:	f7f4 ff3a 	bl	800087c <__aeabi_ddiv>
 800ba08:	e7d6      	b.n	800b9b8 <_strtod_l+0x400>
 800ba0a:	9b06      	ldr	r3, [sp, #24]
 800ba0c:	eba5 0808 	sub.w	r8, r5, r8
 800ba10:	4498      	add	r8, r3
 800ba12:	f1b8 0f00 	cmp.w	r8, #0
 800ba16:	dd74      	ble.n	800bb02 <_strtod_l+0x54a>
 800ba18:	f018 030f 	ands.w	r3, r8, #15
 800ba1c:	d00a      	beq.n	800ba34 <_strtod_l+0x47c>
 800ba1e:	494f      	ldr	r1, [pc, #316]	; (800bb5c <_strtod_l+0x5a4>)
 800ba20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ba24:	4652      	mov	r2, sl
 800ba26:	465b      	mov	r3, fp
 800ba28:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba2c:	f7f4 fdfc 	bl	8000628 <__aeabi_dmul>
 800ba30:	4682      	mov	sl, r0
 800ba32:	468b      	mov	fp, r1
 800ba34:	f038 080f 	bics.w	r8, r8, #15
 800ba38:	d04f      	beq.n	800bada <_strtod_l+0x522>
 800ba3a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ba3e:	dd22      	ble.n	800ba86 <_strtod_l+0x4ce>
 800ba40:	2500      	movs	r5, #0
 800ba42:	462e      	mov	r6, r5
 800ba44:	9507      	str	r5, [sp, #28]
 800ba46:	9505      	str	r5, [sp, #20]
 800ba48:	2322      	movs	r3, #34	; 0x22
 800ba4a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800bb64 <_strtod_l+0x5ac>
 800ba4e:	6023      	str	r3, [r4, #0]
 800ba50:	f04f 0a00 	mov.w	sl, #0
 800ba54:	9b07      	ldr	r3, [sp, #28]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	f43f adf2 	beq.w	800b640 <_strtod_l+0x88>
 800ba5c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ba5e:	4620      	mov	r0, r4
 800ba60:	f001 fe90 	bl	800d784 <_Bfree>
 800ba64:	9905      	ldr	r1, [sp, #20]
 800ba66:	4620      	mov	r0, r4
 800ba68:	f001 fe8c 	bl	800d784 <_Bfree>
 800ba6c:	4631      	mov	r1, r6
 800ba6e:	4620      	mov	r0, r4
 800ba70:	f001 fe88 	bl	800d784 <_Bfree>
 800ba74:	9907      	ldr	r1, [sp, #28]
 800ba76:	4620      	mov	r0, r4
 800ba78:	f001 fe84 	bl	800d784 <_Bfree>
 800ba7c:	4629      	mov	r1, r5
 800ba7e:	4620      	mov	r0, r4
 800ba80:	f001 fe80 	bl	800d784 <_Bfree>
 800ba84:	e5dc      	b.n	800b640 <_strtod_l+0x88>
 800ba86:	4b36      	ldr	r3, [pc, #216]	; (800bb60 <_strtod_l+0x5a8>)
 800ba88:	9304      	str	r3, [sp, #16]
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800ba90:	4650      	mov	r0, sl
 800ba92:	4659      	mov	r1, fp
 800ba94:	4699      	mov	r9, r3
 800ba96:	f1b8 0f01 	cmp.w	r8, #1
 800ba9a:	dc21      	bgt.n	800bae0 <_strtod_l+0x528>
 800ba9c:	b10b      	cbz	r3, 800baa2 <_strtod_l+0x4ea>
 800ba9e:	4682      	mov	sl, r0
 800baa0:	468b      	mov	fp, r1
 800baa2:	4b2f      	ldr	r3, [pc, #188]	; (800bb60 <_strtod_l+0x5a8>)
 800baa4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800baa8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800baac:	4652      	mov	r2, sl
 800baae:	465b      	mov	r3, fp
 800bab0:	e9d9 0100 	ldrd	r0, r1, [r9]
 800bab4:	f7f4 fdb8 	bl	8000628 <__aeabi_dmul>
 800bab8:	4b2a      	ldr	r3, [pc, #168]	; (800bb64 <_strtod_l+0x5ac>)
 800baba:	460a      	mov	r2, r1
 800babc:	400b      	ands	r3, r1
 800babe:	492a      	ldr	r1, [pc, #168]	; (800bb68 <_strtod_l+0x5b0>)
 800bac0:	428b      	cmp	r3, r1
 800bac2:	4682      	mov	sl, r0
 800bac4:	d8bc      	bhi.n	800ba40 <_strtod_l+0x488>
 800bac6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800baca:	428b      	cmp	r3, r1
 800bacc:	bf86      	itte	hi
 800bace:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800bb6c <_strtod_l+0x5b4>
 800bad2:	f04f 3aff 	movhi.w	sl, #4294967295
 800bad6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800bada:	2300      	movs	r3, #0
 800badc:	9304      	str	r3, [sp, #16]
 800bade:	e084      	b.n	800bbea <_strtod_l+0x632>
 800bae0:	f018 0f01 	tst.w	r8, #1
 800bae4:	d005      	beq.n	800baf2 <_strtod_l+0x53a>
 800bae6:	9b04      	ldr	r3, [sp, #16]
 800bae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baec:	f7f4 fd9c 	bl	8000628 <__aeabi_dmul>
 800baf0:	2301      	movs	r3, #1
 800baf2:	9a04      	ldr	r2, [sp, #16]
 800baf4:	3208      	adds	r2, #8
 800baf6:	f109 0901 	add.w	r9, r9, #1
 800bafa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bafe:	9204      	str	r2, [sp, #16]
 800bb00:	e7c9      	b.n	800ba96 <_strtod_l+0x4de>
 800bb02:	d0ea      	beq.n	800bada <_strtod_l+0x522>
 800bb04:	f1c8 0800 	rsb	r8, r8, #0
 800bb08:	f018 020f 	ands.w	r2, r8, #15
 800bb0c:	d00a      	beq.n	800bb24 <_strtod_l+0x56c>
 800bb0e:	4b13      	ldr	r3, [pc, #76]	; (800bb5c <_strtod_l+0x5a4>)
 800bb10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb14:	4650      	mov	r0, sl
 800bb16:	4659      	mov	r1, fp
 800bb18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb1c:	f7f4 feae 	bl	800087c <__aeabi_ddiv>
 800bb20:	4682      	mov	sl, r0
 800bb22:	468b      	mov	fp, r1
 800bb24:	ea5f 1828 	movs.w	r8, r8, asr #4
 800bb28:	d0d7      	beq.n	800bada <_strtod_l+0x522>
 800bb2a:	f1b8 0f1f 	cmp.w	r8, #31
 800bb2e:	dd1f      	ble.n	800bb70 <_strtod_l+0x5b8>
 800bb30:	2500      	movs	r5, #0
 800bb32:	462e      	mov	r6, r5
 800bb34:	9507      	str	r5, [sp, #28]
 800bb36:	9505      	str	r5, [sp, #20]
 800bb38:	2322      	movs	r3, #34	; 0x22
 800bb3a:	f04f 0a00 	mov.w	sl, #0
 800bb3e:	f04f 0b00 	mov.w	fp, #0
 800bb42:	6023      	str	r3, [r4, #0]
 800bb44:	e786      	b.n	800ba54 <_strtod_l+0x49c>
 800bb46:	bf00      	nop
 800bb48:	0800f529 	.word	0x0800f529
 800bb4c:	0800f56c 	.word	0x0800f56c
 800bb50:	0800f521 	.word	0x0800f521
 800bb54:	0800f6ac 	.word	0x0800f6ac
 800bb58:	0800f958 	.word	0x0800f958
 800bb5c:	0800f838 	.word	0x0800f838
 800bb60:	0800f810 	.word	0x0800f810
 800bb64:	7ff00000 	.word	0x7ff00000
 800bb68:	7ca00000 	.word	0x7ca00000
 800bb6c:	7fefffff 	.word	0x7fefffff
 800bb70:	f018 0310 	ands.w	r3, r8, #16
 800bb74:	bf18      	it	ne
 800bb76:	236a      	movne	r3, #106	; 0x6a
 800bb78:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800bf28 <_strtod_l+0x970>
 800bb7c:	9304      	str	r3, [sp, #16]
 800bb7e:	4650      	mov	r0, sl
 800bb80:	4659      	mov	r1, fp
 800bb82:	2300      	movs	r3, #0
 800bb84:	f018 0f01 	tst.w	r8, #1
 800bb88:	d004      	beq.n	800bb94 <_strtod_l+0x5dc>
 800bb8a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800bb8e:	f7f4 fd4b 	bl	8000628 <__aeabi_dmul>
 800bb92:	2301      	movs	r3, #1
 800bb94:	ea5f 0868 	movs.w	r8, r8, asr #1
 800bb98:	f109 0908 	add.w	r9, r9, #8
 800bb9c:	d1f2      	bne.n	800bb84 <_strtod_l+0x5cc>
 800bb9e:	b10b      	cbz	r3, 800bba4 <_strtod_l+0x5ec>
 800bba0:	4682      	mov	sl, r0
 800bba2:	468b      	mov	fp, r1
 800bba4:	9b04      	ldr	r3, [sp, #16]
 800bba6:	b1c3      	cbz	r3, 800bbda <_strtod_l+0x622>
 800bba8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800bbac:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	4659      	mov	r1, fp
 800bbb4:	dd11      	ble.n	800bbda <_strtod_l+0x622>
 800bbb6:	2b1f      	cmp	r3, #31
 800bbb8:	f340 8124 	ble.w	800be04 <_strtod_l+0x84c>
 800bbbc:	2b34      	cmp	r3, #52	; 0x34
 800bbbe:	bfde      	ittt	le
 800bbc0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800bbc4:	f04f 33ff 	movle.w	r3, #4294967295
 800bbc8:	fa03 f202 	lslle.w	r2, r3, r2
 800bbcc:	f04f 0a00 	mov.w	sl, #0
 800bbd0:	bfcc      	ite	gt
 800bbd2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800bbd6:	ea02 0b01 	andle.w	fp, r2, r1
 800bbda:	2200      	movs	r2, #0
 800bbdc:	2300      	movs	r3, #0
 800bbde:	4650      	mov	r0, sl
 800bbe0:	4659      	mov	r1, fp
 800bbe2:	f7f4 ff89 	bl	8000af8 <__aeabi_dcmpeq>
 800bbe6:	2800      	cmp	r0, #0
 800bbe8:	d1a2      	bne.n	800bb30 <_strtod_l+0x578>
 800bbea:	9b07      	ldr	r3, [sp, #28]
 800bbec:	9300      	str	r3, [sp, #0]
 800bbee:	9908      	ldr	r1, [sp, #32]
 800bbf0:	462b      	mov	r3, r5
 800bbf2:	463a      	mov	r2, r7
 800bbf4:	4620      	mov	r0, r4
 800bbf6:	f001 fe2d 	bl	800d854 <__s2b>
 800bbfa:	9007      	str	r0, [sp, #28]
 800bbfc:	2800      	cmp	r0, #0
 800bbfe:	f43f af1f 	beq.w	800ba40 <_strtod_l+0x488>
 800bc02:	9b05      	ldr	r3, [sp, #20]
 800bc04:	1b9e      	subs	r6, r3, r6
 800bc06:	9b06      	ldr	r3, [sp, #24]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	bfb4      	ite	lt
 800bc0c:	4633      	movlt	r3, r6
 800bc0e:	2300      	movge	r3, #0
 800bc10:	930c      	str	r3, [sp, #48]	; 0x30
 800bc12:	9b06      	ldr	r3, [sp, #24]
 800bc14:	2500      	movs	r5, #0
 800bc16:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800bc1a:	9312      	str	r3, [sp, #72]	; 0x48
 800bc1c:	462e      	mov	r6, r5
 800bc1e:	9b07      	ldr	r3, [sp, #28]
 800bc20:	4620      	mov	r0, r4
 800bc22:	6859      	ldr	r1, [r3, #4]
 800bc24:	f001 fd6e 	bl	800d704 <_Balloc>
 800bc28:	9005      	str	r0, [sp, #20]
 800bc2a:	2800      	cmp	r0, #0
 800bc2c:	f43f af0c 	beq.w	800ba48 <_strtod_l+0x490>
 800bc30:	9b07      	ldr	r3, [sp, #28]
 800bc32:	691a      	ldr	r2, [r3, #16]
 800bc34:	3202      	adds	r2, #2
 800bc36:	f103 010c 	add.w	r1, r3, #12
 800bc3a:	0092      	lsls	r2, r2, #2
 800bc3c:	300c      	adds	r0, #12
 800bc3e:	f001 fd53 	bl	800d6e8 <memcpy>
 800bc42:	ec4b ab10 	vmov	d0, sl, fp
 800bc46:	aa1a      	add	r2, sp, #104	; 0x68
 800bc48:	a919      	add	r1, sp, #100	; 0x64
 800bc4a:	4620      	mov	r0, r4
 800bc4c:	f002 f948 	bl	800dee0 <__d2b>
 800bc50:	ec4b ab18 	vmov	d8, sl, fp
 800bc54:	9018      	str	r0, [sp, #96]	; 0x60
 800bc56:	2800      	cmp	r0, #0
 800bc58:	f43f aef6 	beq.w	800ba48 <_strtod_l+0x490>
 800bc5c:	2101      	movs	r1, #1
 800bc5e:	4620      	mov	r0, r4
 800bc60:	f001 fe92 	bl	800d988 <__i2b>
 800bc64:	4606      	mov	r6, r0
 800bc66:	2800      	cmp	r0, #0
 800bc68:	f43f aeee 	beq.w	800ba48 <_strtod_l+0x490>
 800bc6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bc6e:	9904      	ldr	r1, [sp, #16]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	bfab      	itete	ge
 800bc74:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800bc76:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800bc78:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800bc7a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800bc7e:	bfac      	ite	ge
 800bc80:	eb03 0902 	addge.w	r9, r3, r2
 800bc84:	1ad7      	sublt	r7, r2, r3
 800bc86:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800bc88:	eba3 0801 	sub.w	r8, r3, r1
 800bc8c:	4490      	add	r8, r2
 800bc8e:	4ba1      	ldr	r3, [pc, #644]	; (800bf14 <_strtod_l+0x95c>)
 800bc90:	f108 38ff 	add.w	r8, r8, #4294967295
 800bc94:	4598      	cmp	r8, r3
 800bc96:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800bc9a:	f280 80c7 	bge.w	800be2c <_strtod_l+0x874>
 800bc9e:	eba3 0308 	sub.w	r3, r3, r8
 800bca2:	2b1f      	cmp	r3, #31
 800bca4:	eba2 0203 	sub.w	r2, r2, r3
 800bca8:	f04f 0101 	mov.w	r1, #1
 800bcac:	f300 80b1 	bgt.w	800be12 <_strtod_l+0x85a>
 800bcb0:	fa01 f303 	lsl.w	r3, r1, r3
 800bcb4:	930d      	str	r3, [sp, #52]	; 0x34
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	9308      	str	r3, [sp, #32]
 800bcba:	eb09 0802 	add.w	r8, r9, r2
 800bcbe:	9b04      	ldr	r3, [sp, #16]
 800bcc0:	45c1      	cmp	r9, r8
 800bcc2:	4417      	add	r7, r2
 800bcc4:	441f      	add	r7, r3
 800bcc6:	464b      	mov	r3, r9
 800bcc8:	bfa8      	it	ge
 800bcca:	4643      	movge	r3, r8
 800bccc:	42bb      	cmp	r3, r7
 800bcce:	bfa8      	it	ge
 800bcd0:	463b      	movge	r3, r7
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	bfc2      	ittt	gt
 800bcd6:	eba8 0803 	subgt.w	r8, r8, r3
 800bcda:	1aff      	subgt	r7, r7, r3
 800bcdc:	eba9 0903 	subgt.w	r9, r9, r3
 800bce0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	dd17      	ble.n	800bd16 <_strtod_l+0x75e>
 800bce6:	4631      	mov	r1, r6
 800bce8:	461a      	mov	r2, r3
 800bcea:	4620      	mov	r0, r4
 800bcec:	f001 ff0c 	bl	800db08 <__pow5mult>
 800bcf0:	4606      	mov	r6, r0
 800bcf2:	2800      	cmp	r0, #0
 800bcf4:	f43f aea8 	beq.w	800ba48 <_strtod_l+0x490>
 800bcf8:	4601      	mov	r1, r0
 800bcfa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bcfc:	4620      	mov	r0, r4
 800bcfe:	f001 fe59 	bl	800d9b4 <__multiply>
 800bd02:	900b      	str	r0, [sp, #44]	; 0x2c
 800bd04:	2800      	cmp	r0, #0
 800bd06:	f43f ae9f 	beq.w	800ba48 <_strtod_l+0x490>
 800bd0a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bd0c:	4620      	mov	r0, r4
 800bd0e:	f001 fd39 	bl	800d784 <_Bfree>
 800bd12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd14:	9318      	str	r3, [sp, #96]	; 0x60
 800bd16:	f1b8 0f00 	cmp.w	r8, #0
 800bd1a:	f300 808c 	bgt.w	800be36 <_strtod_l+0x87e>
 800bd1e:	9b06      	ldr	r3, [sp, #24]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	dd08      	ble.n	800bd36 <_strtod_l+0x77e>
 800bd24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bd26:	9905      	ldr	r1, [sp, #20]
 800bd28:	4620      	mov	r0, r4
 800bd2a:	f001 feed 	bl	800db08 <__pow5mult>
 800bd2e:	9005      	str	r0, [sp, #20]
 800bd30:	2800      	cmp	r0, #0
 800bd32:	f43f ae89 	beq.w	800ba48 <_strtod_l+0x490>
 800bd36:	2f00      	cmp	r7, #0
 800bd38:	dd08      	ble.n	800bd4c <_strtod_l+0x794>
 800bd3a:	9905      	ldr	r1, [sp, #20]
 800bd3c:	463a      	mov	r2, r7
 800bd3e:	4620      	mov	r0, r4
 800bd40:	f001 ff3c 	bl	800dbbc <__lshift>
 800bd44:	9005      	str	r0, [sp, #20]
 800bd46:	2800      	cmp	r0, #0
 800bd48:	f43f ae7e 	beq.w	800ba48 <_strtod_l+0x490>
 800bd4c:	f1b9 0f00 	cmp.w	r9, #0
 800bd50:	dd08      	ble.n	800bd64 <_strtod_l+0x7ac>
 800bd52:	4631      	mov	r1, r6
 800bd54:	464a      	mov	r2, r9
 800bd56:	4620      	mov	r0, r4
 800bd58:	f001 ff30 	bl	800dbbc <__lshift>
 800bd5c:	4606      	mov	r6, r0
 800bd5e:	2800      	cmp	r0, #0
 800bd60:	f43f ae72 	beq.w	800ba48 <_strtod_l+0x490>
 800bd64:	9a05      	ldr	r2, [sp, #20]
 800bd66:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bd68:	4620      	mov	r0, r4
 800bd6a:	f001 ffb3 	bl	800dcd4 <__mdiff>
 800bd6e:	4605      	mov	r5, r0
 800bd70:	2800      	cmp	r0, #0
 800bd72:	f43f ae69 	beq.w	800ba48 <_strtod_l+0x490>
 800bd76:	68c3      	ldr	r3, [r0, #12]
 800bd78:	930b      	str	r3, [sp, #44]	; 0x2c
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	60c3      	str	r3, [r0, #12]
 800bd7e:	4631      	mov	r1, r6
 800bd80:	f001 ff8c 	bl	800dc9c <__mcmp>
 800bd84:	2800      	cmp	r0, #0
 800bd86:	da60      	bge.n	800be4a <_strtod_l+0x892>
 800bd88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd8a:	ea53 030a 	orrs.w	r3, r3, sl
 800bd8e:	f040 8082 	bne.w	800be96 <_strtod_l+0x8de>
 800bd92:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d17d      	bne.n	800be96 <_strtod_l+0x8de>
 800bd9a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bd9e:	0d1b      	lsrs	r3, r3, #20
 800bda0:	051b      	lsls	r3, r3, #20
 800bda2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800bda6:	d976      	bls.n	800be96 <_strtod_l+0x8de>
 800bda8:	696b      	ldr	r3, [r5, #20]
 800bdaa:	b913      	cbnz	r3, 800bdb2 <_strtod_l+0x7fa>
 800bdac:	692b      	ldr	r3, [r5, #16]
 800bdae:	2b01      	cmp	r3, #1
 800bdb0:	dd71      	ble.n	800be96 <_strtod_l+0x8de>
 800bdb2:	4629      	mov	r1, r5
 800bdb4:	2201      	movs	r2, #1
 800bdb6:	4620      	mov	r0, r4
 800bdb8:	f001 ff00 	bl	800dbbc <__lshift>
 800bdbc:	4631      	mov	r1, r6
 800bdbe:	4605      	mov	r5, r0
 800bdc0:	f001 ff6c 	bl	800dc9c <__mcmp>
 800bdc4:	2800      	cmp	r0, #0
 800bdc6:	dd66      	ble.n	800be96 <_strtod_l+0x8de>
 800bdc8:	9904      	ldr	r1, [sp, #16]
 800bdca:	4a53      	ldr	r2, [pc, #332]	; (800bf18 <_strtod_l+0x960>)
 800bdcc:	465b      	mov	r3, fp
 800bdce:	2900      	cmp	r1, #0
 800bdd0:	f000 8081 	beq.w	800bed6 <_strtod_l+0x91e>
 800bdd4:	ea02 010b 	and.w	r1, r2, fp
 800bdd8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800bddc:	dc7b      	bgt.n	800bed6 <_strtod_l+0x91e>
 800bdde:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800bde2:	f77f aea9 	ble.w	800bb38 <_strtod_l+0x580>
 800bde6:	4b4d      	ldr	r3, [pc, #308]	; (800bf1c <_strtod_l+0x964>)
 800bde8:	4650      	mov	r0, sl
 800bdea:	4659      	mov	r1, fp
 800bdec:	2200      	movs	r2, #0
 800bdee:	f7f4 fc1b 	bl	8000628 <__aeabi_dmul>
 800bdf2:	460b      	mov	r3, r1
 800bdf4:	4303      	orrs	r3, r0
 800bdf6:	bf08      	it	eq
 800bdf8:	2322      	moveq	r3, #34	; 0x22
 800bdfa:	4682      	mov	sl, r0
 800bdfc:	468b      	mov	fp, r1
 800bdfe:	bf08      	it	eq
 800be00:	6023      	streq	r3, [r4, #0]
 800be02:	e62b      	b.n	800ba5c <_strtod_l+0x4a4>
 800be04:	f04f 32ff 	mov.w	r2, #4294967295
 800be08:	fa02 f303 	lsl.w	r3, r2, r3
 800be0c:	ea03 0a0a 	and.w	sl, r3, sl
 800be10:	e6e3      	b.n	800bbda <_strtod_l+0x622>
 800be12:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800be16:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800be1a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800be1e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800be22:	fa01 f308 	lsl.w	r3, r1, r8
 800be26:	9308      	str	r3, [sp, #32]
 800be28:	910d      	str	r1, [sp, #52]	; 0x34
 800be2a:	e746      	b.n	800bcba <_strtod_l+0x702>
 800be2c:	2300      	movs	r3, #0
 800be2e:	9308      	str	r3, [sp, #32]
 800be30:	2301      	movs	r3, #1
 800be32:	930d      	str	r3, [sp, #52]	; 0x34
 800be34:	e741      	b.n	800bcba <_strtod_l+0x702>
 800be36:	9918      	ldr	r1, [sp, #96]	; 0x60
 800be38:	4642      	mov	r2, r8
 800be3a:	4620      	mov	r0, r4
 800be3c:	f001 febe 	bl	800dbbc <__lshift>
 800be40:	9018      	str	r0, [sp, #96]	; 0x60
 800be42:	2800      	cmp	r0, #0
 800be44:	f47f af6b 	bne.w	800bd1e <_strtod_l+0x766>
 800be48:	e5fe      	b.n	800ba48 <_strtod_l+0x490>
 800be4a:	465f      	mov	r7, fp
 800be4c:	d16e      	bne.n	800bf2c <_strtod_l+0x974>
 800be4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800be50:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800be54:	b342      	cbz	r2, 800bea8 <_strtod_l+0x8f0>
 800be56:	4a32      	ldr	r2, [pc, #200]	; (800bf20 <_strtod_l+0x968>)
 800be58:	4293      	cmp	r3, r2
 800be5a:	d128      	bne.n	800beae <_strtod_l+0x8f6>
 800be5c:	9b04      	ldr	r3, [sp, #16]
 800be5e:	4651      	mov	r1, sl
 800be60:	b1eb      	cbz	r3, 800be9e <_strtod_l+0x8e6>
 800be62:	4b2d      	ldr	r3, [pc, #180]	; (800bf18 <_strtod_l+0x960>)
 800be64:	403b      	ands	r3, r7
 800be66:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800be6a:	f04f 32ff 	mov.w	r2, #4294967295
 800be6e:	d819      	bhi.n	800bea4 <_strtod_l+0x8ec>
 800be70:	0d1b      	lsrs	r3, r3, #20
 800be72:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800be76:	fa02 f303 	lsl.w	r3, r2, r3
 800be7a:	4299      	cmp	r1, r3
 800be7c:	d117      	bne.n	800beae <_strtod_l+0x8f6>
 800be7e:	4b29      	ldr	r3, [pc, #164]	; (800bf24 <_strtod_l+0x96c>)
 800be80:	429f      	cmp	r7, r3
 800be82:	d102      	bne.n	800be8a <_strtod_l+0x8d2>
 800be84:	3101      	adds	r1, #1
 800be86:	f43f addf 	beq.w	800ba48 <_strtod_l+0x490>
 800be8a:	4b23      	ldr	r3, [pc, #140]	; (800bf18 <_strtod_l+0x960>)
 800be8c:	403b      	ands	r3, r7
 800be8e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800be92:	f04f 0a00 	mov.w	sl, #0
 800be96:	9b04      	ldr	r3, [sp, #16]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d1a4      	bne.n	800bde6 <_strtod_l+0x82e>
 800be9c:	e5de      	b.n	800ba5c <_strtod_l+0x4a4>
 800be9e:	f04f 33ff 	mov.w	r3, #4294967295
 800bea2:	e7ea      	b.n	800be7a <_strtod_l+0x8c2>
 800bea4:	4613      	mov	r3, r2
 800bea6:	e7e8      	b.n	800be7a <_strtod_l+0x8c2>
 800bea8:	ea53 030a 	orrs.w	r3, r3, sl
 800beac:	d08c      	beq.n	800bdc8 <_strtod_l+0x810>
 800beae:	9b08      	ldr	r3, [sp, #32]
 800beb0:	b1db      	cbz	r3, 800beea <_strtod_l+0x932>
 800beb2:	423b      	tst	r3, r7
 800beb4:	d0ef      	beq.n	800be96 <_strtod_l+0x8de>
 800beb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800beb8:	9a04      	ldr	r2, [sp, #16]
 800beba:	4650      	mov	r0, sl
 800bebc:	4659      	mov	r1, fp
 800bebe:	b1c3      	cbz	r3, 800bef2 <_strtod_l+0x93a>
 800bec0:	f7ff fb5e 	bl	800b580 <sulp>
 800bec4:	4602      	mov	r2, r0
 800bec6:	460b      	mov	r3, r1
 800bec8:	ec51 0b18 	vmov	r0, r1, d8
 800becc:	f7f4 f9f6 	bl	80002bc <__adddf3>
 800bed0:	4682      	mov	sl, r0
 800bed2:	468b      	mov	fp, r1
 800bed4:	e7df      	b.n	800be96 <_strtod_l+0x8de>
 800bed6:	4013      	ands	r3, r2
 800bed8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800bedc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bee0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bee4:	f04f 3aff 	mov.w	sl, #4294967295
 800bee8:	e7d5      	b.n	800be96 <_strtod_l+0x8de>
 800beea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800beec:	ea13 0f0a 	tst.w	r3, sl
 800bef0:	e7e0      	b.n	800beb4 <_strtod_l+0x8fc>
 800bef2:	f7ff fb45 	bl	800b580 <sulp>
 800bef6:	4602      	mov	r2, r0
 800bef8:	460b      	mov	r3, r1
 800befa:	ec51 0b18 	vmov	r0, r1, d8
 800befe:	f7f4 f9db 	bl	80002b8 <__aeabi_dsub>
 800bf02:	2200      	movs	r2, #0
 800bf04:	2300      	movs	r3, #0
 800bf06:	4682      	mov	sl, r0
 800bf08:	468b      	mov	fp, r1
 800bf0a:	f7f4 fdf5 	bl	8000af8 <__aeabi_dcmpeq>
 800bf0e:	2800      	cmp	r0, #0
 800bf10:	d0c1      	beq.n	800be96 <_strtod_l+0x8de>
 800bf12:	e611      	b.n	800bb38 <_strtod_l+0x580>
 800bf14:	fffffc02 	.word	0xfffffc02
 800bf18:	7ff00000 	.word	0x7ff00000
 800bf1c:	39500000 	.word	0x39500000
 800bf20:	000fffff 	.word	0x000fffff
 800bf24:	7fefffff 	.word	0x7fefffff
 800bf28:	0800f580 	.word	0x0800f580
 800bf2c:	4631      	mov	r1, r6
 800bf2e:	4628      	mov	r0, r5
 800bf30:	f002 f832 	bl	800df98 <__ratio>
 800bf34:	ec59 8b10 	vmov	r8, r9, d0
 800bf38:	ee10 0a10 	vmov	r0, s0
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bf42:	4649      	mov	r1, r9
 800bf44:	f7f4 fdec 	bl	8000b20 <__aeabi_dcmple>
 800bf48:	2800      	cmp	r0, #0
 800bf4a:	d07a      	beq.n	800c042 <_strtod_l+0xa8a>
 800bf4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d04a      	beq.n	800bfe8 <_strtod_l+0xa30>
 800bf52:	4b95      	ldr	r3, [pc, #596]	; (800c1a8 <_strtod_l+0xbf0>)
 800bf54:	2200      	movs	r2, #0
 800bf56:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bf5a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800c1a8 <_strtod_l+0xbf0>
 800bf5e:	f04f 0800 	mov.w	r8, #0
 800bf62:	4b92      	ldr	r3, [pc, #584]	; (800c1ac <_strtod_l+0xbf4>)
 800bf64:	403b      	ands	r3, r7
 800bf66:	930d      	str	r3, [sp, #52]	; 0x34
 800bf68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bf6a:	4b91      	ldr	r3, [pc, #580]	; (800c1b0 <_strtod_l+0xbf8>)
 800bf6c:	429a      	cmp	r2, r3
 800bf6e:	f040 80b0 	bne.w	800c0d2 <_strtod_l+0xb1a>
 800bf72:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bf76:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800bf7a:	ec4b ab10 	vmov	d0, sl, fp
 800bf7e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bf82:	f001 ff31 	bl	800dde8 <__ulp>
 800bf86:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bf8a:	ec53 2b10 	vmov	r2, r3, d0
 800bf8e:	f7f4 fb4b 	bl	8000628 <__aeabi_dmul>
 800bf92:	4652      	mov	r2, sl
 800bf94:	465b      	mov	r3, fp
 800bf96:	f7f4 f991 	bl	80002bc <__adddf3>
 800bf9a:	460b      	mov	r3, r1
 800bf9c:	4983      	ldr	r1, [pc, #524]	; (800c1ac <_strtod_l+0xbf4>)
 800bf9e:	4a85      	ldr	r2, [pc, #532]	; (800c1b4 <_strtod_l+0xbfc>)
 800bfa0:	4019      	ands	r1, r3
 800bfa2:	4291      	cmp	r1, r2
 800bfa4:	4682      	mov	sl, r0
 800bfa6:	d960      	bls.n	800c06a <_strtod_l+0xab2>
 800bfa8:	ee18 3a90 	vmov	r3, s17
 800bfac:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800bfb0:	4293      	cmp	r3, r2
 800bfb2:	d104      	bne.n	800bfbe <_strtod_l+0xa06>
 800bfb4:	ee18 3a10 	vmov	r3, s16
 800bfb8:	3301      	adds	r3, #1
 800bfba:	f43f ad45 	beq.w	800ba48 <_strtod_l+0x490>
 800bfbe:	f8df b200 	ldr.w	fp, [pc, #512]	; 800c1c0 <_strtod_l+0xc08>
 800bfc2:	f04f 3aff 	mov.w	sl, #4294967295
 800bfc6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bfc8:	4620      	mov	r0, r4
 800bfca:	f001 fbdb 	bl	800d784 <_Bfree>
 800bfce:	9905      	ldr	r1, [sp, #20]
 800bfd0:	4620      	mov	r0, r4
 800bfd2:	f001 fbd7 	bl	800d784 <_Bfree>
 800bfd6:	4631      	mov	r1, r6
 800bfd8:	4620      	mov	r0, r4
 800bfda:	f001 fbd3 	bl	800d784 <_Bfree>
 800bfde:	4629      	mov	r1, r5
 800bfe0:	4620      	mov	r0, r4
 800bfe2:	f001 fbcf 	bl	800d784 <_Bfree>
 800bfe6:	e61a      	b.n	800bc1e <_strtod_l+0x666>
 800bfe8:	f1ba 0f00 	cmp.w	sl, #0
 800bfec:	d11b      	bne.n	800c026 <_strtod_l+0xa6e>
 800bfee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bff2:	b9f3      	cbnz	r3, 800c032 <_strtod_l+0xa7a>
 800bff4:	4b6c      	ldr	r3, [pc, #432]	; (800c1a8 <_strtod_l+0xbf0>)
 800bff6:	2200      	movs	r2, #0
 800bff8:	4640      	mov	r0, r8
 800bffa:	4649      	mov	r1, r9
 800bffc:	f7f4 fd86 	bl	8000b0c <__aeabi_dcmplt>
 800c000:	b9d0      	cbnz	r0, 800c038 <_strtod_l+0xa80>
 800c002:	4640      	mov	r0, r8
 800c004:	4649      	mov	r1, r9
 800c006:	4b6c      	ldr	r3, [pc, #432]	; (800c1b8 <_strtod_l+0xc00>)
 800c008:	2200      	movs	r2, #0
 800c00a:	f7f4 fb0d 	bl	8000628 <__aeabi_dmul>
 800c00e:	4680      	mov	r8, r0
 800c010:	4689      	mov	r9, r1
 800c012:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c016:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800c01a:	9315      	str	r3, [sp, #84]	; 0x54
 800c01c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c020:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c024:	e79d      	b.n	800bf62 <_strtod_l+0x9aa>
 800c026:	f1ba 0f01 	cmp.w	sl, #1
 800c02a:	d102      	bne.n	800c032 <_strtod_l+0xa7a>
 800c02c:	2f00      	cmp	r7, #0
 800c02e:	f43f ad83 	beq.w	800bb38 <_strtod_l+0x580>
 800c032:	4b62      	ldr	r3, [pc, #392]	; (800c1bc <_strtod_l+0xc04>)
 800c034:	2200      	movs	r2, #0
 800c036:	e78e      	b.n	800bf56 <_strtod_l+0x99e>
 800c038:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800c1b8 <_strtod_l+0xc00>
 800c03c:	f04f 0800 	mov.w	r8, #0
 800c040:	e7e7      	b.n	800c012 <_strtod_l+0xa5a>
 800c042:	4b5d      	ldr	r3, [pc, #372]	; (800c1b8 <_strtod_l+0xc00>)
 800c044:	4640      	mov	r0, r8
 800c046:	4649      	mov	r1, r9
 800c048:	2200      	movs	r2, #0
 800c04a:	f7f4 faed 	bl	8000628 <__aeabi_dmul>
 800c04e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c050:	4680      	mov	r8, r0
 800c052:	4689      	mov	r9, r1
 800c054:	b933      	cbnz	r3, 800c064 <_strtod_l+0xaac>
 800c056:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c05a:	900e      	str	r0, [sp, #56]	; 0x38
 800c05c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c05e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c062:	e7dd      	b.n	800c020 <_strtod_l+0xa68>
 800c064:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800c068:	e7f9      	b.n	800c05e <_strtod_l+0xaa6>
 800c06a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c06e:	9b04      	ldr	r3, [sp, #16]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d1a8      	bne.n	800bfc6 <_strtod_l+0xa0e>
 800c074:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c078:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c07a:	0d1b      	lsrs	r3, r3, #20
 800c07c:	051b      	lsls	r3, r3, #20
 800c07e:	429a      	cmp	r2, r3
 800c080:	d1a1      	bne.n	800bfc6 <_strtod_l+0xa0e>
 800c082:	4640      	mov	r0, r8
 800c084:	4649      	mov	r1, r9
 800c086:	f7f4 fe2f 	bl	8000ce8 <__aeabi_d2lz>
 800c08a:	f7f4 fa9f 	bl	80005cc <__aeabi_l2d>
 800c08e:	4602      	mov	r2, r0
 800c090:	460b      	mov	r3, r1
 800c092:	4640      	mov	r0, r8
 800c094:	4649      	mov	r1, r9
 800c096:	f7f4 f90f 	bl	80002b8 <__aeabi_dsub>
 800c09a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c09c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c0a0:	ea43 030a 	orr.w	r3, r3, sl
 800c0a4:	4313      	orrs	r3, r2
 800c0a6:	4680      	mov	r8, r0
 800c0a8:	4689      	mov	r9, r1
 800c0aa:	d055      	beq.n	800c158 <_strtod_l+0xba0>
 800c0ac:	a336      	add	r3, pc, #216	; (adr r3, 800c188 <_strtod_l+0xbd0>)
 800c0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b2:	f7f4 fd2b 	bl	8000b0c <__aeabi_dcmplt>
 800c0b6:	2800      	cmp	r0, #0
 800c0b8:	f47f acd0 	bne.w	800ba5c <_strtod_l+0x4a4>
 800c0bc:	a334      	add	r3, pc, #208	; (adr r3, 800c190 <_strtod_l+0xbd8>)
 800c0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c2:	4640      	mov	r0, r8
 800c0c4:	4649      	mov	r1, r9
 800c0c6:	f7f4 fd3f 	bl	8000b48 <__aeabi_dcmpgt>
 800c0ca:	2800      	cmp	r0, #0
 800c0cc:	f43f af7b 	beq.w	800bfc6 <_strtod_l+0xa0e>
 800c0d0:	e4c4      	b.n	800ba5c <_strtod_l+0x4a4>
 800c0d2:	9b04      	ldr	r3, [sp, #16]
 800c0d4:	b333      	cbz	r3, 800c124 <_strtod_l+0xb6c>
 800c0d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c0d8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c0dc:	d822      	bhi.n	800c124 <_strtod_l+0xb6c>
 800c0de:	a32e      	add	r3, pc, #184	; (adr r3, 800c198 <_strtod_l+0xbe0>)
 800c0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e4:	4640      	mov	r0, r8
 800c0e6:	4649      	mov	r1, r9
 800c0e8:	f7f4 fd1a 	bl	8000b20 <__aeabi_dcmple>
 800c0ec:	b1a0      	cbz	r0, 800c118 <_strtod_l+0xb60>
 800c0ee:	4649      	mov	r1, r9
 800c0f0:	4640      	mov	r0, r8
 800c0f2:	f7f4 fd71 	bl	8000bd8 <__aeabi_d2uiz>
 800c0f6:	2801      	cmp	r0, #1
 800c0f8:	bf38      	it	cc
 800c0fa:	2001      	movcc	r0, #1
 800c0fc:	f7f4 fa1a 	bl	8000534 <__aeabi_ui2d>
 800c100:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c102:	4680      	mov	r8, r0
 800c104:	4689      	mov	r9, r1
 800c106:	bb23      	cbnz	r3, 800c152 <_strtod_l+0xb9a>
 800c108:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c10c:	9010      	str	r0, [sp, #64]	; 0x40
 800c10e:	9311      	str	r3, [sp, #68]	; 0x44
 800c110:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c114:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c11a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c11c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c120:	1a9b      	subs	r3, r3, r2
 800c122:	9309      	str	r3, [sp, #36]	; 0x24
 800c124:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c128:	eeb0 0a48 	vmov.f32	s0, s16
 800c12c:	eef0 0a68 	vmov.f32	s1, s17
 800c130:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c134:	f001 fe58 	bl	800dde8 <__ulp>
 800c138:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c13c:	ec53 2b10 	vmov	r2, r3, d0
 800c140:	f7f4 fa72 	bl	8000628 <__aeabi_dmul>
 800c144:	ec53 2b18 	vmov	r2, r3, d8
 800c148:	f7f4 f8b8 	bl	80002bc <__adddf3>
 800c14c:	4682      	mov	sl, r0
 800c14e:	468b      	mov	fp, r1
 800c150:	e78d      	b.n	800c06e <_strtod_l+0xab6>
 800c152:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800c156:	e7db      	b.n	800c110 <_strtod_l+0xb58>
 800c158:	a311      	add	r3, pc, #68	; (adr r3, 800c1a0 <_strtod_l+0xbe8>)
 800c15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c15e:	f7f4 fcd5 	bl	8000b0c <__aeabi_dcmplt>
 800c162:	e7b2      	b.n	800c0ca <_strtod_l+0xb12>
 800c164:	2300      	movs	r3, #0
 800c166:	930a      	str	r3, [sp, #40]	; 0x28
 800c168:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c16a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c16c:	6013      	str	r3, [r2, #0]
 800c16e:	f7ff ba6b 	b.w	800b648 <_strtod_l+0x90>
 800c172:	2a65      	cmp	r2, #101	; 0x65
 800c174:	f43f ab5f 	beq.w	800b836 <_strtod_l+0x27e>
 800c178:	2a45      	cmp	r2, #69	; 0x45
 800c17a:	f43f ab5c 	beq.w	800b836 <_strtod_l+0x27e>
 800c17e:	2301      	movs	r3, #1
 800c180:	f7ff bb94 	b.w	800b8ac <_strtod_l+0x2f4>
 800c184:	f3af 8000 	nop.w
 800c188:	94a03595 	.word	0x94a03595
 800c18c:	3fdfffff 	.word	0x3fdfffff
 800c190:	35afe535 	.word	0x35afe535
 800c194:	3fe00000 	.word	0x3fe00000
 800c198:	ffc00000 	.word	0xffc00000
 800c19c:	41dfffff 	.word	0x41dfffff
 800c1a0:	94a03595 	.word	0x94a03595
 800c1a4:	3fcfffff 	.word	0x3fcfffff
 800c1a8:	3ff00000 	.word	0x3ff00000
 800c1ac:	7ff00000 	.word	0x7ff00000
 800c1b0:	7fe00000 	.word	0x7fe00000
 800c1b4:	7c9fffff 	.word	0x7c9fffff
 800c1b8:	3fe00000 	.word	0x3fe00000
 800c1bc:	bff00000 	.word	0xbff00000
 800c1c0:	7fefffff 	.word	0x7fefffff

0800c1c4 <_strtod_r>:
 800c1c4:	4b01      	ldr	r3, [pc, #4]	; (800c1cc <_strtod_r+0x8>)
 800c1c6:	f7ff b9f7 	b.w	800b5b8 <_strtod_l>
 800c1ca:	bf00      	nop
 800c1cc:	200000e8 	.word	0x200000e8

0800c1d0 <_strtol_l.constprop.0>:
 800c1d0:	2b01      	cmp	r3, #1
 800c1d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1d6:	d001      	beq.n	800c1dc <_strtol_l.constprop.0+0xc>
 800c1d8:	2b24      	cmp	r3, #36	; 0x24
 800c1da:	d906      	bls.n	800c1ea <_strtol_l.constprop.0+0x1a>
 800c1dc:	f7fe fafe 	bl	800a7dc <__errno>
 800c1e0:	2316      	movs	r3, #22
 800c1e2:	6003      	str	r3, [r0, #0]
 800c1e4:	2000      	movs	r0, #0
 800c1e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1ea:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c2d0 <_strtol_l.constprop.0+0x100>
 800c1ee:	460d      	mov	r5, r1
 800c1f0:	462e      	mov	r6, r5
 800c1f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c1f6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c1fa:	f017 0708 	ands.w	r7, r7, #8
 800c1fe:	d1f7      	bne.n	800c1f0 <_strtol_l.constprop.0+0x20>
 800c200:	2c2d      	cmp	r4, #45	; 0x2d
 800c202:	d132      	bne.n	800c26a <_strtol_l.constprop.0+0x9a>
 800c204:	782c      	ldrb	r4, [r5, #0]
 800c206:	2701      	movs	r7, #1
 800c208:	1cb5      	adds	r5, r6, #2
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d05b      	beq.n	800c2c6 <_strtol_l.constprop.0+0xf6>
 800c20e:	2b10      	cmp	r3, #16
 800c210:	d109      	bne.n	800c226 <_strtol_l.constprop.0+0x56>
 800c212:	2c30      	cmp	r4, #48	; 0x30
 800c214:	d107      	bne.n	800c226 <_strtol_l.constprop.0+0x56>
 800c216:	782c      	ldrb	r4, [r5, #0]
 800c218:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c21c:	2c58      	cmp	r4, #88	; 0x58
 800c21e:	d14d      	bne.n	800c2bc <_strtol_l.constprop.0+0xec>
 800c220:	786c      	ldrb	r4, [r5, #1]
 800c222:	2310      	movs	r3, #16
 800c224:	3502      	adds	r5, #2
 800c226:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c22a:	f108 38ff 	add.w	r8, r8, #4294967295
 800c22e:	f04f 0c00 	mov.w	ip, #0
 800c232:	fbb8 f9f3 	udiv	r9, r8, r3
 800c236:	4666      	mov	r6, ip
 800c238:	fb03 8a19 	mls	sl, r3, r9, r8
 800c23c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c240:	f1be 0f09 	cmp.w	lr, #9
 800c244:	d816      	bhi.n	800c274 <_strtol_l.constprop.0+0xa4>
 800c246:	4674      	mov	r4, lr
 800c248:	42a3      	cmp	r3, r4
 800c24a:	dd24      	ble.n	800c296 <_strtol_l.constprop.0+0xc6>
 800c24c:	f1bc 0f00 	cmp.w	ip, #0
 800c250:	db1e      	blt.n	800c290 <_strtol_l.constprop.0+0xc0>
 800c252:	45b1      	cmp	r9, r6
 800c254:	d31c      	bcc.n	800c290 <_strtol_l.constprop.0+0xc0>
 800c256:	d101      	bne.n	800c25c <_strtol_l.constprop.0+0x8c>
 800c258:	45a2      	cmp	sl, r4
 800c25a:	db19      	blt.n	800c290 <_strtol_l.constprop.0+0xc0>
 800c25c:	fb06 4603 	mla	r6, r6, r3, r4
 800c260:	f04f 0c01 	mov.w	ip, #1
 800c264:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c268:	e7e8      	b.n	800c23c <_strtol_l.constprop.0+0x6c>
 800c26a:	2c2b      	cmp	r4, #43	; 0x2b
 800c26c:	bf04      	itt	eq
 800c26e:	782c      	ldrbeq	r4, [r5, #0]
 800c270:	1cb5      	addeq	r5, r6, #2
 800c272:	e7ca      	b.n	800c20a <_strtol_l.constprop.0+0x3a>
 800c274:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c278:	f1be 0f19 	cmp.w	lr, #25
 800c27c:	d801      	bhi.n	800c282 <_strtol_l.constprop.0+0xb2>
 800c27e:	3c37      	subs	r4, #55	; 0x37
 800c280:	e7e2      	b.n	800c248 <_strtol_l.constprop.0+0x78>
 800c282:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c286:	f1be 0f19 	cmp.w	lr, #25
 800c28a:	d804      	bhi.n	800c296 <_strtol_l.constprop.0+0xc6>
 800c28c:	3c57      	subs	r4, #87	; 0x57
 800c28e:	e7db      	b.n	800c248 <_strtol_l.constprop.0+0x78>
 800c290:	f04f 3cff 	mov.w	ip, #4294967295
 800c294:	e7e6      	b.n	800c264 <_strtol_l.constprop.0+0x94>
 800c296:	f1bc 0f00 	cmp.w	ip, #0
 800c29a:	da05      	bge.n	800c2a8 <_strtol_l.constprop.0+0xd8>
 800c29c:	2322      	movs	r3, #34	; 0x22
 800c29e:	6003      	str	r3, [r0, #0]
 800c2a0:	4646      	mov	r6, r8
 800c2a2:	b942      	cbnz	r2, 800c2b6 <_strtol_l.constprop.0+0xe6>
 800c2a4:	4630      	mov	r0, r6
 800c2a6:	e79e      	b.n	800c1e6 <_strtol_l.constprop.0+0x16>
 800c2a8:	b107      	cbz	r7, 800c2ac <_strtol_l.constprop.0+0xdc>
 800c2aa:	4276      	negs	r6, r6
 800c2ac:	2a00      	cmp	r2, #0
 800c2ae:	d0f9      	beq.n	800c2a4 <_strtol_l.constprop.0+0xd4>
 800c2b0:	f1bc 0f00 	cmp.w	ip, #0
 800c2b4:	d000      	beq.n	800c2b8 <_strtol_l.constprop.0+0xe8>
 800c2b6:	1e69      	subs	r1, r5, #1
 800c2b8:	6011      	str	r1, [r2, #0]
 800c2ba:	e7f3      	b.n	800c2a4 <_strtol_l.constprop.0+0xd4>
 800c2bc:	2430      	movs	r4, #48	; 0x30
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d1b1      	bne.n	800c226 <_strtol_l.constprop.0+0x56>
 800c2c2:	2308      	movs	r3, #8
 800c2c4:	e7af      	b.n	800c226 <_strtol_l.constprop.0+0x56>
 800c2c6:	2c30      	cmp	r4, #48	; 0x30
 800c2c8:	d0a5      	beq.n	800c216 <_strtol_l.constprop.0+0x46>
 800c2ca:	230a      	movs	r3, #10
 800c2cc:	e7ab      	b.n	800c226 <_strtol_l.constprop.0+0x56>
 800c2ce:	bf00      	nop
 800c2d0:	0800f5a9 	.word	0x0800f5a9

0800c2d4 <_strtol_r>:
 800c2d4:	f7ff bf7c 	b.w	800c1d0 <_strtol_l.constprop.0>

0800c2d8 <quorem>:
 800c2d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2dc:	6903      	ldr	r3, [r0, #16]
 800c2de:	690c      	ldr	r4, [r1, #16]
 800c2e0:	42a3      	cmp	r3, r4
 800c2e2:	4607      	mov	r7, r0
 800c2e4:	f2c0 8081 	blt.w	800c3ea <quorem+0x112>
 800c2e8:	3c01      	subs	r4, #1
 800c2ea:	f101 0814 	add.w	r8, r1, #20
 800c2ee:	f100 0514 	add.w	r5, r0, #20
 800c2f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c2f6:	9301      	str	r3, [sp, #4]
 800c2f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c2fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c300:	3301      	adds	r3, #1
 800c302:	429a      	cmp	r2, r3
 800c304:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c308:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c30c:	fbb2 f6f3 	udiv	r6, r2, r3
 800c310:	d331      	bcc.n	800c376 <quorem+0x9e>
 800c312:	f04f 0e00 	mov.w	lr, #0
 800c316:	4640      	mov	r0, r8
 800c318:	46ac      	mov	ip, r5
 800c31a:	46f2      	mov	sl, lr
 800c31c:	f850 2b04 	ldr.w	r2, [r0], #4
 800c320:	b293      	uxth	r3, r2
 800c322:	fb06 e303 	mla	r3, r6, r3, lr
 800c326:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c32a:	b29b      	uxth	r3, r3
 800c32c:	ebaa 0303 	sub.w	r3, sl, r3
 800c330:	f8dc a000 	ldr.w	sl, [ip]
 800c334:	0c12      	lsrs	r2, r2, #16
 800c336:	fa13 f38a 	uxtah	r3, r3, sl
 800c33a:	fb06 e202 	mla	r2, r6, r2, lr
 800c33e:	9300      	str	r3, [sp, #0]
 800c340:	9b00      	ldr	r3, [sp, #0]
 800c342:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c346:	b292      	uxth	r2, r2
 800c348:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c34c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c350:	f8bd 3000 	ldrh.w	r3, [sp]
 800c354:	4581      	cmp	r9, r0
 800c356:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c35a:	f84c 3b04 	str.w	r3, [ip], #4
 800c35e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c362:	d2db      	bcs.n	800c31c <quorem+0x44>
 800c364:	f855 300b 	ldr.w	r3, [r5, fp]
 800c368:	b92b      	cbnz	r3, 800c376 <quorem+0x9e>
 800c36a:	9b01      	ldr	r3, [sp, #4]
 800c36c:	3b04      	subs	r3, #4
 800c36e:	429d      	cmp	r5, r3
 800c370:	461a      	mov	r2, r3
 800c372:	d32e      	bcc.n	800c3d2 <quorem+0xfa>
 800c374:	613c      	str	r4, [r7, #16]
 800c376:	4638      	mov	r0, r7
 800c378:	f001 fc90 	bl	800dc9c <__mcmp>
 800c37c:	2800      	cmp	r0, #0
 800c37e:	db24      	blt.n	800c3ca <quorem+0xf2>
 800c380:	3601      	adds	r6, #1
 800c382:	4628      	mov	r0, r5
 800c384:	f04f 0c00 	mov.w	ip, #0
 800c388:	f858 2b04 	ldr.w	r2, [r8], #4
 800c38c:	f8d0 e000 	ldr.w	lr, [r0]
 800c390:	b293      	uxth	r3, r2
 800c392:	ebac 0303 	sub.w	r3, ip, r3
 800c396:	0c12      	lsrs	r2, r2, #16
 800c398:	fa13 f38e 	uxtah	r3, r3, lr
 800c39c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c3a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c3a4:	b29b      	uxth	r3, r3
 800c3a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c3aa:	45c1      	cmp	r9, r8
 800c3ac:	f840 3b04 	str.w	r3, [r0], #4
 800c3b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c3b4:	d2e8      	bcs.n	800c388 <quorem+0xb0>
 800c3b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c3ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c3be:	b922      	cbnz	r2, 800c3ca <quorem+0xf2>
 800c3c0:	3b04      	subs	r3, #4
 800c3c2:	429d      	cmp	r5, r3
 800c3c4:	461a      	mov	r2, r3
 800c3c6:	d30a      	bcc.n	800c3de <quorem+0x106>
 800c3c8:	613c      	str	r4, [r7, #16]
 800c3ca:	4630      	mov	r0, r6
 800c3cc:	b003      	add	sp, #12
 800c3ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3d2:	6812      	ldr	r2, [r2, #0]
 800c3d4:	3b04      	subs	r3, #4
 800c3d6:	2a00      	cmp	r2, #0
 800c3d8:	d1cc      	bne.n	800c374 <quorem+0x9c>
 800c3da:	3c01      	subs	r4, #1
 800c3dc:	e7c7      	b.n	800c36e <quorem+0x96>
 800c3de:	6812      	ldr	r2, [r2, #0]
 800c3e0:	3b04      	subs	r3, #4
 800c3e2:	2a00      	cmp	r2, #0
 800c3e4:	d1f0      	bne.n	800c3c8 <quorem+0xf0>
 800c3e6:	3c01      	subs	r4, #1
 800c3e8:	e7eb      	b.n	800c3c2 <quorem+0xea>
 800c3ea:	2000      	movs	r0, #0
 800c3ec:	e7ee      	b.n	800c3cc <quorem+0xf4>
	...

0800c3f0 <_dtoa_r>:
 800c3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3f4:	ed2d 8b04 	vpush	{d8-d9}
 800c3f8:	ec57 6b10 	vmov	r6, r7, d0
 800c3fc:	b093      	sub	sp, #76	; 0x4c
 800c3fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c400:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c404:	9106      	str	r1, [sp, #24]
 800c406:	ee10 aa10 	vmov	sl, s0
 800c40a:	4604      	mov	r4, r0
 800c40c:	9209      	str	r2, [sp, #36]	; 0x24
 800c40e:	930c      	str	r3, [sp, #48]	; 0x30
 800c410:	46bb      	mov	fp, r7
 800c412:	b975      	cbnz	r5, 800c432 <_dtoa_r+0x42>
 800c414:	2010      	movs	r0, #16
 800c416:	f001 f94d 	bl	800d6b4 <malloc>
 800c41a:	4602      	mov	r2, r0
 800c41c:	6260      	str	r0, [r4, #36]	; 0x24
 800c41e:	b920      	cbnz	r0, 800c42a <_dtoa_r+0x3a>
 800c420:	4ba7      	ldr	r3, [pc, #668]	; (800c6c0 <_dtoa_r+0x2d0>)
 800c422:	21ea      	movs	r1, #234	; 0xea
 800c424:	48a7      	ldr	r0, [pc, #668]	; (800c6c4 <_dtoa_r+0x2d4>)
 800c426:	f002 f8bd 	bl	800e5a4 <__assert_func>
 800c42a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c42e:	6005      	str	r5, [r0, #0]
 800c430:	60c5      	str	r5, [r0, #12]
 800c432:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c434:	6819      	ldr	r1, [r3, #0]
 800c436:	b151      	cbz	r1, 800c44e <_dtoa_r+0x5e>
 800c438:	685a      	ldr	r2, [r3, #4]
 800c43a:	604a      	str	r2, [r1, #4]
 800c43c:	2301      	movs	r3, #1
 800c43e:	4093      	lsls	r3, r2
 800c440:	608b      	str	r3, [r1, #8]
 800c442:	4620      	mov	r0, r4
 800c444:	f001 f99e 	bl	800d784 <_Bfree>
 800c448:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c44a:	2200      	movs	r2, #0
 800c44c:	601a      	str	r2, [r3, #0]
 800c44e:	1e3b      	subs	r3, r7, #0
 800c450:	bfaa      	itet	ge
 800c452:	2300      	movge	r3, #0
 800c454:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c458:	f8c8 3000 	strge.w	r3, [r8]
 800c45c:	4b9a      	ldr	r3, [pc, #616]	; (800c6c8 <_dtoa_r+0x2d8>)
 800c45e:	bfbc      	itt	lt
 800c460:	2201      	movlt	r2, #1
 800c462:	f8c8 2000 	strlt.w	r2, [r8]
 800c466:	ea33 030b 	bics.w	r3, r3, fp
 800c46a:	d11b      	bne.n	800c4a4 <_dtoa_r+0xb4>
 800c46c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c46e:	f242 730f 	movw	r3, #9999	; 0x270f
 800c472:	6013      	str	r3, [r2, #0]
 800c474:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c478:	4333      	orrs	r3, r6
 800c47a:	f000 8592 	beq.w	800cfa2 <_dtoa_r+0xbb2>
 800c47e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c480:	b963      	cbnz	r3, 800c49c <_dtoa_r+0xac>
 800c482:	4b92      	ldr	r3, [pc, #584]	; (800c6cc <_dtoa_r+0x2dc>)
 800c484:	e022      	b.n	800c4cc <_dtoa_r+0xdc>
 800c486:	4b92      	ldr	r3, [pc, #584]	; (800c6d0 <_dtoa_r+0x2e0>)
 800c488:	9301      	str	r3, [sp, #4]
 800c48a:	3308      	adds	r3, #8
 800c48c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c48e:	6013      	str	r3, [r2, #0]
 800c490:	9801      	ldr	r0, [sp, #4]
 800c492:	b013      	add	sp, #76	; 0x4c
 800c494:	ecbd 8b04 	vpop	{d8-d9}
 800c498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c49c:	4b8b      	ldr	r3, [pc, #556]	; (800c6cc <_dtoa_r+0x2dc>)
 800c49e:	9301      	str	r3, [sp, #4]
 800c4a0:	3303      	adds	r3, #3
 800c4a2:	e7f3      	b.n	800c48c <_dtoa_r+0x9c>
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	4650      	mov	r0, sl
 800c4aa:	4659      	mov	r1, fp
 800c4ac:	f7f4 fb24 	bl	8000af8 <__aeabi_dcmpeq>
 800c4b0:	ec4b ab19 	vmov	d9, sl, fp
 800c4b4:	4680      	mov	r8, r0
 800c4b6:	b158      	cbz	r0, 800c4d0 <_dtoa_r+0xe0>
 800c4b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c4ba:	2301      	movs	r3, #1
 800c4bc:	6013      	str	r3, [r2, #0]
 800c4be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	f000 856b 	beq.w	800cf9c <_dtoa_r+0xbac>
 800c4c6:	4883      	ldr	r0, [pc, #524]	; (800c6d4 <_dtoa_r+0x2e4>)
 800c4c8:	6018      	str	r0, [r3, #0]
 800c4ca:	1e43      	subs	r3, r0, #1
 800c4cc:	9301      	str	r3, [sp, #4]
 800c4ce:	e7df      	b.n	800c490 <_dtoa_r+0xa0>
 800c4d0:	ec4b ab10 	vmov	d0, sl, fp
 800c4d4:	aa10      	add	r2, sp, #64	; 0x40
 800c4d6:	a911      	add	r1, sp, #68	; 0x44
 800c4d8:	4620      	mov	r0, r4
 800c4da:	f001 fd01 	bl	800dee0 <__d2b>
 800c4de:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c4e2:	ee08 0a10 	vmov	s16, r0
 800c4e6:	2d00      	cmp	r5, #0
 800c4e8:	f000 8084 	beq.w	800c5f4 <_dtoa_r+0x204>
 800c4ec:	ee19 3a90 	vmov	r3, s19
 800c4f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c4f4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c4f8:	4656      	mov	r6, sl
 800c4fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c4fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c502:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c506:	4b74      	ldr	r3, [pc, #464]	; (800c6d8 <_dtoa_r+0x2e8>)
 800c508:	2200      	movs	r2, #0
 800c50a:	4630      	mov	r0, r6
 800c50c:	4639      	mov	r1, r7
 800c50e:	f7f3 fed3 	bl	80002b8 <__aeabi_dsub>
 800c512:	a365      	add	r3, pc, #404	; (adr r3, 800c6a8 <_dtoa_r+0x2b8>)
 800c514:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c518:	f7f4 f886 	bl	8000628 <__aeabi_dmul>
 800c51c:	a364      	add	r3, pc, #400	; (adr r3, 800c6b0 <_dtoa_r+0x2c0>)
 800c51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c522:	f7f3 fecb 	bl	80002bc <__adddf3>
 800c526:	4606      	mov	r6, r0
 800c528:	4628      	mov	r0, r5
 800c52a:	460f      	mov	r7, r1
 800c52c:	f7f4 f812 	bl	8000554 <__aeabi_i2d>
 800c530:	a361      	add	r3, pc, #388	; (adr r3, 800c6b8 <_dtoa_r+0x2c8>)
 800c532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c536:	f7f4 f877 	bl	8000628 <__aeabi_dmul>
 800c53a:	4602      	mov	r2, r0
 800c53c:	460b      	mov	r3, r1
 800c53e:	4630      	mov	r0, r6
 800c540:	4639      	mov	r1, r7
 800c542:	f7f3 febb 	bl	80002bc <__adddf3>
 800c546:	4606      	mov	r6, r0
 800c548:	460f      	mov	r7, r1
 800c54a:	f7f4 fb1d 	bl	8000b88 <__aeabi_d2iz>
 800c54e:	2200      	movs	r2, #0
 800c550:	9000      	str	r0, [sp, #0]
 800c552:	2300      	movs	r3, #0
 800c554:	4630      	mov	r0, r6
 800c556:	4639      	mov	r1, r7
 800c558:	f7f4 fad8 	bl	8000b0c <__aeabi_dcmplt>
 800c55c:	b150      	cbz	r0, 800c574 <_dtoa_r+0x184>
 800c55e:	9800      	ldr	r0, [sp, #0]
 800c560:	f7f3 fff8 	bl	8000554 <__aeabi_i2d>
 800c564:	4632      	mov	r2, r6
 800c566:	463b      	mov	r3, r7
 800c568:	f7f4 fac6 	bl	8000af8 <__aeabi_dcmpeq>
 800c56c:	b910      	cbnz	r0, 800c574 <_dtoa_r+0x184>
 800c56e:	9b00      	ldr	r3, [sp, #0]
 800c570:	3b01      	subs	r3, #1
 800c572:	9300      	str	r3, [sp, #0]
 800c574:	9b00      	ldr	r3, [sp, #0]
 800c576:	2b16      	cmp	r3, #22
 800c578:	d85a      	bhi.n	800c630 <_dtoa_r+0x240>
 800c57a:	9a00      	ldr	r2, [sp, #0]
 800c57c:	4b57      	ldr	r3, [pc, #348]	; (800c6dc <_dtoa_r+0x2ec>)
 800c57e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c586:	ec51 0b19 	vmov	r0, r1, d9
 800c58a:	f7f4 fabf 	bl	8000b0c <__aeabi_dcmplt>
 800c58e:	2800      	cmp	r0, #0
 800c590:	d050      	beq.n	800c634 <_dtoa_r+0x244>
 800c592:	9b00      	ldr	r3, [sp, #0]
 800c594:	3b01      	subs	r3, #1
 800c596:	9300      	str	r3, [sp, #0]
 800c598:	2300      	movs	r3, #0
 800c59a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c59c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c59e:	1b5d      	subs	r5, r3, r5
 800c5a0:	1e6b      	subs	r3, r5, #1
 800c5a2:	9305      	str	r3, [sp, #20]
 800c5a4:	bf45      	ittet	mi
 800c5a6:	f1c5 0301 	rsbmi	r3, r5, #1
 800c5aa:	9304      	strmi	r3, [sp, #16]
 800c5ac:	2300      	movpl	r3, #0
 800c5ae:	2300      	movmi	r3, #0
 800c5b0:	bf4c      	ite	mi
 800c5b2:	9305      	strmi	r3, [sp, #20]
 800c5b4:	9304      	strpl	r3, [sp, #16]
 800c5b6:	9b00      	ldr	r3, [sp, #0]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	db3d      	blt.n	800c638 <_dtoa_r+0x248>
 800c5bc:	9b05      	ldr	r3, [sp, #20]
 800c5be:	9a00      	ldr	r2, [sp, #0]
 800c5c0:	920a      	str	r2, [sp, #40]	; 0x28
 800c5c2:	4413      	add	r3, r2
 800c5c4:	9305      	str	r3, [sp, #20]
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	9307      	str	r3, [sp, #28]
 800c5ca:	9b06      	ldr	r3, [sp, #24]
 800c5cc:	2b09      	cmp	r3, #9
 800c5ce:	f200 8089 	bhi.w	800c6e4 <_dtoa_r+0x2f4>
 800c5d2:	2b05      	cmp	r3, #5
 800c5d4:	bfc4      	itt	gt
 800c5d6:	3b04      	subgt	r3, #4
 800c5d8:	9306      	strgt	r3, [sp, #24]
 800c5da:	9b06      	ldr	r3, [sp, #24]
 800c5dc:	f1a3 0302 	sub.w	r3, r3, #2
 800c5e0:	bfcc      	ite	gt
 800c5e2:	2500      	movgt	r5, #0
 800c5e4:	2501      	movle	r5, #1
 800c5e6:	2b03      	cmp	r3, #3
 800c5e8:	f200 8087 	bhi.w	800c6fa <_dtoa_r+0x30a>
 800c5ec:	e8df f003 	tbb	[pc, r3]
 800c5f0:	59383a2d 	.word	0x59383a2d
 800c5f4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c5f8:	441d      	add	r5, r3
 800c5fa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c5fe:	2b20      	cmp	r3, #32
 800c600:	bfc1      	itttt	gt
 800c602:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c606:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c60a:	fa0b f303 	lslgt.w	r3, fp, r3
 800c60e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c612:	bfda      	itte	le
 800c614:	f1c3 0320 	rsble	r3, r3, #32
 800c618:	fa06 f003 	lslle.w	r0, r6, r3
 800c61c:	4318      	orrgt	r0, r3
 800c61e:	f7f3 ff89 	bl	8000534 <__aeabi_ui2d>
 800c622:	2301      	movs	r3, #1
 800c624:	4606      	mov	r6, r0
 800c626:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c62a:	3d01      	subs	r5, #1
 800c62c:	930e      	str	r3, [sp, #56]	; 0x38
 800c62e:	e76a      	b.n	800c506 <_dtoa_r+0x116>
 800c630:	2301      	movs	r3, #1
 800c632:	e7b2      	b.n	800c59a <_dtoa_r+0x1aa>
 800c634:	900b      	str	r0, [sp, #44]	; 0x2c
 800c636:	e7b1      	b.n	800c59c <_dtoa_r+0x1ac>
 800c638:	9b04      	ldr	r3, [sp, #16]
 800c63a:	9a00      	ldr	r2, [sp, #0]
 800c63c:	1a9b      	subs	r3, r3, r2
 800c63e:	9304      	str	r3, [sp, #16]
 800c640:	4253      	negs	r3, r2
 800c642:	9307      	str	r3, [sp, #28]
 800c644:	2300      	movs	r3, #0
 800c646:	930a      	str	r3, [sp, #40]	; 0x28
 800c648:	e7bf      	b.n	800c5ca <_dtoa_r+0x1da>
 800c64a:	2300      	movs	r3, #0
 800c64c:	9308      	str	r3, [sp, #32]
 800c64e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c650:	2b00      	cmp	r3, #0
 800c652:	dc55      	bgt.n	800c700 <_dtoa_r+0x310>
 800c654:	2301      	movs	r3, #1
 800c656:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c65a:	461a      	mov	r2, r3
 800c65c:	9209      	str	r2, [sp, #36]	; 0x24
 800c65e:	e00c      	b.n	800c67a <_dtoa_r+0x28a>
 800c660:	2301      	movs	r3, #1
 800c662:	e7f3      	b.n	800c64c <_dtoa_r+0x25c>
 800c664:	2300      	movs	r3, #0
 800c666:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c668:	9308      	str	r3, [sp, #32]
 800c66a:	9b00      	ldr	r3, [sp, #0]
 800c66c:	4413      	add	r3, r2
 800c66e:	9302      	str	r3, [sp, #8]
 800c670:	3301      	adds	r3, #1
 800c672:	2b01      	cmp	r3, #1
 800c674:	9303      	str	r3, [sp, #12]
 800c676:	bfb8      	it	lt
 800c678:	2301      	movlt	r3, #1
 800c67a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c67c:	2200      	movs	r2, #0
 800c67e:	6042      	str	r2, [r0, #4]
 800c680:	2204      	movs	r2, #4
 800c682:	f102 0614 	add.w	r6, r2, #20
 800c686:	429e      	cmp	r6, r3
 800c688:	6841      	ldr	r1, [r0, #4]
 800c68a:	d93d      	bls.n	800c708 <_dtoa_r+0x318>
 800c68c:	4620      	mov	r0, r4
 800c68e:	f001 f839 	bl	800d704 <_Balloc>
 800c692:	9001      	str	r0, [sp, #4]
 800c694:	2800      	cmp	r0, #0
 800c696:	d13b      	bne.n	800c710 <_dtoa_r+0x320>
 800c698:	4b11      	ldr	r3, [pc, #68]	; (800c6e0 <_dtoa_r+0x2f0>)
 800c69a:	4602      	mov	r2, r0
 800c69c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c6a0:	e6c0      	b.n	800c424 <_dtoa_r+0x34>
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	e7df      	b.n	800c666 <_dtoa_r+0x276>
 800c6a6:	bf00      	nop
 800c6a8:	636f4361 	.word	0x636f4361
 800c6ac:	3fd287a7 	.word	0x3fd287a7
 800c6b0:	8b60c8b3 	.word	0x8b60c8b3
 800c6b4:	3fc68a28 	.word	0x3fc68a28
 800c6b8:	509f79fb 	.word	0x509f79fb
 800c6bc:	3fd34413 	.word	0x3fd34413
 800c6c0:	0800f6b6 	.word	0x0800f6b6
 800c6c4:	0800f6cd 	.word	0x0800f6cd
 800c6c8:	7ff00000 	.word	0x7ff00000
 800c6cc:	0800f6b2 	.word	0x0800f6b2
 800c6d0:	0800f6a9 	.word	0x0800f6a9
 800c6d4:	0800f52d 	.word	0x0800f52d
 800c6d8:	3ff80000 	.word	0x3ff80000
 800c6dc:	0800f838 	.word	0x0800f838
 800c6e0:	0800f728 	.word	0x0800f728
 800c6e4:	2501      	movs	r5, #1
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	9306      	str	r3, [sp, #24]
 800c6ea:	9508      	str	r5, [sp, #32]
 800c6ec:	f04f 33ff 	mov.w	r3, #4294967295
 800c6f0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	2312      	movs	r3, #18
 800c6f8:	e7b0      	b.n	800c65c <_dtoa_r+0x26c>
 800c6fa:	2301      	movs	r3, #1
 800c6fc:	9308      	str	r3, [sp, #32]
 800c6fe:	e7f5      	b.n	800c6ec <_dtoa_r+0x2fc>
 800c700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c702:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c706:	e7b8      	b.n	800c67a <_dtoa_r+0x28a>
 800c708:	3101      	adds	r1, #1
 800c70a:	6041      	str	r1, [r0, #4]
 800c70c:	0052      	lsls	r2, r2, #1
 800c70e:	e7b8      	b.n	800c682 <_dtoa_r+0x292>
 800c710:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c712:	9a01      	ldr	r2, [sp, #4]
 800c714:	601a      	str	r2, [r3, #0]
 800c716:	9b03      	ldr	r3, [sp, #12]
 800c718:	2b0e      	cmp	r3, #14
 800c71a:	f200 809d 	bhi.w	800c858 <_dtoa_r+0x468>
 800c71e:	2d00      	cmp	r5, #0
 800c720:	f000 809a 	beq.w	800c858 <_dtoa_r+0x468>
 800c724:	9b00      	ldr	r3, [sp, #0]
 800c726:	2b00      	cmp	r3, #0
 800c728:	dd32      	ble.n	800c790 <_dtoa_r+0x3a0>
 800c72a:	4ab7      	ldr	r2, [pc, #732]	; (800ca08 <_dtoa_r+0x618>)
 800c72c:	f003 030f 	and.w	r3, r3, #15
 800c730:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c734:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c738:	9b00      	ldr	r3, [sp, #0]
 800c73a:	05d8      	lsls	r0, r3, #23
 800c73c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c740:	d516      	bpl.n	800c770 <_dtoa_r+0x380>
 800c742:	4bb2      	ldr	r3, [pc, #712]	; (800ca0c <_dtoa_r+0x61c>)
 800c744:	ec51 0b19 	vmov	r0, r1, d9
 800c748:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c74c:	f7f4 f896 	bl	800087c <__aeabi_ddiv>
 800c750:	f007 070f 	and.w	r7, r7, #15
 800c754:	4682      	mov	sl, r0
 800c756:	468b      	mov	fp, r1
 800c758:	2503      	movs	r5, #3
 800c75a:	4eac      	ldr	r6, [pc, #688]	; (800ca0c <_dtoa_r+0x61c>)
 800c75c:	b957      	cbnz	r7, 800c774 <_dtoa_r+0x384>
 800c75e:	4642      	mov	r2, r8
 800c760:	464b      	mov	r3, r9
 800c762:	4650      	mov	r0, sl
 800c764:	4659      	mov	r1, fp
 800c766:	f7f4 f889 	bl	800087c <__aeabi_ddiv>
 800c76a:	4682      	mov	sl, r0
 800c76c:	468b      	mov	fp, r1
 800c76e:	e028      	b.n	800c7c2 <_dtoa_r+0x3d2>
 800c770:	2502      	movs	r5, #2
 800c772:	e7f2      	b.n	800c75a <_dtoa_r+0x36a>
 800c774:	07f9      	lsls	r1, r7, #31
 800c776:	d508      	bpl.n	800c78a <_dtoa_r+0x39a>
 800c778:	4640      	mov	r0, r8
 800c77a:	4649      	mov	r1, r9
 800c77c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c780:	f7f3 ff52 	bl	8000628 <__aeabi_dmul>
 800c784:	3501      	adds	r5, #1
 800c786:	4680      	mov	r8, r0
 800c788:	4689      	mov	r9, r1
 800c78a:	107f      	asrs	r7, r7, #1
 800c78c:	3608      	adds	r6, #8
 800c78e:	e7e5      	b.n	800c75c <_dtoa_r+0x36c>
 800c790:	f000 809b 	beq.w	800c8ca <_dtoa_r+0x4da>
 800c794:	9b00      	ldr	r3, [sp, #0]
 800c796:	4f9d      	ldr	r7, [pc, #628]	; (800ca0c <_dtoa_r+0x61c>)
 800c798:	425e      	negs	r6, r3
 800c79a:	4b9b      	ldr	r3, [pc, #620]	; (800ca08 <_dtoa_r+0x618>)
 800c79c:	f006 020f 	and.w	r2, r6, #15
 800c7a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7a8:	ec51 0b19 	vmov	r0, r1, d9
 800c7ac:	f7f3 ff3c 	bl	8000628 <__aeabi_dmul>
 800c7b0:	1136      	asrs	r6, r6, #4
 800c7b2:	4682      	mov	sl, r0
 800c7b4:	468b      	mov	fp, r1
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	2502      	movs	r5, #2
 800c7ba:	2e00      	cmp	r6, #0
 800c7bc:	d17a      	bne.n	800c8b4 <_dtoa_r+0x4c4>
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d1d3      	bne.n	800c76a <_dtoa_r+0x37a>
 800c7c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	f000 8082 	beq.w	800c8ce <_dtoa_r+0x4de>
 800c7ca:	4b91      	ldr	r3, [pc, #580]	; (800ca10 <_dtoa_r+0x620>)
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	4650      	mov	r0, sl
 800c7d0:	4659      	mov	r1, fp
 800c7d2:	f7f4 f99b 	bl	8000b0c <__aeabi_dcmplt>
 800c7d6:	2800      	cmp	r0, #0
 800c7d8:	d079      	beq.n	800c8ce <_dtoa_r+0x4de>
 800c7da:	9b03      	ldr	r3, [sp, #12]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d076      	beq.n	800c8ce <_dtoa_r+0x4de>
 800c7e0:	9b02      	ldr	r3, [sp, #8]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	dd36      	ble.n	800c854 <_dtoa_r+0x464>
 800c7e6:	9b00      	ldr	r3, [sp, #0]
 800c7e8:	4650      	mov	r0, sl
 800c7ea:	4659      	mov	r1, fp
 800c7ec:	1e5f      	subs	r7, r3, #1
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	4b88      	ldr	r3, [pc, #544]	; (800ca14 <_dtoa_r+0x624>)
 800c7f2:	f7f3 ff19 	bl	8000628 <__aeabi_dmul>
 800c7f6:	9e02      	ldr	r6, [sp, #8]
 800c7f8:	4682      	mov	sl, r0
 800c7fa:	468b      	mov	fp, r1
 800c7fc:	3501      	adds	r5, #1
 800c7fe:	4628      	mov	r0, r5
 800c800:	f7f3 fea8 	bl	8000554 <__aeabi_i2d>
 800c804:	4652      	mov	r2, sl
 800c806:	465b      	mov	r3, fp
 800c808:	f7f3 ff0e 	bl	8000628 <__aeabi_dmul>
 800c80c:	4b82      	ldr	r3, [pc, #520]	; (800ca18 <_dtoa_r+0x628>)
 800c80e:	2200      	movs	r2, #0
 800c810:	f7f3 fd54 	bl	80002bc <__adddf3>
 800c814:	46d0      	mov	r8, sl
 800c816:	46d9      	mov	r9, fp
 800c818:	4682      	mov	sl, r0
 800c81a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c81e:	2e00      	cmp	r6, #0
 800c820:	d158      	bne.n	800c8d4 <_dtoa_r+0x4e4>
 800c822:	4b7e      	ldr	r3, [pc, #504]	; (800ca1c <_dtoa_r+0x62c>)
 800c824:	2200      	movs	r2, #0
 800c826:	4640      	mov	r0, r8
 800c828:	4649      	mov	r1, r9
 800c82a:	f7f3 fd45 	bl	80002b8 <__aeabi_dsub>
 800c82e:	4652      	mov	r2, sl
 800c830:	465b      	mov	r3, fp
 800c832:	4680      	mov	r8, r0
 800c834:	4689      	mov	r9, r1
 800c836:	f7f4 f987 	bl	8000b48 <__aeabi_dcmpgt>
 800c83a:	2800      	cmp	r0, #0
 800c83c:	f040 8295 	bne.w	800cd6a <_dtoa_r+0x97a>
 800c840:	4652      	mov	r2, sl
 800c842:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c846:	4640      	mov	r0, r8
 800c848:	4649      	mov	r1, r9
 800c84a:	f7f4 f95f 	bl	8000b0c <__aeabi_dcmplt>
 800c84e:	2800      	cmp	r0, #0
 800c850:	f040 8289 	bne.w	800cd66 <_dtoa_r+0x976>
 800c854:	ec5b ab19 	vmov	sl, fp, d9
 800c858:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	f2c0 8148 	blt.w	800caf0 <_dtoa_r+0x700>
 800c860:	9a00      	ldr	r2, [sp, #0]
 800c862:	2a0e      	cmp	r2, #14
 800c864:	f300 8144 	bgt.w	800caf0 <_dtoa_r+0x700>
 800c868:	4b67      	ldr	r3, [pc, #412]	; (800ca08 <_dtoa_r+0x618>)
 800c86a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c86e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c874:	2b00      	cmp	r3, #0
 800c876:	f280 80d5 	bge.w	800ca24 <_dtoa_r+0x634>
 800c87a:	9b03      	ldr	r3, [sp, #12]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	f300 80d1 	bgt.w	800ca24 <_dtoa_r+0x634>
 800c882:	f040 826f 	bne.w	800cd64 <_dtoa_r+0x974>
 800c886:	4b65      	ldr	r3, [pc, #404]	; (800ca1c <_dtoa_r+0x62c>)
 800c888:	2200      	movs	r2, #0
 800c88a:	4640      	mov	r0, r8
 800c88c:	4649      	mov	r1, r9
 800c88e:	f7f3 fecb 	bl	8000628 <__aeabi_dmul>
 800c892:	4652      	mov	r2, sl
 800c894:	465b      	mov	r3, fp
 800c896:	f7f4 f94d 	bl	8000b34 <__aeabi_dcmpge>
 800c89a:	9e03      	ldr	r6, [sp, #12]
 800c89c:	4637      	mov	r7, r6
 800c89e:	2800      	cmp	r0, #0
 800c8a0:	f040 8245 	bne.w	800cd2e <_dtoa_r+0x93e>
 800c8a4:	9d01      	ldr	r5, [sp, #4]
 800c8a6:	2331      	movs	r3, #49	; 0x31
 800c8a8:	f805 3b01 	strb.w	r3, [r5], #1
 800c8ac:	9b00      	ldr	r3, [sp, #0]
 800c8ae:	3301      	adds	r3, #1
 800c8b0:	9300      	str	r3, [sp, #0]
 800c8b2:	e240      	b.n	800cd36 <_dtoa_r+0x946>
 800c8b4:	07f2      	lsls	r2, r6, #31
 800c8b6:	d505      	bpl.n	800c8c4 <_dtoa_r+0x4d4>
 800c8b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8bc:	f7f3 feb4 	bl	8000628 <__aeabi_dmul>
 800c8c0:	3501      	adds	r5, #1
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	1076      	asrs	r6, r6, #1
 800c8c6:	3708      	adds	r7, #8
 800c8c8:	e777      	b.n	800c7ba <_dtoa_r+0x3ca>
 800c8ca:	2502      	movs	r5, #2
 800c8cc:	e779      	b.n	800c7c2 <_dtoa_r+0x3d2>
 800c8ce:	9f00      	ldr	r7, [sp, #0]
 800c8d0:	9e03      	ldr	r6, [sp, #12]
 800c8d2:	e794      	b.n	800c7fe <_dtoa_r+0x40e>
 800c8d4:	9901      	ldr	r1, [sp, #4]
 800c8d6:	4b4c      	ldr	r3, [pc, #304]	; (800ca08 <_dtoa_r+0x618>)
 800c8d8:	4431      	add	r1, r6
 800c8da:	910d      	str	r1, [sp, #52]	; 0x34
 800c8dc:	9908      	ldr	r1, [sp, #32]
 800c8de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c8e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c8e6:	2900      	cmp	r1, #0
 800c8e8:	d043      	beq.n	800c972 <_dtoa_r+0x582>
 800c8ea:	494d      	ldr	r1, [pc, #308]	; (800ca20 <_dtoa_r+0x630>)
 800c8ec:	2000      	movs	r0, #0
 800c8ee:	f7f3 ffc5 	bl	800087c <__aeabi_ddiv>
 800c8f2:	4652      	mov	r2, sl
 800c8f4:	465b      	mov	r3, fp
 800c8f6:	f7f3 fcdf 	bl	80002b8 <__aeabi_dsub>
 800c8fa:	9d01      	ldr	r5, [sp, #4]
 800c8fc:	4682      	mov	sl, r0
 800c8fe:	468b      	mov	fp, r1
 800c900:	4649      	mov	r1, r9
 800c902:	4640      	mov	r0, r8
 800c904:	f7f4 f940 	bl	8000b88 <__aeabi_d2iz>
 800c908:	4606      	mov	r6, r0
 800c90a:	f7f3 fe23 	bl	8000554 <__aeabi_i2d>
 800c90e:	4602      	mov	r2, r0
 800c910:	460b      	mov	r3, r1
 800c912:	4640      	mov	r0, r8
 800c914:	4649      	mov	r1, r9
 800c916:	f7f3 fccf 	bl	80002b8 <__aeabi_dsub>
 800c91a:	3630      	adds	r6, #48	; 0x30
 800c91c:	f805 6b01 	strb.w	r6, [r5], #1
 800c920:	4652      	mov	r2, sl
 800c922:	465b      	mov	r3, fp
 800c924:	4680      	mov	r8, r0
 800c926:	4689      	mov	r9, r1
 800c928:	f7f4 f8f0 	bl	8000b0c <__aeabi_dcmplt>
 800c92c:	2800      	cmp	r0, #0
 800c92e:	d163      	bne.n	800c9f8 <_dtoa_r+0x608>
 800c930:	4642      	mov	r2, r8
 800c932:	464b      	mov	r3, r9
 800c934:	4936      	ldr	r1, [pc, #216]	; (800ca10 <_dtoa_r+0x620>)
 800c936:	2000      	movs	r0, #0
 800c938:	f7f3 fcbe 	bl	80002b8 <__aeabi_dsub>
 800c93c:	4652      	mov	r2, sl
 800c93e:	465b      	mov	r3, fp
 800c940:	f7f4 f8e4 	bl	8000b0c <__aeabi_dcmplt>
 800c944:	2800      	cmp	r0, #0
 800c946:	f040 80b5 	bne.w	800cab4 <_dtoa_r+0x6c4>
 800c94a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c94c:	429d      	cmp	r5, r3
 800c94e:	d081      	beq.n	800c854 <_dtoa_r+0x464>
 800c950:	4b30      	ldr	r3, [pc, #192]	; (800ca14 <_dtoa_r+0x624>)
 800c952:	2200      	movs	r2, #0
 800c954:	4650      	mov	r0, sl
 800c956:	4659      	mov	r1, fp
 800c958:	f7f3 fe66 	bl	8000628 <__aeabi_dmul>
 800c95c:	4b2d      	ldr	r3, [pc, #180]	; (800ca14 <_dtoa_r+0x624>)
 800c95e:	4682      	mov	sl, r0
 800c960:	468b      	mov	fp, r1
 800c962:	4640      	mov	r0, r8
 800c964:	4649      	mov	r1, r9
 800c966:	2200      	movs	r2, #0
 800c968:	f7f3 fe5e 	bl	8000628 <__aeabi_dmul>
 800c96c:	4680      	mov	r8, r0
 800c96e:	4689      	mov	r9, r1
 800c970:	e7c6      	b.n	800c900 <_dtoa_r+0x510>
 800c972:	4650      	mov	r0, sl
 800c974:	4659      	mov	r1, fp
 800c976:	f7f3 fe57 	bl	8000628 <__aeabi_dmul>
 800c97a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c97c:	9d01      	ldr	r5, [sp, #4]
 800c97e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c980:	4682      	mov	sl, r0
 800c982:	468b      	mov	fp, r1
 800c984:	4649      	mov	r1, r9
 800c986:	4640      	mov	r0, r8
 800c988:	f7f4 f8fe 	bl	8000b88 <__aeabi_d2iz>
 800c98c:	4606      	mov	r6, r0
 800c98e:	f7f3 fde1 	bl	8000554 <__aeabi_i2d>
 800c992:	3630      	adds	r6, #48	; 0x30
 800c994:	4602      	mov	r2, r0
 800c996:	460b      	mov	r3, r1
 800c998:	4640      	mov	r0, r8
 800c99a:	4649      	mov	r1, r9
 800c99c:	f7f3 fc8c 	bl	80002b8 <__aeabi_dsub>
 800c9a0:	f805 6b01 	strb.w	r6, [r5], #1
 800c9a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c9a6:	429d      	cmp	r5, r3
 800c9a8:	4680      	mov	r8, r0
 800c9aa:	4689      	mov	r9, r1
 800c9ac:	f04f 0200 	mov.w	r2, #0
 800c9b0:	d124      	bne.n	800c9fc <_dtoa_r+0x60c>
 800c9b2:	4b1b      	ldr	r3, [pc, #108]	; (800ca20 <_dtoa_r+0x630>)
 800c9b4:	4650      	mov	r0, sl
 800c9b6:	4659      	mov	r1, fp
 800c9b8:	f7f3 fc80 	bl	80002bc <__adddf3>
 800c9bc:	4602      	mov	r2, r0
 800c9be:	460b      	mov	r3, r1
 800c9c0:	4640      	mov	r0, r8
 800c9c2:	4649      	mov	r1, r9
 800c9c4:	f7f4 f8c0 	bl	8000b48 <__aeabi_dcmpgt>
 800c9c8:	2800      	cmp	r0, #0
 800c9ca:	d173      	bne.n	800cab4 <_dtoa_r+0x6c4>
 800c9cc:	4652      	mov	r2, sl
 800c9ce:	465b      	mov	r3, fp
 800c9d0:	4913      	ldr	r1, [pc, #76]	; (800ca20 <_dtoa_r+0x630>)
 800c9d2:	2000      	movs	r0, #0
 800c9d4:	f7f3 fc70 	bl	80002b8 <__aeabi_dsub>
 800c9d8:	4602      	mov	r2, r0
 800c9da:	460b      	mov	r3, r1
 800c9dc:	4640      	mov	r0, r8
 800c9de:	4649      	mov	r1, r9
 800c9e0:	f7f4 f894 	bl	8000b0c <__aeabi_dcmplt>
 800c9e4:	2800      	cmp	r0, #0
 800c9e6:	f43f af35 	beq.w	800c854 <_dtoa_r+0x464>
 800c9ea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c9ec:	1e6b      	subs	r3, r5, #1
 800c9ee:	930f      	str	r3, [sp, #60]	; 0x3c
 800c9f0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c9f4:	2b30      	cmp	r3, #48	; 0x30
 800c9f6:	d0f8      	beq.n	800c9ea <_dtoa_r+0x5fa>
 800c9f8:	9700      	str	r7, [sp, #0]
 800c9fa:	e049      	b.n	800ca90 <_dtoa_r+0x6a0>
 800c9fc:	4b05      	ldr	r3, [pc, #20]	; (800ca14 <_dtoa_r+0x624>)
 800c9fe:	f7f3 fe13 	bl	8000628 <__aeabi_dmul>
 800ca02:	4680      	mov	r8, r0
 800ca04:	4689      	mov	r9, r1
 800ca06:	e7bd      	b.n	800c984 <_dtoa_r+0x594>
 800ca08:	0800f838 	.word	0x0800f838
 800ca0c:	0800f810 	.word	0x0800f810
 800ca10:	3ff00000 	.word	0x3ff00000
 800ca14:	40240000 	.word	0x40240000
 800ca18:	401c0000 	.word	0x401c0000
 800ca1c:	40140000 	.word	0x40140000
 800ca20:	3fe00000 	.word	0x3fe00000
 800ca24:	9d01      	ldr	r5, [sp, #4]
 800ca26:	4656      	mov	r6, sl
 800ca28:	465f      	mov	r7, fp
 800ca2a:	4642      	mov	r2, r8
 800ca2c:	464b      	mov	r3, r9
 800ca2e:	4630      	mov	r0, r6
 800ca30:	4639      	mov	r1, r7
 800ca32:	f7f3 ff23 	bl	800087c <__aeabi_ddiv>
 800ca36:	f7f4 f8a7 	bl	8000b88 <__aeabi_d2iz>
 800ca3a:	4682      	mov	sl, r0
 800ca3c:	f7f3 fd8a 	bl	8000554 <__aeabi_i2d>
 800ca40:	4642      	mov	r2, r8
 800ca42:	464b      	mov	r3, r9
 800ca44:	f7f3 fdf0 	bl	8000628 <__aeabi_dmul>
 800ca48:	4602      	mov	r2, r0
 800ca4a:	460b      	mov	r3, r1
 800ca4c:	4630      	mov	r0, r6
 800ca4e:	4639      	mov	r1, r7
 800ca50:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ca54:	f7f3 fc30 	bl	80002b8 <__aeabi_dsub>
 800ca58:	f805 6b01 	strb.w	r6, [r5], #1
 800ca5c:	9e01      	ldr	r6, [sp, #4]
 800ca5e:	9f03      	ldr	r7, [sp, #12]
 800ca60:	1bae      	subs	r6, r5, r6
 800ca62:	42b7      	cmp	r7, r6
 800ca64:	4602      	mov	r2, r0
 800ca66:	460b      	mov	r3, r1
 800ca68:	d135      	bne.n	800cad6 <_dtoa_r+0x6e6>
 800ca6a:	f7f3 fc27 	bl	80002bc <__adddf3>
 800ca6e:	4642      	mov	r2, r8
 800ca70:	464b      	mov	r3, r9
 800ca72:	4606      	mov	r6, r0
 800ca74:	460f      	mov	r7, r1
 800ca76:	f7f4 f867 	bl	8000b48 <__aeabi_dcmpgt>
 800ca7a:	b9d0      	cbnz	r0, 800cab2 <_dtoa_r+0x6c2>
 800ca7c:	4642      	mov	r2, r8
 800ca7e:	464b      	mov	r3, r9
 800ca80:	4630      	mov	r0, r6
 800ca82:	4639      	mov	r1, r7
 800ca84:	f7f4 f838 	bl	8000af8 <__aeabi_dcmpeq>
 800ca88:	b110      	cbz	r0, 800ca90 <_dtoa_r+0x6a0>
 800ca8a:	f01a 0f01 	tst.w	sl, #1
 800ca8e:	d110      	bne.n	800cab2 <_dtoa_r+0x6c2>
 800ca90:	4620      	mov	r0, r4
 800ca92:	ee18 1a10 	vmov	r1, s16
 800ca96:	f000 fe75 	bl	800d784 <_Bfree>
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	9800      	ldr	r0, [sp, #0]
 800ca9e:	702b      	strb	r3, [r5, #0]
 800caa0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800caa2:	3001      	adds	r0, #1
 800caa4:	6018      	str	r0, [r3, #0]
 800caa6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	f43f acf1 	beq.w	800c490 <_dtoa_r+0xa0>
 800caae:	601d      	str	r5, [r3, #0]
 800cab0:	e4ee      	b.n	800c490 <_dtoa_r+0xa0>
 800cab2:	9f00      	ldr	r7, [sp, #0]
 800cab4:	462b      	mov	r3, r5
 800cab6:	461d      	mov	r5, r3
 800cab8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cabc:	2a39      	cmp	r2, #57	; 0x39
 800cabe:	d106      	bne.n	800cace <_dtoa_r+0x6de>
 800cac0:	9a01      	ldr	r2, [sp, #4]
 800cac2:	429a      	cmp	r2, r3
 800cac4:	d1f7      	bne.n	800cab6 <_dtoa_r+0x6c6>
 800cac6:	9901      	ldr	r1, [sp, #4]
 800cac8:	2230      	movs	r2, #48	; 0x30
 800caca:	3701      	adds	r7, #1
 800cacc:	700a      	strb	r2, [r1, #0]
 800cace:	781a      	ldrb	r2, [r3, #0]
 800cad0:	3201      	adds	r2, #1
 800cad2:	701a      	strb	r2, [r3, #0]
 800cad4:	e790      	b.n	800c9f8 <_dtoa_r+0x608>
 800cad6:	4ba6      	ldr	r3, [pc, #664]	; (800cd70 <_dtoa_r+0x980>)
 800cad8:	2200      	movs	r2, #0
 800cada:	f7f3 fda5 	bl	8000628 <__aeabi_dmul>
 800cade:	2200      	movs	r2, #0
 800cae0:	2300      	movs	r3, #0
 800cae2:	4606      	mov	r6, r0
 800cae4:	460f      	mov	r7, r1
 800cae6:	f7f4 f807 	bl	8000af8 <__aeabi_dcmpeq>
 800caea:	2800      	cmp	r0, #0
 800caec:	d09d      	beq.n	800ca2a <_dtoa_r+0x63a>
 800caee:	e7cf      	b.n	800ca90 <_dtoa_r+0x6a0>
 800caf0:	9a08      	ldr	r2, [sp, #32]
 800caf2:	2a00      	cmp	r2, #0
 800caf4:	f000 80d7 	beq.w	800cca6 <_dtoa_r+0x8b6>
 800caf8:	9a06      	ldr	r2, [sp, #24]
 800cafa:	2a01      	cmp	r2, #1
 800cafc:	f300 80ba 	bgt.w	800cc74 <_dtoa_r+0x884>
 800cb00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb02:	2a00      	cmp	r2, #0
 800cb04:	f000 80b2 	beq.w	800cc6c <_dtoa_r+0x87c>
 800cb08:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cb0c:	9e07      	ldr	r6, [sp, #28]
 800cb0e:	9d04      	ldr	r5, [sp, #16]
 800cb10:	9a04      	ldr	r2, [sp, #16]
 800cb12:	441a      	add	r2, r3
 800cb14:	9204      	str	r2, [sp, #16]
 800cb16:	9a05      	ldr	r2, [sp, #20]
 800cb18:	2101      	movs	r1, #1
 800cb1a:	441a      	add	r2, r3
 800cb1c:	4620      	mov	r0, r4
 800cb1e:	9205      	str	r2, [sp, #20]
 800cb20:	f000 ff32 	bl	800d988 <__i2b>
 800cb24:	4607      	mov	r7, r0
 800cb26:	2d00      	cmp	r5, #0
 800cb28:	dd0c      	ble.n	800cb44 <_dtoa_r+0x754>
 800cb2a:	9b05      	ldr	r3, [sp, #20]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	dd09      	ble.n	800cb44 <_dtoa_r+0x754>
 800cb30:	42ab      	cmp	r3, r5
 800cb32:	9a04      	ldr	r2, [sp, #16]
 800cb34:	bfa8      	it	ge
 800cb36:	462b      	movge	r3, r5
 800cb38:	1ad2      	subs	r2, r2, r3
 800cb3a:	9204      	str	r2, [sp, #16]
 800cb3c:	9a05      	ldr	r2, [sp, #20]
 800cb3e:	1aed      	subs	r5, r5, r3
 800cb40:	1ad3      	subs	r3, r2, r3
 800cb42:	9305      	str	r3, [sp, #20]
 800cb44:	9b07      	ldr	r3, [sp, #28]
 800cb46:	b31b      	cbz	r3, 800cb90 <_dtoa_r+0x7a0>
 800cb48:	9b08      	ldr	r3, [sp, #32]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	f000 80af 	beq.w	800ccae <_dtoa_r+0x8be>
 800cb50:	2e00      	cmp	r6, #0
 800cb52:	dd13      	ble.n	800cb7c <_dtoa_r+0x78c>
 800cb54:	4639      	mov	r1, r7
 800cb56:	4632      	mov	r2, r6
 800cb58:	4620      	mov	r0, r4
 800cb5a:	f000 ffd5 	bl	800db08 <__pow5mult>
 800cb5e:	ee18 2a10 	vmov	r2, s16
 800cb62:	4601      	mov	r1, r0
 800cb64:	4607      	mov	r7, r0
 800cb66:	4620      	mov	r0, r4
 800cb68:	f000 ff24 	bl	800d9b4 <__multiply>
 800cb6c:	ee18 1a10 	vmov	r1, s16
 800cb70:	4680      	mov	r8, r0
 800cb72:	4620      	mov	r0, r4
 800cb74:	f000 fe06 	bl	800d784 <_Bfree>
 800cb78:	ee08 8a10 	vmov	s16, r8
 800cb7c:	9b07      	ldr	r3, [sp, #28]
 800cb7e:	1b9a      	subs	r2, r3, r6
 800cb80:	d006      	beq.n	800cb90 <_dtoa_r+0x7a0>
 800cb82:	ee18 1a10 	vmov	r1, s16
 800cb86:	4620      	mov	r0, r4
 800cb88:	f000 ffbe 	bl	800db08 <__pow5mult>
 800cb8c:	ee08 0a10 	vmov	s16, r0
 800cb90:	2101      	movs	r1, #1
 800cb92:	4620      	mov	r0, r4
 800cb94:	f000 fef8 	bl	800d988 <__i2b>
 800cb98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	4606      	mov	r6, r0
 800cb9e:	f340 8088 	ble.w	800ccb2 <_dtoa_r+0x8c2>
 800cba2:	461a      	mov	r2, r3
 800cba4:	4601      	mov	r1, r0
 800cba6:	4620      	mov	r0, r4
 800cba8:	f000 ffae 	bl	800db08 <__pow5mult>
 800cbac:	9b06      	ldr	r3, [sp, #24]
 800cbae:	2b01      	cmp	r3, #1
 800cbb0:	4606      	mov	r6, r0
 800cbb2:	f340 8081 	ble.w	800ccb8 <_dtoa_r+0x8c8>
 800cbb6:	f04f 0800 	mov.w	r8, #0
 800cbba:	6933      	ldr	r3, [r6, #16]
 800cbbc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cbc0:	6918      	ldr	r0, [r3, #16]
 800cbc2:	f000 fe91 	bl	800d8e8 <__hi0bits>
 800cbc6:	f1c0 0020 	rsb	r0, r0, #32
 800cbca:	9b05      	ldr	r3, [sp, #20]
 800cbcc:	4418      	add	r0, r3
 800cbce:	f010 001f 	ands.w	r0, r0, #31
 800cbd2:	f000 8092 	beq.w	800ccfa <_dtoa_r+0x90a>
 800cbd6:	f1c0 0320 	rsb	r3, r0, #32
 800cbda:	2b04      	cmp	r3, #4
 800cbdc:	f340 808a 	ble.w	800ccf4 <_dtoa_r+0x904>
 800cbe0:	f1c0 001c 	rsb	r0, r0, #28
 800cbe4:	9b04      	ldr	r3, [sp, #16]
 800cbe6:	4403      	add	r3, r0
 800cbe8:	9304      	str	r3, [sp, #16]
 800cbea:	9b05      	ldr	r3, [sp, #20]
 800cbec:	4403      	add	r3, r0
 800cbee:	4405      	add	r5, r0
 800cbf0:	9305      	str	r3, [sp, #20]
 800cbf2:	9b04      	ldr	r3, [sp, #16]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	dd07      	ble.n	800cc08 <_dtoa_r+0x818>
 800cbf8:	ee18 1a10 	vmov	r1, s16
 800cbfc:	461a      	mov	r2, r3
 800cbfe:	4620      	mov	r0, r4
 800cc00:	f000 ffdc 	bl	800dbbc <__lshift>
 800cc04:	ee08 0a10 	vmov	s16, r0
 800cc08:	9b05      	ldr	r3, [sp, #20]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	dd05      	ble.n	800cc1a <_dtoa_r+0x82a>
 800cc0e:	4631      	mov	r1, r6
 800cc10:	461a      	mov	r2, r3
 800cc12:	4620      	mov	r0, r4
 800cc14:	f000 ffd2 	bl	800dbbc <__lshift>
 800cc18:	4606      	mov	r6, r0
 800cc1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d06e      	beq.n	800ccfe <_dtoa_r+0x90e>
 800cc20:	ee18 0a10 	vmov	r0, s16
 800cc24:	4631      	mov	r1, r6
 800cc26:	f001 f839 	bl	800dc9c <__mcmp>
 800cc2a:	2800      	cmp	r0, #0
 800cc2c:	da67      	bge.n	800ccfe <_dtoa_r+0x90e>
 800cc2e:	9b00      	ldr	r3, [sp, #0]
 800cc30:	3b01      	subs	r3, #1
 800cc32:	ee18 1a10 	vmov	r1, s16
 800cc36:	9300      	str	r3, [sp, #0]
 800cc38:	220a      	movs	r2, #10
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	4620      	mov	r0, r4
 800cc3e:	f000 fdc3 	bl	800d7c8 <__multadd>
 800cc42:	9b08      	ldr	r3, [sp, #32]
 800cc44:	ee08 0a10 	vmov	s16, r0
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	f000 81b1 	beq.w	800cfb0 <_dtoa_r+0xbc0>
 800cc4e:	2300      	movs	r3, #0
 800cc50:	4639      	mov	r1, r7
 800cc52:	220a      	movs	r2, #10
 800cc54:	4620      	mov	r0, r4
 800cc56:	f000 fdb7 	bl	800d7c8 <__multadd>
 800cc5a:	9b02      	ldr	r3, [sp, #8]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	4607      	mov	r7, r0
 800cc60:	f300 808e 	bgt.w	800cd80 <_dtoa_r+0x990>
 800cc64:	9b06      	ldr	r3, [sp, #24]
 800cc66:	2b02      	cmp	r3, #2
 800cc68:	dc51      	bgt.n	800cd0e <_dtoa_r+0x91e>
 800cc6a:	e089      	b.n	800cd80 <_dtoa_r+0x990>
 800cc6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cc6e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cc72:	e74b      	b.n	800cb0c <_dtoa_r+0x71c>
 800cc74:	9b03      	ldr	r3, [sp, #12]
 800cc76:	1e5e      	subs	r6, r3, #1
 800cc78:	9b07      	ldr	r3, [sp, #28]
 800cc7a:	42b3      	cmp	r3, r6
 800cc7c:	bfbf      	itttt	lt
 800cc7e:	9b07      	ldrlt	r3, [sp, #28]
 800cc80:	9607      	strlt	r6, [sp, #28]
 800cc82:	1af2      	sublt	r2, r6, r3
 800cc84:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800cc86:	bfb6      	itet	lt
 800cc88:	189b      	addlt	r3, r3, r2
 800cc8a:	1b9e      	subge	r6, r3, r6
 800cc8c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800cc8e:	9b03      	ldr	r3, [sp, #12]
 800cc90:	bfb8      	it	lt
 800cc92:	2600      	movlt	r6, #0
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	bfb7      	itett	lt
 800cc98:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800cc9c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800cca0:	1a9d      	sublt	r5, r3, r2
 800cca2:	2300      	movlt	r3, #0
 800cca4:	e734      	b.n	800cb10 <_dtoa_r+0x720>
 800cca6:	9e07      	ldr	r6, [sp, #28]
 800cca8:	9d04      	ldr	r5, [sp, #16]
 800ccaa:	9f08      	ldr	r7, [sp, #32]
 800ccac:	e73b      	b.n	800cb26 <_dtoa_r+0x736>
 800ccae:	9a07      	ldr	r2, [sp, #28]
 800ccb0:	e767      	b.n	800cb82 <_dtoa_r+0x792>
 800ccb2:	9b06      	ldr	r3, [sp, #24]
 800ccb4:	2b01      	cmp	r3, #1
 800ccb6:	dc18      	bgt.n	800ccea <_dtoa_r+0x8fa>
 800ccb8:	f1ba 0f00 	cmp.w	sl, #0
 800ccbc:	d115      	bne.n	800ccea <_dtoa_r+0x8fa>
 800ccbe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ccc2:	b993      	cbnz	r3, 800ccea <_dtoa_r+0x8fa>
 800ccc4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ccc8:	0d1b      	lsrs	r3, r3, #20
 800ccca:	051b      	lsls	r3, r3, #20
 800cccc:	b183      	cbz	r3, 800ccf0 <_dtoa_r+0x900>
 800ccce:	9b04      	ldr	r3, [sp, #16]
 800ccd0:	3301      	adds	r3, #1
 800ccd2:	9304      	str	r3, [sp, #16]
 800ccd4:	9b05      	ldr	r3, [sp, #20]
 800ccd6:	3301      	adds	r3, #1
 800ccd8:	9305      	str	r3, [sp, #20]
 800ccda:	f04f 0801 	mov.w	r8, #1
 800ccde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	f47f af6a 	bne.w	800cbba <_dtoa_r+0x7ca>
 800cce6:	2001      	movs	r0, #1
 800cce8:	e76f      	b.n	800cbca <_dtoa_r+0x7da>
 800ccea:	f04f 0800 	mov.w	r8, #0
 800ccee:	e7f6      	b.n	800ccde <_dtoa_r+0x8ee>
 800ccf0:	4698      	mov	r8, r3
 800ccf2:	e7f4      	b.n	800ccde <_dtoa_r+0x8ee>
 800ccf4:	f43f af7d 	beq.w	800cbf2 <_dtoa_r+0x802>
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	301c      	adds	r0, #28
 800ccfc:	e772      	b.n	800cbe4 <_dtoa_r+0x7f4>
 800ccfe:	9b03      	ldr	r3, [sp, #12]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	dc37      	bgt.n	800cd74 <_dtoa_r+0x984>
 800cd04:	9b06      	ldr	r3, [sp, #24]
 800cd06:	2b02      	cmp	r3, #2
 800cd08:	dd34      	ble.n	800cd74 <_dtoa_r+0x984>
 800cd0a:	9b03      	ldr	r3, [sp, #12]
 800cd0c:	9302      	str	r3, [sp, #8]
 800cd0e:	9b02      	ldr	r3, [sp, #8]
 800cd10:	b96b      	cbnz	r3, 800cd2e <_dtoa_r+0x93e>
 800cd12:	4631      	mov	r1, r6
 800cd14:	2205      	movs	r2, #5
 800cd16:	4620      	mov	r0, r4
 800cd18:	f000 fd56 	bl	800d7c8 <__multadd>
 800cd1c:	4601      	mov	r1, r0
 800cd1e:	4606      	mov	r6, r0
 800cd20:	ee18 0a10 	vmov	r0, s16
 800cd24:	f000 ffba 	bl	800dc9c <__mcmp>
 800cd28:	2800      	cmp	r0, #0
 800cd2a:	f73f adbb 	bgt.w	800c8a4 <_dtoa_r+0x4b4>
 800cd2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd30:	9d01      	ldr	r5, [sp, #4]
 800cd32:	43db      	mvns	r3, r3
 800cd34:	9300      	str	r3, [sp, #0]
 800cd36:	f04f 0800 	mov.w	r8, #0
 800cd3a:	4631      	mov	r1, r6
 800cd3c:	4620      	mov	r0, r4
 800cd3e:	f000 fd21 	bl	800d784 <_Bfree>
 800cd42:	2f00      	cmp	r7, #0
 800cd44:	f43f aea4 	beq.w	800ca90 <_dtoa_r+0x6a0>
 800cd48:	f1b8 0f00 	cmp.w	r8, #0
 800cd4c:	d005      	beq.n	800cd5a <_dtoa_r+0x96a>
 800cd4e:	45b8      	cmp	r8, r7
 800cd50:	d003      	beq.n	800cd5a <_dtoa_r+0x96a>
 800cd52:	4641      	mov	r1, r8
 800cd54:	4620      	mov	r0, r4
 800cd56:	f000 fd15 	bl	800d784 <_Bfree>
 800cd5a:	4639      	mov	r1, r7
 800cd5c:	4620      	mov	r0, r4
 800cd5e:	f000 fd11 	bl	800d784 <_Bfree>
 800cd62:	e695      	b.n	800ca90 <_dtoa_r+0x6a0>
 800cd64:	2600      	movs	r6, #0
 800cd66:	4637      	mov	r7, r6
 800cd68:	e7e1      	b.n	800cd2e <_dtoa_r+0x93e>
 800cd6a:	9700      	str	r7, [sp, #0]
 800cd6c:	4637      	mov	r7, r6
 800cd6e:	e599      	b.n	800c8a4 <_dtoa_r+0x4b4>
 800cd70:	40240000 	.word	0x40240000
 800cd74:	9b08      	ldr	r3, [sp, #32]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	f000 80ca 	beq.w	800cf10 <_dtoa_r+0xb20>
 800cd7c:	9b03      	ldr	r3, [sp, #12]
 800cd7e:	9302      	str	r3, [sp, #8]
 800cd80:	2d00      	cmp	r5, #0
 800cd82:	dd05      	ble.n	800cd90 <_dtoa_r+0x9a0>
 800cd84:	4639      	mov	r1, r7
 800cd86:	462a      	mov	r2, r5
 800cd88:	4620      	mov	r0, r4
 800cd8a:	f000 ff17 	bl	800dbbc <__lshift>
 800cd8e:	4607      	mov	r7, r0
 800cd90:	f1b8 0f00 	cmp.w	r8, #0
 800cd94:	d05b      	beq.n	800ce4e <_dtoa_r+0xa5e>
 800cd96:	6879      	ldr	r1, [r7, #4]
 800cd98:	4620      	mov	r0, r4
 800cd9a:	f000 fcb3 	bl	800d704 <_Balloc>
 800cd9e:	4605      	mov	r5, r0
 800cda0:	b928      	cbnz	r0, 800cdae <_dtoa_r+0x9be>
 800cda2:	4b87      	ldr	r3, [pc, #540]	; (800cfc0 <_dtoa_r+0xbd0>)
 800cda4:	4602      	mov	r2, r0
 800cda6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cdaa:	f7ff bb3b 	b.w	800c424 <_dtoa_r+0x34>
 800cdae:	693a      	ldr	r2, [r7, #16]
 800cdb0:	3202      	adds	r2, #2
 800cdb2:	0092      	lsls	r2, r2, #2
 800cdb4:	f107 010c 	add.w	r1, r7, #12
 800cdb8:	300c      	adds	r0, #12
 800cdba:	f000 fc95 	bl	800d6e8 <memcpy>
 800cdbe:	2201      	movs	r2, #1
 800cdc0:	4629      	mov	r1, r5
 800cdc2:	4620      	mov	r0, r4
 800cdc4:	f000 fefa 	bl	800dbbc <__lshift>
 800cdc8:	9b01      	ldr	r3, [sp, #4]
 800cdca:	f103 0901 	add.w	r9, r3, #1
 800cdce:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800cdd2:	4413      	add	r3, r2
 800cdd4:	9305      	str	r3, [sp, #20]
 800cdd6:	f00a 0301 	and.w	r3, sl, #1
 800cdda:	46b8      	mov	r8, r7
 800cddc:	9304      	str	r3, [sp, #16]
 800cdde:	4607      	mov	r7, r0
 800cde0:	4631      	mov	r1, r6
 800cde2:	ee18 0a10 	vmov	r0, s16
 800cde6:	f7ff fa77 	bl	800c2d8 <quorem>
 800cdea:	4641      	mov	r1, r8
 800cdec:	9002      	str	r0, [sp, #8]
 800cdee:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cdf2:	ee18 0a10 	vmov	r0, s16
 800cdf6:	f000 ff51 	bl	800dc9c <__mcmp>
 800cdfa:	463a      	mov	r2, r7
 800cdfc:	9003      	str	r0, [sp, #12]
 800cdfe:	4631      	mov	r1, r6
 800ce00:	4620      	mov	r0, r4
 800ce02:	f000 ff67 	bl	800dcd4 <__mdiff>
 800ce06:	68c2      	ldr	r2, [r0, #12]
 800ce08:	f109 3bff 	add.w	fp, r9, #4294967295
 800ce0c:	4605      	mov	r5, r0
 800ce0e:	bb02      	cbnz	r2, 800ce52 <_dtoa_r+0xa62>
 800ce10:	4601      	mov	r1, r0
 800ce12:	ee18 0a10 	vmov	r0, s16
 800ce16:	f000 ff41 	bl	800dc9c <__mcmp>
 800ce1a:	4602      	mov	r2, r0
 800ce1c:	4629      	mov	r1, r5
 800ce1e:	4620      	mov	r0, r4
 800ce20:	9207      	str	r2, [sp, #28]
 800ce22:	f000 fcaf 	bl	800d784 <_Bfree>
 800ce26:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ce2a:	ea43 0102 	orr.w	r1, r3, r2
 800ce2e:	9b04      	ldr	r3, [sp, #16]
 800ce30:	430b      	orrs	r3, r1
 800ce32:	464d      	mov	r5, r9
 800ce34:	d10f      	bne.n	800ce56 <_dtoa_r+0xa66>
 800ce36:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ce3a:	d02a      	beq.n	800ce92 <_dtoa_r+0xaa2>
 800ce3c:	9b03      	ldr	r3, [sp, #12]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	dd02      	ble.n	800ce48 <_dtoa_r+0xa58>
 800ce42:	9b02      	ldr	r3, [sp, #8]
 800ce44:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ce48:	f88b a000 	strb.w	sl, [fp]
 800ce4c:	e775      	b.n	800cd3a <_dtoa_r+0x94a>
 800ce4e:	4638      	mov	r0, r7
 800ce50:	e7ba      	b.n	800cdc8 <_dtoa_r+0x9d8>
 800ce52:	2201      	movs	r2, #1
 800ce54:	e7e2      	b.n	800ce1c <_dtoa_r+0xa2c>
 800ce56:	9b03      	ldr	r3, [sp, #12]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	db04      	blt.n	800ce66 <_dtoa_r+0xa76>
 800ce5c:	9906      	ldr	r1, [sp, #24]
 800ce5e:	430b      	orrs	r3, r1
 800ce60:	9904      	ldr	r1, [sp, #16]
 800ce62:	430b      	orrs	r3, r1
 800ce64:	d122      	bne.n	800ceac <_dtoa_r+0xabc>
 800ce66:	2a00      	cmp	r2, #0
 800ce68:	ddee      	ble.n	800ce48 <_dtoa_r+0xa58>
 800ce6a:	ee18 1a10 	vmov	r1, s16
 800ce6e:	2201      	movs	r2, #1
 800ce70:	4620      	mov	r0, r4
 800ce72:	f000 fea3 	bl	800dbbc <__lshift>
 800ce76:	4631      	mov	r1, r6
 800ce78:	ee08 0a10 	vmov	s16, r0
 800ce7c:	f000 ff0e 	bl	800dc9c <__mcmp>
 800ce80:	2800      	cmp	r0, #0
 800ce82:	dc03      	bgt.n	800ce8c <_dtoa_r+0xa9c>
 800ce84:	d1e0      	bne.n	800ce48 <_dtoa_r+0xa58>
 800ce86:	f01a 0f01 	tst.w	sl, #1
 800ce8a:	d0dd      	beq.n	800ce48 <_dtoa_r+0xa58>
 800ce8c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ce90:	d1d7      	bne.n	800ce42 <_dtoa_r+0xa52>
 800ce92:	2339      	movs	r3, #57	; 0x39
 800ce94:	f88b 3000 	strb.w	r3, [fp]
 800ce98:	462b      	mov	r3, r5
 800ce9a:	461d      	mov	r5, r3
 800ce9c:	3b01      	subs	r3, #1
 800ce9e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cea2:	2a39      	cmp	r2, #57	; 0x39
 800cea4:	d071      	beq.n	800cf8a <_dtoa_r+0xb9a>
 800cea6:	3201      	adds	r2, #1
 800cea8:	701a      	strb	r2, [r3, #0]
 800ceaa:	e746      	b.n	800cd3a <_dtoa_r+0x94a>
 800ceac:	2a00      	cmp	r2, #0
 800ceae:	dd07      	ble.n	800cec0 <_dtoa_r+0xad0>
 800ceb0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ceb4:	d0ed      	beq.n	800ce92 <_dtoa_r+0xaa2>
 800ceb6:	f10a 0301 	add.w	r3, sl, #1
 800ceba:	f88b 3000 	strb.w	r3, [fp]
 800cebe:	e73c      	b.n	800cd3a <_dtoa_r+0x94a>
 800cec0:	9b05      	ldr	r3, [sp, #20]
 800cec2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800cec6:	4599      	cmp	r9, r3
 800cec8:	d047      	beq.n	800cf5a <_dtoa_r+0xb6a>
 800ceca:	ee18 1a10 	vmov	r1, s16
 800cece:	2300      	movs	r3, #0
 800ced0:	220a      	movs	r2, #10
 800ced2:	4620      	mov	r0, r4
 800ced4:	f000 fc78 	bl	800d7c8 <__multadd>
 800ced8:	45b8      	cmp	r8, r7
 800ceda:	ee08 0a10 	vmov	s16, r0
 800cede:	f04f 0300 	mov.w	r3, #0
 800cee2:	f04f 020a 	mov.w	r2, #10
 800cee6:	4641      	mov	r1, r8
 800cee8:	4620      	mov	r0, r4
 800ceea:	d106      	bne.n	800cefa <_dtoa_r+0xb0a>
 800ceec:	f000 fc6c 	bl	800d7c8 <__multadd>
 800cef0:	4680      	mov	r8, r0
 800cef2:	4607      	mov	r7, r0
 800cef4:	f109 0901 	add.w	r9, r9, #1
 800cef8:	e772      	b.n	800cde0 <_dtoa_r+0x9f0>
 800cefa:	f000 fc65 	bl	800d7c8 <__multadd>
 800cefe:	4639      	mov	r1, r7
 800cf00:	4680      	mov	r8, r0
 800cf02:	2300      	movs	r3, #0
 800cf04:	220a      	movs	r2, #10
 800cf06:	4620      	mov	r0, r4
 800cf08:	f000 fc5e 	bl	800d7c8 <__multadd>
 800cf0c:	4607      	mov	r7, r0
 800cf0e:	e7f1      	b.n	800cef4 <_dtoa_r+0xb04>
 800cf10:	9b03      	ldr	r3, [sp, #12]
 800cf12:	9302      	str	r3, [sp, #8]
 800cf14:	9d01      	ldr	r5, [sp, #4]
 800cf16:	ee18 0a10 	vmov	r0, s16
 800cf1a:	4631      	mov	r1, r6
 800cf1c:	f7ff f9dc 	bl	800c2d8 <quorem>
 800cf20:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cf24:	9b01      	ldr	r3, [sp, #4]
 800cf26:	f805 ab01 	strb.w	sl, [r5], #1
 800cf2a:	1aea      	subs	r2, r5, r3
 800cf2c:	9b02      	ldr	r3, [sp, #8]
 800cf2e:	4293      	cmp	r3, r2
 800cf30:	dd09      	ble.n	800cf46 <_dtoa_r+0xb56>
 800cf32:	ee18 1a10 	vmov	r1, s16
 800cf36:	2300      	movs	r3, #0
 800cf38:	220a      	movs	r2, #10
 800cf3a:	4620      	mov	r0, r4
 800cf3c:	f000 fc44 	bl	800d7c8 <__multadd>
 800cf40:	ee08 0a10 	vmov	s16, r0
 800cf44:	e7e7      	b.n	800cf16 <_dtoa_r+0xb26>
 800cf46:	9b02      	ldr	r3, [sp, #8]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	bfc8      	it	gt
 800cf4c:	461d      	movgt	r5, r3
 800cf4e:	9b01      	ldr	r3, [sp, #4]
 800cf50:	bfd8      	it	le
 800cf52:	2501      	movle	r5, #1
 800cf54:	441d      	add	r5, r3
 800cf56:	f04f 0800 	mov.w	r8, #0
 800cf5a:	ee18 1a10 	vmov	r1, s16
 800cf5e:	2201      	movs	r2, #1
 800cf60:	4620      	mov	r0, r4
 800cf62:	f000 fe2b 	bl	800dbbc <__lshift>
 800cf66:	4631      	mov	r1, r6
 800cf68:	ee08 0a10 	vmov	s16, r0
 800cf6c:	f000 fe96 	bl	800dc9c <__mcmp>
 800cf70:	2800      	cmp	r0, #0
 800cf72:	dc91      	bgt.n	800ce98 <_dtoa_r+0xaa8>
 800cf74:	d102      	bne.n	800cf7c <_dtoa_r+0xb8c>
 800cf76:	f01a 0f01 	tst.w	sl, #1
 800cf7a:	d18d      	bne.n	800ce98 <_dtoa_r+0xaa8>
 800cf7c:	462b      	mov	r3, r5
 800cf7e:	461d      	mov	r5, r3
 800cf80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cf84:	2a30      	cmp	r2, #48	; 0x30
 800cf86:	d0fa      	beq.n	800cf7e <_dtoa_r+0xb8e>
 800cf88:	e6d7      	b.n	800cd3a <_dtoa_r+0x94a>
 800cf8a:	9a01      	ldr	r2, [sp, #4]
 800cf8c:	429a      	cmp	r2, r3
 800cf8e:	d184      	bne.n	800ce9a <_dtoa_r+0xaaa>
 800cf90:	9b00      	ldr	r3, [sp, #0]
 800cf92:	3301      	adds	r3, #1
 800cf94:	9300      	str	r3, [sp, #0]
 800cf96:	2331      	movs	r3, #49	; 0x31
 800cf98:	7013      	strb	r3, [r2, #0]
 800cf9a:	e6ce      	b.n	800cd3a <_dtoa_r+0x94a>
 800cf9c:	4b09      	ldr	r3, [pc, #36]	; (800cfc4 <_dtoa_r+0xbd4>)
 800cf9e:	f7ff ba95 	b.w	800c4cc <_dtoa_r+0xdc>
 800cfa2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	f47f aa6e 	bne.w	800c486 <_dtoa_r+0x96>
 800cfaa:	4b07      	ldr	r3, [pc, #28]	; (800cfc8 <_dtoa_r+0xbd8>)
 800cfac:	f7ff ba8e 	b.w	800c4cc <_dtoa_r+0xdc>
 800cfb0:	9b02      	ldr	r3, [sp, #8]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	dcae      	bgt.n	800cf14 <_dtoa_r+0xb24>
 800cfb6:	9b06      	ldr	r3, [sp, #24]
 800cfb8:	2b02      	cmp	r3, #2
 800cfba:	f73f aea8 	bgt.w	800cd0e <_dtoa_r+0x91e>
 800cfbe:	e7a9      	b.n	800cf14 <_dtoa_r+0xb24>
 800cfc0:	0800f728 	.word	0x0800f728
 800cfc4:	0800f52c 	.word	0x0800f52c
 800cfc8:	0800f6a9 	.word	0x0800f6a9

0800cfcc <rshift>:
 800cfcc:	6903      	ldr	r3, [r0, #16]
 800cfce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cfd2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cfd6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cfda:	f100 0414 	add.w	r4, r0, #20
 800cfde:	dd45      	ble.n	800d06c <rshift+0xa0>
 800cfe0:	f011 011f 	ands.w	r1, r1, #31
 800cfe4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cfe8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cfec:	d10c      	bne.n	800d008 <rshift+0x3c>
 800cfee:	f100 0710 	add.w	r7, r0, #16
 800cff2:	4629      	mov	r1, r5
 800cff4:	42b1      	cmp	r1, r6
 800cff6:	d334      	bcc.n	800d062 <rshift+0x96>
 800cff8:	1a9b      	subs	r3, r3, r2
 800cffa:	009b      	lsls	r3, r3, #2
 800cffc:	1eea      	subs	r2, r5, #3
 800cffe:	4296      	cmp	r6, r2
 800d000:	bf38      	it	cc
 800d002:	2300      	movcc	r3, #0
 800d004:	4423      	add	r3, r4
 800d006:	e015      	b.n	800d034 <rshift+0x68>
 800d008:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d00c:	f1c1 0820 	rsb	r8, r1, #32
 800d010:	40cf      	lsrs	r7, r1
 800d012:	f105 0e04 	add.w	lr, r5, #4
 800d016:	46a1      	mov	r9, r4
 800d018:	4576      	cmp	r6, lr
 800d01a:	46f4      	mov	ip, lr
 800d01c:	d815      	bhi.n	800d04a <rshift+0x7e>
 800d01e:	1a9a      	subs	r2, r3, r2
 800d020:	0092      	lsls	r2, r2, #2
 800d022:	3a04      	subs	r2, #4
 800d024:	3501      	adds	r5, #1
 800d026:	42ae      	cmp	r6, r5
 800d028:	bf38      	it	cc
 800d02a:	2200      	movcc	r2, #0
 800d02c:	18a3      	adds	r3, r4, r2
 800d02e:	50a7      	str	r7, [r4, r2]
 800d030:	b107      	cbz	r7, 800d034 <rshift+0x68>
 800d032:	3304      	adds	r3, #4
 800d034:	1b1a      	subs	r2, r3, r4
 800d036:	42a3      	cmp	r3, r4
 800d038:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d03c:	bf08      	it	eq
 800d03e:	2300      	moveq	r3, #0
 800d040:	6102      	str	r2, [r0, #16]
 800d042:	bf08      	it	eq
 800d044:	6143      	streq	r3, [r0, #20]
 800d046:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d04a:	f8dc c000 	ldr.w	ip, [ip]
 800d04e:	fa0c fc08 	lsl.w	ip, ip, r8
 800d052:	ea4c 0707 	orr.w	r7, ip, r7
 800d056:	f849 7b04 	str.w	r7, [r9], #4
 800d05a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d05e:	40cf      	lsrs	r7, r1
 800d060:	e7da      	b.n	800d018 <rshift+0x4c>
 800d062:	f851 cb04 	ldr.w	ip, [r1], #4
 800d066:	f847 cf04 	str.w	ip, [r7, #4]!
 800d06a:	e7c3      	b.n	800cff4 <rshift+0x28>
 800d06c:	4623      	mov	r3, r4
 800d06e:	e7e1      	b.n	800d034 <rshift+0x68>

0800d070 <__hexdig_fun>:
 800d070:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d074:	2b09      	cmp	r3, #9
 800d076:	d802      	bhi.n	800d07e <__hexdig_fun+0xe>
 800d078:	3820      	subs	r0, #32
 800d07a:	b2c0      	uxtb	r0, r0
 800d07c:	4770      	bx	lr
 800d07e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d082:	2b05      	cmp	r3, #5
 800d084:	d801      	bhi.n	800d08a <__hexdig_fun+0x1a>
 800d086:	3847      	subs	r0, #71	; 0x47
 800d088:	e7f7      	b.n	800d07a <__hexdig_fun+0xa>
 800d08a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d08e:	2b05      	cmp	r3, #5
 800d090:	d801      	bhi.n	800d096 <__hexdig_fun+0x26>
 800d092:	3827      	subs	r0, #39	; 0x27
 800d094:	e7f1      	b.n	800d07a <__hexdig_fun+0xa>
 800d096:	2000      	movs	r0, #0
 800d098:	4770      	bx	lr
	...

0800d09c <__gethex>:
 800d09c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0a0:	ed2d 8b02 	vpush	{d8}
 800d0a4:	b089      	sub	sp, #36	; 0x24
 800d0a6:	ee08 0a10 	vmov	s16, r0
 800d0aa:	9304      	str	r3, [sp, #16]
 800d0ac:	4bb4      	ldr	r3, [pc, #720]	; (800d380 <__gethex+0x2e4>)
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	9301      	str	r3, [sp, #4]
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	468b      	mov	fp, r1
 800d0b6:	4690      	mov	r8, r2
 800d0b8:	f7f3 f8a2 	bl	8000200 <strlen>
 800d0bc:	9b01      	ldr	r3, [sp, #4]
 800d0be:	f8db 2000 	ldr.w	r2, [fp]
 800d0c2:	4403      	add	r3, r0
 800d0c4:	4682      	mov	sl, r0
 800d0c6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d0ca:	9305      	str	r3, [sp, #20]
 800d0cc:	1c93      	adds	r3, r2, #2
 800d0ce:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d0d2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d0d6:	32fe      	adds	r2, #254	; 0xfe
 800d0d8:	18d1      	adds	r1, r2, r3
 800d0da:	461f      	mov	r7, r3
 800d0dc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d0e0:	9100      	str	r1, [sp, #0]
 800d0e2:	2830      	cmp	r0, #48	; 0x30
 800d0e4:	d0f8      	beq.n	800d0d8 <__gethex+0x3c>
 800d0e6:	f7ff ffc3 	bl	800d070 <__hexdig_fun>
 800d0ea:	4604      	mov	r4, r0
 800d0ec:	2800      	cmp	r0, #0
 800d0ee:	d13a      	bne.n	800d166 <__gethex+0xca>
 800d0f0:	9901      	ldr	r1, [sp, #4]
 800d0f2:	4652      	mov	r2, sl
 800d0f4:	4638      	mov	r0, r7
 800d0f6:	f001 fa33 	bl	800e560 <strncmp>
 800d0fa:	4605      	mov	r5, r0
 800d0fc:	2800      	cmp	r0, #0
 800d0fe:	d168      	bne.n	800d1d2 <__gethex+0x136>
 800d100:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d104:	eb07 060a 	add.w	r6, r7, sl
 800d108:	f7ff ffb2 	bl	800d070 <__hexdig_fun>
 800d10c:	2800      	cmp	r0, #0
 800d10e:	d062      	beq.n	800d1d6 <__gethex+0x13a>
 800d110:	4633      	mov	r3, r6
 800d112:	7818      	ldrb	r0, [r3, #0]
 800d114:	2830      	cmp	r0, #48	; 0x30
 800d116:	461f      	mov	r7, r3
 800d118:	f103 0301 	add.w	r3, r3, #1
 800d11c:	d0f9      	beq.n	800d112 <__gethex+0x76>
 800d11e:	f7ff ffa7 	bl	800d070 <__hexdig_fun>
 800d122:	2301      	movs	r3, #1
 800d124:	fab0 f480 	clz	r4, r0
 800d128:	0964      	lsrs	r4, r4, #5
 800d12a:	4635      	mov	r5, r6
 800d12c:	9300      	str	r3, [sp, #0]
 800d12e:	463a      	mov	r2, r7
 800d130:	4616      	mov	r6, r2
 800d132:	3201      	adds	r2, #1
 800d134:	7830      	ldrb	r0, [r6, #0]
 800d136:	f7ff ff9b 	bl	800d070 <__hexdig_fun>
 800d13a:	2800      	cmp	r0, #0
 800d13c:	d1f8      	bne.n	800d130 <__gethex+0x94>
 800d13e:	9901      	ldr	r1, [sp, #4]
 800d140:	4652      	mov	r2, sl
 800d142:	4630      	mov	r0, r6
 800d144:	f001 fa0c 	bl	800e560 <strncmp>
 800d148:	b980      	cbnz	r0, 800d16c <__gethex+0xd0>
 800d14a:	b94d      	cbnz	r5, 800d160 <__gethex+0xc4>
 800d14c:	eb06 050a 	add.w	r5, r6, sl
 800d150:	462a      	mov	r2, r5
 800d152:	4616      	mov	r6, r2
 800d154:	3201      	adds	r2, #1
 800d156:	7830      	ldrb	r0, [r6, #0]
 800d158:	f7ff ff8a 	bl	800d070 <__hexdig_fun>
 800d15c:	2800      	cmp	r0, #0
 800d15e:	d1f8      	bne.n	800d152 <__gethex+0xb6>
 800d160:	1bad      	subs	r5, r5, r6
 800d162:	00ad      	lsls	r5, r5, #2
 800d164:	e004      	b.n	800d170 <__gethex+0xd4>
 800d166:	2400      	movs	r4, #0
 800d168:	4625      	mov	r5, r4
 800d16a:	e7e0      	b.n	800d12e <__gethex+0x92>
 800d16c:	2d00      	cmp	r5, #0
 800d16e:	d1f7      	bne.n	800d160 <__gethex+0xc4>
 800d170:	7833      	ldrb	r3, [r6, #0]
 800d172:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d176:	2b50      	cmp	r3, #80	; 0x50
 800d178:	d13b      	bne.n	800d1f2 <__gethex+0x156>
 800d17a:	7873      	ldrb	r3, [r6, #1]
 800d17c:	2b2b      	cmp	r3, #43	; 0x2b
 800d17e:	d02c      	beq.n	800d1da <__gethex+0x13e>
 800d180:	2b2d      	cmp	r3, #45	; 0x2d
 800d182:	d02e      	beq.n	800d1e2 <__gethex+0x146>
 800d184:	1c71      	adds	r1, r6, #1
 800d186:	f04f 0900 	mov.w	r9, #0
 800d18a:	7808      	ldrb	r0, [r1, #0]
 800d18c:	f7ff ff70 	bl	800d070 <__hexdig_fun>
 800d190:	1e43      	subs	r3, r0, #1
 800d192:	b2db      	uxtb	r3, r3
 800d194:	2b18      	cmp	r3, #24
 800d196:	d82c      	bhi.n	800d1f2 <__gethex+0x156>
 800d198:	f1a0 0210 	sub.w	r2, r0, #16
 800d19c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d1a0:	f7ff ff66 	bl	800d070 <__hexdig_fun>
 800d1a4:	1e43      	subs	r3, r0, #1
 800d1a6:	b2db      	uxtb	r3, r3
 800d1a8:	2b18      	cmp	r3, #24
 800d1aa:	d91d      	bls.n	800d1e8 <__gethex+0x14c>
 800d1ac:	f1b9 0f00 	cmp.w	r9, #0
 800d1b0:	d000      	beq.n	800d1b4 <__gethex+0x118>
 800d1b2:	4252      	negs	r2, r2
 800d1b4:	4415      	add	r5, r2
 800d1b6:	f8cb 1000 	str.w	r1, [fp]
 800d1ba:	b1e4      	cbz	r4, 800d1f6 <__gethex+0x15a>
 800d1bc:	9b00      	ldr	r3, [sp, #0]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	bf14      	ite	ne
 800d1c2:	2700      	movne	r7, #0
 800d1c4:	2706      	moveq	r7, #6
 800d1c6:	4638      	mov	r0, r7
 800d1c8:	b009      	add	sp, #36	; 0x24
 800d1ca:	ecbd 8b02 	vpop	{d8}
 800d1ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1d2:	463e      	mov	r6, r7
 800d1d4:	4625      	mov	r5, r4
 800d1d6:	2401      	movs	r4, #1
 800d1d8:	e7ca      	b.n	800d170 <__gethex+0xd4>
 800d1da:	f04f 0900 	mov.w	r9, #0
 800d1de:	1cb1      	adds	r1, r6, #2
 800d1e0:	e7d3      	b.n	800d18a <__gethex+0xee>
 800d1e2:	f04f 0901 	mov.w	r9, #1
 800d1e6:	e7fa      	b.n	800d1de <__gethex+0x142>
 800d1e8:	230a      	movs	r3, #10
 800d1ea:	fb03 0202 	mla	r2, r3, r2, r0
 800d1ee:	3a10      	subs	r2, #16
 800d1f0:	e7d4      	b.n	800d19c <__gethex+0x100>
 800d1f2:	4631      	mov	r1, r6
 800d1f4:	e7df      	b.n	800d1b6 <__gethex+0x11a>
 800d1f6:	1bf3      	subs	r3, r6, r7
 800d1f8:	3b01      	subs	r3, #1
 800d1fa:	4621      	mov	r1, r4
 800d1fc:	2b07      	cmp	r3, #7
 800d1fe:	dc0b      	bgt.n	800d218 <__gethex+0x17c>
 800d200:	ee18 0a10 	vmov	r0, s16
 800d204:	f000 fa7e 	bl	800d704 <_Balloc>
 800d208:	4604      	mov	r4, r0
 800d20a:	b940      	cbnz	r0, 800d21e <__gethex+0x182>
 800d20c:	4b5d      	ldr	r3, [pc, #372]	; (800d384 <__gethex+0x2e8>)
 800d20e:	4602      	mov	r2, r0
 800d210:	21de      	movs	r1, #222	; 0xde
 800d212:	485d      	ldr	r0, [pc, #372]	; (800d388 <__gethex+0x2ec>)
 800d214:	f001 f9c6 	bl	800e5a4 <__assert_func>
 800d218:	3101      	adds	r1, #1
 800d21a:	105b      	asrs	r3, r3, #1
 800d21c:	e7ee      	b.n	800d1fc <__gethex+0x160>
 800d21e:	f100 0914 	add.w	r9, r0, #20
 800d222:	f04f 0b00 	mov.w	fp, #0
 800d226:	f1ca 0301 	rsb	r3, sl, #1
 800d22a:	f8cd 9008 	str.w	r9, [sp, #8]
 800d22e:	f8cd b000 	str.w	fp, [sp]
 800d232:	9306      	str	r3, [sp, #24]
 800d234:	42b7      	cmp	r7, r6
 800d236:	d340      	bcc.n	800d2ba <__gethex+0x21e>
 800d238:	9802      	ldr	r0, [sp, #8]
 800d23a:	9b00      	ldr	r3, [sp, #0]
 800d23c:	f840 3b04 	str.w	r3, [r0], #4
 800d240:	eba0 0009 	sub.w	r0, r0, r9
 800d244:	1080      	asrs	r0, r0, #2
 800d246:	0146      	lsls	r6, r0, #5
 800d248:	6120      	str	r0, [r4, #16]
 800d24a:	4618      	mov	r0, r3
 800d24c:	f000 fb4c 	bl	800d8e8 <__hi0bits>
 800d250:	1a30      	subs	r0, r6, r0
 800d252:	f8d8 6000 	ldr.w	r6, [r8]
 800d256:	42b0      	cmp	r0, r6
 800d258:	dd63      	ble.n	800d322 <__gethex+0x286>
 800d25a:	1b87      	subs	r7, r0, r6
 800d25c:	4639      	mov	r1, r7
 800d25e:	4620      	mov	r0, r4
 800d260:	f000 fef0 	bl	800e044 <__any_on>
 800d264:	4682      	mov	sl, r0
 800d266:	b1a8      	cbz	r0, 800d294 <__gethex+0x1f8>
 800d268:	1e7b      	subs	r3, r7, #1
 800d26a:	1159      	asrs	r1, r3, #5
 800d26c:	f003 021f 	and.w	r2, r3, #31
 800d270:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d274:	f04f 0a01 	mov.w	sl, #1
 800d278:	fa0a f202 	lsl.w	r2, sl, r2
 800d27c:	420a      	tst	r2, r1
 800d27e:	d009      	beq.n	800d294 <__gethex+0x1f8>
 800d280:	4553      	cmp	r3, sl
 800d282:	dd05      	ble.n	800d290 <__gethex+0x1f4>
 800d284:	1eb9      	subs	r1, r7, #2
 800d286:	4620      	mov	r0, r4
 800d288:	f000 fedc 	bl	800e044 <__any_on>
 800d28c:	2800      	cmp	r0, #0
 800d28e:	d145      	bne.n	800d31c <__gethex+0x280>
 800d290:	f04f 0a02 	mov.w	sl, #2
 800d294:	4639      	mov	r1, r7
 800d296:	4620      	mov	r0, r4
 800d298:	f7ff fe98 	bl	800cfcc <rshift>
 800d29c:	443d      	add	r5, r7
 800d29e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d2a2:	42ab      	cmp	r3, r5
 800d2a4:	da4c      	bge.n	800d340 <__gethex+0x2a4>
 800d2a6:	ee18 0a10 	vmov	r0, s16
 800d2aa:	4621      	mov	r1, r4
 800d2ac:	f000 fa6a 	bl	800d784 <_Bfree>
 800d2b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	6013      	str	r3, [r2, #0]
 800d2b6:	27a3      	movs	r7, #163	; 0xa3
 800d2b8:	e785      	b.n	800d1c6 <__gethex+0x12a>
 800d2ba:	1e73      	subs	r3, r6, #1
 800d2bc:	9a05      	ldr	r2, [sp, #20]
 800d2be:	9303      	str	r3, [sp, #12]
 800d2c0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d2c4:	4293      	cmp	r3, r2
 800d2c6:	d019      	beq.n	800d2fc <__gethex+0x260>
 800d2c8:	f1bb 0f20 	cmp.w	fp, #32
 800d2cc:	d107      	bne.n	800d2de <__gethex+0x242>
 800d2ce:	9b02      	ldr	r3, [sp, #8]
 800d2d0:	9a00      	ldr	r2, [sp, #0]
 800d2d2:	f843 2b04 	str.w	r2, [r3], #4
 800d2d6:	9302      	str	r3, [sp, #8]
 800d2d8:	2300      	movs	r3, #0
 800d2da:	9300      	str	r3, [sp, #0]
 800d2dc:	469b      	mov	fp, r3
 800d2de:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d2e2:	f7ff fec5 	bl	800d070 <__hexdig_fun>
 800d2e6:	9b00      	ldr	r3, [sp, #0]
 800d2e8:	f000 000f 	and.w	r0, r0, #15
 800d2ec:	fa00 f00b 	lsl.w	r0, r0, fp
 800d2f0:	4303      	orrs	r3, r0
 800d2f2:	9300      	str	r3, [sp, #0]
 800d2f4:	f10b 0b04 	add.w	fp, fp, #4
 800d2f8:	9b03      	ldr	r3, [sp, #12]
 800d2fa:	e00d      	b.n	800d318 <__gethex+0x27c>
 800d2fc:	9b03      	ldr	r3, [sp, #12]
 800d2fe:	9a06      	ldr	r2, [sp, #24]
 800d300:	4413      	add	r3, r2
 800d302:	42bb      	cmp	r3, r7
 800d304:	d3e0      	bcc.n	800d2c8 <__gethex+0x22c>
 800d306:	4618      	mov	r0, r3
 800d308:	9901      	ldr	r1, [sp, #4]
 800d30a:	9307      	str	r3, [sp, #28]
 800d30c:	4652      	mov	r2, sl
 800d30e:	f001 f927 	bl	800e560 <strncmp>
 800d312:	9b07      	ldr	r3, [sp, #28]
 800d314:	2800      	cmp	r0, #0
 800d316:	d1d7      	bne.n	800d2c8 <__gethex+0x22c>
 800d318:	461e      	mov	r6, r3
 800d31a:	e78b      	b.n	800d234 <__gethex+0x198>
 800d31c:	f04f 0a03 	mov.w	sl, #3
 800d320:	e7b8      	b.n	800d294 <__gethex+0x1f8>
 800d322:	da0a      	bge.n	800d33a <__gethex+0x29e>
 800d324:	1a37      	subs	r7, r6, r0
 800d326:	4621      	mov	r1, r4
 800d328:	ee18 0a10 	vmov	r0, s16
 800d32c:	463a      	mov	r2, r7
 800d32e:	f000 fc45 	bl	800dbbc <__lshift>
 800d332:	1bed      	subs	r5, r5, r7
 800d334:	4604      	mov	r4, r0
 800d336:	f100 0914 	add.w	r9, r0, #20
 800d33a:	f04f 0a00 	mov.w	sl, #0
 800d33e:	e7ae      	b.n	800d29e <__gethex+0x202>
 800d340:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d344:	42a8      	cmp	r0, r5
 800d346:	dd72      	ble.n	800d42e <__gethex+0x392>
 800d348:	1b45      	subs	r5, r0, r5
 800d34a:	42ae      	cmp	r6, r5
 800d34c:	dc36      	bgt.n	800d3bc <__gethex+0x320>
 800d34e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d352:	2b02      	cmp	r3, #2
 800d354:	d02a      	beq.n	800d3ac <__gethex+0x310>
 800d356:	2b03      	cmp	r3, #3
 800d358:	d02c      	beq.n	800d3b4 <__gethex+0x318>
 800d35a:	2b01      	cmp	r3, #1
 800d35c:	d11c      	bne.n	800d398 <__gethex+0x2fc>
 800d35e:	42ae      	cmp	r6, r5
 800d360:	d11a      	bne.n	800d398 <__gethex+0x2fc>
 800d362:	2e01      	cmp	r6, #1
 800d364:	d112      	bne.n	800d38c <__gethex+0x2f0>
 800d366:	9a04      	ldr	r2, [sp, #16]
 800d368:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d36c:	6013      	str	r3, [r2, #0]
 800d36e:	2301      	movs	r3, #1
 800d370:	6123      	str	r3, [r4, #16]
 800d372:	f8c9 3000 	str.w	r3, [r9]
 800d376:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d378:	2762      	movs	r7, #98	; 0x62
 800d37a:	601c      	str	r4, [r3, #0]
 800d37c:	e723      	b.n	800d1c6 <__gethex+0x12a>
 800d37e:	bf00      	nop
 800d380:	0800f7a0 	.word	0x0800f7a0
 800d384:	0800f728 	.word	0x0800f728
 800d388:	0800f739 	.word	0x0800f739
 800d38c:	1e71      	subs	r1, r6, #1
 800d38e:	4620      	mov	r0, r4
 800d390:	f000 fe58 	bl	800e044 <__any_on>
 800d394:	2800      	cmp	r0, #0
 800d396:	d1e6      	bne.n	800d366 <__gethex+0x2ca>
 800d398:	ee18 0a10 	vmov	r0, s16
 800d39c:	4621      	mov	r1, r4
 800d39e:	f000 f9f1 	bl	800d784 <_Bfree>
 800d3a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	6013      	str	r3, [r2, #0]
 800d3a8:	2750      	movs	r7, #80	; 0x50
 800d3aa:	e70c      	b.n	800d1c6 <__gethex+0x12a>
 800d3ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d1f2      	bne.n	800d398 <__gethex+0x2fc>
 800d3b2:	e7d8      	b.n	800d366 <__gethex+0x2ca>
 800d3b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d1d5      	bne.n	800d366 <__gethex+0x2ca>
 800d3ba:	e7ed      	b.n	800d398 <__gethex+0x2fc>
 800d3bc:	1e6f      	subs	r7, r5, #1
 800d3be:	f1ba 0f00 	cmp.w	sl, #0
 800d3c2:	d131      	bne.n	800d428 <__gethex+0x38c>
 800d3c4:	b127      	cbz	r7, 800d3d0 <__gethex+0x334>
 800d3c6:	4639      	mov	r1, r7
 800d3c8:	4620      	mov	r0, r4
 800d3ca:	f000 fe3b 	bl	800e044 <__any_on>
 800d3ce:	4682      	mov	sl, r0
 800d3d0:	117b      	asrs	r3, r7, #5
 800d3d2:	2101      	movs	r1, #1
 800d3d4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d3d8:	f007 071f 	and.w	r7, r7, #31
 800d3dc:	fa01 f707 	lsl.w	r7, r1, r7
 800d3e0:	421f      	tst	r7, r3
 800d3e2:	4629      	mov	r1, r5
 800d3e4:	4620      	mov	r0, r4
 800d3e6:	bf18      	it	ne
 800d3e8:	f04a 0a02 	orrne.w	sl, sl, #2
 800d3ec:	1b76      	subs	r6, r6, r5
 800d3ee:	f7ff fded 	bl	800cfcc <rshift>
 800d3f2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d3f6:	2702      	movs	r7, #2
 800d3f8:	f1ba 0f00 	cmp.w	sl, #0
 800d3fc:	d048      	beq.n	800d490 <__gethex+0x3f4>
 800d3fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d402:	2b02      	cmp	r3, #2
 800d404:	d015      	beq.n	800d432 <__gethex+0x396>
 800d406:	2b03      	cmp	r3, #3
 800d408:	d017      	beq.n	800d43a <__gethex+0x39e>
 800d40a:	2b01      	cmp	r3, #1
 800d40c:	d109      	bne.n	800d422 <__gethex+0x386>
 800d40e:	f01a 0f02 	tst.w	sl, #2
 800d412:	d006      	beq.n	800d422 <__gethex+0x386>
 800d414:	f8d9 0000 	ldr.w	r0, [r9]
 800d418:	ea4a 0a00 	orr.w	sl, sl, r0
 800d41c:	f01a 0f01 	tst.w	sl, #1
 800d420:	d10e      	bne.n	800d440 <__gethex+0x3a4>
 800d422:	f047 0710 	orr.w	r7, r7, #16
 800d426:	e033      	b.n	800d490 <__gethex+0x3f4>
 800d428:	f04f 0a01 	mov.w	sl, #1
 800d42c:	e7d0      	b.n	800d3d0 <__gethex+0x334>
 800d42e:	2701      	movs	r7, #1
 800d430:	e7e2      	b.n	800d3f8 <__gethex+0x35c>
 800d432:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d434:	f1c3 0301 	rsb	r3, r3, #1
 800d438:	9315      	str	r3, [sp, #84]	; 0x54
 800d43a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d0f0      	beq.n	800d422 <__gethex+0x386>
 800d440:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d444:	f104 0314 	add.w	r3, r4, #20
 800d448:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d44c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d450:	f04f 0c00 	mov.w	ip, #0
 800d454:	4618      	mov	r0, r3
 800d456:	f853 2b04 	ldr.w	r2, [r3], #4
 800d45a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d45e:	d01c      	beq.n	800d49a <__gethex+0x3fe>
 800d460:	3201      	adds	r2, #1
 800d462:	6002      	str	r2, [r0, #0]
 800d464:	2f02      	cmp	r7, #2
 800d466:	f104 0314 	add.w	r3, r4, #20
 800d46a:	d13f      	bne.n	800d4ec <__gethex+0x450>
 800d46c:	f8d8 2000 	ldr.w	r2, [r8]
 800d470:	3a01      	subs	r2, #1
 800d472:	42b2      	cmp	r2, r6
 800d474:	d10a      	bne.n	800d48c <__gethex+0x3f0>
 800d476:	1171      	asrs	r1, r6, #5
 800d478:	2201      	movs	r2, #1
 800d47a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d47e:	f006 061f 	and.w	r6, r6, #31
 800d482:	fa02 f606 	lsl.w	r6, r2, r6
 800d486:	421e      	tst	r6, r3
 800d488:	bf18      	it	ne
 800d48a:	4617      	movne	r7, r2
 800d48c:	f047 0720 	orr.w	r7, r7, #32
 800d490:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d492:	601c      	str	r4, [r3, #0]
 800d494:	9b04      	ldr	r3, [sp, #16]
 800d496:	601d      	str	r5, [r3, #0]
 800d498:	e695      	b.n	800d1c6 <__gethex+0x12a>
 800d49a:	4299      	cmp	r1, r3
 800d49c:	f843 cc04 	str.w	ip, [r3, #-4]
 800d4a0:	d8d8      	bhi.n	800d454 <__gethex+0x3b8>
 800d4a2:	68a3      	ldr	r3, [r4, #8]
 800d4a4:	459b      	cmp	fp, r3
 800d4a6:	db19      	blt.n	800d4dc <__gethex+0x440>
 800d4a8:	6861      	ldr	r1, [r4, #4]
 800d4aa:	ee18 0a10 	vmov	r0, s16
 800d4ae:	3101      	adds	r1, #1
 800d4b0:	f000 f928 	bl	800d704 <_Balloc>
 800d4b4:	4681      	mov	r9, r0
 800d4b6:	b918      	cbnz	r0, 800d4c0 <__gethex+0x424>
 800d4b8:	4b1a      	ldr	r3, [pc, #104]	; (800d524 <__gethex+0x488>)
 800d4ba:	4602      	mov	r2, r0
 800d4bc:	2184      	movs	r1, #132	; 0x84
 800d4be:	e6a8      	b.n	800d212 <__gethex+0x176>
 800d4c0:	6922      	ldr	r2, [r4, #16]
 800d4c2:	3202      	adds	r2, #2
 800d4c4:	f104 010c 	add.w	r1, r4, #12
 800d4c8:	0092      	lsls	r2, r2, #2
 800d4ca:	300c      	adds	r0, #12
 800d4cc:	f000 f90c 	bl	800d6e8 <memcpy>
 800d4d0:	4621      	mov	r1, r4
 800d4d2:	ee18 0a10 	vmov	r0, s16
 800d4d6:	f000 f955 	bl	800d784 <_Bfree>
 800d4da:	464c      	mov	r4, r9
 800d4dc:	6923      	ldr	r3, [r4, #16]
 800d4de:	1c5a      	adds	r2, r3, #1
 800d4e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d4e4:	6122      	str	r2, [r4, #16]
 800d4e6:	2201      	movs	r2, #1
 800d4e8:	615a      	str	r2, [r3, #20]
 800d4ea:	e7bb      	b.n	800d464 <__gethex+0x3c8>
 800d4ec:	6922      	ldr	r2, [r4, #16]
 800d4ee:	455a      	cmp	r2, fp
 800d4f0:	dd0b      	ble.n	800d50a <__gethex+0x46e>
 800d4f2:	2101      	movs	r1, #1
 800d4f4:	4620      	mov	r0, r4
 800d4f6:	f7ff fd69 	bl	800cfcc <rshift>
 800d4fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d4fe:	3501      	adds	r5, #1
 800d500:	42ab      	cmp	r3, r5
 800d502:	f6ff aed0 	blt.w	800d2a6 <__gethex+0x20a>
 800d506:	2701      	movs	r7, #1
 800d508:	e7c0      	b.n	800d48c <__gethex+0x3f0>
 800d50a:	f016 061f 	ands.w	r6, r6, #31
 800d50e:	d0fa      	beq.n	800d506 <__gethex+0x46a>
 800d510:	4453      	add	r3, sl
 800d512:	f1c6 0620 	rsb	r6, r6, #32
 800d516:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d51a:	f000 f9e5 	bl	800d8e8 <__hi0bits>
 800d51e:	42b0      	cmp	r0, r6
 800d520:	dbe7      	blt.n	800d4f2 <__gethex+0x456>
 800d522:	e7f0      	b.n	800d506 <__gethex+0x46a>
 800d524:	0800f728 	.word	0x0800f728

0800d528 <L_shift>:
 800d528:	f1c2 0208 	rsb	r2, r2, #8
 800d52c:	0092      	lsls	r2, r2, #2
 800d52e:	b570      	push	{r4, r5, r6, lr}
 800d530:	f1c2 0620 	rsb	r6, r2, #32
 800d534:	6843      	ldr	r3, [r0, #4]
 800d536:	6804      	ldr	r4, [r0, #0]
 800d538:	fa03 f506 	lsl.w	r5, r3, r6
 800d53c:	432c      	orrs	r4, r5
 800d53e:	40d3      	lsrs	r3, r2
 800d540:	6004      	str	r4, [r0, #0]
 800d542:	f840 3f04 	str.w	r3, [r0, #4]!
 800d546:	4288      	cmp	r0, r1
 800d548:	d3f4      	bcc.n	800d534 <L_shift+0xc>
 800d54a:	bd70      	pop	{r4, r5, r6, pc}

0800d54c <__match>:
 800d54c:	b530      	push	{r4, r5, lr}
 800d54e:	6803      	ldr	r3, [r0, #0]
 800d550:	3301      	adds	r3, #1
 800d552:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d556:	b914      	cbnz	r4, 800d55e <__match+0x12>
 800d558:	6003      	str	r3, [r0, #0]
 800d55a:	2001      	movs	r0, #1
 800d55c:	bd30      	pop	{r4, r5, pc}
 800d55e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d562:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d566:	2d19      	cmp	r5, #25
 800d568:	bf98      	it	ls
 800d56a:	3220      	addls	r2, #32
 800d56c:	42a2      	cmp	r2, r4
 800d56e:	d0f0      	beq.n	800d552 <__match+0x6>
 800d570:	2000      	movs	r0, #0
 800d572:	e7f3      	b.n	800d55c <__match+0x10>

0800d574 <__hexnan>:
 800d574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d578:	680b      	ldr	r3, [r1, #0]
 800d57a:	115e      	asrs	r6, r3, #5
 800d57c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d580:	f013 031f 	ands.w	r3, r3, #31
 800d584:	b087      	sub	sp, #28
 800d586:	bf18      	it	ne
 800d588:	3604      	addne	r6, #4
 800d58a:	2500      	movs	r5, #0
 800d58c:	1f37      	subs	r7, r6, #4
 800d58e:	4690      	mov	r8, r2
 800d590:	6802      	ldr	r2, [r0, #0]
 800d592:	9301      	str	r3, [sp, #4]
 800d594:	4682      	mov	sl, r0
 800d596:	f846 5c04 	str.w	r5, [r6, #-4]
 800d59a:	46b9      	mov	r9, r7
 800d59c:	463c      	mov	r4, r7
 800d59e:	9502      	str	r5, [sp, #8]
 800d5a0:	46ab      	mov	fp, r5
 800d5a2:	7851      	ldrb	r1, [r2, #1]
 800d5a4:	1c53      	adds	r3, r2, #1
 800d5a6:	9303      	str	r3, [sp, #12]
 800d5a8:	b341      	cbz	r1, 800d5fc <__hexnan+0x88>
 800d5aa:	4608      	mov	r0, r1
 800d5ac:	9205      	str	r2, [sp, #20]
 800d5ae:	9104      	str	r1, [sp, #16]
 800d5b0:	f7ff fd5e 	bl	800d070 <__hexdig_fun>
 800d5b4:	2800      	cmp	r0, #0
 800d5b6:	d14f      	bne.n	800d658 <__hexnan+0xe4>
 800d5b8:	9904      	ldr	r1, [sp, #16]
 800d5ba:	9a05      	ldr	r2, [sp, #20]
 800d5bc:	2920      	cmp	r1, #32
 800d5be:	d818      	bhi.n	800d5f2 <__hexnan+0x7e>
 800d5c0:	9b02      	ldr	r3, [sp, #8]
 800d5c2:	459b      	cmp	fp, r3
 800d5c4:	dd13      	ble.n	800d5ee <__hexnan+0x7a>
 800d5c6:	454c      	cmp	r4, r9
 800d5c8:	d206      	bcs.n	800d5d8 <__hexnan+0x64>
 800d5ca:	2d07      	cmp	r5, #7
 800d5cc:	dc04      	bgt.n	800d5d8 <__hexnan+0x64>
 800d5ce:	462a      	mov	r2, r5
 800d5d0:	4649      	mov	r1, r9
 800d5d2:	4620      	mov	r0, r4
 800d5d4:	f7ff ffa8 	bl	800d528 <L_shift>
 800d5d8:	4544      	cmp	r4, r8
 800d5da:	d950      	bls.n	800d67e <__hexnan+0x10a>
 800d5dc:	2300      	movs	r3, #0
 800d5de:	f1a4 0904 	sub.w	r9, r4, #4
 800d5e2:	f844 3c04 	str.w	r3, [r4, #-4]
 800d5e6:	f8cd b008 	str.w	fp, [sp, #8]
 800d5ea:	464c      	mov	r4, r9
 800d5ec:	461d      	mov	r5, r3
 800d5ee:	9a03      	ldr	r2, [sp, #12]
 800d5f0:	e7d7      	b.n	800d5a2 <__hexnan+0x2e>
 800d5f2:	2929      	cmp	r1, #41	; 0x29
 800d5f4:	d156      	bne.n	800d6a4 <__hexnan+0x130>
 800d5f6:	3202      	adds	r2, #2
 800d5f8:	f8ca 2000 	str.w	r2, [sl]
 800d5fc:	f1bb 0f00 	cmp.w	fp, #0
 800d600:	d050      	beq.n	800d6a4 <__hexnan+0x130>
 800d602:	454c      	cmp	r4, r9
 800d604:	d206      	bcs.n	800d614 <__hexnan+0xa0>
 800d606:	2d07      	cmp	r5, #7
 800d608:	dc04      	bgt.n	800d614 <__hexnan+0xa0>
 800d60a:	462a      	mov	r2, r5
 800d60c:	4649      	mov	r1, r9
 800d60e:	4620      	mov	r0, r4
 800d610:	f7ff ff8a 	bl	800d528 <L_shift>
 800d614:	4544      	cmp	r4, r8
 800d616:	d934      	bls.n	800d682 <__hexnan+0x10e>
 800d618:	f1a8 0204 	sub.w	r2, r8, #4
 800d61c:	4623      	mov	r3, r4
 800d61e:	f853 1b04 	ldr.w	r1, [r3], #4
 800d622:	f842 1f04 	str.w	r1, [r2, #4]!
 800d626:	429f      	cmp	r7, r3
 800d628:	d2f9      	bcs.n	800d61e <__hexnan+0xaa>
 800d62a:	1b3b      	subs	r3, r7, r4
 800d62c:	f023 0303 	bic.w	r3, r3, #3
 800d630:	3304      	adds	r3, #4
 800d632:	3401      	adds	r4, #1
 800d634:	3e03      	subs	r6, #3
 800d636:	42b4      	cmp	r4, r6
 800d638:	bf88      	it	hi
 800d63a:	2304      	movhi	r3, #4
 800d63c:	4443      	add	r3, r8
 800d63e:	2200      	movs	r2, #0
 800d640:	f843 2b04 	str.w	r2, [r3], #4
 800d644:	429f      	cmp	r7, r3
 800d646:	d2fb      	bcs.n	800d640 <__hexnan+0xcc>
 800d648:	683b      	ldr	r3, [r7, #0]
 800d64a:	b91b      	cbnz	r3, 800d654 <__hexnan+0xe0>
 800d64c:	4547      	cmp	r7, r8
 800d64e:	d127      	bne.n	800d6a0 <__hexnan+0x12c>
 800d650:	2301      	movs	r3, #1
 800d652:	603b      	str	r3, [r7, #0]
 800d654:	2005      	movs	r0, #5
 800d656:	e026      	b.n	800d6a6 <__hexnan+0x132>
 800d658:	3501      	adds	r5, #1
 800d65a:	2d08      	cmp	r5, #8
 800d65c:	f10b 0b01 	add.w	fp, fp, #1
 800d660:	dd06      	ble.n	800d670 <__hexnan+0xfc>
 800d662:	4544      	cmp	r4, r8
 800d664:	d9c3      	bls.n	800d5ee <__hexnan+0x7a>
 800d666:	2300      	movs	r3, #0
 800d668:	f844 3c04 	str.w	r3, [r4, #-4]
 800d66c:	2501      	movs	r5, #1
 800d66e:	3c04      	subs	r4, #4
 800d670:	6822      	ldr	r2, [r4, #0]
 800d672:	f000 000f 	and.w	r0, r0, #15
 800d676:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d67a:	6022      	str	r2, [r4, #0]
 800d67c:	e7b7      	b.n	800d5ee <__hexnan+0x7a>
 800d67e:	2508      	movs	r5, #8
 800d680:	e7b5      	b.n	800d5ee <__hexnan+0x7a>
 800d682:	9b01      	ldr	r3, [sp, #4]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d0df      	beq.n	800d648 <__hexnan+0xd4>
 800d688:	f04f 32ff 	mov.w	r2, #4294967295
 800d68c:	f1c3 0320 	rsb	r3, r3, #32
 800d690:	fa22 f303 	lsr.w	r3, r2, r3
 800d694:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d698:	401a      	ands	r2, r3
 800d69a:	f846 2c04 	str.w	r2, [r6, #-4]
 800d69e:	e7d3      	b.n	800d648 <__hexnan+0xd4>
 800d6a0:	3f04      	subs	r7, #4
 800d6a2:	e7d1      	b.n	800d648 <__hexnan+0xd4>
 800d6a4:	2004      	movs	r0, #4
 800d6a6:	b007      	add	sp, #28
 800d6a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d6ac <_localeconv_r>:
 800d6ac:	4800      	ldr	r0, [pc, #0]	; (800d6b0 <_localeconv_r+0x4>)
 800d6ae:	4770      	bx	lr
 800d6b0:	200001d8 	.word	0x200001d8

0800d6b4 <malloc>:
 800d6b4:	4b02      	ldr	r3, [pc, #8]	; (800d6c0 <malloc+0xc>)
 800d6b6:	4601      	mov	r1, r0
 800d6b8:	6818      	ldr	r0, [r3, #0]
 800d6ba:	f000 bd67 	b.w	800e18c <_malloc_r>
 800d6be:	bf00      	nop
 800d6c0:	20000080 	.word	0x20000080

0800d6c4 <__ascii_mbtowc>:
 800d6c4:	b082      	sub	sp, #8
 800d6c6:	b901      	cbnz	r1, 800d6ca <__ascii_mbtowc+0x6>
 800d6c8:	a901      	add	r1, sp, #4
 800d6ca:	b142      	cbz	r2, 800d6de <__ascii_mbtowc+0x1a>
 800d6cc:	b14b      	cbz	r3, 800d6e2 <__ascii_mbtowc+0x1e>
 800d6ce:	7813      	ldrb	r3, [r2, #0]
 800d6d0:	600b      	str	r3, [r1, #0]
 800d6d2:	7812      	ldrb	r2, [r2, #0]
 800d6d4:	1e10      	subs	r0, r2, #0
 800d6d6:	bf18      	it	ne
 800d6d8:	2001      	movne	r0, #1
 800d6da:	b002      	add	sp, #8
 800d6dc:	4770      	bx	lr
 800d6de:	4610      	mov	r0, r2
 800d6e0:	e7fb      	b.n	800d6da <__ascii_mbtowc+0x16>
 800d6e2:	f06f 0001 	mvn.w	r0, #1
 800d6e6:	e7f8      	b.n	800d6da <__ascii_mbtowc+0x16>

0800d6e8 <memcpy>:
 800d6e8:	440a      	add	r2, r1
 800d6ea:	4291      	cmp	r1, r2
 800d6ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800d6f0:	d100      	bne.n	800d6f4 <memcpy+0xc>
 800d6f2:	4770      	bx	lr
 800d6f4:	b510      	push	{r4, lr}
 800d6f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d6fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d6fe:	4291      	cmp	r1, r2
 800d700:	d1f9      	bne.n	800d6f6 <memcpy+0xe>
 800d702:	bd10      	pop	{r4, pc}

0800d704 <_Balloc>:
 800d704:	b570      	push	{r4, r5, r6, lr}
 800d706:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d708:	4604      	mov	r4, r0
 800d70a:	460d      	mov	r5, r1
 800d70c:	b976      	cbnz	r6, 800d72c <_Balloc+0x28>
 800d70e:	2010      	movs	r0, #16
 800d710:	f7ff ffd0 	bl	800d6b4 <malloc>
 800d714:	4602      	mov	r2, r0
 800d716:	6260      	str	r0, [r4, #36]	; 0x24
 800d718:	b920      	cbnz	r0, 800d724 <_Balloc+0x20>
 800d71a:	4b18      	ldr	r3, [pc, #96]	; (800d77c <_Balloc+0x78>)
 800d71c:	4818      	ldr	r0, [pc, #96]	; (800d780 <_Balloc+0x7c>)
 800d71e:	2166      	movs	r1, #102	; 0x66
 800d720:	f000 ff40 	bl	800e5a4 <__assert_func>
 800d724:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d728:	6006      	str	r6, [r0, #0]
 800d72a:	60c6      	str	r6, [r0, #12]
 800d72c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d72e:	68f3      	ldr	r3, [r6, #12]
 800d730:	b183      	cbz	r3, 800d754 <_Balloc+0x50>
 800d732:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d734:	68db      	ldr	r3, [r3, #12]
 800d736:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d73a:	b9b8      	cbnz	r0, 800d76c <_Balloc+0x68>
 800d73c:	2101      	movs	r1, #1
 800d73e:	fa01 f605 	lsl.w	r6, r1, r5
 800d742:	1d72      	adds	r2, r6, #5
 800d744:	0092      	lsls	r2, r2, #2
 800d746:	4620      	mov	r0, r4
 800d748:	f000 fc9d 	bl	800e086 <_calloc_r>
 800d74c:	b160      	cbz	r0, 800d768 <_Balloc+0x64>
 800d74e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d752:	e00e      	b.n	800d772 <_Balloc+0x6e>
 800d754:	2221      	movs	r2, #33	; 0x21
 800d756:	2104      	movs	r1, #4
 800d758:	4620      	mov	r0, r4
 800d75a:	f000 fc94 	bl	800e086 <_calloc_r>
 800d75e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d760:	60f0      	str	r0, [r6, #12]
 800d762:	68db      	ldr	r3, [r3, #12]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d1e4      	bne.n	800d732 <_Balloc+0x2e>
 800d768:	2000      	movs	r0, #0
 800d76a:	bd70      	pop	{r4, r5, r6, pc}
 800d76c:	6802      	ldr	r2, [r0, #0]
 800d76e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d772:	2300      	movs	r3, #0
 800d774:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d778:	e7f7      	b.n	800d76a <_Balloc+0x66>
 800d77a:	bf00      	nop
 800d77c:	0800f6b6 	.word	0x0800f6b6
 800d780:	0800f7b4 	.word	0x0800f7b4

0800d784 <_Bfree>:
 800d784:	b570      	push	{r4, r5, r6, lr}
 800d786:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d788:	4605      	mov	r5, r0
 800d78a:	460c      	mov	r4, r1
 800d78c:	b976      	cbnz	r6, 800d7ac <_Bfree+0x28>
 800d78e:	2010      	movs	r0, #16
 800d790:	f7ff ff90 	bl	800d6b4 <malloc>
 800d794:	4602      	mov	r2, r0
 800d796:	6268      	str	r0, [r5, #36]	; 0x24
 800d798:	b920      	cbnz	r0, 800d7a4 <_Bfree+0x20>
 800d79a:	4b09      	ldr	r3, [pc, #36]	; (800d7c0 <_Bfree+0x3c>)
 800d79c:	4809      	ldr	r0, [pc, #36]	; (800d7c4 <_Bfree+0x40>)
 800d79e:	218a      	movs	r1, #138	; 0x8a
 800d7a0:	f000 ff00 	bl	800e5a4 <__assert_func>
 800d7a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d7a8:	6006      	str	r6, [r0, #0]
 800d7aa:	60c6      	str	r6, [r0, #12]
 800d7ac:	b13c      	cbz	r4, 800d7be <_Bfree+0x3a>
 800d7ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d7b0:	6862      	ldr	r2, [r4, #4]
 800d7b2:	68db      	ldr	r3, [r3, #12]
 800d7b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d7b8:	6021      	str	r1, [r4, #0]
 800d7ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d7be:	bd70      	pop	{r4, r5, r6, pc}
 800d7c0:	0800f6b6 	.word	0x0800f6b6
 800d7c4:	0800f7b4 	.word	0x0800f7b4

0800d7c8 <__multadd>:
 800d7c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7cc:	690d      	ldr	r5, [r1, #16]
 800d7ce:	4607      	mov	r7, r0
 800d7d0:	460c      	mov	r4, r1
 800d7d2:	461e      	mov	r6, r3
 800d7d4:	f101 0c14 	add.w	ip, r1, #20
 800d7d8:	2000      	movs	r0, #0
 800d7da:	f8dc 3000 	ldr.w	r3, [ip]
 800d7de:	b299      	uxth	r1, r3
 800d7e0:	fb02 6101 	mla	r1, r2, r1, r6
 800d7e4:	0c1e      	lsrs	r6, r3, #16
 800d7e6:	0c0b      	lsrs	r3, r1, #16
 800d7e8:	fb02 3306 	mla	r3, r2, r6, r3
 800d7ec:	b289      	uxth	r1, r1
 800d7ee:	3001      	adds	r0, #1
 800d7f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d7f4:	4285      	cmp	r5, r0
 800d7f6:	f84c 1b04 	str.w	r1, [ip], #4
 800d7fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d7fe:	dcec      	bgt.n	800d7da <__multadd+0x12>
 800d800:	b30e      	cbz	r6, 800d846 <__multadd+0x7e>
 800d802:	68a3      	ldr	r3, [r4, #8]
 800d804:	42ab      	cmp	r3, r5
 800d806:	dc19      	bgt.n	800d83c <__multadd+0x74>
 800d808:	6861      	ldr	r1, [r4, #4]
 800d80a:	4638      	mov	r0, r7
 800d80c:	3101      	adds	r1, #1
 800d80e:	f7ff ff79 	bl	800d704 <_Balloc>
 800d812:	4680      	mov	r8, r0
 800d814:	b928      	cbnz	r0, 800d822 <__multadd+0x5a>
 800d816:	4602      	mov	r2, r0
 800d818:	4b0c      	ldr	r3, [pc, #48]	; (800d84c <__multadd+0x84>)
 800d81a:	480d      	ldr	r0, [pc, #52]	; (800d850 <__multadd+0x88>)
 800d81c:	21b5      	movs	r1, #181	; 0xb5
 800d81e:	f000 fec1 	bl	800e5a4 <__assert_func>
 800d822:	6922      	ldr	r2, [r4, #16]
 800d824:	3202      	adds	r2, #2
 800d826:	f104 010c 	add.w	r1, r4, #12
 800d82a:	0092      	lsls	r2, r2, #2
 800d82c:	300c      	adds	r0, #12
 800d82e:	f7ff ff5b 	bl	800d6e8 <memcpy>
 800d832:	4621      	mov	r1, r4
 800d834:	4638      	mov	r0, r7
 800d836:	f7ff ffa5 	bl	800d784 <_Bfree>
 800d83a:	4644      	mov	r4, r8
 800d83c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d840:	3501      	adds	r5, #1
 800d842:	615e      	str	r6, [r3, #20]
 800d844:	6125      	str	r5, [r4, #16]
 800d846:	4620      	mov	r0, r4
 800d848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d84c:	0800f728 	.word	0x0800f728
 800d850:	0800f7b4 	.word	0x0800f7b4

0800d854 <__s2b>:
 800d854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d858:	460c      	mov	r4, r1
 800d85a:	4615      	mov	r5, r2
 800d85c:	461f      	mov	r7, r3
 800d85e:	2209      	movs	r2, #9
 800d860:	3308      	adds	r3, #8
 800d862:	4606      	mov	r6, r0
 800d864:	fb93 f3f2 	sdiv	r3, r3, r2
 800d868:	2100      	movs	r1, #0
 800d86a:	2201      	movs	r2, #1
 800d86c:	429a      	cmp	r2, r3
 800d86e:	db09      	blt.n	800d884 <__s2b+0x30>
 800d870:	4630      	mov	r0, r6
 800d872:	f7ff ff47 	bl	800d704 <_Balloc>
 800d876:	b940      	cbnz	r0, 800d88a <__s2b+0x36>
 800d878:	4602      	mov	r2, r0
 800d87a:	4b19      	ldr	r3, [pc, #100]	; (800d8e0 <__s2b+0x8c>)
 800d87c:	4819      	ldr	r0, [pc, #100]	; (800d8e4 <__s2b+0x90>)
 800d87e:	21ce      	movs	r1, #206	; 0xce
 800d880:	f000 fe90 	bl	800e5a4 <__assert_func>
 800d884:	0052      	lsls	r2, r2, #1
 800d886:	3101      	adds	r1, #1
 800d888:	e7f0      	b.n	800d86c <__s2b+0x18>
 800d88a:	9b08      	ldr	r3, [sp, #32]
 800d88c:	6143      	str	r3, [r0, #20]
 800d88e:	2d09      	cmp	r5, #9
 800d890:	f04f 0301 	mov.w	r3, #1
 800d894:	6103      	str	r3, [r0, #16]
 800d896:	dd16      	ble.n	800d8c6 <__s2b+0x72>
 800d898:	f104 0909 	add.w	r9, r4, #9
 800d89c:	46c8      	mov	r8, r9
 800d89e:	442c      	add	r4, r5
 800d8a0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d8a4:	4601      	mov	r1, r0
 800d8a6:	3b30      	subs	r3, #48	; 0x30
 800d8a8:	220a      	movs	r2, #10
 800d8aa:	4630      	mov	r0, r6
 800d8ac:	f7ff ff8c 	bl	800d7c8 <__multadd>
 800d8b0:	45a0      	cmp	r8, r4
 800d8b2:	d1f5      	bne.n	800d8a0 <__s2b+0x4c>
 800d8b4:	f1a5 0408 	sub.w	r4, r5, #8
 800d8b8:	444c      	add	r4, r9
 800d8ba:	1b2d      	subs	r5, r5, r4
 800d8bc:	1963      	adds	r3, r4, r5
 800d8be:	42bb      	cmp	r3, r7
 800d8c0:	db04      	blt.n	800d8cc <__s2b+0x78>
 800d8c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8c6:	340a      	adds	r4, #10
 800d8c8:	2509      	movs	r5, #9
 800d8ca:	e7f6      	b.n	800d8ba <__s2b+0x66>
 800d8cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d8d0:	4601      	mov	r1, r0
 800d8d2:	3b30      	subs	r3, #48	; 0x30
 800d8d4:	220a      	movs	r2, #10
 800d8d6:	4630      	mov	r0, r6
 800d8d8:	f7ff ff76 	bl	800d7c8 <__multadd>
 800d8dc:	e7ee      	b.n	800d8bc <__s2b+0x68>
 800d8de:	bf00      	nop
 800d8e0:	0800f728 	.word	0x0800f728
 800d8e4:	0800f7b4 	.word	0x0800f7b4

0800d8e8 <__hi0bits>:
 800d8e8:	0c03      	lsrs	r3, r0, #16
 800d8ea:	041b      	lsls	r3, r3, #16
 800d8ec:	b9d3      	cbnz	r3, 800d924 <__hi0bits+0x3c>
 800d8ee:	0400      	lsls	r0, r0, #16
 800d8f0:	2310      	movs	r3, #16
 800d8f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d8f6:	bf04      	itt	eq
 800d8f8:	0200      	lsleq	r0, r0, #8
 800d8fa:	3308      	addeq	r3, #8
 800d8fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d900:	bf04      	itt	eq
 800d902:	0100      	lsleq	r0, r0, #4
 800d904:	3304      	addeq	r3, #4
 800d906:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d90a:	bf04      	itt	eq
 800d90c:	0080      	lsleq	r0, r0, #2
 800d90e:	3302      	addeq	r3, #2
 800d910:	2800      	cmp	r0, #0
 800d912:	db05      	blt.n	800d920 <__hi0bits+0x38>
 800d914:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d918:	f103 0301 	add.w	r3, r3, #1
 800d91c:	bf08      	it	eq
 800d91e:	2320      	moveq	r3, #32
 800d920:	4618      	mov	r0, r3
 800d922:	4770      	bx	lr
 800d924:	2300      	movs	r3, #0
 800d926:	e7e4      	b.n	800d8f2 <__hi0bits+0xa>

0800d928 <__lo0bits>:
 800d928:	6803      	ldr	r3, [r0, #0]
 800d92a:	f013 0207 	ands.w	r2, r3, #7
 800d92e:	4601      	mov	r1, r0
 800d930:	d00b      	beq.n	800d94a <__lo0bits+0x22>
 800d932:	07da      	lsls	r2, r3, #31
 800d934:	d423      	bmi.n	800d97e <__lo0bits+0x56>
 800d936:	0798      	lsls	r0, r3, #30
 800d938:	bf49      	itett	mi
 800d93a:	085b      	lsrmi	r3, r3, #1
 800d93c:	089b      	lsrpl	r3, r3, #2
 800d93e:	2001      	movmi	r0, #1
 800d940:	600b      	strmi	r3, [r1, #0]
 800d942:	bf5c      	itt	pl
 800d944:	600b      	strpl	r3, [r1, #0]
 800d946:	2002      	movpl	r0, #2
 800d948:	4770      	bx	lr
 800d94a:	b298      	uxth	r0, r3
 800d94c:	b9a8      	cbnz	r0, 800d97a <__lo0bits+0x52>
 800d94e:	0c1b      	lsrs	r3, r3, #16
 800d950:	2010      	movs	r0, #16
 800d952:	b2da      	uxtb	r2, r3
 800d954:	b90a      	cbnz	r2, 800d95a <__lo0bits+0x32>
 800d956:	3008      	adds	r0, #8
 800d958:	0a1b      	lsrs	r3, r3, #8
 800d95a:	071a      	lsls	r2, r3, #28
 800d95c:	bf04      	itt	eq
 800d95e:	091b      	lsreq	r3, r3, #4
 800d960:	3004      	addeq	r0, #4
 800d962:	079a      	lsls	r2, r3, #30
 800d964:	bf04      	itt	eq
 800d966:	089b      	lsreq	r3, r3, #2
 800d968:	3002      	addeq	r0, #2
 800d96a:	07da      	lsls	r2, r3, #31
 800d96c:	d403      	bmi.n	800d976 <__lo0bits+0x4e>
 800d96e:	085b      	lsrs	r3, r3, #1
 800d970:	f100 0001 	add.w	r0, r0, #1
 800d974:	d005      	beq.n	800d982 <__lo0bits+0x5a>
 800d976:	600b      	str	r3, [r1, #0]
 800d978:	4770      	bx	lr
 800d97a:	4610      	mov	r0, r2
 800d97c:	e7e9      	b.n	800d952 <__lo0bits+0x2a>
 800d97e:	2000      	movs	r0, #0
 800d980:	4770      	bx	lr
 800d982:	2020      	movs	r0, #32
 800d984:	4770      	bx	lr
	...

0800d988 <__i2b>:
 800d988:	b510      	push	{r4, lr}
 800d98a:	460c      	mov	r4, r1
 800d98c:	2101      	movs	r1, #1
 800d98e:	f7ff feb9 	bl	800d704 <_Balloc>
 800d992:	4602      	mov	r2, r0
 800d994:	b928      	cbnz	r0, 800d9a2 <__i2b+0x1a>
 800d996:	4b05      	ldr	r3, [pc, #20]	; (800d9ac <__i2b+0x24>)
 800d998:	4805      	ldr	r0, [pc, #20]	; (800d9b0 <__i2b+0x28>)
 800d99a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d99e:	f000 fe01 	bl	800e5a4 <__assert_func>
 800d9a2:	2301      	movs	r3, #1
 800d9a4:	6144      	str	r4, [r0, #20]
 800d9a6:	6103      	str	r3, [r0, #16]
 800d9a8:	bd10      	pop	{r4, pc}
 800d9aa:	bf00      	nop
 800d9ac:	0800f728 	.word	0x0800f728
 800d9b0:	0800f7b4 	.word	0x0800f7b4

0800d9b4 <__multiply>:
 800d9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9b8:	4691      	mov	r9, r2
 800d9ba:	690a      	ldr	r2, [r1, #16]
 800d9bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d9c0:	429a      	cmp	r2, r3
 800d9c2:	bfb8      	it	lt
 800d9c4:	460b      	movlt	r3, r1
 800d9c6:	460c      	mov	r4, r1
 800d9c8:	bfbc      	itt	lt
 800d9ca:	464c      	movlt	r4, r9
 800d9cc:	4699      	movlt	r9, r3
 800d9ce:	6927      	ldr	r7, [r4, #16]
 800d9d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d9d4:	68a3      	ldr	r3, [r4, #8]
 800d9d6:	6861      	ldr	r1, [r4, #4]
 800d9d8:	eb07 060a 	add.w	r6, r7, sl
 800d9dc:	42b3      	cmp	r3, r6
 800d9de:	b085      	sub	sp, #20
 800d9e0:	bfb8      	it	lt
 800d9e2:	3101      	addlt	r1, #1
 800d9e4:	f7ff fe8e 	bl	800d704 <_Balloc>
 800d9e8:	b930      	cbnz	r0, 800d9f8 <__multiply+0x44>
 800d9ea:	4602      	mov	r2, r0
 800d9ec:	4b44      	ldr	r3, [pc, #272]	; (800db00 <__multiply+0x14c>)
 800d9ee:	4845      	ldr	r0, [pc, #276]	; (800db04 <__multiply+0x150>)
 800d9f0:	f240 115d 	movw	r1, #349	; 0x15d
 800d9f4:	f000 fdd6 	bl	800e5a4 <__assert_func>
 800d9f8:	f100 0514 	add.w	r5, r0, #20
 800d9fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800da00:	462b      	mov	r3, r5
 800da02:	2200      	movs	r2, #0
 800da04:	4543      	cmp	r3, r8
 800da06:	d321      	bcc.n	800da4c <__multiply+0x98>
 800da08:	f104 0314 	add.w	r3, r4, #20
 800da0c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800da10:	f109 0314 	add.w	r3, r9, #20
 800da14:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800da18:	9202      	str	r2, [sp, #8]
 800da1a:	1b3a      	subs	r2, r7, r4
 800da1c:	3a15      	subs	r2, #21
 800da1e:	f022 0203 	bic.w	r2, r2, #3
 800da22:	3204      	adds	r2, #4
 800da24:	f104 0115 	add.w	r1, r4, #21
 800da28:	428f      	cmp	r7, r1
 800da2a:	bf38      	it	cc
 800da2c:	2204      	movcc	r2, #4
 800da2e:	9201      	str	r2, [sp, #4]
 800da30:	9a02      	ldr	r2, [sp, #8]
 800da32:	9303      	str	r3, [sp, #12]
 800da34:	429a      	cmp	r2, r3
 800da36:	d80c      	bhi.n	800da52 <__multiply+0x9e>
 800da38:	2e00      	cmp	r6, #0
 800da3a:	dd03      	ble.n	800da44 <__multiply+0x90>
 800da3c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800da40:	2b00      	cmp	r3, #0
 800da42:	d05a      	beq.n	800dafa <__multiply+0x146>
 800da44:	6106      	str	r6, [r0, #16]
 800da46:	b005      	add	sp, #20
 800da48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da4c:	f843 2b04 	str.w	r2, [r3], #4
 800da50:	e7d8      	b.n	800da04 <__multiply+0x50>
 800da52:	f8b3 a000 	ldrh.w	sl, [r3]
 800da56:	f1ba 0f00 	cmp.w	sl, #0
 800da5a:	d024      	beq.n	800daa6 <__multiply+0xf2>
 800da5c:	f104 0e14 	add.w	lr, r4, #20
 800da60:	46a9      	mov	r9, r5
 800da62:	f04f 0c00 	mov.w	ip, #0
 800da66:	f85e 2b04 	ldr.w	r2, [lr], #4
 800da6a:	f8d9 1000 	ldr.w	r1, [r9]
 800da6e:	fa1f fb82 	uxth.w	fp, r2
 800da72:	b289      	uxth	r1, r1
 800da74:	fb0a 110b 	mla	r1, sl, fp, r1
 800da78:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800da7c:	f8d9 2000 	ldr.w	r2, [r9]
 800da80:	4461      	add	r1, ip
 800da82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800da86:	fb0a c20b 	mla	r2, sl, fp, ip
 800da8a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800da8e:	b289      	uxth	r1, r1
 800da90:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800da94:	4577      	cmp	r7, lr
 800da96:	f849 1b04 	str.w	r1, [r9], #4
 800da9a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800da9e:	d8e2      	bhi.n	800da66 <__multiply+0xb2>
 800daa0:	9a01      	ldr	r2, [sp, #4]
 800daa2:	f845 c002 	str.w	ip, [r5, r2]
 800daa6:	9a03      	ldr	r2, [sp, #12]
 800daa8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800daac:	3304      	adds	r3, #4
 800daae:	f1b9 0f00 	cmp.w	r9, #0
 800dab2:	d020      	beq.n	800daf6 <__multiply+0x142>
 800dab4:	6829      	ldr	r1, [r5, #0]
 800dab6:	f104 0c14 	add.w	ip, r4, #20
 800daba:	46ae      	mov	lr, r5
 800dabc:	f04f 0a00 	mov.w	sl, #0
 800dac0:	f8bc b000 	ldrh.w	fp, [ip]
 800dac4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800dac8:	fb09 220b 	mla	r2, r9, fp, r2
 800dacc:	4492      	add	sl, r2
 800dace:	b289      	uxth	r1, r1
 800dad0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800dad4:	f84e 1b04 	str.w	r1, [lr], #4
 800dad8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800dadc:	f8be 1000 	ldrh.w	r1, [lr]
 800dae0:	0c12      	lsrs	r2, r2, #16
 800dae2:	fb09 1102 	mla	r1, r9, r2, r1
 800dae6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800daea:	4567      	cmp	r7, ip
 800daec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800daf0:	d8e6      	bhi.n	800dac0 <__multiply+0x10c>
 800daf2:	9a01      	ldr	r2, [sp, #4]
 800daf4:	50a9      	str	r1, [r5, r2]
 800daf6:	3504      	adds	r5, #4
 800daf8:	e79a      	b.n	800da30 <__multiply+0x7c>
 800dafa:	3e01      	subs	r6, #1
 800dafc:	e79c      	b.n	800da38 <__multiply+0x84>
 800dafe:	bf00      	nop
 800db00:	0800f728 	.word	0x0800f728
 800db04:	0800f7b4 	.word	0x0800f7b4

0800db08 <__pow5mult>:
 800db08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db0c:	4615      	mov	r5, r2
 800db0e:	f012 0203 	ands.w	r2, r2, #3
 800db12:	4606      	mov	r6, r0
 800db14:	460f      	mov	r7, r1
 800db16:	d007      	beq.n	800db28 <__pow5mult+0x20>
 800db18:	4c25      	ldr	r4, [pc, #148]	; (800dbb0 <__pow5mult+0xa8>)
 800db1a:	3a01      	subs	r2, #1
 800db1c:	2300      	movs	r3, #0
 800db1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800db22:	f7ff fe51 	bl	800d7c8 <__multadd>
 800db26:	4607      	mov	r7, r0
 800db28:	10ad      	asrs	r5, r5, #2
 800db2a:	d03d      	beq.n	800dba8 <__pow5mult+0xa0>
 800db2c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800db2e:	b97c      	cbnz	r4, 800db50 <__pow5mult+0x48>
 800db30:	2010      	movs	r0, #16
 800db32:	f7ff fdbf 	bl	800d6b4 <malloc>
 800db36:	4602      	mov	r2, r0
 800db38:	6270      	str	r0, [r6, #36]	; 0x24
 800db3a:	b928      	cbnz	r0, 800db48 <__pow5mult+0x40>
 800db3c:	4b1d      	ldr	r3, [pc, #116]	; (800dbb4 <__pow5mult+0xac>)
 800db3e:	481e      	ldr	r0, [pc, #120]	; (800dbb8 <__pow5mult+0xb0>)
 800db40:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800db44:	f000 fd2e 	bl	800e5a4 <__assert_func>
 800db48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800db4c:	6004      	str	r4, [r0, #0]
 800db4e:	60c4      	str	r4, [r0, #12]
 800db50:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800db54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800db58:	b94c      	cbnz	r4, 800db6e <__pow5mult+0x66>
 800db5a:	f240 2171 	movw	r1, #625	; 0x271
 800db5e:	4630      	mov	r0, r6
 800db60:	f7ff ff12 	bl	800d988 <__i2b>
 800db64:	2300      	movs	r3, #0
 800db66:	f8c8 0008 	str.w	r0, [r8, #8]
 800db6a:	4604      	mov	r4, r0
 800db6c:	6003      	str	r3, [r0, #0]
 800db6e:	f04f 0900 	mov.w	r9, #0
 800db72:	07eb      	lsls	r3, r5, #31
 800db74:	d50a      	bpl.n	800db8c <__pow5mult+0x84>
 800db76:	4639      	mov	r1, r7
 800db78:	4622      	mov	r2, r4
 800db7a:	4630      	mov	r0, r6
 800db7c:	f7ff ff1a 	bl	800d9b4 <__multiply>
 800db80:	4639      	mov	r1, r7
 800db82:	4680      	mov	r8, r0
 800db84:	4630      	mov	r0, r6
 800db86:	f7ff fdfd 	bl	800d784 <_Bfree>
 800db8a:	4647      	mov	r7, r8
 800db8c:	106d      	asrs	r5, r5, #1
 800db8e:	d00b      	beq.n	800dba8 <__pow5mult+0xa0>
 800db90:	6820      	ldr	r0, [r4, #0]
 800db92:	b938      	cbnz	r0, 800dba4 <__pow5mult+0x9c>
 800db94:	4622      	mov	r2, r4
 800db96:	4621      	mov	r1, r4
 800db98:	4630      	mov	r0, r6
 800db9a:	f7ff ff0b 	bl	800d9b4 <__multiply>
 800db9e:	6020      	str	r0, [r4, #0]
 800dba0:	f8c0 9000 	str.w	r9, [r0]
 800dba4:	4604      	mov	r4, r0
 800dba6:	e7e4      	b.n	800db72 <__pow5mult+0x6a>
 800dba8:	4638      	mov	r0, r7
 800dbaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dbae:	bf00      	nop
 800dbb0:	0800f900 	.word	0x0800f900
 800dbb4:	0800f6b6 	.word	0x0800f6b6
 800dbb8:	0800f7b4 	.word	0x0800f7b4

0800dbbc <__lshift>:
 800dbbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbc0:	460c      	mov	r4, r1
 800dbc2:	6849      	ldr	r1, [r1, #4]
 800dbc4:	6923      	ldr	r3, [r4, #16]
 800dbc6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dbca:	68a3      	ldr	r3, [r4, #8]
 800dbcc:	4607      	mov	r7, r0
 800dbce:	4691      	mov	r9, r2
 800dbd0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dbd4:	f108 0601 	add.w	r6, r8, #1
 800dbd8:	42b3      	cmp	r3, r6
 800dbda:	db0b      	blt.n	800dbf4 <__lshift+0x38>
 800dbdc:	4638      	mov	r0, r7
 800dbde:	f7ff fd91 	bl	800d704 <_Balloc>
 800dbe2:	4605      	mov	r5, r0
 800dbe4:	b948      	cbnz	r0, 800dbfa <__lshift+0x3e>
 800dbe6:	4602      	mov	r2, r0
 800dbe8:	4b2a      	ldr	r3, [pc, #168]	; (800dc94 <__lshift+0xd8>)
 800dbea:	482b      	ldr	r0, [pc, #172]	; (800dc98 <__lshift+0xdc>)
 800dbec:	f240 11d9 	movw	r1, #473	; 0x1d9
 800dbf0:	f000 fcd8 	bl	800e5a4 <__assert_func>
 800dbf4:	3101      	adds	r1, #1
 800dbf6:	005b      	lsls	r3, r3, #1
 800dbf8:	e7ee      	b.n	800dbd8 <__lshift+0x1c>
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	f100 0114 	add.w	r1, r0, #20
 800dc00:	f100 0210 	add.w	r2, r0, #16
 800dc04:	4618      	mov	r0, r3
 800dc06:	4553      	cmp	r3, sl
 800dc08:	db37      	blt.n	800dc7a <__lshift+0xbe>
 800dc0a:	6920      	ldr	r0, [r4, #16]
 800dc0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dc10:	f104 0314 	add.w	r3, r4, #20
 800dc14:	f019 091f 	ands.w	r9, r9, #31
 800dc18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dc1c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800dc20:	d02f      	beq.n	800dc82 <__lshift+0xc6>
 800dc22:	f1c9 0e20 	rsb	lr, r9, #32
 800dc26:	468a      	mov	sl, r1
 800dc28:	f04f 0c00 	mov.w	ip, #0
 800dc2c:	681a      	ldr	r2, [r3, #0]
 800dc2e:	fa02 f209 	lsl.w	r2, r2, r9
 800dc32:	ea42 020c 	orr.w	r2, r2, ip
 800dc36:	f84a 2b04 	str.w	r2, [sl], #4
 800dc3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc3e:	4298      	cmp	r0, r3
 800dc40:	fa22 fc0e 	lsr.w	ip, r2, lr
 800dc44:	d8f2      	bhi.n	800dc2c <__lshift+0x70>
 800dc46:	1b03      	subs	r3, r0, r4
 800dc48:	3b15      	subs	r3, #21
 800dc4a:	f023 0303 	bic.w	r3, r3, #3
 800dc4e:	3304      	adds	r3, #4
 800dc50:	f104 0215 	add.w	r2, r4, #21
 800dc54:	4290      	cmp	r0, r2
 800dc56:	bf38      	it	cc
 800dc58:	2304      	movcc	r3, #4
 800dc5a:	f841 c003 	str.w	ip, [r1, r3]
 800dc5e:	f1bc 0f00 	cmp.w	ip, #0
 800dc62:	d001      	beq.n	800dc68 <__lshift+0xac>
 800dc64:	f108 0602 	add.w	r6, r8, #2
 800dc68:	3e01      	subs	r6, #1
 800dc6a:	4638      	mov	r0, r7
 800dc6c:	612e      	str	r6, [r5, #16]
 800dc6e:	4621      	mov	r1, r4
 800dc70:	f7ff fd88 	bl	800d784 <_Bfree>
 800dc74:	4628      	mov	r0, r5
 800dc76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc7a:	f842 0f04 	str.w	r0, [r2, #4]!
 800dc7e:	3301      	adds	r3, #1
 800dc80:	e7c1      	b.n	800dc06 <__lshift+0x4a>
 800dc82:	3904      	subs	r1, #4
 800dc84:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc88:	f841 2f04 	str.w	r2, [r1, #4]!
 800dc8c:	4298      	cmp	r0, r3
 800dc8e:	d8f9      	bhi.n	800dc84 <__lshift+0xc8>
 800dc90:	e7ea      	b.n	800dc68 <__lshift+0xac>
 800dc92:	bf00      	nop
 800dc94:	0800f728 	.word	0x0800f728
 800dc98:	0800f7b4 	.word	0x0800f7b4

0800dc9c <__mcmp>:
 800dc9c:	b530      	push	{r4, r5, lr}
 800dc9e:	6902      	ldr	r2, [r0, #16]
 800dca0:	690c      	ldr	r4, [r1, #16]
 800dca2:	1b12      	subs	r2, r2, r4
 800dca4:	d10e      	bne.n	800dcc4 <__mcmp+0x28>
 800dca6:	f100 0314 	add.w	r3, r0, #20
 800dcaa:	3114      	adds	r1, #20
 800dcac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800dcb0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800dcb4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800dcb8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800dcbc:	42a5      	cmp	r5, r4
 800dcbe:	d003      	beq.n	800dcc8 <__mcmp+0x2c>
 800dcc0:	d305      	bcc.n	800dcce <__mcmp+0x32>
 800dcc2:	2201      	movs	r2, #1
 800dcc4:	4610      	mov	r0, r2
 800dcc6:	bd30      	pop	{r4, r5, pc}
 800dcc8:	4283      	cmp	r3, r0
 800dcca:	d3f3      	bcc.n	800dcb4 <__mcmp+0x18>
 800dccc:	e7fa      	b.n	800dcc4 <__mcmp+0x28>
 800dcce:	f04f 32ff 	mov.w	r2, #4294967295
 800dcd2:	e7f7      	b.n	800dcc4 <__mcmp+0x28>

0800dcd4 <__mdiff>:
 800dcd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcd8:	460c      	mov	r4, r1
 800dcda:	4606      	mov	r6, r0
 800dcdc:	4611      	mov	r1, r2
 800dcde:	4620      	mov	r0, r4
 800dce0:	4690      	mov	r8, r2
 800dce2:	f7ff ffdb 	bl	800dc9c <__mcmp>
 800dce6:	1e05      	subs	r5, r0, #0
 800dce8:	d110      	bne.n	800dd0c <__mdiff+0x38>
 800dcea:	4629      	mov	r1, r5
 800dcec:	4630      	mov	r0, r6
 800dcee:	f7ff fd09 	bl	800d704 <_Balloc>
 800dcf2:	b930      	cbnz	r0, 800dd02 <__mdiff+0x2e>
 800dcf4:	4b3a      	ldr	r3, [pc, #232]	; (800dde0 <__mdiff+0x10c>)
 800dcf6:	4602      	mov	r2, r0
 800dcf8:	f240 2132 	movw	r1, #562	; 0x232
 800dcfc:	4839      	ldr	r0, [pc, #228]	; (800dde4 <__mdiff+0x110>)
 800dcfe:	f000 fc51 	bl	800e5a4 <__assert_func>
 800dd02:	2301      	movs	r3, #1
 800dd04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dd08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd0c:	bfa4      	itt	ge
 800dd0e:	4643      	movge	r3, r8
 800dd10:	46a0      	movge	r8, r4
 800dd12:	4630      	mov	r0, r6
 800dd14:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dd18:	bfa6      	itte	ge
 800dd1a:	461c      	movge	r4, r3
 800dd1c:	2500      	movge	r5, #0
 800dd1e:	2501      	movlt	r5, #1
 800dd20:	f7ff fcf0 	bl	800d704 <_Balloc>
 800dd24:	b920      	cbnz	r0, 800dd30 <__mdiff+0x5c>
 800dd26:	4b2e      	ldr	r3, [pc, #184]	; (800dde0 <__mdiff+0x10c>)
 800dd28:	4602      	mov	r2, r0
 800dd2a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800dd2e:	e7e5      	b.n	800dcfc <__mdiff+0x28>
 800dd30:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dd34:	6926      	ldr	r6, [r4, #16]
 800dd36:	60c5      	str	r5, [r0, #12]
 800dd38:	f104 0914 	add.w	r9, r4, #20
 800dd3c:	f108 0514 	add.w	r5, r8, #20
 800dd40:	f100 0e14 	add.w	lr, r0, #20
 800dd44:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800dd48:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800dd4c:	f108 0210 	add.w	r2, r8, #16
 800dd50:	46f2      	mov	sl, lr
 800dd52:	2100      	movs	r1, #0
 800dd54:	f859 3b04 	ldr.w	r3, [r9], #4
 800dd58:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dd5c:	fa1f f883 	uxth.w	r8, r3
 800dd60:	fa11 f18b 	uxtah	r1, r1, fp
 800dd64:	0c1b      	lsrs	r3, r3, #16
 800dd66:	eba1 0808 	sub.w	r8, r1, r8
 800dd6a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dd6e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dd72:	fa1f f888 	uxth.w	r8, r8
 800dd76:	1419      	asrs	r1, r3, #16
 800dd78:	454e      	cmp	r6, r9
 800dd7a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dd7e:	f84a 3b04 	str.w	r3, [sl], #4
 800dd82:	d8e7      	bhi.n	800dd54 <__mdiff+0x80>
 800dd84:	1b33      	subs	r3, r6, r4
 800dd86:	3b15      	subs	r3, #21
 800dd88:	f023 0303 	bic.w	r3, r3, #3
 800dd8c:	3304      	adds	r3, #4
 800dd8e:	3415      	adds	r4, #21
 800dd90:	42a6      	cmp	r6, r4
 800dd92:	bf38      	it	cc
 800dd94:	2304      	movcc	r3, #4
 800dd96:	441d      	add	r5, r3
 800dd98:	4473      	add	r3, lr
 800dd9a:	469e      	mov	lr, r3
 800dd9c:	462e      	mov	r6, r5
 800dd9e:	4566      	cmp	r6, ip
 800dda0:	d30e      	bcc.n	800ddc0 <__mdiff+0xec>
 800dda2:	f10c 0203 	add.w	r2, ip, #3
 800dda6:	1b52      	subs	r2, r2, r5
 800dda8:	f022 0203 	bic.w	r2, r2, #3
 800ddac:	3d03      	subs	r5, #3
 800ddae:	45ac      	cmp	ip, r5
 800ddb0:	bf38      	it	cc
 800ddb2:	2200      	movcc	r2, #0
 800ddb4:	441a      	add	r2, r3
 800ddb6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ddba:	b17b      	cbz	r3, 800dddc <__mdiff+0x108>
 800ddbc:	6107      	str	r7, [r0, #16]
 800ddbe:	e7a3      	b.n	800dd08 <__mdiff+0x34>
 800ddc0:	f856 8b04 	ldr.w	r8, [r6], #4
 800ddc4:	fa11 f288 	uxtah	r2, r1, r8
 800ddc8:	1414      	asrs	r4, r2, #16
 800ddca:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ddce:	b292      	uxth	r2, r2
 800ddd0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ddd4:	f84e 2b04 	str.w	r2, [lr], #4
 800ddd8:	1421      	asrs	r1, r4, #16
 800ddda:	e7e0      	b.n	800dd9e <__mdiff+0xca>
 800dddc:	3f01      	subs	r7, #1
 800ddde:	e7ea      	b.n	800ddb6 <__mdiff+0xe2>
 800dde0:	0800f728 	.word	0x0800f728
 800dde4:	0800f7b4 	.word	0x0800f7b4

0800dde8 <__ulp>:
 800dde8:	b082      	sub	sp, #8
 800ddea:	ed8d 0b00 	vstr	d0, [sp]
 800ddee:	9b01      	ldr	r3, [sp, #4]
 800ddf0:	4912      	ldr	r1, [pc, #72]	; (800de3c <__ulp+0x54>)
 800ddf2:	4019      	ands	r1, r3
 800ddf4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800ddf8:	2900      	cmp	r1, #0
 800ddfa:	dd05      	ble.n	800de08 <__ulp+0x20>
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	460b      	mov	r3, r1
 800de00:	ec43 2b10 	vmov	d0, r2, r3
 800de04:	b002      	add	sp, #8
 800de06:	4770      	bx	lr
 800de08:	4249      	negs	r1, r1
 800de0a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800de0e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800de12:	f04f 0200 	mov.w	r2, #0
 800de16:	f04f 0300 	mov.w	r3, #0
 800de1a:	da04      	bge.n	800de26 <__ulp+0x3e>
 800de1c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800de20:	fa41 f300 	asr.w	r3, r1, r0
 800de24:	e7ec      	b.n	800de00 <__ulp+0x18>
 800de26:	f1a0 0114 	sub.w	r1, r0, #20
 800de2a:	291e      	cmp	r1, #30
 800de2c:	bfda      	itte	le
 800de2e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800de32:	fa20 f101 	lsrle.w	r1, r0, r1
 800de36:	2101      	movgt	r1, #1
 800de38:	460a      	mov	r2, r1
 800de3a:	e7e1      	b.n	800de00 <__ulp+0x18>
 800de3c:	7ff00000 	.word	0x7ff00000

0800de40 <__b2d>:
 800de40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de42:	6905      	ldr	r5, [r0, #16]
 800de44:	f100 0714 	add.w	r7, r0, #20
 800de48:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800de4c:	1f2e      	subs	r6, r5, #4
 800de4e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800de52:	4620      	mov	r0, r4
 800de54:	f7ff fd48 	bl	800d8e8 <__hi0bits>
 800de58:	f1c0 0320 	rsb	r3, r0, #32
 800de5c:	280a      	cmp	r0, #10
 800de5e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800dedc <__b2d+0x9c>
 800de62:	600b      	str	r3, [r1, #0]
 800de64:	dc14      	bgt.n	800de90 <__b2d+0x50>
 800de66:	f1c0 0e0b 	rsb	lr, r0, #11
 800de6a:	fa24 f10e 	lsr.w	r1, r4, lr
 800de6e:	42b7      	cmp	r7, r6
 800de70:	ea41 030c 	orr.w	r3, r1, ip
 800de74:	bf34      	ite	cc
 800de76:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800de7a:	2100      	movcs	r1, #0
 800de7c:	3015      	adds	r0, #21
 800de7e:	fa04 f000 	lsl.w	r0, r4, r0
 800de82:	fa21 f10e 	lsr.w	r1, r1, lr
 800de86:	ea40 0201 	orr.w	r2, r0, r1
 800de8a:	ec43 2b10 	vmov	d0, r2, r3
 800de8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de90:	42b7      	cmp	r7, r6
 800de92:	bf3a      	itte	cc
 800de94:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800de98:	f1a5 0608 	subcc.w	r6, r5, #8
 800de9c:	2100      	movcs	r1, #0
 800de9e:	380b      	subs	r0, #11
 800dea0:	d017      	beq.n	800ded2 <__b2d+0x92>
 800dea2:	f1c0 0c20 	rsb	ip, r0, #32
 800dea6:	fa04 f500 	lsl.w	r5, r4, r0
 800deaa:	42be      	cmp	r6, r7
 800deac:	fa21 f40c 	lsr.w	r4, r1, ip
 800deb0:	ea45 0504 	orr.w	r5, r5, r4
 800deb4:	bf8c      	ite	hi
 800deb6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800deba:	2400      	movls	r4, #0
 800debc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800dec0:	fa01 f000 	lsl.w	r0, r1, r0
 800dec4:	fa24 f40c 	lsr.w	r4, r4, ip
 800dec8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800decc:	ea40 0204 	orr.w	r2, r0, r4
 800ded0:	e7db      	b.n	800de8a <__b2d+0x4a>
 800ded2:	ea44 030c 	orr.w	r3, r4, ip
 800ded6:	460a      	mov	r2, r1
 800ded8:	e7d7      	b.n	800de8a <__b2d+0x4a>
 800deda:	bf00      	nop
 800dedc:	3ff00000 	.word	0x3ff00000

0800dee0 <__d2b>:
 800dee0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dee4:	4689      	mov	r9, r1
 800dee6:	2101      	movs	r1, #1
 800dee8:	ec57 6b10 	vmov	r6, r7, d0
 800deec:	4690      	mov	r8, r2
 800deee:	f7ff fc09 	bl	800d704 <_Balloc>
 800def2:	4604      	mov	r4, r0
 800def4:	b930      	cbnz	r0, 800df04 <__d2b+0x24>
 800def6:	4602      	mov	r2, r0
 800def8:	4b25      	ldr	r3, [pc, #148]	; (800df90 <__d2b+0xb0>)
 800defa:	4826      	ldr	r0, [pc, #152]	; (800df94 <__d2b+0xb4>)
 800defc:	f240 310a 	movw	r1, #778	; 0x30a
 800df00:	f000 fb50 	bl	800e5a4 <__assert_func>
 800df04:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800df08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800df0c:	bb35      	cbnz	r5, 800df5c <__d2b+0x7c>
 800df0e:	2e00      	cmp	r6, #0
 800df10:	9301      	str	r3, [sp, #4]
 800df12:	d028      	beq.n	800df66 <__d2b+0x86>
 800df14:	4668      	mov	r0, sp
 800df16:	9600      	str	r6, [sp, #0]
 800df18:	f7ff fd06 	bl	800d928 <__lo0bits>
 800df1c:	9900      	ldr	r1, [sp, #0]
 800df1e:	b300      	cbz	r0, 800df62 <__d2b+0x82>
 800df20:	9a01      	ldr	r2, [sp, #4]
 800df22:	f1c0 0320 	rsb	r3, r0, #32
 800df26:	fa02 f303 	lsl.w	r3, r2, r3
 800df2a:	430b      	orrs	r3, r1
 800df2c:	40c2      	lsrs	r2, r0
 800df2e:	6163      	str	r3, [r4, #20]
 800df30:	9201      	str	r2, [sp, #4]
 800df32:	9b01      	ldr	r3, [sp, #4]
 800df34:	61a3      	str	r3, [r4, #24]
 800df36:	2b00      	cmp	r3, #0
 800df38:	bf14      	ite	ne
 800df3a:	2202      	movne	r2, #2
 800df3c:	2201      	moveq	r2, #1
 800df3e:	6122      	str	r2, [r4, #16]
 800df40:	b1d5      	cbz	r5, 800df78 <__d2b+0x98>
 800df42:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800df46:	4405      	add	r5, r0
 800df48:	f8c9 5000 	str.w	r5, [r9]
 800df4c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800df50:	f8c8 0000 	str.w	r0, [r8]
 800df54:	4620      	mov	r0, r4
 800df56:	b003      	add	sp, #12
 800df58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800df60:	e7d5      	b.n	800df0e <__d2b+0x2e>
 800df62:	6161      	str	r1, [r4, #20]
 800df64:	e7e5      	b.n	800df32 <__d2b+0x52>
 800df66:	a801      	add	r0, sp, #4
 800df68:	f7ff fcde 	bl	800d928 <__lo0bits>
 800df6c:	9b01      	ldr	r3, [sp, #4]
 800df6e:	6163      	str	r3, [r4, #20]
 800df70:	2201      	movs	r2, #1
 800df72:	6122      	str	r2, [r4, #16]
 800df74:	3020      	adds	r0, #32
 800df76:	e7e3      	b.n	800df40 <__d2b+0x60>
 800df78:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800df7c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800df80:	f8c9 0000 	str.w	r0, [r9]
 800df84:	6918      	ldr	r0, [r3, #16]
 800df86:	f7ff fcaf 	bl	800d8e8 <__hi0bits>
 800df8a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800df8e:	e7df      	b.n	800df50 <__d2b+0x70>
 800df90:	0800f728 	.word	0x0800f728
 800df94:	0800f7b4 	.word	0x0800f7b4

0800df98 <__ratio>:
 800df98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df9c:	4688      	mov	r8, r1
 800df9e:	4669      	mov	r1, sp
 800dfa0:	4681      	mov	r9, r0
 800dfa2:	f7ff ff4d 	bl	800de40 <__b2d>
 800dfa6:	a901      	add	r1, sp, #4
 800dfa8:	4640      	mov	r0, r8
 800dfaa:	ec55 4b10 	vmov	r4, r5, d0
 800dfae:	f7ff ff47 	bl	800de40 <__b2d>
 800dfb2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dfb6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800dfba:	eba3 0c02 	sub.w	ip, r3, r2
 800dfbe:	e9dd 3200 	ldrd	r3, r2, [sp]
 800dfc2:	1a9b      	subs	r3, r3, r2
 800dfc4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800dfc8:	ec51 0b10 	vmov	r0, r1, d0
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	bfd6      	itet	le
 800dfd0:	460a      	movle	r2, r1
 800dfd2:	462a      	movgt	r2, r5
 800dfd4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800dfd8:	468b      	mov	fp, r1
 800dfda:	462f      	mov	r7, r5
 800dfdc:	bfd4      	ite	le
 800dfde:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800dfe2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800dfe6:	4620      	mov	r0, r4
 800dfe8:	ee10 2a10 	vmov	r2, s0
 800dfec:	465b      	mov	r3, fp
 800dfee:	4639      	mov	r1, r7
 800dff0:	f7f2 fc44 	bl	800087c <__aeabi_ddiv>
 800dff4:	ec41 0b10 	vmov	d0, r0, r1
 800dff8:	b003      	add	sp, #12
 800dffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dffe <__copybits>:
 800dffe:	3901      	subs	r1, #1
 800e000:	b570      	push	{r4, r5, r6, lr}
 800e002:	1149      	asrs	r1, r1, #5
 800e004:	6914      	ldr	r4, [r2, #16]
 800e006:	3101      	adds	r1, #1
 800e008:	f102 0314 	add.w	r3, r2, #20
 800e00c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e010:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e014:	1f05      	subs	r5, r0, #4
 800e016:	42a3      	cmp	r3, r4
 800e018:	d30c      	bcc.n	800e034 <__copybits+0x36>
 800e01a:	1aa3      	subs	r3, r4, r2
 800e01c:	3b11      	subs	r3, #17
 800e01e:	f023 0303 	bic.w	r3, r3, #3
 800e022:	3211      	adds	r2, #17
 800e024:	42a2      	cmp	r2, r4
 800e026:	bf88      	it	hi
 800e028:	2300      	movhi	r3, #0
 800e02a:	4418      	add	r0, r3
 800e02c:	2300      	movs	r3, #0
 800e02e:	4288      	cmp	r0, r1
 800e030:	d305      	bcc.n	800e03e <__copybits+0x40>
 800e032:	bd70      	pop	{r4, r5, r6, pc}
 800e034:	f853 6b04 	ldr.w	r6, [r3], #4
 800e038:	f845 6f04 	str.w	r6, [r5, #4]!
 800e03c:	e7eb      	b.n	800e016 <__copybits+0x18>
 800e03e:	f840 3b04 	str.w	r3, [r0], #4
 800e042:	e7f4      	b.n	800e02e <__copybits+0x30>

0800e044 <__any_on>:
 800e044:	f100 0214 	add.w	r2, r0, #20
 800e048:	6900      	ldr	r0, [r0, #16]
 800e04a:	114b      	asrs	r3, r1, #5
 800e04c:	4298      	cmp	r0, r3
 800e04e:	b510      	push	{r4, lr}
 800e050:	db11      	blt.n	800e076 <__any_on+0x32>
 800e052:	dd0a      	ble.n	800e06a <__any_on+0x26>
 800e054:	f011 011f 	ands.w	r1, r1, #31
 800e058:	d007      	beq.n	800e06a <__any_on+0x26>
 800e05a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e05e:	fa24 f001 	lsr.w	r0, r4, r1
 800e062:	fa00 f101 	lsl.w	r1, r0, r1
 800e066:	428c      	cmp	r4, r1
 800e068:	d10b      	bne.n	800e082 <__any_on+0x3e>
 800e06a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e06e:	4293      	cmp	r3, r2
 800e070:	d803      	bhi.n	800e07a <__any_on+0x36>
 800e072:	2000      	movs	r0, #0
 800e074:	bd10      	pop	{r4, pc}
 800e076:	4603      	mov	r3, r0
 800e078:	e7f7      	b.n	800e06a <__any_on+0x26>
 800e07a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e07e:	2900      	cmp	r1, #0
 800e080:	d0f5      	beq.n	800e06e <__any_on+0x2a>
 800e082:	2001      	movs	r0, #1
 800e084:	e7f6      	b.n	800e074 <__any_on+0x30>

0800e086 <_calloc_r>:
 800e086:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e088:	fba1 2402 	umull	r2, r4, r1, r2
 800e08c:	b94c      	cbnz	r4, 800e0a2 <_calloc_r+0x1c>
 800e08e:	4611      	mov	r1, r2
 800e090:	9201      	str	r2, [sp, #4]
 800e092:	f000 f87b 	bl	800e18c <_malloc_r>
 800e096:	9a01      	ldr	r2, [sp, #4]
 800e098:	4605      	mov	r5, r0
 800e09a:	b930      	cbnz	r0, 800e0aa <_calloc_r+0x24>
 800e09c:	4628      	mov	r0, r5
 800e09e:	b003      	add	sp, #12
 800e0a0:	bd30      	pop	{r4, r5, pc}
 800e0a2:	220c      	movs	r2, #12
 800e0a4:	6002      	str	r2, [r0, #0]
 800e0a6:	2500      	movs	r5, #0
 800e0a8:	e7f8      	b.n	800e09c <_calloc_r+0x16>
 800e0aa:	4621      	mov	r1, r4
 800e0ac:	f7fc fbc0 	bl	800a830 <memset>
 800e0b0:	e7f4      	b.n	800e09c <_calloc_r+0x16>
	...

0800e0b4 <_free_r>:
 800e0b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e0b6:	2900      	cmp	r1, #0
 800e0b8:	d044      	beq.n	800e144 <_free_r+0x90>
 800e0ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0be:	9001      	str	r0, [sp, #4]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	f1a1 0404 	sub.w	r4, r1, #4
 800e0c6:	bfb8      	it	lt
 800e0c8:	18e4      	addlt	r4, r4, r3
 800e0ca:	f000 fab5 	bl	800e638 <__malloc_lock>
 800e0ce:	4a1e      	ldr	r2, [pc, #120]	; (800e148 <_free_r+0x94>)
 800e0d0:	9801      	ldr	r0, [sp, #4]
 800e0d2:	6813      	ldr	r3, [r2, #0]
 800e0d4:	b933      	cbnz	r3, 800e0e4 <_free_r+0x30>
 800e0d6:	6063      	str	r3, [r4, #4]
 800e0d8:	6014      	str	r4, [r2, #0]
 800e0da:	b003      	add	sp, #12
 800e0dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e0e0:	f000 bab0 	b.w	800e644 <__malloc_unlock>
 800e0e4:	42a3      	cmp	r3, r4
 800e0e6:	d908      	bls.n	800e0fa <_free_r+0x46>
 800e0e8:	6825      	ldr	r5, [r4, #0]
 800e0ea:	1961      	adds	r1, r4, r5
 800e0ec:	428b      	cmp	r3, r1
 800e0ee:	bf01      	itttt	eq
 800e0f0:	6819      	ldreq	r1, [r3, #0]
 800e0f2:	685b      	ldreq	r3, [r3, #4]
 800e0f4:	1949      	addeq	r1, r1, r5
 800e0f6:	6021      	streq	r1, [r4, #0]
 800e0f8:	e7ed      	b.n	800e0d6 <_free_r+0x22>
 800e0fa:	461a      	mov	r2, r3
 800e0fc:	685b      	ldr	r3, [r3, #4]
 800e0fe:	b10b      	cbz	r3, 800e104 <_free_r+0x50>
 800e100:	42a3      	cmp	r3, r4
 800e102:	d9fa      	bls.n	800e0fa <_free_r+0x46>
 800e104:	6811      	ldr	r1, [r2, #0]
 800e106:	1855      	adds	r5, r2, r1
 800e108:	42a5      	cmp	r5, r4
 800e10a:	d10b      	bne.n	800e124 <_free_r+0x70>
 800e10c:	6824      	ldr	r4, [r4, #0]
 800e10e:	4421      	add	r1, r4
 800e110:	1854      	adds	r4, r2, r1
 800e112:	42a3      	cmp	r3, r4
 800e114:	6011      	str	r1, [r2, #0]
 800e116:	d1e0      	bne.n	800e0da <_free_r+0x26>
 800e118:	681c      	ldr	r4, [r3, #0]
 800e11a:	685b      	ldr	r3, [r3, #4]
 800e11c:	6053      	str	r3, [r2, #4]
 800e11e:	4421      	add	r1, r4
 800e120:	6011      	str	r1, [r2, #0]
 800e122:	e7da      	b.n	800e0da <_free_r+0x26>
 800e124:	d902      	bls.n	800e12c <_free_r+0x78>
 800e126:	230c      	movs	r3, #12
 800e128:	6003      	str	r3, [r0, #0]
 800e12a:	e7d6      	b.n	800e0da <_free_r+0x26>
 800e12c:	6825      	ldr	r5, [r4, #0]
 800e12e:	1961      	adds	r1, r4, r5
 800e130:	428b      	cmp	r3, r1
 800e132:	bf04      	itt	eq
 800e134:	6819      	ldreq	r1, [r3, #0]
 800e136:	685b      	ldreq	r3, [r3, #4]
 800e138:	6063      	str	r3, [r4, #4]
 800e13a:	bf04      	itt	eq
 800e13c:	1949      	addeq	r1, r1, r5
 800e13e:	6021      	streq	r1, [r4, #0]
 800e140:	6054      	str	r4, [r2, #4]
 800e142:	e7ca      	b.n	800e0da <_free_r+0x26>
 800e144:	b003      	add	sp, #12
 800e146:	bd30      	pop	{r4, r5, pc}
 800e148:	20004670 	.word	0x20004670

0800e14c <sbrk_aligned>:
 800e14c:	b570      	push	{r4, r5, r6, lr}
 800e14e:	4e0e      	ldr	r6, [pc, #56]	; (800e188 <sbrk_aligned+0x3c>)
 800e150:	460c      	mov	r4, r1
 800e152:	6831      	ldr	r1, [r6, #0]
 800e154:	4605      	mov	r5, r0
 800e156:	b911      	cbnz	r1, 800e15e <sbrk_aligned+0x12>
 800e158:	f000 f9f2 	bl	800e540 <_sbrk_r>
 800e15c:	6030      	str	r0, [r6, #0]
 800e15e:	4621      	mov	r1, r4
 800e160:	4628      	mov	r0, r5
 800e162:	f000 f9ed 	bl	800e540 <_sbrk_r>
 800e166:	1c43      	adds	r3, r0, #1
 800e168:	d00a      	beq.n	800e180 <sbrk_aligned+0x34>
 800e16a:	1cc4      	adds	r4, r0, #3
 800e16c:	f024 0403 	bic.w	r4, r4, #3
 800e170:	42a0      	cmp	r0, r4
 800e172:	d007      	beq.n	800e184 <sbrk_aligned+0x38>
 800e174:	1a21      	subs	r1, r4, r0
 800e176:	4628      	mov	r0, r5
 800e178:	f000 f9e2 	bl	800e540 <_sbrk_r>
 800e17c:	3001      	adds	r0, #1
 800e17e:	d101      	bne.n	800e184 <sbrk_aligned+0x38>
 800e180:	f04f 34ff 	mov.w	r4, #4294967295
 800e184:	4620      	mov	r0, r4
 800e186:	bd70      	pop	{r4, r5, r6, pc}
 800e188:	20004674 	.word	0x20004674

0800e18c <_malloc_r>:
 800e18c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e190:	1ccd      	adds	r5, r1, #3
 800e192:	f025 0503 	bic.w	r5, r5, #3
 800e196:	3508      	adds	r5, #8
 800e198:	2d0c      	cmp	r5, #12
 800e19a:	bf38      	it	cc
 800e19c:	250c      	movcc	r5, #12
 800e19e:	2d00      	cmp	r5, #0
 800e1a0:	4607      	mov	r7, r0
 800e1a2:	db01      	blt.n	800e1a8 <_malloc_r+0x1c>
 800e1a4:	42a9      	cmp	r1, r5
 800e1a6:	d905      	bls.n	800e1b4 <_malloc_r+0x28>
 800e1a8:	230c      	movs	r3, #12
 800e1aa:	603b      	str	r3, [r7, #0]
 800e1ac:	2600      	movs	r6, #0
 800e1ae:	4630      	mov	r0, r6
 800e1b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1b4:	4e2e      	ldr	r6, [pc, #184]	; (800e270 <_malloc_r+0xe4>)
 800e1b6:	f000 fa3f 	bl	800e638 <__malloc_lock>
 800e1ba:	6833      	ldr	r3, [r6, #0]
 800e1bc:	461c      	mov	r4, r3
 800e1be:	bb34      	cbnz	r4, 800e20e <_malloc_r+0x82>
 800e1c0:	4629      	mov	r1, r5
 800e1c2:	4638      	mov	r0, r7
 800e1c4:	f7ff ffc2 	bl	800e14c <sbrk_aligned>
 800e1c8:	1c43      	adds	r3, r0, #1
 800e1ca:	4604      	mov	r4, r0
 800e1cc:	d14d      	bne.n	800e26a <_malloc_r+0xde>
 800e1ce:	6834      	ldr	r4, [r6, #0]
 800e1d0:	4626      	mov	r6, r4
 800e1d2:	2e00      	cmp	r6, #0
 800e1d4:	d140      	bne.n	800e258 <_malloc_r+0xcc>
 800e1d6:	6823      	ldr	r3, [r4, #0]
 800e1d8:	4631      	mov	r1, r6
 800e1da:	4638      	mov	r0, r7
 800e1dc:	eb04 0803 	add.w	r8, r4, r3
 800e1e0:	f000 f9ae 	bl	800e540 <_sbrk_r>
 800e1e4:	4580      	cmp	r8, r0
 800e1e6:	d13a      	bne.n	800e25e <_malloc_r+0xd2>
 800e1e8:	6821      	ldr	r1, [r4, #0]
 800e1ea:	3503      	adds	r5, #3
 800e1ec:	1a6d      	subs	r5, r5, r1
 800e1ee:	f025 0503 	bic.w	r5, r5, #3
 800e1f2:	3508      	adds	r5, #8
 800e1f4:	2d0c      	cmp	r5, #12
 800e1f6:	bf38      	it	cc
 800e1f8:	250c      	movcc	r5, #12
 800e1fa:	4629      	mov	r1, r5
 800e1fc:	4638      	mov	r0, r7
 800e1fe:	f7ff ffa5 	bl	800e14c <sbrk_aligned>
 800e202:	3001      	adds	r0, #1
 800e204:	d02b      	beq.n	800e25e <_malloc_r+0xd2>
 800e206:	6823      	ldr	r3, [r4, #0]
 800e208:	442b      	add	r3, r5
 800e20a:	6023      	str	r3, [r4, #0]
 800e20c:	e00e      	b.n	800e22c <_malloc_r+0xa0>
 800e20e:	6822      	ldr	r2, [r4, #0]
 800e210:	1b52      	subs	r2, r2, r5
 800e212:	d41e      	bmi.n	800e252 <_malloc_r+0xc6>
 800e214:	2a0b      	cmp	r2, #11
 800e216:	d916      	bls.n	800e246 <_malloc_r+0xba>
 800e218:	1961      	adds	r1, r4, r5
 800e21a:	42a3      	cmp	r3, r4
 800e21c:	6025      	str	r5, [r4, #0]
 800e21e:	bf18      	it	ne
 800e220:	6059      	strne	r1, [r3, #4]
 800e222:	6863      	ldr	r3, [r4, #4]
 800e224:	bf08      	it	eq
 800e226:	6031      	streq	r1, [r6, #0]
 800e228:	5162      	str	r2, [r4, r5]
 800e22a:	604b      	str	r3, [r1, #4]
 800e22c:	4638      	mov	r0, r7
 800e22e:	f104 060b 	add.w	r6, r4, #11
 800e232:	f000 fa07 	bl	800e644 <__malloc_unlock>
 800e236:	f026 0607 	bic.w	r6, r6, #7
 800e23a:	1d23      	adds	r3, r4, #4
 800e23c:	1af2      	subs	r2, r6, r3
 800e23e:	d0b6      	beq.n	800e1ae <_malloc_r+0x22>
 800e240:	1b9b      	subs	r3, r3, r6
 800e242:	50a3      	str	r3, [r4, r2]
 800e244:	e7b3      	b.n	800e1ae <_malloc_r+0x22>
 800e246:	6862      	ldr	r2, [r4, #4]
 800e248:	42a3      	cmp	r3, r4
 800e24a:	bf0c      	ite	eq
 800e24c:	6032      	streq	r2, [r6, #0]
 800e24e:	605a      	strne	r2, [r3, #4]
 800e250:	e7ec      	b.n	800e22c <_malloc_r+0xa0>
 800e252:	4623      	mov	r3, r4
 800e254:	6864      	ldr	r4, [r4, #4]
 800e256:	e7b2      	b.n	800e1be <_malloc_r+0x32>
 800e258:	4634      	mov	r4, r6
 800e25a:	6876      	ldr	r6, [r6, #4]
 800e25c:	e7b9      	b.n	800e1d2 <_malloc_r+0x46>
 800e25e:	230c      	movs	r3, #12
 800e260:	603b      	str	r3, [r7, #0]
 800e262:	4638      	mov	r0, r7
 800e264:	f000 f9ee 	bl	800e644 <__malloc_unlock>
 800e268:	e7a1      	b.n	800e1ae <_malloc_r+0x22>
 800e26a:	6025      	str	r5, [r4, #0]
 800e26c:	e7de      	b.n	800e22c <_malloc_r+0xa0>
 800e26e:	bf00      	nop
 800e270:	20004670 	.word	0x20004670

0800e274 <__ssputs_r>:
 800e274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e278:	688e      	ldr	r6, [r1, #8]
 800e27a:	429e      	cmp	r6, r3
 800e27c:	4682      	mov	sl, r0
 800e27e:	460c      	mov	r4, r1
 800e280:	4690      	mov	r8, r2
 800e282:	461f      	mov	r7, r3
 800e284:	d838      	bhi.n	800e2f8 <__ssputs_r+0x84>
 800e286:	898a      	ldrh	r2, [r1, #12]
 800e288:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e28c:	d032      	beq.n	800e2f4 <__ssputs_r+0x80>
 800e28e:	6825      	ldr	r5, [r4, #0]
 800e290:	6909      	ldr	r1, [r1, #16]
 800e292:	eba5 0901 	sub.w	r9, r5, r1
 800e296:	6965      	ldr	r5, [r4, #20]
 800e298:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e29c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e2a0:	3301      	adds	r3, #1
 800e2a2:	444b      	add	r3, r9
 800e2a4:	106d      	asrs	r5, r5, #1
 800e2a6:	429d      	cmp	r5, r3
 800e2a8:	bf38      	it	cc
 800e2aa:	461d      	movcc	r5, r3
 800e2ac:	0553      	lsls	r3, r2, #21
 800e2ae:	d531      	bpl.n	800e314 <__ssputs_r+0xa0>
 800e2b0:	4629      	mov	r1, r5
 800e2b2:	f7ff ff6b 	bl	800e18c <_malloc_r>
 800e2b6:	4606      	mov	r6, r0
 800e2b8:	b950      	cbnz	r0, 800e2d0 <__ssputs_r+0x5c>
 800e2ba:	230c      	movs	r3, #12
 800e2bc:	f8ca 3000 	str.w	r3, [sl]
 800e2c0:	89a3      	ldrh	r3, [r4, #12]
 800e2c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2c6:	81a3      	strh	r3, [r4, #12]
 800e2c8:	f04f 30ff 	mov.w	r0, #4294967295
 800e2cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2d0:	6921      	ldr	r1, [r4, #16]
 800e2d2:	464a      	mov	r2, r9
 800e2d4:	f7ff fa08 	bl	800d6e8 <memcpy>
 800e2d8:	89a3      	ldrh	r3, [r4, #12]
 800e2da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e2de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e2e2:	81a3      	strh	r3, [r4, #12]
 800e2e4:	6126      	str	r6, [r4, #16]
 800e2e6:	6165      	str	r5, [r4, #20]
 800e2e8:	444e      	add	r6, r9
 800e2ea:	eba5 0509 	sub.w	r5, r5, r9
 800e2ee:	6026      	str	r6, [r4, #0]
 800e2f0:	60a5      	str	r5, [r4, #8]
 800e2f2:	463e      	mov	r6, r7
 800e2f4:	42be      	cmp	r6, r7
 800e2f6:	d900      	bls.n	800e2fa <__ssputs_r+0x86>
 800e2f8:	463e      	mov	r6, r7
 800e2fa:	6820      	ldr	r0, [r4, #0]
 800e2fc:	4632      	mov	r2, r6
 800e2fe:	4641      	mov	r1, r8
 800e300:	f000 f980 	bl	800e604 <memmove>
 800e304:	68a3      	ldr	r3, [r4, #8]
 800e306:	1b9b      	subs	r3, r3, r6
 800e308:	60a3      	str	r3, [r4, #8]
 800e30a:	6823      	ldr	r3, [r4, #0]
 800e30c:	4433      	add	r3, r6
 800e30e:	6023      	str	r3, [r4, #0]
 800e310:	2000      	movs	r0, #0
 800e312:	e7db      	b.n	800e2cc <__ssputs_r+0x58>
 800e314:	462a      	mov	r2, r5
 800e316:	f000 f99b 	bl	800e650 <_realloc_r>
 800e31a:	4606      	mov	r6, r0
 800e31c:	2800      	cmp	r0, #0
 800e31e:	d1e1      	bne.n	800e2e4 <__ssputs_r+0x70>
 800e320:	6921      	ldr	r1, [r4, #16]
 800e322:	4650      	mov	r0, sl
 800e324:	f7ff fec6 	bl	800e0b4 <_free_r>
 800e328:	e7c7      	b.n	800e2ba <__ssputs_r+0x46>
	...

0800e32c <_svfiprintf_r>:
 800e32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e330:	4698      	mov	r8, r3
 800e332:	898b      	ldrh	r3, [r1, #12]
 800e334:	061b      	lsls	r3, r3, #24
 800e336:	b09d      	sub	sp, #116	; 0x74
 800e338:	4607      	mov	r7, r0
 800e33a:	460d      	mov	r5, r1
 800e33c:	4614      	mov	r4, r2
 800e33e:	d50e      	bpl.n	800e35e <_svfiprintf_r+0x32>
 800e340:	690b      	ldr	r3, [r1, #16]
 800e342:	b963      	cbnz	r3, 800e35e <_svfiprintf_r+0x32>
 800e344:	2140      	movs	r1, #64	; 0x40
 800e346:	f7ff ff21 	bl	800e18c <_malloc_r>
 800e34a:	6028      	str	r0, [r5, #0]
 800e34c:	6128      	str	r0, [r5, #16]
 800e34e:	b920      	cbnz	r0, 800e35a <_svfiprintf_r+0x2e>
 800e350:	230c      	movs	r3, #12
 800e352:	603b      	str	r3, [r7, #0]
 800e354:	f04f 30ff 	mov.w	r0, #4294967295
 800e358:	e0d1      	b.n	800e4fe <_svfiprintf_r+0x1d2>
 800e35a:	2340      	movs	r3, #64	; 0x40
 800e35c:	616b      	str	r3, [r5, #20]
 800e35e:	2300      	movs	r3, #0
 800e360:	9309      	str	r3, [sp, #36]	; 0x24
 800e362:	2320      	movs	r3, #32
 800e364:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e368:	f8cd 800c 	str.w	r8, [sp, #12]
 800e36c:	2330      	movs	r3, #48	; 0x30
 800e36e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e518 <_svfiprintf_r+0x1ec>
 800e372:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e376:	f04f 0901 	mov.w	r9, #1
 800e37a:	4623      	mov	r3, r4
 800e37c:	469a      	mov	sl, r3
 800e37e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e382:	b10a      	cbz	r2, 800e388 <_svfiprintf_r+0x5c>
 800e384:	2a25      	cmp	r2, #37	; 0x25
 800e386:	d1f9      	bne.n	800e37c <_svfiprintf_r+0x50>
 800e388:	ebba 0b04 	subs.w	fp, sl, r4
 800e38c:	d00b      	beq.n	800e3a6 <_svfiprintf_r+0x7a>
 800e38e:	465b      	mov	r3, fp
 800e390:	4622      	mov	r2, r4
 800e392:	4629      	mov	r1, r5
 800e394:	4638      	mov	r0, r7
 800e396:	f7ff ff6d 	bl	800e274 <__ssputs_r>
 800e39a:	3001      	adds	r0, #1
 800e39c:	f000 80aa 	beq.w	800e4f4 <_svfiprintf_r+0x1c8>
 800e3a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e3a2:	445a      	add	r2, fp
 800e3a4:	9209      	str	r2, [sp, #36]	; 0x24
 800e3a6:	f89a 3000 	ldrb.w	r3, [sl]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	f000 80a2 	beq.w	800e4f4 <_svfiprintf_r+0x1c8>
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	f04f 32ff 	mov.w	r2, #4294967295
 800e3b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e3ba:	f10a 0a01 	add.w	sl, sl, #1
 800e3be:	9304      	str	r3, [sp, #16]
 800e3c0:	9307      	str	r3, [sp, #28]
 800e3c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e3c6:	931a      	str	r3, [sp, #104]	; 0x68
 800e3c8:	4654      	mov	r4, sl
 800e3ca:	2205      	movs	r2, #5
 800e3cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3d0:	4851      	ldr	r0, [pc, #324]	; (800e518 <_svfiprintf_r+0x1ec>)
 800e3d2:	f7f1 ff1d 	bl	8000210 <memchr>
 800e3d6:	9a04      	ldr	r2, [sp, #16]
 800e3d8:	b9d8      	cbnz	r0, 800e412 <_svfiprintf_r+0xe6>
 800e3da:	06d0      	lsls	r0, r2, #27
 800e3dc:	bf44      	itt	mi
 800e3de:	2320      	movmi	r3, #32
 800e3e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e3e4:	0711      	lsls	r1, r2, #28
 800e3e6:	bf44      	itt	mi
 800e3e8:	232b      	movmi	r3, #43	; 0x2b
 800e3ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e3ee:	f89a 3000 	ldrb.w	r3, [sl]
 800e3f2:	2b2a      	cmp	r3, #42	; 0x2a
 800e3f4:	d015      	beq.n	800e422 <_svfiprintf_r+0xf6>
 800e3f6:	9a07      	ldr	r2, [sp, #28]
 800e3f8:	4654      	mov	r4, sl
 800e3fa:	2000      	movs	r0, #0
 800e3fc:	f04f 0c0a 	mov.w	ip, #10
 800e400:	4621      	mov	r1, r4
 800e402:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e406:	3b30      	subs	r3, #48	; 0x30
 800e408:	2b09      	cmp	r3, #9
 800e40a:	d94e      	bls.n	800e4aa <_svfiprintf_r+0x17e>
 800e40c:	b1b0      	cbz	r0, 800e43c <_svfiprintf_r+0x110>
 800e40e:	9207      	str	r2, [sp, #28]
 800e410:	e014      	b.n	800e43c <_svfiprintf_r+0x110>
 800e412:	eba0 0308 	sub.w	r3, r0, r8
 800e416:	fa09 f303 	lsl.w	r3, r9, r3
 800e41a:	4313      	orrs	r3, r2
 800e41c:	9304      	str	r3, [sp, #16]
 800e41e:	46a2      	mov	sl, r4
 800e420:	e7d2      	b.n	800e3c8 <_svfiprintf_r+0x9c>
 800e422:	9b03      	ldr	r3, [sp, #12]
 800e424:	1d19      	adds	r1, r3, #4
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	9103      	str	r1, [sp, #12]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	bfbb      	ittet	lt
 800e42e:	425b      	neglt	r3, r3
 800e430:	f042 0202 	orrlt.w	r2, r2, #2
 800e434:	9307      	strge	r3, [sp, #28]
 800e436:	9307      	strlt	r3, [sp, #28]
 800e438:	bfb8      	it	lt
 800e43a:	9204      	strlt	r2, [sp, #16]
 800e43c:	7823      	ldrb	r3, [r4, #0]
 800e43e:	2b2e      	cmp	r3, #46	; 0x2e
 800e440:	d10c      	bne.n	800e45c <_svfiprintf_r+0x130>
 800e442:	7863      	ldrb	r3, [r4, #1]
 800e444:	2b2a      	cmp	r3, #42	; 0x2a
 800e446:	d135      	bne.n	800e4b4 <_svfiprintf_r+0x188>
 800e448:	9b03      	ldr	r3, [sp, #12]
 800e44a:	1d1a      	adds	r2, r3, #4
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	9203      	str	r2, [sp, #12]
 800e450:	2b00      	cmp	r3, #0
 800e452:	bfb8      	it	lt
 800e454:	f04f 33ff 	movlt.w	r3, #4294967295
 800e458:	3402      	adds	r4, #2
 800e45a:	9305      	str	r3, [sp, #20]
 800e45c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e528 <_svfiprintf_r+0x1fc>
 800e460:	7821      	ldrb	r1, [r4, #0]
 800e462:	2203      	movs	r2, #3
 800e464:	4650      	mov	r0, sl
 800e466:	f7f1 fed3 	bl	8000210 <memchr>
 800e46a:	b140      	cbz	r0, 800e47e <_svfiprintf_r+0x152>
 800e46c:	2340      	movs	r3, #64	; 0x40
 800e46e:	eba0 000a 	sub.w	r0, r0, sl
 800e472:	fa03 f000 	lsl.w	r0, r3, r0
 800e476:	9b04      	ldr	r3, [sp, #16]
 800e478:	4303      	orrs	r3, r0
 800e47a:	3401      	adds	r4, #1
 800e47c:	9304      	str	r3, [sp, #16]
 800e47e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e482:	4826      	ldr	r0, [pc, #152]	; (800e51c <_svfiprintf_r+0x1f0>)
 800e484:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e488:	2206      	movs	r2, #6
 800e48a:	f7f1 fec1 	bl	8000210 <memchr>
 800e48e:	2800      	cmp	r0, #0
 800e490:	d038      	beq.n	800e504 <_svfiprintf_r+0x1d8>
 800e492:	4b23      	ldr	r3, [pc, #140]	; (800e520 <_svfiprintf_r+0x1f4>)
 800e494:	bb1b      	cbnz	r3, 800e4de <_svfiprintf_r+0x1b2>
 800e496:	9b03      	ldr	r3, [sp, #12]
 800e498:	3307      	adds	r3, #7
 800e49a:	f023 0307 	bic.w	r3, r3, #7
 800e49e:	3308      	adds	r3, #8
 800e4a0:	9303      	str	r3, [sp, #12]
 800e4a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4a4:	4433      	add	r3, r6
 800e4a6:	9309      	str	r3, [sp, #36]	; 0x24
 800e4a8:	e767      	b.n	800e37a <_svfiprintf_r+0x4e>
 800e4aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800e4ae:	460c      	mov	r4, r1
 800e4b0:	2001      	movs	r0, #1
 800e4b2:	e7a5      	b.n	800e400 <_svfiprintf_r+0xd4>
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	3401      	adds	r4, #1
 800e4b8:	9305      	str	r3, [sp, #20]
 800e4ba:	4619      	mov	r1, r3
 800e4bc:	f04f 0c0a 	mov.w	ip, #10
 800e4c0:	4620      	mov	r0, r4
 800e4c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e4c6:	3a30      	subs	r2, #48	; 0x30
 800e4c8:	2a09      	cmp	r2, #9
 800e4ca:	d903      	bls.n	800e4d4 <_svfiprintf_r+0x1a8>
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d0c5      	beq.n	800e45c <_svfiprintf_r+0x130>
 800e4d0:	9105      	str	r1, [sp, #20]
 800e4d2:	e7c3      	b.n	800e45c <_svfiprintf_r+0x130>
 800e4d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800e4d8:	4604      	mov	r4, r0
 800e4da:	2301      	movs	r3, #1
 800e4dc:	e7f0      	b.n	800e4c0 <_svfiprintf_r+0x194>
 800e4de:	ab03      	add	r3, sp, #12
 800e4e0:	9300      	str	r3, [sp, #0]
 800e4e2:	462a      	mov	r2, r5
 800e4e4:	4b0f      	ldr	r3, [pc, #60]	; (800e524 <_svfiprintf_r+0x1f8>)
 800e4e6:	a904      	add	r1, sp, #16
 800e4e8:	4638      	mov	r0, r7
 800e4ea:	f7fc fa49 	bl	800a980 <_printf_float>
 800e4ee:	1c42      	adds	r2, r0, #1
 800e4f0:	4606      	mov	r6, r0
 800e4f2:	d1d6      	bne.n	800e4a2 <_svfiprintf_r+0x176>
 800e4f4:	89ab      	ldrh	r3, [r5, #12]
 800e4f6:	065b      	lsls	r3, r3, #25
 800e4f8:	f53f af2c 	bmi.w	800e354 <_svfiprintf_r+0x28>
 800e4fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e4fe:	b01d      	add	sp, #116	; 0x74
 800e500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e504:	ab03      	add	r3, sp, #12
 800e506:	9300      	str	r3, [sp, #0]
 800e508:	462a      	mov	r2, r5
 800e50a:	4b06      	ldr	r3, [pc, #24]	; (800e524 <_svfiprintf_r+0x1f8>)
 800e50c:	a904      	add	r1, sp, #16
 800e50e:	4638      	mov	r0, r7
 800e510:	f7fc fcda 	bl	800aec8 <_printf_i>
 800e514:	e7eb      	b.n	800e4ee <_svfiprintf_r+0x1c2>
 800e516:	bf00      	nop
 800e518:	0800f90c 	.word	0x0800f90c
 800e51c:	0800f916 	.word	0x0800f916
 800e520:	0800a981 	.word	0x0800a981
 800e524:	0800e275 	.word	0x0800e275
 800e528:	0800f912 	.word	0x0800f912
 800e52c:	00000000 	.word	0x00000000

0800e530 <nan>:
 800e530:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e538 <nan+0x8>
 800e534:	4770      	bx	lr
 800e536:	bf00      	nop
 800e538:	00000000 	.word	0x00000000
 800e53c:	7ff80000 	.word	0x7ff80000

0800e540 <_sbrk_r>:
 800e540:	b538      	push	{r3, r4, r5, lr}
 800e542:	4d06      	ldr	r5, [pc, #24]	; (800e55c <_sbrk_r+0x1c>)
 800e544:	2300      	movs	r3, #0
 800e546:	4604      	mov	r4, r0
 800e548:	4608      	mov	r0, r1
 800e54a:	602b      	str	r3, [r5, #0]
 800e54c:	f7f4 ffe6 	bl	800351c <_sbrk>
 800e550:	1c43      	adds	r3, r0, #1
 800e552:	d102      	bne.n	800e55a <_sbrk_r+0x1a>
 800e554:	682b      	ldr	r3, [r5, #0]
 800e556:	b103      	cbz	r3, 800e55a <_sbrk_r+0x1a>
 800e558:	6023      	str	r3, [r4, #0]
 800e55a:	bd38      	pop	{r3, r4, r5, pc}
 800e55c:	20004678 	.word	0x20004678

0800e560 <strncmp>:
 800e560:	b510      	push	{r4, lr}
 800e562:	b17a      	cbz	r2, 800e584 <strncmp+0x24>
 800e564:	4603      	mov	r3, r0
 800e566:	3901      	subs	r1, #1
 800e568:	1884      	adds	r4, r0, r2
 800e56a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e56e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e572:	4290      	cmp	r0, r2
 800e574:	d101      	bne.n	800e57a <strncmp+0x1a>
 800e576:	42a3      	cmp	r3, r4
 800e578:	d101      	bne.n	800e57e <strncmp+0x1e>
 800e57a:	1a80      	subs	r0, r0, r2
 800e57c:	bd10      	pop	{r4, pc}
 800e57e:	2800      	cmp	r0, #0
 800e580:	d1f3      	bne.n	800e56a <strncmp+0xa>
 800e582:	e7fa      	b.n	800e57a <strncmp+0x1a>
 800e584:	4610      	mov	r0, r2
 800e586:	e7f9      	b.n	800e57c <strncmp+0x1c>

0800e588 <__ascii_wctomb>:
 800e588:	b149      	cbz	r1, 800e59e <__ascii_wctomb+0x16>
 800e58a:	2aff      	cmp	r2, #255	; 0xff
 800e58c:	bf85      	ittet	hi
 800e58e:	238a      	movhi	r3, #138	; 0x8a
 800e590:	6003      	strhi	r3, [r0, #0]
 800e592:	700a      	strbls	r2, [r1, #0]
 800e594:	f04f 30ff 	movhi.w	r0, #4294967295
 800e598:	bf98      	it	ls
 800e59a:	2001      	movls	r0, #1
 800e59c:	4770      	bx	lr
 800e59e:	4608      	mov	r0, r1
 800e5a0:	4770      	bx	lr
	...

0800e5a4 <__assert_func>:
 800e5a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e5a6:	4614      	mov	r4, r2
 800e5a8:	461a      	mov	r2, r3
 800e5aa:	4b09      	ldr	r3, [pc, #36]	; (800e5d0 <__assert_func+0x2c>)
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	4605      	mov	r5, r0
 800e5b0:	68d8      	ldr	r0, [r3, #12]
 800e5b2:	b14c      	cbz	r4, 800e5c8 <__assert_func+0x24>
 800e5b4:	4b07      	ldr	r3, [pc, #28]	; (800e5d4 <__assert_func+0x30>)
 800e5b6:	9100      	str	r1, [sp, #0]
 800e5b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e5bc:	4906      	ldr	r1, [pc, #24]	; (800e5d8 <__assert_func+0x34>)
 800e5be:	462b      	mov	r3, r5
 800e5c0:	f000 f80e 	bl	800e5e0 <fiprintf>
 800e5c4:	f000 fa8c 	bl	800eae0 <abort>
 800e5c8:	4b04      	ldr	r3, [pc, #16]	; (800e5dc <__assert_func+0x38>)
 800e5ca:	461c      	mov	r4, r3
 800e5cc:	e7f3      	b.n	800e5b6 <__assert_func+0x12>
 800e5ce:	bf00      	nop
 800e5d0:	20000080 	.word	0x20000080
 800e5d4:	0800f91d 	.word	0x0800f91d
 800e5d8:	0800f92a 	.word	0x0800f92a
 800e5dc:	0800f958 	.word	0x0800f958

0800e5e0 <fiprintf>:
 800e5e0:	b40e      	push	{r1, r2, r3}
 800e5e2:	b503      	push	{r0, r1, lr}
 800e5e4:	4601      	mov	r1, r0
 800e5e6:	ab03      	add	r3, sp, #12
 800e5e8:	4805      	ldr	r0, [pc, #20]	; (800e600 <fiprintf+0x20>)
 800e5ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5ee:	6800      	ldr	r0, [r0, #0]
 800e5f0:	9301      	str	r3, [sp, #4]
 800e5f2:	f000 f885 	bl	800e700 <_vfiprintf_r>
 800e5f6:	b002      	add	sp, #8
 800e5f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e5fc:	b003      	add	sp, #12
 800e5fe:	4770      	bx	lr
 800e600:	20000080 	.word	0x20000080

0800e604 <memmove>:
 800e604:	4288      	cmp	r0, r1
 800e606:	b510      	push	{r4, lr}
 800e608:	eb01 0402 	add.w	r4, r1, r2
 800e60c:	d902      	bls.n	800e614 <memmove+0x10>
 800e60e:	4284      	cmp	r4, r0
 800e610:	4623      	mov	r3, r4
 800e612:	d807      	bhi.n	800e624 <memmove+0x20>
 800e614:	1e43      	subs	r3, r0, #1
 800e616:	42a1      	cmp	r1, r4
 800e618:	d008      	beq.n	800e62c <memmove+0x28>
 800e61a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e61e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e622:	e7f8      	b.n	800e616 <memmove+0x12>
 800e624:	4402      	add	r2, r0
 800e626:	4601      	mov	r1, r0
 800e628:	428a      	cmp	r2, r1
 800e62a:	d100      	bne.n	800e62e <memmove+0x2a>
 800e62c:	bd10      	pop	{r4, pc}
 800e62e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e632:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e636:	e7f7      	b.n	800e628 <memmove+0x24>

0800e638 <__malloc_lock>:
 800e638:	4801      	ldr	r0, [pc, #4]	; (800e640 <__malloc_lock+0x8>)
 800e63a:	f000 bc11 	b.w	800ee60 <__retarget_lock_acquire_recursive>
 800e63e:	bf00      	nop
 800e640:	2000467c 	.word	0x2000467c

0800e644 <__malloc_unlock>:
 800e644:	4801      	ldr	r0, [pc, #4]	; (800e64c <__malloc_unlock+0x8>)
 800e646:	f000 bc0c 	b.w	800ee62 <__retarget_lock_release_recursive>
 800e64a:	bf00      	nop
 800e64c:	2000467c 	.word	0x2000467c

0800e650 <_realloc_r>:
 800e650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e654:	4680      	mov	r8, r0
 800e656:	4614      	mov	r4, r2
 800e658:	460e      	mov	r6, r1
 800e65a:	b921      	cbnz	r1, 800e666 <_realloc_r+0x16>
 800e65c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e660:	4611      	mov	r1, r2
 800e662:	f7ff bd93 	b.w	800e18c <_malloc_r>
 800e666:	b92a      	cbnz	r2, 800e674 <_realloc_r+0x24>
 800e668:	f7ff fd24 	bl	800e0b4 <_free_r>
 800e66c:	4625      	mov	r5, r4
 800e66e:	4628      	mov	r0, r5
 800e670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e674:	f000 fc5c 	bl	800ef30 <_malloc_usable_size_r>
 800e678:	4284      	cmp	r4, r0
 800e67a:	4607      	mov	r7, r0
 800e67c:	d802      	bhi.n	800e684 <_realloc_r+0x34>
 800e67e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e682:	d812      	bhi.n	800e6aa <_realloc_r+0x5a>
 800e684:	4621      	mov	r1, r4
 800e686:	4640      	mov	r0, r8
 800e688:	f7ff fd80 	bl	800e18c <_malloc_r>
 800e68c:	4605      	mov	r5, r0
 800e68e:	2800      	cmp	r0, #0
 800e690:	d0ed      	beq.n	800e66e <_realloc_r+0x1e>
 800e692:	42bc      	cmp	r4, r7
 800e694:	4622      	mov	r2, r4
 800e696:	4631      	mov	r1, r6
 800e698:	bf28      	it	cs
 800e69a:	463a      	movcs	r2, r7
 800e69c:	f7ff f824 	bl	800d6e8 <memcpy>
 800e6a0:	4631      	mov	r1, r6
 800e6a2:	4640      	mov	r0, r8
 800e6a4:	f7ff fd06 	bl	800e0b4 <_free_r>
 800e6a8:	e7e1      	b.n	800e66e <_realloc_r+0x1e>
 800e6aa:	4635      	mov	r5, r6
 800e6ac:	e7df      	b.n	800e66e <_realloc_r+0x1e>

0800e6ae <__sfputc_r>:
 800e6ae:	6893      	ldr	r3, [r2, #8]
 800e6b0:	3b01      	subs	r3, #1
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	b410      	push	{r4}
 800e6b6:	6093      	str	r3, [r2, #8]
 800e6b8:	da08      	bge.n	800e6cc <__sfputc_r+0x1e>
 800e6ba:	6994      	ldr	r4, [r2, #24]
 800e6bc:	42a3      	cmp	r3, r4
 800e6be:	db01      	blt.n	800e6c4 <__sfputc_r+0x16>
 800e6c0:	290a      	cmp	r1, #10
 800e6c2:	d103      	bne.n	800e6cc <__sfputc_r+0x1e>
 800e6c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6c8:	f000 b94a 	b.w	800e960 <__swbuf_r>
 800e6cc:	6813      	ldr	r3, [r2, #0]
 800e6ce:	1c58      	adds	r0, r3, #1
 800e6d0:	6010      	str	r0, [r2, #0]
 800e6d2:	7019      	strb	r1, [r3, #0]
 800e6d4:	4608      	mov	r0, r1
 800e6d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6da:	4770      	bx	lr

0800e6dc <__sfputs_r>:
 800e6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6de:	4606      	mov	r6, r0
 800e6e0:	460f      	mov	r7, r1
 800e6e2:	4614      	mov	r4, r2
 800e6e4:	18d5      	adds	r5, r2, r3
 800e6e6:	42ac      	cmp	r4, r5
 800e6e8:	d101      	bne.n	800e6ee <__sfputs_r+0x12>
 800e6ea:	2000      	movs	r0, #0
 800e6ec:	e007      	b.n	800e6fe <__sfputs_r+0x22>
 800e6ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6f2:	463a      	mov	r2, r7
 800e6f4:	4630      	mov	r0, r6
 800e6f6:	f7ff ffda 	bl	800e6ae <__sfputc_r>
 800e6fa:	1c43      	adds	r3, r0, #1
 800e6fc:	d1f3      	bne.n	800e6e6 <__sfputs_r+0xa>
 800e6fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e700 <_vfiprintf_r>:
 800e700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e704:	460d      	mov	r5, r1
 800e706:	b09d      	sub	sp, #116	; 0x74
 800e708:	4614      	mov	r4, r2
 800e70a:	4698      	mov	r8, r3
 800e70c:	4606      	mov	r6, r0
 800e70e:	b118      	cbz	r0, 800e718 <_vfiprintf_r+0x18>
 800e710:	6983      	ldr	r3, [r0, #24]
 800e712:	b90b      	cbnz	r3, 800e718 <_vfiprintf_r+0x18>
 800e714:	f000 fb06 	bl	800ed24 <__sinit>
 800e718:	4b89      	ldr	r3, [pc, #548]	; (800e940 <_vfiprintf_r+0x240>)
 800e71a:	429d      	cmp	r5, r3
 800e71c:	d11b      	bne.n	800e756 <_vfiprintf_r+0x56>
 800e71e:	6875      	ldr	r5, [r6, #4]
 800e720:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e722:	07d9      	lsls	r1, r3, #31
 800e724:	d405      	bmi.n	800e732 <_vfiprintf_r+0x32>
 800e726:	89ab      	ldrh	r3, [r5, #12]
 800e728:	059a      	lsls	r2, r3, #22
 800e72a:	d402      	bmi.n	800e732 <_vfiprintf_r+0x32>
 800e72c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e72e:	f000 fb97 	bl	800ee60 <__retarget_lock_acquire_recursive>
 800e732:	89ab      	ldrh	r3, [r5, #12]
 800e734:	071b      	lsls	r3, r3, #28
 800e736:	d501      	bpl.n	800e73c <_vfiprintf_r+0x3c>
 800e738:	692b      	ldr	r3, [r5, #16]
 800e73a:	b9eb      	cbnz	r3, 800e778 <_vfiprintf_r+0x78>
 800e73c:	4629      	mov	r1, r5
 800e73e:	4630      	mov	r0, r6
 800e740:	f000 f960 	bl	800ea04 <__swsetup_r>
 800e744:	b1c0      	cbz	r0, 800e778 <_vfiprintf_r+0x78>
 800e746:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e748:	07dc      	lsls	r4, r3, #31
 800e74a:	d50e      	bpl.n	800e76a <_vfiprintf_r+0x6a>
 800e74c:	f04f 30ff 	mov.w	r0, #4294967295
 800e750:	b01d      	add	sp, #116	; 0x74
 800e752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e756:	4b7b      	ldr	r3, [pc, #492]	; (800e944 <_vfiprintf_r+0x244>)
 800e758:	429d      	cmp	r5, r3
 800e75a:	d101      	bne.n	800e760 <_vfiprintf_r+0x60>
 800e75c:	68b5      	ldr	r5, [r6, #8]
 800e75e:	e7df      	b.n	800e720 <_vfiprintf_r+0x20>
 800e760:	4b79      	ldr	r3, [pc, #484]	; (800e948 <_vfiprintf_r+0x248>)
 800e762:	429d      	cmp	r5, r3
 800e764:	bf08      	it	eq
 800e766:	68f5      	ldreq	r5, [r6, #12]
 800e768:	e7da      	b.n	800e720 <_vfiprintf_r+0x20>
 800e76a:	89ab      	ldrh	r3, [r5, #12]
 800e76c:	0598      	lsls	r0, r3, #22
 800e76e:	d4ed      	bmi.n	800e74c <_vfiprintf_r+0x4c>
 800e770:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e772:	f000 fb76 	bl	800ee62 <__retarget_lock_release_recursive>
 800e776:	e7e9      	b.n	800e74c <_vfiprintf_r+0x4c>
 800e778:	2300      	movs	r3, #0
 800e77a:	9309      	str	r3, [sp, #36]	; 0x24
 800e77c:	2320      	movs	r3, #32
 800e77e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e782:	f8cd 800c 	str.w	r8, [sp, #12]
 800e786:	2330      	movs	r3, #48	; 0x30
 800e788:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e94c <_vfiprintf_r+0x24c>
 800e78c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e790:	f04f 0901 	mov.w	r9, #1
 800e794:	4623      	mov	r3, r4
 800e796:	469a      	mov	sl, r3
 800e798:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e79c:	b10a      	cbz	r2, 800e7a2 <_vfiprintf_r+0xa2>
 800e79e:	2a25      	cmp	r2, #37	; 0x25
 800e7a0:	d1f9      	bne.n	800e796 <_vfiprintf_r+0x96>
 800e7a2:	ebba 0b04 	subs.w	fp, sl, r4
 800e7a6:	d00b      	beq.n	800e7c0 <_vfiprintf_r+0xc0>
 800e7a8:	465b      	mov	r3, fp
 800e7aa:	4622      	mov	r2, r4
 800e7ac:	4629      	mov	r1, r5
 800e7ae:	4630      	mov	r0, r6
 800e7b0:	f7ff ff94 	bl	800e6dc <__sfputs_r>
 800e7b4:	3001      	adds	r0, #1
 800e7b6:	f000 80aa 	beq.w	800e90e <_vfiprintf_r+0x20e>
 800e7ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e7bc:	445a      	add	r2, fp
 800e7be:	9209      	str	r2, [sp, #36]	; 0x24
 800e7c0:	f89a 3000 	ldrb.w	r3, [sl]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	f000 80a2 	beq.w	800e90e <_vfiprintf_r+0x20e>
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	f04f 32ff 	mov.w	r2, #4294967295
 800e7d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e7d4:	f10a 0a01 	add.w	sl, sl, #1
 800e7d8:	9304      	str	r3, [sp, #16]
 800e7da:	9307      	str	r3, [sp, #28]
 800e7dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e7e0:	931a      	str	r3, [sp, #104]	; 0x68
 800e7e2:	4654      	mov	r4, sl
 800e7e4:	2205      	movs	r2, #5
 800e7e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7ea:	4858      	ldr	r0, [pc, #352]	; (800e94c <_vfiprintf_r+0x24c>)
 800e7ec:	f7f1 fd10 	bl	8000210 <memchr>
 800e7f0:	9a04      	ldr	r2, [sp, #16]
 800e7f2:	b9d8      	cbnz	r0, 800e82c <_vfiprintf_r+0x12c>
 800e7f4:	06d1      	lsls	r1, r2, #27
 800e7f6:	bf44      	itt	mi
 800e7f8:	2320      	movmi	r3, #32
 800e7fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e7fe:	0713      	lsls	r3, r2, #28
 800e800:	bf44      	itt	mi
 800e802:	232b      	movmi	r3, #43	; 0x2b
 800e804:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e808:	f89a 3000 	ldrb.w	r3, [sl]
 800e80c:	2b2a      	cmp	r3, #42	; 0x2a
 800e80e:	d015      	beq.n	800e83c <_vfiprintf_r+0x13c>
 800e810:	9a07      	ldr	r2, [sp, #28]
 800e812:	4654      	mov	r4, sl
 800e814:	2000      	movs	r0, #0
 800e816:	f04f 0c0a 	mov.w	ip, #10
 800e81a:	4621      	mov	r1, r4
 800e81c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e820:	3b30      	subs	r3, #48	; 0x30
 800e822:	2b09      	cmp	r3, #9
 800e824:	d94e      	bls.n	800e8c4 <_vfiprintf_r+0x1c4>
 800e826:	b1b0      	cbz	r0, 800e856 <_vfiprintf_r+0x156>
 800e828:	9207      	str	r2, [sp, #28]
 800e82a:	e014      	b.n	800e856 <_vfiprintf_r+0x156>
 800e82c:	eba0 0308 	sub.w	r3, r0, r8
 800e830:	fa09 f303 	lsl.w	r3, r9, r3
 800e834:	4313      	orrs	r3, r2
 800e836:	9304      	str	r3, [sp, #16]
 800e838:	46a2      	mov	sl, r4
 800e83a:	e7d2      	b.n	800e7e2 <_vfiprintf_r+0xe2>
 800e83c:	9b03      	ldr	r3, [sp, #12]
 800e83e:	1d19      	adds	r1, r3, #4
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	9103      	str	r1, [sp, #12]
 800e844:	2b00      	cmp	r3, #0
 800e846:	bfbb      	ittet	lt
 800e848:	425b      	neglt	r3, r3
 800e84a:	f042 0202 	orrlt.w	r2, r2, #2
 800e84e:	9307      	strge	r3, [sp, #28]
 800e850:	9307      	strlt	r3, [sp, #28]
 800e852:	bfb8      	it	lt
 800e854:	9204      	strlt	r2, [sp, #16]
 800e856:	7823      	ldrb	r3, [r4, #0]
 800e858:	2b2e      	cmp	r3, #46	; 0x2e
 800e85a:	d10c      	bne.n	800e876 <_vfiprintf_r+0x176>
 800e85c:	7863      	ldrb	r3, [r4, #1]
 800e85e:	2b2a      	cmp	r3, #42	; 0x2a
 800e860:	d135      	bne.n	800e8ce <_vfiprintf_r+0x1ce>
 800e862:	9b03      	ldr	r3, [sp, #12]
 800e864:	1d1a      	adds	r2, r3, #4
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	9203      	str	r2, [sp, #12]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	bfb8      	it	lt
 800e86e:	f04f 33ff 	movlt.w	r3, #4294967295
 800e872:	3402      	adds	r4, #2
 800e874:	9305      	str	r3, [sp, #20]
 800e876:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e95c <_vfiprintf_r+0x25c>
 800e87a:	7821      	ldrb	r1, [r4, #0]
 800e87c:	2203      	movs	r2, #3
 800e87e:	4650      	mov	r0, sl
 800e880:	f7f1 fcc6 	bl	8000210 <memchr>
 800e884:	b140      	cbz	r0, 800e898 <_vfiprintf_r+0x198>
 800e886:	2340      	movs	r3, #64	; 0x40
 800e888:	eba0 000a 	sub.w	r0, r0, sl
 800e88c:	fa03 f000 	lsl.w	r0, r3, r0
 800e890:	9b04      	ldr	r3, [sp, #16]
 800e892:	4303      	orrs	r3, r0
 800e894:	3401      	adds	r4, #1
 800e896:	9304      	str	r3, [sp, #16]
 800e898:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e89c:	482c      	ldr	r0, [pc, #176]	; (800e950 <_vfiprintf_r+0x250>)
 800e89e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e8a2:	2206      	movs	r2, #6
 800e8a4:	f7f1 fcb4 	bl	8000210 <memchr>
 800e8a8:	2800      	cmp	r0, #0
 800e8aa:	d03f      	beq.n	800e92c <_vfiprintf_r+0x22c>
 800e8ac:	4b29      	ldr	r3, [pc, #164]	; (800e954 <_vfiprintf_r+0x254>)
 800e8ae:	bb1b      	cbnz	r3, 800e8f8 <_vfiprintf_r+0x1f8>
 800e8b0:	9b03      	ldr	r3, [sp, #12]
 800e8b2:	3307      	adds	r3, #7
 800e8b4:	f023 0307 	bic.w	r3, r3, #7
 800e8b8:	3308      	adds	r3, #8
 800e8ba:	9303      	str	r3, [sp, #12]
 800e8bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8be:	443b      	add	r3, r7
 800e8c0:	9309      	str	r3, [sp, #36]	; 0x24
 800e8c2:	e767      	b.n	800e794 <_vfiprintf_r+0x94>
 800e8c4:	fb0c 3202 	mla	r2, ip, r2, r3
 800e8c8:	460c      	mov	r4, r1
 800e8ca:	2001      	movs	r0, #1
 800e8cc:	e7a5      	b.n	800e81a <_vfiprintf_r+0x11a>
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	3401      	adds	r4, #1
 800e8d2:	9305      	str	r3, [sp, #20]
 800e8d4:	4619      	mov	r1, r3
 800e8d6:	f04f 0c0a 	mov.w	ip, #10
 800e8da:	4620      	mov	r0, r4
 800e8dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e8e0:	3a30      	subs	r2, #48	; 0x30
 800e8e2:	2a09      	cmp	r2, #9
 800e8e4:	d903      	bls.n	800e8ee <_vfiprintf_r+0x1ee>
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d0c5      	beq.n	800e876 <_vfiprintf_r+0x176>
 800e8ea:	9105      	str	r1, [sp, #20]
 800e8ec:	e7c3      	b.n	800e876 <_vfiprintf_r+0x176>
 800e8ee:	fb0c 2101 	mla	r1, ip, r1, r2
 800e8f2:	4604      	mov	r4, r0
 800e8f4:	2301      	movs	r3, #1
 800e8f6:	e7f0      	b.n	800e8da <_vfiprintf_r+0x1da>
 800e8f8:	ab03      	add	r3, sp, #12
 800e8fa:	9300      	str	r3, [sp, #0]
 800e8fc:	462a      	mov	r2, r5
 800e8fe:	4b16      	ldr	r3, [pc, #88]	; (800e958 <_vfiprintf_r+0x258>)
 800e900:	a904      	add	r1, sp, #16
 800e902:	4630      	mov	r0, r6
 800e904:	f7fc f83c 	bl	800a980 <_printf_float>
 800e908:	4607      	mov	r7, r0
 800e90a:	1c78      	adds	r0, r7, #1
 800e90c:	d1d6      	bne.n	800e8bc <_vfiprintf_r+0x1bc>
 800e90e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e910:	07d9      	lsls	r1, r3, #31
 800e912:	d405      	bmi.n	800e920 <_vfiprintf_r+0x220>
 800e914:	89ab      	ldrh	r3, [r5, #12]
 800e916:	059a      	lsls	r2, r3, #22
 800e918:	d402      	bmi.n	800e920 <_vfiprintf_r+0x220>
 800e91a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e91c:	f000 faa1 	bl	800ee62 <__retarget_lock_release_recursive>
 800e920:	89ab      	ldrh	r3, [r5, #12]
 800e922:	065b      	lsls	r3, r3, #25
 800e924:	f53f af12 	bmi.w	800e74c <_vfiprintf_r+0x4c>
 800e928:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e92a:	e711      	b.n	800e750 <_vfiprintf_r+0x50>
 800e92c:	ab03      	add	r3, sp, #12
 800e92e:	9300      	str	r3, [sp, #0]
 800e930:	462a      	mov	r2, r5
 800e932:	4b09      	ldr	r3, [pc, #36]	; (800e958 <_vfiprintf_r+0x258>)
 800e934:	a904      	add	r1, sp, #16
 800e936:	4630      	mov	r0, r6
 800e938:	f7fc fac6 	bl	800aec8 <_printf_i>
 800e93c:	e7e4      	b.n	800e908 <_vfiprintf_r+0x208>
 800e93e:	bf00      	nop
 800e940:	0800f97c 	.word	0x0800f97c
 800e944:	0800f99c 	.word	0x0800f99c
 800e948:	0800f95c 	.word	0x0800f95c
 800e94c:	0800f90c 	.word	0x0800f90c
 800e950:	0800f916 	.word	0x0800f916
 800e954:	0800a981 	.word	0x0800a981
 800e958:	0800e6dd 	.word	0x0800e6dd
 800e95c:	0800f912 	.word	0x0800f912

0800e960 <__swbuf_r>:
 800e960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e962:	460e      	mov	r6, r1
 800e964:	4614      	mov	r4, r2
 800e966:	4605      	mov	r5, r0
 800e968:	b118      	cbz	r0, 800e972 <__swbuf_r+0x12>
 800e96a:	6983      	ldr	r3, [r0, #24]
 800e96c:	b90b      	cbnz	r3, 800e972 <__swbuf_r+0x12>
 800e96e:	f000 f9d9 	bl	800ed24 <__sinit>
 800e972:	4b21      	ldr	r3, [pc, #132]	; (800e9f8 <__swbuf_r+0x98>)
 800e974:	429c      	cmp	r4, r3
 800e976:	d12b      	bne.n	800e9d0 <__swbuf_r+0x70>
 800e978:	686c      	ldr	r4, [r5, #4]
 800e97a:	69a3      	ldr	r3, [r4, #24]
 800e97c:	60a3      	str	r3, [r4, #8]
 800e97e:	89a3      	ldrh	r3, [r4, #12]
 800e980:	071a      	lsls	r2, r3, #28
 800e982:	d52f      	bpl.n	800e9e4 <__swbuf_r+0x84>
 800e984:	6923      	ldr	r3, [r4, #16]
 800e986:	b36b      	cbz	r3, 800e9e4 <__swbuf_r+0x84>
 800e988:	6923      	ldr	r3, [r4, #16]
 800e98a:	6820      	ldr	r0, [r4, #0]
 800e98c:	1ac0      	subs	r0, r0, r3
 800e98e:	6963      	ldr	r3, [r4, #20]
 800e990:	b2f6      	uxtb	r6, r6
 800e992:	4283      	cmp	r3, r0
 800e994:	4637      	mov	r7, r6
 800e996:	dc04      	bgt.n	800e9a2 <__swbuf_r+0x42>
 800e998:	4621      	mov	r1, r4
 800e99a:	4628      	mov	r0, r5
 800e99c:	f000 f92e 	bl	800ebfc <_fflush_r>
 800e9a0:	bb30      	cbnz	r0, 800e9f0 <__swbuf_r+0x90>
 800e9a2:	68a3      	ldr	r3, [r4, #8]
 800e9a4:	3b01      	subs	r3, #1
 800e9a6:	60a3      	str	r3, [r4, #8]
 800e9a8:	6823      	ldr	r3, [r4, #0]
 800e9aa:	1c5a      	adds	r2, r3, #1
 800e9ac:	6022      	str	r2, [r4, #0]
 800e9ae:	701e      	strb	r6, [r3, #0]
 800e9b0:	6963      	ldr	r3, [r4, #20]
 800e9b2:	3001      	adds	r0, #1
 800e9b4:	4283      	cmp	r3, r0
 800e9b6:	d004      	beq.n	800e9c2 <__swbuf_r+0x62>
 800e9b8:	89a3      	ldrh	r3, [r4, #12]
 800e9ba:	07db      	lsls	r3, r3, #31
 800e9bc:	d506      	bpl.n	800e9cc <__swbuf_r+0x6c>
 800e9be:	2e0a      	cmp	r6, #10
 800e9c0:	d104      	bne.n	800e9cc <__swbuf_r+0x6c>
 800e9c2:	4621      	mov	r1, r4
 800e9c4:	4628      	mov	r0, r5
 800e9c6:	f000 f919 	bl	800ebfc <_fflush_r>
 800e9ca:	b988      	cbnz	r0, 800e9f0 <__swbuf_r+0x90>
 800e9cc:	4638      	mov	r0, r7
 800e9ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9d0:	4b0a      	ldr	r3, [pc, #40]	; (800e9fc <__swbuf_r+0x9c>)
 800e9d2:	429c      	cmp	r4, r3
 800e9d4:	d101      	bne.n	800e9da <__swbuf_r+0x7a>
 800e9d6:	68ac      	ldr	r4, [r5, #8]
 800e9d8:	e7cf      	b.n	800e97a <__swbuf_r+0x1a>
 800e9da:	4b09      	ldr	r3, [pc, #36]	; (800ea00 <__swbuf_r+0xa0>)
 800e9dc:	429c      	cmp	r4, r3
 800e9de:	bf08      	it	eq
 800e9e0:	68ec      	ldreq	r4, [r5, #12]
 800e9e2:	e7ca      	b.n	800e97a <__swbuf_r+0x1a>
 800e9e4:	4621      	mov	r1, r4
 800e9e6:	4628      	mov	r0, r5
 800e9e8:	f000 f80c 	bl	800ea04 <__swsetup_r>
 800e9ec:	2800      	cmp	r0, #0
 800e9ee:	d0cb      	beq.n	800e988 <__swbuf_r+0x28>
 800e9f0:	f04f 37ff 	mov.w	r7, #4294967295
 800e9f4:	e7ea      	b.n	800e9cc <__swbuf_r+0x6c>
 800e9f6:	bf00      	nop
 800e9f8:	0800f97c 	.word	0x0800f97c
 800e9fc:	0800f99c 	.word	0x0800f99c
 800ea00:	0800f95c 	.word	0x0800f95c

0800ea04 <__swsetup_r>:
 800ea04:	4b32      	ldr	r3, [pc, #200]	; (800ead0 <__swsetup_r+0xcc>)
 800ea06:	b570      	push	{r4, r5, r6, lr}
 800ea08:	681d      	ldr	r5, [r3, #0]
 800ea0a:	4606      	mov	r6, r0
 800ea0c:	460c      	mov	r4, r1
 800ea0e:	b125      	cbz	r5, 800ea1a <__swsetup_r+0x16>
 800ea10:	69ab      	ldr	r3, [r5, #24]
 800ea12:	b913      	cbnz	r3, 800ea1a <__swsetup_r+0x16>
 800ea14:	4628      	mov	r0, r5
 800ea16:	f000 f985 	bl	800ed24 <__sinit>
 800ea1a:	4b2e      	ldr	r3, [pc, #184]	; (800ead4 <__swsetup_r+0xd0>)
 800ea1c:	429c      	cmp	r4, r3
 800ea1e:	d10f      	bne.n	800ea40 <__swsetup_r+0x3c>
 800ea20:	686c      	ldr	r4, [r5, #4]
 800ea22:	89a3      	ldrh	r3, [r4, #12]
 800ea24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ea28:	0719      	lsls	r1, r3, #28
 800ea2a:	d42c      	bmi.n	800ea86 <__swsetup_r+0x82>
 800ea2c:	06dd      	lsls	r5, r3, #27
 800ea2e:	d411      	bmi.n	800ea54 <__swsetup_r+0x50>
 800ea30:	2309      	movs	r3, #9
 800ea32:	6033      	str	r3, [r6, #0]
 800ea34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ea38:	81a3      	strh	r3, [r4, #12]
 800ea3a:	f04f 30ff 	mov.w	r0, #4294967295
 800ea3e:	e03e      	b.n	800eabe <__swsetup_r+0xba>
 800ea40:	4b25      	ldr	r3, [pc, #148]	; (800ead8 <__swsetup_r+0xd4>)
 800ea42:	429c      	cmp	r4, r3
 800ea44:	d101      	bne.n	800ea4a <__swsetup_r+0x46>
 800ea46:	68ac      	ldr	r4, [r5, #8]
 800ea48:	e7eb      	b.n	800ea22 <__swsetup_r+0x1e>
 800ea4a:	4b24      	ldr	r3, [pc, #144]	; (800eadc <__swsetup_r+0xd8>)
 800ea4c:	429c      	cmp	r4, r3
 800ea4e:	bf08      	it	eq
 800ea50:	68ec      	ldreq	r4, [r5, #12]
 800ea52:	e7e6      	b.n	800ea22 <__swsetup_r+0x1e>
 800ea54:	0758      	lsls	r0, r3, #29
 800ea56:	d512      	bpl.n	800ea7e <__swsetup_r+0x7a>
 800ea58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ea5a:	b141      	cbz	r1, 800ea6e <__swsetup_r+0x6a>
 800ea5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ea60:	4299      	cmp	r1, r3
 800ea62:	d002      	beq.n	800ea6a <__swsetup_r+0x66>
 800ea64:	4630      	mov	r0, r6
 800ea66:	f7ff fb25 	bl	800e0b4 <_free_r>
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	6363      	str	r3, [r4, #52]	; 0x34
 800ea6e:	89a3      	ldrh	r3, [r4, #12]
 800ea70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ea74:	81a3      	strh	r3, [r4, #12]
 800ea76:	2300      	movs	r3, #0
 800ea78:	6063      	str	r3, [r4, #4]
 800ea7a:	6923      	ldr	r3, [r4, #16]
 800ea7c:	6023      	str	r3, [r4, #0]
 800ea7e:	89a3      	ldrh	r3, [r4, #12]
 800ea80:	f043 0308 	orr.w	r3, r3, #8
 800ea84:	81a3      	strh	r3, [r4, #12]
 800ea86:	6923      	ldr	r3, [r4, #16]
 800ea88:	b94b      	cbnz	r3, 800ea9e <__swsetup_r+0x9a>
 800ea8a:	89a3      	ldrh	r3, [r4, #12]
 800ea8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ea90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ea94:	d003      	beq.n	800ea9e <__swsetup_r+0x9a>
 800ea96:	4621      	mov	r1, r4
 800ea98:	4630      	mov	r0, r6
 800ea9a:	f000 fa09 	bl	800eeb0 <__smakebuf_r>
 800ea9e:	89a0      	ldrh	r0, [r4, #12]
 800eaa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eaa4:	f010 0301 	ands.w	r3, r0, #1
 800eaa8:	d00a      	beq.n	800eac0 <__swsetup_r+0xbc>
 800eaaa:	2300      	movs	r3, #0
 800eaac:	60a3      	str	r3, [r4, #8]
 800eaae:	6963      	ldr	r3, [r4, #20]
 800eab0:	425b      	negs	r3, r3
 800eab2:	61a3      	str	r3, [r4, #24]
 800eab4:	6923      	ldr	r3, [r4, #16]
 800eab6:	b943      	cbnz	r3, 800eaca <__swsetup_r+0xc6>
 800eab8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800eabc:	d1ba      	bne.n	800ea34 <__swsetup_r+0x30>
 800eabe:	bd70      	pop	{r4, r5, r6, pc}
 800eac0:	0781      	lsls	r1, r0, #30
 800eac2:	bf58      	it	pl
 800eac4:	6963      	ldrpl	r3, [r4, #20]
 800eac6:	60a3      	str	r3, [r4, #8]
 800eac8:	e7f4      	b.n	800eab4 <__swsetup_r+0xb0>
 800eaca:	2000      	movs	r0, #0
 800eacc:	e7f7      	b.n	800eabe <__swsetup_r+0xba>
 800eace:	bf00      	nop
 800ead0:	20000080 	.word	0x20000080
 800ead4:	0800f97c 	.word	0x0800f97c
 800ead8:	0800f99c 	.word	0x0800f99c
 800eadc:	0800f95c 	.word	0x0800f95c

0800eae0 <abort>:
 800eae0:	b508      	push	{r3, lr}
 800eae2:	2006      	movs	r0, #6
 800eae4:	f000 fa54 	bl	800ef90 <raise>
 800eae8:	2001      	movs	r0, #1
 800eaea:	f7f4 fc9f 	bl	800342c <_exit>
	...

0800eaf0 <__sflush_r>:
 800eaf0:	898a      	ldrh	r2, [r1, #12]
 800eaf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eaf6:	4605      	mov	r5, r0
 800eaf8:	0710      	lsls	r0, r2, #28
 800eafa:	460c      	mov	r4, r1
 800eafc:	d458      	bmi.n	800ebb0 <__sflush_r+0xc0>
 800eafe:	684b      	ldr	r3, [r1, #4]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	dc05      	bgt.n	800eb10 <__sflush_r+0x20>
 800eb04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	dc02      	bgt.n	800eb10 <__sflush_r+0x20>
 800eb0a:	2000      	movs	r0, #0
 800eb0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eb12:	2e00      	cmp	r6, #0
 800eb14:	d0f9      	beq.n	800eb0a <__sflush_r+0x1a>
 800eb16:	2300      	movs	r3, #0
 800eb18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eb1c:	682f      	ldr	r7, [r5, #0]
 800eb1e:	602b      	str	r3, [r5, #0]
 800eb20:	d032      	beq.n	800eb88 <__sflush_r+0x98>
 800eb22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eb24:	89a3      	ldrh	r3, [r4, #12]
 800eb26:	075a      	lsls	r2, r3, #29
 800eb28:	d505      	bpl.n	800eb36 <__sflush_r+0x46>
 800eb2a:	6863      	ldr	r3, [r4, #4]
 800eb2c:	1ac0      	subs	r0, r0, r3
 800eb2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eb30:	b10b      	cbz	r3, 800eb36 <__sflush_r+0x46>
 800eb32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eb34:	1ac0      	subs	r0, r0, r3
 800eb36:	2300      	movs	r3, #0
 800eb38:	4602      	mov	r2, r0
 800eb3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eb3c:	6a21      	ldr	r1, [r4, #32]
 800eb3e:	4628      	mov	r0, r5
 800eb40:	47b0      	blx	r6
 800eb42:	1c43      	adds	r3, r0, #1
 800eb44:	89a3      	ldrh	r3, [r4, #12]
 800eb46:	d106      	bne.n	800eb56 <__sflush_r+0x66>
 800eb48:	6829      	ldr	r1, [r5, #0]
 800eb4a:	291d      	cmp	r1, #29
 800eb4c:	d82c      	bhi.n	800eba8 <__sflush_r+0xb8>
 800eb4e:	4a2a      	ldr	r2, [pc, #168]	; (800ebf8 <__sflush_r+0x108>)
 800eb50:	40ca      	lsrs	r2, r1
 800eb52:	07d6      	lsls	r6, r2, #31
 800eb54:	d528      	bpl.n	800eba8 <__sflush_r+0xb8>
 800eb56:	2200      	movs	r2, #0
 800eb58:	6062      	str	r2, [r4, #4]
 800eb5a:	04d9      	lsls	r1, r3, #19
 800eb5c:	6922      	ldr	r2, [r4, #16]
 800eb5e:	6022      	str	r2, [r4, #0]
 800eb60:	d504      	bpl.n	800eb6c <__sflush_r+0x7c>
 800eb62:	1c42      	adds	r2, r0, #1
 800eb64:	d101      	bne.n	800eb6a <__sflush_r+0x7a>
 800eb66:	682b      	ldr	r3, [r5, #0]
 800eb68:	b903      	cbnz	r3, 800eb6c <__sflush_r+0x7c>
 800eb6a:	6560      	str	r0, [r4, #84]	; 0x54
 800eb6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eb6e:	602f      	str	r7, [r5, #0]
 800eb70:	2900      	cmp	r1, #0
 800eb72:	d0ca      	beq.n	800eb0a <__sflush_r+0x1a>
 800eb74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eb78:	4299      	cmp	r1, r3
 800eb7a:	d002      	beq.n	800eb82 <__sflush_r+0x92>
 800eb7c:	4628      	mov	r0, r5
 800eb7e:	f7ff fa99 	bl	800e0b4 <_free_r>
 800eb82:	2000      	movs	r0, #0
 800eb84:	6360      	str	r0, [r4, #52]	; 0x34
 800eb86:	e7c1      	b.n	800eb0c <__sflush_r+0x1c>
 800eb88:	6a21      	ldr	r1, [r4, #32]
 800eb8a:	2301      	movs	r3, #1
 800eb8c:	4628      	mov	r0, r5
 800eb8e:	47b0      	blx	r6
 800eb90:	1c41      	adds	r1, r0, #1
 800eb92:	d1c7      	bne.n	800eb24 <__sflush_r+0x34>
 800eb94:	682b      	ldr	r3, [r5, #0]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d0c4      	beq.n	800eb24 <__sflush_r+0x34>
 800eb9a:	2b1d      	cmp	r3, #29
 800eb9c:	d001      	beq.n	800eba2 <__sflush_r+0xb2>
 800eb9e:	2b16      	cmp	r3, #22
 800eba0:	d101      	bne.n	800eba6 <__sflush_r+0xb6>
 800eba2:	602f      	str	r7, [r5, #0]
 800eba4:	e7b1      	b.n	800eb0a <__sflush_r+0x1a>
 800eba6:	89a3      	ldrh	r3, [r4, #12]
 800eba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebac:	81a3      	strh	r3, [r4, #12]
 800ebae:	e7ad      	b.n	800eb0c <__sflush_r+0x1c>
 800ebb0:	690f      	ldr	r7, [r1, #16]
 800ebb2:	2f00      	cmp	r7, #0
 800ebb4:	d0a9      	beq.n	800eb0a <__sflush_r+0x1a>
 800ebb6:	0793      	lsls	r3, r2, #30
 800ebb8:	680e      	ldr	r6, [r1, #0]
 800ebba:	bf08      	it	eq
 800ebbc:	694b      	ldreq	r3, [r1, #20]
 800ebbe:	600f      	str	r7, [r1, #0]
 800ebc0:	bf18      	it	ne
 800ebc2:	2300      	movne	r3, #0
 800ebc4:	eba6 0807 	sub.w	r8, r6, r7
 800ebc8:	608b      	str	r3, [r1, #8]
 800ebca:	f1b8 0f00 	cmp.w	r8, #0
 800ebce:	dd9c      	ble.n	800eb0a <__sflush_r+0x1a>
 800ebd0:	6a21      	ldr	r1, [r4, #32]
 800ebd2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ebd4:	4643      	mov	r3, r8
 800ebd6:	463a      	mov	r2, r7
 800ebd8:	4628      	mov	r0, r5
 800ebda:	47b0      	blx	r6
 800ebdc:	2800      	cmp	r0, #0
 800ebde:	dc06      	bgt.n	800ebee <__sflush_r+0xfe>
 800ebe0:	89a3      	ldrh	r3, [r4, #12]
 800ebe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebe6:	81a3      	strh	r3, [r4, #12]
 800ebe8:	f04f 30ff 	mov.w	r0, #4294967295
 800ebec:	e78e      	b.n	800eb0c <__sflush_r+0x1c>
 800ebee:	4407      	add	r7, r0
 800ebf0:	eba8 0800 	sub.w	r8, r8, r0
 800ebf4:	e7e9      	b.n	800ebca <__sflush_r+0xda>
 800ebf6:	bf00      	nop
 800ebf8:	20400001 	.word	0x20400001

0800ebfc <_fflush_r>:
 800ebfc:	b538      	push	{r3, r4, r5, lr}
 800ebfe:	690b      	ldr	r3, [r1, #16]
 800ec00:	4605      	mov	r5, r0
 800ec02:	460c      	mov	r4, r1
 800ec04:	b913      	cbnz	r3, 800ec0c <_fflush_r+0x10>
 800ec06:	2500      	movs	r5, #0
 800ec08:	4628      	mov	r0, r5
 800ec0a:	bd38      	pop	{r3, r4, r5, pc}
 800ec0c:	b118      	cbz	r0, 800ec16 <_fflush_r+0x1a>
 800ec0e:	6983      	ldr	r3, [r0, #24]
 800ec10:	b90b      	cbnz	r3, 800ec16 <_fflush_r+0x1a>
 800ec12:	f000 f887 	bl	800ed24 <__sinit>
 800ec16:	4b14      	ldr	r3, [pc, #80]	; (800ec68 <_fflush_r+0x6c>)
 800ec18:	429c      	cmp	r4, r3
 800ec1a:	d11b      	bne.n	800ec54 <_fflush_r+0x58>
 800ec1c:	686c      	ldr	r4, [r5, #4]
 800ec1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d0ef      	beq.n	800ec06 <_fflush_r+0xa>
 800ec26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ec28:	07d0      	lsls	r0, r2, #31
 800ec2a:	d404      	bmi.n	800ec36 <_fflush_r+0x3a>
 800ec2c:	0599      	lsls	r1, r3, #22
 800ec2e:	d402      	bmi.n	800ec36 <_fflush_r+0x3a>
 800ec30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec32:	f000 f915 	bl	800ee60 <__retarget_lock_acquire_recursive>
 800ec36:	4628      	mov	r0, r5
 800ec38:	4621      	mov	r1, r4
 800ec3a:	f7ff ff59 	bl	800eaf0 <__sflush_r>
 800ec3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ec40:	07da      	lsls	r2, r3, #31
 800ec42:	4605      	mov	r5, r0
 800ec44:	d4e0      	bmi.n	800ec08 <_fflush_r+0xc>
 800ec46:	89a3      	ldrh	r3, [r4, #12]
 800ec48:	059b      	lsls	r3, r3, #22
 800ec4a:	d4dd      	bmi.n	800ec08 <_fflush_r+0xc>
 800ec4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec4e:	f000 f908 	bl	800ee62 <__retarget_lock_release_recursive>
 800ec52:	e7d9      	b.n	800ec08 <_fflush_r+0xc>
 800ec54:	4b05      	ldr	r3, [pc, #20]	; (800ec6c <_fflush_r+0x70>)
 800ec56:	429c      	cmp	r4, r3
 800ec58:	d101      	bne.n	800ec5e <_fflush_r+0x62>
 800ec5a:	68ac      	ldr	r4, [r5, #8]
 800ec5c:	e7df      	b.n	800ec1e <_fflush_r+0x22>
 800ec5e:	4b04      	ldr	r3, [pc, #16]	; (800ec70 <_fflush_r+0x74>)
 800ec60:	429c      	cmp	r4, r3
 800ec62:	bf08      	it	eq
 800ec64:	68ec      	ldreq	r4, [r5, #12]
 800ec66:	e7da      	b.n	800ec1e <_fflush_r+0x22>
 800ec68:	0800f97c 	.word	0x0800f97c
 800ec6c:	0800f99c 	.word	0x0800f99c
 800ec70:	0800f95c 	.word	0x0800f95c

0800ec74 <std>:
 800ec74:	2300      	movs	r3, #0
 800ec76:	b510      	push	{r4, lr}
 800ec78:	4604      	mov	r4, r0
 800ec7a:	e9c0 3300 	strd	r3, r3, [r0]
 800ec7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ec82:	6083      	str	r3, [r0, #8]
 800ec84:	8181      	strh	r1, [r0, #12]
 800ec86:	6643      	str	r3, [r0, #100]	; 0x64
 800ec88:	81c2      	strh	r2, [r0, #14]
 800ec8a:	6183      	str	r3, [r0, #24]
 800ec8c:	4619      	mov	r1, r3
 800ec8e:	2208      	movs	r2, #8
 800ec90:	305c      	adds	r0, #92	; 0x5c
 800ec92:	f7fb fdcd 	bl	800a830 <memset>
 800ec96:	4b05      	ldr	r3, [pc, #20]	; (800ecac <std+0x38>)
 800ec98:	6263      	str	r3, [r4, #36]	; 0x24
 800ec9a:	4b05      	ldr	r3, [pc, #20]	; (800ecb0 <std+0x3c>)
 800ec9c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ec9e:	4b05      	ldr	r3, [pc, #20]	; (800ecb4 <std+0x40>)
 800eca0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800eca2:	4b05      	ldr	r3, [pc, #20]	; (800ecb8 <std+0x44>)
 800eca4:	6224      	str	r4, [r4, #32]
 800eca6:	6323      	str	r3, [r4, #48]	; 0x30
 800eca8:	bd10      	pop	{r4, pc}
 800ecaa:	bf00      	nop
 800ecac:	0800efc9 	.word	0x0800efc9
 800ecb0:	0800efeb 	.word	0x0800efeb
 800ecb4:	0800f023 	.word	0x0800f023
 800ecb8:	0800f047 	.word	0x0800f047

0800ecbc <_cleanup_r>:
 800ecbc:	4901      	ldr	r1, [pc, #4]	; (800ecc4 <_cleanup_r+0x8>)
 800ecbe:	f000 b8af 	b.w	800ee20 <_fwalk_reent>
 800ecc2:	bf00      	nop
 800ecc4:	0800ebfd 	.word	0x0800ebfd

0800ecc8 <__sfmoreglue>:
 800ecc8:	b570      	push	{r4, r5, r6, lr}
 800ecca:	2268      	movs	r2, #104	; 0x68
 800eccc:	1e4d      	subs	r5, r1, #1
 800ecce:	4355      	muls	r5, r2
 800ecd0:	460e      	mov	r6, r1
 800ecd2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ecd6:	f7ff fa59 	bl	800e18c <_malloc_r>
 800ecda:	4604      	mov	r4, r0
 800ecdc:	b140      	cbz	r0, 800ecf0 <__sfmoreglue+0x28>
 800ecde:	2100      	movs	r1, #0
 800ece0:	e9c0 1600 	strd	r1, r6, [r0]
 800ece4:	300c      	adds	r0, #12
 800ece6:	60a0      	str	r0, [r4, #8]
 800ece8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ecec:	f7fb fda0 	bl	800a830 <memset>
 800ecf0:	4620      	mov	r0, r4
 800ecf2:	bd70      	pop	{r4, r5, r6, pc}

0800ecf4 <__sfp_lock_acquire>:
 800ecf4:	4801      	ldr	r0, [pc, #4]	; (800ecfc <__sfp_lock_acquire+0x8>)
 800ecf6:	f000 b8b3 	b.w	800ee60 <__retarget_lock_acquire_recursive>
 800ecfa:	bf00      	nop
 800ecfc:	2000467d 	.word	0x2000467d

0800ed00 <__sfp_lock_release>:
 800ed00:	4801      	ldr	r0, [pc, #4]	; (800ed08 <__sfp_lock_release+0x8>)
 800ed02:	f000 b8ae 	b.w	800ee62 <__retarget_lock_release_recursive>
 800ed06:	bf00      	nop
 800ed08:	2000467d 	.word	0x2000467d

0800ed0c <__sinit_lock_acquire>:
 800ed0c:	4801      	ldr	r0, [pc, #4]	; (800ed14 <__sinit_lock_acquire+0x8>)
 800ed0e:	f000 b8a7 	b.w	800ee60 <__retarget_lock_acquire_recursive>
 800ed12:	bf00      	nop
 800ed14:	2000467e 	.word	0x2000467e

0800ed18 <__sinit_lock_release>:
 800ed18:	4801      	ldr	r0, [pc, #4]	; (800ed20 <__sinit_lock_release+0x8>)
 800ed1a:	f000 b8a2 	b.w	800ee62 <__retarget_lock_release_recursive>
 800ed1e:	bf00      	nop
 800ed20:	2000467e 	.word	0x2000467e

0800ed24 <__sinit>:
 800ed24:	b510      	push	{r4, lr}
 800ed26:	4604      	mov	r4, r0
 800ed28:	f7ff fff0 	bl	800ed0c <__sinit_lock_acquire>
 800ed2c:	69a3      	ldr	r3, [r4, #24]
 800ed2e:	b11b      	cbz	r3, 800ed38 <__sinit+0x14>
 800ed30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed34:	f7ff bff0 	b.w	800ed18 <__sinit_lock_release>
 800ed38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ed3c:	6523      	str	r3, [r4, #80]	; 0x50
 800ed3e:	4b13      	ldr	r3, [pc, #76]	; (800ed8c <__sinit+0x68>)
 800ed40:	4a13      	ldr	r2, [pc, #76]	; (800ed90 <__sinit+0x6c>)
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	62a2      	str	r2, [r4, #40]	; 0x28
 800ed46:	42a3      	cmp	r3, r4
 800ed48:	bf04      	itt	eq
 800ed4a:	2301      	moveq	r3, #1
 800ed4c:	61a3      	streq	r3, [r4, #24]
 800ed4e:	4620      	mov	r0, r4
 800ed50:	f000 f820 	bl	800ed94 <__sfp>
 800ed54:	6060      	str	r0, [r4, #4]
 800ed56:	4620      	mov	r0, r4
 800ed58:	f000 f81c 	bl	800ed94 <__sfp>
 800ed5c:	60a0      	str	r0, [r4, #8]
 800ed5e:	4620      	mov	r0, r4
 800ed60:	f000 f818 	bl	800ed94 <__sfp>
 800ed64:	2200      	movs	r2, #0
 800ed66:	60e0      	str	r0, [r4, #12]
 800ed68:	2104      	movs	r1, #4
 800ed6a:	6860      	ldr	r0, [r4, #4]
 800ed6c:	f7ff ff82 	bl	800ec74 <std>
 800ed70:	68a0      	ldr	r0, [r4, #8]
 800ed72:	2201      	movs	r2, #1
 800ed74:	2109      	movs	r1, #9
 800ed76:	f7ff ff7d 	bl	800ec74 <std>
 800ed7a:	68e0      	ldr	r0, [r4, #12]
 800ed7c:	2202      	movs	r2, #2
 800ed7e:	2112      	movs	r1, #18
 800ed80:	f7ff ff78 	bl	800ec74 <std>
 800ed84:	2301      	movs	r3, #1
 800ed86:	61a3      	str	r3, [r4, #24]
 800ed88:	e7d2      	b.n	800ed30 <__sinit+0xc>
 800ed8a:	bf00      	nop
 800ed8c:	0800f518 	.word	0x0800f518
 800ed90:	0800ecbd 	.word	0x0800ecbd

0800ed94 <__sfp>:
 800ed94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed96:	4607      	mov	r7, r0
 800ed98:	f7ff ffac 	bl	800ecf4 <__sfp_lock_acquire>
 800ed9c:	4b1e      	ldr	r3, [pc, #120]	; (800ee18 <__sfp+0x84>)
 800ed9e:	681e      	ldr	r6, [r3, #0]
 800eda0:	69b3      	ldr	r3, [r6, #24]
 800eda2:	b913      	cbnz	r3, 800edaa <__sfp+0x16>
 800eda4:	4630      	mov	r0, r6
 800eda6:	f7ff ffbd 	bl	800ed24 <__sinit>
 800edaa:	3648      	adds	r6, #72	; 0x48
 800edac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800edb0:	3b01      	subs	r3, #1
 800edb2:	d503      	bpl.n	800edbc <__sfp+0x28>
 800edb4:	6833      	ldr	r3, [r6, #0]
 800edb6:	b30b      	cbz	r3, 800edfc <__sfp+0x68>
 800edb8:	6836      	ldr	r6, [r6, #0]
 800edba:	e7f7      	b.n	800edac <__sfp+0x18>
 800edbc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800edc0:	b9d5      	cbnz	r5, 800edf8 <__sfp+0x64>
 800edc2:	4b16      	ldr	r3, [pc, #88]	; (800ee1c <__sfp+0x88>)
 800edc4:	60e3      	str	r3, [r4, #12]
 800edc6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800edca:	6665      	str	r5, [r4, #100]	; 0x64
 800edcc:	f000 f847 	bl	800ee5e <__retarget_lock_init_recursive>
 800edd0:	f7ff ff96 	bl	800ed00 <__sfp_lock_release>
 800edd4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800edd8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800eddc:	6025      	str	r5, [r4, #0]
 800edde:	61a5      	str	r5, [r4, #24]
 800ede0:	2208      	movs	r2, #8
 800ede2:	4629      	mov	r1, r5
 800ede4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ede8:	f7fb fd22 	bl	800a830 <memset>
 800edec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800edf0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800edf4:	4620      	mov	r0, r4
 800edf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800edf8:	3468      	adds	r4, #104	; 0x68
 800edfa:	e7d9      	b.n	800edb0 <__sfp+0x1c>
 800edfc:	2104      	movs	r1, #4
 800edfe:	4638      	mov	r0, r7
 800ee00:	f7ff ff62 	bl	800ecc8 <__sfmoreglue>
 800ee04:	4604      	mov	r4, r0
 800ee06:	6030      	str	r0, [r6, #0]
 800ee08:	2800      	cmp	r0, #0
 800ee0a:	d1d5      	bne.n	800edb8 <__sfp+0x24>
 800ee0c:	f7ff ff78 	bl	800ed00 <__sfp_lock_release>
 800ee10:	230c      	movs	r3, #12
 800ee12:	603b      	str	r3, [r7, #0]
 800ee14:	e7ee      	b.n	800edf4 <__sfp+0x60>
 800ee16:	bf00      	nop
 800ee18:	0800f518 	.word	0x0800f518
 800ee1c:	ffff0001 	.word	0xffff0001

0800ee20 <_fwalk_reent>:
 800ee20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee24:	4606      	mov	r6, r0
 800ee26:	4688      	mov	r8, r1
 800ee28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ee2c:	2700      	movs	r7, #0
 800ee2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ee32:	f1b9 0901 	subs.w	r9, r9, #1
 800ee36:	d505      	bpl.n	800ee44 <_fwalk_reent+0x24>
 800ee38:	6824      	ldr	r4, [r4, #0]
 800ee3a:	2c00      	cmp	r4, #0
 800ee3c:	d1f7      	bne.n	800ee2e <_fwalk_reent+0xe>
 800ee3e:	4638      	mov	r0, r7
 800ee40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee44:	89ab      	ldrh	r3, [r5, #12]
 800ee46:	2b01      	cmp	r3, #1
 800ee48:	d907      	bls.n	800ee5a <_fwalk_reent+0x3a>
 800ee4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ee4e:	3301      	adds	r3, #1
 800ee50:	d003      	beq.n	800ee5a <_fwalk_reent+0x3a>
 800ee52:	4629      	mov	r1, r5
 800ee54:	4630      	mov	r0, r6
 800ee56:	47c0      	blx	r8
 800ee58:	4307      	orrs	r7, r0
 800ee5a:	3568      	adds	r5, #104	; 0x68
 800ee5c:	e7e9      	b.n	800ee32 <_fwalk_reent+0x12>

0800ee5e <__retarget_lock_init_recursive>:
 800ee5e:	4770      	bx	lr

0800ee60 <__retarget_lock_acquire_recursive>:
 800ee60:	4770      	bx	lr

0800ee62 <__retarget_lock_release_recursive>:
 800ee62:	4770      	bx	lr

0800ee64 <__swhatbuf_r>:
 800ee64:	b570      	push	{r4, r5, r6, lr}
 800ee66:	460e      	mov	r6, r1
 800ee68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee6c:	2900      	cmp	r1, #0
 800ee6e:	b096      	sub	sp, #88	; 0x58
 800ee70:	4614      	mov	r4, r2
 800ee72:	461d      	mov	r5, r3
 800ee74:	da08      	bge.n	800ee88 <__swhatbuf_r+0x24>
 800ee76:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	602a      	str	r2, [r5, #0]
 800ee7e:	061a      	lsls	r2, r3, #24
 800ee80:	d410      	bmi.n	800eea4 <__swhatbuf_r+0x40>
 800ee82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ee86:	e00e      	b.n	800eea6 <__swhatbuf_r+0x42>
 800ee88:	466a      	mov	r2, sp
 800ee8a:	f000 f903 	bl	800f094 <_fstat_r>
 800ee8e:	2800      	cmp	r0, #0
 800ee90:	dbf1      	blt.n	800ee76 <__swhatbuf_r+0x12>
 800ee92:	9a01      	ldr	r2, [sp, #4]
 800ee94:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ee98:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ee9c:	425a      	negs	r2, r3
 800ee9e:	415a      	adcs	r2, r3
 800eea0:	602a      	str	r2, [r5, #0]
 800eea2:	e7ee      	b.n	800ee82 <__swhatbuf_r+0x1e>
 800eea4:	2340      	movs	r3, #64	; 0x40
 800eea6:	2000      	movs	r0, #0
 800eea8:	6023      	str	r3, [r4, #0]
 800eeaa:	b016      	add	sp, #88	; 0x58
 800eeac:	bd70      	pop	{r4, r5, r6, pc}
	...

0800eeb0 <__smakebuf_r>:
 800eeb0:	898b      	ldrh	r3, [r1, #12]
 800eeb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800eeb4:	079d      	lsls	r5, r3, #30
 800eeb6:	4606      	mov	r6, r0
 800eeb8:	460c      	mov	r4, r1
 800eeba:	d507      	bpl.n	800eecc <__smakebuf_r+0x1c>
 800eebc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800eec0:	6023      	str	r3, [r4, #0]
 800eec2:	6123      	str	r3, [r4, #16]
 800eec4:	2301      	movs	r3, #1
 800eec6:	6163      	str	r3, [r4, #20]
 800eec8:	b002      	add	sp, #8
 800eeca:	bd70      	pop	{r4, r5, r6, pc}
 800eecc:	ab01      	add	r3, sp, #4
 800eece:	466a      	mov	r2, sp
 800eed0:	f7ff ffc8 	bl	800ee64 <__swhatbuf_r>
 800eed4:	9900      	ldr	r1, [sp, #0]
 800eed6:	4605      	mov	r5, r0
 800eed8:	4630      	mov	r0, r6
 800eeda:	f7ff f957 	bl	800e18c <_malloc_r>
 800eede:	b948      	cbnz	r0, 800eef4 <__smakebuf_r+0x44>
 800eee0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eee4:	059a      	lsls	r2, r3, #22
 800eee6:	d4ef      	bmi.n	800eec8 <__smakebuf_r+0x18>
 800eee8:	f023 0303 	bic.w	r3, r3, #3
 800eeec:	f043 0302 	orr.w	r3, r3, #2
 800eef0:	81a3      	strh	r3, [r4, #12]
 800eef2:	e7e3      	b.n	800eebc <__smakebuf_r+0xc>
 800eef4:	4b0d      	ldr	r3, [pc, #52]	; (800ef2c <__smakebuf_r+0x7c>)
 800eef6:	62b3      	str	r3, [r6, #40]	; 0x28
 800eef8:	89a3      	ldrh	r3, [r4, #12]
 800eefa:	6020      	str	r0, [r4, #0]
 800eefc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef00:	81a3      	strh	r3, [r4, #12]
 800ef02:	9b00      	ldr	r3, [sp, #0]
 800ef04:	6163      	str	r3, [r4, #20]
 800ef06:	9b01      	ldr	r3, [sp, #4]
 800ef08:	6120      	str	r0, [r4, #16]
 800ef0a:	b15b      	cbz	r3, 800ef24 <__smakebuf_r+0x74>
 800ef0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ef10:	4630      	mov	r0, r6
 800ef12:	f000 f8d1 	bl	800f0b8 <_isatty_r>
 800ef16:	b128      	cbz	r0, 800ef24 <__smakebuf_r+0x74>
 800ef18:	89a3      	ldrh	r3, [r4, #12]
 800ef1a:	f023 0303 	bic.w	r3, r3, #3
 800ef1e:	f043 0301 	orr.w	r3, r3, #1
 800ef22:	81a3      	strh	r3, [r4, #12]
 800ef24:	89a0      	ldrh	r0, [r4, #12]
 800ef26:	4305      	orrs	r5, r0
 800ef28:	81a5      	strh	r5, [r4, #12]
 800ef2a:	e7cd      	b.n	800eec8 <__smakebuf_r+0x18>
 800ef2c:	0800ecbd 	.word	0x0800ecbd

0800ef30 <_malloc_usable_size_r>:
 800ef30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef34:	1f18      	subs	r0, r3, #4
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	bfbc      	itt	lt
 800ef3a:	580b      	ldrlt	r3, [r1, r0]
 800ef3c:	18c0      	addlt	r0, r0, r3
 800ef3e:	4770      	bx	lr

0800ef40 <_raise_r>:
 800ef40:	291f      	cmp	r1, #31
 800ef42:	b538      	push	{r3, r4, r5, lr}
 800ef44:	4604      	mov	r4, r0
 800ef46:	460d      	mov	r5, r1
 800ef48:	d904      	bls.n	800ef54 <_raise_r+0x14>
 800ef4a:	2316      	movs	r3, #22
 800ef4c:	6003      	str	r3, [r0, #0]
 800ef4e:	f04f 30ff 	mov.w	r0, #4294967295
 800ef52:	bd38      	pop	{r3, r4, r5, pc}
 800ef54:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ef56:	b112      	cbz	r2, 800ef5e <_raise_r+0x1e>
 800ef58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ef5c:	b94b      	cbnz	r3, 800ef72 <_raise_r+0x32>
 800ef5e:	4620      	mov	r0, r4
 800ef60:	f000 f830 	bl	800efc4 <_getpid_r>
 800ef64:	462a      	mov	r2, r5
 800ef66:	4601      	mov	r1, r0
 800ef68:	4620      	mov	r0, r4
 800ef6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef6e:	f000 b817 	b.w	800efa0 <_kill_r>
 800ef72:	2b01      	cmp	r3, #1
 800ef74:	d00a      	beq.n	800ef8c <_raise_r+0x4c>
 800ef76:	1c59      	adds	r1, r3, #1
 800ef78:	d103      	bne.n	800ef82 <_raise_r+0x42>
 800ef7a:	2316      	movs	r3, #22
 800ef7c:	6003      	str	r3, [r0, #0]
 800ef7e:	2001      	movs	r0, #1
 800ef80:	e7e7      	b.n	800ef52 <_raise_r+0x12>
 800ef82:	2400      	movs	r4, #0
 800ef84:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ef88:	4628      	mov	r0, r5
 800ef8a:	4798      	blx	r3
 800ef8c:	2000      	movs	r0, #0
 800ef8e:	e7e0      	b.n	800ef52 <_raise_r+0x12>

0800ef90 <raise>:
 800ef90:	4b02      	ldr	r3, [pc, #8]	; (800ef9c <raise+0xc>)
 800ef92:	4601      	mov	r1, r0
 800ef94:	6818      	ldr	r0, [r3, #0]
 800ef96:	f7ff bfd3 	b.w	800ef40 <_raise_r>
 800ef9a:	bf00      	nop
 800ef9c:	20000080 	.word	0x20000080

0800efa0 <_kill_r>:
 800efa0:	b538      	push	{r3, r4, r5, lr}
 800efa2:	4d07      	ldr	r5, [pc, #28]	; (800efc0 <_kill_r+0x20>)
 800efa4:	2300      	movs	r3, #0
 800efa6:	4604      	mov	r4, r0
 800efa8:	4608      	mov	r0, r1
 800efaa:	4611      	mov	r1, r2
 800efac:	602b      	str	r3, [r5, #0]
 800efae:	f7f4 fa2d 	bl	800340c <_kill>
 800efb2:	1c43      	adds	r3, r0, #1
 800efb4:	d102      	bne.n	800efbc <_kill_r+0x1c>
 800efb6:	682b      	ldr	r3, [r5, #0]
 800efb8:	b103      	cbz	r3, 800efbc <_kill_r+0x1c>
 800efba:	6023      	str	r3, [r4, #0]
 800efbc:	bd38      	pop	{r3, r4, r5, pc}
 800efbe:	bf00      	nop
 800efc0:	20004678 	.word	0x20004678

0800efc4 <_getpid_r>:
 800efc4:	f7f4 ba1a 	b.w	80033fc <_getpid>

0800efc8 <__sread>:
 800efc8:	b510      	push	{r4, lr}
 800efca:	460c      	mov	r4, r1
 800efcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efd0:	f000 f894 	bl	800f0fc <_read_r>
 800efd4:	2800      	cmp	r0, #0
 800efd6:	bfab      	itete	ge
 800efd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800efda:	89a3      	ldrhlt	r3, [r4, #12]
 800efdc:	181b      	addge	r3, r3, r0
 800efde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800efe2:	bfac      	ite	ge
 800efe4:	6563      	strge	r3, [r4, #84]	; 0x54
 800efe6:	81a3      	strhlt	r3, [r4, #12]
 800efe8:	bd10      	pop	{r4, pc}

0800efea <__swrite>:
 800efea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efee:	461f      	mov	r7, r3
 800eff0:	898b      	ldrh	r3, [r1, #12]
 800eff2:	05db      	lsls	r3, r3, #23
 800eff4:	4605      	mov	r5, r0
 800eff6:	460c      	mov	r4, r1
 800eff8:	4616      	mov	r6, r2
 800effa:	d505      	bpl.n	800f008 <__swrite+0x1e>
 800effc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f000:	2302      	movs	r3, #2
 800f002:	2200      	movs	r2, #0
 800f004:	f000 f868 	bl	800f0d8 <_lseek_r>
 800f008:	89a3      	ldrh	r3, [r4, #12]
 800f00a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f00e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f012:	81a3      	strh	r3, [r4, #12]
 800f014:	4632      	mov	r2, r6
 800f016:	463b      	mov	r3, r7
 800f018:	4628      	mov	r0, r5
 800f01a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f01e:	f000 b817 	b.w	800f050 <_write_r>

0800f022 <__sseek>:
 800f022:	b510      	push	{r4, lr}
 800f024:	460c      	mov	r4, r1
 800f026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f02a:	f000 f855 	bl	800f0d8 <_lseek_r>
 800f02e:	1c43      	adds	r3, r0, #1
 800f030:	89a3      	ldrh	r3, [r4, #12]
 800f032:	bf15      	itete	ne
 800f034:	6560      	strne	r0, [r4, #84]	; 0x54
 800f036:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f03a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f03e:	81a3      	strheq	r3, [r4, #12]
 800f040:	bf18      	it	ne
 800f042:	81a3      	strhne	r3, [r4, #12]
 800f044:	bd10      	pop	{r4, pc}

0800f046 <__sclose>:
 800f046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f04a:	f000 b813 	b.w	800f074 <_close_r>
	...

0800f050 <_write_r>:
 800f050:	b538      	push	{r3, r4, r5, lr}
 800f052:	4d07      	ldr	r5, [pc, #28]	; (800f070 <_write_r+0x20>)
 800f054:	4604      	mov	r4, r0
 800f056:	4608      	mov	r0, r1
 800f058:	4611      	mov	r1, r2
 800f05a:	2200      	movs	r2, #0
 800f05c:	602a      	str	r2, [r5, #0]
 800f05e:	461a      	mov	r2, r3
 800f060:	f7f4 fa0b 	bl	800347a <_write>
 800f064:	1c43      	adds	r3, r0, #1
 800f066:	d102      	bne.n	800f06e <_write_r+0x1e>
 800f068:	682b      	ldr	r3, [r5, #0]
 800f06a:	b103      	cbz	r3, 800f06e <_write_r+0x1e>
 800f06c:	6023      	str	r3, [r4, #0]
 800f06e:	bd38      	pop	{r3, r4, r5, pc}
 800f070:	20004678 	.word	0x20004678

0800f074 <_close_r>:
 800f074:	b538      	push	{r3, r4, r5, lr}
 800f076:	4d06      	ldr	r5, [pc, #24]	; (800f090 <_close_r+0x1c>)
 800f078:	2300      	movs	r3, #0
 800f07a:	4604      	mov	r4, r0
 800f07c:	4608      	mov	r0, r1
 800f07e:	602b      	str	r3, [r5, #0]
 800f080:	f7f4 fa17 	bl	80034b2 <_close>
 800f084:	1c43      	adds	r3, r0, #1
 800f086:	d102      	bne.n	800f08e <_close_r+0x1a>
 800f088:	682b      	ldr	r3, [r5, #0]
 800f08a:	b103      	cbz	r3, 800f08e <_close_r+0x1a>
 800f08c:	6023      	str	r3, [r4, #0]
 800f08e:	bd38      	pop	{r3, r4, r5, pc}
 800f090:	20004678 	.word	0x20004678

0800f094 <_fstat_r>:
 800f094:	b538      	push	{r3, r4, r5, lr}
 800f096:	4d07      	ldr	r5, [pc, #28]	; (800f0b4 <_fstat_r+0x20>)
 800f098:	2300      	movs	r3, #0
 800f09a:	4604      	mov	r4, r0
 800f09c:	4608      	mov	r0, r1
 800f09e:	4611      	mov	r1, r2
 800f0a0:	602b      	str	r3, [r5, #0]
 800f0a2:	f7f4 fa12 	bl	80034ca <_fstat>
 800f0a6:	1c43      	adds	r3, r0, #1
 800f0a8:	d102      	bne.n	800f0b0 <_fstat_r+0x1c>
 800f0aa:	682b      	ldr	r3, [r5, #0]
 800f0ac:	b103      	cbz	r3, 800f0b0 <_fstat_r+0x1c>
 800f0ae:	6023      	str	r3, [r4, #0]
 800f0b0:	bd38      	pop	{r3, r4, r5, pc}
 800f0b2:	bf00      	nop
 800f0b4:	20004678 	.word	0x20004678

0800f0b8 <_isatty_r>:
 800f0b8:	b538      	push	{r3, r4, r5, lr}
 800f0ba:	4d06      	ldr	r5, [pc, #24]	; (800f0d4 <_isatty_r+0x1c>)
 800f0bc:	2300      	movs	r3, #0
 800f0be:	4604      	mov	r4, r0
 800f0c0:	4608      	mov	r0, r1
 800f0c2:	602b      	str	r3, [r5, #0]
 800f0c4:	f7f4 fa11 	bl	80034ea <_isatty>
 800f0c8:	1c43      	adds	r3, r0, #1
 800f0ca:	d102      	bne.n	800f0d2 <_isatty_r+0x1a>
 800f0cc:	682b      	ldr	r3, [r5, #0]
 800f0ce:	b103      	cbz	r3, 800f0d2 <_isatty_r+0x1a>
 800f0d0:	6023      	str	r3, [r4, #0]
 800f0d2:	bd38      	pop	{r3, r4, r5, pc}
 800f0d4:	20004678 	.word	0x20004678

0800f0d8 <_lseek_r>:
 800f0d8:	b538      	push	{r3, r4, r5, lr}
 800f0da:	4d07      	ldr	r5, [pc, #28]	; (800f0f8 <_lseek_r+0x20>)
 800f0dc:	4604      	mov	r4, r0
 800f0de:	4608      	mov	r0, r1
 800f0e0:	4611      	mov	r1, r2
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	602a      	str	r2, [r5, #0]
 800f0e6:	461a      	mov	r2, r3
 800f0e8:	f7f4 fa0a 	bl	8003500 <_lseek>
 800f0ec:	1c43      	adds	r3, r0, #1
 800f0ee:	d102      	bne.n	800f0f6 <_lseek_r+0x1e>
 800f0f0:	682b      	ldr	r3, [r5, #0]
 800f0f2:	b103      	cbz	r3, 800f0f6 <_lseek_r+0x1e>
 800f0f4:	6023      	str	r3, [r4, #0]
 800f0f6:	bd38      	pop	{r3, r4, r5, pc}
 800f0f8:	20004678 	.word	0x20004678

0800f0fc <_read_r>:
 800f0fc:	b538      	push	{r3, r4, r5, lr}
 800f0fe:	4d07      	ldr	r5, [pc, #28]	; (800f11c <_read_r+0x20>)
 800f100:	4604      	mov	r4, r0
 800f102:	4608      	mov	r0, r1
 800f104:	4611      	mov	r1, r2
 800f106:	2200      	movs	r2, #0
 800f108:	602a      	str	r2, [r5, #0]
 800f10a:	461a      	mov	r2, r3
 800f10c:	f7f4 f998 	bl	8003440 <_read>
 800f110:	1c43      	adds	r3, r0, #1
 800f112:	d102      	bne.n	800f11a <_read_r+0x1e>
 800f114:	682b      	ldr	r3, [r5, #0]
 800f116:	b103      	cbz	r3, 800f11a <_read_r+0x1e>
 800f118:	6023      	str	r3, [r4, #0]
 800f11a:	bd38      	pop	{r3, r4, r5, pc}
 800f11c:	20004678 	.word	0x20004678

0800f120 <_init>:
 800f120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f122:	bf00      	nop
 800f124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f126:	bc08      	pop	{r3}
 800f128:	469e      	mov	lr, r3
 800f12a:	4770      	bx	lr

0800f12c <_fini>:
 800f12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f12e:	bf00      	nop
 800f130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f132:	bc08      	pop	{r3}
 800f134:	469e      	mov	lr, r3
 800f136:	4770      	bx	lr
